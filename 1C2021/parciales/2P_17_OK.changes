

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (5 July 2021 17:53:11) as D:\Facultad\2021-1C-IS1\CuisUniversity_win64\Parcial2\SegundaVersion\windows64\CuisUniversity-4532.image!


----End fileIn of D:\Facultad\2021-1C-IS1\CuisUniversity_win64\Parcial2\ISW1-2021-1C-2doParcial.st----!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 17:54:24'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'no messages' stamp: 'GR 7/5/2021 17:54:34'!
test01

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 17:56:27' prior: 50859866!
test01

	| cartasMano |
	cartasMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada.}! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 17:56:54'!
anchoDeBasto

	^ CartaDeTruco anchoDeBasto! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 17:56:55' prior: 50859870!
test01

	| cartasMano |
	cartasMano := {self anchoDeBasto. CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada.}! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 17:57:09' prior: 50859882!
test01

	| cartasMano |
	cartasMano := {self anchoDeBasto. self anchoDeBasto. CartaDeTruco anchoDeEspada.}! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 17:57:22'!
anchoDeEspada

	^ CartaDeTruco anchoDeEspada! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 17:57:22' prior: 50859889!
test01

	| cartasMano |
	cartasMano := {self anchoDeBasto. self anchoDeBasto. self anchoDeEspada.}! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 17:57:27' prior: 50859901!
test01

	| cartasMano |
	cartasMano := {self anchoDeBasto. self anchoDeBasto. self anchoDeEspada.}.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 17:58:09' prior: 50859908!
test01

	| cartasMano cartasPie |
	cartasMano := {self anchoDeBasto. self anchoDeBasto. self anchoDeEspada.}.
	cartasPie := {self anchoDeBasto. self anchoDeBasto. CartaDeTruco oroCon: 6}.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 17:58:17' prior: 50859915!
test01

	| cartasMano cartasPie |
	cartasMano := {self anchoDeBasto. self anchoDeBasto. self anchoDeEspada.}.
	cartasPie := {self anchoDeBasto. self anchoDeBasto. CartaDeTruco oroCon: 6}.
	
	! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 18:01:31'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:02:20' prior: 50859925!
test01

	| cartasMano cartasPie |
	cartasMano := {self anchoDeBasto. self anchoDeBasto. self anchoDeEspada.}.
	cartasPie := {self anchoDeBasto. self anchoDeBasto. CartaDeTruco oroCon: 6}.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:02:23'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:02:33'!
con: anArray contra: anArray2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCon: anArray contra: anArray2 ! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:03:02' prior: 50859961!
con: cartasMano contra: cartasPie
	^self new initializeCon: cartasMano contra: cartasPie! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:05:37' prior: 50859970!
con: cartasMano contra: cartasPie
	(cartasMano anySatisfy: [:unaCarta | (cartasMano occurrencesOf: unaCarta) > 1]) ifTrue: [self error: 'No puede haber cartas repetidas en una ronda'].
	
	^self new initializeCon: cartasMano contra: cartasPie.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:05:43' prior: 50859976!
con: cartasMano contra: cartasPie

	(cartasMano anySatisfy: [:unaCarta | (cartasMano occurrencesOf: unaCarta) > 1]) ifTrue: [self error: 'No puede haber cartas repetidas en una ronda'].
	
	^self new initializeCon: cartasMano contra: cartasPie.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:05:45'!
ERROR!
!RondaDeTruco class methodsFor: 'error messages' stamp: 'GR 7/5/2021 18:06:01'!
cartasRepetidasErrorMessage
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'error messages' stamp: 'GR 7/5/2021 18:06:41' prior: 50860000!
cartasRepetidasErrorMessage
	^'No puede haber cartas repetidas en una ronda'.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:06:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:06:44'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:07:37' prior: 50859987!
con: cartasMano contra: cartasPie

	(cartasMano anySatisfy: [:unaCarta | (cartasMano occurrencesOf: unaCarta) > 1]) ifTrue: [self error: 'No puede haber cartas repetidas en una ronda'].
	
	^self new initializeCon: cartasMano contra: cartasPie.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:08:03'!
assertCartasRepetidasEn: cartasMano

	^ (cartasMano anySatisfy: [:unaCarta | (cartasMano occurrencesOf: unaCarta) > 1]) ifTrue: [self error: 'No puede haber cartas repetidas en una ronda']! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:08:03' prior: 50860016!
con: cartasMano contra: cartasPie

	self assertCartasRepetidasEn: cartasMano.
	
	^self new initializeCon: cartasMano contra: cartasPie.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:08:33'!
assertCartasRepetidasEn: cartasMano y: cartasPie 

	^ (cartasMano anySatisfy: [:unaCarta | (cartasMano occurrencesOf: unaCarta) > 1]) ifTrue: [self error: 'No puede haber cartas repetidas en una ronda']! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:08:33' prior: 50860037!
con: cartasMano contra: cartasPie

	self assertCartasRepetidasEn: cartasMano y: cartasPie.
	
	^self new initializeCon: cartasMano contra: cartasPie.! !

!methodRemoval: RondaDeTruco class #assertCartasRepetidasEn: stamp: 'GR 7/5/2021 18:08:33'!
assertCartasRepetidasEn: cartasMano

	^ (cartasMano anySatisfy: [:unaCarta | (cartasMano occurrencesOf: unaCarta) > 1]) ifTrue: [self error: 'No puede haber cartas repetidas en una ronda']!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:08:56'!
test02

	| cartasMano cartasPie |
	cartasMano := {self anchoDeBasto. self anchoDeBasto. self anchoDeEspada.}.
	cartasPie := {self anchoDeBasto. self anchoDeBasto. CartaDeTruco oroCon: 6}.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:09:04' prior: 50860071!
test02

	| cartasMano cartasPie |
	cartasMano := {self anchoDeBasto. self anchoDeBasto. CartaDeTruco oroCon: 6}.
	cartasPie := {self anchoDeBasto. self anchoDeBasto. CartaDeTruco oroCon: 6}.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:09:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:09:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:09:13'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:09:30' prior: 50860088!
test02

	| cartasMano cartasPie |
	cartasMano := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	cartasPie := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:09:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:09:43'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:10:10' prior: 50860044!
assertCartasRepetidasEn: cartasMano y: cartasPie 

	(cartasMano anySatisfy: [:unaCarta | (cartasMano occurrencesOf: unaCarta) > 1]) ifTrue: [self error: 'No puede haber cartas repetidas en una ronda']! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:11:10' prior: 50860134!
assertCartasRepetidasEn: cartasMano y: cartasPie 
	|todasLasCartas|
	
	todasLasCartas := cartasMano .

	(cartasMano anySatisfy: [:unaCarta | (cartasMano occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !

----End fileIn of D:\Facultad\2021-1C-IS1\CuisUniversity_win64\Parcial2\SegundaVersion\windows64\Packages\TerseGuide.pck.st----!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:12:05' prior: 50860144!
assertCartasRepetidasEn: cartasMano y: cartasPie 
	|todasLasCartas|
	
	todasLasCartas := cartasMano copy addAll: cartasPie.

	(cartasMano anySatisfy: [:unaCarta | (cartasMano occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:12:15' prior: 50863082!
assertCartasRepetidasEn: cartasMano y: cartasPie 
	|todasLasCartas|
	
	todasLasCartas := cartasMano copy addAll: cartasPie.

	(todasLasCartas anySatisfy: [:unaCarta | (todasLasCartas occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:12:16'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:12:36'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:18:55' prior: 50863094!
assertCartasRepetidasEn: cartasMano y: cartasPie 
	|todasLasCartas|
	
	todasLasCartas := OrderedCollection withAll: cartasMano; 
						addAll: cartasPie;
						yourself.

	(todasLasCartas anySatisfy: [:unaCarta | (todasLasCartas occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:19:01'!
ERROR!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:19:01'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:19:19' prior: 50863111!
assertCartasRepetidasEn: cartasMano y: cartasPie 
	|todasLasCartas|
	
	todasLasCartas := OrderedCollection withAll: cartasMano; 
						addAll: cartasPie.

	(todasLasCartas anySatisfy: [:unaCarta | (todasLasCartas occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:19:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:19:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:19:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:19:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:19:27'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:20:04' prior: 50863129!
assertCartasRepetidasEn: cartasMano y: cartasPie 
	|todasLasCartas|
	
	todasLasCartas := OrderedCollection withAll: cartasMano.
	todasLasCartas addAll: cartasPie .
						
	(todasLasCartas anySatisfy: [:unaCarta | (todasLasCartas occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:20:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:20:07'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:20:56'!
test03

	| cartasMano cartasPie |
	cartasMano := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	cartasPie := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:21:26'!
unaManoGanadora

	^ {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:21:26' prior: 50863172!
test03

	| cartasMano cartasPie |
	cartasMano := self unaManoGanadora.
	cartasPie := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:22:38' prior: 50863194!
test03

	| cartasMano cartasPie |
	cartasMano := self unaManoGanadora.
	cartasPie := {CartaDeTruco oroCon: 5. CartaDeTruco espadaCon: 6. CartaDeTruco oroCon: 4}.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:23:02'!
unaManoPerdedora

	^ {CartaDeTruco oroCon: 5. CartaDeTruco espadaCon: 6. CartaDeTruco oroCon: 4}! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:23:02' prior: 50863210!
test03

	| cartasMano cartasPie |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:30:48' prior: 50863232!
test03

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:36:11' prior: 50859942!
test01

	| cartasMano cartasPie |
	cartasMano := Bag with: self anchoDeBasto with: self anchoDeBasto with: self anchoDeEspada.
	cartasPie := Bag with: self anchoDeBasto with: self anchoDeBasto with: self anchoDeEspada.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:37:24' prior: 50863188!
unaManoGanadora

	^ Bag with: self anchoDeBasto with: self anchoDeEspada with: (CartaDeTruco oroCon: 6).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:38:01' prior: 50863225!
unaManoPerdedora

	^ Bag with: (CartaDeTruco oroCon: 4) with: (CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:38:14' prior: 50863275!
unaManoGanadora

	^ Bag with: self anchoDeBasto with: self anchoDeEspada with: (CartaDeTruco espadaCon: 6).! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:38:46' prior: 50863154!
assertCartasRepetidasEn: cartasMano y: cartasPie 
	|todasLasCartas|
	
	todasLasCartas := Bag withAll: cartasMano.
	todasLasCartas addAll: cartasPie .
						
	(todasLasCartas anySatisfy: [:unaCarta | (todasLasCartas occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:38:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:38:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:38:55'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:38:55'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:39:11' prior: 50863246!
test03

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:40:15' prior: 50863319!
test03

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:42:27' prior: 50863328!
test03

	| jugadorMano jugadorPie ronda |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	self assert: ronda jugarPrimerEnfrentamientoCon: 1
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:43:10' prior: 50863337!
test03

	| jugadorMano jugadorPie ronda |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	self assert: ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: 1
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:43:43' prior: 50859896!
anchoDeEspada

	^ CartaDeTruco sieteDeEspada! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:43:50' prior: 50863360!
anchoDeEspada

	^ CartaDeTruco anchoDeEspada! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:43:54'!
sieteDeEspada

	^ CartaDeTruco sieteDeEspada! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:44:04'!
sieteDeOro

	^ CartaDeTruco sieteDeOro! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:44:33' prior: 50863282!
unaManoPerdedora

	^ Bag with: self sieteDeEspada with: self sieteDeOro with: (CartaDeTruco oroCon: 6).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:47:06' prior: 50863348!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora remove: self anchoDeBasto.
		
	self assert:  ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:47:17' prior: 50863387!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora remove: self anchoDeBasto.
	jugadorPieDespues := self unaManoGanadora remove: self anchoDeBasto.
		
	self assert:  ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:48:51' prior: 50863402!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora remove: self anchoDeBasto.
	jugadorPieDespues := self unaManoGanadora remove: self sieteDeEspada .
		
	self assert: jugadorManoDespues equals: (ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada).
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:49:40'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 18:49:48'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasMano_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 18:49:48'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasMano_CHANGE_ME cartasPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 18:49:48'!
initializeCon: cartasMano contra: cartasPie 
	self shouldBeImplemented.
	cartasMano_CHANGE_ME := cartasMano.
	cartasPie_CHANGE_ME := cartasPie.! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 18:50:13' prior: 50863461!
initializeCon: cartasMano contra: cartasPie 
	cartasMano_CHANGE_ME := cartasMano.
	cartasPie_CHANGE_ME := cartasPie.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 18:50:45'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadorMano cartasPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:50:45' prior: 50863469!
initializeCon: cartasMano contra: cartasPie 
	jugadorMano := cartasMano.
	cartasPie_CHANGE_ME := cartasPie.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 18:50:55'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadorMano jugadorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:50:55' prior: 50863485!
initializeCon: cartasMano contra: cartasPie 
	jugadorMano := cartasMano.
	jugadorPie := cartasPie.! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:51:10'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:51:34' prior: 50863420!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora remove: self anchoDeBasto.
	jugadorPieDespues := self unaManoPerdedora remove: self sieteDeEspada .
		
	self assert: jugadorManoDespues equals: (ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada).
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:51:35'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:51:49'!
jugarPrimerEnfrentamientoCon: aCartaDeTruco contra: aCartaDeTruco2 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:52:10' prior: 50863534!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:52:14' prior: 50863541!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:52:57' prior: 50863547!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	^jugadorMano
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:52:58'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:53:52' prior: 50863509!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := (self unaManoGanadora remove: self anchoDeBasto).
	jugadorPieDespues := (self unaManoPerdedora remove: self sieteDeEspada).
		
	self assert: jugadorManoDespues equals: (ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada).
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:54:04'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:54:51' prior: 50863565!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora ; 
		remove: self anchoDeBasto ;
		yourself.
	jugadorPieDespues := self unaManoPerdedora; 
		remove: self sieteDeEspada;
		yourself.
		
	self assert: jugadorManoDespues equals: (ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada).
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:54:53'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:55:04' prior: 50863590!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora ; 
		remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora; 
		remove: self sieteDeEspada.
		
	self assert: jugadorManoDespues equals: (ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada).
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:55:06'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:55:46' prior: 50863616!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	self assert: jugadorManoDespues equals: (ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada).
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:55:47'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:55:53'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:55:59'!
cartasMano
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:56:06' prior: 50863669!
cartasMano
	^jugadorMano.! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:56:14'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:56:20'!
cartasPie
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:56:27' prior: 50863680!
cartasPie
	^jugadorPie ! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:56:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 18:56:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 18:56:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:56:48'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:58:23' prior: 50863641!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasPorMano.
	self assert: 0 equals: ronda ganadasPorPie.
	
	
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:58:29'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:58:34'!
ganadasPorMano
	self shouldBeImplemented.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 18:58:54'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadorMano jugadorPie ganadasPorMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:58:52' prior: 50863726!
ganadasPorMano
	^ganadasPorMano
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:58:56'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 18:59:15'!
FAILURE!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 18:59:46'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadorMano jugadorPie ganadasPorMano ganadasPorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 18:59:45' prior: 50863500!
initializeCon: cartasMano contra: cartasPie 
	jugadorMano := cartasMano.
	jugadorPie := cartasPie.
	ganadasPorMano := 0.
	ganadasPorPie := 0.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:59:58' prior: 50863553!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:00:16' prior: 50863766!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	ganadasPorMano := ganadasPorMano + 1.
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:00:29'!
ganadasPorPie
	^ganadasPorPie
	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:00:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:00:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:00:31'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:00:38'!
test04

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasPorMano.
	self assert: 0 equals: ronda ganadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:01:48' prior: 50863795!
test04

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoPerdedora.
	jugadorPie := self unaManoGanadora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasPorMano.
	self assert: 0 equals: ronda ganadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:03:11' prior: 50863821!
test04

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoPerdedora.
	jugadorPie := self unaManoGanadora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoPerdedora.
	jugadorManoDespues remove: self sieteDeEspada.
	jugadorPieDespues := self unaManoGanadora.
	jugadorPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarPrimerEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasPorMano.
	self assert: 1 equals: ronda ganadasPorPie.
	
	
	! !

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:03:13'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:04:50' prior: 50863775!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) ifTrue: [ganadasPorMano := ganadasPorMano + 1.]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:05:15' prior: 50863875!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) ifTrue: [ganadasPorMano := ganadasPorMano + 1.]
		ifFalse: [ganadasPorPie := ganadasPorPie + 1.].
	
	
	! !

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:05:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:06:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:06:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:06:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:06:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:06:04'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:07:47'!
ganadasOEmpardadasPorMano
	^ganadasPorMano
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:07:47' prior: 50863847!
test04

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoPerdedora.
	jugadorPie := self unaManoGanadora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoPerdedora.
	jugadorManoDespues remove: self sieteDeEspada.
	jugadorPieDespues := self unaManoGanadora.
	jugadorPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarPrimerEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:07:47' prior: 50863699!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasPorPie.
	
	
	! !

!methodRemoval: RondaDeTruco #ganadasPorMano stamp: 'GR 7/5/2021 19:07:47'!
ganadasPorMano
	^ganadasPorMano
	!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:08:02'!
ganadasOEmpardadasPorPie
	^ganadasPorPie
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:08:02' prior: 50863919!
test04

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoPerdedora.
	jugadorPie := self unaManoGanadora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoPerdedora.
	jugadorManoDespues remove: self sieteDeEspada.
	jugadorPieDespues := self unaManoGanadora.
	jugadorPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarPrimerEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:08:02' prior: 50863945!
test03

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !

!methodRemoval: RondaDeTruco #ganadasPorPie stamp: 'GR 7/5/2021 19:08:02'!
ganadasPorPie
	^ganadasPorPie
	!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:08:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:08:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:08:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:08:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:08:05'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:08:12'!
test05

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoPerdedora.
	jugadorPie := self unaManoGanadora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoPerdedora.
	jugadorManoDespues remove: self sieteDeEspada.
	jugadorPieDespues := self unaManoGanadora.
	jugadorPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarPrimerEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:08:44' prior: 50864046!
test05

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoPerdedora.
	jugadorPie := self unaManoGanadora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoPerdedora.
	jugadorManoDespues remove: self sieteDeEspada.
	jugadorPieDespues := self unaManoGanadora.
	jugadorPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarPrimerEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:09:19'!
seisDeOro

	^ CartaDeTruco oroCon: 6.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:09:31'!
seisDeEspada

	^ CartaDeTruco espadaCon: 6.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:09:45' prior: 50863289!
unaManoGanadora

	^ Bag with: self anchoDeBasto with: self anchoDeEspada with: self seisDeEspada .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:09:53' prior: 50863380!
unaManoPerdedora

	^ Bag with: self sieteDeEspada with: self sieteDeOro with: self seisDeOro .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:10:14' prior: 50864072!
test05

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:10:20' prior: 50864121!
test05

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:10:35' prior: 50864147!
test05

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:10:43'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:10:57' prior: 50864173!
test05

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:11:11' prior: 50864202!
test05

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self seisDeEspada .
	
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self seisDeOro .
		
	ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:11:15'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:12:42' prior: 50863887!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) ifTrue: [ganadasPorMano := ganadasPorMano + 1.].
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 	ifTrue: [ganadasPorPie := ganadasPorPie + 1.].
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:12:48' prior: 50864257!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) ifTrue: [ganadasPorMano := ganadasPorMano + 1.].
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 	ifTrue: [ganadasPorPie := ganadasPorPie + 1.].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:13:53' prior: 50864272!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) ifTrue: [ganadasPorMano := ganadasPorMano + 1.].
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 	ifTrue: [ganadasPorPie := ganadasPorPie + 1.].
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	ifTrue: [ganadasPorPie := ganadasPorPie + 1.
														ganadasPorMano := ganadasPorMano +1.
														].
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:13:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:13:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:13:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:13:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:13:55'!
PASSED!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 19:15:01'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadorMano jugadorPie ganadasOEmpardadasPorMano ganadasPorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:15:01' prior: 50863758!
initializeCon: cartasMano contra: cartasPie 
	jugadorMano := cartasMano.
	jugadorPie := cartasPie.
	ganadasOEmpardadasPorMano := 0.
	ganadasPorPie := 0.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:15:01' prior: 50864287!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) ifTrue: [ganadasOEmpardadasPorMano := ganadasOEmpardadasPorMano + 1.].
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 	ifTrue: [ganadasPorPie := ganadasPorPie + 1.].
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	ifTrue: [ganadasPorPie := ganadasPorPie + 1.
														ganadasOEmpardadasPorMano := ganadasOEmpardadasPorMano +1.
														].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:15:01' prior: 50863914!
ganadasOEmpardadasPorMano
	^ganadasOEmpardadasPorMano
	! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 19:15:10'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadorMano jugadorPie ganadasOEmpardadasPorMano ganadasOEmpardadasPorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:15:10' prior: 50863974!
ganadasOEmpardadasPorPie
	^ganadasOEmpardadasPorPie
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:15:10' prior: 50864328!
initializeCon: cartasMano contra: cartasPie 
	jugadorMano := cartasMano.
	jugadorPie := cartasPie.
	ganadasOEmpardadasPorMano := 0.
	ganadasOEmpardadasPorPie := 0.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:15:10' prior: 50864336!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) ifTrue: [ganadasOEmpardadasPorMano := ganadasOEmpardadasPorMano + 1.].
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 	ifTrue: [ganadasOEmpardadasPorPie := ganadasOEmpardadasPorPie + 1.].
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	ifTrue: [ganadasOEmpardadasPorPie := ganadasOEmpardadasPorPie + 1.
														ganadasOEmpardadasPorMano := ganadasOEmpardadasPorMano +1.
														].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:15:40' prior: 50864386!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) ifTrue: [ganadasOEmpardadasPorMano := ganadasOEmpardadasPorMano + 1.].
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 	ifTrue: [ganadasOEmpardadasPorPie := ganadasOEmpardadasPorPie + 1.].
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [ganadasOEmpardadasPorPie := ganadasOEmpardadasPorPie + 1.
				ganadasOEmpardadasPorMano := ganadasOEmpardadasPorMano +1.].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:15:51' prior: 50864409!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano remove: cartaJugadaPorMano.
	jugadorPie remove: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [ganadasOEmpardadasPorMano := ganadasOEmpardadasPorMano + 1.].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [ganadasOEmpardadasPorPie := ganadasOEmpardadasPorPie + 1.].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [ganadasOEmpardadasPorPie := ganadasOEmpardadasPorPie + 1.
				ganadasOEmpardadasPorMano := ganadasOEmpardadasPorMano +1.].
	
	
	
	! !

Object subclass: #JugadorDeTruco
	instanceVariableNames: 'jugadorMano jugadorPie ganadasOEmpardadasPorMano ganadasOEmpardadasPorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 19:17:23'!
Object subclass: #JugadorDeTruco
	instanceVariableNames: 'jugadorMano jugadorPie ganadasOEmpardadasPorMano ganadasOEmpardadasPorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #JugadorDeTruco
	instanceVariableNames: 'cartas manosGanadasOEmpardadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 19:17:42'!
Object subclass: #JugadorDeTruco
	instanceVariableNames: 'cartas manosGanadasOEmpardadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 19:19:04' prior: 50860054!
con: cartasMano contra: cartasPie

	| jugadorMano jugadorPie |
	self assertCartasRepetidasEn: cartasMano y: cartasPie.
	jugadorMano := JugadorDeTruco con: cartasMano.
	jugadorPie := JugadorDeTruco con: cartasPie.
	
	^self new initializeCon: cartasMano contra: cartasPie.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 19:19:23' prior: 50864484!
con: cartasMano contra: cartasPie

	| jugadorMano jugadorPie |
	self assertCartasRepetidasEn: cartasMano y: cartasPie.
	jugadorMano := JugadorDeTruco con: cartasMano.
	jugadorPie := JugadorDeTruco con: cartasPie.
	
	^self new initializeCon: jugadorMano contra: jugadorPie.! !
!JugadorDeTruco class methodsFor: 'no messages' stamp: 'GR 7/5/2021 19:19:52'!
con: unConjuntoDeCartas

	! !
!JugadorDeTruco class methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:20:09' prior: 50864508!
con: unConjuntoDeCartas

	^self new initializeCon: unConjuntoDeCartas .! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:20:28' prior: 50863674!
cartasMano
	^jugadorMano cartas.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:20:36' prior: 50863685!
cartasPie
	^jugadorPie cartas! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:20:52' prior: 50864357!
ganadasOEmpardadasPorMano
	^jugadorMano ganadasOEmpardadas.
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:21:03' prior: 50864372!
ganadasOEmpardadasPorPie
	^jugadorPie ganadasOEmpardadas
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:21:32' prior: 50864431!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [ganadasOEmpardadasPorMano := ganadasOEmpardadasPorMano + 1.].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [ganadasOEmpardadasPorPie := ganadasOEmpardadasPorPie + 1.].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [ganadasOEmpardadasPorPie := ganadasOEmpardadasPorPie + 1.
				ganadasOEmpardadasPorMano := ganadasOEmpardadasPorMano +1.].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:22:36' prior: 50864538!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:22:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:22:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:22:38'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:22:38'!
ERROR!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:22:38'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:22:41'!
ERROR!

!classDefinition: #JugadorDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 19:22:47'!
Object subclass: #JugadorDeTruco
	instanceVariableNames: 'cartas manosGanadasOEmpardadas unConjuntoDeCartas_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JugadorDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 19:22:47'!
initializeCon: unConjuntoDeCartas 
	self shouldBeImplemented.
	unConjuntoDeCartas_CHANGE_ME := unConjuntoDeCartas.! !
!JugadorDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 19:22:53' prior: 50864600!
initializeCon: unConjuntoDeCartas 
	unConjuntoDeCartas_CHANGE_ME := unConjuntoDeCartas.! !
!JugadorDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 19:23:16' prior: 50864607!
initializeCon: unConjuntoDeCartas 
	cartas := unConjuntoDeCartas.! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:23:22'!
ERROR!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:25:59'!
jugar: aCartaDeTruco 
	self shouldBeImplemented.! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:26:16' prior: 50864621!
jugar: unaCarta
	cartas remove: unaCarta! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:26:17'!
ERROR!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:26:27'!
gana
	self shouldBeImplemented.! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:26:43' prior: 50864633!
gana
	manosGanadasOEmpardadas := manosGanadasOEmpardadas +1.! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:26:45'!
ERROR!
!JugadorDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 19:27:08' prior: 50864613!
initializeCon: unConjuntoDeCartas 
	cartas := unConjuntoDeCartas.
	manosGanadasOEmpardadas := 0.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:27:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:27:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:27:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:27:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:27:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:27:17'!
ERROR!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:27:27'!
cartas
	self shouldBeImplemented.
	^cartas! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:27:31' prior: 50864666!
cartas
	
	^cartas! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:27:34'!
ERROR!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:27:41'!
ganadasOEmpardadas
	self shouldBeImplemented.! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:27:48' prior: 50864677!
ganadasOEmpardadas
	^manosGanadasOEmpardadas .! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:27:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:27:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:27:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:27:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:27:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:27:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:27:52'!
ERROR!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:28:10'!
emparda
	self shouldBeImplemented.! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:28:27' prior: 50864703!
emparda
	manosGanadasOEmpardadas := manosGanadasOEmpardadas + 1.! !

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:28:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:28:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:28:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:28:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:28:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:28:31'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:28:51'!
test06

	| jugadorMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self seisDeEspada .
	
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self seisDeOro .
		
	ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:32:10' prior: 50864727!
test06

	| jugadorMano jugadorPie ronda |
	jugadorMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: jugadorMano contra: jugadorPie.
		
	self should: [ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self anchoDeBasto .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: JugadorDeTruco jugadorNoPoseeLaCartaErrorMessage equals: anError messageText]
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:32:23' prior: 50864753!
test06

	| cartasMano jugadorPie ronda |
	cartasMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: jugadorPie.
		
	self should: [ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self anchoDeBasto .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: JugadorDeTruco jugadorNoPoseeLaCartaErrorMessage equals: anError messageText]
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:32:31' prior: 50864771!
test06

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
		
	self should: [ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self anchoDeBasto .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: JugadorDeTruco jugadorNoPoseeLaCartaErrorMessage equals: anError messageText]
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:32:43' prior: 50864228!
test05

	| cartasMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	cartasMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self seisDeEspada .
	
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self seisDeOro .
		
	ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:32:49' prior: 50864807!
test05

	| cartasMano cartasPie ronda jugadorManoDespues jugadorPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self seisDeEspada .
	
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self seisDeOro .
		
	ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:32:57' prior: 50863979!
test04

	| cartasMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	cartasMano := self unaManoPerdedora.
	jugadorPie := self unaManoGanadora.
	ronda := RondaDeTruco con: cartasMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoPerdedora.
	jugadorManoDespues remove: self sieteDeEspada.
	jugadorPieDespues := self unaManoGanadora.
	jugadorPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarPrimerEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:33:03' prior: 50864859!
test04

	| cartasMano cartasPie ronda jugadorManoDespues jugadorPieDespues |
	cartasMano := self unaManoPerdedora.
	cartasPie := self unaManoGanadora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	jugadorManoDespues := self unaManoPerdedora.
	jugadorManoDespues remove: self sieteDeEspada.
	jugadorPieDespues := self unaManoGanadora.
	jugadorPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarPrimerEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:33:10' prior: 50864005!
test03

	| cartasMano jugadorPie ronda jugadorManoDespues jugadorPieDespues |
	cartasMano := self unaManoGanadora.
	jugadorPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: jugadorPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:33:15' prior: 50864911!
test03

	| cartasMano cartasPie ronda jugadorManoDespues jugadorPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	jugadorManoDespues := self unaManoGanadora.
	jugadorManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: jugadorManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:33:39' prior: 50864937!
test03

	| cartasMano cartasPie ronda cartasManoDespues jugadorPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:33:46' prior: 50864963!
test03

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
		
	ronda jugarPrimerEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:33:55' prior: 50864885!
test04

	| cartasMano cartasPie ronda cartasManoDespues jugadorPieDespues |
	cartasMano := self unaManoPerdedora.
	cartasPie := self unaManoGanadora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoPerdedora.
	cartasManoDespues remove: self sieteDeEspada.
	jugadorPieDespues := self unaManoGanadora.
	jugadorPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarPrimerEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:34:00' prior: 50865015!
test04

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoPerdedora.
	cartasPie := self unaManoGanadora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoPerdedora.
	cartasManoDespues remove: self sieteDeEspada.
	cartasPieDespues := self unaManoGanadora.
	cartasPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarPrimerEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:34:08' prior: 50864833!
test05

	| cartasMano cartasPie ronda cartasManoDespues jugadorPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self seisDeEspada .
	
	jugadorPieDespues := self unaManoPerdedora.
	jugadorPieDespues remove: self seisDeOro .
		
	ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: jugadorPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:34:12' prior: 50865067!
test05

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self seisDeEspada .
	
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self seisDeOro .
		
	ronda jugarPrimerEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:34:18'!
ERROR!
!JugadorDeTruco class methodsFor: 'error messages' stamp: 'GR 7/5/2021 19:34:32'!
jugadorNoPoseeLaCartaErrorMessage
	self shouldBeImplemented.! !
!JugadorDeTruco class methodsFor: 'error messages' stamp: 'GR 7/5/2021 19:34:49' prior: 50865121!
jugadorNoPoseeLaCartaErrorMessage
	^'El jugador no puede usar cartas que no posee'! !

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:34:51'!
FAILURE!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:35:44' prior: 50864626!
jugar: unaCarta
	cartas remove: unaCarta ifAbsent: [self error: self class jugadorNoPoseeLaCartaErrorMessage ]! !

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:35:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:35:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:35:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:35:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:35:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:35:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:35:46'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:36:24'!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:36:24' prior: 50864789!
test06

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
		
	self should: [ronda jugarEnfrentamientoCon: self seisDeEspada contra: self anchoDeBasto .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: JugadorDeTruco jugadorNoPoseeLaCartaErrorMessage equals: anError messageText]
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:36:24' prior: 50865093!
test05

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self seisDeEspada .
	
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self seisDeOro .
		
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:36:24' prior: 50864989!
test03

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:36:24' prior: 50865041!
test04

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoPerdedora.
	cartasPie := self unaManoGanadora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoPerdedora.
	cartasManoDespues remove: self sieteDeEspada.
	cartasPieDespues := self unaManoGanadora.
	cartasPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !

!methodRemoval: RondaDeTruco #jugarPrimerEnfrentamientoCon:contra: stamp: 'GR 7/5/2021 19:36:24'!
jugarPrimerEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	
	
	
	!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:36:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:36:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:36:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:36:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:36:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:36:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:36:28'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:36:38'!
test07

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
		
	self should: [ronda jugarEnfrentamientoCon: self seisDeEspada contra: self anchoDeBasto .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: JugadorDeTruco jugadorNoPoseeLaCartaErrorMessage equals: anError messageText]
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:36:53' prior: 50865304!
test07

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self seisDeEspada .
	
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self seisDeOro .
		
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:37:16' prior: 50865321!
test07

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:42:37' prior: 50865347!
test07

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasManoDespues remove: self anchoDeEspada .
	
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
	cartasPieDespues remove: self seisDeOro .
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	ronda jugarEnfrentamientoCon: self anchoDeEspada contra: self sieteDeOro .
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda terminateProcess.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:42:41' prior: 50865373!
test07

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasManoDespues remove: self anchoDeEspada .
	
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
	cartasPieDespues remove: self seisDeOro .
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	ronda jugarEnfrentamientoCon: self anchoDeEspada contra: self sieteDeOro .
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda terminateProcess.
	self assert: ronda jugadorMano equals: ronda ganador.! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:42:43'!
FAILURE!

----SNAPSHOT----(5 July 2021 19:44:33) CuisUniversity-4532.image priorSource: 16885703!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:45:49'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:46:00' prior: 50865407!
test07

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasManoDespues remove: self anchoDeEspada .
	
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
	cartasPieDespues remove: self sieteDeOro .
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	ronda jugarEnfrentamientoCon: self anchoDeEspada contra: self sieteDeOro .
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda terminateProcess.
	self assert: ronda jugadorMano equals: ronda ganador.! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:46:01'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:46:39' prior: 50865448!
test07

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasManoDespues remove: self anchoDeEspada .
	
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
	cartasPieDespues remove: self sieteDeOro .
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	ronda jugarEnfrentamientoCon: self anchoDeEspada contra: self sieteDeOro .
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:47:07' prior: 50865484!
test07

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	ronda jugarEnfrentamientoCon: self anchoDeEspada contra: self sieteDeOro .
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:48:04' prior: 50865176!
test06

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
		
	self should: [ronda jugarEnfrentamientoCon: self seisDeEspada contra: self anchoDeBasto .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: JugadorDeTruco jugadorNoPoseeLaCartaErrorMessage equals: anError messageText.
				self assert: self unaManoGanadora equals: ronda cartasMano .
				self assert: self unaManoPerdedora equals: ronda cartasPie.
				]
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:48:38' prior: 50865193!
test05

	| cartasMano cartasPie ronda  |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	

	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:48:47'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:49:05'!
finalizada
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:49:19' prior: 50863257!
test01

	| cartasMano cartasPie |
	cartasMano := Bag with: self anchoDeBasto with: self anchoDeBasto with: self anchoDeEspada.
	cartasPie := Bag with: self anchoDeBasto with: self anchoDeBasto with: self anchoDeEspada.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:49:37' prior: 50865219!
test03

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada .
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:49:50' prior: 50865560!
test05

	| cartasMano cartasPie ronda  |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	

	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada 
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:49:51' prior: 50865627!
test05

	| cartasMano cartasPie ronda  |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	

	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada .
	
	
	! !

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:49:54'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:50:01' prior: 50865577!
finalizada
	^false.! !

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:50:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:50:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:50:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:50:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:50:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:50:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:50:05'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:50:05'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:50:09'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:51:25' prior: 50865538!
test06

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
		
	self should: [ronda jugarEnfrentamientoCon: self seisDeEspada contra: self anchoDeBasto .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: JugadorDeTruco jugadorNoPoseeLaCartaErrorMessage equals: anError messageText.
				self assert: 0 equals: ronda ganadasOEmpardadasPorMano .
				self assert: 0 equals: ronda ganadasOEmpardadasPorPie .
				]
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:51:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:51:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:51:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:51:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:51:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:51:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:51:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:51:27'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:51:27'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:54:13' prior: 50865661!
finalizada
	^jugadorMano ganadasOEmpardadas > 2 or: [jugadorPie ganadasOEmpardadas > 2].! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:54:17'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:54:30'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:55:07' prior: 50865730!
finalizada
	^jugadorMano ganadasOEmpardadas > 1 or: [jugadorPie ganadasOEmpardadas > 1].! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:55:08'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:55:18'!
jugadorMano
	self shouldBeImplemented.
	^jugadorMano! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:55:21' prior: 50865749!
jugadorMano
	
	^jugadorMano! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:55:38'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:56:08'!
ganador
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:57:27' prior: 50865760!
ganador
	(jugadorMano ganadasOEmpardadas > 1) ifTrue: [^jugadorMano].
	
	(jugadorPie ganadasOEmpardadas > 1) ifTrue: [^jugadorPie ].! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:57:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 19:57:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 19:57:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 19:57:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 19:57:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 19:57:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 19:57:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 19:57:31'!
PASSED!

Object subclass: #JugadorDeTruco
	instanceVariableNames: 'cartas manosGanadasOEmpardadas '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:00:57'!
Object subclass: #JugadorDeTruco
	instanceVariableNames: 'cartas manosGanadasOEmpardadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:03:21'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:06:45' prior: 50865159!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco juega: jugadorMano con: cartaJugadaPorMano 
		contra: jugadorPie con: cartaJugadaPorPie.

	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:07:00' prior: 50865819!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco juega: jugadorMano con: cartaJugadaPorMano 
		contra: jugadorPie con: cartaJugadaPorPie.

	enfrentamiento jugar.
	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:07:52' prior: 50865841!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:07:00' prior: 50865864!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco juega: jugadorMano con: cartaJugadaPorMano 
		contra: jugadorPie con: cartaJugadaPorPie.

	enfrentamiento jugar.
	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 20:08:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 20:08:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:08:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 20:08:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 20:08:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 20:08:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 20:08:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:08:55'!
ERROR!
!EnfrentamientoDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 20:09:06'!
juega: aJugadorDeTruco con: aCartaDeTruco contra: aJugadorDeTruco3 con: aCartaDeTruco4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeJuega: aJugadorDeTruco con: aCartaDeTruco contra: aJugadorDeTruco3 con: aCartaDeTruco4 ! !
!EnfrentamientoDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 20:09:33' prior: 50865922!
juega: primerJugador con: unaCarta contra: aJugadorDeTruco3 con: aCartaDeTruco4 
	^self new initializeJuega: primerJugador con: unaCarta contra: aJugadorDeTruco3 con: aCartaDeTruco4 ! !
!EnfrentamientoDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 20:09:43' prior: 50865935!
juega: primerJugador con: unaCarta contra: segundoJugador con: aCartaDeTruco4 
	^self new initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: aCartaDeTruco4 ! !
!EnfrentamientoDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 20:09:49' prior: 50865945!
juega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta 
	^self new initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta ! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:11:56'!
ERROR!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:12:02'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'primerJugador_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:12:02'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'primerJugador_CHANGE_ME unaCarta_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:12:03'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'primerJugador_CHANGE_ME unaCarta_CHANGE_ME segundoJugador_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:12:03'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'primerJugador_CHANGE_ME unaCarta_CHANGE_ME segundoJugador_CHANGE_ME otraCarta_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 20:12:03'!
initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta 
	self shouldBeImplemented.
	primerJugador_CHANGE_ME := primerJugador.
	unaCarta_CHANGE_ME := unaCarta.
	segundoJugador_CHANGE_ME := segundoJugador.
	otraCarta_CHANGE_ME := otraCarta.! !
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 20:12:12' prior: 50866005!
initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta 
	primerJugador_CHANGE_ME := primerJugador.
	unaCarta_CHANGE_ME := unaCarta.
	segundoJugador_CHANGE_ME := segundoJugador.
	otraCarta_CHANGE_ME := otraCarta.! !
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 20:14:30' prior: 50866017!
initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta 
	primerJugador_CHANGE_ME := primerJugador.
	unaCarta_CHANGE_ME := unaCarta.
	segundoJugador_CHANGE_ME := segundoJugador.
	otraCarta_CHANGE_ME := otraCarta.! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:14:35'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'jugadorMano unaCarta_CHANGE_ME segundoJugador_CHANGE_ME otraCarta_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:14:35' prior: 50866028!
initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta 
	jugadorMano := primerJugador.
	unaCarta_CHANGE_ME := unaCarta.
	segundoJugador_CHANGE_ME := segundoJugador.
	otraCarta_CHANGE_ME := otraCarta.! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:14:46'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'jugadorMano cartaMano segundoJugador_CHANGE_ME otraCarta_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:14:46' prior: 50866050!
initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta 
	jugadorMano := primerJugador.
	cartaMano := unaCarta.
	segundoJugador_CHANGE_ME := segundoJugador.
	otraCarta_CHANGE_ME := otraCarta.! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:14:55'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'jugadorMano cartaMano jugadorPie otraCarta_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:14:55' prior: 50866071!
initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta 
	jugadorMano := primerJugador.
	cartaMano := unaCarta.
	jugadorPie := segundoJugador.
	otraCarta_CHANGE_ME := otraCarta.! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:15:02'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'jugadorMano cartaMano jugadorPie cartaPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:15:02' prior: 50866091!
initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta 
	jugadorMano := primerJugador.
	cartaMano := unaCarta.
	jugadorPie := segundoJugador.
	cartaPie := otraCarta.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 20:15:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 20:15:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:15:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 20:15:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 20:15:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 20:15:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 20:15:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:15:08'!
ERROR!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:15:28'!
jugar
	self shouldBeImplemented.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:15:31' prior: 50866139!
jugar
	! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:20:11' prior: 50866144!
jugar

	| cartaJugadaPorMano cartaJugadaPorPie |
	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:21:00' prior: 50866148!
jugar

	| cartaJugadaPorManos cartaJugadaPorPie |
	jugadorMano jugar: cartaJugadaPorManos.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorManos mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorManos ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorManos empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:21:13' prior: 50866165!
jugar

	| cartaJugadaPorManos cartaJugadaPorPies |
	jugadorMano jugar: cartaJugadaPorManos.
	jugadorPie jugar: cartaJugadaPorPies .
	
	(cartaJugadaPorManos mataA: cartaJugadaPorPies ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPies mataA: cartaJugadaPorManos ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorManos empardaCon: cartaJugadaPorPies ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:21:47'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'jugadorMano cartaJugadaPorMano jugadorPie cartaPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:21:47' prior: 50866111!
initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta 
	jugadorMano := primerJugador.
	cartaJugadaPorMano := unaCarta.
	jugadorPie := segundoJugador.
	cartaPie := otraCarta.! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:21:55'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'jugadorMano cartaJugadaPorMano jugadorPie cartaJugadaPorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:21:55' prior: 50866209!
initializeJuega: primerJugador con: unaCarta contra: segundoJugador con: otraCarta 
	jugadorMano := primerJugador.
	cartaJugadaPorMano := unaCarta.
	jugadorPie := segundoJugador.
	cartaJugadaPorPie := otraCarta.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:24:34' prior: 50866182!
jugar

	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano gana].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie gana].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:25:43'!
ganaUnaMano
	manosGanadasOEmpardadas := manosGanadasOEmpardadas +1.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:25:43' prior: 50866239!
jugar

	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:25:43' prior: 50865881!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco juega: jugadorMano con: cartaJugadaPorMano 
		contra: jugadorPie con: cartaJugadaPorPie.

	enfrentamiento jugar.
	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano emparda.
				jugadorPie emparda].
	
	
	
	! !

!methodRemoval: JugadorDeTruco #gana stamp: 'GR 7/5/2021 20:25:43'!
gana
	manosGanadasOEmpardadas := manosGanadasOEmpardadas +1.!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:25:54'!
empardaUnaMAno
	manosGanadasOEmpardadas := manosGanadasOEmpardadas + 1.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:25:55' prior: 50866260!
jugar

	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano empardaUnaMAno.
				jugadorPie empardaUnaMAno].
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:25:55' prior: 50866275!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco juega: jugadorMano con: cartaJugadaPorMano 
		contra: jugadorPie con: cartaJugadaPorPie.

	enfrentamiento jugar.
	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano empardaUnaMAno.
				jugadorPie empardaUnaMAno].
	
	
	
	! !

!methodRemoval: JugadorDeTruco #emparda stamp: 'GR 7/5/2021 20:25:55'!
emparda
	manosGanadasOEmpardadas := manosGanadasOEmpardadas + 1.!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:26:50' prior: 50866324!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugar: cartaJugadaPorMano.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano empardaUnaMAno.
				jugadorPie empardaUnaMAno].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:29:03' prior: 50866352!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugarComoMano: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadorPie jugar: cartaJugadaPorPie .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano empardaUnaMAno.
				jugadorPie empardaUnaMAno].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:29:41' prior: 50866370!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugarComoMano: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadorPie jugarComoPie: cartaJugadaPorPie contra: cartaJugadaPorMano .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano empardaUnaMAno.
				jugadorPie empardaUnaMAno].
	
	
	
	! !

!classRemoval: #EnfrentamientoDeTruco stamp: 'GR 7/5/2021 20:29:46'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'jugadorMano cartaJugadaPorMano jugadorPie cartaJugadaPorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 20:29:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 20:29:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:29:48'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 20:29:48'!
ERROR!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 20:29:48'!
ERROR!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 20:29:48'!
ERROR!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 20:29:48'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:29:50'!
ERROR!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:29:57'!
jugarComoMano: aCartaDeTruco contra: aCartaDeTruco2 
	self shouldBeImplemented.! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:30:12' prior: 50866436!
jugarComoMano: miCarta contra: cartaDelOponente
	self shouldBeImplemented.! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:30:16' prior: 50866442!
jugarComoMano: miCarta contra: cartaDelOponente
	! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:31:02' prior: 50866448!
jugarComoMano: miCarta contra: cartaDelOponente
	(cartaDelOponente mataA: miCarta) ifTrue: self ganeOEmpardeUnaMano.! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:31:05'!
ERROR!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:31:12'!
ganeOEmpardeUnaMano
	self shouldBeImplemented.! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:31:26' prior: 50866462!
ganeOEmpardeUnaMano
	manosGanadasOEmpardadas := manosGanadasOEmpardadas + 1.! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:31:34'!
ERROR!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:32:02'!
jugarComoPie: aCartaDeTruco contra: aCartaDeTruco2 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:32:16' prior: 50866389!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugar: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadorPie jugarComoPie: cartaJugadaPorPie contra: cartaJugadaPorMano .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano empardaUnaMAno.
				jugadorPie empardaUnaMAno].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:32:19' prior: 50866481!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugarComoMano: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadorPie jugarComoPie: cartaJugadaPorPie contra: cartaJugadaPorMano .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano empardaUnaMAno.
				jugadorPie empardaUnaMAno].
	
	
	
	! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:32:28'!
jugar: miCarta contra: cartaDelOponente
	(cartaDelOponente mataA: miCarta) ifTrue: self ganeOEmpardeUnaMano.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:32:28' prior: 50866501!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugar: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadorPie jugarComoPie: cartaJugadaPorPie contra: cartaJugadaPorMano .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano empardaUnaMAno.
				jugadorPie empardaUnaMAno].
	
	
	
	! !

!methodRemoval: JugadorDeTruco #jugarComoMano:contra: stamp: 'GR 7/5/2021 20:32:28'!
jugarComoMano: miCarta contra: cartaDelOponente
	(cartaDelOponente mataA: miCarta) ifTrue: self ganeOEmpardeUnaMano.!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:32:34' prior: 50866528!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugar: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadorPie jugar: cartaJugadaPorPie contra: cartaJugadaPorMano .
	
	(cartaJugadaPorMano mataA: cartaJugadaPorPie ) 
		ifTrue: [jugadorMano ganaUnaMano].
		
	(cartaJugadaPorPie mataA: cartaJugadaPorMano ) 
		ifTrue: [jugadorPie ganaUnaMano].
		
	(cartaJugadaPorMano empardaCon: cartaJugadaPorPie ) 	
		ifTrue: [jugadorMano empardaUnaMAno.
				jugadorPie empardaUnaMAno].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:32:50' prior: 50866554!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadorMano jugar: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadorPie jugar: cartaJugadaPorPie contra: cartaJugadaPorMano .
	

	
	
	
	! !

!methodRemoval: JugadorDeTruco #ganaUnaMano stamp: 'GR 7/5/2021 20:32:58'!
ganaUnaMano
	manosGanadasOEmpardadas := manosGanadasOEmpardadas +1.!

!methodRemoval: JugadorDeTruco #empardaUnaMAno stamp: 'GR 7/5/2021 20:33:02'!
empardaUnaMAno
	manosGanadasOEmpardadas := manosGanadasOEmpardadas + 1.!

!methodRemoval: JugadorDeTruco #jugarComoPie:contra: stamp: 'GR 7/5/2021 20:33:16'!
jugarComoPie: aCartaDeTruco contra: aCartaDeTruco2 
	self shouldBeImplemented.!

!methodRemoval: JugadorDeTruco #jugar: stamp: 'GR 7/5/2021 20:33:18'!
jugar: unaCarta
	cartas remove: unaCarta ifAbsent: [self error: self class jugadorNoPoseeLaCartaErrorMessage ]!
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:34:02' prior: 50866521!
jugar: miCarta contra: cartaDelOponente
	cartas remove: miCarta ifAbsent: [self error: self class jugadorNoPoseeLaCartaErrorMessage ].
	(cartaDelOponente mataA: miCarta) ifTrue: self ganeOEmpardeUnaMano.! !
!JugadorDeTruco methodsFor: 'testing' stamp: 'GR 7/5/2021 20:36:03'!
tieneEstaCarta: unaCarta
	^cartas includes: unaCarta! !
!JugadorDeTruco methodsFor: 'testing' stamp: 'GR 7/5/2021 20:37:03'!
esGanador
	^manosGanadasOEmpardadas > 1.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:37:37' prior: 50865741!
finalizada
	^jugadorMano esGanador or: [jugadorPie esGanador]! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 20:38:51' prior: 50864377!
initializeCon: cartasMano contra: cartasPie 
	jugadorMano := cartasMano.
	jugadorPie := cartasPie.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 20:39:59'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadorMano jugadorPie ganadasOEmpardadasPorMano ganadasOEmpardadasPorPie jugadores'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 20:39:54' prior: 50866627!
initializeCon: cartasMano contra: cartasPie 
	jugadorMano := cartasMano.
	jugadorPie := cartasPie.
	jugadores := OrderedCollection with: jugadorMano with: jugadorPie! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:42:10' prior: 50864524!
cartasPie
	^jugadores last cartas! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:42:26' prior: 50864519!
cartasMano
	^jugadores first cartas.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:43:04' prior: 50866622!
finalizada
	^jugadores anySatisfy: [:unJugador | unJugador esGanador ]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:43:14' prior: 50864528!
ganadasOEmpardadasPorMano
	^jugadores first ganadasOEmpardadas.
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:43:22' prior: 50864533!
ganadasOEmpardadasPorPie
	^jugadores last ganadasOEmpardadas
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:43:31' prior: 50865765!
ganador
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:44:55' prior: 50866681!
ganador
	jugadores findFirst: [:unJugador | unJugador esGanador ]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:44:58' prior: 50866685!
ganador
	^jugadores findFirst: [:unJugador | unJugador esGanador ]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:45:08' prior: 50865754!
jugadorMano
	
	^jugadores first! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:45:49' prior: 50866574!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	jugadores first jugar: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadores last jugar: cartaJugadaPorPie contra: cartaJugadaPorMano .
	

	
	
	
	! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 20:45:57'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 20:47:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 20:47:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:47:03'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 20:47:03'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 20:47:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 20:47:03'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 20:47:03'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:47:05'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 20:48:06' prior: 50866644!
initializeCon: cartasMano contra: cartasPie 
	jugadorMano := cartasMano.
	jugadorPie := cartasPie.
	jugadores := OrderedCollection new.
	jugadores addFirst: cartasMano.
	jugadores addLast: cartasPie.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 20:48:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 20:48:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:48:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 20:48:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 20:48:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 20:48:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:48:11'!
FAILURE!
!JugadorDeTruco methodsFor: 'testing' stamp: 'GR 7/5/2021 20:49:30' prior: 50866604!
jugar: miCarta contra: cartaDelOponente
	cartas remove: miCarta ifAbsent: [self error: self class jugadorNoPoseeLaCartaErrorMessage ].
	
	(cartaDelOponente mataA: miCarta) ifFalse: self ganeOEmpardeUnaMano.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 20:49:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 20:49:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:49:32'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 20:49:32'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 20:49:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 20:49:32'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 20:49:32'!
FAILURE!
!JugadorDeTruco methodsFor: 'testing' stamp: 'GR 7/5/2021 20:49:56' prior: 50866763!
jugar: miCarta contra: cartaDelOponente
	cartas remove: miCarta ifAbsent: [self error: self class jugadorNoPoseeLaCartaErrorMessage ].
	
	(cartaDelOponente mataA: miCarta) ifFalse: [self ganeOEmpardeUnaMano.]! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 20:49:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 20:49:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 20:49:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 20:49:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 20:49:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 20:49:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 20:49:59'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 20:49:59'!
FAILURE!
!JugadorDeTruco class methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:05:23' prior: 50864513!
con: unConjuntoDeCartas

	(unConjuntoDeCartas anySatisfy: [:unaCarta | unConjuntoDeCartas occurrencesOf: unaCarta > 1]) ifTrue: [
		self error: self jugadorTieneCartasRepetidasErrorDescription.
		].
	^self new initializeCon: unConjuntoDeCartas .! !
!JugadorDeTruco class methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:05:43'!
jugadorTieneCartasRepetidasErrorDescription
		
	^'Un Jugador no puede tener cartas repetidas'! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:06:47' prior: 50865582!
test01

	| cartasMano |
	cartasMano := Bag with: self anchoDeBasto with: self anchoDeBasto with: self anchoDeEspada.
	
	
	
	self should: [JugadorDeTruco con: cartasMano]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: JugadorDeTruco jugadorTieneCartasRepetidasErrorDescription equals: anError messageText.
			].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:07:53' prior: 50860112!
test02

	| cartasMano cartasPie jugadorMano jugadorPie |
	cartasMano := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	cartasPie := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	jugadorMano := JugadorDeTruco con: cartasMano .
	jugadorPie := JugadorDeTruco con: cartasPie.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:08:04' prior: 50866851!
test02

	| cartasMano cartasPie jugadorMano jugadorPie |
	cartasMano := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	cartasPie := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	jugadorMano := JugadorDeTruco con: cartasMano .
	jugadorPie := JugadorDeTruco con: cartasPie.
	
	self should: [RondaDeTruco con: jugadorMano contra: jugadorPie .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 21:08:24' prior: 50864496!
con: cartasMano contra: cartasPie

	| jugadorMano jugadorPie |
	self assertCartasRepetidasEn: cartasMano y: cartasPie.
	jugadorMano := JugadorDeTruco con: cartasMano.
	jugadorPie := JugadorDeTruco con: cartasPie.
	
	^self new initializeCon: jugadorMano contra: jugadorPie.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 21:08:42' prior: 50866893!
con: cartasMano contra: cartasPie

	| jugadorMano jugadorPie |
	self assertCartasRepetidasEn: cartasMano y: cartasPie.

	
	^self new initializeCon: jugadorMano contra: jugadorPie.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 21:09:05' prior: 50866905!
con: jugadorMano contra: jugadorPie

	self assertCartasRepetidasEn: jugadorMano y: jugadorPie .

	
	^self new initializeCon: jugadorMano contra: jugadorPie.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 21:10:25' prior: 50863296!
assertCartasRepetidasEn: jugadorMano y: jugadorPu 
	|todasLasCartas|
	
	todasLasCartas := 2.
						
	(todasLasCartas anySatisfy: [:unaCarta | (todasLasCartas occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !
!JugadorDeTruco methodsFor: 'testing' stamp: 'GR 7/5/2021 21:10:33' prior: 50864671!
cartas
	
	^cartas copy! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 21:11:39' prior: 50866923!
assertCartasRepetidasEn: jugadorMano y: jugadorPie
	|todasLasCartas|
	
	todasLasCartas := (jugadorMano cartas) addAll: jugadorPie cartas.
 						
	(todasLasCartas anySatisfy: [:unaCarta | (todasLasCartas occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:11:40'!
ERROR!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:11:40'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 21:11:41'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 21:11:41'!
ERROR!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 21:11:41'!
ERROR!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 21:11:41'!
ERROR!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 21:11:41'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:11:58'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:11:58'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:12:32'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:12:33'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:13:06'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:13:06'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:13:44'!
ERROR!
!JugadorDeTruco class methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:14:06' prior: 50866818!
con: unConjuntoDeCartas

	(unConjuntoDeCartas anySatisfy: [:unaCarta | (unConjuntoDeCartas occurrencesOf: unaCarta) > 1]) ifTrue: [
		self error: self jugadorTieneCartasRepetidasErrorDescription.
		].
	^self new initializeCon: unConjuntoDeCartas .! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:14:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:14:21'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:14:21'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:14:59'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 21:15:28' prior: 50866938!
assertCartasRepetidasEn: jugadorMano y: jugadorPie
	|todasLasCartas|
	
	todasLasCartas := jugadorMano cartas .
	todasLasCartas addAll: jugadorPie cartas.
 						
	(todasLasCartas anySatisfy: [:unaCarta | (todasLasCartas occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:15:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:15:30'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 21:15:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 21:15:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 21:15:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 21:15:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 21:15:30'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 18:09:30' prior: 50866872!
test02

	| cartasMano cartasPie |
	cartasMano := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	cartasPie := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 21:08:24' prior: 50866914!
con: cartasMano contra: cartasPie

	| jugadorMano jugadorPie |
	self assertCartasRepetidasEn: cartasMano y: cartasPie.
	jugadorMano := JugadorDeTruco con: cartasMano.
	jugadorPie := JugadorDeTruco con: cartasPie.
	
	^self new initializeCon: jugadorMano contra: jugadorPie.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 18:20:04' prior: 50867005!
assertCartasRepetidasEn: cartasMano y: cartasPie 
	|todasLasCartas|
	
	todasLasCartas := OrderedCollection withAll: cartasMano.
	todasLasCartas addAll: cartasPie .
						
	(todasLasCartas anySatisfy: [:unaCarta | (todasLasCartas occurrencesOf: unaCarta) > 1]) ifTrue: [self error: self cartasRepetidasErrorMessage ]! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 21:18:58' prior: 50866734!
initializeCon: cartasMano contra: cartasPie 
	jugadorMano := cartasMano.
	jugadorPie := cartasPie.! !

JugadorDeTruco subclass: #JugadorDeTrucoMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeTrucoMano category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 21:19:48'!
JugadorDeTruco subclass: #JugadorDeTrucoMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

JugadorDeTruco subclass: #JugadorDeTrucoPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeTrucoPie category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 21:19:54'!
JugadorDeTruco subclass: #JugadorDeTrucoPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 21:20:09' prior: 50867052!
con: cartasMano contra: cartasPie

	| jugadorMano jugadorPie |
	self assertCartasRepetidasEn: cartasMano y: cartasPie.
	jugadorMano := JugadorDeTrucoMano con: cartasMano.
	jugadorPie := JugadorDeTrucoPie con: cartasPie.
	
	^self new initializeCon: jugadorMano contra: jugadorPie.! !

Object subclass: #JugadorDeTruco
	instanceVariableNames: 'cartas manosGanadasOEmpardadas juegaPrimero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 21:20:31'!
Object subclass: #JugadorDeTruco
	instanceVariableNames: 'cartas manosGanadasOEmpardadas juegaPrimero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JugadorDeTrucoMano methodsFor: 'initialization' stamp: 'GR 7/5/2021 21:21:21' overrides: 50864646!
initializeCon: unConjuntoDeCartas 
	cartas := unConjuntoDeCartas.
	manosGanadasOEmpardadas := 0.! !
!JugadorDeTrucoPie methodsFor: 'initialization' stamp: 'GR 7/5/2021 21:21:21' overrides: 50864646!
initializeCon: unConjuntoDeCartas 
	cartas := unConjuntoDeCartas.
	manosGanadasOEmpardadas := 0.! !

!methodRemoval: JugadorDeTruco #initializeCon: stamp: 'GR 7/5/2021 21:21:21'!
initializeCon: unConjuntoDeCartas 
	cartas := unConjuntoDeCartas.
	manosGanadasOEmpardadas := 0.!
!JugadorDeTrucoMano methodsFor: 'initialization' stamp: 'GR 7/5/2021 21:21:39' prior: 50867137!
initializeCon: unConjuntoDeCartas 
	cartas := unConjuntoDeCartas.
	manosGanadasOEmpardadas := 0.
	juegaPrimero := True.! !
!JugadorDeTrucoPie methodsFor: 'initialization' stamp: 'GR 7/5/2021 21:21:50' prior: 50867144!
initializeCon: unConjuntoDeCartas 
	cartas := unConjuntoDeCartas.
	manosGanadasOEmpardadas := 0.
	juegaPrimero := False.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:21:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:21:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 21:21:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 21:21:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 21:21:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 21:21:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 21:21:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 21:22:00'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:22:26' prior: 50866658!
cartasMano
	^jugadorMano! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:22:30' prior: 50867189!
cartasMano
	^jugadores first cartas.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:20:28' prior: 50867193!
cartasMano
	^jugadorMano cartas.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 19:20:36' prior: 50866653!
cartasPie
	^jugadorPie cartas! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:22:30' prior: 50867198!
cartasMano
	^jugadores first cartas.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 20:42:10' prior: 50867203!
cartasPie
	^jugadores last cartas! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 20:48:06' prior: 50867077!
initializeCon: cartasMano contra: cartasPie 
	jugadorMano := cartasMano.
	jugadorPie := cartasPie.
	jugadores := OrderedCollection new.
	jugadores addFirst: cartasMano.
	jugadores addLast: cartasPie.! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 21:23:39' prior: 50867216!
initializeCon: cartasMano contra: cartasPie 
	
	jugadores := OrderedCollection new.
	jugadores addFirst: cartasMano.
	jugadores addLast: cartasPie.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:23:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:23:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 21:23:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 21:23:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 21:23:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 21:23:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 21:23:43'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 21:23:44'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:24:22' prior: 50866691!
ganador
	^jugadores at: (jugadores findFirst: [:unJugador | unJugador esGanador ])! !

Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadores'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 21:24:51'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadores'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadores '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 21:24:55'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadores'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadores cartasJugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'GR 7/5/2021 21:25:02'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'jugadores cartasJugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JugadorDeTruco methodsFor: 'testing' stamp: 'GR 7/5/2021 21:25:48'!
ganeUnaMano
	manosGanadasOEmpardadas := manosGanadasOEmpardadas + 1.! !
!JugadorDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:25:48' prior: 50866789!
jugar: miCarta contra: cartaDelOponente
	cartas remove: miCarta ifAbsent: [self error: self class jugadorNoPoseeLaCartaErrorMessage ].
	
	(cartaDelOponente mataA: miCarta) ifFalse: [self ganeUnaMano.]! !

!methodRemoval: JugadorDeTruco #ganeOEmpardeUnaMano stamp: 'GR 7/5/2021 21:25:48'!
ganeOEmpardeUnaMano
	manosGanadasOEmpardadas := manosGanadasOEmpardadas + 1.!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:25:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:25:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 21:25:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 21:25:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 21:25:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 21:25:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 21:25:55'!
PASSED!
!JugadorDeTruco methodsFor: 'testing' stamp: 'GR 7/5/2021 21:26:13' prior: 50867297!
ganeUnaMano
	manosGanadasOEmpardadas := manosGanadasOEmpardadas + 1.
	! !
!JugadorDeTruco methodsFor: 'testing' stamp: 'GR 7/5/2021 21:26:17' prior: 50867334!
ganeUnaMano
	manosGanadasOEmpardadas := manosGanadasOEmpardadas + 1.
	! !
!JugadorDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 21:26:50'!
initializeCon: unConjuntoDeCartas 
	cartas := unConjuntoDeCartas.
	manosGanadasOEmpardadas := 0.
	juegaPrimero := True.! !

!methodRemoval: JugadorDeTrucoMano #initializeCon: stamp: 'GR 7/5/2021 21:26:50'!
initializeCon: unConjuntoDeCartas 
	cartas := unConjuntoDeCartas.
	manosGanadasOEmpardadas := 0.
	juegaPrimero := True.!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'GR 7/5/2021 21:27:02' prior: 50867110!
con: cartasMano contra: cartasPie

	| jugadorMano jugadorPie |
	self assertCartasRepetidasEn: cartasMano y: cartasPie.
	jugadorMano := JugadorDeTruco con: cartasMano.
	jugadorPie := JugadorDeTruco con: cartasPie.
	
	^self new initializeCon: jugadorMano contra: jugadorPie.! !

!classRemoval: #JugadorDeTrucoMano stamp: 'GR 7/5/2021 21:27:08'!
JugadorDeTruco subclass: #JugadorDeTrucoMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #JugadorDeTrucoPie stamp: 'GR 7/5/2021 21:27:10'!
JugadorDeTruco subclass: #JugadorDeTrucoPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JugadorDeTruco methodsFor: 'initialization' stamp: 'GR 7/5/2021 21:27:25' prior: 50867344!
initializeCon: unConjuntoDeCartas 
	cartas := unConjuntoDeCartas.
	manosGanadasOEmpardadas := 0.! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 21:28:23'!
PASSED!

!methodRemoval: JugadorDeTruco #tieneEstaCarta: stamp: 'GR 7/5/2021 21:29:11'!
tieneEstaCarta: unaCarta
	^cartas includes: unaCarta!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:29:22'!
test08

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	ronda jugarEnfrentamientoCon: self anchoDeEspada contra: self sieteDeOro .
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:29:44' prior: 50867397!
test08

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro .
	ronda jugarEnfrentamientoCon: self anchoDeEspada contra: self sieteDeOro .
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:30:55' prior: 50864114!
unaManoPerdedora

	^ Bag with: self sieteDeEspada with: self tresDeOro with: self seisDeOro .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:31:16'!
tresDeOro

	^CartaDeTruco oroCon: 3.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:31:32' prior: 50867437!
unaManoPerdedora

	^ Bag with: self sieteDeEspada with: self sieteDeOro with: self seisDeOro .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:31:43' prior: 50864107!
unaManoGanadora

	^ Bag with: self anchoDeBasto with: self tresDeOro with: self seisDeEspada .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:32:02' prior: 50865600!
test03

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeOro.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada .
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:32:13' prior: 50867462!
test03

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada .
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:32:38' prior: 50867455!
unaManoGanadora

	^ Bag with: self anchoDeBasto with: self sieteDeOro with: self seisDeEspada .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:32:45' prior: 50867448!
unaManoPerdedora

	^ Bag with: self sieteDeEspada with: self tresDeOro with: self seisDeOro .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:33:01' prior: 50865518!
test07

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self tresDeOro .
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:33:25' prior: 50867417!
test08

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self sieteDeEspada .
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:33:40' prior: 50867550!
test08

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self sieteDeEspada .
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:33:46' prior: 50867570!
test08

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self sieteDeEspada .
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:34:01' prior: 50867590!
test08

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self sieteDeEspada .
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada .
	
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:34:59' prior: 50867610!
test08

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self sieteDeEspada .
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self tresDeOro .
	
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'GR 7/5/2021 21:35:06'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:36:51' prior: 50867633!
test08

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self tresDeOro .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self sieteDeEspada .
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self seisDeOro .
	
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'GR 7/5/2021 21:36:52'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:37:30' prior: 50867658!
test08

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self tresDeOro .
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self seisDeOro .
	
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'GR 7/5/2021 21:37:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:37:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:37:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 21:37:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 21:37:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 21:37:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 21:37:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 21:37:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'GR 7/5/2021 21:37:32'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:37:55'!
test09

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self tresDeOro .
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self seisDeOro .
	
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:40:10' prior: 50867726!
test09

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self tresDeOro .
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self seisDeOro .
	
	self should: [ronda jugarEnfrentamientoCon: self sieteDeOro contra: self seisDeOro .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: RondaDeTruco rondaYaTerminadaErrorMessage.
			]
		
	! !
!RondaDeTruco class methodsFor: 'error messages' stamp: 'GR 7/5/2021 21:40:22'!
rondaYaTerminadaErrorMessage
	^'No puede haber cartas repetidas en una ronda'.! !
!RondaDeTruco class methodsFor: 'error messages' stamp: 'GR 7/5/2021 21:40:31' prior: 50867772!
rondaYaTerminadaErrorMessage
	^'La ronda ya fue finalizada'.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:40:43' prior: 50866702!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	

	jugadores first jugar: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadores last jugar: cartaJugadaPorPie contra: cartaJugadaPorMano .
	

	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:40:56' prior: 50867783!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	self assertRondaNoFinalizada

	jugadores first jugar: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadores last jugar: cartaJugadaPorPie contra: cartaJugadaPorMano .
	

	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:41:03' prior: 50867794!
jugarEnfrentamientoCon: cartaJugadaPorMano contra: cartaJugadaPorPie

	self assertRondaNoFinalizada.

	jugadores first jugar: cartaJugadaPorMano contra: cartaJugadaPorPie.
	jugadores last jugar: cartaJugadaPorPie contra: cartaJugadaPorMano .
	

	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:41:33'!
assertRondaNoFinalizada.

	(self finalizada ) ifTrue: [self error: self class rondaYaTerminadaErrorMessage ]

	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:41:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:41:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 21:41:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 21:41:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 21:41:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 21:41:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 21:41:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'GR 7/5/2021 21:41:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'GR 7/5/2021 21:41:38'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:42:04'!
test01NoSePuedeCrearUnJugadorConCartasRepetidas

	| cartasMano |
	cartasMano := Bag with: self anchoDeBasto with: self anchoDeBasto with: self anchoDeEspada.
	
	
	
	self should: [JugadorDeTruco con: cartasMano]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: JugadorDeTruco jugadorTieneCartasRepetidasErrorDescription equals: anError messageText.
			].! !

!methodRemoval: RondaDeTrucoTest #test01 stamp: 'GR 7/5/2021 21:42:08'!
test01

	| cartasMano |
	cartasMano := Bag with: self anchoDeBasto with: self anchoDeBasto with: self anchoDeEspada.
	
	
	
	self should: [JugadorDeTruco con: cartasMano]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: JugadorDeTruco jugadorTieneCartasRepetidasErrorDescription equals: anError messageText.
			].!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:42:31'!
test02NoSePuedeCrearUnaRondaConCartasRepetidas


	| cartasMano cartasPie |
	cartasMano := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	cartasPie := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].! !

!methodRemoval: RondaDeTrucoTest #test02 stamp: 'GR 7/5/2021 21:42:33'!
test02

	| cartasMano cartasPie |
	cartasMano := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	cartasPie := {self anchoDeBasto. self anchoDeEspada. CartaDeTruco oroCon: 6}.
	
	self should: [RondaDeTruco con: cartasMano contra: cartasPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco cartasRepetidasErrorMessage equals: anError messageText.
			].!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:43:17'!
test03laRondaSabeQuienGanoLaPrimeraMano

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada .
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test03 stamp: 'GR 7/5/2021 21:43:17'!
test03

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada .
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:43:50'!
test03jugadorManoPuedeGanarUnEnfrentamiento

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada .
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test03laRondaSabeQuienGanoLaPrimeraMano stamp: 'GR 7/5/2021 21:43:50'!
test03laRondaSabeQuienGanoLaPrimeraMano

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoGanadora.
	cartasManoDespues 	remove: self anchoDeBasto .
	cartasPieDespues := self unaManoPerdedora.
	cartasPieDespues remove: self sieteDeEspada.
		
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada .
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:44:04'!
test04jugadorPiePuedeGanarUnEnfrentamiento

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoPerdedora.
	cartasPie := self unaManoGanadora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoPerdedora.
	cartasManoDespues remove: self sieteDeEspada.
	cartasPieDespues := self unaManoGanadora.
	cartasPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test04 stamp: 'GR 7/5/2021 21:44:05'!
test04

	| cartasMano cartasPie ronda cartasManoDespues cartasPieDespues |
	cartasMano := self unaManoPerdedora.
	cartasPie := self unaManoGanadora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	cartasManoDespues := self unaManoPerdedora.
	cartasManoDespues remove: self sieteDeEspada.
	cartasPieDespues := self unaManoGanadora.
	cartasPieDespues 	remove: self anchoDeBasto .
		
	ronda jugarEnfrentamientoCon: self sieteDeEspada contra: self anchoDeBasto .
	
	self assert: cartasManoDespues equals: ronda cartasMano.
	self assert: cartasPieDespues equals: ronda cartasPie.	
	self assert: 0 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:44:28'!
test05manoPardaSumaPuntosParaAmbos

	| cartasMano cartasPie ronda  |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	

	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada .
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test05 stamp: 'GR 7/5/2021 21:44:28'!
test05

	| cartasMano cartasPie ronda  |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self seisDeOro.
	

	self assert: 1 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self deny: ronda finalizada .
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:44:55'!
test06LosJugadoresNoPuedenUsarCartasQueNoTengan

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
		
	self should: [ronda jugarEnfrentamientoCon: self seisDeEspada contra: self anchoDeBasto .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: JugadorDeTruco jugadorNoPoseeLaCartaErrorMessage equals: anError messageText.
				self assert: 0 equals: ronda ganadasOEmpardadasPorMano .
				self assert: 0 equals: ronda ganadasOEmpardadasPorPie .
				]
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test06 stamp: 'GR 7/5/2021 21:44:55'!
test06

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
		
	self should: [ronda jugarEnfrentamientoCon: self seisDeEspada contra: self anchoDeBasto .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: JugadorDeTruco jugadorNoPoseeLaCartaErrorMessage equals: anError messageText.
				self assert: 0 equals: ronda ganadasOEmpardadasPorMano .
				self assert: 0 equals: ronda ganadasOEmpardadasPorPie .
				]
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:45:24'!
test07rondaTerminaSiUnJugadorGanaDosManos

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self tresDeOro .
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !

!methodRemoval: RondaDeTrucoTest #test07 stamp: 'GR 7/5/2021 21:45:24'!
test07

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada.
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self tresDeOro .
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 0 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:46:08'!
test08rondaTerminaDespuesDeTresManosConUnGanador

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self tresDeOro .
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self seisDeOro .
	
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.! !

!methodRemoval: RondaDeTrucoTest #test08 stamp: 'GR 7/5/2021 21:46:08'!
test08

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self tresDeOro .
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self seisDeOro .
	
	
	self assert: 2 equals: ronda ganadasOEmpardadasPorMano.
	self assert: 1 equals: ronda ganadasOEmpardadasPorPie.
	self assert: ronda finalizada.
	self assert: ronda jugadorMano equals: ronda ganador.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'GR 7/5/2021 21:46:25'!
test09noSePuedenJugarMasDeTresManos

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self tresDeOro .
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self seisDeOro .
	
	self should: [ronda jugarEnfrentamientoCon: self sieteDeOro contra: self seisDeOro .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: RondaDeTruco rondaYaTerminadaErrorMessage.
			]
		
	! !

!methodRemoval: RondaDeTrucoTest #test09 stamp: 'GR 7/5/2021 21:46:25'!
test09

	| cartasMano cartasPie ronda |
	cartasMano := self unaManoGanadora.
	cartasPie := self unaManoPerdedora.
	ronda := RondaDeTruco con: cartasMano contra: cartasPie.
	
	ronda jugarEnfrentamientoCon: self seisDeEspada contra: self tresDeOro .
	ronda jugarEnfrentamientoCon: self anchoDeBasto contra: self sieteDeEspada .
	ronda jugarEnfrentamientoCon: self sieteDeOro contra: self seisDeOro .
	
	self should: [ronda jugarEnfrentamientoCon: self sieteDeOro contra: self seisDeOro .]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: RondaDeTruco rondaYaTerminadaErrorMessage.
			]
		
	!
!RondaDeTruco methodsFor: 'testing' stamp: 'GR 7/5/2021 21:48:15'!
jugadorPie
	
	^jugadores last! !

----SNAPSHOT----(5 July 2021 21:49:43) CuisUniversity-4532.image priorSource: 17081330!