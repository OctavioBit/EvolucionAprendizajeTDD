
----End fileIn of /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/linux64/Segundo Parcial 2021 - iteraciones/ISW1-2021-1C-2doParcial.st----!
!CartaDeTrucoTest methodsFor: 'nil' stamp: 'CS 7/5/2021 17:35:23'!
test21

	| cartaMano cartaPie |
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto .! !
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 17:37:08'!
test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada

	| cartaMano cartaPie |
	
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto .! !

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 17:38:26'!
Object subclass: #Enfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 17:38:21' prior: 51279950!
test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.! !

!methodRemoval: CartaDeTrucoTest #test21 stamp: 'CS 7/5/2021 17:38:34'!
test21

	| cartaMano cartaPie |
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto .!
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 17:39:53' prior: 51279967!
test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.
	
	self assert: (enfrentamiento ganoLaCarta: cartaMano).! !

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:40:07'!
ERROR!
!Enfrentamiento class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 17:40:19'!
entre: aCartaDeTruco y: aCartaDeTruco2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeEntre: aCartaDeTruco y: aCartaDeTruco2 ! !
!Enfrentamiento class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 17:41:53' prior: 51280003!
entre: primeraCartaDeTruco y: segundaCartaDeTruco 

	^self new initializeEntre: primeraCartaDeTruco y: segundaCartaDeTruco ! !

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:41:56'!
ERROR!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 17:42:03'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'primeraCartaDeTruco_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 17:42:04'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'primeraCartaDeTruco_CHANGE_ME segundaCartaDeTruco_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'initialization' stamp: 'CS 7/5/2021 17:42:04'!
initializeEntre: primeraCartaDeTruco y: segundaCartaDeTruco 
	self shouldBeImplemented.
	primeraCartaDeTruco_CHANGE_ME := primeraCartaDeTruco.
	segundaCartaDeTruco_CHANGE_ME := segundaCartaDeTruco.! !

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 17:43:49'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'primeraCartaDeTruco_CHANGE_ME segundaCartaDeTruco_CHANGE_ME cartaDeTruco1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 17:43:50'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'primeraCartaDeTruco_CHANGE_ME segundaCartaDeTruco_CHANGE_ME cartaDeTruco1 cartaDeTruco2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'initialization' stamp: 'CS 7/5/2021 17:43:48' prior: 51280042!
initializeEntre: primerCartaDeTruco y: segundaCartaDeTruco

	cartaDeTruco1 := primerCartaDeTruco.
	cartaDeTruco2 := segundaCartaDeTruco.! !

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:43:53'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 17:44:08'!
ganoLaCarta: aCartaDeTruco 
	self shouldBeImplemented.! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 17:44:38' prior: 51280084!
ganoLaCarta: aCartaDeTruco 

	^ cartaDeTruco1 mataA: cartaDeTruco2.! !

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:44:43'!
ERROR!

self valor!

cartaPerdedora valor!

^ cartaDeTruco1 mataA: cartaDeTruco2!

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 17:46:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:46:35'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - enfrentamiento' stamp: 'CS 7/5/2021 17:47:58'!
test22

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto.
	
	enfrentamiento := Enfrentamiento entre: cartaPie y: cartaMano.
	
	self deny: (enfrentamiento ganoLaCarta: cartaMano).! !

!testRun: #CartaDeTrucoTest #test22 stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test22 stamp: 'CS 7/5/2021 17:48:01'!
PASSED!

!methodRemoval: CartaDeTrucoTest #test22 stamp: 'CS 7/5/2021 17:48:05'!
test22

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto.
	
	enfrentamiento := Enfrentamiento entre: cartaPie y: cartaMano.
	
	self deny: (enfrentamiento ganoLaCarta: cartaMano).!
!CartaDeTrucoTest methodsFor: 'test - enfrentamiento' stamp: 'CS 7/5/2021 17:49:48'!
test22

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeBasto.
	cartaPie := CartaDeTruco anchoDeEspada.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.
	
	self assert: (enfrentamiento ganoLaCarta: cartaPie).! !

!testRun: #CartaDeTrucoTest #test22 stamp: 'CS 7/5/2021 17:49:50'!
FAILURE!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 17:52:19' prior: 51280089!
ganoLaCarta: aCartaDeTruco 

	(aCartaDeTruco = cartaDeTruco1) ifTrue: [^ aCartaDeTruco mataA: cartaDeTruco2] ifFalse: [^ aCartaDeTruco mataA: cartaDeTruco1].! !

!testRun: #CartaDeTrucoTest #test22 stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:52:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test22 stamp: 'CS 7/5/2021 17:52:20'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - enfrentamiento' stamp: 'CS 7/5/2021 17:53:08'!
test21AsiertoQueEnElEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.
	
	self assert: (enfrentamiento ganoLaCarta: cartaMano).! !

!methodRemoval: CartaDeTrucoTest #test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:53:08'!
test21AsiertoQueEnElPrimerEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.
	
	self assert: (enfrentamiento ganoLaCarta: cartaMano).!
!CartaDeTrucoTest methodsFor: 'test - enfrentamiento' stamp: 'CS 7/5/2021 17:53:26'!
test22AsiertoQueEnElEnfrentamientoGanaElPiePorTenerElAnchoDeEspada

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeBasto.
	cartaPie := CartaDeTruco anchoDeEspada.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.
	
	self assert: (enfrentamiento ganoLaCarta: cartaPie).! !

!methodRemoval: CartaDeTrucoTest #test22 stamp: 'CS 7/5/2021 17:53:26'!
test22

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeBasto.
	cartaPie := CartaDeTruco anchoDeEspada.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.
	
	self assert: (enfrentamiento ganoLaCarta: cartaPie).!
!CartaDeTrucoTest methodsFor: 'test - enfrentamiento' stamp: 'CS 7/5/2021 17:57:16' prior: 51280366!
test21AsiertoQueEnElEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.
	
	self assert: (enfrentamiento laCarta: cartaMano leGanoA: cartaPie).! !

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:57:21'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 17:57:27'!
laCarta: aCartaDeTruco leGanoA: aCartaDeTruco2 
	self shouldBeImplemented.! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 17:57:45' prior: 51280436!
laCarta: aCartaDeTruco leGanoA: aCartaDeTruco2 

	^ aCartaDeTruco mataA: aCartaDeTruco2! !

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:57:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test22AsiertoQueEnElEnfrentamientoGanaElPiePorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:57:50'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - enfrentamiento' stamp: 'CS 7/5/2021 17:58:23' prior: 51280394!
test22AsiertoQueEnElEnfrentamientoGanaElPiePorTenerElAnchoDeEspada

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeBasto.
	cartaPie := CartaDeTruco anchoDeEspada.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.
	
	self assert: (enfrentamiento laCarta: cartaPie leGanoA: cartaMano)! !

!testRun: #CartaDeTrucoTest #test22AsiertoQueEnElEnfrentamientoGanaElPiePorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test22AsiertoQueEnElEnfrentamientoGanaElPiePorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:58:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test22AsiertoQueEnElEnfrentamientoGanaElPiePorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:58:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 17:58:38'!
PASSED!

!methodRemoval: Enfrentamiento #ganoLaCarta: stamp: 'CS 7/5/2021 17:59:22'!
ganoLaCarta: aCartaDeTruco 

	(aCartaDeTruco = cartaDeTruco1) ifTrue: [^ aCartaDeTruco mataA: cartaDeTruco2] ifFalse: [^ aCartaDeTruco mataA: cartaDeTruco1].!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:08:07'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:08:12'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!CartaDeTrucoTest methodsFor: 'nil' stamp: 'CS 7/5/2021 18:08:03'!
test21RondaGanaLaManoEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco anchoDeBasto.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco oroCon: 4.
	cartaPie2 := CartaDeTruco copaCon: 6.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	self assert: (ronda ganoElJugador: jugadorMano).! !

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:08:23'!
ERROR!
!Jugador class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:08:30'!
primerCarta: aCartaDeTruco segundaCarta: aCartaDeTruco2 yTerceraCarta: aCartaDeTruco3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializePrimerCarta: aCartaDeTruco segundaCarta: aCartaDeTruco2 yTerceraCarta: aCartaDeTruco3 ! !
!Jugador class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:09:09' prior: 51280675!
primerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	^self new initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 ! !

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:09:12'!
ERROR!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:09:19'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:09:19'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:09:19'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME carta3_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:09:19'!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 
	self shouldBeImplemented.
	carta1_CHANGE_ME := carta1.
	carta2_CHANGE_ME := carta2.
	carta3_CHANGE_ME := carta3.! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:09:48'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME carta3_CHANGE_ME primerCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:09:49'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME carta3_CHANGE_ME primerCarta segundaCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:09:51'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME carta3_CHANGE_ME primerCarta segundaCarta terceraCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:09:47' prior: 51280724!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	primerCarta := carta1.
	segundaCarta := carta2.
	terceraCarta := carta3.! !

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:09:53'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:10:10'!
entre: aJugador y: aJugador2 
	self shouldBeImplemented.! !

!methodRemoval: Ronda class #entre:y: stamp: 'CS 7/5/2021 18:10:22'!
entre: aJugador y: aJugador2 
	self shouldBeImplemented.!

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:10:32'!
ERROR!
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:10:39'!
entre: aJugador y: aJugador2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeEntre: aJugador y: aJugador2 ! !
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:11:13' prior: 51280785!
entre: jugador1 y: jugador2 

	^self new initializeEntre: jugador1 y: jugador2 ! !

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:11:14'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:11:21'!
Object subclass: #Ronda
	instanceVariableNames: 'jugador1_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:11:21'!
Object subclass: #Ronda
	instanceVariableNames: 'jugador1_CHANGE_ME jugador2_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:11:21'!
initializeEntre: jugador1 y: jugador2 
	self shouldBeImplemented.
	jugador1_CHANGE_ME := jugador1.
	jugador2_CHANGE_ME := jugador2.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:12:36'!
Object subclass: #Ronda
	instanceVariableNames: 'jugador1_CHANGE_ME jugador2_CHANGE_ME primerJugador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:12:37'!
Object subclass: #Ronda
	instanceVariableNames: 'jugador1_CHANGE_ME jugador2_CHANGE_ME primerJugador segundoJugador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:12:35' prior: 51280818!
initializeEntre: jugador1 y: jugador2 

	primerJugador := jugador1.
	segundoJugador := jugador2.! !

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:12:39'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:12:50'!
ganoElJugador: aJugador 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:13:03' prior: 51280852!
ganoElJugador: aJugador 

	^ true! !

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test21AsiertoQueEnElEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test22AsiertoQueEnElEnfrentamientoGanaElPiePorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 18:13:04'!
PASSED!

!methodRemoval: CartaDeTrucoTest #test21AsiertoQueEnElEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 18:16:49'!
test21AsiertoQueEnElEnfrentamientoGanaLaManoPorTenerElAnchoDeEspada

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeEspada.
	cartaPie := CartaDeTruco anchoDeBasto.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.
	
	self assert: (enfrentamiento laCarta: cartaMano leGanoA: cartaPie).!

!methodRemoval: CartaDeTrucoTest #test22AsiertoQueEnElEnfrentamientoGanaElPiePorTenerElAnchoDeEspada stamp: 'CS 7/5/2021 18:16:49'!
test22AsiertoQueEnElEnfrentamientoGanaElPiePorTenerElAnchoDeEspada

	| cartaMano cartaPie enfrentamiento |
	
	cartaMano := CartaDeTruco anchoDeBasto.
	cartaPie := CartaDeTruco anchoDeEspada.
	
	enfrentamiento := Enfrentamiento entre: cartaMano y: cartaPie.
	
	self assert: (enfrentamiento laCarta: cartaPie leGanoA: cartaMano)!
!CartaDeTrucoTest methodsFor: 'nil' stamp: 'CS 7/5/2021 18:17:56'!
test21RondaGanaElPieEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 4.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	self assert: (ronda ganoElJugador: jugadorPie).! !

!testRun: #CartaDeTrucoTest #test21RondaGanaElPieEnLasPrimerasDos stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test21RondaGanaElPieEnLasPrimerasDos stamp: 'CS 7/5/2021 18:17:58'!
PASSED!

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:17:58'!
PASSED!
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:18:17'!
test22RondaGanaElPieEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 4.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	self assert: (ronda ganoElJugador: jugadorPie).! !

!methodRemoval: CartaDeTrucoTest #test21RondaGanaElPieEnLasPrimerasDos stamp: 'CS 7/5/2021 18:18:17'!
test21RondaGanaElPieEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 4.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	self assert: (ronda ganoElJugador: jugadorPie).!
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:18:26' prior: 51280647!
test21RondaGanaLaManoEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 4.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	self assert: (ronda ganoElJugador: jugadorPie).! !
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:18:37' prior: 51281118!
test21RondaGanaLaManoEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 4.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	self assert: (ronda ganoElJugador: jugadorPie).! !
!CartaDeTrucoTest methodsFor: 'test - rondas' stamp: 'CS 7/5/2021 18:19:23' prior: 51281143!
test21RondaGanaLaManoEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco anchoDeBasto.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco oroCon: 4.
	cartaPie2 := CartaDeTruco copaCon: 6.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	self assert: (ronda ganoElJugador: jugadorPie).! !
!CartaDeTrucoTest methodsFor: 'test - rondas' stamp: 'CS 7/5/2021 18:19:29' prior: 51281168!
test21RondaGanaLaManoEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco anchoDeBasto.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco oroCon: 4.
	cartaPie2 := CartaDeTruco copaCon: 6.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	self assert: (ronda ganoElJugador: jugadorMano).! !

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test22RondaGanaElPieEnLasPrimerasDos stamp: 'CS 7/5/2021 18:19:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test22RondaGanaElPieEnLasPrimerasDos stamp: 'CS 7/5/2021 18:19:38'!
PASSED!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:20:48'!
Object subclass: #Ronda
	instanceVariableNames: 'jugador1_CHANGE_ME jugador2_CHANGE_ME primerJugador segundoJugador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:20:46' prior: 51280843!
initializeEntre: jugador1 y: jugador2 

	primerJugador := jugador1.
	segundoJugador := jugador2.
	enfrentamientos := OrderedCollection new.! !
!CartaDeTrucoTest methodsFor: 'test - rondas' stamp: 'CS 7/5/2021 18:22:23' prior: 51281193!
test21RondaGanaLaManoEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco anchoDeBasto.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco oroCon: 4.
	cartaPie2 := CartaDeTruco copaCon: 6.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda jugar.
	
	self assert: (ronda ganoElJugador: jugadorMano).! !

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:22:25'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:22:31'!
jugar
	self shouldBeImplemented.! !

Object subclass: #Jugador
	instanceVariableNames: 'primerCarta segundaCarta terceraCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:25:38'!
Object subclass: #Jugador
	instanceVariableNames: 'primerCarta segundaCarta terceraCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:26:10' prior: 51281341!
jugar

	Enfrentamiento entre: primerJugador primerCarta y: segundoJugador primerCarta.! !

Object subclass: #Ronda
	instanceVariableNames: 'primerJugador segundoJugador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Ronda
	instanceVariableNames: 'primerJugador segundoJugador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:26:45'!
ERROR!

Object subclass: #Ronda
	instanceVariableNames: 'primerJugador segundoJugador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Ronda
	instanceVariableNames: 'primerJugador segundoJugador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Ronda
	instanceVariableNames: 'primerJugador segundoJugador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:28:34'!
Object subclass: #Ronda
	instanceVariableNames: 'primerJugador segundoJugador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!methodRemoval: CartaDeTrucoTest #test21RondaGanaLaManoEnLasPrimerasDos stamp: 'CS 7/5/2021 18:38:28'!
test21RondaGanaLaManoEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco anchoDeBasto.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco oroCon: 4.
	cartaPie2 := CartaDeTruco copaCon: 6.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda jugar.
	
	self assert: (ronda ganoElJugador: jugadorMano).!

!methodRemoval: CartaDeTrucoTest #test22RondaGanaElPieEnLasPrimerasDos stamp: 'CS 7/5/2021 18:38:28'!
test22RondaGanaElPieEnLasPrimerasDos

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 4.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	self assert: (ronda ganoElJugador: jugadorPie).!

!classRemoval: #Ronda stamp: 'CS 7/5/2021 18:39:41'!
Object subclass: #Ronda
	instanceVariableNames: 'primerJugador segundoJugador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #Jugador stamp: 'CS 7/5/2021 18:39:47'!
Object subclass: #Jugador
	instanceVariableNames: 'primerCarta segundaCarta terceraCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #Enfrentamiento stamp: 'CS 7/5/2021 18:39:55'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'primeraCartaDeTruco_CHANGE_ME segundaCartaDeTruco_CHANGE_ME cartaDeTruco1 cartaDeTruco2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

----End fileIn of /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/Parciales/2020-1c/2doParcial/ISW1-2020-1C-2doParcial-SolucionDeVideo.st----!

----End fileIn of /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/Parciales/2020-1c/2doParcial/1c2020.st----!

!classRemoval: #WorkingNormal stamp: 'CS 7/5/2021 18:42:40'!
RobotStatus subclass: #WorkingNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #SensorsFailure stamp: 'CS 7/5/2021 18:42:40'!
RobotStatus subclass: #SensorsFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #OutOfOrder stamp: 'CS 7/5/2021 18:42:41'!
RobotStatus subclass: #OutOfOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #MechanicalFailure stamp: 'CS 7/5/2021 18:42:41'!
RobotStatus subclass: #MechanicalFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #RobotStatus stamp: 'CS 7/5/2021 18:42:42'!
Object subclass: #RobotStatus
	instanceVariableNames: 'robot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #Robot stamp: 'CS 7/5/2021 18:42:42'!
Object subclass: #Robot
	instanceVariableNames: 'status trailer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #Trailer stamp: 'CS 7/5/2021 18:42:43'!
ProductCarrier subclass: #Trailer
	instanceVariableNames: 'weightCapacity heightCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #CleaningTrailer stamp: 'CS 7/5/2021 18:42:44'!
ProductCarrier subclass: #CleaningTrailer
	instanceVariableNames: 'trailer cleaners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #ProductCarrier stamp: 'CS 7/5/2021 18:42:44'!
Object subclass: #ProductCarrier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #ProductB stamp: 'CS 7/5/2021 18:42:45'!
Product subclass: #ProductB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #ProductA stamp: 'CS 7/5/2021 18:42:45'!
Product subclass: #ProductA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #Product stamp: 'CS 7/5/2021 18:42:46'!
Object subclass: #Product
	instanceVariableNames: 'weight height pollutionIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #DistibutionCenter stamp: 'CS 7/5/2021 18:42:47'!
Object subclass: #DistibutionCenter
	instanceVariableNames: 'cargoVehicles'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #UVRaysCleaner stamp: 'CS 7/5/2021 18:42:47'!
Cleaner subclass: #UVRaysCleaner
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #BleachCleaner stamp: 'CS 7/5/2021 18:42:48'!
Cleaner subclass: #BleachCleaner
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #Cleaner stamp: 'CS 7/5/2021 18:42:48'!
Object subclass: #Cleaner
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #Cashier stamp: 'CS 7/5/2021 18:42:49'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #LigtherCargoVehicleSelectionCriteria stamp: 'CS 7/5/2021 18:42:49'!
CargoVehicleSelectionCriteria subclass: #LigtherCargoVehicleSelectionCriteria
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #ArrivingLastSelectionCriteria stamp: 'CS 7/5/2021 18:42:50'!
CargoVehicleSelectionCriteria subclass: #ArrivingLastSelectionCriteria
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #CargoVehicleSelectionCriteria stamp: 'CS 7/5/2021 18:42:50'!
Object subclass: #CargoVehicleSelectionCriteria
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #CargoVehicle stamp: 'CS 7/5/2021 18:42:51'!
Object subclass: #CargoVehicle
	instanceVariableNames: 'targetCity leavingTime maxWeight trailers arrivingTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #TrailerTest stamp: 'CS 7/5/2021 18:42:52'!
TestCase subclass: #TrailerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #ShippingTest stamp: 'CS 7/5/2021 18:42:52'!
TestCase subclass: #ShippingTest
	instanceVariableNames: 'routingTimeCalculator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #RobotTest stamp: 'CS 7/5/2021 18:42:53'!
TestCase subclass: #RobotTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #ProductTest stamp: 'CS 7/5/2021 18:42:53'!
TestCase subclass: #ProductTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #CleaningTrailerTest stamp: 'CS 7/5/2021 18:42:54'!
TestCase subclass: #CleaningTrailerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classRemoval: #CashierTest stamp: 'CS 7/5/2021 18:42:55'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:44:13'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:44:17'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!CartaDeTrucoTest methodsFor: 'nil' stamp: 'CS 7/5/2021 18:44:09'!
test22fallaPorCartasRepetidasEntreLosJugadores

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noPuedeHaberCartasRepetidas equals: anError messageText].! !

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:44:35'!
ERROR!
!Jugador class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:44:42'!
primerCarta: aCartaDeTruco segundaCarta: aCartaDeTruco2 yTerceraCarta: aCartaDeTruco3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializePrimerCarta: aCartaDeTruco segundaCarta: aCartaDeTruco2 yTerceraCarta: aCartaDeTruco3 ! !
!Jugador class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:45:07' prior: 51285518!
primerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	^self new initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 ! !

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:45:08'!
ERROR!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:45:12'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:45:12'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:45:13'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME carta3_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:45:13'!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 
	self shouldBeImplemented.
	carta1_CHANGE_ME := carta1.
	carta2_CHANGE_ME := carta2.
	carta3_CHANGE_ME := carta3.! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:45:37'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME carta3_CHANGE_ME primerCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:45:38'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME carta3_CHANGE_ME primerCarta segundaCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:45:40'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME carta3_CHANGE_ME primerCarta segundaCarta terceraCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:45:35' prior: 51285567!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	primerCarta := carta1.
	segundaCarta := carta2.
	terceraCarta := carta3.! !

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:45:43'!
ERROR!
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:45:48'!
entre: aJugador y: aJugador2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeEntre: aJugador y: aJugador2 ! !
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:46:08' prior: 51285616!
entre: jugador1 y: jugador2 

	^self new initializeEntre: jugador1 y: jugador2 ! !

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:46:09'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:46:14'!
Object subclass: #Ronda
	instanceVariableNames: 'jugador1_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:46:14'!
Object subclass: #Ronda
	instanceVariableNames: 'jugador1_CHANGE_ME jugador2_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:46:14'!
initializeEntre: jugador1 y: jugador2 
	self shouldBeImplemented.
	jugador1_CHANGE_ME := jugador1.
	jugador2_CHANGE_ME := jugador2.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:47:06'!
Object subclass: #Ronda
	instanceVariableNames: 'jugador1_CHANGE_ME jugador2_CHANGE_ME jugadorUno'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:47:07'!
Object subclass: #Ronda
	instanceVariableNames: 'jugador1_CHANGE_ME jugador2_CHANGE_ME jugadorUno jugadorDos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:47:05' prior: 51285650!
initializeEntre: jugador1 y: jugador2 

	jugadorUno := jugador1.
	jugadorDos := jugador2.! !

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:47:09'!
FAILURE!
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:48:30' prior: 51285625!
entre: jugador1 y: jugador2 

	jugador1 cartas do: [ :carta | carta includes: jugador2 cartas].
	 
	^self new initializeEntre: jugador1 y: jugador2 ! !

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:48:33'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:48:39'!
cartas
	self shouldBeImplemented.! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:48:49'!
Object subclass: #Jugador
	instanceVariableNames: 'carta1_CHANGE_ME carta2_CHANGE_ME carta3_CHANGE_ME primerCarta segundaCarta terceraCarta cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:48:47' prior: 51285696!
cartas

	^ cartas! !

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:48:57'!
ERROR!
!Jugador methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:49:42' prior: 51285605!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	primerCarta := carta1.
	segundaCarta := carta2.
	terceraCarta := carta3.
	cartas := [carta1, carta2, carta3]! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 18:49:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:49:51'!
ERROR!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:49:51'!
ERROR!

Object subclass: #Ronda
	instanceVariableNames: 'jugadorUno jugadorDos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:50:07'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorUno jugadorDos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Jugador
	instanceVariableNames: 'primerCarta segundaCarta terceraCarta cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 18:50:12'!
Object subclass: #Jugador
	instanceVariableNames: 'primerCarta segundaCarta terceraCarta cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:50:27'!
test21fallaPorCartasRepetidasEntreLosJugadores

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noPuedeHaberCartasRepetidas equals: anError messageText].! !

!methodRemoval: CartaDeTrucoTest #test22fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:50:27'!
test22fallaPorCartasRepetidasEntreLosJugadores

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 1.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noPuedeHaberCartasRepetidas equals: anError messageText].!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:50:40'!
ERROR!

jugador1 cartas!
!Jugador methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:51:41' prior: 51285718!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	primerCarta := carta1.
	segundaCarta := carta2.
	terceraCarta := carta3.
	cartas := OrderedCollection new.! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 18:51:53' prior: 51285711!
cartas

	^ cartas ! !
!Jugador methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:52:21' prior: 51285887!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	primerCarta := carta1.
	segundaCarta := carta2.
	terceraCarta := carta3.
	cartas := OrderedCollection new.
	cartas add: primerCarta.
	cartas add: segundaCarta.
	cartas add: terceraCarta.! !
!Jugador methodsFor: 'initialization' stamp: 'CS 7/5/2021 18:52:24' prior: 51285900!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	primerCarta := carta1.
	segundaCarta := carta2.
	terceraCarta := carta3.
	
	cartas := OrderedCollection new.
	cartas add: primerCarta.
	cartas add: segundaCarta.
	cartas add: terceraCarta.! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 18:52:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:52:33'!
ERROR!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:52:33'!
ERROR!

jugador1 cartas!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 18:54:17' prior: 51285826!
test21fallaPorCartasRepetidasEntreLosJugadores

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noPuedeHaberCartasRepetidas equals: anError messageText].! !

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 18:54:33'!
ERROR!

jugador1 cartas!
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:58:46' prior: 51285685!
entre: jugador1 y: jugador2 

	jugador1 cartas do: [ :carta | jugador2 cartas includes: carta].
	 
	^self new initializeEntre: jugador1 y: jugador2 ! !
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:59:06' prior: 51286028!
entre: jugador1 y: jugador2 

	jugador1 cartas do: [ :carta | (jugador2 cartas) includes: carta].
	 
	^self new initializeEntre: jugador1 y: jugador2 ! !

(jugador2 cartas)!

(jugador2 cartas) includes: carta!
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 18:59:59' prior: 51286036!
entre: jugador1 y: jugador2 

	| cartaRepetida |
	cartaRepetida := jugador1 cartas select: [ :carta | (jugador2 cartas) includes: carta].
	 
	^self new initializeEntre: jugador1 y: jugador2 ! !
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 19:14:04' prior: 51286046!
entre: jugador1 y: jugador2 

	(jugador1 cartas) anySatisfy: [ :carta | (jugador2 cartas) includes: carta].
	
	^self new initializeEntre: jugador1 y: jugador2.! !

(jugador1 cartas) anySatisfy: [ :carta | (jugador2 cartas) includes: carta].!
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 19:17:47' prior: 51286055!
entre: jugador1 y: jugador2 

	((jugador1 cartas) anySatisfy: [ :carta | (jugador2 cartas) includes: carta]) ifTrue: [ ^ self noSePuedenTenerCartasRepetidasEntreJugadoresDescripcionDeError].
	
	^self new initializeEntre: jugador1 y: jugador2.! !

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:17:50'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 19:17:56'!
noSePuedenTenerCartasRepetidasEntreJugadoresDescripcionDeError
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 19:18:13' prior: 51286080!
noSePuedenTenerCartasRepetidasEntreJugadoresDescripcionDeError

	^ 'No se pueden tener cartas repetidas entre jugadores'! !

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:18:15'!
FAILURE!
!Ronda class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 19:18:42' prior: 51286066!
entre: jugador1 y: jugador2 

	((jugador1 cartas) anySatisfy: [ :carta | (jugador2 cartas) includes: carta]) ifTrue: [ ^ self error: self noSePuedenTenerCartasRepetidasEntreJugadoresDescripcionDeError].
	
	^self new initializeEntre: jugador1 y: jugador2.! !

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:18:43'!
ERROR!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:19:04' prior: 51285995!
test21fallaPorCartasRepetidasEntreLosJugadores

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noSePuedenTenerCartasRepetidasEntreJugadoresDescripcionDeError equals: anError messageText].! !

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:19:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:19:06'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:20:28'!
test22fallaPorCartasRepetidasEnElMismoJugador

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco anchoDeEspada.

	cartaPie1 := CartaDeTruco oroCon: 2.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noSePuedenTenerCartasRepetidasEntreJugadoresDescripcionDeError equals: anError messageText].! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:20:51' prior: 51286213!
test22fallaPorCartasRepetidasEnElMismoJugador

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco anchoDeEspada.

	cartaPie1 := CartaDeTruco oroCon: 2.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError equals: anError messageText].! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 19:21:22'!
noSePuedeTenerCartasRepetidasEntreJugadoresDescripcionDeError

	^ 'No se pueden tener cartas repetidas entre jugadores'! !
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 19:21:22' prior: 51286112!
test21fallaPorCartasRepetidasEntreLosJugadores

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noSePuedeTenerCartasRepetidasEntreJugadoresDescripcionDeError equals: anError messageText].! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 19:21:22' prior: 51286097!
entre: jugador1 y: jugador2 

	((jugador1 cartas) anySatisfy: [ :carta | (jugador2 cartas) includes: carta]) ifTrue: [ ^ self error: self noSePuedeTenerCartasRepetidasEntreJugadoresDescripcionDeError].
	
	^self new initializeEntre: jugador1 y: jugador2.! !

!methodRemoval: Ronda class #noSePuedenTenerCartasRepetidasEntreJugadoresDescripcionDeError stamp: 'CS 7/5/2021 19:21:22'!
noSePuedenTenerCartasRepetidasEntreJugadoresDescripcionDeError

	^ 'No se pueden tener cartas repetidas entre jugadores'!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:21:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:21:25'!
FAILURE!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:21:25'!
FAILURE!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:21:53'!
PASSED!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:21:53'!
FAILURE!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:21:53'!
FAILURE!
!Jugador methodsFor: 'initialization' stamp: 'CS 7/5/2021 19:22:30' prior: 51285911!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	primerCarta := carta1.
	segundaCarta := carta2.
	terceraCarta := carta3.! !
!Jugador methodsFor: 'initialization' stamp: 'CS 7/5/2021 19:22:40' prior: 51286478!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	primerCarta := carta1.
	segundaCarta := carta2.
	terceraCarta := carta3.
	
	cartas := OrderedCollection new.
	cartas add: primerCarta.
	cartas add: segundaCarta.
	cartas add: terceraCarta.! !
!Jugador class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 19:23:02' prior: 51285531!
primerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	| cartas |
	cartas := OrderedCollection new.
	cartas add: carta1.
	cartas add: carta2.
	cartas add: carta3.
	
	^self new initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 ! !
!Jugador class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 19:24:07' prior: 51286498!
primerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	| cartas |
	cartas := Bag new.
	cartas add: carta1.
	cartas add: carta2.
	cartas add: carta3.
	
	cartas anySatisfy: [ :carta | (cartas occurrencesOf: carta) > 0].
	
	^self new initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 ! !
!Jugador class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 19:24:10' prior: 51286510!
primerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	| cartas |
	cartas := Bag new.
	cartas add: carta1.
	cartas add: carta2.
	cartas add: carta3.
	
	cartas anySatisfy: [ :carta | (cartas occurrencesOf: carta) > 0].

	^self new initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 ! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:24:17'!
PASSED!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:24:17'!
FAILURE!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:24:17'!
FAILURE!
!Jugador class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 19:25:03' prior: 51286523!
primerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	| cartas |
	cartas := Bag new.
	cartas add: carta1.
	cartas add: carta2.
	cartas add: carta3.
	
	(cartas anySatisfy: [ :carta | (cartas occurrencesOf: carta) > 0]) ifTrue: [ ^ self error: self unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError].

	^self new initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 ! !

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:25:07'!
ERROR!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 19:25:11'!
unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError
	self shouldBeImplemented.! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 19:25:29' prior: 51286631!
unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError

	^ 'Un jugador no puede tener cartas repetidas'! !

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:25:31'!
ERROR!

cartas occurrencesOf: carta!

(cartas occurrencesOf: carta) > 0!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:26:24'!
ERROR!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:26:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:26:30'!
ERROR!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:26:30'!
ERROR!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:26:42'!
ERROR!
!Jugador class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 19:27:13' prior: 51286612!
primerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	| cartas |
	cartas := Bag new.
	cartas add: carta1.
	cartas add: carta2.
	cartas add: carta3.
	
	(cartas anySatisfy: [ :carta | (cartas occurrencesOf: carta) > 1]) ifTrue: [ ^ self error: self unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError].

	^self new initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 ! !

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:27:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:27:14'!
ERROR!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:27:14'!
ERROR!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:27:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:27:23'!
ERROR!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:27:23'!
ERROR!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:27:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:27:32'!
ERROR!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:27:32'!
ERROR!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:27:50'!
ERROR!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:28:23' prior: 51286242!
test22fallaPorCartasRepetidasEnElMismoJugador

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco anchoDeEspada.

	cartaPie1 := CartaDeTruco oroCon: 2.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError equals: anError messageText].! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:29:01' prior: 51286977!
test22fallaPorCartasRepetidasEnElMismoJugador

	| cartaMano1 cartaMano2 cartaMano3 |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco anchoDeEspada.

	self 
		should: [Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError equals: anError messageText].! !

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:29:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:29:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:29:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:29:13'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:29:58'!
test21fallaPorCartasRepetidasEnElMismoJugador

	| cartaMano1 cartaMano2 cartaMano3 |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco anchoDeEspada.

	self 
		should: [Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError equals: anError messageText].! !

!methodRemoval: CartaDeTrucoTest #test22fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:29:58'!
test22fallaPorCartasRepetidasEnElMismoJugador

	| cartaMano1 cartaMano2 cartaMano3 |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco anchoDeEspada.

	self 
		should: [Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError equals: anError messageText].!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:30:21'!
test22noSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noSePuedeTenerCartasRepetidasEntreJugadoresDescripcionDeError equals: anError messageText].! !

!methodRemoval: CartaDeTrucoTest #test21fallaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:30:21'!
test21fallaPorCartasRepetidasEntreLosJugadores

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noSePuedeTenerCartasRepetidasEntreJugadoresDescripcionDeError equals: anError messageText].!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:30:33'!
test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noSePuedeTenerCartasRepetidasEntreJugadoresDescripcionDeError equals: anError messageText].! !

!methodRemoval: CartaDeTrucoTest #test22noSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:30:33'!
test22noSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noSePuedeTenerCartasRepetidasEntreJugadoresDescripcionDeError equals: anError messageText].!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:30:55'!
test21NoSePuedeCrearElJugadorPorCartasRepetidas

	| cartaMano1 cartaMano2 cartaMano3 |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco anchoDeEspada.

	self 
		should: [Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError equals: anError messageText].! !

!methodRemoval: CartaDeTrucoTest #test21fallaPorCartasRepetidasEnElMismoJugador stamp: 'CS 7/5/2021 19:30:55'!
test21fallaPorCartasRepetidasEnElMismoJugador

	| cartaMano1 cartaMano2 cartaMano3 |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco anchoDeEspada.

	self 
		should: [Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador unJugadorNoPuedeTenerCartasRepetidasDescripcionDeError equals: anError messageText].!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:32:25'!
test23

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco anchoDeEspada.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		should: [Ronda entre: jugadorMano y: jugadorPie.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noSePuedeTenerCartasRepetidasEntreJugadoresDescripcionDeError equals: anError messageText].! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:33:35' prior: 51287294!
test23

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		shouldntFail: [Ronda entre: jugadorMano y: jugadorPie]! !

!testRun: #CartaDeTrucoTest #test23 stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:33:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test23 stamp: 'CS 7/5/2021 19:33:39'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:34:00'!
test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		shouldntFail: [Ronda entre: jugadorMano y: jugadorPie]! !

!methodRemoval: CartaDeTrucoTest #test23 stamp: 'CS 7/5/2021 19:34:04'!
test23

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		shouldntFail: [Ronda entre: jugadorMano y: jugadorPie]!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 19:34:14'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:35:57'!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	self 
		shouldntFail: [Ronda entre: jugadorMano y: jugadorPie]! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:36:12' prior: 51287470!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco copaCon: 6.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco anchoDeEspada.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	! !

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:43:40'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:43:35' prior: 51287494!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	primerEnfrentamiento := PrimerEnfrentamiento entre: jugadorMano conLaCarta: cartaMano2 y: jugadorPie conLaCarta: cartaPie2.
	
	self assert: primerEnfrentamiento ganoElJugador: jugadorMano.

	! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:44:05' prior: 51287526!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	primerEnfrentamiento := PrimerEnfrentamiento entre: jugadorMano conLaCarta: cartaMano2 y: jugadorPie conLaCarta: cartaPie2.
	
	self assert: (primerEnfrentamiento ganoElJugador: jugadorMano).

	! !

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 19:44:09'!
ERROR!
!PrimerEnfrentamiento class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 19:44:32'!
entre: aJugador conLaCarta: aCartaDeTruco y: aJugador3 conLaCarta: aCartaDeTruco4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeEntre: aJugador conLaCarta: aCartaDeTruco y: aJugador3 conLaCarta: aCartaDeTruco4 ! !
!PrimerEnfrentamiento class methodsFor: 'instance creation' stamp: 'CS 7/5/2021 19:45:13' prior: 51287590!
entre: jugador1 conLaCarta: cartaJugador1 y: jugador2 conLaCarta: cartaJugador2 

	^self new initializeEntre: jugador1 conLaCarta: cartaJugador1 y: jugador2 conLaCarta: cartaJugador2! !

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 19:45:14'!
ERROR!

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:45:19'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'jugador1_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:45:19'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'jugador1_CHANGE_ME cartaJugador1_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:45:19'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'jugador1_CHANGE_ME cartaJugador1_CHANGE_ME jugador2_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:45:20'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'jugador1_CHANGE_ME cartaJugador1_CHANGE_ME jugador2_CHANGE_ME cartaJugador2_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!PrimerEnfrentamiento methodsFor: 'initialization' stamp: 'CS 7/5/2021 19:45:20'!
initializeEntre: jugador1 conLaCarta: cartaJugador1 y: jugador2 conLaCarta: cartaJugador2 
	self shouldBeImplemented.
	jugador1_CHANGE_ME := jugador1.
	cartaJugador1_CHANGE_ME := cartaJugador1.
	jugador2_CHANGE_ME := jugador2.
	cartaJugador2_CHANGE_ME := cartaJugador2.! !
!PrimerEnfrentamiento methodsFor: 'initialization' stamp: 'CS 7/5/2021 19:45:39' prior: 51287654!
initializeEntre: jugador1 conLaCarta: cartaJugador1 y: jugador2 conLaCarta: cartaJugador2 
! !

Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:45:54'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:46:44'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'primerJugador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:46:45'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'primerJugador cartaDelPrimerJugador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:46:47'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'primerJugador cartaDelPrimerJugador segundoJugador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:46:48'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'primerJugador cartaDelPrimerJugador segundoJugador cartaDelSegundoJugador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!PrimerEnfrentamiento methodsFor: 'initialization' stamp: 'CS 7/5/2021 19:46:43' prior: 51287666!
initializeEntre: jugador1 conLaCarta: cartaJugador1 y: jugador2 conLaCarta: cartaJugador2

	primerJugador := jugador1.
	cartaDelPrimerJugador := cartaJugador1.
	segundoJugador := jugador2.
	cartaDelSegundoJugador := cartaJugador2. 
! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 19:47:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 19:47:04'!
ERROR!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 19:47:04'!
ERROR!
!PrimerEnfrentamiento methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 19:47:09'!
ganoElJugador: aJugador 
	self shouldBeImplemented.! !

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:48:35'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'primerJugador cartaDelPrimerJugador segundoJugador cartaDelSegundoJugador cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!PrimerEnfrentamiento methodsFor: 'initialization' stamp: 'CS 7/5/2021 19:48:33' prior: 51287723!
initializeEntre: jugador1 conLaCarta: cartaJugador1 y: jugador2 conLaCarta: cartaJugador2

	cartas := Dictionary new.
	cartas at: jugador1 put: cartaJugador1.
	cartas at: jugador2 put: cartaJugador2.

! !

Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:48:43'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:51:58' prior: 51287556!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.

	! !

!classRemoval: #PrimerEnfrentamiento stamp: 'CS 7/5/2021 19:52:09'!
Object subclass: #PrimerEnfrentamiento
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 19:53:59' prior: 51287856!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2.
	ronda juegaElJugador: jugadorPie conLaCarta: cartaPie2.
	
	self assert: (ronda gano: jugadorMano).

	

	! !

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 19:54:30'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 19:54:37'!
juegaElJugador: aJugador conLaCarta: aCartaDeTruco 
	self shouldBeImplemented.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 19:57:16'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorUno jugadorDos primerEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 19:57:14' prior: 51285675!
initializeEntre: jugador1 y: jugador2 

	jugadorUno := jugador1.
	jugadorDos := jugador2.
	primerEnfrentamiento := Dictionary new.! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:06:19' prior: 51287887!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	
	self assert: (ronda gano: jugadorMano).

	

	! !

!methodRemoval: Ronda #juegaElJugador:conLaCarta: stamp: 'CS 7/5/2021 20:06:29'!
juegaElJugador: aJugador conLaCarta: aCartaDeTruco 
	self shouldBeImplemented.!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:06:50'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:06:56'!
juegaElJugador: aJugador conLaCarta: aCartaDeTruco contra: aJugador3 conLaCarta: aCartaDeTruco4 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:09:31' prior: 51287977!
juegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	primerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	primerEnfrentamiento at: jugador1 put: (cartaDelJugador2 mataA: cartaDelJugador1).! !

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:09:38'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:09:43'!
gano: aJugador 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:09:59' prior: 51287999!
gano: jugador 

	primerEnfrentamiento at: jugador! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:10:02' prior: 51288004!
gano: jugador 

	^ primerEnfrentamiento at: jugador! !

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:10:04'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:10:31' prior: 51287984!
juegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	primerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	primerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).! !

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:10:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:10:32'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:11:28'!
test24GanaLosDosPrimerosEnfrentamientosElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda gano: jugadorMano).

	

	! !

!methodRemoval: CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:11:32'!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco bastoCon: 2.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco anchoDeBasto.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	
	self assert: (ronda gano: jugadorMano).

	

	!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:11:57' prior: 51288113!
test24GanaLosDosPrimerosEnfrentamientosElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda gano: jugadorMano).

	

	! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:12:09' prior: 51288173!
test24GanaLosDosPrimerosEnfrentamientosElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie3.

	self assert: (ronda gano: jugadorMano).

	

	! !

!testRun: #CartaDeTrucoTest #test24GanaLosDosPrimerosEnfrentamientosElQueEsMano stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:12:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaLosDosPrimerosEnfrentamientosElQueEsMano stamp: 'CS 7/5/2021 20:12:15'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:12:39' prior: 51288204!
test24GanaLosDosPrimerosEnfrentamientosElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda gano: jugadorMano).

	

	! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:12:59'!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda gano: jugadorMano).

	

	! !

!methodRemoval: CartaDeTrucoTest #test24GanaLosDosPrimerosEnfrentamientosElQueEsMano stamp: 'CS 7/5/2021 20:12:59'!
test24GanaLosDosPrimerosEnfrentamientosElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda gano: jugadorMano).

	

	!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:13:37'!
test25GanaLosDosPrimerosEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie3.

	self assert: (ronda gano: jugadorMano).

	

	! !

!testRun: #CartaDeTrucoTest #test25GanaLosDosPrimerosEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:13:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test25GanaLosDosPrimerosEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:13:40'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:14:18'!
primerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	primerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	primerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).! !
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:14:18' prior: 51288348!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda gano: jugadorMano).

	

	! !
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:14:18' prior: 51288404!
test25GanaLosDosPrimerosEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie3.

	self assert: (ronda gano: jugadorMano).

	

	! !

!methodRemoval: Ronda #juegaElJugador:conLaCarta:contra:conLaCarta: stamp: 'CS 7/5/2021 20:14:18'!
juegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	primerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	primerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:14:40' prior: 51288564!
test25GanaLosDosPrimerosEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie3.

	self assert: (ronda gano: jugadorMano).

	

	! !

!testRun: #CartaDeTrucoTest #test25GanaLosDosPrimerosEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:14:55'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:15:04'!
segundoEnfrentamientoJuegaElJugador: aJugador conLaCarta: aCartaDeTruco contra: aJugador3 conLaCarta: aCartaDeTruco4 
	self shouldBeImplemented.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 20:15:34'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorUno jugadorDos primerEnfrentamiento segundoEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:15:32' prior: 51288644!
segundoEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	segundoEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	segundoEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:16:19' prior: 51288009!
gano: jugador 

	^ (primerEnfrentamiento at: jugador) and: [primerEnfrentamiento at: jugador].! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:16:27' prior: 51288673!
gano: jugador 

	^ (primerEnfrentamiento at: jugador) and: [segundoEnfrentamiento at: jugador].! !
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 20:16:40' prior: 51287933!
initializeEntre: jugador1 y: jugador2 

	jugadorUno := jugador1.
	jugadorDos := jugador2.
	primerEnfrentamiento := Dictionary new.
	segundoEnfrentamiento := Dictionary new.! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:16:47'!
ERROR!

!testRun: #CartaDeTrucoTest #test25GanaLosDosPrimerosEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:16:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:16:47'!
ERROR!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:17:17'!
xtest24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda gano: jugadorMano).

	

	! !

!methodRemoval: CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:17:17'!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda gano: jugadorMano).

	

	!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:17:20'!
PASSED!

!testRun: #CartaDeTrucoTest #test25GanaLosDosPrimerosEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:17:20'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:21:41'!
ganoPrimerEnfrentamiento: jugador 

	^ (primerEnfrentamiento at: jugador) and: [segundoEnfrentamiento at: jugador].! !
!CartaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:21:41' prior: 51288608!
test25GanaLosDosPrimerosEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie3.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).

	

	! !

!methodRemoval: Ronda #gano: stamp: 'CS 7/5/2021 20:21:41'!
gano: jugador 

	^ (primerEnfrentamiento at: jugador) and: [segundoEnfrentamiento at: jugador].!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:21:53'!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda gano: jugadorMano).

	

	! !

!methodRemoval: CartaDeTrucoTest #xtest24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:21:53'!
xtest24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda gano: jugadorMano).

	

	!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:22:03' prior: 51288963!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).

	

	! !

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:22:08'!
ERROR!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:22:08'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:22:23' prior: 51288918!
ganoPrimerEnfrentamiento: jugador 

	^ (primerEnfrentamiento at: jugador).! !

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:22:34'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:24:15'!
test25ElPrimeroQueTiraEnElSegundoEnfrentamientoNoEsElQueGanoElAnterior

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).


	

	! !

!methodRemoval: CartaDeTrucoTest #test25GanaLosDosPrimerosEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:24:20'!
test25GanaLosDosPrimerosEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie3.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).

	

	!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:24:50' prior: 51289065!
test25ElPrimeroQueTiraEnElSegundoEnfrentamientoNoEsElQueGanoElAnterior

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1.

	self 
		should: [	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noSePuedeTenerCartasRepetidasEntreJugadoresDescripcionDeError equals: anError messageText].


	

	! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:25:10' prior: 51289132!
test25ElPrimeroQueTiraEnElSegundoEnfrentamientoNoEsElQueGanoElAnterior

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1.

	self 
		should: [	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noLeTocabaElTurnoAElDescripcionDeError equals: anError messageText].


	

	! !

!testRun: #CartaDeTrucoTest #test25ElPrimeroQueTiraEnElSegundoEnfrentamientoNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:25:16'!
FAILURE!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:26:00'!
test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiraEnElSegundoEnfrentamientoNoEsElQueGanoElAnterior

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1.

	self 
		should: [	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noLeTocabaElTurnoAElDescripcionDeError equals: anError messageText].


	

	! !

!methodRemoval: CartaDeTrucoTest #test25ElPrimeroQueTiraEnElSegundoEnfrentamientoNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:26:00'!
test25ElPrimeroQueTiraEnElSegundoEnfrentamientoNoEsElQueGanoElAnterior

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1.

	self 
		should: [	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noLeTocabaElTurnoAElDescripcionDeError equals: anError messageText].


	

	!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:26:15'!
test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1.

	self 
		should: [	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noLeTocabaElTurnoAElDescripcionDeError equals: anError messageText].


	

	! !

!methodRemoval: CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiraEnElSegundoEnfrentamientoNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:26:15'!
test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiraEnElSegundoEnfrentamientoNoEsElQueGanoElAnterior

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1.

	self 
		should: [	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noLeTocabaElTurnoAElDescripcionDeError equals: anError messageText].


	

	!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:26:20'!
FAILURE!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:26:34' prior: 51289304!
test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self 
		should: [	ronda segundoEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie3 contra: jugadorMano conLaCarta: cartaMano1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Ronda noLeTocabaElTurnoAElDescripcionDeError equals: anError messageText].


	

	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:27:22' prior: 51288661!
segundoEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(primerEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class ]
	segundoEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	segundoEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:27:26' prior: 51289434!
segundoEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(primerEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class ].
	segundoEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	segundoEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:27:50' prior: 51289449!
segundoEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(primerEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].
	segundoEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	segundoEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:27:53' prior: 51289464!
segundoEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(primerEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	segundoEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	segundoEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).! !

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:28:00'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:28:05'!
noLeTocabaElTurnoAElDescripcionDeError
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:28:24' prior: 51289501!
noLeTocabaElTurnoAElDescripcionDeError

	^ 'No le tocaba el turno a el'! !

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:28:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:30:52'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:30:52'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:32:44'!
test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).
	self assert: (ronda ganoSegundoEnfrentamiento: jugadorMano).
	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:32:48'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:32:53'!
ganoSegundoEnfrentamiento: aJugador 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'segundo enfrentamiento' stamp: 'CS 7/5/2021 20:33:25' prior: 51289734!
ganoSegundoEnfrentamiento: aJugador 

	! !
!Ronda methodsFor: 'segundo enfrentamiento' stamp: 'CS 7/5/2021 20:33:44' prior: 51289739!
ganoSegundoEnfrentamiento: jugador 

		^ (segundoEnfrentamiento at: jugador).! !
!Ronda methodsFor: 'segundo enfrentamiento' stamp: 'CS 7/5/2021 20:33:51' prior: 51289744!
ganoSegundoEnfrentamiento: jugador

	^ (segundoEnfrentamiento at: jugador).! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:33:55'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:33:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:33:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:33:56'!
ERROR!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:33:56'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:34:00'!
ganoLaPartida: aJugador 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 20:34:47' prior: 51289849!
ganoLaPartida: jugador 

	^ (self ganoSegundoEnfrentamiento: jugador) and: [self ganoPrimerEnfrentamiento: jugador].! !

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:34:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:34:54'!
PASSED!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 20:35:55'!
Object subclass: #Jugador
	instanceVariableNames: 'primerCarta segundaCarta terceraCarta cartas puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'nil' stamp: 'CS 7/5/2021 20:35:53'!
puntaje

	^ puntaje! !
!Jugador methodsFor: 'nil' stamp: 'CS 7/5/2021 20:36:24'!
incrementarPuntaje

	puntaje := puntaje + 1! !
!Ronda methodsFor: 'primer enfrentamiento' stamp: 'CS 7/5/2021 20:37:39' prior: 51288522!
primerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	primerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	primerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).
	
	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'segundo enfrentamiento' stamp: 'CS 7/5/2021 20:37:51' prior: 51289480!
segundoEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(primerEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	segundoEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	segundoEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Jugador methodsFor: 'inicializacion' stamp: 'CS 7/5/2021 20:38:34' prior: 51286486!
initializePrimerCarta: carta1 segundaCarta: carta2 yTerceraCarta: carta3 

	primerCarta := carta1.
	segundaCarta := carta2.
	terceraCarta := carta3.
	
	cartas := OrderedCollection new.
	cartas add: primerCarta.
	cartas add: segundaCarta.
	cartas add: terceraCarta.
	
	puntaje := 0.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 20:39:51'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorUno jugadorDos primerEnfrentamiento segundoEnfrentamiento jugadores'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 20:39:49' prior: 51288685!
initializeEntre: jugador1 y: jugador2 

	jugadorUno := jugador1.
	jugadorDos := jugador2.
	jugadores := OrderedCollection new.
	jugadores add: jugador1.
	jugadores add: jugador2.

	primerEnfrentamiento := Dictionary new.
	segundoEnfrentamiento := Dictionary new.! !
!Ronda methodsFor: 'ganador' stamp: 'CS 7/5/2021 20:40:36' prior: 51289854!
ganoLaPartida: jugador 

	^ jugadores select: [ :unJugador | unJugador puntaje >= 2]! !
!Ronda methodsFor: 'ganador' stamp: 'CS 7/5/2021 20:41:05' prior: 51290039!
ganoLaPartida: jugador 

	^ jugador puntaje >= 2.! !
!Ronda methodsFor: 'ganador' stamp: 'CS 7/5/2021 20:41:11' prior: 51290045!
ganoLaPartida: jugador 

	^ (jugador puntaje) >= 2.! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:41:15'!
PASSED!

jugador puntaje!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:43:19'!
test26GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).
	self deny: (ronda ganoSegundoEnfrentamiento: jugadorMano).
	self assert: (ronda ganoTercerEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:43:31'!
test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).
	self deny: (ronda ganoSegundoEnfrentamiento: jugadorMano).
	self assert: (ronda ganoTercerEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !

!methodRemoval: CartaDeTrucoTest #test26GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:43:31'!
test26GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).
	self deny: (ronda ganoSegundoEnfrentamiento: jugadorMano).
	self assert: (ronda ganoTercerEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:45:00' prior: 51290187!
test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco oroCon: 6.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano3 contra: jugadorPie conLaCarta: cartaPie3.
	ronda tercerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie1.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).
	self deny: (ronda ganoSegundoEnfrentamiento: jugadorMano).
	self assert: (ronda ganoTercerEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:45:09'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 20:46:01'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorUno jugadorDos primerEnfrentamiento segundoEnfrentamiento jugadores tercerEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'nil' stamp: 'CS 7/5/2021 20:46:00'!
tercerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(segundoEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	tercerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	tercerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 20:46:24' prior: 51290028!
initializeEntre: jugador1 y: jugador2 

	jugadorUno := jugador1.
	jugadorDos := jugador2.
	jugadores := OrderedCollection new.
	jugadores add: jugador1.
	jugadores add: jugador2.

	primerEnfrentamiento := Dictionary new.
	segundoEnfrentamiento := Dictionary new.
	tercerEnfrentamiento := Dictionary new.! !
!Ronda methodsFor: 'nil' stamp: 'CS 7/5/2021 20:47:02'!
ganoTercerEnfrentamiento: jugador

	^ (tercerEnfrentamiento at: jugador).! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:47:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:47:12'!
ERROR!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:47:12'!
ERROR!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:47:16'!
PASSED!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:47:16'!
ERROR!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:47:16'!
ERROR!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:47:21'!
ERROR!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:48:06' prior: 51290274!
test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco oroCon: 6.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano3 contra: jugadorPie conLaCarta: cartaPie3.
	ronda tercerEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie1 contra: jugadorMano conLaCarta: cartaMano1.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).
	self deny: (ronda ganoSegundoEnfrentamiento: jugadorMano).
	self assert: (ronda ganoTercerEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:48:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 20:48:09'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:50:28'!
test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco oroCon: 6.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano3 contra: jugadorPie conLaCarta: cartaPie3.
	ronda tercerEnfrentamientoJuegaElJugador: jugadorPie conLaCarta: cartaPie1 contra: jugadorMano conLaCarta: cartaMano1.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).
	self deny: (ronda ganoSegundoEnfrentamiento: jugadorMano).
	self assert: (ronda ganoTercerEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !

(CartaDeTruco oroCon: 6) empardaCon: (CartaDeTruco copaCon: 6)!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 20:54:28' prior: 51290707!
test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 6.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco oroCon: 6.

	cartaPie1 := CartaDeTruco copaCon: 6.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie1.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda empardoPrimerEnfrentamiento: jugadorMano).
	self assert: (ronda empardoPrimerEnfrentamiento: jugadorPie).

	self assert: (ronda ganoSegundoEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !

!testRun: #CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 20:54:34'!
ERROR!

(CartaDeTruco oroCon: 6) mataA: (CartaDeTruco copaCon: 6)!
!Ronda methodsFor: 'nil' stamp: 'CS 7/5/2021 21:00:17'!
empardoPrimerEnfrentamiento: jugador! !
!Ronda methodsFor: 'segundo enfrentamiento' stamp: 'CS 7/5/2021 21:05:14' prior: 51289987!
segundoEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(primerEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	segundoEnfrentamiento at: jugador1 put: ((cartaDelJugador1 mataA: cartaDelJugador2) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	segundoEnfrentamiento at: jugador2 put: ((cartaDelJugador2 mataA: cartaDelJugador1) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'primer enfrentamiento' stamp: 'CS 7/5/2021 21:05:43' prior: 51289971!
primerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	primerEnfrentamiento at: jugador1 put: ((cartaDelJugador1 mataA: cartaDelJugador2) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	primerEnfrentamiento at: jugador2 put: ((cartaDelJugador2 mataA: cartaDelJugador1) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	
	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'tercer enfrentamiento' stamp: 'CS 7/5/2021 21:06:10' prior: 51290330!
tercerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(segundoEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	tercerEnfrentamiento at: jugador1 put: ((cartaDelJugador1 mataA: cartaDelJugador2) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	tercerEnfrentamiento at: jugador2 put: ((cartaDelJugador2 mataA: cartaDelJugador1) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)])..

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'tercer enfrentamiento' stamp: 'CS 7/5/2021 21:06:11' prior: 51290844!
tercerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(segundoEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	tercerEnfrentamiento at: jugador1 put: ((cartaDelJugador1 mataA: cartaDelJugador2) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	tercerEnfrentamiento at: jugador2 put: ((cartaDelJugador2 mataA: cartaDelJugador1) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 21:06:22'!
xtest28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 6.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco oroCon: 6.

	cartaPie1 := CartaDeTruco copaCon: 6.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie1.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda empardoPrimerEnfrentamiento: jugadorMano).
	self assert: (ronda empardoPrimerEnfrentamiento: jugadorPie).

	self assert: (ronda ganoSegundoEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !

!methodRemoval: CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:06:22'!
test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 6.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco oroCon: 6.

	cartaPie1 := CartaDeTruco copaCon: 6.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie1.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda empardoPrimerEnfrentamiento: jugadorMano).
	self assert: (ronda empardoPrimerEnfrentamiento: jugadorPie).

	self assert: (ronda ganoSegundoEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 21:06:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:06:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:06:25'!
PASSED!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 21:06:33'!
test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 6.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco oroCon: 6.

	cartaPie1 := CartaDeTruco copaCon: 6.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie1.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda empardoPrimerEnfrentamiento: jugadorMano).
	self assert: (ronda empardoPrimerEnfrentamiento: jugadorPie).

	self assert: (ronda ganoSegundoEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !

!methodRemoval: CartaDeTrucoTest #xtest28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:06:33'!
xtest28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 6.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco oroCon: 6.

	cartaPie1 := CartaDeTruco copaCon: 6.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie1.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda empardoPrimerEnfrentamiento: jugadorMano).
	self assert: (ronda empardoPrimerEnfrentamiento: jugadorPie).

	self assert: (ronda ganoSegundoEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	!

!testRun: #CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:06:40'!
ERROR!
!Ronda methodsFor: 'primer enfrentamiento' stamp: 'CS 7/5/2021 21:05:43' prior: 51290824!
primerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	primerEnfrentamiento at: jugador1 put: ((cartaDelJugador1 mataA: cartaDelJugador2) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	primerEnfrentamiento at: jugador2 put: ((cartaDelJugador2 mataA: cartaDelJugador1) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	
	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'primer enfrentamiento' stamp: 'CS 7/5/2021 21:08:42' prior: 51291145!
primerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	primerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	primerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).
	
	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'primer enfrentamiento' stamp: 'CS 7/5/2021 21:09:55' prior: 51291165!
primerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(cartaDelJugador1 empardaCon: cartaDelJugador2) ifTrue: [primerEnfrentamiento at: jugador1 put: 'empardo'.
		primerEnfrentamiento at: jugador2 put: 'empardo'].
	primerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	primerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).
	
	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'primer enfrentamiento' stamp: 'CS 7/5/2021 21:10:46' prior: 51291181!
primerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(cartaDelJugador1 empardaCon: cartaDelJugador2) ifTrue:
	[	primerEnfrentamiento at: jugador1 put: 'empardo'.
		primerEnfrentamiento at: jugador2 put: 'empardo'.
		jugador1 incrementarPuntaje.
		jugador2 incrementarPuntaje
	].

	primerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	primerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).
	
	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'segundo enfrentamiento' stamp: 'CS 7/5/2021 21:11:43' prior: 51290801!
segundoEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(primerEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	(cartaDelJugador1 empardaCon: cartaDelJugador2) ifTrue:
	[	segundoEnfrentamiento at: jugador1 put: 'pardo'.
		segundoEnfrentamiento at: jugador2 put: 'pardo'.
		jugador1 incrementarPuntaje.
		jugador2 incrementarPuntaje
	].

	segundoEnfrentamiento at: jugador1 put: ((cartaDelJugador1 mataA: cartaDelJugador2) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	segundoEnfrentamiento at: jugador2 put: ((cartaDelJugador2 mataA: cartaDelJugador1) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'primer enfrentamiento' stamp: 'CS 7/5/2021 21:11:55' prior: 51291202!
primerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(cartaDelJugador1 empardaCon: cartaDelJugador2) ifTrue:
	[	primerEnfrentamiento at: jugador1 put: 'pardo'.
		primerEnfrentamiento at: jugador2 put: 'pardo'.
		jugador1 incrementarPuntaje.
		jugador2 incrementarPuntaje
	].

	primerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	primerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).
	
	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'tercer enfrentamiento' stamp: 'CS 7/5/2021 21:12:17' prior: 51290867!
tercerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(segundoEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	(cartaDelJugador1 empardaCon: cartaDelJugador2) ifTrue:
	[	tercerEnfrentamiento at: jugador1 put: 'empardo'.
		tercerEnfrentamiento at: jugador2 put: 'empardo'.
		jugador1 incrementarPuntaje.
		jugador2 incrementarPuntaje
	].

	tercerEnfrentamiento at: jugador1 put: ((cartaDelJugador1 mataA: cartaDelJugador2) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	tercerEnfrentamiento at: jugador2 put: ((cartaDelJugador2 mataA: cartaDelJugador1) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 21:13:19' prior: 51290796!
empardoPrimerEnfrentamiento: jugador

	^ (primerEnfrentamiento at: jugador = 'pardo')! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:13:24'!
PASSED!

!testRun: #CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:13:24'!
ERROR!

!testRun: #CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:13:24'!
ERROR!

!testRun: #CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:13:32'!
ERROR!

!testRun: #CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:13:43'!
ERROR!

!testRun: #CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:13:49'!
ERROR!
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 21:15:16' prior: 51291062!
test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco oroCon: 6.

	cartaPie1 := CartaDeTruco copaCon: 6.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie1.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda empardoPrimerEnfrentamiento: jugadorMano).
	self assert: (ronda empardoPrimerEnfrentamiento: jugadorPie).

	self assert: (ronda ganoSegundoEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 21:15:27' prior: 51291429!
test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco oroCon: 6.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco anchoDeBasto.

	cartaPie1 := CartaDeTruco copaCon: 6.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda primerEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano1 contra: jugadorPie conLaCarta: cartaPie1.
	ronda segundoEnfrentamientoJuegaElJugador: jugadorMano conLaCarta: cartaMano2 contra: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda empardoPrimerEnfrentamiento: jugadorMano).
	self assert: (ronda empardoPrimerEnfrentamiento: jugadorPie).

	self assert: (ronda ganoSegundoEnfrentamiento: jugadorMano).

	self assert: (ronda ganoLaPartida: jugadorMano).



	

	! !

!testRun: #CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:15:30'!
ERROR!
!Ronda methodsFor: 'primer enfrentamiento' stamp: 'CS 7/5/2021 21:16:47' prior: 51291256!
primerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(cartaDelJugador1 empardaCon: cartaDelJugador2) ifTrue:
	[	primerEnfrentamiento at: jugador1 put: 'pardo'.
		primerEnfrentamiento at: jugador2 put: 'pardo'.
		jugador1 incrementarPuntaje.
		jugador2 incrementarPuntaje
	] ifFalse:
	[
	primerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	primerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).
	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]
	].! !
!Ronda methodsFor: 'segundo enfrentamiento' stamp: 'CS 7/5/2021 21:17:13' prior: 51291225!
segundoEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(primerEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	(cartaDelJugador1 empardaCon: cartaDelJugador2) ifTrue:
	[	segundoEnfrentamiento at: jugador1 put: 'pardo'.
		segundoEnfrentamiento at: jugador2 put: 'pardo'.
		jugador1 incrementarPuntaje.
		jugador2 incrementarPuntaje
	] ifFalse:
	[
	segundoEnfrentamiento at: jugador1 put: ((cartaDelJugador1 mataA: cartaDelJugador2) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	segundoEnfrentamiento at: jugador2 put: ((cartaDelJugador2 mataA: cartaDelJugador1) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]
	].! !
!Ronda methodsFor: 'tercer enfrentamiento' stamp: 'CS 7/5/2021 21:17:26' prior: 51291279!
tercerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(segundoEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	(cartaDelJugador1 empardaCon: cartaDelJugador2) ifTrue:
	[	tercerEnfrentamiento at: jugador1 put: 'empardo'.
		tercerEnfrentamiento at: jugador2 put: 'empardo'.
		jugador1 incrementarPuntaje.
		jugador2 incrementarPuntaje
	] ifFalse:
	[
	tercerEnfrentamiento at: jugador1 put: ((cartaDelJugador1 mataA: cartaDelJugador2) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	tercerEnfrentamiento at: jugador2 put: ((cartaDelJugador2 mataA: cartaDelJugador1) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]
	].! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:17:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:17:29'!
ERROR!

!testRun: #CartaDeTrucoTest #test28SiElPrimerEnfrentamientoFuePardoGanaElQueGanaElSegundo stamp: 'CS 7/5/2021 21:17:29'!
ERROR!
!Ronda methodsFor: 'tercer enfrentamiento' stamp: 'CS 7/5/2021 21:20:08' prior: 51291566!
tercerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(segundoEnfrentamiento at: jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	tercerEnfrentamiento at: jugador1 put: ((cartaDelJugador1 mataA: cartaDelJugador2) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).
	tercerEnfrentamiento at: jugador2 put: ((cartaDelJugador2 mataA: cartaDelJugador1) or: [(cartaDelJugador1 empardaCon: cartaDelJugador2)]).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !

!classRemoval: #Ronda stamp: 'CS 7/5/2021 21:38:34'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorUno jugadorDos primerEnfrentamiento segundoEnfrentamiento jugadores tercerEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #Jugador stamp: 'CS 7/5/2021 21:38:35'!
Object subclass: #Jugador
	instanceVariableNames: 'primerCarta segundaCarta terceraCarta cartas puntaje'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #CartaDeTruco stamp: 'CS 7/5/2021 21:38:35'!
Object subclass: #CartaDeTruco
	instanceVariableNames: 'palo numero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #CartaDeTrucoTest stamp: 'CS 7/5/2021 21:38:36'!
TestCase subclass: #CartaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

----End fileIn of /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/linux64/Segundo Parcial 2021 - iteraciones/Iteracion6.st----!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:38:58'!
ERROR!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:39:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:39:11'!
PASSED!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 21:40:18'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorDos primerEnfrentamiento segundoEnfrentamiento jugadores tercerEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 21:40:18' prior: 51292567!
initializeEntre: jugador1 y: jugador2 

	jugadorMano := jugador1.
	jugadorDos := jugador2.
	jugadores := OrderedCollection new.
	jugadores add: jugador1.
	jugadores add: jugador2.

	primerEnfrentamiento := Dictionary new.
	segundoEnfrentamiento := Dictionary new.
	tercerEnfrentamiento := Dictionary new.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'CS 7/5/2021 21:40:26'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie primerEnfrentamiento segundoEnfrentamiento jugadores tercerEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 21:40:26' prior: 51292804!
initializeEntre: jugador1 y: jugador2 

	jugadorMano := jugador1.
	jugadorPie := jugador2.
	jugadores := OrderedCollection new.
	jugadores add: jugador1.
	jugadores add: jugador2.

	primerEnfrentamiento := Dictionary new.
	segundoEnfrentamiento := Dictionary new.
	tercerEnfrentamiento := Dictionary new.! !
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 21:40:40' prior: 51292827!
initializeEntre: jugador1 y: jugador2 

	jugadorMano := jugador1.
	jugadorPie := jugador2.
	
	jugadores := OrderedCollection new.
	jugadores add: jugador1.
	jugadores add: jugador2.

	primerEnfrentamiento := Dictionary new.
	segundoEnfrentamiento := Dictionary new.
	tercerEnfrentamiento := Dictionary new.! !
!Ronda methodsFor: 'initialization' stamp: 'CS 7/5/2021 21:40:41' prior: 51292840!
initializeEntre: jugador1 y: jugador2 

	jugadorMano := jugador1.
	jugadorPie := jugador2.

	jugadores := OrderedCollection new.
	jugadores add: jugador1.
	jugadores add: jugador2.

	primerEnfrentamiento := Dictionary new.
	segundoEnfrentamiento := Dictionary new.
	tercerEnfrentamiento := Dictionary new.! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test21NoSePuedeCrearElJugadorPorCartasRepetidas stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test22NoSePuedeCrearLaRondaPorCartasRepetidasEntreLosJugadores stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test23SePuedeCrearCorrectamenteLaRondaPorqueNoHayCartasRepetidas stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test24GanaElPrimerEnfrentamientoElQueEsMano stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test25NoSePuedeEjecutarElSegundoEnfrentamientoPorqueElPrimeroQueTiroNoEsElQueGanoElAnterior stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test26GanaLosDosPrimerosEnfrentamientosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:40:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test27GanaDosEnfrentamientosAlternadosElQueEraManoYGanaLaPartida stamp: 'CS 7/5/2021 21:40:42'!
PASSED!
!Ronda methodsFor: 'nil' stamp: 'CS 7/5/2021 21:42:34'!
proximoTiro

	| cantidadDeCartasDelJugadorMano cantidadDeCartasDelJugadorPie |
	cantidadDeCartasDelJugadorMano := jugadorMano cartas size.
	cantidadDeCartasDelJugadorPie := jugadorPie cartas size.
! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 21:43:55' prior: 51292958!
proximoTiro

	| cantidadDeCartasDelJugadorMano cantidadDeCartasDelJugadorPie |
	
	cantidadDeCartasDelJugadorMano := jugadorMano cartas size.
	cantidadDeCartasDelJugadorPie := jugadorPie cartas size.
	
	(cantidadDeCartasDelJugadorMano = cantidadDeCartasDelJugadorMano) ifTrue: [^ jugadorMano].
	(cantidadDeCartasDelJugadorMano < cantidadDeCartasDelJugadorMano) ifTrue: [^ jugadorPie].
	(cantidadDeCartasDelJugadorMano > cantidadDeCartasDelJugadorMano) ifTrue: [^ jugadorMano].

! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'CS 7/5/2021 21:44:10' prior: 51292968!
proximoTiro

	| cantidadDeCartasDelJugadorMano cantidadDeCartasDelJugadorPie |
	
	cantidadDeCartasDelJugadorMano := jugadorMano cartas size.
	cantidadDeCartasDelJugadorPie := jugadorPie cartas size.
	
	(cantidadDeCartasDelJugadorMano = cantidadDeCartasDelJugadorPie) ifTrue: [^ jugadorMano].
	(cantidadDeCartasDelJugadorMano < cantidadDeCartasDelJugadorPie) ifTrue: [^ jugadorPie].
	(cantidadDeCartasDelJugadorMano > cantidadDeCartasDelJugadorPie) ifTrue: [^ jugadorMano].

! !
!Ronda methodsFor: 'segundo enfrentamiento' stamp: 'CS 7/5/2021 21:44:59' prior: 51292584!
segundoEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(self proximoTiro = jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	segundoEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	segundoEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'tercer enfrentamiento' stamp: 'CS 7/5/2021 21:45:24' prior: 51292633!
tercerEnfrentamientoJuegaElJugador: jugador1 conLaCarta: cartaDelJugador1 contra: jugador2 conLaCarta: cartaDelJugador2 

	(self proximoTiro = jugador1) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	tercerEnfrentamiento at: jugador1 put: (cartaDelJugador1 mataA: cartaDelJugador2).
	tercerEnfrentamiento at: jugador2 put: (cartaDelJugador2 mataA: cartaDelJugador1).

	(cartaDelJugador1 mataA: cartaDelJugador2) ifTrue: [jugador1 incrementarPuntaje] ifFalse: [jugador2 incrementarPuntaje]! !
!Ronda methodsFor: 'tercer enfrentamiento' stamp: 'CS 7/5/2021 21:47:47'!
juegaElJugador: jugador conLaCarta: cartaDelJugador

	(self proximoTiro = jugador) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	tercerEnfrentamiento at: jugador put: cartaDelJugador
	jugador removeCarta: cartaDelJugador.
	! !
!Ronda methodsFor: 'tercer enfrentamiento' stamp: 'CS 7/5/2021 21:47:50' prior: 51293043!
juegaElJugador: jugador conLaCarta: cartaDelJugador

	(self proximoTiro = jugador) ifFalse: [ ^ self error: self class noLeTocabaElTurnoAElDescripcionDeError].

	tercerEnfrentamiento at: jugador put: cartaDelJugador.
	jugador removeCarta: cartaDelJugador.
	! !
!Jugador methodsFor: 'nil' stamp: 'CS 7/5/2021 21:48:13'!
removeCarta: cartaDelJugador

	cartas remove: cartaDelJugador.
! !
!CartaDeTrucoTest methodsFor: 'test - ronda' stamp: 'CS 7/5/2021 21:51:29' prior: 51292048!
test24GanaElPrimerEnfrentamientoElQueEsMano

	| cartaMano1 cartaMano2 cartaMano3 cartaPie1 cartaPie2 cartaPie3 jugadorMano jugadorPie ronda |
	
	cartaMano1 := CartaDeTruco anchoDeBasto.
	cartaMano2 := CartaDeTruco anchoDeEspada.
	cartaMano3 := CartaDeTruco espadaCon: 4.

	cartaPie1 := CartaDeTruco bastoCon: 3.
	cartaPie2 := CartaDeTruco oroCon: 2.
	cartaPie3 := CartaDeTruco copaCon: 3.
	
	jugadorMano := Jugador primerCarta: cartaMano1 segundaCarta: cartaMano2 yTerceraCarta: cartaMano3.
	jugadorPie := Jugador primerCarta: cartaPie1 segundaCarta: cartaPie2 yTerceraCarta: cartaPie3.

	ronda := Ronda entre: jugadorMano y: jugadorPie.
	
	ronda juegaElJugador: jugadorMano conLaCarta: cartaMano2.
	ronda juegaElJugador: jugadorPie conLaCarta: cartaPie2.

	self assert: (ronda ganoPrimerEnfrentamiento: jugadorMano).

	

	! !