
----End fileIn of /home/tomas/Descargas/ISW1-2021-1C-2doParcial.st----!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'TPL 7/5/2021 17:18:01'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'TPL 7/5/2021 17:18:01'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'TPL 7/5/2021 17:18:05'!
PASSED!

ObjectTest subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 17:32:57'!
ObjectTest subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TestCase subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 17:33:07'!
TestCase subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 17:33:18'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #RondaDeTruco stamp: 'TPL 7/5/2021 17:33:22'!
TestCase subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'no messages' stamp: 'TPL 7/5/2021 17:33:38'!
test01
	! !

!classDefinition: #Jugador category: 'Jugador' stamp: 'TPL 7/5/2021 17:40:23'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Jugador'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:39:39' prior: 50333380!
test01
	| cart1Mano cart2Mano cart3Mano jugadorMano |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta.
	
		self 
		should: [Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador errorCartasRepetidas equals: anError messageText.].
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:40:44' prior: 50333390!
test01
	| cart1Mano cart2Mano cart3Mano jugadorMano |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta: cart3Mano.
	
		self 
		should: [Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador errorCartasRepetidas equals: anError messageText.].
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:41:14' prior: 50333410!
test01
	| cart1Mano cart2Mano cart3Mano |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
		
		self 
		should: [Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador errorCartasRepetidas equals: anError messageText.].
	

	! !

!classRemoval: #Jugador stamp: 'TPL 7/5/2021 17:41:50'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Jugador'!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:41:57'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:43:35'!
ERROR!
!Class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:43:58'!
conPrimerCarta: aCartaDeTruco conSegundaCarta: aCartaDeTruco2 conTerceraCarta: aCartaDeTruco3 
	self shouldBeImplemented.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:44:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:44:05'!
ERROR!
!Object class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:44:27'!
errorCartasRepetidas
	self shouldBeImplemented.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:44:44'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:44:44'!
ERROR!

Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 17:45:24'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador class methodsFor: 'nil' stamp: 'TPL 7/5/2021 17:48:11' overrides: 50333456!
conPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta:unaTerceraCarta
	^self conPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta: unaTerceraCarta! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:49:12' prior: 50333489 overrides: 50333456!
conPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta:unaTerceraCarta
	^self new inicializarConPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta: unaTerceraCarta! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 17:50:08'!
Object subclass: #Jugador
	instanceVariableNames: 'primeraCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 17:50:10'!
Object subclass: #Jugador
	instanceVariableNames: 'primeraCarta segundaCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 17:50:11'!
Object subclass: #Jugador
	instanceVariableNames: 'primeraCarta segundaCarta terceraCarta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'no messages' stamp: 'TPL 7/5/2021 17:50:06'!
inicializarConPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta: unaTerceraCarta
	primeraCarta:=unaPrimeraCarta.
	segundaCarta:=unaSegundaCarta.
	terceraCarta:=unaTerceraCarta.! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:52:08' overrides: 50333468!
errorCartasRepetidas
	self error: self cartasEnMazoRepetidas! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:52:35'!
cartasEnMazoRepetidas
	^'Cartas repetidas'! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:53:07' prior: 50333430!
test01
	| cart1Mano cart2Mano cart3Mano |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
		
		self 
		should: [Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador cartasEnMazoRepetidas equals: anError messageText.].
	

	! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:54:16' prior: 50333500 overrides: 50333456!
conPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta:unaTerceraCarta
	self errorCartasRepetidas.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:54:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:54:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:54:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:54:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:54:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 17:54:56'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:58:10'!
test02
	| cart1Mano cart2Mano cart3Mano jugadorMano|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.
	self assert: jugadorMano primeraCarta equals: cart1Mano.

	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 17:59:13' prior: 50333594!
test02
	| cart1Mano cart2Mano cart3Mano jugadorMano|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.
	
	self assert: jugadorMano primeraCarta = cart1Mano.
	self assert: jugadorMano segundaCarta = cart2Mano.
	self assert: jugadorMano terceraCarta = cart3Mano.
	

	! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 17:59:14'!
ERROR!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:01:19' prior: 50333572 overrides: 50333456!
conPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta:unaTerceraCarta
	(unaPrimeraCarta = unaSegundaCarta or: unaPrimeraCarta = unaTerceraCarta or: unaSegundaCarta = unaTerceraCarta) ifTrue: [^self errorCartasRepetidas].
	self new inicializarConPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta  conTerceraCarta: unaTerceraCarta.! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:01:21'!
ERROR!
!Jugador class methodsFor: 'operations' stamp: 'TPL 7/5/2021 18:01:40'!
primeraCarta
	self shouldBeImplemented.! !
!Jugador class methodsFor: 'operations' stamp: 'TPL 7/5/2021 18:01:53' prior: 50333645!
primeraCarta
	^0.! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:01:56'!
FAILURE!

!methodRemoval: Jugador class #primeraCarta stamp: 'TPL 7/5/2021 18:02:14'!
primeraCarta
	^0.!
!Jugador methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:02:40'!
primeraCarta
^primeraCarta .! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:02:52'!
segundaCarta
^segundaCarta .! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:03:02'!
terceraCarta
^terceraCarta .! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:03:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:03:04'!
ERROR!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:03:43' prior: 50333628 overrides: 50333456!
conPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta:unaTerceraCarta
	((unaPrimeraCarta = unaSegundaCarta) or: (unaPrimeraCarta = unaTerceraCarta) or: (unaSegundaCarta = unaTerceraCarta)) ifTrue: [^self errorCartasRepetidas].
	self new inicializarConPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta  conTerceraCarta: unaTerceraCarta.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:03:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:03:46'!
ERROR!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:03:46'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:04:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:04:14'!
ERROR!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:04:14'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:05:08' prior: 50333608!
test02
	| cart1Mano cart2Mano cart3Mano jugadorMano|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.
	
	self assert: (jugadorMano primeraCarta) = cart1Mano.
	self assert: (jugadorMano segundaCarta) = cart2Mano.
	self assert: (jugadorMano terceraCarta) = cart3Mano.
	

	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:05:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:05:11'!
ERROR!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:05:11'!
ERROR!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:05:29' prior: 50333679 overrides: 50333456!
conPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta:unaTerceraCarta
	((unaPrimeraCarta = unaSegundaCarta) or: (unaPrimeraCarta = unaTerceraCarta) or: (unaSegundaCarta = unaTerceraCarta)) ifTrue: [^self errorCartasRepetidas].
	^self new inicializarConPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta  conTerceraCarta: unaTerceraCarta.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:05:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:05:31'!
PASSED!

!classRenamed: #RondaDeTrucoTest as: #JugadorTest stamp: 'TPL 7/5/2021 18:05:51'!
Smalltalk renameClassNamed: #RondaDeTrucoTest as: #JugadorTest!

!classRenamed: #JugadorTest as: #RondaDeTrucoTest stamp: 'TPL 7/5/2021 18:06:29'!
Smalltalk renameClassNamed: #JugadorTest as: #RondaDeTrucoTest!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:07:32'!
test03
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.

	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	jugadorPie := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:08:03' prior: 50333763!
test03
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.

	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	jugadorPie := Jugador conPrimerCarta: cart1Pie conSegundaCarta: cart2Pie conTerceraCarta:cart3Pie.
	
	
	

	! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 18:09:43'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:09:24' prior: 50333784!
test03
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.

	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	jugadorPie := Jugador conPrimerCarta: cart1Pie conSegundaCarta: cart2Pie conTerceraCarta:cart3Pie.
	
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador cartasEnMazoRepetidas equals: anError messageText.].
	
	
	

	! !
!RondaDeTrucoTest class methodsFor: 'no messages' stamp: 'TPL 7/5/2021 18:11:00'!
conMano: jugadorMano conPie: jugadorPie

	^ self new inicializarRondaConJugadorMano: jugadorMano yConJugadorPie: jugadorPie.! !

!methodRemoval: RondaDeTrucoTest class #conMano:conPie: stamp: 'TPL 7/5/2021 18:11:55'!
conMano: jugadorMano conPie: jugadorPie

	^ self new inicializarRondaConJugadorMano: jugadorMano yConJugadorPie: jugadorPie.!
!RondaDeTruco class methodsFor: 'nil' stamp: 'TPL 7/5/2021 18:12:12'!
conMano: jugadorMano conPie: jugadorPie

	^0! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:12:51' overrides: 50333468!
errorCartasRepetidas
	self error: self cartasEnMazoRepetidas! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:13:04'!
cartasEnMazoRepetidas
	^'Cartas repetidas'! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:13:19'!
errorCartasMazoRepetidas
	self error: self cartasEnMazoRepetidas! !

!methodRemoval: RondaDeTruco class #errorCartasRepetidas stamp: 'TPL 7/5/2021 18:13:26'!
errorCartasRepetidas
	self error: self cartasEnMazoRepetidas!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:13:56'!
errorCartasDeJugadorRepetidas
	self error: self cartasEnManoRepetidas! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:14:01'!
cartasEnManoRepetidas
	^'Cartas repetidas'! !

!methodRemoval: Jugador class #cartasEnMazoRepetidas stamp: 'TPL 7/5/2021 18:14:05'!
cartasEnMazoRepetidas
	^'Cartas repetidas'!

!methodRemoval: Jugador class #errorCartasRepetidas stamp: 'TPL 7/5/2021 18:14:12'!
errorCartasRepetidas
	self error: self cartasEnMazoRepetidas!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:14:25' prior: 50333734 overrides: 50333456!
conPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta:unaTerceraCarta
	((unaPrimeraCarta = unaSegundaCarta) or: (unaPrimeraCarta = unaTerceraCarta) or: (unaSegundaCarta = unaTerceraCarta)) ifTrue: [^self errorCartasDeJugadorRepetidas].
	^self new inicializarConPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta  conTerceraCarta: unaTerceraCarta.! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:14:35' prior: 50333882!
cartasEnManoRepetidas
	^'Cartas en mano repetidas'! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:14:42' prior: 50333554!
test01
	| cart1Mano cart2Mano cart3Mano |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
		
		self 
		should: [Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:14:56' prior: 50333812!
test03
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.

	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	jugadorPie := Jugador conPrimerCarta: cart1Pie conSegundaCarta: cart2Pie conTerceraCarta:cart3Pie.
	
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco cartasEnMazoRepetidas equals: anError messageText.].
	
	
	

	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:14:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:14:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:14:59'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:14:59'!
FAILURE!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:15:40' prior: 50333852!
conMano: jugadorMano conPie: jugadorPie

	^self errorCartasMazoRepetidas! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:15:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:15:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:15:46'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:16:49'!
test04
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.

	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	jugadorPie := Jugador conPrimerCarta: cart1Pie conSegundaCarta: cart2Pie conTerceraCarta:cart3Pie.
	

	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:17:19' prior: 50333985!
test04
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.

	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	jugadorPie := Jugador conPrimerCarta: cart1Pie conSegundaCarta: cart2Pie conTerceraCarta:cart3Pie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	
	

	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:18:59' prior: 50334006!
test04
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.

	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	jugadorPie := Jugador conPrimerCarta: cart1Pie conSegundaCarta: cart2Pie conTerceraCarta:cart3Pie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	"rondaDeTruco mano primeraCarta"
	
	

	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:20:30' prior: 50334030!
test04
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.

	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	jugadorPie := Jugador conPrimerCarta: cart1Pie conSegundaCarta: cart2Pie conTerceraCarta:cart3Pie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: ((rondaDeTruco mano) primeraCarta) = cart1Mano.
	self assert: ((rondaDeTruco mano) segundaCarta) = cart2Mano.
	self assert: ((rondaDeTruco mano) terceraCarta) = cart3Mano.
	self assert: ((rondaDeTruco pie) primeraCarta) = cart1Pie.
	self assert: ((rondaDeTruco pie) segundaCarta) = cart2Pie.
	self assert: ((rondaDeTruco pie) terceraCarta) = cart3Pie.
	

	
	
	

	! !

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 18:20:35'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 18:20:35'!
ERROR!

----SNAPSHOT----(5 July 2021 18:26:16) CuisUniversity-20414.image priorSource: 33037!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:30:07' prior: 50333972!
conMano: unJugadorMano conPie: unJugadorPie
	(unJugadorMano primeraCarta  = unJugadorPie primeraCarta) or: (unJugadorMano primeraCarta  = unJugadorPie primeraCarta) or: (unJugadorMano primeraCarta  = unJugadorPie primeraCarta) ifTrue: [^self errorCartasMazoRepetidas].
	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:31:20' prior: 50334098!
conMano: unJugadorMano conPie: unJugadorPie
	((unJugadorMano primeraCarta  = unJugadorPie primeraCarta) or: (unJugadorMano primeraCarta  = unJugadorPie segundaCarta) or: (unJugadorMano primeraCarta  = unJugadorPie terceraCarta)) ifTrue: [^self errorCartasMazoRepetidas].
	
	((unJugadorMano segundaCarta  = unJugadorPie primeraCarta) or: (unJugadorMano segundaCarta  = unJugadorPie segundaCarta ) or: (unJugadorMano segundaCarta  = unJugadorPie terceraCarta )) ifTrue: [^self errorCartasMazoRepetidas].
		
	((unJugadorMano terceraCarta  = unJugadorPie primeraCarta) or: (unJugadorMano terceraCarta  = unJugadorPie segundaCarta) or: (unJugadorMano terceraCarta  = unJugadorPie terceraCarta)) ifTrue: [^self errorCartasMazoRepetidas].! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:31:54' prior: 50334110!
conMano: unJugadorMano conPie: unJugadorPie
	((unJugadorMano primeraCarta  = unJugadorPie primeraCarta) or: (unJugadorMano primeraCarta  = unJugadorPie segundaCarta) or: (unJugadorMano primeraCarta  = unJugadorPie terceraCarta)) ifTrue: [^self errorCartasMazoRepetidas].
	
	((unJugadorMano segundaCarta  = unJugadorPie primeraCarta) or: (unJugadorMano segundaCarta  = unJugadorPie segundaCarta ) or: (unJugadorMano segundaCarta  = unJugadorPie terceraCarta )) ifTrue: [^self errorCartasMazoRepetidas].
		
	((unJugadorMano terceraCarta  = unJugadorPie primeraCarta) or: (unJugadorMano terceraCarta  = unJugadorPie segundaCarta) or: (unJugadorMano terceraCarta  = unJugadorPie terceraCarta)) ifTrue: [^self errorCartasMazoRepetidas].
	
	^self new inicializarRondaConJugadorMano: unJugadorMano yUnJugadorPie: unJugadorPie .! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 18:32:29'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 18:32:31'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'no messages' stamp: 'TPL 7/5/2021 18:32:28'!
inicializarRondaConJugadorMano: unJugadorMano yUnJugadorPie: unJugadorPie
	mano:=unJugadorMano.
	pie:= unJugadorPie.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:32:50'!
mano
^mano! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:32:55'!
pie
^pie! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:32:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:32:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:32:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 18:32:58'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 18:32:58'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:33:21' prior: 50334055!
test04
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	jugadorMano := Jugador conPrimerCarta: cart1Mano conSegundaCarta: cart2Mano conTerceraCarta:cart3Mano.

	cart1Pie := CartaDeTruco bastoCon: 1.
	cart2Pie := CartaDeTruco espadaCon: 1.
	cart3Pie := CartaDeTruco oroCon: 1.
	
	jugadorPie := Jugador conPrimerCarta: cart1Pie conSegundaCarta: cart2Pie conTerceraCarta:cart3Pie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: ((rondaDeTruco mano) primeraCarta) = cart1Mano.
	self assert: ((rondaDeTruco mano) segundaCarta) = cart2Mano.
	self assert: ((rondaDeTruco mano) terceraCarta) = cart3Mano.
	self assert: ((rondaDeTruco pie) primeraCarta) = cart1Pie.
	self assert: ((rondaDeTruco pie) segundaCarta) = cart2Pie.
	self assert: ((rondaDeTruco pie) terceraCarta) = cart3Pie.
	

	
	
	

	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:33:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:33:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:33:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 18:33:24'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:37:16' prior: 50333917!
test01
	| cart1Mano cart2Mano cart3Mano |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
		
		self 
		should: [Jugador conCartas: #(cart1Mano, cart2Mano, cart3Mano) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].
	

	! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:38:54'!
conCartas: unaColeccionDeCartas

	^self new inicializarConCartas: unaColeccionDeCartas.! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 18:39:20'!
Object subclass: #Jugador
	instanceVariableNames: 'primeraCarta segundaCarta terceraCarta cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:39:19'!
inicializarConCartas: unaColeccionDeCartas
	cartas:=unaColeccionDeCartas.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:39:27'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:39:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:39:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 18:39:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:39:27'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:39:43' prior: 50334252!
test01
	| cart1Mano cart2Mano cart3Mano |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
		
		self 
		should: [Jugador conCartas: #(cart1Mano cart2Mano cart3Mano) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:39:55' prior: 50334299!
test01
	| cart1Mano cart2Mano cart3Mano |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
		
		self 
		should: [Jugador conCartas: #(cart1Mano cart2Mano cart3Mano) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:42:33' prior: 50334315!
test01
	| cart1Mano cart2Mano cart3Mano cartas |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
		self 
		should: [Jugador conCartas: cartas]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].
	

	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:42:58'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:42:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:42:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 18:42:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:42:58'!
FAILURE!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:43:40' prior: 50334267!
conCartas: unaColeccionDeCartas
	^self errorCartasDeJugadorRepetidas
	"^self new inicializarConCartas: unaColeccionDeCartas."! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:43:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:43:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:43:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 18:43:42'!
PASSED!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:45:27' prior: 50334361!
conCartas: unaColeccionDeCartas
	|b|
	b _ unaColeccionDeCartas allSatisfy: [:a :c | (a >= 1) & (c <= 4)].	"test if all elements meet condition"
	

	^self errorCartasDeJugadorRepetidas
	"^self new inicializarConCartas: unaColeccionDeCartas."! !

----SNAPSHOT----(5 July 2021 18:46:00) CuisUniversity-20414.image priorSource: 78180!

----SNAPSHOT----(5 July 2021 18:46:52) CuisUniversity-20414.image priorSource: 87603!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:48:54' prior: 50334378!
conCartas: unaColeccionDeCartas
	
	(unaColeccionDeCartas allSatisfy: [:a :b | (a = b) not]) ifFalse:[^self errorCartasDeJugadorRepetidas].
	^self new inicializarConCartas: unaColeccionDeCartas.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:49:01'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:49:01'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:49:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:49:57'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:49:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:49:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 18:49:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:49:57'!
FAILURE!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:50:54' prior: 50334395!
conCartas: unaColeccionDeCartas
	
	(unaColeccionDeCartas allSatisfy: [:a :b | (a = b) not]) ifFalse:[^self errorCartasDeJugadorRepetidas].
	
	^self new inicializarConCartas: unaColeccionDeCartas.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:50:57'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 18:50:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:50:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 18:50:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:50:57'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:51:26' prior: 50334331!
test01
	| cart1Mano cart2Mano cart3Mano cartas |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
		self 
		should: [Jugador conCartas: cartas]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText]
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:52:16' prior: 50334446!
test01
	| cart1Mano cart2Mano cart3Mano cartas |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
		self 
		should: [Jugador conCartas: cartas]
			raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:52:22' prior: 50334464!
test01
	| cart1Mano cart2Mano cart3Mano cartas |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
		self 
		should: [Jugador conCartas: cartas]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].
	

	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:52:26'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:52:26'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:52:55'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:53:16' prior: 50334482!
test01
	| cart1Mano cart2Mano cart3Mano cartas |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
		self 
		should: [Jugador conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].
	"	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error  
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco cartasEnMazoRepetidas equals: anError messageText.]."

	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:53:18'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:54:06' prior: 50334507!
test01
	| cart1Mano cart2Mano cart3Mano cartas |
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
		self 
		should: [Jugador conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].

	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:54:08'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:54:08'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 18:54:12'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:54:25' prior: 50334533!
test01
	| cart1Mano cart2Mano cart3Mano cartas |
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	
		self 
		should: [Jugador conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].

	! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:54:51' prior: 50334424!
conCartas: unaColeccionDeCartas
	
	(unaColeccionDeCartas allSatisfy: [:a :b | (a = b) not]) ifFalse:[^self errorCartasDeJugadorRepetidas].
	
	^self new inicializarConCartas: unaColeccionDeCartas.! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:55:13' prior: 50334574!
conCartas: unaColeccionDeCartas
	
	(unaColeccionDeCartas allSatisfy: [:a :b | false]) ifFalse:[^self errorCartasDeJugadorRepetidas].
	
	^self new inicializarConCartas: unaColeccionDeCartas.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:55:17'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:55:17'!
FAILURE!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:55:55' prior: 50334584!
conCartas: unaColeccionDeCartas
	
	(unaColeccionDeCartas allSatisfy: [:a | false]) ifFalse:[^self errorCartasDeJugadorRepetidas].
	
	^self new inicializarConCartas: unaColeccionDeCartas.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 18:56:04'!
PASSED!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 18:56:43' prior: 50334598!
conCartas: unaColeccionDeCartas
	
	(unaColeccionDeCartas allSatisfy: [:a :b | (a=b) not]) ifFalse:[^self errorCartasDeJugadorRepetidas].
	
	^self new inicializarConCartas: unaColeccionDeCartas.! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:01:02' prior: 50334610!
conCartas: unaColeccionDeCartas
	
	(unaColeccionDeCartas allSatisfy: [:a :b | (a=b) not]) ifFalse:[^self errorCartasDeJugadorRepetidas].
	
	^self new inicializarConCartas: unaColeccionDeCartas.! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:04:33' prior: 50334620!
conCartas: unaColeccionDeCartas
	
	((unaColeccionDeCartas asSet) size == 3) ifFalse:[^self errorCartasDeJugadorRepetidas].
	
	^self new inicializarConCartas: unaColeccionDeCartas.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 19:04:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:04:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:04:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:04:36'!
PASSED!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:04:55' prior: 50334630!
conCartas: unaColeccionDeCartas
	
	((unaColeccionDeCartas asSet) size == 3) ifFalse:[^self errorCartasDeJugadorRepetidas].
	^self new inicializarConCartas: unaColeccionDeCartas.! !

a:= #(1 2 3).
b:= #(4 5 6).
c:= OrderedCollection new.
c add: b.!

a:= #(1 2 3).
b:= #(4 5 6).
c:= OrderedCollection new.
c add: b.
c add: a.!

a:= #(1 2 3).
b:= #(4 5 6).
c:= OrderedCollection new.
c add: b.
c addLast: a.!

a:= #(1 2 3).
b:= #(4 5 6).
c:= OrderedCollection new.
c add: b.!

c addAll: b.!

a:= #(1 2 3).
b:= #(4 5 6).
c:= OrderedCollection new.
c add: b. #(4 5 6) 
c addAll: a.!

a:= #(1 2 3).
b:= #(4 5 6).
c:= OrderedCollection new.
c add: b.
c addAll: a.!

a:= OrderedCollection with: 1 with: 2 with: 3.
b:= OrderedCollection with: 4 with: 5 with: 6.
c:= OrderedCollection new.
c addAll: b.
c addAll: a.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:11:52' prior: 50333709!
test02
	| cart1Mano cart2Mano cart3Mano jugadorMano cartas|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: cartas.
	
	self assert: (jugadorMano primeraCarta) = cart1Mano.
	self assert: (jugadorMano segundaCarta) = cart2Mano.
	self assert: (jugadorMano terceraCarta) = cart3Mano.
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:12:26' prior: 50334678!
test02
	| cart1Mano cart2Mano cart3Mano jugadorMano cartas|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: cartas.
	
	self assert: (jugadorMano cartas at:1) = cart1Mano.
	self assert: (jugadorMano cartas at:2) = cart2Mano.
	self assert: (jugadorMano cartas at:3) = cart3Mano.
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:13:20' prior: 50334696!
test02
	| cart1Mano cart2Mano cart3Mano jugadorMano unaColeccionDeCartas|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	unaColeccionDeCartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartas.
	
	self assert: ((jugadorMano cartas) at:1) = cart1Mano.
	self assert: ((jugadorMano cartas) at:2) = cart2Mano.
	self assert: ((jugadorMano cartas) at:3) = cart3Mano.
	

	! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:13:27'!
cartas
^cartas! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:13:35'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:14:57' prior: 50333934!
test03
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco cartasEnMazoRepetidas equals: anError messageText.].
	
	
	

	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:14:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 19:14:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:14:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:14:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:14:59'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:15:47' prior: 50334207!
test04
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: ((rondaDeTruco mano) primeraCarta) = cart1Mano.
	self assert: ((rondaDeTruco mano) segundaCarta) = cart2Mano.
	self assert: ((rondaDeTruco mano) terceraCarta) = cart3Mano.
	self assert: ((rondaDeTruco pie) primeraCarta) = cart1Pie.
	self assert: ((rondaDeTruco pie) segundaCarta) = cart2Pie.
	self assert: ((rondaDeTruco pie) terceraCarta) = cart3Pie.
	

	
	
	

	! !

----SNAPSHOT----(5 July 2021 19:15:54) CuisUniversity-20414.image priorSource: 87690!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:16:44' prior: 50334785!
test04
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: ((jugadorMano cartas) at:1) = cart1Mano.
	self assert: ((jugadorMano cartas) at:2) = cart2Mano.
	self assert: ((jugadorMano cartas) at:3) = cart3Mano.
	self assert: ((jugadorPie cartas) at:1) = cart1Pie.
	self assert: ((jugadorPie cartas) at:2) = cart2Pie.
	self assert: ((jugadorPie cartas) at:3) = cart3Pie.
	

	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:18:33' prior: 50334828!
test04
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (((rondaDeTruco mano) cartas) at:1) = cart1Mano.
	self assert: (((rondaDeTruco mano) cartas) at:2) = cart2Mano.
	self assert: (((rondaDeTruco mano) cartas) at:3) = cart3Mano.
	self assert: (((rondaDeTruco pie) cartas) at:1) = cart1Pie.
	self assert: (((rondaDeTruco pie) cartas) at:2) = cart2Pie.
	self assert: (((rondaDeTruco pie) cartas) at:3) = cart3Pie.
	

	
	
	

	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 19:18:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:18:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:18:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:18:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:18:36'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:19:33' prior: 50334137!
conMano: unJugadorMano conPie: unJugadorPie
	((unJugadorMano primeraCarta  = unJugadorPie primeraCarta) or: (unJugadorMano primeraCarta  = unJugadorPie segundaCarta) or: (unJugadorMano primeraCarta  = unJugadorPie terceraCarta)) ifTrue: [^self errorCartasMazoRepetidas].
	
	((unJugadorMano segundaCarta  = unJugadorPie primeraCarta) or: (unJugadorMano segundaCarta  = unJugadorPie segundaCarta ) or: (unJugadorMano segundaCarta  = unJugadorPie terceraCarta )) ifTrue: [^self errorCartasMazoRepetidas].
		
	((unJugadorMano terceraCarta  = unJugadorPie primeraCarta) or: (unJugadorMano terceraCarta  = unJugadorPie segundaCarta) or: (unJugadorMano terceraCarta  = unJugadorPie terceraCarta)) ifTrue: [^self errorCartasMazoRepetidas].
		"((unJugadorMano cartas asSet) size == 3) ifFalse:[^self errorCartasDeJugadorRepetidas]."

	^self new inicializarRondaConJugadorMano: unJugadorMano yUnJugadorPie: unJugadorPie .! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 19:19:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:19:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:19:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:19:35'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:19:35'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:19:58' prior: 50334867!
test04
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 1.
	cart2Pie := CartaDeTruco espadaCon: 2.
	cart3Pie := CartaDeTruco oroCon: 3.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (((rondaDeTruco mano) cartas) at:1) = cart1Mano.
	self assert: (((rondaDeTruco mano) cartas) at:2) = cart2Mano.
	self assert: (((rondaDeTruco mano) cartas) at:3) = cart3Mano.
	self assert: (((rondaDeTruco pie) cartas) at:1) = cart1Pie.
	self assert: (((rondaDeTruco pie) cartas) at:2) = cart2Pie.
	self assert: (((rondaDeTruco pie) cartas) at:3) = cart3Pie.
	

	
	
	

	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:23:27' prior: 50334919!
conMano: unJugadorMano conPie: unJugadorPie
	|cartasDeRonda|
	cartasDeRonda:=Set.

	unJugadorMano cartas do: [:a | cartasDeRonda add: a].
	unJugadorPie cartas do: [:a | cartasDeRonda add: a].
	(cartasDeRonda size == 3) ifFalse:[^self errorCartasMazoRepetidas].

	^self new inicializarRondaConJugadorMano: unJugadorMano yUnJugadorPie: unJugadorPie .! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 19:23:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:23:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:23:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:23:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:23:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 19:24:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:24:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:24:01'!
ERROR!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:24:01'!
ERROR!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:24:03'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:24:55' prior: 50335003!
conMano: unJugadorMano conPie: unJugadorPie
	|cartasDeRonda|
	cartasDeRonda:=Set new.

	unJugadorMano cartas do: [:a | cartasDeRonda add: a].
	unJugadorPie cartas do: [:a | cartasDeRonda add: a].
	(cartasDeRonda size == 3) ifFalse:[^self errorCartasMazoRepetidas].

	^self new inicializarRondaConJugadorMano: unJugadorMano yUnJugadorPie: unJugadorPie .! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 19:24:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:24:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:24:57'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:24:57'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:25:22' prior: 50335042!
conMano: unJugadorMano conPie: unJugadorPie
	|cartasDeRonda|
	cartasDeRonda:=Set new.

	unJugadorMano cartas do: [:a | cartasDeRonda add: a].
	unJugadorPie cartas do: [:a | cartasDeRonda add: a].
	(cartasDeRonda size == 6) ifFalse:[^self errorCartasMazoRepetidas].

	^self new inicializarRondaConJugadorMano: unJugadorMano yUnJugadorPie: unJugadorPie .! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 19:25:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:25:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:25:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:25:25'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:26:48'!
DevolverErrorSiJugadorTieneCartasRepetidas
	| cart1Mano cart2Mano cart3Mano cartas |
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	
		self 
		should: [Jugador conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].

	! !

!methodRemoval: RondaDeTrucoTest #test01 stamp: 'TPL 7/5/2021 19:26:48'!
test01
	| cart1Mano cart2Mano cart3Mano cartas |
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	
		self 
		should: [Jugador conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:27:09' prior: 50335090!
DevolverErrorSiJugadorTieneCartasRepetidas
	| cart1Mano cart2Mano cart3Mano cartas |
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	
		self 
		should: [Jugador conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].

	! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:27:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:27:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:27:12'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:27:24'!
test01DevolverErrorSiJugadorTieneCartasRepetidas
	| cart1Mano cart2Mano cart3Mano cartas |
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	
		self 
		should: [Jugador conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].

	! !

!methodRemoval: RondaDeTrucoTest #DevolverErrorSiJugadorTieneCartasRepetidas stamp: 'TPL 7/5/2021 19:27:24'!
DevolverErrorSiJugadorTieneCartasRepetidas
	| cart1Mano cart2Mano cart3Mano cartas |
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	
		self 
		should: [Jugador conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].

	!

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorTieneCartasRepetidas stamp: 'TPL 7/5/2021 19:27:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:27:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:27:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:27:28'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:28:12'!
test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiNoHayRepetidas
	| cart1Mano cart2Mano cart3Mano jugadorMano unaColeccionDeCartas|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	unaColeccionDeCartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartas.
	
	self assert: ((jugadorMano cartas) at:1) = cart1Mano.
	self assert: ((jugadorMano cartas) at:2) = cart2Mano.
	self assert: ((jugadorMano cartas) at:3) = cart3Mano.
	

	! !

!methodRemoval: RondaDeTrucoTest #test02 stamp: 'TPL 7/5/2021 19:28:12'!
test02
	| cart1Mano cart2Mano cart3Mano jugadorMano unaColeccionDeCartas|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	unaColeccionDeCartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartas.
	
	self assert: ((jugadorMano cartas) at:1) = cart1Mano.
	self assert: ((jugadorMano cartas) at:2) = cart2Mano.
	self assert: ((jugadorMano cartas) at:3) = cart3Mano.
	

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:29:04'!
test03RondaDeberiaDevolverErrorSiJugadoresTIenenCartasRepetidasEntreSi
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco cartasEnMazoRepetidas equals: anError messageText.].
	
	
	

	! !

!methodRemoval: RondaDeTrucoTest #test03 stamp: 'TPL 7/5/2021 19:29:04'!
test03
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco cartasEnMazoRepetidas equals: anError messageText.].
	
	
	

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:29:40'!
test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadore
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 1.
	cart2Pie := CartaDeTruco espadaCon: 2.
	cart3Pie := CartaDeTruco oroCon: 3.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (((rondaDeTruco mano) cartas) at:1) = cart1Mano.
	self assert: (((rondaDeTruco mano) cartas) at:2) = cart2Mano.
	self assert: (((rondaDeTruco mano) cartas) at:3) = cart3Mano.
	self assert: (((rondaDeTruco pie) cartas) at:1) = cart1Pie.
	self assert: (((rondaDeTruco pie) cartas) at:2) = cart2Pie.
	self assert: (((rondaDeTruco pie) cartas) at:3) = cart3Pie.
	

	
	
	

	! !

!methodRemoval: RondaDeTrucoTest #test04 stamp: 'TPL 7/5/2021 19:29:40'!
test04
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 1.
	cart2Pie := CartaDeTruco espadaCon: 2.
	cart3Pie := CartaDeTruco oroCon: 3.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (((rondaDeTruco mano) cartas) at:1) = cart1Mano.
	self assert: (((rondaDeTruco mano) cartas) at:2) = cart2Mano.
	self assert: (((rondaDeTruco mano) cartas) at:3) = cart3Mano.
	self assert: (((rondaDeTruco pie) cartas) at:1) = cart1Pie.
	self assert: (((rondaDeTruco pie) cartas) at:2) = cart2Pie.
	self assert: (((rondaDeTruco pie) cartas) at:3) = cart3Pie.
	

	
	
	

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:32:39'!
test05DevolverError
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 1.
	cart2Pie := CartaDeTruco espadaCon: 2.
	cart3Pie := CartaDeTruco oroCon: 3.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (((rondaDeTruco mano) cartas) at:1) = cart1Mano.
	self assert: (((rondaDeTruco mano) cartas) at:2) = cart2Mano.
	self assert: (((rondaDeTruco mano) cartas) at:3) = cart3Mano.
	self assert: (((rondaDeTruco pie) cartas) at:1) = cart1Pie.
	self assert: (((rondaDeTruco pie) cartas) at:2) = cart2Pie.
	self assert: (((rondaDeTruco pie) cartas) at:3) = cart3Pie.
	

	
	
	

	! !

!methodRemoval: RondaDeTrucoTest #test05DevolverError stamp: 'TPL 7/5/2021 19:32:41'!
test05DevolverError
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 1.
	cart2Pie := CartaDeTruco espadaCon: 2.
	cart3Pie := CartaDeTruco oroCon: 3.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (((rondaDeTruco mano) cartas) at:1) = cart1Mano.
	self assert: (((rondaDeTruco mano) cartas) at:2) = cart2Mano.
	self assert: (((rondaDeTruco mano) cartas) at:3) = cart3Mano.
	self assert: (((rondaDeTruco pie) cartas) at:1) = cart1Pie.
	self assert: (((rondaDeTruco pie) cartas) at:2) = cart2Pie.
	self assert: (((rondaDeTruco pie) cartas) at:3) = cart3Pie.
	

	
	
	

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:33:22'!
test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes
	| cart1Mano cart2Mano cart3Mano cartas |
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	
		self 
		should: [Jugador conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].

	! !

!methodRemoval: RondaDeTrucoTest #test01DevolverErrorSiJugadorTieneCartasRepetidas stamp: 'TPL 7/5/2021 19:33:27'!
test01DevolverErrorSiJugadorTieneCartasRepetidas
	| cart1Mano cart2Mano cart3Mano cartas |
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	
		self 
		should: [Jugador conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:33:48'!
test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes
	| cart1Mano cart2Mano cart3Mano jugadorMano unaColeccionDeCartas|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	unaColeccionDeCartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartas.
	
	self assert: ((jugadorMano cartas) at:1) = cart1Mano.
	self assert: ((jugadorMano cartas) at:2) = cart2Mano.
	self assert: ((jugadorMano cartas) at:3) = cart3Mano.
	

	! !

!methodRemoval: RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiNoHayRepetidas stamp: 'TPL 7/5/2021 19:33:52'!
test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiNoHayRepetidas
	| cart1Mano cart2Mano cart3Mano jugadorMano unaColeccionDeCartas|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	unaColeccionDeCartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartas.
	
	self assert: ((jugadorMano cartas) at:1) = cart1Mano.
	self assert: ((jugadorMano cartas) at:2) = cart2Mano.
	self assert: ((jugadorMano cartas) at:3) = cart3Mano.
	

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:34:20'!
test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco cartasEnMazoRepetidas equals: anError messageText.].
	
	
	

	! !

!methodRemoval: RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTIenenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 19:34:24'!
test03RondaDeberiaDevolverErrorSiJugadoresTIenenCartasRepetidasEntreSi
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco cartasEnMazoRepetidas equals: anError messageText.].
	
	
	

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:35:10'!
test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 1.
	cart2Pie := CartaDeTruco espadaCon: 2.
	cart3Pie := CartaDeTruco oroCon: 3.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (((rondaDeTruco mano) cartas) at:1) = cart1Mano.
	self assert: (((rondaDeTruco mano) cartas) at:2) = cart2Mano.
	self assert: (((rondaDeTruco mano) cartas) at:3) = cart3Mano.
	self assert: (((rondaDeTruco pie) cartas) at:1) = cart1Pie.
	self assert: (((rondaDeTruco pie) cartas) at:2) = cart2Pie.
	self assert: (((rondaDeTruco pie) cartas) at:3) = cart3Pie.
	

	
	
	

	! !

!methodRemoval: RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadore stamp: 'TPL 7/5/2021 19:35:13'!
test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadore
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 1.
	cart2Pie := CartaDeTruco espadaCon: 2.
	cart3Pie := CartaDeTruco oroCon: 3.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (((rondaDeTruco mano) cartas) at:1) = cart1Mano.
	self assert: (((rondaDeTruco mano) cartas) at:2) = cart2Mano.
	self assert: (((rondaDeTruco mano) cartas) at:3) = cart3Mano.
	self assert: (((rondaDeTruco pie) cartas) at:1) = cart1Pie.
	self assert: (((rondaDeTruco pie) cartas) at:2) = cart2Pie.
	self assert: (((rondaDeTruco pie) cartas) at:3) = cart3Pie.
	

	
	
	

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:46:02'!
test05EnfrentamientoUnoDeberiaEmpezarLaMano
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco manoEnfrentamiento: 1) equals: 'juan'.

	
	
	

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:46:26'!
manoEnfrentamiento
^mano nombre.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:46:55'!
manoEnfrentamiento: numeroDeEnfrentamiento
^mano nombre.! !

!methodRemoval: RondaDeTruco #manoEnfrentamiento stamp: 'TPL 7/5/2021 19:46:58'!
manoEnfrentamiento
^mano nombre.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:48:06' prior: 50335698!
test05EnfrentamientoUnoDeberiaEmpezarLaMano
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco manoEnfrentamiento: 1) equals: 'juan'.

	
	
	

	! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:48:55'!
conNombre: aName conCartas: unaColeccionDeCartas
	
	((unaColeccionDeCartas asSet) size == 3) ifFalse:[^self errorCartasDeJugadorRepetidas].
	^self new inicializarConCartas: unaColeccionDeCartas.! !

!methodRemoval: Jugador class #conCartas: stamp: 'TPL 7/5/2021 19:48:55'!
conCartas: unaColeccionDeCartas
	
	((unaColeccionDeCartas asSet) size == 3) ifFalse:[^self errorCartasDeJugadorRepetidas].
	^self new inicializarConCartas: unaColeccionDeCartas.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:49:22'!
test06EnfrentamientoUnoDeberiaEmpezarLaMano
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco manoEnfrentamiento: 1) equals: 'juan'.

	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:50:07'!
test05DevolverErrorSiJugadoresTienenMismoNombre
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre:'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre:'x' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco manoEnfrentamiento: 1) equals: 'juan'.

	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:50:26' prior: 50335614!
test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 1.
	cart2Pie := CartaDeTruco espadaCon: 2.
	cart3Pie := CartaDeTruco oroCon: 3.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (((rondaDeTruco mano) cartas) at:1) = cart1Mano.
	self assert: (((rondaDeTruco mano) cartas) at:2) = cart2Mano.
	self assert: (((rondaDeTruco mano) cartas) at:3) = cart3Mano.
	self assert: (((rondaDeTruco pie) cartas) at:1) = cart1Pie.
	self assert: (((rondaDeTruco pie) cartas) at:2) = cart2Pie.
	self assert: (((rondaDeTruco pie) cartas) at:3) = cart3Pie.
	

	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:50:51' prior: 50335544!
test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 6.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco cartasEnMazoRepetidas equals: anError messageText.].
	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:50:59' prior: 50335500!
test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes
	| cart1Mano cart2Mano cart3Mano jugadorMano unaColeccionDeCartas|
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	unaColeccionDeCartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartas.
	
	self assert: ((jugadorMano cartas) at:1) = cart1Mano.
	self assert: ((jugadorMano cartas) at:2) = cart2Mano.
	self assert: ((jugadorMano cartas) at:3) = cart3Mano.
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:51:08' prior: 50335463!
test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes
	| cart1Mano cart2Mano cart3Mano cartas |
	
	cart1Mano := CartaDeTruco bastoCon: 6.
	cart2Mano := CartaDeTruco espadaCon: 6.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	cartas := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	
		self 
		should: [Jugador conNombre:'x' conCartas: cartas]
			raise: Error 
			withExceptionDo: [ :anError |
			self assert: Jugador cartasEnManoRepetidas equals: anError messageText.].

	! !

!methodRemoval: RondaDeTrucoTest #test05EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 19:51:23'!
test05EnfrentamientoUnoDeberiaEmpezarLaMano
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco manoEnfrentamiento: 1) equals: 'juan'.

	
	
	

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:51:56' prior: 50335821!
test05DevolverErrorSiJugadoresTienenMismoNombre
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre:'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre:'x' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco jugadoresConMismosNombres equals: anError messageText.].

	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:52:20' prior: 50336006!
test05DevolverErrorSiJugadoresTienenMismoNombre
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre:'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre:'x' conCartas: unaColeccionDeCartasDePie.
		
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco jugadoresConMismosNombres equals: anError messageText.].

	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:52:26' prior: 50336044!
test05DevolverErrorSiJugadoresTienenMismoNombre
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre:'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre:'x' conCartas: unaColeccionDeCartasDePie.
		
	self 
		should: [RondaDeTruco conMano: jugadorMano conPie: jugadorPie]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco jugadoresConMismosNombres equals: anError messageText.].

	
	
	

	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:52:53'!
jugadoresConMismosNombres
	^'Nombres de jugadores repetidos'! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:53:15'!
errorNombreDeJugadoresRepetidos
	self error: self jugadoresConMismosNombres ! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:54:08' prior: 50335066!
conMano: unJugadorMano conPie: unJugadorPie
	|cartasDeRonda|
	cartasDeRonda:=Set new.

	unJugadorMano cartas do: [:a | cartasDeRonda add: a].
	unJugadorPie cartas do: [:a | cartasDeRonda add: a].
	(cartasDeRonda size == 6) ifFalse:[^self errorCartasMazoRepetidas].
	
	(unJugadorMano nombre == unJugadorPie nombre) ifTrue:[^self errorNombreDeJugadoresRepetidos].
	
	^self new inicializarRondaConJugadorMano: unJugadorMano yUnJugadorPie: unJugadorPie .! !

Object subclass: #Jugador
	instanceVariableNames: 'nombre cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'TPL 7/5/2021 19:54:20'!
Object subclass: #Jugador
	instanceVariableNames: 'nombre cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:54:54' prior: 50335773!
conNombre: aNombre conCartas: unaColeccionDeCartas
	
	((unaColeccionDeCartas asSet) size == 3) ifFalse:[^self errorCartasDeJugadorRepetidas].
	^self new inicializarConNombre: aNombre conCartas: unaColeccionDeCartas.! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:55:25'!
inicializarConNombre: unNombre conCartas: unaColeccionDeCartas.
	nombre:= unNombre.
	cartas:=unaColeccionDeCartas.! !

!methodRemoval: Jugador #inicializarConPrimerCarta:conSegundaCarta:conTerceraCarta: stamp: 'TPL 7/5/2021 19:55:40'!
inicializarConPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta: unaTerceraCarta
	primeraCarta:=unaPrimeraCarta.
	segundaCarta:=unaSegundaCarta.
	terceraCarta:=unaTerceraCarta.!

!methodRemoval: Jugador #inicializarConCartas: stamp: 'TPL 7/5/2021 19:55:58'!
inicializarConCartas: unaColeccionDeCartas
	cartas:=unaColeccionDeCartas.!

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 19:56:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 19:56:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 19:56:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 19:56:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 19:56:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 19:56:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 19:56:05'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:56:23'!
nombre
^nombre! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 19:56:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 19:56:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 19:56:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 19:56:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 19:56:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 19:56:24'!
ERROR!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 19:56:24'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:57:00' prior: 50335790!
test06EnfrentamientoUnoDeberiaEmpezarLaMano
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco manoEnfrentamiento: 1) equals: 'juan'.

	
	
	

	! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 19:57:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 19:57:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 19:57:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 19:57:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 19:57:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 19:57:04'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 19:57:04'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 19:59:01'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 19:59:01'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 19:59:09' prior: 50336248!
test06EnfrentamientoUnoDeberiaEmpezarLaMano
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco manoEnfrentamiento: 1) equals: 'x'.

	
	
	

	! !

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 19:59:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 19:59:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 19:59:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 19:59:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 19:59:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 19:59:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 19:59:14'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:01:03'!
test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 4.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco bastoCon: 5.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco manoEnfrentamiento: 2) equals: 'y'.

	
	
	

	! !

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:01:05'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:02:02' prior: 50335733!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==2 and: true)
^mano nombre.! !

!methodRemoval: Jugador #primeraCarta stamp: 'TPL 7/5/2021 20:02:23'!
primeraCarta
^primeraCarta .!

!methodRemoval: Jugador #segundaCarta stamp: 'TPL 7/5/2021 20:02:24'!
segundaCarta
^segundaCarta .!

!methodRemoval: Jugador #terceraCarta stamp: 'TPL 7/5/2021 20:02:25'!
terceraCarta
^terceraCarta .!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:04:28' prior: 50336414!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento>1) ifTrue:[^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1)].
^mano nombre.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:07:34'!
ganadorEnfrentamiento: numeroDeEnfrentamiento
(((mano cartas) at: numeroDeEnfrentamiento) mataA: ((pie cartas) at: numeroDeEnfrentamiento)) ifTrue:[^mano nombre].
(((pie cartas) at: numeroDeEnfrentamiento) mataA: ((mano cartas) at: numeroDeEnfrentamiento)) ifTrue:[^pie nombre].
^'parda'.! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:07:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:07:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 20:07:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 20:07:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 20:07:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:07:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:07:37'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:08:45'!
test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 4.
	cart2Mano := CartaDeTruco espadaCon: 7.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco manoEnfrentamiento: 2) equals: 'x'.

	
	
	

	! !

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 20:08:47'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:13:21' prior: 50336430!
manoEnfrentamiento: numeroDeEnfrentamiento
((numeroDeEnfrentamiento>1) or: (self pardaEnfrentamiento: numeroDeEnfrentamiento - 1)) ifTrue:[^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1)].
^mano nombre.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:13:32'!
pardaEnfrentamiento: numeroDeEnfrentamiento
(((mano cartas) at: numeroDeEnfrentamiento) mataA: ((pie cartas) at: numeroDeEnfrentamiento)) ifTrue:[^mano nombre].
(((pie cartas) at: numeroDeEnfrentamiento) mataA: ((mano cartas) at: numeroDeEnfrentamiento)) ifTrue:[^pie nombre].
^'parda'.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:14:05' prior: 50336527!
pardaEnfrentamiento: numeroDeEnfrentamiento
^((mano cartas) at: numeroDeEnfrentamiento) empardaCon: ((pie cartas) at: numeroDeEnfrentamiento)! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:14:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:14:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 20:14:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 20:14:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 20:14:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:14:09'!
ERROR!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:14:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 20:14:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:14:11'!
ERROR!

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:15:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:15:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 20:15:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 20:15:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 20:15:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:15:08'!
ERROR!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:15:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 20:15:08'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:19:28' prior: 50336517!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].
(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].
^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:19:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:19:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 20:19:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 20:19:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 20:19:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:19:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:19:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 20:19:30'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:22:08'!
test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco manoEnfrentamiento: 3) equals: 'x'.

	
	
	

	! !

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:22:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:22:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:22:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 20:22:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 20:22:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 20:22:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:22:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:22:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 20:22:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:22:11'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:23:01' prior: 50336662!
test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
		self 
		should: [rondaDeTruco manoEnfrentamiento: 3]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco rondaTerminadaConAnterioridad equals: anError messageText.].

	
	
	

	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:23:28'!
rondaTerminadaConAnterioridad
	^'Ronda terminada con anterioridad'! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:23:47'!
errorRondaTerminadaConAnterioridad
	self error: self rondaTerminadaConAnterioridad ! !

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:23:55'!
FAILURE!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:23:55'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:28:13' prior: 50336618!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].
(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].
((numeroDeEnfrentamiento == 3) and: ((self ganadorEnfrentamiento: 1) nombre == (self ganadorEnfrentamiento: 2) nombre)) ifTrue:[^0].
^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:28:50' prior: 50336802!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].
(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].
((numeroDeEnfrentamiento == 3) and: ((self ganadorEnfrentamiento: 1) nombre == (self ganadorEnfrentamiento: 2) nombre)) ifTrue:[^self rondaTerminadaConAnterioridad ].
^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:28:56' prior: 50336817!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].
(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].
((numeroDeEnfrentamiento == 3) and: ((self ganadorEnfrentamiento: 1) nombre == (self ganadorEnfrentamiento: 2) nombre)) ifTrue:[^self class  rondaTerminadaConAnterioridad ].
^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:28:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:28:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 20:28:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 20:28:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 20:28:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:28:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:28:59'!
ERROR!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 20:28:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:28:59'!
ERROR!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:29:03'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:30:19' prior: 50336833!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].
(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].
((numeroDeEnfrentamiento == 3) and: (self ganadorEnfrentamiento: 1 == self ganadorEnfrentamiento: 2)) ifTrue:[^self class  rondaTerminadaConAnterioridad ].
^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:30:52' prior: 50336892!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].
(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].
((numeroDeEnfrentamiento == 3) and: ((self ganadorEnfrentamiento: 1) == self ganadorEnfrentamiento: 2)) ifTrue:[^self class  rondaTerminadaConAnterioridad ].
^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:31:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:31:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 20:31:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 20:31:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 20:31:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:31:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:31:33'!
ERROR!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 20:31:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:31:33'!
ERROR!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:31:36'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:32:15' prior: 50336908!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].
(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].
((numeroDeEnfrentamiento == 3) and: ((self ganadorEnfrentamiento: 1) == self ganadorEnfrentamiento: 2)) ifTrue:[^self class  rondaTerminadaConAnterioridad ].
^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:32:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:32:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 20:32:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 20:32:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 20:32:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:32:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:32:26'!
ERROR!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 20:32:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:32:26'!
ERROR!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:32:28'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:33:19' prior: 50336967!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].
(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].
((numeroDeEnfrentamiento == 3) and: ((self ganadorEnfrentamiento: 1) == (self ganadorEnfrentamiento: 2))) ifTrue:[^self class  rondaTerminadaConAnterioridad ].
^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:33:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:33:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 20:33:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 20:33:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 20:33:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:33:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:33:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 20:33:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:33:22'!
FAILURE!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:33:22'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:34:06' prior: 50337026!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].
(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].
((numeroDeEnfrentamiento == 3) and: ((self ganadorEnfrentamiento: 1) == (self ganadorEnfrentamiento: 2))) ifTrue:[^self class errorRondaTerminadaConAnterioridad ].
^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 20:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 20:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 20:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 20:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 20:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 20:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 20:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:34:09'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:36:37'!
test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 4.
	cart2Mano := CartaDeTruco espadaCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
		self 
		should: [rondaDeTruco manoEnfrentamiento: 3]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco rondaTerminadaConAnterioridad equals: anError messageText.].

	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:36:49'!
test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
		self 
		should: [rondaDeTruco manoEnfrentamiento: 3]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco rondaTerminadaConAnterioridad equals: anError messageText.].

	
	
	

	! !

!methodRemoval: RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores stamp: 'TPL 7/5/2021 20:36:54'!
test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaGanoMismoJugadorEnLosEnfrentamientosAnteriores
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 1.
	cart2Mano := CartaDeTruco espadaCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
		self 
		should: [rondaDeTruco manoEnfrentamiento: 3]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco rondaTerminadaConAnterioridad equals: anError messageText.].

	
	
	

	!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:38:42' prior: 50337086!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].
(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].
((numeroDeEnfrentamiento == 3) and: ((self pardaEnfrentamiento: 1) or: ((self ganadorEnfrentamiento: 1) == (self ganadorEnfrentamiento: 2)))) ifTrue:[^self class errorRondaTerminadaConAnterioridad ].
^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:39:44' prior: 50337140!
test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 4.
	cart2Mano := CartaDeTruco espadaCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 4.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco ganador) equals: 'x'.


	
	
	

	! !

----SNAPSHOT----(5 July 2021 20:42:48) CuisUniversity-20414.image priorSource: 101555!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:47:04'!
ganador
((self pardaEnfrentamiento: 1) and: ((self pardaEnfrentamiento: 2) not)) ifTrue:[^self ganadorEnfrentamiento: 2].
((self pardaEnfrentamiento: 1) and: (self pardaEnfrentamiento: 2) and: ((self pardaEnfrentamiento: 3) not)) ifTrue:[^self ganadorEnfrentamiento: 3].
((self pardaEnfrentamiento: 1) and: (self pardaEnfrentamiento: 2) and: (self pardaEnfrentamiento: 3)) ifTrue:[^self sinGanador].
((self cantidadEnfrentamientosGanados: mano) > (self cantidadEnfrentamientosGanados: pie)) ifTrue: [^mano nombre].! !
!RondaDeTruco methodsFor: 'nil' stamp: 'TPL 7/5/2021 20:47:22'!
sinGanador
^'Sin ganador'.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:48:15'!
cantidadEnfrentamientosGanados: unJugador
^''.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:51:45' prior: 50337331!
cantidadEnfrentamientosGanados: unJugador
^''! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:51:46' prior: 50337336!
cantidadEnfrentamientosGanados: unJugador
^''.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 20:54:50' prior: 50337341!
cantidadEnfrentamientosGanados: unJugador
^''.
! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:02:17' prior: 50337346!
cantidadEnfrentamientosGanados: unJugador
|enfrentamientosGanados|
enfrentamientosGanados _ 0.
#(1 2 3) do: [:e | (self ganadorEnfrentamiento: e == unJugador nombre) ifTrue:[enfrentamientosGanados _ enfrentamientosGanados + 1]].
^enfrentamientosGanados.! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:02:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:02:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:02:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:02:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:02:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:02:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:02:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:02:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:02:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:02:21'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:03:19'!
test11DevolverGanadorDeLaRondaEnDosManosSinPardas
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 4.
	cart2Mano := CartaDeTruco bastoCon: 6.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 5.
	cart2Pie := CartaDeTruco espadaCon: 7.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco ganador) equals: 'y'.


	
	
	

	! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:03:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:03:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:03:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:03:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:03:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:03:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:03:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:03:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:03:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:03:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:03:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:03:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:03:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:03:49'!
ERROR!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:03:49'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:04:05' prior: 50337351!
cantidadEnfrentamientosGanados: unJugador
|enfrentamientosGanados|
enfrentamientosGanados _ 0.
(#(1 2 3)) do: [:e | (self ganadorEnfrentamiento: e == unJugador nombre) ifTrue:[enfrentamientosGanados _ enfrentamientosGanados + 1]].
^enfrentamientosGanados.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:04:24' prior: 50337497!
cantidadEnfrentamientosGanados: unJugador
|enfrentamientosGanados|
enfrentamientosGanados _ 0.
1 to: 3 do: [:e | (self ganadorEnfrentamiento: e == unJugador nombre) ifTrue:[enfrentamientosGanados _ enfrentamientosGanados + 1]].
^enfrentamientosGanados.! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:04:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:04:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:04:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:04:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:04:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:04:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:04:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:04:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:04:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:04:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:04:26'!
ERROR!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:04:26'!
ERROR!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:05:06'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:05:56' prior: 50337308!
ganador
((self pardaEnfrentamiento: 1) and: ((self pardaEnfrentamiento: 2) not)) ifTrue:[^self ganadorEnfrentamiento: 2].
((self pardaEnfrentamiento: 1) and: (self pardaEnfrentamiento: 2) and: ((self pardaEnfrentamiento: 3) not)) ifTrue:[^self ganadorEnfrentamiento: 3].
((self pardaEnfrentamiento: 1) and: (self pardaEnfrentamiento: 2) and: (self pardaEnfrentamiento: 3)) ifTrue:[^self sinGanador].
((self cantidadEnfrentamientosGanados: mano) > (self cantidadEnfrentamientosGanados: pie)) ifTrue: [^mano nombre].! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:05:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:05:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:05:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:05:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:05:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:05:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:05:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:05:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:05:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:05:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:05:59'!
ERROR!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:05:59'!
ERROR!

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:06:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:06:43'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:07:18' prior: 50337509!
cantidadEnfrentamientosGanados: unJugador
|enfrentamientosGanados|
enfrentamientosGanados _ 0.
1 to: 3 do: [:e | ((self ganadorEnfrentamiento: e) == (unJugador nombre)) ifTrue:[enfrentamientosGanados _ enfrentamientosGanados + 1]].
^enfrentamientosGanados.! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:07:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:07:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:07:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:07:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:07:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:07:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:07:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:07:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:07:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:07:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:07:21'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:07:21'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:07:33'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:07:33'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:08:42'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:08:42'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:09:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:09:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:09:22'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:09:22'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:10:20' prior: 50337573!
ganador
((self pardaEnfrentamiento: 1) and: ((self pardaEnfrentamiento: 2) not)) ifTrue:[^self ganadorEnfrentamiento: 2].
((self pardaEnfrentamiento: 1) and: (self pardaEnfrentamiento: 2) and: ((self pardaEnfrentamiento: 3) not)) ifTrue:[^self ganadorEnfrentamiento: 3].
((self pardaEnfrentamiento: 1) and: (self pardaEnfrentamiento: 2) and: (self pardaEnfrentamiento: 3)) ifTrue:[^self sinGanador].
((self cantidadEnfrentamientosGanados: mano) > (self cantidadEnfrentamientosGanados: pie)) ifTrue: [^mano nombre].
[^pie nombre]! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:10:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:10:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:10:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:10:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:10:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:10:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:10:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:10:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:10:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:10:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:10:23'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:10:23'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:10:40' prior: 50337823!
ganador
((self pardaEnfrentamiento: 1) and: ((self pardaEnfrentamiento: 2) not)) ifTrue:[^self ganadorEnfrentamiento: 2].
((self pardaEnfrentamiento: 1) and: (self pardaEnfrentamiento: 2) and: ((self pardaEnfrentamiento: 3) not)) ifTrue:[^self ganadorEnfrentamiento: 3].
((self pardaEnfrentamiento: 1) and: (self pardaEnfrentamiento: 2) and: (self pardaEnfrentamiento: 3)) ifTrue:[^self sinGanador].
((self cantidadEnfrentamientosGanados: mano) > (self cantidadEnfrentamientosGanados: pie)) ifTrue: [^mano nombre].
^pie nombre! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:10:43'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:11:27'!
test11DevolverGanadorEnTresManos
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 4.
	cart2Mano := CartaDeTruco bastoCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 7.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco ganador) equals: 'x'.


	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:11:31'!
test12DevolverGanadorEnTresManos
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 4.
	cart2Mano := CartaDeTruco bastoCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 7.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco ganador) equals: 'x'.


	
	
	

	! !

!methodRemoval: RondaDeTrucoTest #test11DevolverGanadorEnTresManos stamp: 'TPL 7/5/2021 21:11:33'!
test11DevolverGanadorEnTresManos
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 4.
	cart2Mano := CartaDeTruco bastoCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 7.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco ganador) equals: 'x'.


	
	
	

	!

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test12DevolverGanadorEnTresManos stamp: 'TPL 7/5/2021 21:11:36'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:12:22'!
test13DevolverQueNoHayGanadorCuandoHayEmpate
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 4.
	cart2Mano := CartaDeTruco bastoCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 7.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco ganador) equals: (self sinGanador).


	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:12:27' prior: 50338100!
test13DevolverQueNoHayGanadorCuandoHayEmpate
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco bastoCon: 4.
	cart2Mano := CartaDeTruco bastoCon: 1.
	cart3Mano := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 6.
	cart2Pie := CartaDeTruco espadaCon: 7.
	cart3Pie := CartaDeTruco oroCon: 4.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco ganador) equals: (self class sinGanador).


	
	
	

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:13:18' prior: 50338133!
test13DevolverQueNoHayGanadorCuandoHayEmpate
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco espadaCon: 4.
	cart2Mano := CartaDeTruco oroCon: 5.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 5.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self assert: (rondaDeTruco ganador) equals: (self class sinGanador).


	
	
	

	! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test12DevolverGanadorEnTresManos stamp: 'TPL 7/5/2021 21:13:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test13DevolverQueNoHayGanadorCuandoHayEmpate stamp: 'TPL 7/5/2021 21:13:24'!
ERROR!

!testRun: #RondaDeTrucoTest #test13DevolverQueNoHayGanadorCuandoHayEmpate stamp: 'TPL 7/5/2021 21:13:24'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:14:53' prior: 50338166!
test13DevolverQueNoHayGanadorCuandoHayEmpate
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco espadaCon: 4.
	cart2Mano := CartaDeTruco oroCon: 5.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 5.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	
		self 
		should: [rondaDeTruco ganador]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: RondaDeTruco rondaTerminadaConEmpate equals: anError messageText.].

	
	

	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:15:10'!
rondaTerminadaConEmpate
	^'Empate'! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:15:36'!
errorRondaTerminadaConEmpate
	self error: self rondaTerminadaConEmpate ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:16:03' prior: 50337892!
ganador
((self pardaEnfrentamiento: 1) and: ((self pardaEnfrentamiento: 2) not)) ifTrue:[^self ganadorEnfrentamiento: 2].
((self pardaEnfrentamiento: 1) and: (self pardaEnfrentamiento: 2) and: ((self pardaEnfrentamiento: 3) not)) ifTrue:[^self ganadorEnfrentamiento: 3].
((self pardaEnfrentamiento: 1) and: (self pardaEnfrentamiento: 2) and: (self pardaEnfrentamiento: 3)) ifTrue:[^self class errorRondaTerminadaConEmpate].
((self cantidadEnfrentamientosGanados: mano) > (self cantidadEnfrentamientosGanados: pie)) ifTrue: [^mano nombre].
^pie nombre! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test12DevolverGanadorEnTresManos stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test13DevolverQueNoHayGanadorCuandoHayEmpate stamp: 'TPL 7/5/2021 21:16:07'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:16:22' prior: 50338255!
test13DevolverQueNoHayGanadorCuandoHayEmpate
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco espadaCon: 4.
	cart2Mano := CartaDeTruco oroCon: 5.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 5.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self 
	should: [rondaDeTruco ganador]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: RondaDeTruco rondaTerminadaConEmpate equals: anError messageText.].

	
	

	! !

!methodRemoval: RondaDeTruco #sinGanador stamp: 'TPL 7/5/2021 21:18:59'!
sinGanador
^'Sin ganador'.!
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'TPL 7/5/2021 21:23:05' prior: 50337256!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].

(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].

((numeroDeEnfrentamiento == 3) and: ((self pardaEnfrentamiento: 1) or: ((self ganadorEnfrentamiento: 1) == (self ganadorEnfrentamiento: 2)))) ifTrue:[^self class errorRondaTerminadaConAnterioridad ].

^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'TPL 7/5/2021 21:25:01' prior: 50338415!
manoEnfrentamiento: numeroDeEnfrentamiento
(numeroDeEnfrentamiento==1) ifTrue: [^mano nombre].

(self pardaEnfrentamiento: numeroDeEnfrentamiento - 1) ifTrue:[^ mano nombre].

(self rondaTerminadaAntesDe: numeroDeEnfrentamiento) ifTrue:[^self class errorRondaTerminadaConAnterioridad ].

^self ganadorEnfrentamiento: (numeroDeEnfrentamiento - 1).
! !
!RondaDeTruco methodsFor: 'nil' stamp: 'TPL 7/5/2021 21:25:35'!
rondaTerminadaAntesDe: unNumeroDeEnfrentamiento
^(unNumeroDeEnfrentamiento == 3) and: ((self pardaEnfrentamiento: 1) or: ((self ganadorEnfrentamiento: 1) == (self ganadorEnfrentamiento: 2)))! !

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test12DevolverGanadorEnTresManos stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test13DevolverQueNoHayGanadorCuandoHayEmpate stamp: 'TPL 7/5/2021 21:25:37'!
PASSED!
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'TPL 7/5/2021 21:27:27' prior: 50336438!
ganadorEnfrentamiento: numeroDeEnfrentamiento
(((mano cartas) at: numeroDeEnfrentamiento) mataA: ((pie cartas) at: numeroDeEnfrentamiento)) ifTrue:[^mano nombre].
(((pie cartas) at: numeroDeEnfrentamiento) mataA: ((mano cartas) at: numeroDeEnfrentamiento)) ifTrue:[^pie nombre].

^self class errorSinGanadorEnEnfrentamiento! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:27:41'!
errorSinGanadorEnEnfrentamiento
	self error: self sinGanadorEnEnfrentamiento ! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:27:57'!
sinGanadorEnEnfrentamiento
	^'Sin ganador en enfrentamiento'.! !

!methodRemoval: Jugador class #conPrimerCarta:conSegundaCarta:conTerceraCarta: stamp: 'TPL 7/5/2021 21:30:00'!
conPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta conTerceraCarta:unaTerceraCarta
	((unaPrimeraCarta = unaSegundaCarta) or: (unaPrimeraCarta = unaTerceraCarta) or: (unaSegundaCarta = unaTerceraCarta)) ifTrue: [^self errorCartasDeJugadorRepetidas].
	^self new inicializarConPrimerCarta: unaPrimeraCarta conSegundaCarta: unaSegundaCarta  conTerceraCarta: unaTerceraCarta.!

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test12DevolverGanadorEnTresManos stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test13DevolverQueNoHayGanadorCuandoHayEmpate stamp: 'TPL 7/5/2021 21:30:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test01DevolverErrorSiJugadorNoTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test02JugadorPodriaDisponerCorrectamenteDeSusCartasSiTieneTresCartasDiferentes stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test03RondaDeberiaDevolverErrorSiJugadoresTienenCartasRepetidasEntreSi stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test04RondaArmadaConsistentementeSinCartasRepetidasEntreJugadores stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test05DevolverErrorSiJugadoresTienenMismoNombre stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnfrentamientoUnoDeberiaEmpezarLaMano stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnfrentamientoDosDeberiaEmpezarQuienGanoLaManoUnoQueNoFueParda stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnfrentamientoDosDeberiaEmpezarManoSiEnfrentamientoUnoFueParda stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DevolverErrorSiSePideGanadorDelEnfrentamientoTresSiYaHayGanador stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test10DevolverGanadorDeLaRondaEnDosManosConPrimeraParda stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test11DevolverGanadorDeLaRondaEnDosManosSinPardas stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test12DevolverGanadorEnTresManos stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test13DevolverQueNoHayGanadorCuandoHayEmpate stamp: 'TPL 7/5/2021 21:30:37'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'TPL 7/5/2021 21:31:41'!
test14DevolverErrorSiBuscoGanadorDeUnEnfrentamientoEmpatado
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco espadaCon: 4.
	cart2Mano := CartaDeTruco oroCon: 5.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 5.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self 
	should: [rondaDeTruco ganador]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: RondaDeTruco rondaTerminadaConEmpate equals: anError messageText.].

	
	

	! !

!methodRemoval: RondaDeTrucoTest #test14DevolverErrorSiBuscoGanadorDeUnEnfrentamientoEmpatado stamp: 'TPL 7/5/2021 21:31:44'!
test14DevolverErrorSiBuscoGanadorDeUnEnfrentamientoEmpatado
	| cart1Mano cart2Mano cart3Mano jugadorMano cart1Pie cart2Pie cart3Pie jugadorPie rondaDeTruco unaColeccionDeCartasDeMano unaColeccionDeCartasDePie|
	
	cart1Mano := CartaDeTruco espadaCon: 4.
	cart2Mano := CartaDeTruco oroCon: 5.
	cart3Mano := CartaDeTruco bastoCon: 6.
	
	unaColeccionDeCartasDeMano := OrderedCollection with: cart1Mano with: cart2Mano with: cart3Mano.
	jugadorMano := Jugador conNombre: 'x' conCartas: unaColeccionDeCartasDeMano.
	
	cart1Pie := CartaDeTruco copaCon: 4.
	cart2Pie := CartaDeTruco espadaCon: 5.
	cart3Pie := CartaDeTruco oroCon: 6.
	
	unaColeccionDeCartasDePie := OrderedCollection with: cart1Pie with: cart2Pie with: cart3Pie.
	jugadorPie := Jugador conNombre: 'y' conCartas: unaColeccionDeCartasDePie.
	
	rondaDeTruco := RondaDeTruco conMano: jugadorMano conPie: jugadorPie.
	
	self 
	should: [rondaDeTruco ganador]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: RondaDeTruco rondaTerminadaConEmpate equals: anError messageText.].

	
	

	!
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'TPL 7/5/2021 21:32:00' prior: 50337691!
cantidadEnfrentamientosGanados: unJugador
	|enfrentamientosGanados|
	enfrentamientosGanados _ 0.
	1 to: 3 do: [:e | ((self ganadorEnfrentamiento: e) == (unJugador nombre)) ifTrue:[enfrentamientosGanados _ enfrentamientosGanados + 1]].
	^enfrentamientosGanados.! !

----SNAPSHOT----(5 July 2021 21:44:55) CuisUniversity-20414.image priorSource: 180932!