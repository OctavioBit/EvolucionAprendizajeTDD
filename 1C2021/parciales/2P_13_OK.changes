

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (5 July 2021 16:58:29) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64 (1)/CuisUniversity-4532.image!


----End fileIn of /home/sebasbocaccio/Downloads/ISW1-2021-1C-2doParcial.st----!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'SB 7/5/2021 17:19:34'!
FAILURE!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'SB 7/5/2021 17:19:34'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'SB 7/5/2021 17:19:37'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'SB 7/5/2021 17:19:37'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'SB 7/5/2021 17:19:37'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'SB 7/5/2021 17:19:37'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'SB 7/5/2021 17:19:38'!
PASSED!

Object subclass: #SistemaDeTruci
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #SistemaDeTruci category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 17:20:45'!
Object subclass: #SistemaDeTruci
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #SistemaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #SistemaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 17:20:56'!
Object subclass: #SistemaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #SistemaDeTruci stamp: 'SB 7/5/2021 17:21:01'!
Object subclass: #SistemaDeTruci
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRenamed: #SistemaDeTruco as: #RondaDeTruco stamp: 'SB 7/5/2021 17:22:55'!
Smalltalk renameClassNamed: #SistemaDeTruco as: #RondaDeTruco!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 17:26:16'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'nil' stamp: 'SB 7/5/2021 17:28:37'!
test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:30:25' prior: 50859971!
test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas
	
	! !

TestCase subclass: #JugadorDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 17:30:43'!
TestCase subclass: #JugadorDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorMano category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 17:33:28'!
Object subclass: #JugadorMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:33:24' prior: 50859977!
test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas
	JugadorMano conCartas: OrderedCollection new 
	
	
	
	! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 17:33:43'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:33:39' prior: 50860003!
test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas
	mano :=JugadorMano conCartas: OrderedCollection new 
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:33:56' prior: 50860018!
test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas
	
	mano := JugadorMano conCartas: OrderedCollection new 
	
	
	
	
	! !

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 17:34:06'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorPie category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 17:34:49'!
Object subclass: #JugadorPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:34:41' prior: 50860026!
test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas
	|mano pie|
	mano := JugadorMano conCartas: OrderedCollection new .
	pie := JugadorPie conCartas: OrderedCollection new
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:35:13' prior: 50860054!
test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas
	|mano pie|
	mano := JugadorMano conCartas: OrderedCollection new.
	pie := JugadorPie conCartas: OrderedCollection new.
	
	
	
	! !

----SNAPSHOT----(5 July 2021 17:35:25) CuisUniversity-4532.image priorSource: 16885703!

----End fileIn of /home/sebasbocaccio/Desktop/FACU/Inge1/linux64 (1)/Packages/TerseGuide.pck.st----!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:38:46' prior: 50860064!
test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas
	|mano pie|
	mano := JugadorMano conCartas: (OrderedCollection  with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada ).
	pie := JugadorPie conCartas: (OrderedCollection with: CartaDeTruco oroCon: 3 with: CartaDeTruco oroCon:4 with: CartaDeTruco oroCon:5)
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:40:35'!
test01ElJugadorPieNoPuedeEmpezarTirando
	|mano pie|
	mano := JugadorMano conCartas: (OrderedCollection  with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada ).
	pie := JugadorPie conCartas: (OrderedCollection with: CartaDeTruco oroCon: 3 with: CartaDeTruco oroCon:4 with: CartaDeTruco oroCon:5).
	
	self assert: mano 
	
	
	! !
!JugadorDeTrucoTest methodsFor: 'no messages' stamp: 'SB 7/5/2021 17:50:06'!
test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaron! !
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:51:16'!
test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaronCartas

	| jugadormano jugadorpie |
	jugadormano := JugadorMano new.
	jugadorpie := JugadorPie  new.! !
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:51:34' prior: 50863037!
test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaronCartas

	| jugadormano jugadorpie |
	jugadormano := JugadorMano new.
	jugadorpie := JugadorPie  new.
	
	! !

!methodRemoval: JugadorDeTrucoTest #test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaron stamp: 'SB 7/5/2021 17:52:29'!
test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaron!

Object subclass: #JugadorTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 17:53:02'!
Object subclass: #JugadorTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:53:23' prior: 50863002!
test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas
	|mano pie|
	mano := JugadorTruco conCartas: (OrderedCollection  with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada ).
	pie := JugadorTruco conCartas: (OrderedCollection with: CartaDeTruco oroCon: 3 with: CartaDeTruco oroCon:4 with: CartaDeTruco oroCon:5)
	
	
	
	! !
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:53:54' prior: 50863045!
test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaronCartas

	| jugadormano |
	jugadormano := JugadorTruco new.

	
	! !
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:54:05' prior: 50863086!
test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaronCartas

	| jugador |
	jugador := JugadorTruco new.

	
	! !
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:56:26' prior: 50863093!
test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaronCartas

	| jugador |
	jugador := JugadorTruco new.
	
	self 
		should: [ jugador tirarCarta: CartaDeTruco anchoDeBasto ]
		raise: Error
		withMessageText: JugadorTruco noPodesTirarCartasSiNoTenesError

	
	! !

!testRun: #JugadorDeTrucoTest #test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaronCartas stamp: 'SB 7/5/2021 17:56:43'!
ERROR!
!JugadorTruco class methodsFor: 'error handling' stamp: 'SB 7/5/2021 17:56:57'!
noPodesTirarCartasSiNoTenesError
	self shouldBeImplemented.! !
!JugadorTruco class methodsFor: 'error handling' stamp: 'SB 7/5/2021 17:57:17' prior: 50863115!
noPodesTirarCartasSiNoTenesError
	^ 'No deberias tirar cartas cuando no tenes'! !

!testRun: #JugadorDeTrucoTest #test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaronCartas stamp: 'SB 7/5/2021 17:57:20'!
FAILURE!
!JugadorTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:57:57'!
tirarCarta: aCartaDeTruco 
	self shouldBeImplemented.! !
!JugadorTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:58:23' prior: 50863129!
tirarCarta: aCartaDeTruco 
	
	self error: self class noPodesTirarCartasSiNoTenesError .! !

!testRun: #JugadorDeTrucoTest #test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaronCartas stamp: 'SB 7/5/2021 17:58:29'!
PASSED!

!testRun: #JugadorDeTrucoTest #test01JugadorDeNoPuedeTirarCartasSiNoLeAsignaronCartas stamp: 'SB 7/5/2021 17:58:33'!
PASSED!
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 17:59:25'!
test02JugadorDeNoPuedeTenerMasDe3Cartas

	| jugador |
	jugador := JugadorTruco new.
	
	self 
		should: [ jugador tirarCarta: CartaDeTruco anchoDeBasto ]
		raise: Error
		withMessageText: JugadorTruco noPodesTirarCartasSiNoTenesError

	
	! !
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:01:28'!
test02JugadorDeNoLePuedenDarMasDe3Cartas

	| jugador |
	jugador := JugadorTruco new.
	
	self 
		should: [ jugador tirarCarta: CartaDeTruco anchoDeBasto ]
		raise: Error
		withMessageText: JugadorTruco noPodesTirarCartasSiNoTenesError

	
	! !

!methodRemoval: JugadorDeTrucoTest #test02JugadorDeNoPuedeTenerMasDe3Cartas stamp: 'SB 7/5/2021 18:01:28'!
test02JugadorDeNoPuedeTenerMasDe3Cartas

	| jugador |
	jugador := JugadorTruco new.
	
	self 
		should: [ jugador tirarCarta: CartaDeTruco anchoDeBasto ]
		raise: Error
		withMessageText: JugadorTruco noPodesTirarCartasSiNoTenesError

	
	!
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:02:00'!
test02JugadorDeNoPuedeTenerMasDe3Cartas

	| jugador |
	jugador := JugadorTruco new.
	jugador empezarManoCon: OrderedCollection .
	
	self 
		should: [ jugador tirarCarta: CartaDeTruco anchoDeBasto ]
		raise: Error
		withMessageText: JugadorTruco noPodesTirarCartasSiNoTenesError

	
	! !
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:02:25' prior: 50863181!
test02JugadorDeNoPuedeTenerMasDe3Cartas

	| jugador |
	jugador := JugadorTruco new.
	jugador empezarManoCon: (OrderedCollection  with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada ).
	
	self 
		should: [ jugador tirarCarta: CartaDeTruco anchoDeBasto ]
		raise: Error
		withMessageText: JugadorTruco noPodesTirarCartasSiNoTenesError

	
	! !
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:03:00' prior: 50863194!
test02JugadorDeNoPuedeTenerMasDe3Cartas

	| jugador |
	jugador := JugadorTruco new.
	jugador empezarManoCon: (OrderedCollection  with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada ).
	
	self 
		should: [ jugador tirarCarta: CartaDeTruco anchoDeEspada ]
		raise: Error
		withMessageText: JugadorTruco noPodesTirarCartasQueNoTenes

	
	! !

!methodRemoval: JugadorDeTrucoTest #test02JugadorDeNoLePuedenDarMasDe3Cartas stamp: 'SB 7/5/2021 18:03:33'!
test02JugadorDeNoLePuedenDarMasDe3Cartas

	| jugador |
	jugador := JugadorTruco new.
	
	self 
		should: [ jugador tirarCarta: CartaDeTruco anchoDeBasto ]
		raise: Error
		withMessageText: JugadorTruco noPodesTirarCartasSiNoTenesError

	
	!
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:05:38' prior: 50863210!
test02JugadorDeNoPuedeTenerMasDe3Cartas

	| jugador |
	jugador := JugadorTruco new.
	
	
	self 
		should: [ jugador empezarManoCon: (OrderedCollection  
			with: CartaDeTruco anchoDeBasto 
			with: CartaDeTruco anchoDeEspada
			with: CartaDeTruco sieteDeEspada 
			with: CartaDeTruco sieteDeOro ).]
		raise: Error
		withMessageText: JugadorTruco invalidaCantidadDeCartasAsignadas

	
	! !

!testRun: #JugadorDeTrucoTest #test02JugadorDeNoPuedeTenerMasDe3Cartas stamp: 'SB 7/5/2021 18:05:44'!
ERROR!

!testRun: #JugadorDeTrucoTest #test02JugadorDeNoPuedeTenerMasDe3Cartas stamp: 'SB 7/5/2021 18:05:44'!
ERROR!
!JugadorTruco class methodsFor: 'error handling' stamp: 'SB 7/5/2021 18:05:59'!
invalidaCantidadDeCartasAsignadas
	self shouldBeImplemented.! !
!JugadorTruco class methodsFor: 'error handling' stamp: 'SB 7/5/2021 18:06:18' prior: 50863259!
invalidaCantidadDeCartasAsignadas
	^ 'El jugador solo puede tener asignado 3 cartas'! !

!testRun: #JugadorDeTrucoTest #test02JugadorDeNoPuedeTenerMasDe3Cartas stamp: 'SB 7/5/2021 18:06:21'!
FAILURE!
!JugadorTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:07:00'!
empezarManoCon: anOrderedCollection 
	self shouldBeImplemented.! !
!JugadorTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:08:46' prior: 50863273!
empezarManoCon: cartasParaElJugador
	
	cartasParaElJugador size = 3 ifTrue: [^ self error: self class invalidaCantidadDeCartasAsignadas]! !
!JugadorTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:08:59' prior: 50863279!
empezarManoCon: cartasParaElJugador
	
	cartasParaElJugador size = 3 ifTrue: [self error: self class invalidaCantidadDeCartasAsignadas]! !
!JugadorTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:09:27'!
assertBienDadasLasCartas: cartasParaElJugador

	^ cartasParaElJugador size = 3 ifTrue: [self error: self class invalidaCantidadDeCartasAsignadas]! !
!JugadorTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:09:27' prior: 50863287!
empezarManoCon: cartasParaElJugador
	
	self assertBienDadasLasCartas: cartasParaElJugador! !

!testRun: #JugadorDeTrucoTest #test02JugadorDeNoPuedeTenerMasDe3Cartas stamp: 'SB 7/5/2021 18:09:31'!
FAILURE!

!testRun: #JugadorDeTrucoTest #test02JugadorDeNoPuedeTenerMasDe3Cartas stamp: 'SB 7/5/2021 18:09:36'!
FAILURE!

!testRun: #JugadorDeTrucoTest #test02JugadorDeNoPuedeTenerMasDe3Cartas stamp: 'SB 7/5/2021 18:09:36'!
FAILURE!

!testRun: #JugadorDeTrucoTest #test02JugadorDeNoPuedeTenerMasDe3Cartas stamp: 'SB 7/5/2021 18:09:45'!
FAILURE!
!JugadorTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:10:07' prior: 50863294!
assertBienDadasLasCartas: cartasParaElJugador

	^ cartasParaElJugador size = 3 ifFalse: [self error: self class invalidaCantidadDeCartasAsignadas]! !
!JugadorTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:10:26' prior: 50863322!
assertBienDadasLasCartas: cartasParaElJugador
	
	^ cartasParaElJugador size = 3 ifFalse: [self error: self class invalidaCantidadDeCartasAsignadas]! !

!testRun: #JugadorDeTrucoTest #test02JugadorDeNoPuedeTenerMasDe3Cartas stamp: 'SB 7/5/2021 18:10:47'!
PASSED!
!JugadorDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:16:46'!
test03JugadorDeNoPuedeTirarUnaCartaQueNoTiene

	| jugador |
	jugador := JugadorTruco new.
	jugador empezarManoCon: (OrderedCollection  
			with: CartaDeTruco anchoDeBasto 
			with: CartaDeTruco anchoDeEspada
			with: CartaDeTruco sieteDeEspada).
	
	self 
		should: [ jugador tirarCarta: CartaDeTruco sieteDeOro ]
		raise: Error
		withMessageText: JugadorTruco tirarCartaQueNoSeTieneError

	
	! !
!JugadorTruco class methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:20:14'!
tirarCartaQueNoSeTieneError
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:23:00'!
test01ElJu

	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas stamp: 'SB 7/5/2021 18:23:09'!
test01alEmpezarRondaLosDosJugadoresTienen3CartasCadaUnoDistintas
	|mano pie|
	mano := JugadorTruco conCartas: (OrderedCollection  with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada ).
	pie := JugadorTruco conCartas: (OrderedCollection with: CartaDeTruco oroCon: 3 with: CartaDeTruco oroCon:4 with: CartaDeTruco oroCon:5)
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:23:48'!
test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano

	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test01ElJu stamp: 'SB 7/5/2021 18:23:48'!
test01ElJu

	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:24:24' prior: 50863382!
test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.

	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:26:30' prior: 50863391!
test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	
	self assert: rondaDeTruco jugadorManoTiroPrimeraCarta 
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test01ElJugadorPieNoPuedeEmpezarTirando stamp: 'SB 7/5/2021 18:26:42'!
test01ElJugadorPieNoPuedeEmpezarTirando
	|mano pie|
	mano := JugadorMano conCartas: (OrderedCollection  with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada ).
	pie := JugadorPie conCartas: (OrderedCollection with: CartaDeTruco oroCon: 3 with: CartaDeTruco oroCon:4 with: CartaDeTruco oroCon:5).
	
	self assert: mano 
	
	
	!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'SB 7/5/2021 18:26:59'!
empezarRonda
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeEmpezarRonda! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'SB 7/5/2021 18:27:05' prior: 50863425!
empezarRonda
	
	^self new initializeEmpezarRonda! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 18:27:31'!
initializeEmpezarRonda
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 18:27:36' prior: 50863437!
initializeEmpezarRonda
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:28:01'!
jugadorManoTiraCarta: aCartaDeTruco 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:28:06' prior: 50863446!
jugadorManoTiraCarta: aCartaDeTruco 
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:28:21'!
jugadorManoTiroPrimeraCarta
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:28:30' prior: 50863456!
jugadorManoTiroPrimeraCarta
	^ true.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 18:28:33'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:29:56'!
test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada .
	
	self assert: rondaDeTruco jugadorManoTiroPrimeraCarta 
	
	
	
	
	! !

!classRemoval: #JugadorPie stamp: 'SB 7/5/2021 18:30:08'!
Object subclass: #JugadorPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #JugadorMano stamp: 'SB 7/5/2021 18:30:12'!
Object subclass: #JugadorMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:30:57' prior: 50863469!
test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: CartaDeTruco numeroDeCartaInvalidoErrorDescription 
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:31:42' prior: 50863493!
test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco pieNoPuedeEmpezarLaPrimerRondaError 
	
	
	
	
	
	! !
!RondaDeTruco class methodsFor: 'error handling' stamp: 'SB 7/5/2021 18:33:23'!
pieNoPuedeEmpezarLaPrimerRondaError
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'error handling' stamp: 'SB 7/5/2021 18:33:37' prior: 50863518!
pieNoPuedeEmpezarLaPrimerRondaError
	^ ' Solo la mano puede empezar la primera ronda'! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:33:56'!
jugadorPieTiraCarta: aCartaDeTruco 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:34:29' prior: 50863530!
jugadorPieTiraCarta: aCartaDeTruco 
	
	^ self error: self class pieNoPuedeEmpezarLaPrimerRondaError .! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 18:34:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 18:35:36'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:36:07'!
test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco pieNoPuedeEmpezarLaPrimerRondaError 
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:36:44' prior: 50863550!
test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco pieNoPuedeEmpezarLaPrimerRondaError 
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:37:56' prior: 50863563!
test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeOro.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: true.
		
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:40:27'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:41:39' prior: 50863536!
jugadorPieTiraCarta: aCartaDeTruco 
	
	self jugadorManoTiroPrimeraCarta ifFalse:[self error: self class pieNoPuedeEmpezarLaPrimerRondaError .]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:41:51'!
manoGanoLaPrimerMano
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:42:01' prior: 50863604!
manoGanoLaPrimerMano
	^ true! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:42:03'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:42:40'!
test04ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeOro.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: true.
		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:42:57'!
test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeOro.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: true.
		
	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test04ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:42:57'!
test04ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeOro.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: true.
		
	
	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:43:42' prior: 50863630!
test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: true.
		
	
	
	
	
	
	! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 18:44:18'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:44:16' prior: 50863452!
jugadorManoTiraCarta: aCartaDeTrucoDeMano 
	cartaMano:= aCartaDeTrucoDeMano
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:44:46' prior: 50863679!
jugadorManoTiraCarta: aCartaDeTrucoDeMano 
	cartaMano:= aCartaDeTrucoDeMano
	
	! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 18:45:51'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartaMano cartaPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:45:49' prior: 50863596!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	
	self jugadorManoTiroPrimeraCarta ifFalse:[self error: self class pieNoPuedeEmpezarLaPrimerRondaError .].
	^ cartaPie := aCartaDeTrucoDePie 
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:46:31' prior: 50863658!
test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self assert: rondaDeTruco pieGanoLaPrimerMano equals: true.
		
	
	
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:46:48'!
pieGanoLaPrimerMano
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:47:17' prior: 50863721!
pieGanoLaPrimerMano
	^ cartaPie  mataA: cartaMano .! !

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:47:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:47:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 18:47:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 18:47:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 18:47:37'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:47:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:47:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 18:47:37'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:47:50'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:49:08' prior: 50863461!
jugadorManoTiroPrimeraCarta
	^ cartaMano = nil.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 18:49:15'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 18:49:15'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:49:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:49:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 18:49:31'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 18:49:31'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:50:11' prior: 50863766!
jugadorManoTiroPrimeraCarta
	^ (cartaMano = nil) not.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 18:50:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 18:50:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 18:50:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:50:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:50:16'!
PASSED!

----SNAPSHOT----(5 July 2021 18:52:30) CuisUniversity-4532.image priorSource: 16909507!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:54:08' prior: 50863609!
manoGanoLaPrimerMano
	^ cartaMano  mataA: cartaPie .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:54:27' prior: 50863708!
test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self assert: rondaDeTruco pieGanoLaPrimerMano equals: true.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: false.
		
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:54:31'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:54:48' prior: 50863578!
test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeOro.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: true.
	self assert: rondaDeTruco pieGanoLaPrimerMano equals: false.
		
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 18:55:22'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:57:33'!
test05AmbosJugadoresEmpiezanCon3Cartas
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self assert: rondaDeTruco pieGanoLaPrimerMano equals: true.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: false.
		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:58:23' prior: 50863867!
test05AmbosJugadoresEmpiezanCon3Cartas
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	
	self assert: rondaDeTruco cartasRestantesDeMano equals: 3.
	self assert: rondaDeTruco cartasRestantesDeMano equals: 3.
		
	
	
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:59:22'!
cartasRestantesDeMano
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:59:31' prior: 50863893!
cartasRestantesDeMano
	^3! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 18:59:51' prior: 50863882!
test05AmbosJugadoresEmpiezanCon3Cartas
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	
	self assert: rondaDeTruco cartasRestantesDeMano equals: 3.
	self assert: rondaDeTruco cartasRestantesDePie equals: 3.
		
	
	
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:00:03'!
cartasRestantesDePie
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:00:15' prior: 50863913!
cartasRestantesDePie
	^ 3! !

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:00:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:00:29'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:01:00'!
test06JugadorTieneUnaCartaMenosLuegoDeTirar
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	
	self assert: rondaDeTruco cartasRestantesDeMano equals: 3.
	self assert: rondaDeTruco cartasRestantesDePie equals: 3.
		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:01:29' prior: 50863929!
test06JugadorTieneUnaCartaMenosLuegoDeTirar
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	self assert: rondaDeTruco cartasRestantesDeMano equals: 2.

		
	
	
	
	
	
	! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'SB 7/5/2021 19:07:15'!
empezarRonda: aRepartidorDeCartas
	
	^self new initializeEmpezarRonda! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:07:15' prior: 50863399!
test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	
	self assert: rondaDeTruco jugadorManoTiroPrimeraCarta 
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:07:15' prior: 50863902!
test05AmbosJugadoresEmpiezanCon3Cartas
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda: self.
	
	self assert: rondaDeTruco cartasRestantesDeMano equals: 3.
	self assert: rondaDeTruco cartasRestantesDePie equals: 3.
		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:07:15' prior: 50863506!
test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda: self.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco pieNoPuedeEmpezarLaPrimerRondaError 
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:07:15' prior: 50863848!
test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeOro.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: true.
	self assert: rondaDeTruco pieGanoLaPrimerMano equals: false.
		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:07:15' prior: 50863940!
test06JugadorTieneUnaCartaMenosLuegoDeTirar
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	self assert: rondaDeTruco cartasRestantesDeMano equals: 2.

		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:07:15' prior: 50863828!
test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self assert: rondaDeTruco pieGanoLaPrimerMano equals: true.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: false.
		
	
	
	
	
	
	! !

!methodRemoval: RondaDeTruco class #empezarRonda stamp: 'SB 7/5/2021 19:07:15'!
empezarRonda
	
	^self new initializeEmpezarRonda!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:07:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:07:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:07:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:07:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:07:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:07:22'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:07:22'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 19:08:50'!
initializeEmpezarRonda: aRepartidorDeCartas
	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:08:50' prior: 50863951!
empezarRonda: aRepartidorDeCartas
	
	^self new initializeEmpezarRonda: aRepartidorDeCartas! !

!methodRemoval: RondaDeTruco #initializeEmpezarRonda stamp: 'SB 7/5/2021 19:08:50'!
initializeEmpezarRonda
	!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:09:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:09:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:09:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:09:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:09:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:09:01'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:09:01'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:09:10' prior: 50864009!
test06JugadorTieneUnaCartaMenosLuegoDeTirar
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRonda: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	self assert: rondaDeTruco cartasRestantesDeMano equals: 3.

		
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:09:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:09:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:09:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:09:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:09:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:09:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:09:12'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'SB 7/5/2021 19:09:44'!
empezarRondaConRepartidor: aRepartidorDeCartas
	
	^self new initializeEmpezarRonda: aRepartidorDeCartas! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:09:44' prior: 50863969!
test05AmbosJugadoresEmpiezanCon3Cartas
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	
	self assert: rondaDeTruco cartasRestantesDeMano equals: 3.
	self assert: rondaDeTruco cartasRestantesDePie equals: 3.
		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:09:44' prior: 50863980!
test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco pieNoPuedeEmpezarLaPrimerRondaError 
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:09:44' prior: 50863993!
test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeOro.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: true.
	self assert: rondaDeTruco pieGanoLaPrimerMano equals: false.
		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:09:44' prior: 50864021!
test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self assert: rondaDeTruco pieGanoLaPrimerMano equals: true.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: false.
		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:09:44' prior: 50863957!
test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	
	self assert: rondaDeTruco jugadorManoTiroPrimeraCarta 
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:09:44' prior: 50864107!
test06JugadorTieneUnaCartaMenosLuegoDeTirar
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	self assert: rondaDeTruco cartasRestantesDeMano equals: 3.

		
	
	
	
	
	
	! !

!methodRemoval: RondaDeTruco class #empezarRonda: stamp: 'SB 7/5/2021 19:09:44'!
empezarRonda: aRepartidorDeCartas
	
	^self new initializeEmpezarRonda: aRepartidorDeCartas!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:09:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:09:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:09:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:09:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:09:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:09:56'!
PASSED!

----SNAPSHOT----(5 July 2021 19:10:09) CuisUniversity-4532.image priorSource: 17029386!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 19:12:03'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartaMano cartaPie cartasMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 19:12:06'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartaMano cartaPie cartasMano cartasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 19:11:59' prior: 50864066!
initializeEmpezarRonda: aRepartidorDeCartas
	aRepartidorDeCartas nuevaRonda.
	cartasMano := aRepartidorDeCartas dar3Cartas.
	cartasPie := aRepartidorDeCartas dar3Cartas.! !

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:12:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:12:20'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:12:31'!
nuevaRonda
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:13:08' prior: 50864296!
nuevaRonda
	'Aca se podrian mezclar las cartas o algo asi'! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:13:16' prior: 50864301!
nuevaRonda
	'Aca se podrian juntar y mezclar las cartas o algo asi'! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:13:32'!
dar3Cartas
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 19:14:08' prior: 50864281!
initializeEmpezarRonda: aRepartidorDeCartas
	aRepartidorDeCartas nuevaRonda.
	cartasMano := aRepartidorDeCartas dar3Cartas.
	cartasPie := aRepartidorDeCartas dar3CartasMas.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:15:00' prior: 50864312!
dar3Cartas
	^ Set with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco anchoDeEspada) with: (CartaDeTruco oroCon:4)! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 19:15:17' prior: 50864317!
initializeEmpezarRonda: aRepartidorDeCartas
	aRepartidorDeCartas nuevaRonda.
	cartasMano := aRepartidorDeCartas dar3Cartas.
	cartasPie := aRepartidorDeCartas dar3CartasMas.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:15:45'!
dar3CartasMas
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:16:52' prior: 50864342!
dar3CartasMas
	^ Set with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto) with: (CartaDeTruco oroCon:5)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:18:07' prior: 50863685!
jugadorManoTiraCarta: aCartaDeTrucoDeMano 
	cartaMano:= aCartaDeTrucoDeMano.
	cartasMano remove:aCartaDeTrucoDeMano
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:18:25' prior: 50863898!
cartasRestantesDeMano
	^ cartasMano size.! !

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:18:27'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:18:41' prior: 50864221!
test06JugadorTieneUnaCartaMenosLuegoDeTirar
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	self assert: rondaDeTruco cartasRestantesDeMano equals: 2.

		
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:18:45'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:19:03' prior: 50863699!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	
	self jugadorManoTiroPrimeraCarta ifFalse:[self error: self class pieNoPuedeEmpezarLaPrimerRondaError .].
	cartaPie := aCartaDeTrucoDePie 
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:19:34' prior: 50864385!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	
	self jugadorManoTiroPrimeraCarta ifFalse:[self error: self class pieNoPuedeEmpezarLaPrimerRondaError .].
	cartaPie := aCartaDeTrucoDePie.
	cartasPie remove:aCartaDeTrucoDePie.

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:19:45' prior: 50863918!
cartasRestantesDePie
	^ cartaPie  size.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:19:50'!
ERROR!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:19:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:19:50'!
ERROR!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:19:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:19:50'!
ERROR!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:19:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:20:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:20:04'!
ERROR!

----SNAPSHOT----(5 July 2021 19:20:14) CuisUniversity-4532.image priorSource: 17043497!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:20:56' prior: 50864209!
test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	
	self assert: rondaDeTruco jugadorManoTiroPrimeraCarta 
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:20:59'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:21:14' prior: 50864442!
test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	
	self assert: rondaDeTruco jugadorManoTiroPrimeraCarta 
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:21:56' prior: 50864458!
test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	
	self assert: rondaDeTruco jugadorManoTiroPrimeraCarta 
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:22:53' prior: 50864177!
test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco anchoDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeOro.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: true.
	self assert: rondaDeTruco pieGanoLaPrimerMano equals: false.
		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:23:01' prior: 50864482!
test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco anchoDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self assert: rondaDeTruco manoGanoLaPrimerMano equals: true.
	self assert: rondaDeTruco pieGanoLaPrimerMano equals: false.
		
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:23:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:23:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:23:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:23:18'!
PASSED!
!Behavior method!
empezarRondaConRepartidor: aRepartidorDeCartas
	^ [
	([
	(self coverAll:
		{52 to: 55}) new ] valueCoveringAll:
		{57 to: 59}) initializeEmpezarRonda:
		(aRepartidorDeCartas
			cover: (85 to: 103)
			declaredAt: (28 to: 46)) ] valueCoveringAll:
		{61 to: 83}.! !
!Behavior method!
initializeEmpezarRonda: aRepartidorDeCartas
	[
	(aRepartidorDeCartas
		cover: (46 to: 64)
		declaredAt: (25 to: 43)) nuevaRonda ] valueCoveringAll:
		{66 to: 75}.
	(cartasMano _ [
	(aRepartidorDeCartas
		cover: (93 to: 111)
		declaredAt: (25 to: 43)) dar3Cartas ] valueCoveringAll:
		{113 to: 122})
		cover: (79 to: 88)
		declaredAt: (79 to: 88).
	(cartasPie _ [
	(aRepartidorDeCartas
		cover: (139 to: 157)
		declaredAt: (25 to: 43)) dar3CartasMas ] valueCoveringAll:
		{159 to: 171})
		cover: (126 to: 134)
		declaredAt: (126 to: 134).! !
!Behavior method!
sieteDeOro
	^ [
	(self coverAll:
		{16 to: 19}) oroCon:
		(7 coverAll:
			{28 to: 29}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
oroCon: unNumero
	^ [
	(self coverAll:
		{21 to: 24})
		palo:
			([
			(self coverAll:
				{32 to: 35}) oro ] valueCoveringAll:
				{37 to: 39})
		numero:
			(unNumero
				cover: (49 to: 56)
				declaredAt: (9 to: 16)) ] valueCoveringAll:
		{26 to: 30. 41 to: 47}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertNúmeroEsVálido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsVálido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertNúmeroEsVálido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsVálido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
anchoDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(1 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
espadaCon: unNumero
	^ [
	(self coverAll:
		{24 to: 27})
		palo:
			([
			(self coverAll:
				{35 to: 38}) espada ] valueCoveringAll:
				{40 to: 45})
		numero:
			(unNumero
				cover: (55 to: 62)
				declaredAt: (12 to: 19)) ] valueCoveringAll:
		{29 to: 33. 47 to: 53}.! !
!Behavior method!
hash
	^ [
	([
	(palo
		cover: (10 to: 13)
		declaredAt: (10 to: 13)) hash ] valueCoveringAll:
		{15 to: 18}) bitXor:
		([
		(numero
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) hash ] valueCoveringAll:
			{35 to: 38}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
sieteDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(7 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
anchoDeBasto
	^ [
	(self coverAll:
		{18 to: 21}) bastoCon:
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{23 to: 31}.! !
!Behavior method!
bastoCon: unNumero
	^ [
	(self coverAll:
		{23 to: 26})
		palo:
			([
			(self coverAll:
				{34 to: 37}) basto ] valueCoveringAll:
				{39 to: 43})
		numero:
			(unNumero
				cover: (53 to: 60)
				declaredAt: (11 to: 18)) ] valueCoveringAll:
		{28 to: 32. 45 to: 51}.! !
!Behavior method!
cartasRestantesDeMano
	^ [
	(cartasMano
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) size ] valueCoveringAll:
		{37 to: 40}.! !
!Behavior method!
cartasRestantesDePie
	^ [
	(cartaPie
		cover: (25 to: 32)
		declaredAt: (25 to: 32)) size ] valueCoveringAll:
		{35 to: 38}.! !

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:23:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:23:26'!
ERROR!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:23:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:23:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:23:42'!
ERROR!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:23:42'!
ERROR!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:23:49'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:24:56' prior: 50864404!
cartasRestantesDePie
	^ cartasPie  size.! !

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:24:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:25:02'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:29:17'!
test07JugadorNoPuedeTirarUnaCartaQueNoTiene
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	

		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:29:29' prior: 50864773!
test07JugadorNoPuedeTirarUnaCartaQueNoTiene
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .
	

		
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:30:44' prior: 50864783!
test07JugadorNoPuedeTirarUnaCartaQueNoTiene
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	
	self 
	should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
	raise: Error 
	withMessageText: RondaDeTruco jugadorNoPuedeTirarCartaQueNoTiene


	

	
	
	
	
	! !
!Behavior method!
empezarRondaConRepartidor: aRepartidorDeCartas
	^ [
	([
	(self coverAll:
		{52 to: 55}) new ] valueCoveringAll:
		{57 to: 59}) initializeEmpezarRonda:
		(aRepartidorDeCartas
			cover: (85 to: 103)
			declaredAt: (28 to: 46)) ] valueCoveringAll:
		{61 to: 83}.! !
!Behavior method!
initializeEmpezarRonda: aRepartidorDeCartas
	[
	(aRepartidorDeCartas
		cover: (46 to: 64)
		declaredAt: (25 to: 43)) nuevaRonda ] valueCoveringAll:
		{66 to: 75}.
	(cartasMano _ [
	(aRepartidorDeCartas
		cover: (93 to: 111)
		declaredAt: (25 to: 43)) dar3Cartas ] valueCoveringAll:
		{113 to: 122})
		cover: (79 to: 88)
		declaredAt: (79 to: 88).
	(cartasPie _ [
	(aRepartidorDeCartas
		cover: (139 to: 157)
		declaredAt: (25 to: 43)) dar3CartasMas ] valueCoveringAll:
		{159 to: 171})
		cover: (126 to: 134)
		declaredAt: (126 to: 134).! !
!Behavior method!
sieteDeOro
	^ [
	(self coverAll:
		{16 to: 19}) oroCon:
		(7 coverAll:
			{28 to: 29}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
oroCon: unNumero
	^ [
	(self coverAll:
		{21 to: 24})
		palo:
			([
			(self coverAll:
				{32 to: 35}) oro ] valueCoveringAll:
				{37 to: 39})
		numero:
			(unNumero
				cover: (49 to: 56)
				declaredAt: (9 to: 16)) ] valueCoveringAll:
		{26 to: 30. 41 to: 47}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertNúmeroEsVálido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsVálido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertNúmeroEsVálido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsVálido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
anchoDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(1 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
espadaCon: unNumero
	^ [
	(self coverAll:
		{24 to: 27})
		palo:
			([
			(self coverAll:
				{35 to: 38}) espada ] valueCoveringAll:
				{40 to: 45})
		numero:
			(unNumero
				cover: (55 to: 62)
				declaredAt: (12 to: 19)) ] valueCoveringAll:
		{29 to: 33. 47 to: 53}.! !
!Behavior method!
hash
	^ [
	([
	(palo
		cover: (10 to: 13)
		declaredAt: (10 to: 13)) hash ] valueCoveringAll:
		{15 to: 18}) bitXor:
		([
		(numero
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) hash ] valueCoveringAll:
			{35 to: 38}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
sieteDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(7 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
anchoDeBasto
	^ [
	(self coverAll:
		{18 to: 21}) bastoCon:
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{23 to: 31}.! !
!Behavior method!
bastoCon: unNumero
	^ [
	(self coverAll:
		{23 to: 26})
		palo:
			([
			(self coverAll:
				{34 to: 37}) basto ] valueCoveringAll:
				{39 to: 43})
		numero:
			(unNumero
				cover: (53 to: 60)
				declaredAt: (11 to: 18)) ] valueCoveringAll:
		{28 to: 32. 45 to: 51}.! !
!Behavior method!
jugadorManoTiraCarta: aCartaDeTrucoDeMano
	(cartaMano _ aCartaDeTrucoDeMano
		cover: (57 to: 75)
		declaredAt: (23 to: 41))
		cover: (45 to: 53)
		declaredAt: (45 to: 53).
	[
	(cartasMano
		cover: (79 to: 88)
		declaredAt: (79 to: 88)) remove:
		(aCartaDeTrucoDeMano
			cover: (97 to: 115)
			declaredAt: (23 to: 41)) ] valueCoveringAll:
		{90 to: 96}.! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
jugadorManoTiroPrimeraCarta
	^ [
	([
	(cartaMano
		cover: (33 to: 41)
		declaredAt: (33 to: 41)) =
		(nil coverAll:
			{45 to: 47}) ] valueCoveringAll:
		{43 to: 43}) not ] valueCoveringAll:
		{50 to: 52}.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:31:05'!
PASSED!
!Behavior method!
pieNoPuedeEmpezarLaPrimerRondaError
	^ ' Solo la mano puede empezar la primera ronda' coverAll:
		{40 to: 85}.! !
!Behavior method!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	[
	([
	(self coverAll:
		{44 to: 47}) jugadorManoTiroPrimeraCarta ] valueCoveringAll:
		{49 to: 75}) ifFalse: [
		[
		(self coverAll:
			{86 to: 89}) error:
			([
			([
			(self coverAll:
				{98 to: 101}) class ] valueCoveringAll:
				{103 to: 107}) pieNoPuedeEmpezarLaPrimerRondaError ] valueCoveringAll:
				{109 to: 143}) ] valueCoveringAll:
			{91 to: 96} ]] valueCoveringAll:
		{77 to: 84}.
	(cartaPie _ aCartaDeTrucoDePie
		cover: (162 to: 179)
		declaredAt: (22 to: 39))
		cover: (150 to: 157)
		declaredAt: (150 to: 157).
	[
	(cartasPie
		cover: (183 to: 191)
		declaredAt: (183 to: 191)) remove:
		(aCartaDeTrucoDePie
			cover: (200 to: 217)
			declaredAt: (22 to: 39)) ] valueCoveringAll:
		{193 to: 199}.! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:31:05'!
PASSED!
!Behavior method!
manoGanoLaPrimerMano
	^ [
	(cartaMano
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) mataA:
		(cartaPie
			cover: (43 to: 50)
			declaredAt: (43 to: 50)) ] valueCoveringAll:
		{36 to: 41}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
pieGanoLaPrimerMano
	^ [
	(cartaPie
		cover: (24 to: 31)
		declaredAt: (24 to: 31)) mataA:
		(cartaMano
			cover: (41 to: 49)
			declaredAt: (41 to: 49)) ] valueCoveringAll:
		{34 to: 39}.! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:31:05'!
PASSED!
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeOro
	^ [
	(self coverAll:
		{13 to: 16}) paloEs:
		([
		(self coverAll:
			{26 to: 29}) oro ] valueCoveringAll:
			{31 to: 33}) ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
oro
	^ [
	([
	(self coverAll:
		{9 to: 12}) class ] valueCoveringAll:
		{14 to: 18}) oro ] valueCoveringAll:
		{20 to: 22}.! !

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:31:05'!
PASSED!
!Behavior method!
cartasRestantesDeMano
	^ [
	(cartasMano
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) size ] valueCoveringAll:
		{37 to: 40}.! !
!Behavior method!
cartasRestantesDePie
	^ [
	(cartasPie
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) size ] valueCoveringAll:
		{36 to: 39}.! !

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:31:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:31:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 19:31:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 19:31:05'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:31:40'!
jugadorNoPuedeTirarCartaQueNoTiene
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:32:06' prior: 50865254!
jugadorNoPuedeTirarCartaQueNoTiene
	^ 'Los jugadores solo pueden tirar cartas que conocen'.! !

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 19:32:11'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:33:30' prior: 50864354!
jugadorManoTiraCarta: aCartaDeTrucoDeMano 
	cartasMano remove:aCartaDeTrucoDeMano ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].
	cartaMano:= aCartaDeTrucoDeMano.
	
	
	! !

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 19:33:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 19:33:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:33:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:33:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:33:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:33:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:33:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:33:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 19:33:42'!
PASSED!
!Behavior method!
empezarRondaConRepartidor: aRepartidorDeCartas
	^ [
	([
	(self coverAll:
		{52 to: 55}) new ] valueCoveringAll:
		{57 to: 59}) initializeEmpezarRonda:
		(aRepartidorDeCartas
			cover: (85 to: 103)
			declaredAt: (28 to: 46)) ] valueCoveringAll:
		{61 to: 83}.! !
!Behavior method!
initializeEmpezarRonda: aRepartidorDeCartas
	[
	(aRepartidorDeCartas
		cover: (46 to: 64)
		declaredAt: (25 to: 43)) nuevaRonda ] valueCoveringAll:
		{66 to: 75}.
	(cartasMano _ [
	(aRepartidorDeCartas
		cover: (93 to: 111)
		declaredAt: (25 to: 43)) dar3Cartas ] valueCoveringAll:
		{113 to: 122})
		cover: (79 to: 88)
		declaredAt: (79 to: 88).
	(cartasPie _ [
	(aRepartidorDeCartas
		cover: (139 to: 157)
		declaredAt: (25 to: 43)) dar3CartasMas ] valueCoveringAll:
		{159 to: 171})
		cover: (126 to: 134)
		declaredAt: (126 to: 134).! !
!Behavior method!
sieteDeOro
	^ [
	(self coverAll:
		{16 to: 19}) oroCon:
		(7 coverAll:
			{28 to: 29}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
oroCon: unNumero
	^ [
	(self coverAll:
		{21 to: 24})
		palo:
			([
			(self coverAll:
				{32 to: 35}) oro ] valueCoveringAll:
				{37 to: 39})
		numero:
			(unNumero
				cover: (49 to: 56)
				declaredAt: (9 to: 16)) ] valueCoveringAll:
		{26 to: 30. 41 to: 47}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertNúmeroEsVálido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsVálido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertNúmeroEsVálido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsVálido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
anchoDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(1 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
espadaCon: unNumero
	^ [
	(self coverAll:
		{24 to: 27})
		palo:
			([
			(self coverAll:
				{35 to: 38}) espada ] valueCoveringAll:
				{40 to: 45})
		numero:
			(unNumero
				cover: (55 to: 62)
				declaredAt: (12 to: 19)) ] valueCoveringAll:
		{29 to: 33. 47 to: 53}.! !
!Behavior method!
hash
	^ [
	([
	(palo
		cover: (10 to: 13)
		declaredAt: (10 to: 13)) hash ] valueCoveringAll:
		{15 to: 18}) bitXor:
		([
		(numero
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) hash ] valueCoveringAll:
			{35 to: 38}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
sieteDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(7 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
anchoDeBasto
	^ [
	(self coverAll:
		{18 to: 21}) bastoCon:
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{23 to: 31}.! !
!Behavior method!
bastoCon: unNumero
	^ [
	(self coverAll:
		{23 to: 26})
		palo:
			([
			(self coverAll:
				{34 to: 37}) basto ] valueCoveringAll:
				{39 to: 43})
		numero:
			(unNumero
				cover: (53 to: 60)
				declaredAt: (11 to: 18)) ] valueCoveringAll:
		{28 to: 32. 45 to: 51}.! !
!Behavior method!
jugadorManoTiraCarta: aCartaDeTrucoDeMano
	[
	(cartasMano
		cover: (45 to: 54)
		declaredAt: (45 to: 54))
		remove:
			(aCartaDeTrucoDeMano
				cover: (63 to: 81)
				declaredAt: (23 to: 41))
		ifAbsent: [
			[
			(self coverAll:
				{93 to: 96}) error:
				([
				([
				(self coverAll:
					{105 to: 108}) class ] valueCoveringAll:
					{110 to: 114}) jugadorNoPuedeTirarCartaQueNoTiene ] valueCoveringAll:
					{116 to: 149}) ] valueCoveringAll:
				{98 to: 103} ]] valueCoveringAll:
		{56 to: 62. 83 to: 91}.
	(cartaMano _ aCartaDeTrucoDeMano
		cover: (167 to: 185)
		declaredAt: (23 to: 41))
		cover: (155 to: 163)
		declaredAt: (155 to: 163).! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
jugadorManoTiroPrimeraCarta
	^ [
	([
	(cartaMano
		cover: (33 to: 41)
		declaredAt: (33 to: 41)) =
		(nil coverAll:
			{45 to: 47}) ] valueCoveringAll:
		{43 to: 43}) not ] valueCoveringAll:
		{50 to: 52}.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:33:48'!
PASSED!
!Behavior method!
pieNoPuedeEmpezarLaPrimerRondaError
	^ ' Solo la mano puede empezar la primera ronda' coverAll:
		{40 to: 85}.! !
!Behavior method!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	[
	([
	(self coverAll:
		{44 to: 47}) jugadorManoTiroPrimeraCarta ] valueCoveringAll:
		{49 to: 75}) ifFalse: [
		[
		(self coverAll:
			{86 to: 89}) error:
			([
			([
			(self coverAll:
				{98 to: 101}) class ] valueCoveringAll:
				{103 to: 107}) pieNoPuedeEmpezarLaPrimerRondaError ] valueCoveringAll:
				{109 to: 143}) ] valueCoveringAll:
			{91 to: 96} ]] valueCoveringAll:
		{77 to: 84}.
	(cartaPie _ aCartaDeTrucoDePie
		cover: (162 to: 179)
		declaredAt: (22 to: 39))
		cover: (150 to: 157)
		declaredAt: (150 to: 157).
	[
	(cartasPie
		cover: (183 to: 191)
		declaredAt: (183 to: 191)) remove:
		(aCartaDeTrucoDePie
			cover: (200 to: 217)
			declaredAt: (22 to: 39)) ] valueCoveringAll:
		{193 to: 199}.! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:33:48'!
PASSED!
!Behavior method!
manoGanoLaPrimerMano
	^ [
	(cartaMano
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) mataA:
		(cartaPie
			cover: (43 to: 50)
			declaredAt: (43 to: 50)) ] valueCoveringAll:
		{36 to: 41}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
pieGanoLaPrimerMano
	^ [
	(cartaPie
		cover: (24 to: 31)
		declaredAt: (24 to: 31)) mataA:
		(cartaMano
			cover: (41 to: 49)
			declaredAt: (41 to: 49)) ] valueCoveringAll:
		{34 to: 39}.! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:33:48'!
PASSED!
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeOro
	^ [
	(self coverAll:
		{13 to: 16}) paloEs:
		([
		(self coverAll:
			{26 to: 29}) oro ] valueCoveringAll:
			{31 to: 33}) ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
oro
	^ [
	([
	(self coverAll:
		{9 to: 12}) class ] valueCoveringAll:
		{14 to: 18}) oro ] valueCoveringAll:
		{20 to: 22}.! !

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:33:48'!
PASSED!
!Behavior method!
cartasRestantesDeMano
	^ [
	(cartasMano
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) size ] valueCoveringAll:
		{37 to: 40}.! !
!Behavior method!
cartasRestantesDePie
	^ [
	(cartasPie
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) size ] valueCoveringAll:
		{36 to: 39}.! !

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:33:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:33:48'!
PASSED!
!Behavior method!
jugadorNoPuedeTirarCartaQueNoTiene
	^ 'Los jugadores solo pueden tirar cartas que conocen' coverAll:
		{39 to: 90}.! !

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 19:33:48'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:35:00' prior: 50864394!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	
	self jugadorManoTiroPrimeraCarta ifFalse:[self error: self class pieNoPuedeEmpezarLaPrimerRondaError .].
	cartaPie := aCartaDeTrucoDePie.
	cartasPie remove:aCartaDeTrucoDePie ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:35:39' prior: 50864793!
test07JugadorNoPuedeTirarUnaCartaQueNoTiene
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	
	self 
	should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
	raise: Error 
	withMessageText: RondaDeTruco jugadorNoPuedeTirarCartaQueNoTiene.

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:42:41'!
test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	
	self 
	should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
	raise: Error 
	withMessageText: RondaDeTruco jugadorNoPuedeTirarCartaQueNoTiene.

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:43:07' prior: 50865797!
test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:43:18' prior: 50865811!
test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:43:39' prior: 50865824!
test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco anchoDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	

	

	
	
	
	
	! !
!RondaDeTruco class methodsFor: 'error handling' stamp: 'SB 7/5/2021 19:44:50'!
jugadorTiraCartaCuandoNoEsSuTurno
	^ ' Solo la mano puede empezar la primera ronda'! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:44:50' prior: 50865771!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	
	self jugadorManoTiroPrimeraCarta ifFalse:[self error: self class jugadorTiraCartaCuandoNoEsSuTurno .].
	cartaPie := aCartaDeTrucoDePie.
	cartasPie remove:aCartaDeTrucoDePie ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:44:50' prior: 50864163!
test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	
	
	
	! !

!methodRemoval: RondaDeTruco class #pieNoPuedeEmpezarLaPrimerRondaError stamp: 'SB 7/5/2021 19:44:50'!
pieNoPuedeEmpezarLaPrimerRondaError
	^ ' Solo la mano puede empezar la primera ronda'!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:44:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:44:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:44:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:44:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:44:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:44:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 19:44:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 19:44:55'!
PASSED!
!RondaDeTruco class methodsFor: 'error handling' stamp: 'SB 7/5/2021 19:45:07' prior: 50865850!
jugadorTiraCartaCuandoNoEsSuTurno
	^ ' Espera tu turno'! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:45:18' prior: 50865869!
test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:45:53' prior: 50865837!
test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco anchoDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:46:17' prior: 50865937!
test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco anchoDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:46:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:46:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:46:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:46:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:46:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:46:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 19:46:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 19:46:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 19:46:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 19:47:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 19:47:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:47:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 19:47:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 19:47:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 19:47:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 19:47:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 19:47:28'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 19:47:28'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:48:13' prior: 50865856!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	self assertEsMiTurno.
	self jugadorManoTiroPrimeraCarta ifFalse:[self error: self class jugadorTiraCartaCuandoNoEsSuTurno .].
	cartaPie := aCartaDeTrucoDePie.
	cartasPie remove:aCartaDeTrucoDePie ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:48:50'!
assertEsMiTurno
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:50:38'!
assertEsTurnoDePie
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:50:38' prior: 50866044!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	self assertEsTurnoDePie.
	self jugadorManoTiroPrimeraCarta ifFalse:[self error: self class jugadorTiraCartaCuandoNoEsSuTurno .].
	cartaPie := aCartaDeTrucoDePie.
	cartasPie remove:aCartaDeTrucoDePie ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].

	! !

!methodRemoval: RondaDeTruco #assertEsMiTurno stamp: 'SB 7/5/2021 19:50:38'!
assertEsMiTurno
	self shouldBeImplemented.!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 19:51:39'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartaMano cartaPie cartasMano cartasPie numeroRonda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:51:37' prior: 50866061!
assertEsTurnoDePie
	numeroRonda = 1 ifTrue: [^ self jugadorManoTiroPrimeraCarta ]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:52:05' prior: 50866092!
assertEsTurnoDePie
	numeroRonda = 1 ifTrue: [^ self jugadorManoTiroPrimeraCarta ]
	ifFalse:[ ^ self pieGanoLaPrimerMano ]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:55:11' prior: 50866098!
assertEsTurnoDePie
	(numeroRonda = 1 and: self jugadorManoTiroPrimeraCarta not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno].
	(numeroRonda = 2 and: self manoGanoLaPrimerMano) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno].! !

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 19:55:17'!
ERROR!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 19:55:17'!
ERROR!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 19:55:38'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 19:56:11' prior: 50866066!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	self assertEsTurnoDePie.

	cartaPie := aCartaDeTrucoDePie.
	cartasPie remove:aCartaDeTrucoDePie ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:00:00' prior: 50866105!
assertEsTurnoDePie
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] .
! !

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:00:04'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:00:04'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 20:00:50' prior: 50864333!
initializeEmpezarRonda: aRepartidorDeCartas
	aRepartidorDeCartas nuevaRonda.
	cartasMano := aRepartidorDeCartas dar3Cartas.
	cartasPie := aRepartidorDeCartas dar3CartasMas.
	numeroRonda := 1.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:01:14' prior: 50866131!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	self assertEsTurnoDePie.

	cartaPie := aCartaDeTrucoDePie.
	cartasPie remove:aCartaDeTrucoDePie ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].
	numeroRonda := numeroRonda +1.

	! !

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:01:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:01:26'!
PASSED!

Object subclass: #ControladorDeJuegoDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #ControladorDeJuegoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 20:01:50'!
Object subclass: #ControladorDeJuegoDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #ControladorDeJuegoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 20:02:50'!
Object subclass: #ControladorDeJuegoDeTruco
	instanceVariableNames: 'numeroRonda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!ControladorDeJuegoDeTruco methodsFor: 'no messages' stamp: 'SB 7/5/2021 20:02:48' overrides: 16896425!
initialize
	numeroRonda:= 1.! !

!classRemoval: #JugadorDeTrucoTest stamp: 'SB 7/5/2021 20:02:59'!
TestCase subclass: #JugadorDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 20:04:24' prior: 50866163!
initializeEmpezarRonda: aRepartidorDeCartas
	
	cartasMano := aRepartidorDeCartas dar3Cartas.
	cartasPie := aRepartidorDeCartas dar3CartasMas.
	numeroRonda := 1.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 20:04:47'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartaMano cartaPie cartasMano cartasPie numeroRonda controladorDeJuego'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 20:04:44' prior: 50866253!
initializeEmpezarRonda: aRepartidorDeCartas
	
	cartasMano := aRepartidorDeCartas dar3Cartas.
	cartasPie := aRepartidorDeCartas dar3CartasMas.
	numeroRonda := 1.
	controladorDeJuego := ControladorDeJuegoDeTruco new.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:07:00' prior: 50865270!
jugadorManoTiraCarta: aCartaDeTrucoDeMano 

	self assertEsTurnoDeMano
	cartasMano remove:aCartaDeTrucoDeMano ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].
	cartaMano:= aCartaDeTrucoDeMano.
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:07:15' prior: 50866281!
jugadorManoTiraCarta: aCartaDeTrucoDeMano 

	self assertEsTurnoDeMano.
	cartasMano remove:aCartaDeTrucoDeMano ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].
	cartaMano:= aCartaDeTrucoDeMano.
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:07:24'!
assertEsTurnoDeMano
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:07:59' prior: 50866301!
assertEsTurnoDeMano
	controladorDeJuego esTurnoDeMano! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:08:11'!
esTurnoDeMano
	self shouldBeImplemented.! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:09:07' prior: 50866311!
esTurnoDeMano
	numeroRonda = 1 ifTrue: [true] ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:09:10'!
PASSED!
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 20:09:26' prior: 50866271!
initializeEmpezarRonda: aRepartidorDeCartas
	
	cartasMano := aRepartidorDeCartas dar3Cartas.
	cartasPie := aRepartidorDeCartas dar3CartasMas.
	numeroRonda := 1.
	controladorDeJuego := ControladorDeJuegoDeTruco for: self.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:09:35'!
ERROR!
!ControladorDeJuegoDeTruco class methodsFor: 'instance creation' stamp: 'SB 7/5/2021 20:09:42'!
for: aRondaDeTruco 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aRondaDeTruco ! !
!ControladorDeJuegoDeTruco class methodsFor: 'instance creation' stamp: 'SB 7/5/2021 20:09:47' prior: 50866339!
for: aRondaDeTruco 
	
	^self new initializeFor: aRondaDeTruco ! !

!classDefinition: #ControladorDeJuegoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 20:10:04'!
Object subclass: #ControladorDeJuegoDeTruco
	instanceVariableNames: 'numeroRonda rondaDeTruco'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!ControladorDeJuegoDeTruco methodsFor: 'initialicing' stamp: 'SB 7/5/2021 20:10:04'!
initializeFor: aRondaDeTruco 
	self shouldBeImplemented.
	rondaDeTruco := aRondaDeTruco.! !
!ControladorDeJuegoDeTruco methodsFor: 'initialicing' stamp: 'SB 7/5/2021 20:10:14' prior: 50866362!
initializeFor: aRondaDeTruco 
	
	rondaDeTruco := aRondaDeTruco.
	numeroRonda  := 1.! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:11:06' prior: 50866316!
esTurnoDeMano
	numeroRonda = 1 ifTrue: [] ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:11:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:11:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:11:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:11:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:11:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 20:11:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 20:11:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 20:11:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:11:34'!
PASSED!

!classRemoval: #JugadorTruco stamp: 'SB 7/5/2021 20:12:48'!
Object subclass: #JugadorTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!methodRemoval: ControladorDeJuegoDeTruco #initialize stamp: 'SB 7/5/2021 20:12:54'!
initialize
	numeroRonda:= 1.!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:14:17' prior: 50866141!
assertEsTurnoDePie

	"
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] ."
! !

----SNAPSHOT----(5 July 2021 20:14:47) CuisUniversity-4532.image priorSource: 17049203!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:15:06' prior: 50866425!
assertEsTurnoDePie
	controladorDeJuego esTurnoDeMano
	"
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] ."
! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:16:13'!
esTurnoDeMano: aCartaDeTruco
	numeroRonda = 1 ifTrue: [] ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:16:13' prior: 50866306!
assertEsTurnoDeMano
	controladorDeJuego esTurnoDeMano: aCartaDeTruco! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:16:13' prior: 50866441!
assertEsTurnoDePie
	controladorDeJuego esTurnoDeMano: aCartaDeTruco
	"
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] ."
! !

!methodRemoval: ControladorDeJuegoDeTruco #esTurnoDeMano stamp: 'SB 7/5/2021 20:16:13'!
esTurnoDeMano
	numeroRonda = 1 ifTrue: [] !

!classDefinition: #ControladorDeJuegoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 20:16:35'!
Object subclass: #ControladorDeJuegoDeTruco
	instanceVariableNames: 'numeroRonda rondaDeTruco cartaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:16:34' prior: 50866455!
esTurnoDeMano: aCartaDeTruco
	numeroRonda = 1 ifTrue: [] .
	
	cartaMano := aCartaDeTruco ! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:17:24'!
manoIntentaTirar: aCartaDeTruco
	numeroRonda = 1 ifTrue: [] .
	
	cartaMano := aCartaDeTruco ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:17:24' prior: 50866460!
assertEsTurnoDeMano
	controladorDeJuego manoIntentaTirar: aCartaDeTruco! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:17:24' prior: 50866466!
assertEsTurnoDePie
	controladorDeJuego manoIntentaTirar: aCartaDeTruco
	"
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] ."
! !

!methodRemoval: ControladorDeJuegoDeTruco #esTurnoDeMano: stamp: 'SB 7/5/2021 20:17:24'!
esTurnoDeMano: aCartaDeTruco
	numeroRonda = 1 ifTrue: [] .
	
	cartaMano := aCartaDeTruco !

!classDefinition: #ControladorDeJuegoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 20:17:45'!
Object subclass: #ControladorDeJuegoDeTruco
	instanceVariableNames: 'numeroRonda rondaDeTruco cartaMano cartaPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:17:43'!
pieIntentaTirar: aCartaDeTruco
	numeroRonda = 1 ifTrue: [] .
	
	cartaPie := aCartaDeTruco ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:18:25' prior: 50866173!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	controladorDeJuego pieIntentaTirar: aCartaDeTrucoDePie .
	
	cartasPie remove:aCartaDeTrucoDePie ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].
	cartaPie := aCartaDeTrucoDePie.
	numeroRonda := numeroRonda +1.

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:18:50' prior: 50866291!
jugadorManoTiraCarta: aCartaDeTrucoDeMano 
	controladorDeJuego pieIntentaTirar: aCartaDeTrucoDeMano .

	cartasMano remove:aCartaDeTrucoDeMano ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].
	cartaMano:= aCartaDeTrucoDeMano.
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:18:58' prior: 50866560!
jugadorManoTiraCarta: aCartaDeTrucoDeMano 
	controladorDeJuego manoIntentaTirar: aCartaDeTrucoDeMano .

	cartasMano remove:aCartaDeTrucoDeMano ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].
	cartaMano:= aCartaDeTrucoDeMano.
	
	
	! !

!methodRemoval: RondaDeTruco #assertEsTurnoDePie stamp: 'SB 7/5/2021 20:19:43'!
assertEsTurnoDePie
	controladorDeJuego manoIntentaTirar: aCartaDeTruco
	"
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] ."
!

!methodRemoval: RondaDeTruco #assertEsTurnoDeMano stamp: 'SB 7/5/2021 20:19:45'!
assertEsTurnoDeMano
	controladorDeJuego manoIntentaTirar: aCartaDeTruco!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:20:18' prior: 50866542!
pieIntentaTirar: aCartaDeTruco
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] .
	cartaPie := aCartaDeTruco ! !
!ControladorDeJuegoDeTruco methodsFor: 'initialicing' stamp: 'SB 7/5/2021 20:20:44' prior: 50866369!
initializeFor: aRondaDeTruco 
	
	rondaDeTruco := aRondaDeTruco.
	numeroRonda  := 1.
	! !
!ControladorDeJuegoDeTruco methodsFor: 'nil' stamp: 'SB 7/5/2021 20:21:07'!
jugadorManoTiroPrimeraCarta
	^ (cartaMano = nil) not.! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:21:59' prior: 50866601!
pieIntentaTirar: aCartaDeTruco
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [rondaDeTruco pieJuegaFueraDeTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [^ self error: self class jugadorTiraCartaCuandoNoEsSuTurno]] .
	cartaPie := aCartaDeTruco ! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:22:22' prior: 50866627!
pieIntentaTirar: aCartaDeTruco
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [rondaDeTruco pieJuegaFueraDeTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [rondaDeTruco pieJuegaFueraDeTurno]] .
	cartaPie := aCartaDeTruco ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:23:00'!
pieJuegaFueraDeTurno

	self error: self class jugadorNoPuedeTirarCartaQueNoTiene

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:23:04' prior: 50866652!
pieJuegaFueraDeTurno
	self error: self class jugadorNoPuedeTirarCartaQueNoTiene

	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:23:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:23:12'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:23:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:23:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 20:23:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 20:23:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 20:23:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:23:12'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:23:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:24:12'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:24:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:24:29'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:25:14' prior: 50866658!
pieJuegaFueraDeTurno
	self error: self class jugadorTiraCartaCuandoNoEsSuTurno

	! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:25:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:25:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:25:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:25:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:25:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 20:25:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 20:25:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 20:25:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:25:19'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:25:19'!
FAILURE!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:27:47' prior: 50866640!
pieIntentaTirar: aCartaDeTruco
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [rondaDeTruco pieJuegaFueraDeTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [rondaDeTruco pieJuegaFueraDeTurno]] .
	cartaPie := aCartaDeTruco
	self chequearTerminoDeEnfrentamiento! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:27:52' prior: 50866756!
pieIntentaTirar: aCartaDeTruco
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [rondaDeTruco pieJuegaFueraDeTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [rondaDeTruco pieJuegaFueraDeTurno]] .
	cartaPie := aCartaDeTruco.
	self chequearTerminoDeEnfrentamiento! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:29:26' prior: 50866770!
pieIntentaTirar: aCartaDeTruco
	(numeroRonda = 1) ifTrue: [(self jugadorManoTiroPrimeraCarta not) ifTrue: [rondaDeTruco pieJuegaFueraDeTurno]] .
	(numeroRonda = 2) ifTrue: [(self pieGanoLaPrimerMano not) ifTrue: [rondaDeTruco pieJuegaFueraDeTurno]] .
	cartaPie := aCartaDeTruco.
	self chequearTerminoDeEnfrentamiento! !

!classDefinition: #ControladorDeJuegoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 20:30:13'!
Object subclass: #ControladorDeJuegoDeTruco
	instanceVariableNames: 'numeroRonda rondaDeTruco cartaMano cartaPie turno'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!ControladorDeJuegoDeTruco methodsFor: 'initialicing' stamp: 'SB 7/5/2021 20:30:10' prior: 50866615!
initializeFor: aRondaDeTruco 
	
	rondaDeTruco := aRondaDeTruco.
	numeroRonda  := 1.
	turno := #Mano
	! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:32:41' prior: 50866500!
manoIntentaTirar: aCartaDeTruco
	
	turno = #Mano ifFalse: [ rondaDeTruco manoJuegaFueraDeTurno].
	cartaMano := aCartaDeTruco .
	self chequearTerminoDeEnfrentamiento.
	! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:33:03'!
chequearTerminoDeEnfrentamiento
	self shouldBeImplemented.! !

cartaMano isNotNil!

(cartaMano isNil) !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:36:06' prior: 50866824!
chequearTerminoDeEnfrentamiento
	((cartaMano isNil not) and: (cartaPie isNil not) ) ifTrue: [ self verGanadorRonda]! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:37:08'!
verGanadorRonda
	self shouldBeImplemented.! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:38:00' prior: 50866838!
verGanadorRonda
	(cartaMano mataA: cartaPie) ifTrue:[ turno := #Mano]! !

!classDefinition: #ControladorDeJuegoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 20:38:50'!
Object subclass: #ControladorDeJuegoDeTruco
	instanceVariableNames: 'numeroRonda rondaDeTruco cartaMano cartaPie turno puntosMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #ControladorDeJuegoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'SB 7/5/2021 20:39:38'!
Object subclass: #ControladorDeJuegoDeTruco
	instanceVariableNames: 'numeroRonda rondaDeTruco cartaMano cartaPie turno puntosMano puntosPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:39:29' prior: 50866843!
verGanadorRonda
	(cartaMano mataA: cartaPie) ifTrue:[ 
			turno := #Mano.
			puntosMano := puntosMano +1].
	(cartaPie mataA: cartaMano) ifTrue:[ 
			turno := #Pie.
			puntosPie := puntosPie +1].! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:42:18' prior: 50866870!
verGanadorRonda
	(cartaMano mataA: cartaPie) ifTrue:[ 
			turno := #Mano.
			puntosMano := puntosMano +1].
	(cartaPie mataA: cartaMano) ifTrue:[ 
			turno := #Pie.
			puntosPie := puntosPie +1].
	(cartaMano empardaCon: cartaPie) IfTrue: [
			turno := #Mano
			].
	numeroRonda := numeroRonda +1
		! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:42:27' prior: 50866880!
verGanadorRonda
	(cartaMano mataA: cartaPie) ifTrue:[ 
			turno := #Mano.
			puntosMano := puntosMano +1].
	(cartaPie mataA: cartaMano) ifTrue:[ 
			turno := #Pie.
			puntosPie := puntosPie +1].
	(cartaMano empardaCon: cartaPie) ifTrue: [
			turno := #Mano
			].
	numeroRonda := numeroRonda +1
		! !

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:42:32'!
ERROR!
!ControladorDeJuegoDeTruco methodsFor: 'initialicing' stamp: 'SB 7/5/2021 20:43:16' prior: 50866808!
initializeFor: aRondaDeTruco 
	
	rondaDeTruco := aRondaDeTruco.
	numeroRonda  := 1.
	turno := #Mano.
	puntosMano := 0.
	puntosPie := 0.
	
	! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:44:39' prior: 50866784!
pieIntentaTirar: aCartaDeTruco

	turno = #Pie ifFalse: [ rondaDeTruco manoJuegaFueraDeTurno].
	cartaPie := aCartaDeTruco.
	self chequearTerminoDeEnfrentamiento! !

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:44:54'!
ERROR!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:44:54'!
ERROR!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:45:27'!
ERROR!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:46:30' prior: 50866815!
manoIntentaTirar: aCartaDeTruco
	
	turno = #Mano ifFalse: [ rondaDeTruco manoJuegaFueraDeTurno].
	cartaMano := aCartaDeTruco .
	turno := #Pie.
	self chequearTerminoDeEnfrentamiento.
	! !

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:46:37'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:46:37'!
FAILURE!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:46:57' prior: 50866919!
pieIntentaTirar: aCartaDeTruco

	turno = #Pie ifFalse: [ rondaDeTruco pieJuegaFueraDeTurno].
	cartaPie := aCartaDeTruco.
	self chequearTerminoDeEnfrentamiento! !

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:47:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:47:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:47:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:47:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:47:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 20:47:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 20:47:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 20:47:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:47:11'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:47:37'!
test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco anchoDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:47:53'!
test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco anchoDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:47:53'!
test08JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco anchoDeEspada .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:48:27' prior: 50867022!
test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:48:37' prior: 50867060!
test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:48:55' prior: 50867078!
test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:49:14'!
ManoJuegaFueraDeTurno
	self error: self class jugadorTiraCartaCuandoNoEsSuTurno

	! !

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:49:20'!
FAILURE!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:49:20'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:50:09'!
manoJuegaFueraDeTurno
	self error: self class jugadorTiraCartaCuandoNoEsSuTurno

	! !

!methodRemoval: RondaDeTruco #ManoJuegaFueraDeTurno stamp: 'SB 7/5/2021 20:50:09'!
ManoJuegaFueraDeTurno
	self error: self class jugadorTiraCartaCuandoNoEsSuTurno

	!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:50:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:50:19'!
PASSED!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:51:25' prior: 50866893!
verGanadorRonda
	(cartaMano mataA: cartaPie) ifTrue:[ 
			turno := #Mano.
			puntosMano := puntosMano +1].
	(cartaPie mataA: cartaMano) ifTrue:[ 
			turno := #Pie.
			puntosPie := puntosPie +1].
	(cartaMano empardaCon: cartaPie) ifTrue: [
			turno := #Mano.
			puntosPie := puntosPie +1.
			puntosMano := puntosMano +1.
			].
	numeroRonda := numeroRonda +1
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:52:10'!
test09RondaDeTrucoSabeQueLaRondaTermino
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:52:26'!
test09RondaDeTrucoSabeQueLaRondaTerminoYQuienGano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test09RondaDeTrucoSabeQueLaRondaTermino stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test09RondaDeTrucoSabeQueLaRondaTerminoYQuienGano stamp: 'SB 7/5/2021 20:53:46'!
PASSED!

!methodRemoval: RondaDeTrucoTest #test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano stamp: 'SB 7/5/2021 20:53:52'!
test01ElJugadorManoTiraLaPrimeraCartaCuandoEmpiezaUnaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	
	self assert: rondaDeTruco jugadorManoTiroPrimeraCarta 
	
	
	
	
	!

!methodRemoval: ControladorDeJuegoDeTruco #jugadorManoTiroPrimeraCarta stamp: 'SB 7/5/2021 20:54:00'!
jugadorManoTiroPrimeraCarta
	^ (cartaMano = nil) not.!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 20:54:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:54:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 20:54:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 20:54:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 20:54:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 20:54:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:54:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 20:54:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test09RondaDeTrucoSabeQueLaRondaTermino stamp: 'SB 7/5/2021 20:54:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test09RondaDeTrucoSabeQueLaRondaTerminoYQuienGano stamp: 'SB 7/5/2021 20:54:03'!
PASSED!

!methodRemoval: RondaDeTrucoTest #test09RondaDeTrucoSabeQueLaRondaTermino stamp: 'SB 7/5/2021 20:54:10'!
test09RondaDeTrucoSabeQueLaRondaTermino
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:54:20'!
test10RondaDeTrucoSabeQueLaRondaTerminoYQuienGano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test09RondaDeTrucoSabeQueLaRondaTerminoYQuienGano stamp: 'SB 7/5/2021 20:54:20'!
test09RondaDeTrucoSabeQueLaRondaTerminoYQuienGano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:54:54'!
test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:55:21' prior: 50867348!
test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:55:54' prior: 50867313!
test10RondaDeTrucoSabeQueLaRondaTerminoYQuienGano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .

	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoYQuienGano stamp: 'SB 7/5/2021 20:56:23'!
test10RondaDeTrucoSabeQueLaRondaTerminoYQuienGano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .

	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeEspada .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:57:26' prior: 50867366!
test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:58:09' prior: 50867418!
test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self assert: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:58:22' prior: 50867433!
test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self assert: rondaDeTruco jugadorManoGanoRonda.
	self deny: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 20:59:25'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 20:59:52' prior: 50867451!
test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self assert: rondaDeTruco jugadorManoGanoRonda.
	self deny: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:00:04'!
ERROR!

----SNAPSHOT----(5 July 2021 21:00:26) CuisUniversity-4532.image priorSource: 17113161!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:01:44' prior: 50867150!
verGanadorRonda
	(cartaMano mataA: cartaPie) ifTrue:[ 
			turno := #Mano.
			puntosMano := puntosMano +1].
	(cartaPie mataA: cartaMano) ifTrue:[ 
			turno := #Pie.
			puntosPie := puntosPie +1].
	(cartaMano empardaCon: cartaPie) ifTrue: [
			turno := #Mano.
			puntosPie := puntosPie +1.
			puntosMano := puntosMano +1.
			].
	numeroRonda := numeroRonda +1.
	cartaPie := nil.
	cartaMano :=nil
		! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:03:01'!
setearCartasEnEmpiezoNuevaMano

	cartaPie := nil.
	cartaMano :=nil! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:03:02' prior: 50867500!
verGanadorRonda
	(cartaMano mataA: cartaPie) ifTrue:[ 
			turno := #Mano.
			puntosMano := puntosMano +1].
	(cartaPie mataA: cartaMano) ifTrue:[ 
			turno := #Pie.
			puntosPie := puntosPie +1].
	(cartaMano empardaCon: cartaPie) ifTrue: [
			turno := #Mano.
			puntosPie := puntosPie +1.
			puntosMano := puntosMano +1.
			].
	numeroRonda := numeroRonda +1.
	self setearCartasEnEmpiezoNuevaMano
		! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:03:32'!
asignarPuntosDeRonda

	(cartaMano mataA: cartaPie) ifTrue:[ 
			turno := #Mano.
			puntosMano := puntosMano +1].
	(cartaPie mataA: cartaMano) ifTrue:[ 
			turno := #Pie.
			puntosPie := puntosPie +1].
	(cartaMano empardaCon: cartaPie) ifTrue: [
			turno := #Mano.
			puntosPie := puntosPie +1.
			puntosMano := puntosMano +1.
			]! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:03:32' prior: 50867522!
verGanadorRonda
	self asignarPuntosDeRonda.
	numeroRonda := numeroRonda +1.
	self setearCartasEnEmpiezoNuevaMano
		! !

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:03:42'!
ERROR!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:03:42'!
ERROR!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:04:38' prior: 50866961!
pieIntentaTirar: aCartaDeTruco

	turno = #Pie ifFalse: [ rondaDeTruco pieJuegaFueraDeTurno].
	cartaPie := aCartaDeTruco.
	turno := #Mano.
	self chequearTerminoDeEnfrentamiento! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:04:59'!
assertEsTurnoPie

	^ turno = #Pie ifFalse: [ rondaDeTruco pieJuegaFueraDeTurno]! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:04:59' prior: 50867568!
pieIntentaTirar: aCartaDeTruco

	self assertEsTurnoPie.
	cartaPie := aCartaDeTruco.
	turno := #Mano.
	self chequearTerminoDeEnfrentamiento! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:05:28'!
assertEsTurnoMano

	^ turno = #Mano ifFalse: [ rondaDeTruco manoJuegaFueraDeTurno]! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:05:28' prior: 50866942!
manoIntentaTirar: aCartaDeTruco
	
	self assertEsTurnoMano.
	cartaMano := aCartaDeTruco .
	turno := #Pie.
	self chequearTerminoDeEnfrentamiento.
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:05:54'!
jugadorManoGanoRonda
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:06:19' prior: 50867606!
jugadorManoGanoRonda
	^controladorDeJuego jugadorManoGanoRonda! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:06:30'!
jugadorManoGanoRonda
	self shouldBeImplemented.! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:06:54' prior: 50867616!
jugadorManoGanoRonda
	^ puntosMano > 2! !

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:07:06'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:07:23' prior: 50867473!
test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:07:53'!
jugadorPieGanoRonda
	^ puntosPie  >= 2
	! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:08:01' prior: 50867621!
jugadorManoGanoRonda
	^ puntosMano >= 2! !

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:08:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:08:07'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:08:17'!
jugadorPieGanoRonda
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:08:31' prior: 50867667!
jugadorPieGanoRonda
	^ controladorDeJuego  jugadorPieGanoRonda .! !

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:08:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:08:38'!
PASSED!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:09:19'!
terminarGanadorRonda
	self asignarPuntosDeRonda.
	numeroRonda := numeroRonda +1.
	self setearCartasEnEmpiezoNuevaMano
		! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:09:19' prior: 50866831!
chequearTerminoDeEnfrentamiento
	((cartaMano isNil not) and: (cartaPie isNil not) ) ifTrue: [ self terminarGanadorRonda]! !

!methodRemoval: ControladorDeJuegoDeTruco #verGanadorRonda stamp: 'SB 7/5/2021 21:09:19'!
verGanadorRonda
	self asignarPuntosDeRonda.
	numeroRonda := numeroRonda +1.
	self setearCartasEnEmpiezoNuevaMano
		!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:09:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:09:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:09:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:09:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:09:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:09:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:09:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:09:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:09:30'!
PASSED!
!Behavior method!
empezarRondaConRepartidor: aRepartidorDeCartas
	^ [
	([
	(self coverAll:
		{52 to: 55}) new ] valueCoveringAll:
		{57 to: 59}) initializeEmpezarRonda:
		(aRepartidorDeCartas
			cover: (85 to: 103)
			declaredAt: (28 to: 46)) ] valueCoveringAll:
		{61 to: 83}.! !
!Behavior method!
initializeEmpezarRonda: aRepartidorDeCartas
	(cartasMano _ [
	(aRepartidorDeCartas
		cover: (62 to: 80)
		declaredAt: (25 to: 43)) dar3Cartas ] valueCoveringAll:
		{82 to: 91})
		cover: (48 to: 57)
		declaredAt: (48 to: 57).
	(cartasPie _ [
	(aRepartidorDeCartas
		cover: (108 to: 126)
		declaredAt: (25 to: 43)) dar3CartasMas ] valueCoveringAll:
		{128 to: 140})
		cover: (95 to: 103)
		declaredAt: (95 to: 103).
	(numeroRonda _ 1 coverAll:
		{159 to: 159})
		cover: (144 to: 154)
		declaredAt: (144 to: 154).
	(controladorDeJuego _ [
	(ControladorDeJuegoDeTruco
		cover: (185 to: 209)
		declaredAt: (185 to: 209)) for:
		(self coverAll:
			{216 to: 219}) ] valueCoveringAll:
		{211 to: 214})
		cover: (163 to: 180)
		declaredAt: (163 to: 180).! !
!Behavior method!
sieteDeOro
	^ [
	(self coverAll:
		{16 to: 19}) oroCon:
		(7 coverAll:
			{28 to: 29}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
oroCon: unNumero
	^ [
	(self coverAll:
		{21 to: 24})
		palo:
			([
			(self coverAll:
				{32 to: 35}) oro ] valueCoveringAll:
				{37 to: 39})
		numero:
			(unNumero
				cover: (49 to: 56)
				declaredAt: (9 to: 16)) ] valueCoveringAll:
		{26 to: 30. 41 to: 47}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertNúmeroEsVálido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsVálido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertNúmeroEsVálido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsVálido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
anchoDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(1 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
espadaCon: unNumero
	^ [
	(self coverAll:
		{24 to: 27})
		palo:
			([
			(self coverAll:
				{35 to: 38}) espada ] valueCoveringAll:
				{40 to: 45})
		numero:
			(unNumero
				cover: (55 to: 62)
				declaredAt: (12 to: 19)) ] valueCoveringAll:
		{29 to: 33. 47 to: 53}.! !
!Behavior method!
hash
	^ [
	([
	(palo
		cover: (10 to: 13)
		declaredAt: (10 to: 13)) hash ] valueCoveringAll:
		{15 to: 18}) bitXor:
		([
		(numero
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) hash ] valueCoveringAll:
			{35 to: 38}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
sieteDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(7 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
anchoDeBasto
	^ [
	(self coverAll:
		{18 to: 21}) bastoCon:
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{23 to: 31}.! !
!Behavior method!
bastoCon: unNumero
	^ [
	(self coverAll:
		{23 to: 26})
		palo:
			([
			(self coverAll:
				{34 to: 37}) basto ] valueCoveringAll:
				{39 to: 43})
		numero:
			(unNumero
				cover: (53 to: 60)
				declaredAt: (11 to: 18)) ] valueCoveringAll:
		{28 to: 32. 45 to: 51}.! !
!Behavior method!
for: aRondaDeTruco
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeFor:
		(aRondaDeTruco
			cover: (49 to: 61)
			declaredAt: (6 to: 18)) ] valueCoveringAll:
		{34 to: 47}.! !
!Behavior method!
initializeFor: aRondaDeTruco
	(rondaDeTruco _ aRondaDeTruco
		cover: (50 to: 62)
		declaredAt: (16 to: 28))
		cover: (34 to: 45)
		declaredAt: (34 to: 45).
	(numeroRonda _ 1 coverAll:
		{82 to: 82})
		cover: (66 to: 76)
		declaredAt: (66 to: 76).
	(turno _ #Mano coverAll:
		{95 to: 99})
		cover: (86 to: 90)
		declaredAt: (86 to: 90).
	(puntosMano _ 0 coverAll:
		{117 to: 117})
		cover: (103 to: 112)
		declaredAt: (103 to: 112).
	(puntosPie _ 0 coverAll:
		{134 to: 134})
		cover: (121 to: 129)
		declaredAt: (121 to: 129).! !
!Behavior method!
jugadorTiraCartaCuandoNoEsSuTurno
	^ ' Espera tu turno' coverAll:
		{38 to: 55}.! !
!Behavior method!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	[
	(controladorDeJuego
		cover: (42 to: 59)
		declaredAt: (42 to: 59)) pieIntentaTirar:
		(aCartaDeTrucoDePie
			cover: (78 to: 95)
			declaredAt: (22 to: 39)) ] valueCoveringAll:
		{61 to: 76}.
	[
	(cartasPie
		cover: (102 to: 110)
		declaredAt: (102 to: 110))
		remove:
			(aCartaDeTrucoDePie
				cover: (119 to: 136)
				declaredAt: (22 to: 39))
		ifAbsent: [
			[
			(self coverAll:
				{148 to: 151}) error:
				([
				([
				(self coverAll:
					{160 to: 163}) class ] valueCoveringAll:
					{165 to: 169}) jugadorNoPuedeTirarCartaQueNoTiene ] valueCoveringAll:
					{171 to: 204}) ] valueCoveringAll:
				{153 to: 158} ]] valueCoveringAll:
		{112 to: 118. 138 to: 146}.
	(cartaPie _ aCartaDeTrucoDePie
		cover: (222 to: 239)
		declaredAt: (22 to: 39))
		cover: (210 to: 217)
		declaredAt: (210 to: 217).
	(numeroRonda _ [
	(numeroRonda
		cover: (243 to: 253)
		declaredAt: (243 to: 253)) +
		(1 coverAll:
			{271 to: 271}) ] valueCoveringAll:
		{270 to: 270})
		cover: (258 to: 268)
		declaredAt: (243 to: 253).! !
!Behavior method!
pieIntentaTirar: aCartaDeTruco
	[
	(self coverAll:
		{34 to: 37}) assertEsTurnoPie ] valueCoveringAll:
		{39 to: 54}.
	(cartaPie _ aCartaDeTruco
		cover: (70 to: 82)
		declaredAt: (18 to: 30))
		cover: (58 to: 65)
		declaredAt: (58 to: 65).
	(turno _ #Mano coverAll:
		{95 to: 99})
		cover: (86 to: 90)
		declaredAt: (86 to: 90).
	[
	(self coverAll:
		{103 to: 106}) chequearTerminoDeEnfrentamiento ] valueCoveringAll:
		{108 to: 138}.! !
!Behavior method!
assertEsTurnoPie
	^ [
	([
	(turno
		cover: (22 to: 26)
		declaredAt: (22 to: 26)) =
		(#Pie coverAll:
			{30 to: 33}) ] valueCoveringAll:
		{28 to: 28}) ifFalse: [
		[
		(rondaDeTruco
			cover: (46 to: 57)
			declaredAt: (46 to: 57)) pieJuegaFueraDeTurno ] valueCoveringAll:
			{59 to: 78} ]] valueCoveringAll:
		{35 to: 42}.! !
!Behavior method!
pieJuegaFueraDeTurno
	[
	(self coverAll:
		{23 to: 26}) error:
		([
		([
		(self coverAll:
			{35 to: 38}) class ] valueCoveringAll:
			{40 to: 44}) jugadorTiraCartaCuandoNoEsSuTurno ] valueCoveringAll:
			{46 to: 78}) ] valueCoveringAll:
		{28 to: 33}.! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:10:48'!
PASSED!
!Behavior method!
jugadorManoTiraCarta: aCartaDeTrucoDeMano
	[
	(controladorDeJuego
		cover: (45 to: 62)
		declaredAt: (45 to: 62)) manoIntentaTirar:
		(aCartaDeTrucoDeMano
			cover: (82 to: 100)
			declaredAt: (23 to: 41)) ] valueCoveringAll:
		{64 to: 80}.
	[
	(cartasMano
		cover: (106 to: 115)
		declaredAt: (106 to: 115))
		remove:
			(aCartaDeTrucoDeMano
				cover: (124 to: 142)
				declaredAt: (23 to: 41))
		ifAbsent: [
			[
			(self coverAll:
				{154 to: 157}) error:
				([
				([
				(self coverAll:
					{166 to: 169}) class ] valueCoveringAll:
					{171 to: 175}) jugadorNoPuedeTirarCartaQueNoTiene ] valueCoveringAll:
					{177 to: 210}) ] valueCoveringAll:
				{159 to: 164} ]] valueCoveringAll:
		{117 to: 123. 144 to: 152}.
	(cartaMano _ aCartaDeTrucoDeMano
		cover: (228 to: 246)
		declaredAt: (23 to: 41))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).! !
!Behavior method!
manoIntentaTirar: aCartaDeTruco
	[
	(self coverAll:
		{36 to: 39}) assertEsTurnoMano ] valueCoveringAll:
		{41 to: 57}.
	(cartaMano _ aCartaDeTruco
		cover: (74 to: 86)
		declaredAt: (19 to: 31))
		cover: (61 to: 69)
		declaredAt: (61 to: 69).
	(turno _ #Pie coverAll:
		{100 to: 103})
		cover: (91 to: 95)
		declaredAt: (91 to: 95).
	[
	(self coverAll:
		{107 to: 110}) chequearTerminoDeEnfrentamiento ] valueCoveringAll:
		{112 to: 142}.! !
!Behavior method!
assertEsTurnoMano
	^ [
	([
	(turno
		cover: (23 to: 27)
		declaredAt: (23 to: 27)) =
		(#Mano coverAll:
			{31 to: 35}) ] valueCoveringAll:
		{29 to: 29}) ifFalse: [
		[
		(rondaDeTruco
			cover: (48 to: 59)
			declaredAt: (48 to: 59)) manoJuegaFueraDeTurno ] valueCoveringAll:
			{61 to: 81} ]] valueCoveringAll:
		{37 to: 44}.! !
!Behavior method!
chequearTerminoDeEnfrentamiento
	[
	([
	([
	([
	(cartaMano
		cover: (36 to: 44)
		declaredAt: (36 to: 44)) isNil ] valueCoveringAll:
		{46 to: 50}) not ] valueCoveringAll:
		{52 to: 54}) and:
		([
		([
		(cartaPie
			cover: (63 to: 70)
			declaredAt: (63 to: 70)) isNil ] valueCoveringAll:
			{72 to: 76}) not ] valueCoveringAll:
			{78 to: 80}) ] valueCoveringAll:
		{57 to: 60}) ifTrue: [
		[
		(self coverAll:
			{95 to: 98}) terminarGanadorRonda ] valueCoveringAll:
			{100 to: 119} ]] valueCoveringAll:
		{85 to: 91}.! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
terminarGanadorRonda
	[
	(self coverAll:
		{23 to: 26}) asignarPuntosDeRonda ] valueCoveringAll:
		{28 to: 47}.
	(numeroRonda _ [
	(numeroRonda
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) +
		(1 coverAll:
			{79 to: 79}) ] valueCoveringAll:
		{78 to: 78})
		cover: (66 to: 76)
		declaredAt: (51 to: 61).
	[
	(self coverAll:
		{83 to: 86}) setearCartasEnEmpiezoNuevaMano ] valueCoveringAll:
		{88 to: 117}.! !
!Behavior method!
asignarPuntosDeRonda
	[
	([
	(cartaMano
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) mataA:
		(cartaPie
			cover: (42 to: 49)
			declaredAt: (42 to: 49)) ] valueCoveringAll:
		{35 to: 40}) ifTrue: [
		(turno _ #Mano coverAll:
			{74 to: 78})
			cover: (65 to: 69)
			declaredAt: (65 to: 69).
		(puntosMano _ [
		(puntosMano
			cover: (84 to: 93)
			declaredAt: (84 to: 93)) +
			(1 coverAll:
				{110 to: 110}) ] valueCoveringAll:
			{109 to: 109})
			cover: (98 to: 107)
			declaredAt: (84 to: 93) ]] valueCoveringAll:
		{52 to: 58}.
	[
	([
	(cartaPie
		cover: (116 to: 123)
		declaredAt: (42 to: 49)) mataA:
		(cartaMano
			cover: (132 to: 140)
			declaredAt: (25 to: 33)) ] valueCoveringAll:
		{125 to: 130}) ifTrue: [
		(turno _ #Pie coverAll:
			{165 to: 168})
			cover: (156 to: 160)
			declaredAt: (65 to: 69).
		(puntosPie _ [
		(puntosPie
			cover: (174 to: 182)
			declaredAt: (174 to: 182)) +
			(1 coverAll:
				{198 to: 198}) ] valueCoveringAll:
			{197 to: 197})
			cover: (187 to: 195)
			declaredAt: (174 to: 182) ]] valueCoveringAll:
		{143 to: 149}.
	[
	([
	(cartaMano
		cover: (204 to: 212)
		declaredAt: (25 to: 33)) empardaCon:
		(cartaPie
			cover: (226 to: 233)
			declaredAt: (42 to: 49)) ] valueCoveringAll:
		{214 to: 224}) ifTrue: [
		(turno _ #Mano coverAll:
			{258 to: 262})
			cover: (249 to: 253)
			declaredAt: (65 to: 69).
		(puntosPie _ [
		(puntosPie
			cover: (268 to: 276)
			declaredAt: (174 to: 182)) +
			(1 coverAll:
				{292 to: 292}) ] valueCoveringAll:
			{291 to: 291})
			cover: (281 to: 289)
			declaredAt: (174 to: 182).
		(puntosMano _ [
		(puntosMano
			cover: (298 to: 307)
			declaredAt: (84 to: 93)) +
			(1 coverAll:
				{324 to: 324}) ] valueCoveringAll:
			{323 to: 323})
			cover: (312 to: 321)
			declaredAt: (84 to: 93) ]] valueCoveringAll:
		{236 to: 242}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
empardaCon: cartaParda
	^ [
	([
	(self coverAll:
		{27 to: 30}) valor ] valueCoveringAll:
		{32 to: 36}) =
		([
		(cartaParda
			cover: (40 to: 49)
			declaredAt: (13 to: 22)) valor ] valueCoveringAll:
			{51 to: 55}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
setearCartasEnEmpiezoNuevaMano
	(cartaPie _ nil coverAll:
		{46 to: 48})
		cover: (34 to: 41)
		declaredAt: (34 to: 41).
	(cartaMano _ nil coverAll:
		{64 to: 66})
		cover: (52 to: 60)
		declaredAt: (52 to: 60).! !
!Behavior method!
manoGanoLaPrimerMano
	^ [
	(cartaMano
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) mataA:
		(cartaPie
			cover: (43 to: 50)
			declaredAt: (43 to: 50)) ] valueCoveringAll:
		{36 to: 41}.! !
!Behavior method!
pieGanoLaPrimerMano
	^ [
	(cartaPie
		cover: (24 to: 31)
		declaredAt: (24 to: 31)) mataA:
		(cartaMano
			cover: (41 to: 49)
			declaredAt: (41 to: 49)) ] valueCoveringAll:
		{34 to: 39}.! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:10:48'!
PASSED!
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeOro
	^ [
	(self coverAll:
		{13 to: 16}) paloEs:
		([
		(self coverAll:
			{26 to: 29}) oro ] valueCoveringAll:
			{31 to: 33}) ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
oro
	^ [
	([
	(self coverAll:
		{9 to: 12}) class ] valueCoveringAll:
		{14 to: 18}) oro ] valueCoveringAll:
		{20 to: 22}.! !

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:10:48'!
PASSED!
!Behavior method!
cartasRestantesDeMano
	^ [
	(cartasMano
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) size ] valueCoveringAll:
		{37 to: 40}.! !
!Behavior method!
cartasRestantesDePie
	^ [
	(cartasPie
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) size ] valueCoveringAll:
		{36 to: 39}.! !

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:10:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:10:49'!
PASSED!
!Behavior method!
jugadorNoPuedeTirarCartaQueNoTiene
	^ 'Los jugadores solo pueden tirar cartas que conocen' coverAll:
		{39 to: 90}.! !

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:10:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:10:49'!
PASSED!
!Behavior method!
manoJuegaFueraDeTurno
	[
	(self coverAll:
		{24 to: 27}) error:
		([
		([
		(self coverAll:
			{36 to: 39}) class ] valueCoveringAll:
			{41 to: 45}) jugadorTiraCartaCuandoNoEsSuTurno ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{29 to: 34}.! !

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:10:49'!
PASSED!
!Behavior method!
esAnchoFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esAncho ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49}) or: [
			[
			(self coverAll:
				{57 to: 60}) esDeCopa ] valueCoveringAll:
				{62 to: 69} ]] valueCoveringAll:
			{51 to: 53} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esRey
	^ [
	(self coverAll:
		{11 to: 14}) numeroEs:
		(12 coverAll:
			{26 to: 27}) ] valueCoveringAll:
		{16 to: 24}.! !
!Behavior method!
esCaballo
	^ [
	(self coverAll:
		{15 to: 18}) numeroEs:
		(11 coverAll:
			{30 to: 31}) ] valueCoveringAll:
		{20 to: 28}.! !
!Behavior method!
esSota
	^ [
	(self coverAll:
		{12 to: 15}) numeroEs:
		(10 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{17 to: 25}.! !
!Behavior method!
esSieteFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeCopa ] valueCoveringAll:
			{43 to: 50}) or: [
			[
			(self coverAll:
				{58 to: 61}) esDeBasto ] valueCoveringAll:
				{63 to: 71} ]] valueCoveringAll:
			{52 to: 54} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeBasto
	^ [
	(self coverAll:
		{15 to: 18}) paloEs:
		([
		(self coverAll:
			{28 to: 31}) basto ] valueCoveringAll:
			{33 to: 37}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
basto
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) basto ] valueCoveringAll:
		{22 to: 26}.! !
!Behavior method!
jugadorManoGanoRonda
	^ [
	(controladorDeJuego
		cover: (24 to: 41)
		declaredAt: (24 to: 41)) jugadorManoGanoRonda ] valueCoveringAll:
		{43 to: 62}.! !
!Behavior method!
jugadorManoGanoRonda
	^ [
	(puntosMano
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) >=
		(2 coverAll:
			{38 to: 39}) ] valueCoveringAll:
		{36 to: 37}.! !
!Behavior method!
jugadorPieGanoRonda
	^ [
	(controladorDeJuego
		cover: (24 to: 41)
		declaredAt: (24 to: 41)) jugadorPieGanoRonda ] valueCoveringAll:
		{44 to: 62}.! !
!Behavior method!
jugadorPieGanoRonda
	^ [
	(puntosPie
		cover: (24 to: 32)
		declaredAt: (24 to: 32)) >=
		(2 coverAll:
			{38 to: 38}) ] valueCoveringAll:
		{35 to: 36}.! !

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:10:49'!
PASSED!
!RondaDeTruco methodsFor: 'initialization' stamp: 'SB 7/5/2021 21:12:01' prior: 50866325!
initializeEmpezarRonda: aRepartidorDeCartas
	
	cartasMano := aRepartidorDeCartas dar3Cartas.
	cartasPie := aRepartidorDeCartas dar3CartasMas.
	controladorDeJuego := ControladorDeJuegoDeTruco for: self.! !

!methodRemoval: RondaDeTruco #jugadorManoTiroPrimeraCarta stamp: 'SB 7/5/2021 21:12:14'!
jugadorManoTiroPrimeraCarta
	^ (cartaMano = nil) not.!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:12:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:12:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:12:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:12:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:12:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:12:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:12:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:12:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:12:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:12:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:12:45'!
ERROR!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:12:45'!
ERROR!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:12:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:12:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:12:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:12:45'!
ERROR!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:12:45'!
ERROR!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:12:45'!
ERROR!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:13:33'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:14:13' prior: 50866548!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	controladorDeJuego pieIntentaTirar: aCartaDeTrucoDePie .
	cartasPie remove:aCartaDeTrucoDePie ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].
	cartaPie := aCartaDeTrucoDePie.
	

	! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:14:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:14:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:14:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:14:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:14:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:14:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:14:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:14:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:14:40'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:15:33' prior: 50866571!
jugadorManoTiraCarta: aCartaDeTrucoDeMano 
	controladorDeJuego manoIntentaTirar: aCartaDeTrucoDeMano .
	cartasMano remove:aCartaDeTrucoDeMano ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].
	cartaMano:= aCartaDeTrucoDeMano.
	
	
	! !

----SNAPSHOT----(5 July 2021 21:16:00) CuisUniversity-4532.image priorSource: 17147048!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:17:31' prior: 50868636!
jugadorManoTiraCarta: aCartaDeTrucoDeMano 
	cartasMano remove:aCartaDeTrucoDeMano ifAbsent:[self error: self class jugadorNoPuedeTirarCartaQueNoTiene ].
	cartaMano:= aCartaDeTrucoDeMano.
	controladorDeJuego manoIntentaTirar: aCartaDeTrucoDeMano .
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:24:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:24:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:24:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:24:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:24:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:24:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:24:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:24:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:24:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:24:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:24:22'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:24:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:24:22'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:24:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:24:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:25:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:25:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:25:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:25:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:25:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:25:20'!
FAILURE!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:25:20'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:26:10' prior: 50867096!
test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4) .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:26:13'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:26:36'!
test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:27:21' prior: 50868804!
test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco anchoDeEspada )]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:28:02' prior: 50868823!
test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco anchoDeEspada )]
		raise: Error 
		withMessageText: RondaDeTruco tirarCartasCuandoLaRondaYaTerminoError. 
	
	

	

	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:28:25'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:28:34'!
tirarCartasCuandoLaRondaYaTerminoError
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:28:49' prior: 50868869!
tirarCartasCuandoLaRondaYaTerminoError
	^ 'Espera a una nueva mano para tirar '! !
!ControladorDeJuegoDeTruco methodsFor: 'testing' stamp: 'SB 7/5/2021 21:29:24' prior: 50867598!
manoIntentaTirar: aCartaDeTruco
	
	self assertEsTurnoMano.
	self assertRondaAunEnJuego.
	cartaMano := aCartaDeTruco .
	turno := #Pie.
	self chequearTerminoDeEnfrentamiento.
	! !

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:29:37'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:29:54'!
ERROR!

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:30:14'!
ERROR!
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:30:50'!
assertRondaAunEnJuego
	self shouldBeImplemented.! !
!ControladorDeJuegoDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:32:41' prior: 50868901!
assertRondaAunEnJuego
	(self jugadorManoGanoRonda or: self jugadorPieGanoRonda )ifTrue: [rondaDeTruco quierenTirarCartasCuandoYaterminoLaMano]! !

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:33:24'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:34:09' prior: 50868844!
test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco anchoDeEspada )]
		raise: Error 
		withMessageText: RondaDeTruco tirarCartasCuandoLaRondaYaTerminoError. 
	
	

	

	
	
	
	
	! !
!ControladorDeJuegoDeTruco methodsFor: 'testing' stamp: 'SB 7/5/2021 21:34:59' prior: 50868881!
manoIntentaTirar: aCartaDeTruco
	
	self assertRondaAunEnJuego.
	self assertEsTurnoMano.
	cartaMano := aCartaDeTruco .
	turno := #Pie.
	self chequearTerminoDeEnfrentamiento.
	! !
!ControladorDeJuegoDeTruco methodsFor: 'testing' stamp: 'SB 7/5/2021 21:35:07' prior: 50867583!
pieIntentaTirar: aCartaDeTruco

	self assertRondaAunEnJuego.
	self assertEsTurnoPie.
	cartaPie := aCartaDeTruco.
	turno := #Mano.
	self chequearTerminoDeEnfrentamiento! !
!RondaDeTruco methodsFor: 'nil' stamp: 'SB 7/5/2021 21:35:36'!
quierenTirarCartasCuandoYaterminoLaMano! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:36:08' prior: 50868957!
quierenTirarCartasCuandoYaterminoLaMano
	^ self error: self class tirarCartasCuandoLaRondaYaTerminoError! !

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:36:30'!
PASSED!
!Behavior method!
empezarRondaConRepartidor: aRepartidorDeCartas
	^ [
	([
	(self coverAll:
		{52 to: 55}) new ] valueCoveringAll:
		{57 to: 59}) initializeEmpezarRonda:
		(aRepartidorDeCartas
			cover: (85 to: 103)
			declaredAt: (28 to: 46)) ] valueCoveringAll:
		{61 to: 83}.! !
!Behavior method!
initializeEmpezarRonda: aRepartidorDeCartas
	(cartasMano _ [
	(aRepartidorDeCartas
		cover: (62 to: 80)
		declaredAt: (25 to: 43)) dar3Cartas ] valueCoveringAll:
		{82 to: 91})
		cover: (48 to: 57)
		declaredAt: (48 to: 57).
	(cartasPie _ [
	(aRepartidorDeCartas
		cover: (108 to: 126)
		declaredAt: (25 to: 43)) dar3CartasMas ] valueCoveringAll:
		{128 to: 140})
		cover: (95 to: 103)
		declaredAt: (95 to: 103).
	(controladorDeJuego _ [
	(ControladorDeJuegoDeTruco
		cover: (166 to: 190)
		declaredAt: (166 to: 190)) for:
		(self coverAll:
			{197 to: 200}) ] valueCoveringAll:
		{192 to: 195})
		cover: (144 to: 161)
		declaredAt: (144 to: 161).! !
!Behavior method!
sieteDeOro
	^ [
	(self coverAll:
		{16 to: 19}) oroCon:
		(7 coverAll:
			{28 to: 29}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
oroCon: unNumero
	^ [
	(self coverAll:
		{21 to: 24})
		palo:
			([
			(self coverAll:
				{32 to: 35}) oro ] valueCoveringAll:
				{37 to: 39})
		numero:
			(unNumero
				cover: (49 to: 56)
				declaredAt: (9 to: 16)) ] valueCoveringAll:
		{26 to: 30. 41 to: 47}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertNúmeroEsVálido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsVálido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertNúmeroEsVálido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsVálido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
anchoDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(1 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
espadaCon: unNumero
	^ [
	(self coverAll:
		{24 to: 27})
		palo:
			([
			(self coverAll:
				{35 to: 38}) espada ] valueCoveringAll:
				{40 to: 45})
		numero:
			(unNumero
				cover: (55 to: 62)
				declaredAt: (12 to: 19)) ] valueCoveringAll:
		{29 to: 33. 47 to: 53}.! !
!Behavior method!
hash
	^ [
	([
	(palo
		cover: (10 to: 13)
		declaredAt: (10 to: 13)) hash ] valueCoveringAll:
		{15 to: 18}) bitXor:
		([
		(numero
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) hash ] valueCoveringAll:
			{35 to: 38}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
sieteDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(7 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
anchoDeBasto
	^ [
	(self coverAll:
		{18 to: 21}) bastoCon:
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{23 to: 31}.! !
!Behavior method!
bastoCon: unNumero
	^ [
	(self coverAll:
		{23 to: 26})
		palo:
			([
			(self coverAll:
				{34 to: 37}) basto ] valueCoveringAll:
				{39 to: 43})
		numero:
			(unNumero
				cover: (53 to: 60)
				declaredAt: (11 to: 18)) ] valueCoveringAll:
		{28 to: 32. 45 to: 51}.! !
!Behavior method!
for: aRondaDeTruco
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeFor:
		(aRondaDeTruco
			cover: (49 to: 61)
			declaredAt: (6 to: 18)) ] valueCoveringAll:
		{34 to: 47}.! !
!Behavior method!
initializeFor: aRondaDeTruco
	(rondaDeTruco _ aRondaDeTruco
		cover: (50 to: 62)
		declaredAt: (16 to: 28))
		cover: (34 to: 45)
		declaredAt: (34 to: 45).
	(numeroRonda _ 1 coverAll:
		{82 to: 82})
		cover: (66 to: 76)
		declaredAt: (66 to: 76).
	(turno _ #Mano coverAll:
		{95 to: 99})
		cover: (86 to: 90)
		declaredAt: (86 to: 90).
	(puntosMano _ 0 coverAll:
		{117 to: 117})
		cover: (103 to: 112)
		declaredAt: (103 to: 112).
	(puntosPie _ 0 coverAll:
		{134 to: 134})
		cover: (121 to: 129)
		declaredAt: (121 to: 129).! !
!Behavior method!
jugadorTiraCartaCuandoNoEsSuTurno
	^ ' Espera tu turno' coverAll:
		{38 to: 55}.! !
!Behavior method!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	[
	(controladorDeJuego
		cover: (42 to: 59)
		declaredAt: (42 to: 59)) pieIntentaTirar:
		(aCartaDeTrucoDePie
			cover: (78 to: 95)
			declaredAt: (22 to: 39)) ] valueCoveringAll:
		{61 to: 76}.
	[
	(cartasPie
		cover: (100 to: 108)
		declaredAt: (100 to: 108))
		remove:
			(aCartaDeTrucoDePie
				cover: (117 to: 134)
				declaredAt: (22 to: 39))
		ifAbsent: [
			[
			(self coverAll:
				{146 to: 149}) error:
				([
				([
				(self coverAll:
					{158 to: 161}) class ] valueCoveringAll:
					{163 to: 167}) jugadorNoPuedeTirarCartaQueNoTiene ] valueCoveringAll:
					{169 to: 202}) ] valueCoveringAll:
				{151 to: 156} ]] valueCoveringAll:
		{110 to: 116. 136 to: 144}.
	(cartaPie _ aCartaDeTrucoDePie
		cover: (220 to: 237)
		declaredAt: (22 to: 39))
		cover: (208 to: 215)
		declaredAt: (208 to: 215).! !
!Behavior method!
pieIntentaTirar: aCartaDeTruco
	[
	(self coverAll:
		{34 to: 37}) assertRondaAunEnJuego ] valueCoveringAll:
		{39 to: 59}.
	[
	(self coverAll:
		{63 to: 66}) assertEsTurnoPie ] valueCoveringAll:
		{68 to: 83}.
	(cartaPie _ aCartaDeTruco
		cover: (99 to: 111)
		declaredAt: (18 to: 30))
		cover: (87 to: 94)
		declaredAt: (87 to: 94).
	(turno _ #Mano coverAll:
		{124 to: 128})
		cover: (115 to: 119)
		declaredAt: (115 to: 119).
	[
	(self coverAll:
		{132 to: 135}) chequearTerminoDeEnfrentamiento ] valueCoveringAll:
		{137 to: 167}.! !
!Behavior method!
assertRondaAunEnJuego
	[
	([
	([
	(self coverAll:
		{25 to: 28}) jugadorManoGanoRonda ] valueCoveringAll:
		{30 to: 49}) or:
		([
		(self coverAll:
			{55 to: 58}) jugadorPieGanoRonda ] valueCoveringAll:
			{60 to: 78}) ] valueCoveringAll:
		{51 to: 53}) ifTrue: [
		[
		(rondaDeTruco
			cover: (90 to: 101)
			declaredAt: (90 to: 101)) quierenTirarCartasCuandoYaterminoLaMano ] valueCoveringAll:
			{103 to: 141} ]] valueCoveringAll:
		{81 to: 87}.! !
!Behavior method!
jugadorManoGanoRonda
	^ [
	(puntosMano
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) >=
		(2 coverAll:
			{38 to: 39}) ] valueCoveringAll:
		{36 to: 37}.! !
!Behavior method!
jugadorPieGanoRonda
	^ [
	(puntosPie
		cover: (24 to: 32)
		declaredAt: (24 to: 32)) >=
		(2 coverAll:
			{38 to: 38}) ] valueCoveringAll:
		{35 to: 36}.! !
!Behavior method!
assertEsTurnoPie
	^ [
	([
	(turno
		cover: (22 to: 26)
		declaredAt: (22 to: 26)) =
		(#Pie coverAll:
			{30 to: 33}) ] valueCoveringAll:
		{28 to: 28}) ifFalse: [
		[
		(rondaDeTruco
			cover: (46 to: 57)
			declaredAt: (46 to: 57)) pieJuegaFueraDeTurno ] valueCoveringAll:
			{59 to: 78} ]] valueCoveringAll:
		{35 to: 42}.! !
!Behavior method!
pieJuegaFueraDeTurno
	[
	(self coverAll:
		{23 to: 26}) error:
		([
		([
		(self coverAll:
			{35 to: 38}) class ] valueCoveringAll:
			{40 to: 44}) jugadorTiraCartaCuandoNoEsSuTurno ] valueCoveringAll:
			{46 to: 78}) ] valueCoveringAll:
		{28 to: 33}.! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:37:18'!
PASSED!
!Behavior method!
jugadorManoTiraCarta: aCartaDeTrucoDeMano
	[
	(cartasMano
		cover: (45 to: 54)
		declaredAt: (45 to: 54))
		remove:
			(aCartaDeTrucoDeMano
				cover: (63 to: 81)
				declaredAt: (23 to: 41))
		ifAbsent: [
			[
			(self coverAll:
				{93 to: 96}) error:
				([
				([
				(self coverAll:
					{105 to: 108}) class ] valueCoveringAll:
					{110 to: 114}) jugadorNoPuedeTirarCartaQueNoTiene ] valueCoveringAll:
					{116 to: 149}) ] valueCoveringAll:
				{98 to: 103} ]] valueCoveringAll:
		{56 to: 62. 83 to: 91}.
	(cartaMano _ aCartaDeTrucoDeMano
		cover: (167 to: 185)
		declaredAt: (23 to: 41))
		cover: (155 to: 163)
		declaredAt: (155 to: 163).
	[
	(controladorDeJuego
		cover: (189 to: 206)
		declaredAt: (189 to: 206)) manoIntentaTirar:
		(aCartaDeTrucoDeMano
			cover: (226 to: 244)
			declaredAt: (23 to: 41)) ] valueCoveringAll:
		{208 to: 224}.! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
manoIntentaTirar: aCartaDeTruco
	[
	(self coverAll:
		{36 to: 39}) assertRondaAunEnJuego ] valueCoveringAll:
		{41 to: 61}.
	[
	(self coverAll:
		{65 to: 68}) assertEsTurnoMano ] valueCoveringAll:
		{70 to: 86}.
	(cartaMano _ aCartaDeTruco
		cover: (103 to: 115)
		declaredAt: (19 to: 31))
		cover: (90 to: 98)
		declaredAt: (90 to: 98).
	(turno _ #Pie coverAll:
		{129 to: 132})
		cover: (120 to: 124)
		declaredAt: (120 to: 124).
	[
	(self coverAll:
		{136 to: 139}) chequearTerminoDeEnfrentamiento ] valueCoveringAll:
		{141 to: 171}.! !
!Behavior method!
assertEsTurnoMano
	^ [
	([
	(turno
		cover: (23 to: 27)
		declaredAt: (23 to: 27)) =
		(#Mano coverAll:
			{31 to: 35}) ] valueCoveringAll:
		{29 to: 29}) ifFalse: [
		[
		(rondaDeTruco
			cover: (48 to: 59)
			declaredAt: (48 to: 59)) manoJuegaFueraDeTurno ] valueCoveringAll:
			{61 to: 81} ]] valueCoveringAll:
		{37 to: 44}.! !
!Behavior method!
chequearTerminoDeEnfrentamiento
	[
	([
	([
	([
	(cartaMano
		cover: (36 to: 44)
		declaredAt: (36 to: 44)) isNil ] valueCoveringAll:
		{46 to: 50}) not ] valueCoveringAll:
		{52 to: 54}) and:
		([
		([
		(cartaPie
			cover: (63 to: 70)
			declaredAt: (63 to: 70)) isNil ] valueCoveringAll:
			{72 to: 76}) not ] valueCoveringAll:
			{78 to: 80}) ] valueCoveringAll:
		{57 to: 60}) ifTrue: [
		[
		(self coverAll:
			{95 to: 98}) terminarGanadorRonda ] valueCoveringAll:
			{100 to: 119} ]] valueCoveringAll:
		{85 to: 91}.! !
!Behavior method!
terminarGanadorRonda
	[
	(self coverAll:
		{23 to: 26}) asignarPuntosDeRonda ] valueCoveringAll:
		{28 to: 47}.
	(numeroRonda _ [
	(numeroRonda
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) +
		(1 coverAll:
			{79 to: 79}) ] valueCoveringAll:
		{78 to: 78})
		cover: (66 to: 76)
		declaredAt: (51 to: 61).
	[
	(self coverAll:
		{83 to: 86}) setearCartasEnEmpiezoNuevaMano ] valueCoveringAll:
		{88 to: 117}.! !
!Behavior method!
asignarPuntosDeRonda
	[
	([
	(cartaMano
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) mataA:
		(cartaPie
			cover: (42 to: 49)
			declaredAt: (42 to: 49)) ] valueCoveringAll:
		{35 to: 40}) ifTrue: [
		(turno _ #Mano coverAll:
			{74 to: 78})
			cover: (65 to: 69)
			declaredAt: (65 to: 69).
		(puntosMano _ [
		(puntosMano
			cover: (84 to: 93)
			declaredAt: (84 to: 93)) +
			(1 coverAll:
				{110 to: 110}) ] valueCoveringAll:
			{109 to: 109})
			cover: (98 to: 107)
			declaredAt: (84 to: 93) ]] valueCoveringAll:
		{52 to: 58}.
	[
	([
	(cartaPie
		cover: (116 to: 123)
		declaredAt: (42 to: 49)) mataA:
		(cartaMano
			cover: (132 to: 140)
			declaredAt: (25 to: 33)) ] valueCoveringAll:
		{125 to: 130}) ifTrue: [
		(turno _ #Pie coverAll:
			{165 to: 168})
			cover: (156 to: 160)
			declaredAt: (65 to: 69).
		(puntosPie _ [
		(puntosPie
			cover: (174 to: 182)
			declaredAt: (174 to: 182)) +
			(1 coverAll:
				{198 to: 198}) ] valueCoveringAll:
			{197 to: 197})
			cover: (187 to: 195)
			declaredAt: (174 to: 182) ]] valueCoveringAll:
		{143 to: 149}.
	[
	([
	(cartaMano
		cover: (204 to: 212)
		declaredAt: (25 to: 33)) empardaCon:
		(cartaPie
			cover: (226 to: 233)
			declaredAt: (42 to: 49)) ] valueCoveringAll:
		{214 to: 224}) ifTrue: [
		(turno _ #Mano coverAll:
			{258 to: 262})
			cover: (249 to: 253)
			declaredAt: (65 to: 69).
		(puntosPie _ [
		(puntosPie
			cover: (268 to: 276)
			declaredAt: (174 to: 182)) +
			(1 coverAll:
				{292 to: 292}) ] valueCoveringAll:
			{291 to: 291})
			cover: (281 to: 289)
			declaredAt: (174 to: 182).
		(puntosMano _ [
		(puntosMano
			cover: (298 to: 307)
			declaredAt: (84 to: 93)) +
			(1 coverAll:
				{324 to: 324}) ] valueCoveringAll:
			{323 to: 323})
			cover: (312 to: 321)
			declaredAt: (84 to: 93) ]] valueCoveringAll:
		{236 to: 242}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
empardaCon: cartaParda
	^ [
	([
	(self coverAll:
		{27 to: 30}) valor ] valueCoveringAll:
		{32 to: 36}) =
		([
		(cartaParda
			cover: (40 to: 49)
			declaredAt: (13 to: 22)) valor ] valueCoveringAll:
			{51 to: 55}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
setearCartasEnEmpiezoNuevaMano
	(cartaPie _ nil coverAll:
		{46 to: 48})
		cover: (34 to: 41)
		declaredAt: (34 to: 41).
	(cartaMano _ nil coverAll:
		{64 to: 66})
		cover: (52 to: 60)
		declaredAt: (52 to: 60).! !
!Behavior method!
manoGanoLaPrimerMano
	^ [
	(cartaMano
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) mataA:
		(cartaPie
			cover: (43 to: 50)
			declaredAt: (43 to: 50)) ] valueCoveringAll:
		{36 to: 41}.! !
!Behavior method!
pieGanoLaPrimerMano
	^ [
	(cartaPie
		cover: (24 to: 31)
		declaredAt: (24 to: 31)) mataA:
		(cartaMano
			cover: (41 to: 49)
			declaredAt: (41 to: 49)) ] valueCoveringAll:
		{34 to: 39}.! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:37:19'!
PASSED!
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeOro
	^ [
	(self coverAll:
		{13 to: 16}) paloEs:
		([
		(self coverAll:
			{26 to: 29}) oro ] valueCoveringAll:
			{31 to: 33}) ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
oro
	^ [
	([
	(self coverAll:
		{9 to: 12}) class ] valueCoveringAll:
		{14 to: 18}) oro ] valueCoveringAll:
		{20 to: 22}.! !

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:37:19'!
PASSED!
!Behavior method!
cartasRestantesDeMano
	^ [
	(cartasMano
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) size ] valueCoveringAll:
		{37 to: 40}.! !
!Behavior method!
cartasRestantesDePie
	^ [
	(cartasPie
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) size ] valueCoveringAll:
		{36 to: 39}.! !

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:37:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:37:19'!
PASSED!
!Behavior method!
jugadorNoPuedeTirarCartaQueNoTiene
	^ 'Los jugadores solo pueden tirar cartas que conocen' coverAll:
		{39 to: 90}.! !

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:37:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:37:19'!
PASSED!
!Behavior method!
manoJuegaFueraDeTurno
	[
	(self coverAll:
		{24 to: 27}) error:
		([
		([
		(self coverAll:
			{36 to: 39}) class ] valueCoveringAll:
			{41 to: 45}) jugadorTiraCartaCuandoNoEsSuTurno ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{29 to: 34}.! !

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:37:19'!
PASSED!
!Behavior method!
esAnchoFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esAncho ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49}) or: [
			[
			(self coverAll:
				{57 to: 60}) esDeCopa ] valueCoveringAll:
				{62 to: 69} ]] valueCoveringAll:
			{51 to: 53} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esRey
	^ [
	(self coverAll:
		{11 to: 14}) numeroEs:
		(12 coverAll:
			{26 to: 27}) ] valueCoveringAll:
		{16 to: 24}.! !
!Behavior method!
esCaballo
	^ [
	(self coverAll:
		{15 to: 18}) numeroEs:
		(11 coverAll:
			{30 to: 31}) ] valueCoveringAll:
		{20 to: 28}.! !
!Behavior method!
esSota
	^ [
	(self coverAll:
		{12 to: 15}) numeroEs:
		(10 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{17 to: 25}.! !
!Behavior method!
esSieteFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeCopa ] valueCoveringAll:
			{43 to: 50}) or: [
			[
			(self coverAll:
				{58 to: 61}) esDeBasto ] valueCoveringAll:
				{63 to: 71} ]] valueCoveringAll:
			{52 to: 54} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeBasto
	^ [
	(self coverAll:
		{15 to: 18}) paloEs:
		([
		(self coverAll:
			{28 to: 31}) basto ] valueCoveringAll:
			{33 to: 37}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
basto
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) basto ] valueCoveringAll:
		{22 to: 26}.! !
!Behavior method!
jugadorManoGanoRonda
	^ [
	(controladorDeJuego
		cover: (24 to: 41)
		declaredAt: (24 to: 41)) jugadorManoGanoRonda ] valueCoveringAll:
		{43 to: 62}.! !
!Behavior method!
jugadorPieGanoRonda
	^ [
	(controladorDeJuego
		cover: (24 to: 41)
		declaredAt: (24 to: 41)) jugadorPieGanoRonda ] valueCoveringAll:
		{44 to: 62}.! !

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:37:19'!
PASSED!
!Behavior method!
tirarCartasCuandoLaRondaYaTerminoError
	^ 'Espera a una nueva mano para tirar ' coverAll:
		{43 to: 79}.! !
!Behavior method!
quierenTirarCartasCuandoYaterminoLaMano
	^ [
	(self coverAll:
		{44 to: 47}) error:
		([
		([
		(self coverAll:
			{56 to: 59}) class ] valueCoveringAll:
			{61 to: 65}) tirarCartasCuandoLaRondaYaTerminoError ] valueCoveringAll:
			{67 to: 104}) ] valueCoveringAll:
		{49 to: 54}.! !

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:37:20'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:38:33'!
test11RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:38:33'!
test10RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:38:43'!
test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test11RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:38:43'!
test11RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:38:56'!
test10RondaDeTrucoNoPuedeContinuarSiYaHayGanador
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco anchoDeEspada )]
		raise: Error 
		withMessageText: RondaDeTruco tirarCartasCuandoLaRondaYaTerminoError. 
	
	

	

	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:38:57'!
test11RondaDeTrucoNoPuedeContinuarSiYaHayGanador
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco anchoDeEspada )]
		raise: Error 
		withMessageText: RondaDeTruco tirarCartasCuandoLaRondaYaTerminoError. 
	
	

	

	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:39:06'!
test11RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:39:06'!
test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:39:26'!
test21RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco oroCon:4 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'test - mockRepartidor' stamp: 'SB 7/5/2021 21:40:11' prior: 50864326!
dar3Cartas
	^ Set with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco anchoDeEspada) with: (CartaDeTruco bastoCon:5)! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:40:15'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test21RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda stamp: 'SB 7/5/2021 21:40:15'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:40:33' prior: 50869837!
test10RondaDeTrucoNoPuedeContinuarSiYaHayGanador
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco bastoCon:5 ).
	
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco anchoDeEspada )]
		raise: Error 
		withMessageText: RondaDeTruco tirarCartasCuandoLaRondaYaTerminoError. 
	
	

	

	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:40:36'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:40:46' prior: 50869880!
test11RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco bastoCon:5 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:40:54' prior: 50869919!
test21RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco bastoCon:5 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:41:04' prior: 50868782!
test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro  .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	self 
		should: [ rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco bastoCon:5) .]
		raise: Error 
		withMessageText: RondaDeTruco jugadorTiraCartaCuandoNoEsSuTurno 
	
	
	

	

	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:41:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:41:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:41:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:41:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:41:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:41:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:41:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:41:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:41:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:41:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test21RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda stamp: 'SB 7/5/2021 21:41:08'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:41:41'!
test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco bastoCon:5 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test21RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda stamp: 'SB 7/5/2021 21:41:41'!
test21RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta: CartaDeTruco sieteDeOro .
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco sieteDeEspada.
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco bastoCon:5 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:42:05' prior: 50870115!
test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta:( CartaDeTruco bastoCon:5) .
	rondaDeTruco jugadorPieTiraCarta: (CartaDeTruco oroCon:5).
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco bastoCon:5 ).
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:42:22' prior: 50870154!
test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta:( CartaDeTruco bastoCon:5) .
	rondaDeTruco jugadorPieTiraCarta: (CartaDeTruco oroCon:5).
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco bastoCon:5 ).
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:42:40' prior: 50870174!
test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta:( CartaDeTruco bastoCon:5) .
	rondaDeTruco jugadorPieTiraCarta: (CartaDeTruco oroCon:5).
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco sieteDeEspada ).
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'SB 7/5/2021 21:42:58' prior: 50870194!
test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda
	
	| rondaDeTruco |
	rondaDeTruco := RondaDeTruco empezarRondaConRepartidor: self.
	rondaDeTruco jugadorManoTiraCarta:( CartaDeTruco bastoCon:5) .
	rondaDeTruco jugadorPieTiraCarta: (CartaDeTruco oroCon:5).
	rondaDeTruco jugadorManoTiraCarta: (CartaDeTruco sieteDeOro ).
	rondaDeTruco jugadorPieTiraCarta: CartaDeTruco anchoDeBasto .
	
	self deny: rondaDeTruco jugadorManoGanoRonda.
	self assert: rondaDeTruco jugadorPieGanoRonda.
	
	

	

	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda stamp: 'SB 7/5/2021 21:43:02'!
PASSED!
!Behavior method!
empezarRondaConRepartidor: aRepartidorDeCartas
	^ [
	([
	(self coverAll:
		{52 to: 55}) new ] valueCoveringAll:
		{57 to: 59}) initializeEmpezarRonda:
		(aRepartidorDeCartas
			cover: (85 to: 103)
			declaredAt: (28 to: 46)) ] valueCoveringAll:
		{61 to: 83}.! !
!Behavior method!
initializeEmpezarRonda: aRepartidorDeCartas
	(cartasMano _ [
	(aRepartidorDeCartas
		cover: (62 to: 80)
		declaredAt: (25 to: 43)) dar3Cartas ] valueCoveringAll:
		{82 to: 91})
		cover: (48 to: 57)
		declaredAt: (48 to: 57).
	(cartasPie _ [
	(aRepartidorDeCartas
		cover: (108 to: 126)
		declaredAt: (25 to: 43)) dar3CartasMas ] valueCoveringAll:
		{128 to: 140})
		cover: (95 to: 103)
		declaredAt: (95 to: 103).
	(controladorDeJuego _ [
	(ControladorDeJuegoDeTruco
		cover: (166 to: 190)
		declaredAt: (166 to: 190)) for:
		(self coverAll:
			{197 to: 200}) ] valueCoveringAll:
		{192 to: 195})
		cover: (144 to: 161)
		declaredAt: (144 to: 161).! !
!Behavior method!
sieteDeOro
	^ [
	(self coverAll:
		{16 to: 19}) oroCon:
		(7 coverAll:
			{28 to: 29}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
oroCon: unNumero
	^ [
	(self coverAll:
		{21 to: 24})
		palo:
			([
			(self coverAll:
				{32 to: 35}) oro ] valueCoveringAll:
				{37 to: 39})
		numero:
			(unNumero
				cover: (49 to: 56)
				declaredAt: (9 to: 16)) ] valueCoveringAll:
		{26 to: 30. 41 to: 47}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertNúmeroEsVálido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsVálido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertNúmeroEsVálido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsVálido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
anchoDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(1 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
espadaCon: unNumero
	^ [
	(self coverAll:
		{24 to: 27})
		palo:
			([
			(self coverAll:
				{35 to: 38}) espada ] valueCoveringAll:
				{40 to: 45})
		numero:
			(unNumero
				cover: (55 to: 62)
				declaredAt: (12 to: 19)) ] valueCoveringAll:
		{29 to: 33. 47 to: 53}.! !
!Behavior method!
bastoCon: unNumero
	^ [
	(self coverAll:
		{23 to: 26})
		palo:
			([
			(self coverAll:
				{34 to: 37}) basto ] valueCoveringAll:
				{39 to: 43})
		numero:
			(unNumero
				cover: (53 to: 60)
				declaredAt: (11 to: 18)) ] valueCoveringAll:
		{28 to: 32. 45 to: 51}.! !
!Behavior method!
hash
	^ [
	([
	(palo
		cover: (10 to: 13)
		declaredAt: (10 to: 13)) hash ] valueCoveringAll:
		{15 to: 18}) bitXor:
		([
		(numero
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) hash ] valueCoveringAll:
			{35 to: 38}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
sieteDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(7 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
anchoDeBasto
	^ [
	(self coverAll:
		{18 to: 21}) bastoCon:
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{23 to: 31}.! !
!Behavior method!
for: aRondaDeTruco
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeFor:
		(aRondaDeTruco
			cover: (49 to: 61)
			declaredAt: (6 to: 18)) ] valueCoveringAll:
		{34 to: 47}.! !
!Behavior method!
initializeFor: aRondaDeTruco
	(rondaDeTruco _ aRondaDeTruco
		cover: (50 to: 62)
		declaredAt: (16 to: 28))
		cover: (34 to: 45)
		declaredAt: (34 to: 45).
	(numeroRonda _ 1 coverAll:
		{82 to: 82})
		cover: (66 to: 76)
		declaredAt: (66 to: 76).
	(turno _ #Mano coverAll:
		{95 to: 99})
		cover: (86 to: 90)
		declaredAt: (86 to: 90).
	(puntosMano _ 0 coverAll:
		{117 to: 117})
		cover: (103 to: 112)
		declaredAt: (103 to: 112).
	(puntosPie _ 0 coverAll:
		{134 to: 134})
		cover: (121 to: 129)
		declaredAt: (121 to: 129).! !
!Behavior method!
jugadorTiraCartaCuandoNoEsSuTurno
	^ ' Espera tu turno' coverAll:
		{38 to: 55}.! !
!Behavior method!
jugadorPieTiraCarta: aCartaDeTrucoDePie
	[
	(controladorDeJuego
		cover: (42 to: 59)
		declaredAt: (42 to: 59)) pieIntentaTirar:
		(aCartaDeTrucoDePie
			cover: (78 to: 95)
			declaredAt: (22 to: 39)) ] valueCoveringAll:
		{61 to: 76}.
	[
	(cartasPie
		cover: (100 to: 108)
		declaredAt: (100 to: 108))
		remove:
			(aCartaDeTrucoDePie
				cover: (117 to: 134)
				declaredAt: (22 to: 39))
		ifAbsent: [
			[
			(self coverAll:
				{146 to: 149}) error:
				([
				([
				(self coverAll:
					{158 to: 161}) class ] valueCoveringAll:
					{163 to: 167}) jugadorNoPuedeTirarCartaQueNoTiene ] valueCoveringAll:
					{169 to: 202}) ] valueCoveringAll:
				{151 to: 156} ]] valueCoveringAll:
		{110 to: 116. 136 to: 144}.
	(cartaPie _ aCartaDeTrucoDePie
		cover: (220 to: 237)
		declaredAt: (22 to: 39))
		cover: (208 to: 215)
		declaredAt: (208 to: 215).! !
!Behavior method!
pieIntentaTirar: aCartaDeTruco
	[
	(self coverAll:
		{34 to: 37}) assertRondaAunEnJuego ] valueCoveringAll:
		{39 to: 59}.
	[
	(self coverAll:
		{63 to: 66}) assertEsTurnoPie ] valueCoveringAll:
		{68 to: 83}.
	(cartaPie _ aCartaDeTruco
		cover: (99 to: 111)
		declaredAt: (18 to: 30))
		cover: (87 to: 94)
		declaredAt: (87 to: 94).
	(turno _ #Mano coverAll:
		{124 to: 128})
		cover: (115 to: 119)
		declaredAt: (115 to: 119).
	[
	(self coverAll:
		{132 to: 135}) chequearTerminoDeEnfrentamiento ] valueCoveringAll:
		{137 to: 167}.! !
!Behavior method!
assertRondaAunEnJuego
	[
	([
	([
	(self coverAll:
		{25 to: 28}) jugadorManoGanoRonda ] valueCoveringAll:
		{30 to: 49}) or:
		([
		(self coverAll:
			{55 to: 58}) jugadorPieGanoRonda ] valueCoveringAll:
			{60 to: 78}) ] valueCoveringAll:
		{51 to: 53}) ifTrue: [
		[
		(rondaDeTruco
			cover: (90 to: 101)
			declaredAt: (90 to: 101)) quierenTirarCartasCuandoYaterminoLaMano ] valueCoveringAll:
			{103 to: 141} ]] valueCoveringAll:
		{81 to: 87}.! !
!Behavior method!
jugadorManoGanoRonda
	^ [
	(puntosMano
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) >=
		(2 coverAll:
			{38 to: 39}) ] valueCoveringAll:
		{36 to: 37}.! !
!Behavior method!
jugadorPieGanoRonda
	^ [
	(puntosPie
		cover: (24 to: 32)
		declaredAt: (24 to: 32)) >=
		(2 coverAll:
			{38 to: 38}) ] valueCoveringAll:
		{35 to: 36}.! !
!Behavior method!
assertEsTurnoPie
	^ [
	([
	(turno
		cover: (22 to: 26)
		declaredAt: (22 to: 26)) =
		(#Pie coverAll:
			{30 to: 33}) ] valueCoveringAll:
		{28 to: 28}) ifFalse: [
		[
		(rondaDeTruco
			cover: (46 to: 57)
			declaredAt: (46 to: 57)) pieJuegaFueraDeTurno ] valueCoveringAll:
			{59 to: 78} ]] valueCoveringAll:
		{35 to: 42}.! !
!Behavior method!
pieJuegaFueraDeTurno
	[
	(self coverAll:
		{23 to: 26}) error:
		([
		([
		(self coverAll:
			{35 to: 38}) class ] valueCoveringAll:
			{40 to: 44}) jugadorTiraCartaCuandoNoEsSuTurno ] valueCoveringAll:
			{46 to: 78}) ] valueCoveringAll:
		{28 to: 33}.! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:43:14'!
PASSED!
!Behavior method!
jugadorManoTiraCarta: aCartaDeTrucoDeMano
	[
	(cartasMano
		cover: (45 to: 54)
		declaredAt: (45 to: 54))
		remove:
			(aCartaDeTrucoDeMano
				cover: (63 to: 81)
				declaredAt: (23 to: 41))
		ifAbsent: [
			[
			(self coverAll:
				{93 to: 96}) error:
				([
				([
				(self coverAll:
					{105 to: 108}) class ] valueCoveringAll:
					{110 to: 114}) jugadorNoPuedeTirarCartaQueNoTiene ] valueCoveringAll:
					{116 to: 149}) ] valueCoveringAll:
				{98 to: 103} ]] valueCoveringAll:
		{56 to: 62. 83 to: 91}.
	(cartaMano _ aCartaDeTrucoDeMano
		cover: (167 to: 185)
		declaredAt: (23 to: 41))
		cover: (155 to: 163)
		declaredAt: (155 to: 163).
	[
	(controladorDeJuego
		cover: (189 to: 206)
		declaredAt: (189 to: 206)) manoIntentaTirar:
		(aCartaDeTrucoDeMano
			cover: (226 to: 244)
			declaredAt: (23 to: 41)) ] valueCoveringAll:
		{208 to: 224}.! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
manoIntentaTirar: aCartaDeTruco
	[
	(self coverAll:
		{36 to: 39}) assertRondaAunEnJuego ] valueCoveringAll:
		{41 to: 61}.
	[
	(self coverAll:
		{65 to: 68}) assertEsTurnoMano ] valueCoveringAll:
		{70 to: 86}.
	(cartaMano _ aCartaDeTruco
		cover: (103 to: 115)
		declaredAt: (19 to: 31))
		cover: (90 to: 98)
		declaredAt: (90 to: 98).
	(turno _ #Pie coverAll:
		{129 to: 132})
		cover: (120 to: 124)
		declaredAt: (120 to: 124).
	[
	(self coverAll:
		{136 to: 139}) chequearTerminoDeEnfrentamiento ] valueCoveringAll:
		{141 to: 171}.! !
!Behavior method!
assertEsTurnoMano
	^ [
	([
	(turno
		cover: (23 to: 27)
		declaredAt: (23 to: 27)) =
		(#Mano coverAll:
			{31 to: 35}) ] valueCoveringAll:
		{29 to: 29}) ifFalse: [
		[
		(rondaDeTruco
			cover: (48 to: 59)
			declaredAt: (48 to: 59)) manoJuegaFueraDeTurno ] valueCoveringAll:
			{61 to: 81} ]] valueCoveringAll:
		{37 to: 44}.! !
!Behavior method!
chequearTerminoDeEnfrentamiento
	[
	([
	([
	([
	(cartaMano
		cover: (36 to: 44)
		declaredAt: (36 to: 44)) isNil ] valueCoveringAll:
		{46 to: 50}) not ] valueCoveringAll:
		{52 to: 54}) and:
		([
		([
		(cartaPie
			cover: (63 to: 70)
			declaredAt: (63 to: 70)) isNil ] valueCoveringAll:
			{72 to: 76}) not ] valueCoveringAll:
			{78 to: 80}) ] valueCoveringAll:
		{57 to: 60}) ifTrue: [
		[
		(self coverAll:
			{95 to: 98}) terminarGanadorRonda ] valueCoveringAll:
			{100 to: 119} ]] valueCoveringAll:
		{85 to: 91}.! !
!Behavior method!
terminarGanadorRonda
	[
	(self coverAll:
		{23 to: 26}) asignarPuntosDeRonda ] valueCoveringAll:
		{28 to: 47}.
	(numeroRonda _ [
	(numeroRonda
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) +
		(1 coverAll:
			{79 to: 79}) ] valueCoveringAll:
		{78 to: 78})
		cover: (66 to: 76)
		declaredAt: (51 to: 61).
	[
	(self coverAll:
		{83 to: 86}) setearCartasEnEmpiezoNuevaMano ] valueCoveringAll:
		{88 to: 117}.! !
!Behavior method!
asignarPuntosDeRonda
	[
	([
	(cartaMano
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) mataA:
		(cartaPie
			cover: (42 to: 49)
			declaredAt: (42 to: 49)) ] valueCoveringAll:
		{35 to: 40}) ifTrue: [
		(turno _ #Mano coverAll:
			{74 to: 78})
			cover: (65 to: 69)
			declaredAt: (65 to: 69).
		(puntosMano _ [
		(puntosMano
			cover: (84 to: 93)
			declaredAt: (84 to: 93)) +
			(1 coverAll:
				{110 to: 110}) ] valueCoveringAll:
			{109 to: 109})
			cover: (98 to: 107)
			declaredAt: (84 to: 93) ]] valueCoveringAll:
		{52 to: 58}.
	[
	([
	(cartaPie
		cover: (116 to: 123)
		declaredAt: (42 to: 49)) mataA:
		(cartaMano
			cover: (132 to: 140)
			declaredAt: (25 to: 33)) ] valueCoveringAll:
		{125 to: 130}) ifTrue: [
		(turno _ #Pie coverAll:
			{165 to: 168})
			cover: (156 to: 160)
			declaredAt: (65 to: 69).
		(puntosPie _ [
		(puntosPie
			cover: (174 to: 182)
			declaredAt: (174 to: 182)) +
			(1 coverAll:
				{198 to: 198}) ] valueCoveringAll:
			{197 to: 197})
			cover: (187 to: 195)
			declaredAt: (174 to: 182) ]] valueCoveringAll:
		{143 to: 149}.
	[
	([
	(cartaMano
		cover: (204 to: 212)
		declaredAt: (25 to: 33)) empardaCon:
		(cartaPie
			cover: (226 to: 233)
			declaredAt: (42 to: 49)) ] valueCoveringAll:
		{214 to: 224}) ifTrue: [
		(turno _ #Mano coverAll:
			{258 to: 262})
			cover: (249 to: 253)
			declaredAt: (65 to: 69).
		(puntosPie _ [
		(puntosPie
			cover: (268 to: 276)
			declaredAt: (174 to: 182)) +
			(1 coverAll:
				{292 to: 292}) ] valueCoveringAll:
			{291 to: 291})
			cover: (281 to: 289)
			declaredAt: (174 to: 182).
		(puntosMano _ [
		(puntosMano
			cover: (298 to: 307)
			declaredAt: (84 to: 93)) +
			(1 coverAll:
				{324 to: 324}) ] valueCoveringAll:
			{323 to: 323})
			cover: (312 to: 321)
			declaredAt: (84 to: 93) ]] valueCoveringAll:
		{236 to: 242}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
empardaCon: cartaParda
	^ [
	([
	(self coverAll:
		{27 to: 30}) valor ] valueCoveringAll:
		{32 to: 36}) =
		([
		(cartaParda
			cover: (40 to: 49)
			declaredAt: (13 to: 22)) valor ] valueCoveringAll:
			{51 to: 55}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
setearCartasEnEmpiezoNuevaMano
	(cartaPie _ nil coverAll:
		{46 to: 48})
		cover: (34 to: 41)
		declaredAt: (34 to: 41).
	(cartaMano _ nil coverAll:
		{64 to: 66})
		cover: (52 to: 60)
		declaredAt: (52 to: 60).! !
!Behavior method!
manoGanoLaPrimerMano
	^ [
	(cartaMano
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) mataA:
		(cartaPie
			cover: (43 to: 50)
			declaredAt: (43 to: 50)) ] valueCoveringAll:
		{36 to: 41}.! !
!Behavior method!
pieGanoLaPrimerMano
	^ [
	(cartaPie
		cover: (24 to: 31)
		declaredAt: (24 to: 31)) mataA:
		(cartaMano
			cover: (41 to: 49)
			declaredAt: (41 to: 49)) ] valueCoveringAll:
		{34 to: 39}.! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:43:15'!
PASSED!
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeOro
	^ [
	(self coverAll:
		{13 to: 16}) paloEs:
		([
		(self coverAll:
			{26 to: 29}) oro ] valueCoveringAll:
			{31 to: 33}) ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
oro
	^ [
	([
	(self coverAll:
		{9 to: 12}) class ] valueCoveringAll:
		{14 to: 18}) oro ] valueCoveringAll:
		{20 to: 22}.! !

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:43:15'!
PASSED!
!Behavior method!
cartasRestantesDeMano
	^ [
	(cartasMano
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) size ] valueCoveringAll:
		{37 to: 40}.! !
!Behavior method!
cartasRestantesDePie
	^ [
	(cartasPie
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) size ] valueCoveringAll:
		{36 to: 39}.! !

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:43:15'!
PASSED!
!Behavior method!
jugadorNoPuedeTirarCartaQueNoTiene
	^ 'Los jugadores solo pueden tirar cartas que conocen' coverAll:
		{39 to: 90}.! !

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:43:15'!
PASSED!
!Behavior method!
manoJuegaFueraDeTurno
	[
	(self coverAll:
		{24 to: 27}) error:
		([
		([
		(self coverAll:
			{36 to: 39}) class ] valueCoveringAll:
			{41 to: 45}) jugadorTiraCartaCuandoNoEsSuTurno ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{29 to: 34}.! !

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:43:15'!
PASSED!
!Behavior method!
esAnchoFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esAncho ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49}) or: [
			[
			(self coverAll:
				{57 to: 60}) esDeCopa ] valueCoveringAll:
				{62 to: 69} ]] valueCoveringAll:
			{51 to: 53} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esRey
	^ [
	(self coverAll:
		{11 to: 14}) numeroEs:
		(12 coverAll:
			{26 to: 27}) ] valueCoveringAll:
		{16 to: 24}.! !
!Behavior method!
esCaballo
	^ [
	(self coverAll:
		{15 to: 18}) numeroEs:
		(11 coverAll:
			{30 to: 31}) ] valueCoveringAll:
		{20 to: 28}.! !
!Behavior method!
esSota
	^ [
	(self coverAll:
		{12 to: 15}) numeroEs:
		(10 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{17 to: 25}.! !
!Behavior method!
esSieteFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeCopa ] valueCoveringAll:
			{43 to: 50}) or: [
			[
			(self coverAll:
				{58 to: 61}) esDeBasto ] valueCoveringAll:
				{63 to: 71} ]] valueCoveringAll:
			{52 to: 54} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeBasto
	^ [
	(self coverAll:
		{15 to: 18}) paloEs:
		([
		(self coverAll:
			{28 to: 31}) basto ] valueCoveringAll:
			{33 to: 37}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
basto
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) basto ] valueCoveringAll:
		{22 to: 26}.! !
!Behavior method!
tirarCartasCuandoLaRondaYaTerminoError
	^ 'Espera a una nueva mano para tirar ' coverAll:
		{43 to: 79}.! !
!Behavior method!
quierenTirarCartasCuandoYaterminoLaMano
	^ [
	(self coverAll:
		{44 to: 47}) error:
		([
		([
		(self coverAll:
			{56 to: 59}) class ] valueCoveringAll:
			{61 to: 65}) tirarCartasCuandoLaRondaYaTerminoError ] valueCoveringAll:
			{67 to: 104}) ] valueCoveringAll:
		{49 to: 54}.! !

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:43:16'!
PASSED!
!Behavior method!
jugadorManoGanoRonda
	^ [
	(controladorDeJuego
		cover: (24 to: 41)
		declaredAt: (24 to: 41)) jugadorManoGanoRonda ] valueCoveringAll:
		{43 to: 62}.! !
!Behavior method!
jugadorPieGanoRonda
	^ [
	(controladorDeJuego
		cover: (24 to: 41)
		declaredAt: (24 to: 41)) jugadorPieGanoRonda ] valueCoveringAll:
		{44 to: 62}.! !

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:43:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda stamp: 'SB 7/5/2021 21:43:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieNoPuedeTirarPrimeroEnLaPrimerMano stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieGanaLaPrimeraRondaSiTiraUnaCartaMejor stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test05AmbosJugadoresEmpiezanCon3Cartas stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test06JugadorTieneUnaCartaMenosLuegoDeTirar stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test07JugadorNoPuedeTirarUnaCartaQueNoTiene stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test08JugadorManoTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test09JugadorPieTiraSegundaCartaAunquePerdioPrimerEnfrentamientoLevantaError stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test10RondaDeTrucoNoPuedeContinuarSiYaHayGanador stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnSegundaMano stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test12RondaDeTrucoSabeQueLaRondaTerminoCuandoSeGanaEnParda stamp: 'SB 7/5/2021 21:46:55'!
PASSED!

----SNAPSHOT----(5 July 2021 21:49:29) CuisUniversity-4532.image priorSource: 17183871!

!methodRemoval: RondaDeTrucoTest #nuevaRonda stamp: 'SB 7/5/2021 21:49:49'!
nuevaRonda
	'Aca se podrian juntar y mezclar las cartas o algo asi'!

----SNAPSHOT----(5 July 2021 21:49:58) CuisUniversity-4532.image priorSource: 17261440!
!RondaDeTruco methodsFor: 'private-testing' stamp: 'SB 7/5/2021 21:53:09' prior: 50863823!
manoGanoLaPrimerMano
	" Este mensaje y los tests que lo utilizan no deberian existir, me di cuenta tarde que la funcionalidad de ver quien ganaba la primera mano habia quedado como responsabilidad de la ronda del truco. Siguiendo el modelo deberia ser el controlador quien sepa ese tipo de cosas"
	^ cartaMano  mataA: cartaPie .! !

----SNAPSHOT----(5 July 2021 21:53:32) CuisUniversity-4532.image priorSource: 17261675!