----End fileIn of /home/nikita/r/f/isw1/cuis_examen/linux64/ISW1-2021-1C-2doParcial.st----!

----SNAPSHOT----(5 July 2021 17:30:52) CuisUniversity-4532.image priorSource: 18058935!

TestCase subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 17:34:05'!
TestCase subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRenamed: #RondaDeTruco as: #RondaDeTrucoTest stamp: 'nz 7/5/2021 17:34:19'!
Smalltalk renameClassNamed: #RondaDeTruco as: #RondaDeTrucoTest!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 17:39:10'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'no messages' stamp: 'nz 7/5/2021 17:39:03'!
test01

	| manoDeAnchos |
	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
	
	self
		should: [ RondaDeTruco mano: manoDeAnchos pie: manoDeAnchos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:39:16'!
ERROR!
!RondaDeTruco class methodsFor: 'errores garrafales' stamp: 'nz 7/5/2021 17:39:41'!
manoInvalidaErrorDescription
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'errores garrafales' stamp: 'nz 7/5/2021 17:40:12' prior: 50896559!
manoInvalidaErrorDescription
	^ 'Mano inv�lida, alguien se est� carteando!!'.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:40:18'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 17:40:26'!
mano: aBag pie: aBag2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeMano: aBag pie: aBag2 ! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 17:41:14' prior: 50896572!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:41:15'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 17:41:31'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'lasCartasDeLaMano_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 17:41:31'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'lasCartasDeLaMano_CHANGE_ME lasCartasDelPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'inicializacion' stamp: 'nz 7/5/2021 17:41:31'!
initializeMano: lasCartasDeLaMano pie: lasCartasDelPie 
	self shouldBeImplemented.
	lasCartasDeLaMano_CHANGE_ME := lasCartasDeLaMano.
	lasCartasDelPie_CHANGE_ME := lasCartasDelPie.! !
!RondaDeTruco methodsFor: 'inicializacion' stamp: 'nz 7/5/2021 17:41:45' prior: 50896607!
initializeMano: lasCartasDeLaMano pie: lasCartasDelPie 
	
	lasCartasDeLaMano_CHANGE_ME := lasCartasDeLaMano.
	lasCartasDelPie_CHANGE_ME := lasCartasDelPie.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 17:41:49'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano lasCartasDelPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:41:49' prior: 50896616!
initializeMano: lasCartasDeLaMano pie: lasCartasDelPie 
	
	cartasDeLaMano := lasCartasDeLaMano.
	lasCartasDelPie_CHANGE_ME := lasCartasDelPie.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 17:41:54'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:41:54' prior: 50896633!
initializeMano: lasCartasDeLaMano pie: lasCartasDelPie 
	
	cartasDeLaMano := lasCartasDeLaMano.
	cartasDelPie := lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:41:59'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 17:42:46' prior: 50896581!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	self error: self class manoInvalidaErrorDescription .

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:42:47'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 17:43:01' prior: 50896659!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	self error: self manoInvalidaErrorDescription .

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:43:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:43:13'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:46:11'!
test02

	| manoDeAnchos ronda |
	
	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	ronda = RondaDeTruco mano: manoDeAnchos pie: manoDeAnchos.
	
	self
		should: [  ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:46:17' prior: 50896683!
test02

	| manoFuerte ronda |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	ronda = RondaDeTruco mano: manoFuerte pie: manoFuerte.
	
	self
		should: [  ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:46:53' prior: 50896698!
test02

	| manoFuerte ronda |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco oroCon: 4)
		with: (CartaDeTruco bastoCon: 7).
		
	ronda = RondaDeTruco mano: manoFuerte pie: manoFuerte.
	
	self
		should: [  ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:49:45' prior: 50896712!
test02

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda = RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:49:55' prior: 50896726!
test02

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:49:58'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 17:51:34' prior: 50896670!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	"Falta validar varias cosas"
	(lasCartasDelPie includes: CartaDeTruco anchoDeEspada)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:51:35'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:51:46'!
turnoIncorrectoErrorDescription
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:52:16' prior: 50896785!
turnoIncorrectoErrorDescription
	
	^'Epa, che!! No le toca a este jugador!!'! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:52:22'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:53:07'!
pieJuega: aCartaDeTruco 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:53:21' prior: 50896799!
pieJuega: aCartaDeTruco 
	self error: self class turnoIncorrectoErrorDescription.! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:53:22'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:54:13'!
test03

	| manoConCartasDemas |
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
	
	self
		should: [ RondaDeTruco mano: manoConCartasDemas pie: manoConCartasDemas ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:54:41' prior: 50896817!
test03

	| manoConCartasDemas |
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
	
	self
		should: [ RondaDeTruco mano: manoConCartasDemas pie: manoConCartasDemas ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:55:07' prior: 50896833!
test03

	| manoConCartasDemas manoPaQuedarseEnElMolde |
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoConCartasDemas pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 17:55:16'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 17:57:00' prior: 50896771!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	"Falta validar varias cosas"
	(lasCartasDelPie includes: CartaDeTruco anchoDeEspada)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDeLaMano size > 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 17:57:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:57:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:57:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 17:57:02'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:57:25'!
test04

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoConCartasDeMenos pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 17:57:27'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 17:57:43' prior: 50896872!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	"Falta validar varias cosas"
	(lasCartasDelPie includes: CartaDeTruco anchoDeEspada)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDeLaMano size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 17:57:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:57:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:57:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 17:57:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 17:57:45'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:58:16'!
test05

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:58:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:58:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:58:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 17:58:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 17:58:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:58:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:58:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:58:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:58:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 17:58:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 17:58:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:58:22'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:58:44' prior: 50896943!
test05

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:58:45'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 17:58:53' prior: 50896896!
test04

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoConCartasDeMenos pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 17:58:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:58:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:58:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 17:58:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 17:58:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:58:54'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:58:54'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 17:59:10' prior: 50896917!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	"Falta validar varias cosas"
	(lasCartasDelPie includes: CartaDeTruco anchoDeEspada)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDeLaMano size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
	(lasCartasDelPie size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:59:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:59:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:59:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 17:59:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 17:59:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:59:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:59:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 17:59:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 17:59:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 17:59:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 17:59:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 17:59:32'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:00:31'!
test06

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:00:44' prior: 50897094!
test06

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: CartaDeTruco sieteDeOro
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:00:50'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 18:01:08' prior: 50897048!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	"Falta validar varias cosas"
	(lasCartasDelPie includes: CartaDeTruco anchoDeEspada)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDelPie includes: CartaDeTruco sieteDeOro)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDeLaMano size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDelPie size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:01:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 18:01:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 18:01:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 18:01:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 18:01:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 18:01:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:01:10'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 18:01:22' prior: 50897136!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	"Falta validar varias cosas"
	
	(lasCartasDeLaMano size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDelPie size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
		
	(lasCartasDelPie includes: CartaDeTruco anchoDeEspada)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDelPie includes: CartaDeTruco sieteDeOro)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:01:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 18:01:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 18:01:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 18:01:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 18:01:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 18:01:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:01:23'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 18:02:29' prior: 50897174!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	"Falta validar varias cosas"
	
	| cartasEnJuego |
	(lasCartasDeLaMano size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDelPie size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	cartasEnJuego := lasCartasDelPie copy.
	cartasEnJuego addAll: lasCartasDeLaMano.
	
	
	(lasCartasDelPie includes: CartaDeTruco anchoDeEspada)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDelPie includes: CartaDeTruco sieteDeOro)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 18:04:14' prior: 50897212!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	"Falta validar varias cosas"
	
	| cartasEnJuego |
	(lasCartasDeLaMano size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDelPie size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	cartasEnJuego := lasCartasDelPie copy.
	cartasEnJuego addAll: lasCartasDeLaMano.
	(cartasEnJuego allSatisfy: [ :carta | (cartasEnJuego occurrencesOf: carta) = 1 ])
	ifFalse: [ self error: self manoInvalidaErrorDescription ].

	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:04:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 18:04:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 18:04:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 18:04:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 18:04:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 18:04:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:04:16'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'nz 7/5/2021 18:06:16' prior: 50897237!
mano: lasCartasDeLaMano pie: lasCartasDelPie 

	"Falta validar varias cosas"
	
	self asegurarseDeQueLasCartasSeRepartieronBienPara: lasCartasDeLaMano y: lasCartasDelPie.
	
	^self new initializeMano: lasCartasDeLaMano pie: lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:06:19'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:06:28'!
asegurarseDeQueLasCartasSeRepartieronBienPara: aBag y: aBag2 
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:06:38' prior: 50897288!
asegurarseDeQueLasCartasSeRepartieronBienPara: lasCartasDeLaMano y: lasCartasDelPie 
	
	| cartasEnJuego |
	(lasCartasDeLaMano size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	(lasCartasDelPie size ~= 3)
		ifTrue: [ self error: self manoInvalidaErrorDescription ].
		
	cartasEnJuego := lasCartasDelPie copy.
	cartasEnJuego addAll: lasCartasDeLaMano.
	(cartasEnJuego allSatisfy: [ :carta | (cartasEnJuego occurrencesOf: carta) = 1 ])
	ifFalse: [ self error: self manoInvalidaErrorDescription ].
! !

!testRun: #RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 18:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 18:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 18:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 18:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 18:06:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:06:43'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:09:10'!
test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano

	| manoDeAnchos |
	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
	
	self
		should: [ RondaDeTruco mano: manoDeAnchos pie: manoDeAnchos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!methodRemoval: RondaDeTrucoTest #test01 stamp: 'nz 7/5/2021 18:09:10'!
test01

	| manoDeAnchos |
	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
	
	self
		should: [ RondaDeTruco mano: manoDeAnchos pie: manoDeAnchos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:09:33'!
test02NoPuedeArrancarJugandoElPie

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !

!methodRemoval: RondaDeTrucoTest #test02 stamp: 'nz 7/5/2021 18:09:33'!
test02

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:10:02'!
test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas

	| manoConCartasDemas manoPaQuedarseEnElMolde |
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoConCartasDemas pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!methodRemoval: RondaDeTrucoTest #test03 stamp: 'nz 7/5/2021 18:10:02'!
test03

	| manoConCartasDemas manoPaQuedarseEnElMolde |
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoConCartasDemas pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:10:17'!
test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoConCartasDeMenos pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!methodRemoval: RondaDeTrucoTest #test04 stamp: 'nz 7/5/2021 18:10:17'!
test04

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoConCartasDeMenos pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:10:37'!
test05ElPieTieneQueArrancarConCartas

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!methodRemoval: RondaDeTrucoTest #test05 stamp: 'nz 7/5/2021 18:10:37'!
test05

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:10:44'!
test05ElPieTieneQueArrancarConTresCartas

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!methodRemoval: RondaDeTrucoTest #test05ElPieTieneQueArrancarConCartas stamp: 'nz 7/5/2021 18:10:44'!
test05ElPieTieneQueArrancarConCartas

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:10:58'!
test06NoPuedeHaberCartasRepetidasEntreLasManos

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: CartaDeTruco sieteDeOro
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!methodRemoval: RondaDeTrucoTest #test06 stamp: 'nz 7/5/2021 18:10:58'!
test06

	| manoConCartasDeMenos manoPaQuedarseEnElMolde |
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: CartaDeTruco sieteDeOro
		with: (CartaDeTruco copaCon: 7).
	
	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:14:31'!
test07

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:14:40'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:14:49'!
noSePuedeJugarConLoQueNoSeTieneErrorDescription
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:15:26' prior: 50897618!
noSePuedeJugarConLoQueNoSeTieneErrorDescription
	^'Se intent� jugar una carta que el jugador no tenia!!'.! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:15:29'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:15:36'!
manoJuega: aCartaDeTruco 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:15:47' prior: 50897633!
manoJuega: aCartaDeTruco 
	
	self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription.! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:15:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:15:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:15:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:15:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:15:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:15:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:15:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:15:50'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:16:18' prior: 50897594!
test07

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	self
		should: [  ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:18:23'!
test08

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	self
		should: [  ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:14:31' prior: 50897671!
test07

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:21:31' prior: 50897692!
test08

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"de alguna forma el pie tiene que ver a que tiene que ganarle"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).
	! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:21:33'!
ERROR!
!RondaDeTruco methodsFor: 'error handling' stamp: 'nz 7/5/2021 18:21:36' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'error handling' stamp: 'nz 7/5/2021 18:21:48' prior: 50897760 overrides: 16881409!
error: aString 
	^CartaDeTruco oroCon: 7.! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:21:49'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:22:09'!
ultimaCartaJugada
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:22:21' prior: 50897772!
ultimaCartaJugada
	^CartaDeTruco oroCon: 7.! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:22:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:22:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:22:22'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:22:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:22:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:22:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:22:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:22:22'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:22:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:22:26'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:22:57'!
FAILURE!

!methodRemoval: RondaDeTruco #error: stamp: 'nz 7/5/2021 18:23:32'!
error: aString 
	^CartaDeTruco oroCon: 7.!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:23:36'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:24:59' prior: 50897638!
manoJuega: unaCartaDeTruco 

	(self cartasDeLaMano includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:25:23'!
cartasDeLaMano
	
	^cartasDeLaMano.! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:25:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:25:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:25:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:25:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:25:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:25:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:25:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:25:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:25:26'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:26:35' prior: 50897736!
test08

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).
	! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:26:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:26:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:26:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:26:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:26:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:26:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:26:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:26:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:26:38'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:27:41' prior: 50897864!
test08

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).
	
	self assert: (ronda cartasDeLaMano includes: (CartaDeTruco oroCon: 7))
	
	! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:27:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:27:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:27:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:27:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:27:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:27:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:27:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:27:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:27:43'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:27:51' prior: 50897916!
test08

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).
	
	self assert: (ronda cartasDeLaMano includes: (CartaDeTruco oroCon: 7)) negated
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:27:52' prior: 50897970!
test08

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).
	
	self assert: (ronda cartasDeLaMano includes: (CartaDeTruco oroCon: 7)) negated.
	
	! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:27:53'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:28:08' prior: 50897996!
test08

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).
	
	self assert: (ronda cartasDeLaMano includes: (CartaDeTruco oroCon: 7)) negated.
	
	! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:28:09'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:28:23' prior: 50898024!
test08

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).
	
	self assert: (ronda cartasDeLaMano includes: (CartaDeTruco oroCon: 7)) not.
	
	! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:30:19'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:31:22' prior: 50898052!
test08

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).

	
	! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:31:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:31:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:31:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:31:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:31:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:31:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:31:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:31:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:31:22'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:31:27' prior: 50897823!
manoJuega: unaCartaDeTruco 

	(self cartasDeLaMano includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	
	! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:31:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:31:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:31:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:31:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:31:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:31:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:31:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:31:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:31:28'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:33:01'!
test09

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).

	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:33:35' prior: 50898169!
test09

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	self
		should: [ ronda pieJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:33:37'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:33:52' prior: 50898194!
test09

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	self
		should: [ ronda pieJuega: CartaDeTruco anchoDeEspada ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:33:58'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:34:05' prior: 50896804!
pieJuega: aCartaDeTruco 

	self error: self class turnoIncorrectoErrorDescription.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:34:59' prior: 50898244!
pieJuega: aCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].! !

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:35:07'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:35:15'!
leTocaAlPie
	self shouldBeImplemented.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 18:35:47'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie leTocaJugarALaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:35:45' prior: 50898259!
leTocaAlPie
	^leTocaJugarALaMano not.! !
!RondaDeTruco methodsFor: 'inicializacion' stamp: 'nz 7/5/2021 18:36:04' prior: 50896649!
initializeMano: lasCartasDeLaMano pie: lasCartasDelPie 
	
	cartasDeLaMano := lasCartasDeLaMano.
	cartasDelPie := lasCartasDelPie.
	leTocaJugarALaMano := true.! !

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:36:06'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:36:26' prior: 50898132!
manoJuega: unaCartaDeTruco 

	(self cartasDeLaMano includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	leTocaJugarALaMano := false.
	
	
	! !

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:36:29'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:36:56' prior: 50898250!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	(self cartasDelPie includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	! !

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:37:00'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:37:06'!
cartasDelPie
	self shouldBeImplemented.
	^cartasDelPie! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:37:08' prior: 50898314!
cartasDelPie
	
	^cartasDelPie! !

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:37:10'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:39:14' prior: 50898219!
test09

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.! !

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:39:21'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:39:29'!
elUltimoEnfrentamientoLoGanoLaMano
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:39:33' prior: 50898377!
elUltimoEnfrentamientoLoGanoLaMano
	^true.! !

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:39:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:39:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:39:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:39:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:39:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:39:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:39:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:39:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:39:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:39:35'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:41:18'!
test10

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:41:20'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:41:27'!
elUltimoEnfrentamientoLoGanoElPie
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:41:31' prior: 50898440!
elUltimoEnfrentamientoLoGanoElPie
	^true.! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:41:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:41:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:41:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:41:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:41:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:41:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:41:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:41:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:41:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:41:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:41:32'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:41:59' prior: 50898355!
test09

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie not.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:42:05' prior: 50898483!
test09

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:42:14' prior: 50898418!
test10

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:42:15'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:43:51' prior: 50898527!
test10

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco copaCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:44:01' prior: 50898552!
test10

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco copaCon: 7).
	
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:44:14'!
FAILURE!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 18:44:39'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie leTocaJugarALaMano ultimaCartaJugada'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:44:37' prior: 50897777!
ultimaCartaJugada
	^ultimaCartaJugada.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:44:57' prior: 50898289!
manoJuega: unaCartaDeTruco 

	(self cartasDeLaMano includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	leTocaJugarALaMano := false.
	ultimaCartaJugada := unaCartaDeTruco.
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:45:03' prior: 50898301!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	(self cartasDelPie includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	
	ultimaCartaJugada := unaCartaDeTruco.
	! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:45:05'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:45:13' prior: 50898628!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	(self cartasDelPie includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	ultimaCartaJugada := unaCartaDeTruco.
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:47:55' prior: 50898445!
elUltimoEnfrentamientoLoGanoElPie
	^self elUltimoEnfrentamientoLoGanoLaMano not.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 18:49:38'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie leTocaJugarALaMano ultimaCartaJugada resultadoUltimoEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:49:32' prior: 50898656!
elUltimoEnfrentamientoLoGanoElPie
	^resultadoUltimoEnfrentamiento = #ganoPie.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:49:59' prior: 50898382!
elUltimoEnfrentamientoLoGanoLaMano
	^resultadoUltimoEnfrentamiento = #ganoMano.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:51:49' prior: 50898643!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	(self cartasDelPie includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	ultimaCartaJugada := unaCartaDeTruco.
	
	(unaCartaDeTruco esDeBasto) ifTrue: [ resultadoUltimoEnfrentamiento := #ganoMano] ifFalse: [ resultadoUltimoEnfrentamiento := #ganoPie ].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:51:59' prior: 50898685!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	(self cartasDelPie includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	ultimaCartaJugada := unaCartaDeTruco.
	
	(unaCartaDeTruco esDeBasto)
		ifTrue: [ resultadoUltimoEnfrentamiento := #ganoMano]
		ifFalse: [ resultadoUltimoEnfrentamiento := #ganoPie ].! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:52:04'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:52:17' prior: 50898702!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	(self cartasDelPie includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	ultimaCartaJugada := unaCartaDeTruco.
	
	(unaCartaDeTruco esDeBasto)
		ifTrue: [ resultadoUltimoEnfrentamiento := #ganoPie]
		ifFalse: [ resultadoUltimoEnfrentamiento := #ganoMano ].! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:52:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:52:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:52:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:52:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:52:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:52:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:52:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:52:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:52:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:52:18'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:52:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:52:18'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:52:46' prior: 50898722!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	(self cartasDelPie includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	ultimaCartaJugada := unaCartaDeTruco.
	
	(unaCartaDeTruco numeroEs: 4)
		ifTrue: [ resultadoUltimoEnfrentamiento := #ganoMano]
		ifFalse: [ resultadoUltimoEnfrentamiento := #ganoPie ].! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:52:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 18:52:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 18:52:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 18:52:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 18:52:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 18:52:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 18:52:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 18:52:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 18:52:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 18:52:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 18:52:48'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:54:14'!
test11

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !

!testRun: #RondaDeTrucoTest #test11 stamp: 'nz 7/5/2021 18:54:18'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:54:47' prior: 50898775!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	(self cartasDelPie includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	(unaCartaDeTruco mataA: ultimaCartaJugada)
		ifTrue: [ resultadoUltimoEnfrentamiento := #ganoMano]
		ifFalse: [ resultadoUltimoEnfrentamiento := #ganoPie ].
	
	ultimaCartaJugada := unaCartaDeTruco.
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 18:54:54' prior: 50898849!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	(self cartasDelPie includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	(unaCartaDeTruco mataA: ultimaCartaJugada)
		ifTrue: [ resultadoUltimoEnfrentamiento := #ganoPie]
		ifFalse: [ resultadoUltimoEnfrentamiento := #ganoMano ].
	
	! !

!testRun: #RondaDeTrucoTest #test11 stamp: 'nz 7/5/2021 18:54:59'!
ERROR!

self ordenDePrioridad!

self withIndexDo: [:a :b | a halt ].!

!testRun: #RondaDeTrucoTest #test11 stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test11 stamp: 'nz 7/5/2021 19:00:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test11 stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test11 stamp: 'nz 7/5/2021 19:00:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test11 stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 19:00:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test11 stamp: 'nz 7/5/2021 19:00:34'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:03:42'!
test12

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	ronda pieJuega: (CartaDeTruco bastoCon: 4).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:04:05' prior: 50898995!
test12

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test12 stamp: 'nz 7/5/2021 19:04:09'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:04:38' prior: 50898867!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	(self cartasDelPie includes: unaCartaDeTruco)
	ifFalse: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	leTocaJugarALaMano := true.
	
	(unaCartaDeTruco mataA: ultimaCartaJugada)
		ifTrue: [ resultadoUltimoEnfrentamiento := #ganoPie]
		ifFalse: [ resultadoUltimoEnfrentamiento := #ganoMano ].
	
	! !

!testRun: #RondaDeTrucoTest #test12 stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test11 stamp: 'nz 7/5/2021 19:04:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test12 stamp: 'nz 7/5/2021 19:04:43'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:05:08'!
test13

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:05:16' prior: 50899098!
test13

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test13 stamp: 'nz 7/5/2021 19:05:17'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:05:46'!
test07LaManoNoPuedeJugarUnaCartaQueNoTiene

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !

!methodRemoval: RondaDeTrucoTest #test07 stamp: 'nz 7/5/2021 19:05:46'!
test07

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:06:18'!
test08SePuedeVerLaUltimaCartaJugada

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).

	
	! !

!methodRemoval: RondaDeTrucoTest #test08 stamp: 'nz 7/5/2021 19:06:18'!
test08

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).

	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:07:57'!
test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !

!methodRemoval: RondaDeTrucoTest #test09 stamp: 'nz 7/5/2021 19:07:57'!
test09

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:08:23'!
test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco copaCon: 7).
	
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !

!methodRemoval: RondaDeTrucoTest #test10 stamp: 'nz 7/5/2021 19:08:23'!
test10

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco copaCon: 7).
	
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:08:54'!
test11RepedidoDel_test09

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !

!methodRemoval: RondaDeTrucoTest #test11 stamp: 'nz 7/5/2021 19:08:54'!
test11

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:09:34'!
test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !

!methodRemoval: RondaDeTrucoTest #test12 stamp: 'nz 7/5/2021 19:09:34'!
test12

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:10:00'!
test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !

!methodRemoval: RondaDeTrucoTest #test13 stamp: 'nz 7/5/2021 19:10:00'!
test13

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:10:32'!
test14

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test14 stamp: 'nz 7/5/2021 19:10:33'!
FAILURE!

!methodRemoval: RondaDeTrucoTest #test14 stamp: 'nz 7/5/2021 19:10:46'!
test14

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:10:49'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:12:47' prior: 50898617!
manoJuega: unaCartaDeTruco 

	cartasDeLaMano remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	leTocaJugarALaMano := false.
	ultimaCartaJugada := unaCartaDeTruco.
	
	
	! !

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:12:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:12:50'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:13:09'!
test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:13:34' prior: 50899585!
test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	ronda manoJuega: (CartaDeTruco bastoCon: 2).
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:13:35'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:13:58' prior: 50899043!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].

	leTocaJugarALaMano := true.
	
	(unaCartaDeTruco mataA: ultimaCartaJugada)
		ifTrue: [ resultadoUltimoEnfrentamiento := #ganoPie]
		ifFalse: [ resultadoUltimoEnfrentamiento := #ganoMano ].
	
	! !

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:13:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:13:59'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:14:29'!
test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:15:27' prior: 50899714!
test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	| manoFuerte ronda manoPaQuedarseEnElMolde |
	
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:15:29'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:16:25' prior: 50899642!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].

	leTocaJugarALaMano := true.
	
	(unaCartaDeTruco mataA: ultimaCartaJugada)
		ifTrue: [ 
			resultadoUltimoEnfrentamiento := #ganoPie.		
			leTocaJugarALaMano := false.
		]
		ifFalse: [ 
			resultadoUltimoEnfrentamiento := #ganoMano.
			leTocaJugarALaMano := true.
		].
	
	! !

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:16:27'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:16:34' prior: 50899770!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	(unaCartaDeTruco mataA: ultimaCartaJugada)
		ifTrue: [ 
			resultadoUltimoEnfrentamiento := #ganoPie.		
			leTocaJugarALaMano := false.
		]
		ifFalse: [ 
			resultadoUltimoEnfrentamiento := #ganoMano.
			leTocaJugarALaMano := true.
		].
	
	! !

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:16:35'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:17:15' prior: 50899523!
manoJuega: unaCartaDeTruco 

	self leTocaALaMano ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDeLaMano remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	leTocaJugarALaMano := false.
	ultimaCartaJugada := unaCartaDeTruco.
	
	
	! !

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:17:18'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:17:24'!
leTocaALaMano
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:17:36' prior: 50899834!
leTocaALaMano
	^leTocaJugarALaMano .! !

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:17:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:20:08'!
PASSED!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:20:59'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'mmanoFuerte'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:21:00'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'mmanoFuerte mmanoPaQuedarseEnElMolde'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:20:53' overrides: 16927572!
setUp

	mmanoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	mmanoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:21:30'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'mmanoFuerte mmanoPaQuedarseEnElMolde mmanoDeAnchos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:21:29' prior: 50899981 overrides: 16927572!
setUp

	mmanoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	mmanoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	mmanoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:21:42' prior: 50897331!
test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano

	mmanoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
	
	self
		should: [ RondaDeTruco mano: mmanoDeAnchos pie: mmanoDeAnchos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:21:48' prior: 50897358!
test02NoPuedeArrancarJugandoElPie

	| ronda |
	mmanoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	mmanoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	ronda := RondaDeTruco mano: mmanoFuerte pie: mmanoPaQuedarseEnElMolde.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:22:02' prior: 50900034!
test02NoPuedeArrancarJugandoElPie

	| ronda |
	
	ronda := RondaDeTruco mano: mmanoFuerte pie: mmanoPaQuedarseEnElMolde.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:22:43'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'mmanoFuerte mmanoPaQuedarseEnElMolde mmanoDeAnchos mmanoConCartasDemas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:22:42' prior: 50900003 overrides: 16927572!
setUp

	mmanoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	mmanoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	mmanoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	mmanoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:22:55'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'mmanoFuerte mmanoPaQuedarseEnElMolde mmanoDeAnchos mmanoConCartasDemas mmanoConCartasDeMenos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:22:53' prior: 50900078 overrides: 16927572!
setUp

	mmanoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	mmanoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	mmanoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	mmanoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	mmanoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:23:03' prior: 50900019!
test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano

	self
		should: [ RondaDeTruco mano: mmanoDeAnchos pie: mmanoDeAnchos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:23:13' prior: 50897400!
test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas

	self
		should: [ RondaDeTruco mano: mmanoConCartasDemas pie: mmanoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:23:21' prior: 50897441!
test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas

	self
		should: [ RondaDeTruco mano: mmanoConCartasDeMenos pie: mmanoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:23:34' prior: 50897516!
test05ElPieTieneQueArrancarConTresCartas

	self
		should: [ RondaDeTruco mano: mmanoPaQuedarseEnElMolde pie: mmanoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:23:42' prior: 50897555!
test06NoPuedeHaberCartasRepetidasEntreLasManos

	self
		should: [ RondaDeTruco mano: mmanoPaQuedarseEnElMolde pie: mmanoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:23:50' prior: 50899148!
test07LaManoNoPuedeJugarUnaCartaQueNoTiene

	| ronda |
	ronda := RondaDeTruco mano: mmanoFuerte pie: mmanoPaQuedarseEnElMolde.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:24:02' prior: 50899191!
test08SePuedeVerLaUltimaCartaJugada

	|  ronda  |
	
	ronda := RondaDeTruco mano: mmanoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).

	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:24:10' prior: 50899236!
test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado

	|  ronda  |
	
	ronda := RondaDeTruco mano: mmanoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:24:19' prior: 50899280!
test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado

	|  ronda  |
	
		
	ronda := RondaDeTruco mano: mmanoPaQuedarseEnElMolde pie: mmanoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco copaCon: 7).
	
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:24:28' prior: 50899329!
test11RepedidoDel_test09

	|  ronda  |
	
	ronda := RondaDeTruco mano: mmanoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:24:35' prior: 50899372!
test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: mmanoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:24:42' prior: 50899420!
test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: mmanoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:24:48' prior: 50899611!
test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: mmanoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	ronda manoJuega: (CartaDeTruco bastoCon: 2).
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:24:56' prior: 50899740!
test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: mmanoPaQuedarseEnElMolde pie: mmanoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:25:04'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'mmanoFuerte mmanoPaQuedarseEnElMolde manoDeAnchos mmanoConCartasDemas mmanoConCartasDeMenos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:04' prior: 50900136!
test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano

	self
		should: [ RondaDeTruco mano: manoDeAnchos pie: manoDeAnchos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:04' prior: 50900111 overrides: 16927572!
setUp

	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	mmanoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	mmanoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	mmanoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	mmanoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:25:07'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'manoFuerte mmanoPaQuedarseEnElMolde manoDeAnchos mmanoConCartasDemas mmanoConCartasDeMenos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900220!
test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900353 overrides: 16927572!
setUp

	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	mmanoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	mmanoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	mmanoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900055!
test02NoPuedeArrancarJugandoElPie

	| ronda |
	
	ronda := RondaDeTruco mano: manoFuerte pie: mmanoPaQuedarseEnElMolde.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900251!
test11RepedidoDel_test09

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900297!
test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	ronda manoJuega: (CartaDeTruco bastoCon: 2).
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900315!
test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: mmanoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900234!
test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado

	|  ronda  |
	
		
	ronda := RondaDeTruco mano: mmanoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco copaCon: 7).
	
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900205!
test08SePuedeVerLaUltimaCartaJugada

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).

	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900191!
test07LaManoNoPuedeJugarUnaCartaQueNoTiene

	| ronda |
	ronda := RondaDeTruco mano: manoFuerte pie: mmanoPaQuedarseEnElMolde.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900264!
test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:07' prior: 50900280!
test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: mmanoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:25:10'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'manoFuerte manoPaQuedarseEnElMolde manoDeAnchos mmanoConCartasDemas mmanoConCartasDeMenos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:10' prior: 50900454!
test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	ronda manoJuega: (CartaDeTruco bastoCon: 2).
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:10' prior: 50900388!
test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:10' prior: 50900441!
test11RepedidoDel_test09

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900489!
test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado

	|  ronda  |
	
		
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco copaCon: 7).
	
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900534!
test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900180!
test06NoPuedeHaberCartasRepetidasEntreLasManos

	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: mmanoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900403 overrides: 16927572!
setUp

	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	mmanoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	mmanoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900506!
test08SePuedeVerLaUltimaCartaJugada

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).

	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900158!
test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas

	self
		should: [ RondaDeTruco mano: mmanoConCartasDeMenos pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900472!
test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900169!
test05ElPieTieneQueArrancarConTresCartas

	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: mmanoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900521!
test07LaManoNoPuedeJugarUnaCartaQueNoTiene

	| ronda |
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900147!
test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas

	self
		should: [ RondaDeTruco mano: mmanoConCartasDemas pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900428!
test02NoPuedeArrancarJugandoElPie

	| ronda |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:11' prior: 50900550!
test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco copaCon: 7).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:25:14'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'manoFuerte manoPaQuedarseEnElMolde manoDeAnchos manoConCartasDemas mmanoConCartasDeMenos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:14' prior: 50900667 overrides: 16927572!
setUp

	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	mmanoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:14' prior: 50900759!
test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas

	self
		should: [ RondaDeTruco mano: manoConCartasDemas pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:25:18'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'manoFuerte manoPaQuedarseEnElMolde manoDeAnchos manoConCartasDemas manoConCartasDeMenos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:18' prior: 50900735!
test05ElPieTieneQueArrancarConTresCartas

	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:18' prior: 50900655!
test06NoPuedeHaberCartasRepetidasEntreLasManos

	self
		should: [ RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:18' prior: 50900811 overrides: 16927572!
setUp

	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco copaCon: 7).
		
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:25:18' prior: 50900707!
test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas

	self
		should: [ RondaDeTruco mano: manoConCartasDeMenos pie: manoPaQuedarseEnElMolde ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:25:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:25:22'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:27:54'!
test16

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco copaCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:28:17' prior: 50900881 overrides: 16927572!
setUp

	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoPaQuedarseEnElMolde := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco bastoCon: 6).
		
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !

!testRun: #RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:28:24'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:28:48' prior: 50900976!
test16

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco bastoCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:28:52' prior: 50901018!
test16

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:29:00' prior: 50900718!
test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:29:04' prior: 50900577!
test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 2).
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:29:07' prior: 50900783!
test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:29:10' prior: 50900639!
test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:29:14' prior: 50900609!
test11RepedidoDel_test09

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoPaQuedarseEnElMolde.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:29:18' prior: 50900622!
test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado

	|  ronda  |
	
		
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco copaCon: 7).
	
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !

!testRun: #RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:29:26'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:29:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:29:26'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:29:38' prior: 50901129!
test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado

	|  ronda  |
	
		
	ronda := RondaDeTruco mano: manoPaQuedarseEnElMolde pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco bastoCon: 6).
	
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:29:39'!
PASSED!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:30:03'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'manoFuerte manoCon456DeBasto manoDeAnchos manoConCartasDemas manoConCartasDeMenos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50900746!
test07LaManoNoPuedeJugarUnaCartaQueNoTiene

	| ronda |
	ronda := RondaDeTruco mano: manoFuerte pie: manoCon456DeBasto.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50901033!
test16

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50901100!
test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50901210!
test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado

	|  ronda  |
	
		
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco bastoCon: 6).
	
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50901083!
test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50900906!
test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas

	self
		should: [ RondaDeTruco mano: manoConCartasDeMenos pie: manoCon456DeBasto ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50900836!
test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas

	self
		should: [ RondaDeTruco mano: manoConCartasDemas pie: manoCon456DeBasto ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50900869!
test06NoPuedeHaberCartasRepetidasEntreLasManos

	self
		should: [ RondaDeTruco mano: manoCon456DeBasto pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50900991 overrides: 16927572!
setUp

	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	manoFuerte := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoCon456DeBasto := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco bastoCon: 6).
		
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50901048!
test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoFuerte.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50901065!
test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 2).
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50900858!
test05ElPieTieneQueArrancarConTresCartas

	self
		should: [ RondaDeTruco mano: manoCon456DeBasto pie: manoConCartasDeMenos ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco manoInvalidaErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50900595!
test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50900770!
test02NoPuedeArrancarJugandoElPie

	| ronda |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoCon456DeBasto.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50900692!
test08SePuedeVerLaUltimaCartaJugada

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).

	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:03' prior: 50901116!
test11RepedidoDel_test09

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoFuerte pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:30:46'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'manoCon123DeEspada manoCon456DeBasto manoDeAnchos manoConCartasDemas manoConCartasDeMenos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901507!
test08SePuedeVerLaUltimaCartaJugada

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).

	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901360!
test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self
		should: [ ronda manoJuega: (CartaDeTruco oroCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901435!
test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon123DeEspada.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901327!
test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901522!
test11RepedidoDel_test09

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901451!
test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 2).
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901299!
test07LaManoNoPuedeJugarUnaCartaQueNoTiene

	| ronda |
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901480!
test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco oroCon: 7).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901343!
test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado

	|  ronda  |
	
		
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon123DeEspada.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco bastoCon: 6).
	
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901494!
test02NoPuedeArrancarJugandoElPie

	| ronda |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901312!
test16

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon123DeEspada.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco bastoCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:46' prior: 50901411 overrides: 16927572!
setUp

	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	manoCon123DeEspada := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco bastoCon: 2)
		with: (CartaDeTruco oroCon: 7).
		
	manoCon456DeBasto := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco bastoCon: 6).
		
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:30:58' prior: 50901716 overrides: 16927572!
setUp

	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	manoCon123DeEspada := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco espadaCon: 2)
		with: (CartaDeTruco espadaCon: 3).
		
	manoCon456DeBasto := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco bastoCon: 6).
		
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:31:34' prior: 50901546!
test08SePuedeVerLaUltimaCartaJugada

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco espadaCon: 3).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco oroCon: 7).

	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:31:48' prior: 50901657!
test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco espadaCon: 3).
	ronda pieJuega: (CartaDeTruco bastoCon: 4).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:32:14' prior: 50901671!
test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado

	|  ronda  |
	
		
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon123DeEspada.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco bastoCon: 6).
	
	ronda pieJuega: (CartaDeTruco espadaCon: 3).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:32:18' prior: 50901795!
test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado

	|  ronda  |
	
		
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon123DeEspada.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco bastoCon: 6).
	
	ronda pieJuega: (CartaDeTruco espadaCon: 2).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:32:25' prior: 50901612!
test11RepedidoDel_test09

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco espadaCon: 3).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:32:28' prior: 50901595!
test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco espadaCon: 3).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:32:34' prior: 50901561!
test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco espadaCon: 3).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	self
		should: [ ronda manoJuega: (CartaDeTruco espadaCon: 3) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:32:43' prior: 50901625!
test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco espadaCon: 3).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	ronda manoJuega: (CartaDeTruco espadaCon: 2).
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 7) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:33:00' prior: 50901876!
test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco espadaCon: 3).
	ronda pieJuega: (CartaDeTruco bastoCon: 6).
	ronda manoJuega: (CartaDeTruco espadaCon: 2).
	self
		should: [ ronda pieJuega: (CartaDeTruco bastoCon: 6) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco noSePuedeJugarConLoQueNoSeTieneErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:33:12' prior: 50901578!
test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon123DeEspada.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco espadaCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:33:18' prior: 50901701!
test16

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon123DeEspada.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco espadaCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:33:23'!
FAILURE!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:33:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:33:23'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:33:32' prior: 50901766!
test08SePuedeVerLaUltimaCartaJugada

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon123DeEspada pie: manoCon456DeBasto.
	ronda manoJuega: (CartaDeTruco espadaCon: 3).
	
	"De alguna forma el pie tiene que ver a que tiene que ganarle"
	"Siendo dos alcanza con ver la ultima carta"
	self assert: ronda ultimaCartaJugada equals: (CartaDeTruco espadaCon: 3).

	
	! !

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:33:33'!
ERROR!

!testRun: #RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:33:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:33:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:33:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:33:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:34:16'!
PASSED!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:34:49'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'manoCon123DeEspada manoCon456DeBasto manoDeAnchos manoConCartasDemas manoConCartasDeMenos manoCon456DeCopa'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:34:44' prior: 50901741 overrides: 16927572!
setUp

	manoDeAnchos := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeEspada.
		
	manoCon123DeEspada := Bag
		with: CartaDeTruco anchoDeEspada
		with: (CartaDeTruco espadaCon: 2)
		with: (CartaDeTruco espadaCon: 3).
		
	manoCon456DeBasto := Bag
		with: (CartaDeTruco bastoCon: 5)
		with: (CartaDeTruco bastoCon: 4)
		with: (CartaDeTruco bastoCon: 6).
		
	manoCon456DeCopa := Bag
		with: (CartaDeTruco copaCon: 5)
		with: (CartaDeTruco copaCon: 4)
		with: (CartaDeTruco copaCon: 6).
		
	manoConCartasDemas := Bag
		with: CartaDeTruco anchoDeEspada
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeOro
		with: CartaDeTruco sieteDeEspada.
		
	manoConCartasDeMenos := Bag
		with: CartaDeTruco anchoDeBasto
		with: CartaDeTruco sieteDeEspada.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:35:33' prior: 50901929!
test16

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco espadaCon: 2).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:35:49' prior: 50902187!
test16

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:36:23' prior: 50902202!
test16

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:36:51'!
test16AlEmpardarLaPrimeraDebeComenzarLaMano

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:37:15' prior: 50902235!
test16AlEmpardarLaPrimeraDebeComenzarLaMano

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 19:37:25'!
FAILURE!

!methodRemoval: RondaDeTrucoTest #test16 stamp: 'nz 7/5/2021 19:37:30'!
test16

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self deny: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self deny: ronda elUltimoEnfrentamientoLoGanoElPie.
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 5) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
		!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 19:37:39'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:38:49' prior: 50899794!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	
	(unaCartaDeTruco empardaCon: ultimaCartaJugada)
		ifTrue: [
			resultadoUltimoEnfrentamiento := #parda.		
			leTocaJugarALaMano := true.
		].
	(unaCartaDeTruco mataA: ultimaCartaJugada)
		ifTrue: [ 
			resultadoUltimoEnfrentamiento := #ganoPie.		
			leTocaJugarALaMano := false.
		]
		ifFalse: [ 
			resultadoUltimoEnfrentamiento := #ganoMano.
			leTocaJugarALaMano := true.
		].
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:39:00' prior: 50902297!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	
	(unaCartaDeTruco empardaCon: ultimaCartaJugada)
		ifTrue: [
			resultadoUltimoEnfrentamiento := #parda.		
			leTocaJugarALaMano := true.
			^nil.
		].
	(unaCartaDeTruco mataA: ultimaCartaJugada)
		ifTrue: [ 
			resultadoUltimoEnfrentamiento := #ganoPie.		
			leTocaJugarALaMano := false.
		]
		ifFalse: [ 
			resultadoUltimoEnfrentamiento := #ganoMano.
			leTocaJugarALaMano := true.
		].
	
	! !

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 19:39:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 19:39:10'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:53:12'!
test17

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 4) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
		! !

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 19:53:14'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:55:24' prior: 50902406!
test17

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self assert: ronda ganoElPie.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 4) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
		! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 19:56:56'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie leTocaJugarALaMano ultimaCartaJugada resultadoUltimoEnfrentamiento manoArrancoElEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:56:54' prior: 50902320!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifTrue: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				^nil.
			].
		(unaCartaDeTruco mataA: ultimaCartaJugada)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
			].
	].
	
	! !
!RondaDeTruco methodsFor: 'inicializacion' stamp: 'nz 7/5/2021 19:57:06' prior: 50898278!
initializeMano: lasCartasDeLaMano pie: lasCartasDelPie 
	
	cartasDeLaMano := lasCartasDeLaMano.
	cartasDelPie := lasCartasDelPie.
	leTocaJugarALaMano := true.
	manoArrancoElEnfrentamiento := true.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:57:42' prior: 50902459!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifTrue: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(unaCartaDeTruco mataA: ultimaCartaJugada)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
			].
	].
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:57:50' prior: 50902494!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifTrue: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(unaCartaDeTruco mataA: ultimaCartaJugada)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			].
	].
	
	! !

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 19:57:53'!
ERROR!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 19:58:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 19:58:11'!
ERROR!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 19:58:29'!
ERROR!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 19:58:34'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:59:12' prior: 50902521!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifTrue: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(unaCartaDeTruco mataA: ultimaCartaJugada)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			].
	] ifFalse: [
		leTocaJugarALaMano := true.
	].
	
	! !

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 19:59:16'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:59:23'!
ganoElPie
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:59:26' prior: 50902594!
ganoElPie
	^true.! !

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 19:59:27'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:59:40'!
laRondaYaTerminoErrorDescription
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 19:59:54' prior: 50902605!
laRondaYaTerminoErrorDescription
	^'La ronda ya termino, no se puede seguir jugando cartas!!'.! !

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 19:59:56'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:01:30'!
test18

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	self assert: ronda ganoElPie.
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 4) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
		! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:02:10' prior: 50902620!
test18

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self assert: ronda ganoLaMano.! !

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:02:12'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:02:48' prior: 50899817!
manoJuega: unaCartaDeTruco 

	self leTocaALaMano ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDeLaMano remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	leTocaJugarALaMano := false.
	ultimaCartaJugada := unaCartaDeTruco.
	
	manoArrancoElEnfrentamiento ifTrue: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(unaCartaDeTruco mataA: ultimaCartaJugada)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			].
	] ifFalse: [
		leTocaJugarALaMano := true.
	].
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:03:16' prior: 50902660!
manoJuega: unaCartaDeTruco 

	self leTocaALaMano ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDeLaMano remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	leTocaJugarALaMano := false.
	ultimaCartaJugada := unaCartaDeTruco.
	
	manoArrancoElEnfrentamiento ifTrue: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(unaCartaDeTruco mataA: ultimaCartaJugada)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			].
	] ifFalse: [
		leTocaJugarALaMano := false.
	].
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:04:43' prior: 50902693!
manoJuega: unaCartaDeTruco 

	self leTocaALaMano ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDeLaMano remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifFalse: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(ultimaCartaJugada mataA: unaCartaDeTruco)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			].
	] ifTrue: [
		leTocaJugarALaMano := false.
		ultimaCartaJugada := unaCartaDeTruco.
	].

	
	
	! !

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:05:00'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:05:08'!
ganoLaMano
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:05:10' prior: 50902760!
ganoLaMano
	^true.! !

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:05:12'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:05:12'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:06:06' prior: 50902562!
pieJuega: unaCartaDeTruco 

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifTrue: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(unaCartaDeTruco mataA: ultimaCartaJugada)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			].
	] ifFalse: [
		leTocaJugarALaMano := true.
		ultimaCartaJugada := unaCartaDeTruco.
	].
	
	! !

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:06:08'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:06:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:06:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:06:29'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:07:00' prior: 50902428!
test17

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self assert: ronda ganoElPie.
	
	"
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 4) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	"! !

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:07:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:07:05'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:07:32'!
test19

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 4) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	! !

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:07:35'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:08:37' prior: 50902838!
pieJuega: unaCartaDeTruco 

	self rondaEnJuego ifFalse: [
		self error: self class laRondaYaTerminoErrorDescription
	].

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifTrue: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(unaCartaDeTruco mataA: ultimaCartaJugada)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			].
	] ifFalse: [
		leTocaJugarALaMano := true.
		ultimaCartaJugada := unaCartaDeTruco.
	].
	
	! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 20:08:49'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie leTocaJugarALaMano ultimaCartaJugada resultadoUltimoEnfrentamiento manoArrancoElEnfrentamiento rondaEnJuego'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:08:47' prior: 50903047!
pieJuega: unaCartaDeTruco 

	rondaEnJuego ifFalse: [
		self error: self class laRondaYaTerminoErrorDescription
	].

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifTrue: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(unaCartaDeTruco mataA: ultimaCartaJugada)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			].
	] ifFalse: [
		leTocaJugarALaMano := true.
		ultimaCartaJugada := unaCartaDeTruco.
	].
	
	! !
!RondaDeTruco methodsFor: 'inicializacion' stamp: 'nz 7/5/2021 20:08:58' prior: 50902484!
initializeMano: lasCartasDeLaMano pie: lasCartasDelPie 
	
	cartasDeLaMano := lasCartasDeLaMano.
	cartasDelPie := lasCartasDelPie.
	leTocaJugarALaMano := true.
	manoArrancoElEnfrentamiento := true.
	rondaEnJuego := true.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:10:29' prior: 50902726!
manoJuega: unaCartaDeTruco 

	self leTocaALaMano ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDeLaMano remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifFalse: [
		(unaCartaDeTruco empardaCon: ultimaCartaJugada)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(ultimaCartaJugada mataA: unaCartaDeTruco)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento = #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			].
	] ifTrue: [
		leTocaJugarALaMano := false.
		ultimaCartaJugada := unaCartaDeTruco.
	].

	
	
	! !

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:10:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:10:33'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:13:30'!
resolverEnfrentamientoEntre: laCartaDeLaMano y: laCartaDelPie 
		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:13:46'!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 
		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !

!methodRemoval: RondaDeTruco #resolverEnfrentamientoEntre:y: stamp: 'nz 7/5/2021 20:13:46'!
resolverEnfrentamientoEntre: laCartaDeLaMano y: laCartaDelPie 
		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:14:26' prior: 50903094!
pieJuega: unaCartaDeTruco 

	rondaEnJuego ifFalse: [
		self error: self class laRondaYaTerminoErrorDescription
	].

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifTrue: [
		self resolverEnfrentamientoEntreMano: ultimaCartaJugada yPie: unaCartaDeTruco.
	] ifFalse: [
		leTocaJugarALaMano := true.
		ultimaCartaJugada := unaCartaDeTruco.
	].
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:14:48' prior: 50903138!
manoJuega: unaCartaDeTruco 

	self leTocaALaMano ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDeLaMano remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifFalse: [
		self resolverEnfrentamientoEntreMano: unaCartaDeTruco yPie: ultimaCartaJugada.
	] ifTrue: [
		leTocaJugarALaMano := false.
		ultimaCartaJugada := unaCartaDeTruco.
	].

	
	
	! !

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:14:51'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:15:40' prior: 50903262!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 
		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento = #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:15:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:15:44'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:15:51' prior: 50903347!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento = #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:16:54' prior: 50903027!
test19

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self assert: ronda ganoLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:07:32' prior: 50903465!
test19

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 4) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:17:12'!
test20

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self assert: ronda ganoLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:17:28' prior: 50903500!
test20

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 3) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	! !

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:17:31'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:17:55' prior: 50903326!
manoJuega: unaCartaDeTruco 

	rondaEnJuego ifFalse: [
		self error: self class laRondaYaTerminoErrorDescription
	].

	self leTocaALaMano ifFalse: [
		self error: self class turnoIncorrectoErrorDescription
	].

	cartasDeLaMano remove: unaCartaDeTruco ifAbsent: [ self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifFalse: [
		self resolverEnfrentamientoEntreMano: unaCartaDeTruco yPie: ultimaCartaJugada.
	] ifTrue: [
		leTocaJugarALaMano := false.
		ultimaCartaJugada := unaCartaDeTruco.
	].

	
	
	! !

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:17:56'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:18:12' prior: 50903440!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento = #ganoMano)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento = #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:18:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:18:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:18:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:18:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:18:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:18:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:18:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:18:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:18:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:18:14'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:18:31' prior: 50902941!
test17

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self assert: ronda ganoElPie.
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:19:16' prior: 50903663!
test17

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self assert: ronda ganoElPie.
	self deny: ronda ganoLaMano.
	! !

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:19:21'!
FAILURE!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 20:20:30'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie leTocaJugarALaMano ultimaCartaJugada resultadoUltimoEnfrentamiento manoArrancoElEnfrentamiento rondaEnJuego puntosMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'nz 7/5/2021 20:20:31'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie leTocaJugarALaMano ultimaCartaJugada resultadoUltimoEnfrentamiento manoArrancoElEnfrentamiento rondaEnJuego puntosMano puntosPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'inicializacion' stamp: 'nz 7/5/2021 20:20:28' prior: 50903128!
initializeMano: lasCartasDeLaMano pie: lasCartasDelPie 
	
	cartasDeLaMano := lasCartasDeLaMano.
	cartasDelPie := lasCartasDelPie.
	leTocaJugarALaMano := true.
	manoArrancoElEnfrentamiento := true.
	rondaEnJuego := true.
	puntosMano := 0.
	puntosPie := 0.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:20:51' prior: 50903564!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento = #ganoMano)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				puntosMano := puntosMano + 1.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento = #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:21:05' prior: 50903733!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento = #ganoMano)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				leTocaJugarALaMano := true.
				puntosMano := puntosMano + 1.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento = #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				leTocaJugarALaMano := false.
				puntosPie := puntosPie + 1.
				manoArrancoElEnfrentamiento := false.
			].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:21:11' prior: 50903762!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento := #parda.		
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento = #ganoMano)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				puntosMano := puntosMano + 1.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento = #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				puntosPie := puntosPie + 1.
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:21:38' prior: 50902599!
ganoElPie
	^puntosPie > puntosMano.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:21:50' prior: 50902765!
ganoLaMano
	^puntosMano > puntosPie.! !

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:21:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:21:51'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:23:09'!
test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 3) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:23:20' prior: 50903902!
test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 3) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:23:50' prior: 50903925!
test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 6) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:23:54' prior: 50903948!
test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 6) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription .
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:23:54' prior: 50903968!
test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	
	self
		should: [ ronda manoJuega: (CartaDeTruco bastoCon: 6) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco turnoIncorrectoErrorDescription.
	! !

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:23:57'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:26:18' prior: 50903792!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				
				resultadoUltimoEnfrentamiento ifNil: [
					leTocaJugarALaMano := true.
					manoArrancoElEnfrentamiento := true.
				] ifNotNil: [
					(resultadoUltimoEnfrentamiento = #ganoMano) ifTrue: [ 
						leTocaJugarALaMano := true.
					] ifFalse: [
						leTocaJugarALaMano := false.
					].
				].
				resultadoUltimoEnfrentamiento := #parda.		
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento = #ganoMano)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				puntosMano := puntosMano + 1.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento = #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				puntosPie := puntosPie + 1.
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:26:23' prior: 50904013!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				
				resultadoUltimoEnfrentamiento ifNil: [
					leTocaJugarALaMano := true.
					manoArrancoElEnfrentamiento := true.
				] ifNotNil: [
					(resultadoUltimoEnfrentamiento = #ganoMano) ifTrue: [ 
						leTocaJugarALaMano := true.
						manoArrancoElEnfrentamiento := true.
					] ifFalse: [
						leTocaJugarALaMano := false.
						manoArrancoElEnfrentamiento := true.
					].
				].
				resultadoUltimoEnfrentamiento := #parda.		
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento = #ganoMano)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				puntosMano := puntosMano + 1.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento = #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				puntosPie := puntosPie + 1.
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:27:08' prior: 50904050!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				
				resultadoUltimoEnfrentamiento ifNil: [
					leTocaJugarALaMano := true.
					manoArrancoElEnfrentamiento := true.
				] ifNotNil: [
					(resultadoUltimoEnfrentamiento = #ganoPie) ifTrue: [ 
						leTocaJugarALaMano := false.
						manoArrancoElEnfrentamiento := true.
					] ifFalse: [
						leTocaJugarALaMano := true.
						manoArrancoElEnfrentamiento := true.
					].
				].
				resultadoUltimoEnfrentamiento := #parda.		
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento = #ganoMano)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				puntosMano := puntosMano + 1.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento = #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				puntosPie := puntosPie + 1.
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:27:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:28:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:28:50'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:29:18'!
test22SiLaRondaNoTerminoEntoncesNoGanoNadie

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:29:41' prior: 50904285!
test22SiLaRondaNoTerminoEntoncesNoGanoNadie

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	self deny: ronda ganoLaMano.
	self deny: ronda ganoLaMano.! !

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:29:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:29:44'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:29:49' prior: 50904293!
test22SiLaRondaNoTerminoEntoncesNoGanoNadie

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	self deny: ronda ganoLaMano.
	self deny: ronda ganoElPie.! !

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:29:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:29:50'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:30:05' prior: 50904383!
test22SiLaRondaNoTerminoEntoncesNoGanoNadie

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	self deny: ronda ganoLaMano.
	self deny: ronda ganoElPie.! !

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:30:07'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:30:35' prior: 50903822!
ganoElPie
	^(puntosPie > puntosMano) and: [ rondaEnJuego not ]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:30:38' prior: 50904489!
ganoElPie
	^(puntosPie > puntosMano) and: [ rondaEnJuego not ].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:30:54' prior: 50904495!
ganoElPie
	^rondaEnJuego not and: [ puntosPie > puntosMano ].! !

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:30:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:30:57'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:31:15' prior: 50903827!
ganoLaMano
	^rondaEnJuego not and: [ puntosMano > puntosPie ].! !

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:31:16'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:32:35'!
test17GanaElPieEnElSegundoEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self assert: ronda ganoElPie.
	self deny: ronda ganoLaMano.
	! !

!methodRemoval: RondaDeTrucoTest #test17 stamp: 'nz 7/5/2021 20:32:35'!
test17

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	self assert: ronda elUltimoEnfrentamientoLoGanoElPie.
	self assert: ronda ganoElPie.
	self deny: ronda ganoLaMano.
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:32:49'!
test18GanaLaManoEnElTercerEnfrentamiento

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self assert: ronda ganoLaMano.! !

!methodRemoval: RondaDeTrucoTest #test18 stamp: 'nz 7/5/2021 20:32:49'!
test18

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda elUltimoEnfrentamientoLoGanoLaMano.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self assert: ronda ganoLaMano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:33:05'!
test19ElPieNoPuedeContinuarJugandoCuandoLaRondaTermino

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 4) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	! !

!methodRemoval: RondaDeTrucoTest #test19 stamp: 'nz 7/5/2021 20:33:05'!
test19

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 4) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:33:21'!
test20LaManoNoPuedeContinuarJugandoCuandoLaRondaTermino

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 3) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	! !

!methodRemoval: RondaDeTrucoTest #test20 stamp: 'nz 7/5/2021 20:33:21'!
test20

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	
	self
		should: [ ronda pieJuega: (CartaDeTruco copaCon: 3) ]
		raise: Error - MessageNotUnderstood
		withMessageText: RondaDeTruco laRondaYaTerminoErrorDescription.
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:34:15'!
test23

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda ganoLaMano .
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:34:29' prior: 50904813!
test23

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	self assert: ronda ganoLaMano.
	self deny: ronda ganoElPie.
	! !

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:34:31'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:34:41' prior: 50904826!
test23

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self assert: ronda ganoLaMano.
	self deny: ronda ganoElPie.
	! !

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:34:43'!
FAILURE!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:34:54'!
ERROR!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:35:01'!
FAILURE!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:35:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:35:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:35:44'!
ERROR!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:36:16'!
ERROR!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:36:39'!
FAILURE!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:36:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:36:53'!
ERROR!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:36:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:36:59'!
ERROR!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:37:01'!
ERROR!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:37:05'!
ERROR!

rondaEnJuego!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:39:36' prior: 50904090!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				
				resultadoUltimoEnfrentamiento ifNil: [
					leTocaJugarALaMano := true.
					manoArrancoElEnfrentamiento := true.
				] ifNotNil: [
					(resultadoUltimoEnfrentamiento = #ganoPie) ifTrue: [ 
						leTocaJugarALaMano := false.
						manoArrancoElEnfrentamiento := true.
					] ifFalse: [
						leTocaJugarALaMano := true.
						manoArrancoElEnfrentamiento := true.
					].
				].
				resultadoUltimoEnfrentamiento := #parda.		
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento = #ganoMano)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				puntosMano := puntosMano + 1.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento ~= #ganoMano)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				puntosPie := puntosPie + 1.
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:39:41' prior: 50904891!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				
				resultadoUltimoEnfrentamiento ifNil: [
					leTocaJugarALaMano := true.
					manoArrancoElEnfrentamiento := true.
				] ifNotNil: [
					(resultadoUltimoEnfrentamiento = #ganoPie) ifTrue: [ 
						leTocaJugarALaMano := false.
						manoArrancoElEnfrentamiento := true.
					] ifFalse: [
						leTocaJugarALaMano := true.
						manoArrancoElEnfrentamiento := true.
					].
				].
				resultadoUltimoEnfrentamiento := #parda.		
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento ~= #ganoPie)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				puntosMano := puntosMano + 1.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento ~= #ganoMano)
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				puntosPie := puntosPie + 1.
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:39:43'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:39:43'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:39:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:39:43'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test17GanaElPieEnElSegundoEnfrentamiento stamp: 'nz 7/5/2021 20:39:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test18GanaLaManoEnElTercerEnfrentamiento stamp: 'nz 7/5/2021 20:39:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test19ElPieNoPuedeContinuarJugandoCuandoLaRondaTermino stamp: 'nz 7/5/2021 20:39:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test20LaManoNoPuedeContinuarJugandoCuandoLaRondaTermino stamp: 'nz 7/5/2021 20:39:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:39:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:39:43'!
FAILURE!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:39:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:39:48'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:40:38' prior: 50904931!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				
				resultadoUltimoEnfrentamiento ifNil: [
					leTocaJugarALaMano := true.
					manoArrancoElEnfrentamiento := true.
				] ifNotNil: [
					(resultadoUltimoEnfrentamiento = #ganoPie) ifTrue: [ 
						leTocaJugarALaMano := false.
						manoArrancoElEnfrentamiento := true.
					] ifFalse: [
						leTocaJugarALaMano := true.
						manoArrancoElEnfrentamiento := true.
					].
				].
				resultadoUltimoEnfrentamiento := #parda.		
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento isNotNil and: [resultadoUltimoEnfrentamiento ~= #ganoPie])
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				puntosMano := puntosMano + 1.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento isNotNil and: [resultadoUltimoEnfrentamiento ~= #ganoMano])
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				puntosPie := puntosPie + 1.
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:40:40'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:41:49' prior: 50905061!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				
				resultadoUltimoEnfrentamiento ifNil: [
					leTocaJugarALaMano := true.
					manoArrancoElEnfrentamiento := true.
				] ifNotNil: [
					(resultadoUltimoEnfrentamiento = #ganoPie) ifTrue: [ 
						leTocaJugarALaMano := false.
						manoArrancoElEnfrentamiento := true.
					] ifFalse: [
						leTocaJugarALaMano := true.
						manoArrancoElEnfrentamiento := true.
					].
				].
				resultadoUltimoEnfrentamiento := #parda.		
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento notNil and: [resultadoUltimoEnfrentamiento ~= #ganoPie])
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				puntosMano := puntosMano + 1.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento notNil and: [resultadoUltimoEnfrentamiento ~= #ganoMano])
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				puntosPie := puntosPie + 1.
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test17GanaElPieEnElSegundoEnfrentamiento stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test18GanaLaManoEnElTercerEnfrentamiento stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test19ElPieNoPuedeContinuarJugandoCuandoLaRondaTermino stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test20LaManoNoPuedeContinuarJugandoCuandoLaRondaTermino stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:41:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:41:50'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:42:44'!
test23SiManoGanaLuegoDePardarEnLaPrimeraGanaLaRonda

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self assert: ronda ganoLaMano.
	self deny: ronda ganoElPie.
	! !

!methodRemoval: RondaDeTrucoTest #test23 stamp: 'nz 7/5/2021 20:42:44'!
test23

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 6).
	ronda pieJuega: (CartaDeTruco copaCon: 4).
	self assert: ronda ganoLaMano.
	self deny: ronda ganoElPie.
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:43:14'!
test24SiElPieGanaLuegoDePardarEnLaPrimeraGanaLaRonda

	|  ronda  |
	
	ronda := RondaDeTruco mano: manoCon456DeBasto pie: manoCon456DeCopa.
	ronda manoJuega: (CartaDeTruco bastoCon: 5).
	ronda pieJuega: (CartaDeTruco copaCon: 5).
	ronda manoJuega: (CartaDeTruco bastoCon: 4).
	ronda pieJuega: (CartaDeTruco copaCon: 6).
	self assert: ronda ganoElPie.
	self deny: ronda ganoLaMano.
	! !

!testRun: #RondaDeTrucoTest #test24SiElPieGanaLuegoDePardarEnLaPrimeraGanaLaRonda stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidasEnLaMano stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoPuedeArrancarJugandoElPie stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test03LaManoSePuedeTenerUnaManoDeMasDeTresCartas stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoNoPuedeTenerUnaManoDeMenosDeTresCartas stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ElPieTieneQueArrancarConTresCartas stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoPuedeHaberCartasRepetidasEntreLasManos stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test07LaManoNoPuedeJugarUnaCartaQueNoTiene stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeVerLaUltimaCartaJugada stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnUnEnfrentamientoDondeLaManoGanaCambiaElResultado stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnUnEnfrentamientoDondeElPieGanaCambiaElResultado stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test11RepedidoDel_test09 stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test12PieNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test13ManoNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test14PieNoPuedeJugarUnaCartaQueJugoEnOtroEnfrentamiento stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ManoNoPuedeComenzarElSegundoEnfrentamientoSiNoGanoElPrimero stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test16AlEmpardarLaPrimeraDebeComenzarLaMano stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test17GanaElPieEnElSegundoEnfrentamiento stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test18GanaLaManoEnElTercerEnfrentamiento stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test19ElPieNoPuedeContinuarJugandoCuandoLaRondaTermino stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test20LaManoNoPuedeContinuarJugandoCuandoLaRondaTermino stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test21AlEmpardarEnElSegundoEnfrentamientoComienzaElGanadorDelPrimerEnfrentamiento stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test22SiLaRondaNoTerminoEntoncesNoGanoNadie stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test23SiManoGanaLuegoDePardarEnLaPrimeraGanaLaRonda stamp: 'nz 7/5/2021 20:43:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test24SiElPieGanaLuegoDePardarEnLaPrimeraGanaLaRonda stamp: 'nz 7/5/2021 20:43:15'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:44:11' prior: 50905106!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento ifNil: [
					leTocaJugarALaMano := true.
					manoArrancoElEnfrentamiento := true.
				] ifNotNil: [
					(resultadoUltimoEnfrentamiento = #ganoPie) ifTrue: [ 
						leTocaJugarALaMano := false.
						manoArrancoElEnfrentamiento := true.
					] ifFalse: [
						leTocaJugarALaMano := true.
						manoArrancoElEnfrentamiento := true.
					].
				].
				resultadoUltimoEnfrentamiento := #parda.		
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento notNil and: [resultadoUltimoEnfrentamiento ~= #ganoPie])
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				puntosMano := puntosMano + 1.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento notNil and: [resultadoUltimoEnfrentamiento ~= #ganoMano])
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				puntosPie := puntosPie + 1.
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:44:49' prior: 50903305!
pieJuega: unaCartaDeTruco 

	rondaEnJuego ifFalse: [
		self error: self class laRondaYaTerminoErrorDescription ].

	self leTocaAlPie ifFalse: [
		self error: self class turnoIncorrectoErrorDescription ].

	cartasDelPie remove: unaCartaDeTruco ifAbsent: [
		self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifTrue: [
		self resolverEnfrentamientoEntreMano: ultimaCartaJugada yPie: unaCartaDeTruco.
	] ifFalse: [
		leTocaJugarALaMano := true.
		ultimaCartaJugada := unaCartaDeTruco.
	].
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 20:45:00' prior: 50903541!
manoJuega: unaCartaDeTruco 

	rondaEnJuego ifFalse: [
		self error: self class laRondaYaTerminoErrorDescription ].

	self leTocaALaMano ifFalse: [
		self error: self class turnoIncorrectoErrorDescription ].

	cartasDeLaMano remove: unaCartaDeTruco ifAbsent: [
		self error: self class noSePuedeJugarConLoQueNoSeTieneErrorDescription ].
	
	manoArrancoElEnfrentamiento ifFalse: [
		self resolverEnfrentamientoEntreMano: unaCartaDeTruco yPie: ultimaCartaJugada.
	] ifTrue: [
		leTocaJugarALaMano := false.
		ultimaCartaJugada := unaCartaDeTruco.
	].

	
	
	! !

----SNAPSHOT----(5 July 2021 20:47:25) CuisUniversity-4532.image priorSource: 18075671!

----STARTUP---- (5 July 2021 21:53:41) as /home/nikita/r/f/isw1/cuis_examen (copy)/linux64/CuisUniversity-4532.image!

!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'nz 7/5/2021 21:56:42' prior: 50905372!
resolverEnfrentamientoEntreMano: laCartaDeLaMano yPie: laCartaDelPie 

	"HOHOHO, deje el paso 3 para ultimo momento mientras alimentaba esta mara�a de ifs"
	"Cuando quise comenzar a refactorizar se me fue el tiempo pensando en como separarlo :("
		(laCartaDeLaMano empardaCon: laCartaDelPie)
			ifTrue: [
				resultadoUltimoEnfrentamiento ifNil: [
					leTocaJugarALaMano := true.
					manoArrancoElEnfrentamiento := true.
				] ifNotNil: [
					(resultadoUltimoEnfrentamiento = #ganoPie) ifTrue: [ 
						leTocaJugarALaMano := false.
						manoArrancoElEnfrentamiento := true.
					] ifFalse: [
						leTocaJugarALaMano := true.
						manoArrancoElEnfrentamiento := true.
					].
				].
				resultadoUltimoEnfrentamiento := #parda.		
				^nil.
			].
		
		(laCartaDeLaMano mataA: laCartaDelPie)
			ifTrue: [ 
				(resultadoUltimoEnfrentamiento notNil and: [resultadoUltimoEnfrentamiento ~= #ganoPie])
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoMano.
				puntosMano := puntosMano + 1.
				leTocaJugarALaMano := true.
				manoArrancoElEnfrentamiento := true.
			]
			ifFalse: [ 
				(resultadoUltimoEnfrentamiento notNil and: [resultadoUltimoEnfrentamiento ~= #ganoMano])
					ifTrue: [ rondaEnJuego := false ].
				resultadoUltimoEnfrentamiento := #ganoPie.		
				puntosPie := puntosPie + 1.
				leTocaJugarALaMano := false.
				manoArrancoElEnfrentamiento := false.
			].! !

----SNAPSHOT----(5 July 2021 21:57:45) CuisUniversity-4532.image priorSource: 18361740!

----QUIT----(5 July 2021 21:57:56) CuisUniversity-4532.image priorSource: 18363461!