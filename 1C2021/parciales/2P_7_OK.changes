

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (5 July 2021 17:23:49) as /home/julian/facu/ingenieria1/ambientesCuis/segundoParcial/CuisUniversity-4532.image!


----End fileIn of /home/julian/Descargas/2doParcial/ISW1-2021-1C-2doParcial.st----!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 17:33:41'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 17:33:41'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 17:33:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 17:33:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 17:33:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 17:33:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 17:33:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 17:33:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 17:33:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 17:33:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 17:33:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 17:33:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 17:33:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 17:33:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 17:33:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 17:33:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 17:33:46'!
PASSED!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 17:45:52'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:01:27'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:01:35'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'nil' stamp: 'JA 7/5/2021 18:01:17'!
test01
	| jugador1 jugador2 ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	ronda repartirCartas.
	
	self assert: 3 equals: jugador1 cantidadDeCartas.
	self assert: 3 equals: jugador2 cantidadDeCartas.
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:02:53' prior: 50860078!
test01
	| jugador1 jugador2 ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
		
	self assert: jugador1 noTieneCartas.
	self assert: jugador2 noTieneCartas.
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:03:09' prior: 50860090!
test01
	| jugador1 jugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
		
	self assert: jugador1 noTieneCartas.
	self assert: jugador2 noTieneCartas.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:03:15'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JA 7/5/2021 18:03:25'!
mano: aJugador pie: aJugador2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeMano: aJugador pie: aJugador2 ! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JA 7/5/2021 18:04:17' prior: 50860113!
mano: unJugadorMano pie: unJugadorPie
	
	^self new initializeMano: unJugadorMano pie: unJugadorPie .! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:04:19'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:04:26'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'unJugadorMano_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:04:27'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'unJugadorMano_CHANGE_ME unJugadorPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'JA 7/5/2021 18:04:27'!
initializeMano: unJugadorMano pie: unJugadorPie 
	self shouldBeImplemented.
	unJugadorMano_CHANGE_ME := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'JA 7/5/2021 18:04:37' prior: 50860148!
initializeMano: unJugadorMano pie: unJugadorPie 
	unJugadorMano_CHANGE_ME := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:04:40'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:04:49'!
noTieneCartas
	self shouldBeImplemented.! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:04:56' prior: 50860165!
noTieneCartas
	^true! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:04:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:04:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:05:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:05:12'!
PASSED!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:05:55'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano unJugadorPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:05:55' prior: 50860156!
initializeMano: unJugadorMano pie: unJugadorPie 
	mano := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:06:01'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:06:01' prior: 50860192!
initializeMano: unJugadorMano pie: unJugadorPie 
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:06:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:06:06'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:07:31'!
test02
	| jugador1 jugador2 ronda|
	jugador1 := Jugador new.
	jugador2 := Jugador new.	
	ronda:= RondaDeTruco mano: jugador1 pie: jugador2.
	
	ronda repartirCartas.	
		
	self deny: jugador1 noTieneCartas.
	self deny: jugador2 noTieneCartas.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 18:07:33'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:08:01'!
repartirCartas
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:10:57' prior: 50860231!
repartirCartas
	mano asignarCartas.
	pie asignarCartas.! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 18:11:05'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:11:17'!
asignarCartas
	self shouldBeImplemented.! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:11:56'!
Object subclass: #Jugador
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:11:50' prior: 50860243!
asignarCartas
	cartas := OrderedCollection new.! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 18:11:58'!
FAILURE!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:13:23' prior: 50860170!
noTieneCartas
	cartas ifNil: [^true].
	^false.! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 18:13:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:13:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 18:13:41'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:14:56'!
test03
	| jugador1 jugador2 ronda|
	jugador1 := Jugador new.
	jugador2 := Jugador new.	
	ronda:= RondaDeTruco mano: jugador1 pie: jugador2.
	
	ronda repartirCartas.	
		
	self assert: 3 jugador1 cantidadDeCartas.
	self assert: 3 jugador2 cantidadDeCartas.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 18:14:57'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:15:21' prior: 50860274!
test03
	| jugador1 jugador2 ronda|
	jugador1 := Jugador new.
	jugador2 := Jugador new.	
	ronda:= RondaDeTruco mano: jugador1 pie: jugador2.
	
	ronda repartirCartas.	
		
	self assert: 3 equals: jugador1 cantidadDeCartas.
	self assert: 3 equals: jugador2 cantidadDeCartas.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 18:15:22'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:15:31'!
cantidadDeCartas
	self shouldBeImplemented.! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:16:02' prior: 50860302!
cantidadDeCartas
	cartas ifNil:[^0].
	^cartas size.! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 18:16:04'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 18:16:11'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:19:42' prior: 50860236!
repartirCartas
	mano asignarCartas: (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4)).
	pie asignarCartas: (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4))! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 18:19:48'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:19:55'!
asignarCartas: anOrderedCollection 
	self shouldBeImplemented.! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:20:32' prior: 50860331!
asignarCartas: cartasParaJugar 
	cartas := cartasParaJugar .! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 18:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 18:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 18:20:34'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 18:21:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 18:22:22'!
PASSED!

TestCase subclass: #JugadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorTest category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:27:32'!
TestCase subclass: #JugadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #JugadorTest stamp: 'JA 7/5/2021 18:27:45'!
TestCase subclass: #JugadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRenamed: #RondaDeTrucoTest as: #JugadorTest stamp: 'JA 7/5/2021 18:28:02'!
Smalltalk renameClassNamed: #RondaDeTrucoTest as: #JugadorTest!

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 18:28:09'!
PASSED!

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 18:28:09'!
PASSED!

!testRun: #JugadorTest #test02 stamp: 'JA 7/5/2021 18:28:09'!
PASSED!

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 18:28:09'!
PASSED!
!JugadorTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:28:29' prior: 50860101!
test01
	| jugador |
	jugador := Jugador new.
	
	self assert: jugador noTieneCartas.
	
	
	
	! !

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 18:28:30'!
PASSED!

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 18:28:30'!
PASSED!

!testRun: #JugadorTest #test02 stamp: 'JA 7/5/2021 18:28:30'!
PASSED!

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 18:28:30'!
PASSED!

!methodRemoval: JugadorTest #test02 stamp: 'JA 7/5/2021 18:29:05'!
test02
	| jugador1 jugador2 ronda|
	jugador1 := Jugador new.
	jugador2 := Jugador new.	
	ronda:= RondaDeTruco mano: jugador1 pie: jugador2.
	
	ronda repartirCartas.	
		
	self deny: jugador1 noTieneCartas.
	self deny: jugador2 noTieneCartas.
	
	
	
	!
!JugadorTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:30:49' prior: 50860288!
test03
	| cartasJugador jugador |
	jugador := Jugador new.
	cartasJugador := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4)).
	
	jugador asignarCartas: cartasJugador.
	
	self assert: 3 equals: jugador cantidadDeCartas.
	
	
	
	
	! !

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 18:31:01'!
PASSED!

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 18:31:01'!
PASSED!

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 18:31:01'!
PASSED!

!methodRemoval: RondaDeTruco #repartirCartas stamp: 'JA 7/5/2021 18:31:11'!
repartirCartas
	mano asignarCartas: (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4)).
	pie asignarCartas: (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4))!
!JugadorTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:31:43'!
test02
	| cartasJugador jugador |
	jugador := Jugador new.
	cartasJugador := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4)).
	
	jugador asignarCartas: cartasJugador.
	
	self assert: 3 equals: jugador cantidadDeCartas.
	
	
	
	
	! !

!methodRemoval: JugadorTest #test03 stamp: 'JA 7/5/2021 18:31:43'!
test03
	| cartasJugador jugador |
	jugador := Jugador new.
	cartasJugador := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4)).
	
	jugador asignarCartas: cartasJugador.
	
	self assert: 3 equals: jugador cantidadDeCartas.
	
	
	
	
	!
!JugadorTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:34:28'!
test03
	| cartasJugador jugador |
	jugador := Jugador new.
	"le agrego mas de 3 cartas"
	cartasJugador := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4)).
	
	self should: [jugador asignarCartas: cartasJugador.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Jugador cantidadIncorrectaDeCartasAsignadasErrorMessage.	
	
	
	
	
	
	
	! !

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 18:34:49'!
ERROR!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:35:01'!
cantidadIncorrectaDeCartasAsignadasErrorMessage
	self shouldBeImplemented.! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:35:31' prior: 50860624!
cantidadIncorrectaDeCartasAsignadasErrorMessage
	^ 'Se repartio una cantidad de cartas distinta de 3'! !

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 18:35:32'!
FAILURE!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:38:26' prior: 50860336!
asignarCartas: cartasParaJugar 
	cartasParaJugar size ~=3 ifTrue:[self error: self class cantidadIncorrectaDeCartasAsignadasErrorMessage ].
	cartas := cartasParaJugar .! !

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 18:38:30'!
PASSED!

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 18:38:30'!
PASSED!

!testRun: #JugadorTest #test02 stamp: 'JA 7/5/2021 18:38:30'!
PASSED!

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 18:38:30'!
PASSED!
!JugadorTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:31:43' prior: 50860581!
test02
	| cartasJugador jugador |
	jugador := Jugador new.
	cartasJugador := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4)).
	
	jugador asignarCartas: cartasJugador.
	
	self assert: 3 equals: jugador cantidadDeCartas.
	
	
	
	
	! !

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:42:54'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RepartidorDeCartas category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:52:59'!
Object subclass: #RepartidorDeCartas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'nil' stamp: 'JA 7/5/2021 18:52:47'!
test01
| cartasJugador1 jugador1 jugador2 repartidorDeCartas |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 4)).	
	
	self should: [ 	repartidorDeCartas repartirAMano: cartasJugador1.]
	raise: Error -MessageNotUnderstood 
	withMessageText: RepartidorDeCartas seJuegaConUnSoloMazoErrorMessage.
	
	
	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:53:51'!
ERROR!
!RepartidorDeCartas class methodsFor: 'instance creation' stamp: 'JA 7/5/2021 18:54:04'!
mano: aJugador pie: aJugador2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeMano: aJugador pie: aJugador2 ! !
!RepartidorDeCartas class methodsFor: 'instance creation' stamp: 'JA 7/5/2021 18:55:08' prior: 50860711!
mano: unJugadorMano pie: unJugadorPie
	
	^self new initializeMano: unJugadorMano pie: unJugadorPie . ! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:55:09'!
ERROR!

!classDefinition: #RepartidorDeCartas category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:55:27'!
Object subclass: #RepartidorDeCartas
	instanceVariableNames: 'unJugadorMano_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RepartidorDeCartas category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 18:55:28'!
Object subclass: #RepartidorDeCartas
	instanceVariableNames: 'unJugadorMano_CHANGE_ME unJugadorPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RepartidorDeCartas methodsFor: 'initialization' stamp: 'JA 7/5/2021 18:55:28'!
initializeMano: unJugadorMano pie: unJugadorPie 
	self shouldBeImplemented.
	unJugadorMano_CHANGE_ME := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !
!RepartidorDeCartas methodsFor: 'initialization' stamp: 'JA 7/5/2021 18:55:38' prior: 50860747!
initializeMano: unJugadorMano pie: unJugadorPie 
	unJugadorMano_CHANGE_ME := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:55:39'!
ERROR!
!RepartidorDeCartas class methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:55:55'!
seJuegaConUnSoloMazoErrorMessage
	self shouldBeImplemented.! !
!RepartidorDeCartas class methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:56:31' prior: 50860766!
seJuegaConUnSoloMazoErrorMessage
	^ 'No se permiten cartas duplicadas. Se juega con un solo mazo.'! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 18:56:32'!
ERROR!
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 18:56:43'!
repartirAMano: anOrderedCollection 
	self shouldBeImplemented.! !

----End fileIn of /home/julian/facu/ingenieria1/ambientesCuis/segundoParcial/Packages/TerseGuide.pck.st----!
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:01:16' prior: 50860781!
repartirAMano: cartasParaMano
	(cartasParaMano anySatisfy: [:carta | cartasParaMano occurrencesOf: carta > 1]) ifTrue: [self error: self class seJuegaConUnSoloMazoErrorMessage ].! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 19:01:19'!
ERROR!
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:01:54' prior: 50863712!
repartirAMano: cartasParaMano
	(cartasParaMano anySatisfy: [:carta | (cartasParaMano occurrencesOf: carta) > 1]) ifTrue: [self error: self class seJuegaConUnSoloMazoErrorMessage ].! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 19:01:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 19:01:57'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:04:34'!
test02
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco copaCon: 6)).	
	repartidorDeCartas repartirAMano: cartasJugador1.
	
	self should: [ 	repartidorDeCartas repartirAPie: cartasJugador2.]
	raise: Error - MessageNotUnderstood 
	withMessageText: RepartidorDeCartas seJuegaConUnSoloMazoErrorMessage.
	
	
	! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 19:04:42'!
ERROR!
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:04:52'!
repartirAPie: anOrderedCollection 
	self shouldBeImplemented.! !

!classDefinition: #RepartidorDeCartas category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 19:09:07'!
Object subclass: #RepartidorDeCartas
	instanceVariableNames: 'unJugadorMano_CHANGE_ME unJugadorPie_CHANGE_ME cartasRepartidas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:08:58' prior: 50863766!
repartirAPie: cartasParaPie
	|pp|
	pp := OrderedCollection withAll: cartasRepartidas.
	pp addAll: cartasParaPie .
	
	(pp anySatisfy: [:carta | (pp occurrencesOf: carta) > 1]) ifTrue: [self error: self class seJuegaConUnSoloMazoErrorMessage ].! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 19:09:09'!
FAILURE!
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:10:25'!
assertCartasUnicas: cartasParaPie

	|pp|
	pp := OrderedCollection withAll: cartasRepartidas.
	pp addAll: cartasParaPie .
	
	(pp anySatisfy: [:carta | (pp occurrencesOf: carta) > 1]) ifTrue: [self error: self class seJuegaConUnSoloMazoErrorMessage ]! !
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:10:25' prior: 50863782!
repartirAPie: cartasParaPie
	self assertCartasUnicas: cartasParaPie.! !
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:11:18' prior: 50863724!
repartirAMano: cartasParaMano
	self assertCartasUnicas: cartasParaMano.
	cartasRepartidas addAll: cartasParaMano .! !
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:11:25' prior: 50863807!
repartirAPie: cartasParaPie
	self assertCartasUnicas: cartasParaPie.
	cartasRepartidas addAll: cartasParaPie .! !
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:11:30' prior: 50863820!
repartirAPie: cartasParaPie
	self assertCartasUnicas: cartasParaPie.
	cartasRepartidas addAll: cartasParaPie.! !
!RepartidorDeCartas methodsFor: 'initialization' stamp: 'JA 7/5/2021 19:11:48' prior: 50860756!
initializeMano: unJugadorMano pie: unJugadorPie 
	unJugadorMano_CHANGE_ME := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.
	cartasRepartidas  := OrderedCollection new.! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 19:11:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 19:11:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 19:11:50'!
PASSED!

!classDefinition: #RepartidorDeCartas category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 19:12:51'!
Object subclass: #RepartidorDeCartas
	instanceVariableNames: 'mano unJugadorPie_CHANGE_ME cartasRepartidas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:12:51' prior: 50863834!
initializeMano: unJugadorMano pie: unJugadorPie 
	mano := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.
	cartasRepartidas  := OrderedCollection new.! !

!classDefinition: #RepartidorDeCartas category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 19:12:59'!
Object subclass: #RepartidorDeCartas
	instanceVariableNames: 'mano pie cartasRepartidas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:12:59' prior: 50863860!
initializeMano: unJugadorMano pie: unJugadorPie 
	mano := unJugadorMano.
	pie := unJugadorPie.
	cartasRepartidas  := OrderedCollection new.! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 19:13:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 19:13:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 19:13:03'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:14:30'!
test03
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	self assert: 3 equals: jugador1 cantidadDeCartas.
	self assert: 3 equals: jugador2 cantidadDeCartas.
	
	
	! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 19:14:34'!
FAILURE!
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:15:14' prior: 50863813!
repartirAMano: cartasParaMano
	self assertCartasUnicas: cartasParaMano.
	cartasRepartidas addAll: cartasParaMano.
	mano asignarCartas: cartasParaMano.! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 19:15:15'!
FAILURE!
!RepartidorDeCartas methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:15:45' prior: 50863827!
repartirAPie: cartasParaPie
	self assertCartasUnicas: cartasParaPie.
	cartasRepartidas addAll: cartasParaPie.
	pie asignarCartas: cartasParaPie.! !

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 19:15:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 19:15:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 19:15:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 19:15:46'!
PASSED!

!classRenamed: #RondaDeTrucoTest as: #RepartidorDeCartasTest stamp: 'JA 7/5/2021 19:17:16'!
Smalltalk renameClassNamed: #RondaDeTrucoTest as: #RepartidorDeCartasTest!

TestCase subclass: #XXXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #XXXTest category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 19:21:37'!
TestCase subclass: #XXXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!XXXTest methodsFor: 'nil' stamp: 'JA 7/5/2021 19:27:32'!
test01
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	self should:[ jugador2 jugarCarta: (CartaDeTruco oroCon: 4).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: ''
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:29:41' prior: 50863963!
test01
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	self should:[ jugador2 jugarCarta: (CartaDeTruco oroCon: 4).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:3 equals: jugador2 cantidadDeCartas.]
	
	! !

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:29:46'!
ERROR!
!RondaDeTruco methodsFor: 'initialization' stamp: 'JA 7/5/2021 19:31:20' prior: 50860207!
initializeMano: unJugadorMano pie: unJugadorPie 
	mano := unJugadorMano.
	mano participaEnRonda: self.
	pie := unJugadorPie.
	pie participaEnRonda: self.! !

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:31:30'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:31:38'!
participaEnRonda: aRondaDeTruco 
	self shouldBeImplemented.! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 19:31:56'!
Object subclass: #Jugador
	instanceVariableNames: 'cartas rondaDeTruco'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:31:53' prior: 50864033!
participaEnRonda: aRondaDeTruco 
	rondaDeTruco := aRondaDeTruco .! !

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:31:59'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:32:10'!
jugarCarta: aCartaDeTruco 
	self shouldBeImplemented.! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:33:34' prior: 50864053!
jugarCarta: aCartaDeTruco 
	rondaDeTruco tirar: aCartaDeTruco por: self! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:33:59' prior: 50864058!
jugarCarta: aCartaDeTruco 
	rondaDeTruco jugador: self tiraCarta: aCartaDeTruco .! !

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:34:02'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:34:10'!
jugador: aJugador tiraCarta: aCartaDeTruco 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:35:35' prior: 50864072!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= mano ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage]! !

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:35:37'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:35:45'!
noEsElTurnoDelJugadorErrorMessage
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:35:56' prior: 50864087!
noEsElTurnoDelJugadorErrorMessage
	^'No es el turno del jugador.'! !

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:35:58'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:35:58'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:36:02'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:36:02'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:38:16'!
test02
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	self should:[ jugador1 jugarCarta: (CartaDeTruco oroCon: 4).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:3 equals: jugador2 cantidadDeCartas.]
	
	! !

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 19:38:19'!
FAILURE!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:38:28' prior: 50864106!
test02
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	self should:[ jugador2 jugarCarta: (CartaDeTruco oroCon: 4).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:3 equals: jugador2 cantidadDeCartas.]
	
	! !

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 19:38:29'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:38:29'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 19:38:29'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:39:32' prior: 50863990!
test01
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	self should:[ jugador1 jugarCarta: (CartaDeTruco oroCon: 4).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: Jugador elJugadorNoPoseeLaCartaIndicadaErrorMessage equals: error messageText.
		self assert:3 equals: jugador2 cantidadDeCartas.]
	
	! !

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:39:36'!
FAILURE!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:41:16' prior: 50864064!
jugarCarta: aCartaDeTruco 
	(cartas includes: aCartaDeTruco) not ifTrue: [self error: self class elJugadorNoPoseeLaCartaIndicadaErrorMessage].
	rondaDeTruco jugador: self tiraCarta: aCartaDeTruco .! !

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:41:24'!
ERROR!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:41:32'!
elJugadorNoPoseeLaCartaIndicadaErrorMessage
	self shouldBeImplemented.! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:41:48' prior: 50864223!
elJugadorNoPoseeLaCartaIndicadaErrorMessage
	^'El jugador no posee la carta indicada.'! !

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:41:50'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:41:50'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 19:41:50'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:42:41'!
test03
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	self assert:2 equals: jugador1 cantidadDeCartas.
	
	! !

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 19:42:50'!
FAILURE!
!Jugador methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:43:54' prior: 50864212!
jugarCarta: aCartaDeTruco 
	(cartas includes: aCartaDeTruco) not ifTrue: [self error: self class elJugadorNoPoseeLaCartaIndicadaErrorMessage].
	rondaDeTruco jugador: self tiraCarta: aCartaDeTruco .
	cartas remove: aCartaDeTruco.! !

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 19:43:56'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:43:56'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 19:43:56'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 19:43:56'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:45:46'!
nuevoJugador

	^ Jugador new! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:45:47' prior: 50864241!
test03
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := self nuevoJugador.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	self assert:2 equals: jugador1 cantidadDeCartas.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:45:59' prior: 50864291!
test03
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := self nuevoJugador.
	jugador2 := self nuevoJugador.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	self assert:2 equals: jugador1 cantidadDeCartas.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:46:56' prior: 50864140!
test02
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	self should:[ jugador2 jugarCarta: (CartaDeTruco oroCon: 4).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:3 equals: jugador2 cantidadDeCartas.]
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:45:47' prior: 50864317!
test03
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := self nuevoJugador.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	self assert:2 equals: jugador1 cantidadDeCartas.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:45:47' prior: 50864374!
test03
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := self nuevoJugador.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	self assert:2 equals: jugador1 cantidadDeCartas.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:47:32' prior: 50864400!
test03
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	self assert:2 equals: jugador1 cantidadDeCartas.
	
	! !

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 19:47:33'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:47:33'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 19:47:33'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 19:47:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #JugadorTest #test02 stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #RepartidorDeCartasTest #test01 stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #RepartidorDeCartasTest #test02 stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #RepartidorDeCartasTest #test03 stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 19:47:36'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 19:47:36'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:53:42'!
test04
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
		
	self should:[ jugador1 jugarCarta: (CartaDeTruco copaCon: 5).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:2 equals: jugador1 cantidadDeCartas.]
	
	
	! !

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 19:53:45'!
FAILURE!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 19:56:22'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie jugadorEnTurno'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 19:56:18' prior: 50864078!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage]! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'JA 7/5/2021 19:57:07' prior: 50864023!
initializeMano: unJugadorMano pie: unJugadorPie 
	mano := unJugadorMano.
	mano participaEnRonda: self.
	pie := unJugadorPie.
	pie participaEnRonda: self.
	jugadorEnTurno := mano.! !

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 19:57:13'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:00:53' prior: 50864589!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	jugadorEnTurno := pie.! !

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:01:04'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:01:04'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:01:04'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:01:04'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:01:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #JugadorTest #test02 stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #RepartidorDeCartasTest #test01 stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #RepartidorDeCartasTest #test02 stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #RepartidorDeCartasTest #test03 stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:06:06'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:06:06'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:07:35'!
cartas456Copas

	^ OrderedCollection with: (CartaDeTruco copaCon: 4) with:(CartaDeTruco copaCon: 5) with:(CartaDeTruco copaCon: 6)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:07:35' prior: 50864545!
test04
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := (self cartas456Copas).	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
		
	self should:[ jugador1 jugarCarta: (CartaDeTruco copaCon: 5).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:2 equals: jugador1 cantidadDeCartas.]
	
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:08:15' prior: 50864721!
test04
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := self cartas456Copas.	
	cartasJugador2 := (OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
		
	self should:[ jugador1 jugarCarta: (CartaDeTruco copaCon: 5).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:2 equals: jugador1 cantidadDeCartas.]
	
	
	! !

----SNAPSHOT----(5 July 2021 20:08:21) CuisUniversity-4532.image priorSource: 16885703!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:08:44'!
cartas456Oro

	^ OrderedCollection with: (CartaDeTruco oroCon: 4) with:(CartaDeTruco oroCon: 5) with:(CartaDeTruco oroCon: 6)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:08:44' prior: 50864751!
test04
| cartasJugador1 jugador1 jugador2 repartidorDeCartas cartasJugador2 |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
		
	cartasJugador1 := self cartas456Copas.	
	cartasJugador2 := (self cartas456Oro).	
	
	repartidorDeCartas repartirAMano: cartasJugador1.
	repartidorDeCartas repartirAPie: cartasJugador2.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
		
	self should:[ jugador1 jugarCarta: (CartaDeTruco copaCon: 5).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:2 equals: jugador1 cantidadDeCartas.]
	
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:09:42' prior: 50864790!
test04
| jugador1 jugador2 repartidorDeCartas |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
		
	self should:[ jugador1 jugarCarta: (CartaDeTruco copaCon: 5).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:2 equals: jugador1 cantidadDeCartas.]
	
	
	! !

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:09:48'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:09:48'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:09:48'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:09:48'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:09:48'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:10:08' prior: 50864426!
test03
| jugador1 jugador2 repartidorDeCartas |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.
	
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	self assert:2 equals: jugador1 cantidadDeCartas.
	
	! !

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:10:12'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:10:12'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:10:12'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:10:12'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:10:12'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:10:50' prior: 50864343!
test02
| jugador1 jugador2 repartidorDeCartas |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.

	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	self should:[ jugador2 jugarCarta: (CartaDeTruco oroCon: 4).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:3 equals: jugador2 cantidadDeCartas.]
	
	! !

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:10:55'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:10:55'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:10:55'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:10:55'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:10:55'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:11:15' prior: 50864178!
test01
| jugador1 jugador2 repartidorDeCartas |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.
	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.
	
	
	RondaDeTruco mano: jugador1 pie: jugador2.
	
	self should:[ jugador1 jugarCarta: (CartaDeTruco oroCon: 4).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: Jugador elJugadorNoPoseeLaCartaIndicadaErrorMessage equals: error messageText.
		self assert:3 equals: jugador2 cantidadDeCartas.]
	
	! !

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:11:20'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:11:20'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:11:20'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:11:20'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:11:20'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:15:11'!
test05
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 5).		
	
	self assert: jugador2 equals: ronda ganadorPrimerEnfrentamiento.! !

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:15:23'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:15:33'!
ganadorPrimerEnfrentamiento
	self shouldBeImplemented.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 20:17:07'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie jugadorEnTurno ganadorPrimerEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:17:05' prior: 50864964!
ganadorPrimerEnfrentamiento
	^ganadorPrimerEnfrentamiento.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 20:24:17'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie jugadorEnTurno ganadorPrimerEnfrentamiento cartaEnfrentamientoActual'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 20:24:19'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie jugadorEnTurno ganadorPrimerEnfrentamiento cartaEnfrentamientoActual ganadorPorEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:24:11' prior: 50864608!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	jugadorEnTurno := pie.
	
	
	(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador].
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:25:52' prior: 50865004!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	jugadorEnTurno := pie.
	
	
	cartaEnfrentamientoActual ifNil:[cartaEnfrentamientoActual := aCartaDeTruco ]	  
	ifNotNil:[ 
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador].
	]! !

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:25:55'!
ERROR!
!RondaDeTruco methodsFor: 'initialization' stamp: 'JA 7/5/2021 20:26:36' prior: 50864597!
initializeMano: unJugadorMano pie: unJugadorPie 
	mano := unJugadorMano.
	mano participaEnRonda: self.
	pie := unJugadorPie.
	pie participaEnRonda: self.
	jugadorEnTurno := mano.
	ganadorPorEnfrentamiento  := OrderedCollection new.! !

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:26:39'!
FAILURE!

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:27:04'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:27:32' prior: 50864978!
ganadorPrimerEnfrentamiento
	^ganadorPorEnfrentamiento at:1.! !

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:27:35'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:27:35'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:27:35'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:27:35'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:27:35'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:27:35'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:30:44'!
test06
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 5).		
			
	self should:[ jugador1 jugarCarta: (CartaDeTruco copaCon: 5).		]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:error | self assert: RondaDeTruco noEsElTurnoDelJugadorErrorMessage equals: error messageText.
		self assert:2 equals: jugador1 cantidadDeCartas.]
	
	! !

!testRun: #XXXTest #test06 stamp: 'JA 7/5/2021 20:30:58'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:30:58'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:30:58'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:30:58'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:30:58'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:30:58'!
PASSED!

!testRun: #XXXTest #test06 stamp: 'JA 7/5/2021 20:30:58'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:36:30' prior: 50864943!
test05
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 5).		
	jugador2 jugarCarta: (CartaDeTruco oroCon: 6).
	jugador1 jugarCarta: (CartaDeTruco oroCon: 5).				
	
	self assert: jugador2 equals: ronda ganadorPrimerEnfrentamiento.
	self assert: jugador2 equals: ronda ganadorSegundoEnfrentamiento.	
	self assert: jugador2 equals: ronda ganador.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:36:30' prior: 50865108!
test05
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 5).		
	jugador2 jugarCarta: (CartaDeTruco oroCon: 6).
	jugador1 jugarCarta: (CartaDeTruco oroCon: 5).				
	
	self assert: jugador2 equals: ronda ganadorPrimerEnfrentamiento.
	self assert: jugador2 equals: ronda ganadorSegundoEnfrentamiento.	
	self assert: jugador2 equals: ronda ganador.! !

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:37:29'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:15:11' prior: 50865134!
test05
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 5).		
	
	self assert: jugador2 equals: ronda ganadorPrimerEnfrentamiento.! !

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:38:08'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:38:08'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:38:08'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:38:08'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:38:08'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:38:08'!
PASSED!

!testRun: #XXXTest #test06 stamp: 'JA 7/5/2021 20:38:08'!
PASSED!
!XXXTest methodsFor: 'nil' stamp: 'JA 7/5/2021 20:38:21'!
test07
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 5).		
	jugador2 jugarCarta: (CartaDeTruco oroCon: 6).
	jugador1 jugarCarta: (CartaDeTruco oroCon: 5).				
	
	self assert: jugador2 equals: ronda ganadorPrimerEnfrentamiento.
	self assert: jugador2 equals: ronda ganadorSegundoEnfrentamiento.	
	self assert: jugador2 equals: ronda ganador.! !

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:38:27'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:38:43' prior: 50865195!
test07
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 5).		
	jugador2 jugarCarta: (CartaDeTruco oroCon: 6).
	jugador1 jugarCarta: (CartaDeTruco copaCon: 5).				
	
	self assert: jugador2 equals: ronda ganadorPrimerEnfrentamiento.
	self assert: jugador2 equals: ronda ganadorSegundoEnfrentamiento.	
	self assert: jugador2 equals: ronda ganador.! !

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:38:44'!
ERROR!

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:39:02'!
ERROR!

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:39:34'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:44:20' prior: 50865017!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	
	
	
	cartaEnfrentamientoActual ifNil:[
		cartaEnfrentamientoActual := aCartaDeTruco. 
		jugadorEnTurno := pie. ]	  
	ifNotNil:[ 
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador]
		ifFalse: [
			mano = aJugador ifTrue:[
			ganadorPorEnfrentamiento add: pie.
			jugadorEnTurno := pie]
			].
	]! !

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:44:23'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:45:15' prior: 50865255!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	
	
	
	cartaEnfrentamientoActual ifNil:[
		cartaEnfrentamientoActual := aCartaDeTruco. 
		jugadorEnTurno := pie. ]	  
	ifNotNil:[ 
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador]
		ifFalse: [
			mano = aJugador ifTrue:[
			ganadorPorEnfrentamiento add: pie.
			jugadorEnTurno := pie]
			ifFalse: [ganadorPorEnfrentamiento add: mano.
			jugadorEnTurno := mano]
			].
	]! !

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:45:17'!
ERROR!

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:45:23'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:49:50' prior: 50865277!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	
	
	
	cartaEnfrentamientoActual ifNil:[
		cartaEnfrentamientoActual := aCartaDeTruco. 
		mano = aJugador ifTrue:[jugadorEnTurno := pie.]
		ifFalse: [jugadorEnTurno := mano.]
		 ]	  
	ifNotNil:[ 
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador.
			cartaEnfrentamientoActual := nil.]
		ifFalse: [
			mano = aJugador ifTrue:[
			ganadorPorEnfrentamiento add: pie.
			jugadorEnTurno := pie]
			ifFalse: [ganadorPorEnfrentamiento add: mano.
			jugadorEnTurno := mano]
			].
	]! !

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:49:55'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:50:07'!
ganadorSegundoEnfrentamiento
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:50:20' prior: 50865330!
ganadorSegundoEnfrentamiento
	ganadorPorEnfrentamiento at:2! !

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:50:21'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:50:46' prior: 50865335!
ganadorSegundoEnfrentamiento
	^ganadorPorEnfrentamiento at:2! !

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:50:49'!
ERROR!
!Object methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:51:08'!
ganador
	self shouldBeImplemented.! !

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:51:14'!
ERROR!

----SNAPSHOT----(5 July 2021 20:52:07) CuisUniversity-4532.image priorSource: 17060156!

!methodRemoval: Object #ganador stamp: 'JA 7/5/2021 20:52:14'!
ganador
	self shouldBeImplemented.!

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:52:20'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:52:27'!
ganador
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:54:32' prior: 50865364!
ganador
	((ganadorPorEnfrentamiento occurrencesOf: mano) = 2) ifTrue:[^ mano].
	((ganadorPorEnfrentamiento occurrencesOf: pie) = 2) ifTrue:[^ pie].
	! !

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:54:38'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:54:38'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:54:38'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:54:38'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:54:38'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:54:38'!
PASSED!

!testRun: #XXXTest #test06 stamp: 'JA 7/5/2021 20:54:38'!
PASSED!

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:54:38'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:56:40'!
test08
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	self should: [ronda ganador]
	raise: Error - MessageNotUnderstood 
	withMessageText: RondaDeTruco aunNoHayGanadoresErrorMessage.! !

!testRun: #XXXTest #test08 stamp: 'JA 7/5/2021 20:56:49'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:56:59'!
aunNoHayGanadoresErrorMessage
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:57:17' prior: 50865413!
aunNoHayGanadoresErrorMessage
	^'Aun No Hay ganadores'! !

!testRun: #XXXTest #test08 stamp: 'JA 7/5/2021 20:57:22'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 20:57:52' prior: 50865369!
ganador
	((ganadorPorEnfrentamiento occurrencesOf: mano) = 2) ifTrue:[^ mano].
	((ganadorPorEnfrentamiento occurrencesOf: pie) = 2) ifTrue:[^ pie].
	self error: self class aunNoHayGanadoresErrorMessage .! !

!testRun: #XXXTest #test08 stamp: 'JA 7/5/2021 20:57:55'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:57:55'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:57:55'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:57:56'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:57:56'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:57:56'!
PASSED!

!testRun: #XXXTest #test06 stamp: 'JA 7/5/2021 20:57:56'!
PASSED!

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:57:56'!
PASSED!

!testRun: #XXXTest #test08 stamp: 'JA 7/5/2021 20:57:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 20:58:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 20:58:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 20:58:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 20:58:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 20:58:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #JugadorTest #test02 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #RepartidorDeCartasTest #test01 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #RepartidorDeCartasTest #test02 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #RepartidorDeCartasTest #test03 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #XXXTest #test06 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #XXXTest #test08 stamp: 'JA 7/5/2021 20:58:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #JugadorTest #test02 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #RepartidorDeCartasTest #test01 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #RepartidorDeCartasTest #test02 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #RepartidorDeCartasTest #test03 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #XXXTest #test06 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!

!testRun: #XXXTest #test08 stamp: 'JA 7/5/2021 21:00:14'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:08:21'!
test09
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 4).		
	jugador1 jugarCarta: (CartaDeTruco copaCon: 6).
	jugador1 jugarCarta: (CartaDeTruco copaCon: 5).				
	
	self assert: jugador1 equals: ronda ganador.! !

!testRun: #XXXTest #test09 stamp: 'JA 7/5/2021 21:08:23'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'JA 7/5/2021 21:08:23'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'JA 7/5/2021 21:08:23'!
PASSED!

!testRun: #XXXTest #test03 stamp: 'JA 7/5/2021 21:08:23'!
PASSED!

!testRun: #XXXTest #test04 stamp: 'JA 7/5/2021 21:08:23'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'JA 7/5/2021 21:08:23'!
PASSED!

!testRun: #XXXTest #test06 stamp: 'JA 7/5/2021 21:08:23'!
PASSED!

!testRun: #XXXTest #test07 stamp: 'JA 7/5/2021 21:08:23'!
PASSED!

!testRun: #XXXTest #test08 stamp: 'JA 7/5/2021 21:08:23'!
PASSED!

!testRun: #XXXTest #test09 stamp: 'JA 7/5/2021 21:08:23'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:11:48'!
test10
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 5).		
	jugador2 jugarCarta: (CartaDeTruco oroCon: 6).
	jugador1 jugarCarta: (CartaDeTruco copaCon: 6).				
	jugador2 jugarCarta: (CartaDeTruco oroCon: 4).	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 5).	
	
	self assert: jugador1 equals: ronda ganador.! !

!testRun: #XXXTest #test10 stamp: 'JA 7/5/2021 21:11:49'!
ERROR!

!testRun: #XXXTest #test10 stamp: 'JA 7/5/2021 21:12:07'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:12:59' prior: 50865426!
ganador
	((ganadorPorEnfrentamiento occurrencesOf: mano) = 2) ifTrue:[^ mano].
	((ganadorPorEnfrentamiento occurrencesOf: pie) = 2) ifTrue:[^ pie].
	self error: self class aunNoHayGanadoresErrorMessage.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:14:39' prior: 50865303!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	
	
	
	cartaEnfrentamientoActual ifNil:[
		cartaEnfrentamientoActual := aCartaDeTruco. 
		mano = aJugador ifTrue:[jugadorEnTurno := pie.]
		ifFalse: [jugadorEnTurno := mano.]
		 ]	  
	ifNotNil:[ 
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador.
			cartaEnfrentamientoActual := nil.]
		ifFalse: [
			(aCartaDeTruco empardaCon: cartaEnfrentamientoActual) 
			ifTrue:[]
			ifFalse:[
			mano = aJugador ifTrue:[
			ganadorPorEnfrentamiento add: pie.
			jugadorEnTurno := pie]
			ifFalse: [ganadorPorEnfrentamiento add: mano.
			jugadorEnTurno := mano]
			]].
	]! !

!testRun: #XXXTest #test10 stamp: 'JA 7/5/2021 21:14:43'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 21:22:59'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie jugadorEnTurno ganadorPrimerEnfrentamiento cartaEnfrentamientoActual ganadorPorEnfrentamiento enfrentamientoActual'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'JA 7/5/2021 21:22:54' prior: 50865035!
initializeMano: unJugadorMano pie: unJugadorPie 
	mano := unJugadorMano.
	mano participaEnRonda: self.
	pie := unJugadorPie.
	pie participaEnRonda: self.
	jugadorEnTurno := mano.
	ganadorPorEnfrentamiento  := OrderedCollection new.
	enfrentamientoActual := 1.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 21:24:44'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie jugadorEnTurno ganadorPrimerEnfrentamiento cartaEnfrentamientoActual ganadorPorEnfrentamiento enfrentamientoActual turnosPorEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'JA 7/5/2021 21:24:42' prior: 50865768!
initializeMano: unJugadorMano pie: unJugadorPie 
	mano := unJugadorMano.
	mano participaEnRonda: self.
	pie := unJugadorPie.
	pie participaEnRonda: self.
	jugadorEnTurno := mano.
	ganadorPorEnfrentamiento  := OrderedCollection new.
	enfrentamientoActual := 1.
	turnosPorEnfrentamiento := OrderedCollection with: OrderedCollection new with: OrderedCollection new with: OrderedCollection new.! !

!testRun: #XXXTest #test10 stamp: 'JA 7/5/2021 21:24:57'!
ERROR!

!classRenamed: #XXXTest as: #RondaDeTrucoTest stamp: 'JA 7/5/2021 21:25:24'!
Smalltalk renameClassNamed: #XXXTest as: #RondaDeTrucoTest!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:30:00' prior: 50865727!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	
	
	(turnosPorEnfrentamiento at: enfrentamientoActual) add: aJugador.  
	cartaEnfrentamientoActual ifNil:[		
		cartaEnfrentamientoActual := aCartaDeTruco. 		
		mano = aJugador ifTrue:[jugadorEnTurno := pie.]		
		ifFalse: [jugadorEnTurno := mano.].		
		 ]	  
	ifNotNil:[		
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador.
			cartaEnfrentamientoActual := nil.]
		ifFalse: [
			(aCartaDeTruco empardaCon: cartaEnfrentamientoActual) 
			ifTrue:[]
			ifFalse:[
			mano = aJugador ifTrue:[
			ganadorPorEnfrentamiento add: pie.
			jugadorEnTurno := pie]
			ifFalse: [ganadorPorEnfrentamiento add: mano.
			jugadorEnTurno := mano]
			]].
		enfrentamientoActual  := enfrentamientoActual +1.
	]! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:30:07'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:35:16' prior: 50865814!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	
	
	(turnosPorEnfrentamiento at: enfrentamientoActual) add: aJugador.  
	cartaEnfrentamientoActual ifNil:[		
		cartaEnfrentamientoActual := aCartaDeTruco. 		
		mano = aJugador ifTrue:[jugadorEnTurno := pie.]		
		ifFalse: [jugadorEnTurno := mano.].		
		 ]	  
	ifNotNil:[		
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador.
			cartaEnfrentamientoActual := nil.]
		ifFalse: [
			(aCartaDeTruco empardaCon: cartaEnfrentamientoActual) 
			ifTrue:[ ((turnosPorEnfrentamiento at: (enfrentamientoActual - 1)) at: 1 = mano)
					ifTrue: [jugadorEnTurno := mano]
					ifFalse:[jugadorEnTurno := pie].
				]
			ifFalse:[
			mano = aJugador ifTrue:[
			ganadorPorEnfrentamiento add: pie.
			jugadorEnTurno := pie]
			ifFalse: [ganadorPorEnfrentamiento add: mano.
			jugadorEnTurno := mano]
			]].
		enfrentamientoActual  := enfrentamientoActual +1.
	]! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:35:19'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:36:12' prior: 50865848!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	
	
	(turnosPorEnfrentamiento at: enfrentamientoActual) add: aJugador.  
	cartaEnfrentamientoActual ifNil:[		
		cartaEnfrentamientoActual := aCartaDeTruco. 		
		mano = aJugador ifTrue:[jugadorEnTurno := pie.]		
		ifFalse: [jugadorEnTurno := mano.].		
		 ]	  
	ifNotNil:[		
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador.
			cartaEnfrentamientoActual := nil.]
		ifFalse: [
			(aCartaDeTruco empardaCon: cartaEnfrentamientoActual) 
			ifTrue:[ (((turnosPorEnfrentamiento at: (enfrentamientoActual - 1)) at: 1) = mano)
					ifTrue: [jugadorEnTurno := mano]
					ifFalse:[jugadorEnTurno := pie].
				]
			ifFalse:[
			mano = aJugador ifTrue:[
			ganadorPorEnfrentamiento add: pie.
			jugadorEnTurno := pie]
			ifFalse: [ganadorPorEnfrentamiento add: mano.
			jugadorEnTurno := mano]
			]].
		enfrentamientoActual  := enfrentamientoActual +1.
	]! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:36:15'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:39:30' prior: 50865688!
test10
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 5).		
	jugador2 jugarCarta: (CartaDeTruco oroCon: 6).
	jugador1 jugarCarta: (CartaDeTruco copaCon: 6).				
	jugador1 jugarCarta: (CartaDeTruco copaCon: 5).	
	jugador2 jugarCarta: (CartaDeTruco oroCon: 4).	
	
	
	self assert: jugador1 equals: ronda ganador.! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:39:31'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:42:00' prior: 50865887!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	
	
	(turnosPorEnfrentamiento at: enfrentamientoActual) add: aJugador.  
	cartaEnfrentamientoActual ifNil:[		
		cartaEnfrentamientoActual := aCartaDeTruco. 		
		mano = aJugador ifTrue:[jugadorEnTurno := pie.]		
		ifFalse: [jugadorEnTurno := mano.].		
		 ]	  
	ifNotNil:[		
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador.
			]
		ifFalse: [
			(aCartaDeTruco empardaCon: cartaEnfrentamientoActual) 
			ifTrue:[ (((turnosPorEnfrentamiento at: (enfrentamientoActual - 1)) at: 1) = mano)
					ifTrue: [jugadorEnTurno := mano]
					ifFalse:[jugadorEnTurno := pie].
				]
			ifFalse:[
			mano = aJugador ifTrue:[
			ganadorPorEnfrentamiento add: pie.
			jugadorEnTurno := pie]
			ifFalse: [ganadorPorEnfrentamiento add: mano.
			jugadorEnTurno := mano]
			]].
		enfrentamientoActual  := enfrentamientoActual +1.
		cartaEnfrentamientoActual := nil.
	]! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:42:04'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JA 7/5/2021 21:44:17'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie jugadorEnTurno ganadorPrimerEnfrentamiento cartaEnfrentamientoActual ganadorPorEnfrentamiento enfrentamientoActual turnosPorEnfrentamiento parda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:44:14' prior: 50865717!
ganador	
	((ganadorPorEnfrentamiento occurrencesOf: mano) = 2) ifTrue:[^ mano].
	((ganadorPorEnfrentamiento occurrencesOf: pie) = 2) ifTrue:[^ pie].
	parda ifTrue:[^ganadorPorEnfrentamiento last].
	self error: self class aunNoHayGanadoresErrorMessage.! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'JA 7/5/2021 21:44:36' prior: 50865792!
initializeMano: unJugadorMano pie: unJugadorPie 
	mano := unJugadorMano.
	mano participaEnRonda: self.
	pie := unJugadorPie.
	pie participaEnRonda: self.
	jugadorEnTurno := mano.
	ganadorPorEnfrentamiento  := OrderedCollection new.
	enfrentamientoActual := 1.
	turnosPorEnfrentamiento := OrderedCollection with: OrderedCollection new with: OrderedCollection new with: OrderedCollection new.
	parda := false.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:45:04' prior: 50865954!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	
	
	(turnosPorEnfrentamiento at: enfrentamientoActual) add: aJugador.  
	cartaEnfrentamientoActual ifNil:[		
		cartaEnfrentamientoActual := aCartaDeTruco. 		
		mano = aJugador ifTrue:[jugadorEnTurno := pie.]		
		ifFalse: [jugadorEnTurno := mano.].		
		 ]	  
	ifNotNil:[		
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador.
			]
		ifFalse: [
			(aCartaDeTruco empardaCon: cartaEnfrentamientoActual) 
			ifTrue:[ parda := true.
				(((turnosPorEnfrentamiento at: (enfrentamientoActual - 1)) at: 1) = mano)
					ifTrue: [jugadorEnTurno := mano]
					ifFalse:[jugadorEnTurno := pie].
				]
			ifFalse:[
			mano = aJugador ifTrue:[
			ganadorPorEnfrentamiento add: pie.
			jugadorEnTurno := pie]
			ifFalse: [ganadorPorEnfrentamiento add: mano.
			jugadorEnTurno := mano]
			]].
		enfrentamientoActual  := enfrentamientoActual +1.
		cartaEnfrentamientoActual := nil.
	]! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:45:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 21:45:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 21:45:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 21:45:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'JA 7/5/2021 21:45:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'JA 7/5/2021 21:45:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'JA 7/5/2021 21:45:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'JA 7/5/2021 21:45:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'JA 7/5/2021 21:45:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:45:06'!
ERROR!

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:45:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:45:06'!
ERROR!

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:45:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 21:45:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 21:45:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 21:45:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'JA 7/5/2021 21:45:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'JA 7/5/2021 21:45:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'JA 7/5/2021 21:45:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'JA 7/5/2021 21:45:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'JA 7/5/2021 21:45:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:45:55'!
ERROR!

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:45:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:45:55'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:49:00' prior: 50866033!
jugador: aJugador tiraCarta: aCartaDeTruco 
	aJugador ~= jugadorEnTurno ifTrue:[self error: self class noEsElTurnoDelJugadorErrorMessage].
	
	
	(turnosPorEnfrentamiento at: enfrentamientoActual) add: aJugador.  
	cartaEnfrentamientoActual ifNil:[		
		cartaEnfrentamientoActual := aCartaDeTruco. 		
		mano = aJugador ifTrue:[jugadorEnTurno := pie.]		
		ifFalse: [jugadorEnTurno := mano.].		
		 ]	  
	ifNotNil:[		
		(aCartaDeTruco mataA: cartaEnfrentamientoActual) 
		ifTrue: [ganadorPorEnfrentamiento add: aJugador.
			jugadorEnTurno := aJugador.
			]
		ifFalse: [
			(aCartaDeTruco empardaCon: cartaEnfrentamientoActual) 
			ifTrue:[ parda := true.
				enfrentamientoActual = 1 ifTrue: [jugadorEnTurno := mano]
				ifFalse: [
				(((turnosPorEnfrentamiento at: (enfrentamientoActual - 1)) at: 1) = mano)
					ifTrue: [jugadorEnTurno := mano]
					ifFalse:[jugadorEnTurno := pie].
				]]
			ifFalse:[
			mano = aJugador ifTrue:[
			ganadorPorEnfrentamiento add: pie.
			jugadorEnTurno := pie]
			ifFalse: [ganadorPorEnfrentamiento add: mano.
			jugadorEnTurno := mano]
			]].
		enfrentamientoActual  := enfrentamientoActual +1.
		cartaEnfrentamientoActual := nil.
	]! !

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:49:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 21:49:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 21:49:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 21:49:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'JA 7/5/2021 21:49:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'JA 7/5/2021 21:49:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'JA 7/5/2021 21:49:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'JA 7/5/2021 21:49:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'JA 7/5/2021 21:49:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:49:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:49:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:49:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:50:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 21:50:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 21:50:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 21:50:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'JA 7/5/2021 21:50:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'JA 7/5/2021 21:50:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'JA 7/5/2021 21:50:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'JA 7/5/2021 21:50:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'JA 7/5/2021 21:50:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:50:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:50:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:50:03'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JA 7/5/2021 21:51:01' prior: 50865646!
test09
| jugador1 jugador2 repartidorDeCartas ronda |
	jugador1 := Jugador new.
	jugador2 := Jugador new.
	repartidorDeCartas := RepartidorDeCartas mano: jugador1 pie: jugador2.	
	repartidorDeCartas repartirAMano: self cartas456Copas.
	repartidorDeCartas repartirAPie: self cartas456Oro.	
	ronda := RondaDeTruco mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco copaCon: 4).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 4).		
	jugador1 jugarCarta: (CartaDeTruco copaCon: 6).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 5).				
	
	self assert: jugador1 equals: ronda ganador.! !

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:51:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:51:08'!
PASSED!
!Behavior method!
bastoCon: unNumero
	^ [
	(self coverAll:
		{23 to: 26})
		palo:
			([
			(self coverAll:
				{34 to: 37}) basto ] valueCoveringAll:
				{39 to: 43})
		numero:
			(unNumero
				cover: (53 to: 60)
				declaredAt: (11 to: 18)) ] valueCoveringAll:
		{28 to: 32. 45 to: 51}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertNúmeroEsVálido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsVálido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertNúmeroEsVálido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsVálido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
oroCon: unNumero
	^ [
	(self coverAll:
		{21 to: 24})
		palo:
			([
			(self coverAll:
				{32 to: 35}) oro ] valueCoveringAll:
				{37 to: 39})
		numero:
			(unNumero
				cover: (49 to: 56)
				declaredAt: (9 to: 16)) ] valueCoveringAll:
		{26 to: 30. 41 to: 47}.! !

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
hash
	^ [
	([
	(palo
		cover: (10 to: 13)
		declaredAt: (10 to: 13)) hash ] valueCoveringAll:
		{15 to: 18}) bitXor:
		([
		(numero
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) hash ] valueCoveringAll:
			{35 to: 38}) ] valueCoveringAll:
		{20 to: 26}.! !

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
numeroDeCartaInvalidoErrorDescription
	^ 'El truco no se puede jugar con ochos ni con nueves' coverAll:
		{43 to: 94}.! !

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
paloInvalidoErrorDescription
	^ 'Los palos de la carta solo pueden ser espada, basto, oro y copa' coverAll:
		{34 to: 98}.! !

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
espadaCon: unNumero
	^ [
	(self coverAll:
		{24 to: 27})
		palo:
			([
			(self coverAll:
				{35 to: 38}) espada ] valueCoveringAll:
				{40 to: 45})
		numero:
			(unNumero
				cover: (55 to: 62)
				declaredAt: (12 to: 19)) ] valueCoveringAll:
		{29 to: 33. 47 to: 53}.! !

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
anchoDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(1 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
anchoDeBasto
	^ [
	(self coverAll:
		{18 to: 21}) bastoCon:
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{23 to: 31}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esDeBasto
	^ [
	(self coverAll:
		{15 to: 18}) paloEs:
		([
		(self coverAll:
			{28 to: 31}) basto ] valueCoveringAll:
			{33 to: 37}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
basto
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) basto ] valueCoveringAll:
		{22 to: 26}.! !
!Behavior method!
sieteDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(7 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
sieteDeOro
	^ [
	(self coverAll:
		{16 to: 19}) oroCon:
		(7 coverAll:
			{28 to: 29}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeOro
	^ [
	(self coverAll:
		{13 to: 16}) paloEs:
		([
		(self coverAll:
			{26 to: 29}) oro ] valueCoveringAll:
			{31 to: 33}) ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
oro
	^ [
	([
	(self coverAll:
		{9 to: 12}) class ] valueCoveringAll:
		{14 to: 18}) oro ] valueCoveringAll:
		{20 to: 22}.! !
!Behavior method!
empardaCon: cartaParda
	^ [
	([
	(self coverAll:
		{27 to: 30}) valor ] valueCoveringAll:
		{32 to: 36}) =
		([
		(cartaParda
			cover: (40 to: 49)
			declaredAt: (13 to: 22)) valor ] valueCoveringAll:
			{51 to: 55}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
esAnchoFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esAncho ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49}) or: [
			[
			(self coverAll:
				{57 to: 60}) esDeCopa ] valueCoveringAll:
				{62 to: 69} ]] valueCoveringAll:
			{51 to: 53} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
copaCon: unNumero
	^ [
	(self coverAll:
		{22 to: 25})
		palo:
			([
			(self coverAll:
				{33 to: 36}) copa ] valueCoveringAll:
				{38 to: 41})
		numero:
			(unNumero
				cover: (51 to: 58)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
		{27 to: 31. 43 to: 49}.! !
!Behavior method!
esDeCopa
	^ [
	(self coverAll:
		{14 to: 17}) paloEs:
		([
		(self coverAll:
			{27 to: 30}) copa ] valueCoveringAll:
			{32 to: 35}) ] valueCoveringAll:
		{19 to: 25}.! !
!Behavior method!
copa
	^ [
	([
	(self coverAll:
		{10 to: 13}) class ] valueCoveringAll:
		{15 to: 19}) copa ] valueCoveringAll:
		{21 to: 24}.! !
!Behavior method!
esRey
	^ [
	(self coverAll:
		{11 to: 14}) numeroEs:
		(12 coverAll:
			{26 to: 27}) ] valueCoveringAll:
		{16 to: 24}.! !
!Behavior method!
esCaballo
	^ [
	(self coverAll:
		{15 to: 18}) numeroEs:
		(11 coverAll:
			{30 to: 31}) ] valueCoveringAll:
		{20 to: 28}.! !
!Behavior method!
esSota
	^ [
	(self coverAll:
		{12 to: 15}) numeroEs:
		(10 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{17 to: 25}.! !
!Behavior method!
esSieteFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeCopa ] valueCoveringAll:
			{43 to: 50}) or: [
			[
			(self coverAll:
				{58 to: 61}) esDeBasto ] valueCoveringAll:
				{63 to: 71} ]] valueCoveringAll:
			{52 to: 54} ]] valueCoveringAll:
		{31 to: 34}.! !

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 21:51:27'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
tablaDeValoresIncorrectaOCartaInvalidaErrorDescription
	^ 'Error de programación: Tabla de valores incorrecta o carta inválida' coverAll:
		{60 to: 128}.! !

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
noTieneCartas
	[
	(cartas
		cover: (16 to: 21)
		declaredAt: (16 to: 21)) ifNil: [ ^ true coverAll:
			{32 to: 35} ]] valueCoveringAll:
		{23 to: 28}.
	^ false coverAll:
		{41 to: 45}.! !

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
asignarCartas: cartasParaJugar
	[
	([
	([
	(cartasParaJugar
		cover: (34 to: 48)
		declaredAt: (16 to: 30)) size ] valueCoveringAll:
		{50 to: 53}) ~=
		(3 coverAll:
			{57 to: 57}) ] valueCoveringAll:
		{55 to: 56}) ifTrue: [
		[
		(self coverAll:
			{67 to: 70}) error:
			([
			([
			(self coverAll:
				{79 to: 82}) class ] valueCoveringAll:
				{84 to: 88}) cantidadIncorrectaDeCartasAsignadasErrorMessage ] valueCoveringAll:
				{90 to: 136}) ] valueCoveringAll:
			{72 to: 77} ]] valueCoveringAll:
		{59 to: 65}.
	(cartas _ cartasParaJugar
		cover: (152 to: 166)
		declaredAt: (16 to: 30))
		cover: (142 to: 147)
		declaredAt: (142 to: 147).! !
!Behavior method!
cantidadDeCartas
	[
	(cartas
		cover: (19 to: 24)
		declaredAt: (19 to: 24)) ifNil: [ ^ 0 coverAll:
			{34 to: 34} ]] valueCoveringAll:
		{26 to: 31}.
	^ [
	(cartas
		cover: (40 to: 45)
		declaredAt: (19 to: 24)) size ] valueCoveringAll:
		{47 to: 50}.! !

!testRun: #JugadorTest #test02 stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
cantidadIncorrectaDeCartasAsignadasErrorMessage
	^ 'Se repartio una cantidad de cartas distinta de 3' coverAll:
		{52 to: 101}.! !

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
mano: unJugadorMano pie: unJugadorPie
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeMano:
			(unJugadorMano
				cover: (68 to: 80)
				declaredAt: (7 to: 19))
		pie:
			(unJugadorPie
				cover: (87 to: 98)
				declaredAt: (26 to: 37)) ] valueCoveringAll:
		{52 to: 66. 82 to: 85}.! !
!Behavior method!
initializeMano: unJugadorMano pie: unJugadorPie
	(mano _ unJugadorMano
		cover: (59 to: 71)
		declaredAt: (17 to: 29))
		cover: (51 to: 54)
		declaredAt: (51 to: 54).
	(pie _ unJugadorPie
		cover: (82 to: 93)
		declaredAt: (36 to: 47))
		cover: (75 to: 77)
		declaredAt: (75 to: 77).
	(cartasRepartidas _ [
	(OrderedCollection
		cover: (118 to: 134)
		declaredAt: (118 to: 134)) new ] valueCoveringAll:
		{136 to: 138})
		cover: (97 to: 112)
		declaredAt: (97 to: 112).! !
!Behavior method!
seJuegaConUnSoloMazoErrorMessage
	^ 'No se permiten cartas duplicadas. Se juega con un solo mazo.' coverAll:
		{37 to: 98}.! !
!Behavior method!
repartirAMano: cartasParaMano
	[
	(self coverAll:
		{32 to: 35}) assertCartasUnicas:
		(cartasParaMano
			cover: (57 to: 70)
			declaredAt: (16 to: 29)) ] valueCoveringAll:
		{37 to: 55}.
	[
	(cartasRepartidas
		cover: (74 to: 89)
		declaredAt: (74 to: 89)) addAll:
		(cartasParaMano
			cover: (99 to: 112)
			declaredAt: (16 to: 29)) ] valueCoveringAll:
		{91 to: 97}.
	[
	(mano
		cover: (116 to: 119)
		declaredAt: (116 to: 119)) asignarCartas:
		(cartasParaMano
			cover: (136 to: 149)
			declaredAt: (16 to: 29)) ] valueCoveringAll:
		{121 to: 134}.! !
!Behavior method!
assertCartasUnicas: cartasParaPie
	| pp |
	(pp _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) withAll:
		(cartasRepartidas
			cover: (76 to: 91)
			declaredAt: (76 to: 91)) ] valueCoveringAll:
		{67 to: 74})
		cover: (43 to: 44)
		declaredAt: (38 to: 39).
	[
	(pp
		cover: (95 to: 96)
		declaredAt: (38 to: 39)) addAll:
		(cartasParaPie
			cover: (106 to: 118)
			declaredAt: (21 to: 33)) ] valueCoveringAll:
		{98 to: 104}.
	[
	([
	(pp
		cover: (126 to: 127)
		declaredAt: (38 to: 39)) anySatisfy: [ :carta |
		[
		([
		(pp
			cover: (152 to: 153)
			declaredAt: (38 to: 39)) occurrencesOf:
			(carta
				cover: (170 to: 174)
				declaredAt: (143 to: 147)) ] valueCoveringAll:
			{155 to: 168}) >
			(1 coverAll:
				{179 to: 179}) ] valueCoveringAll:
			{177 to: 177} ]] valueCoveringAll:
		{129 to: 139}) ifTrue: [
		[
		(self coverAll:
			{192 to: 195}) error:
			([
			([
			(self coverAll:
				{204 to: 207}) class ] valueCoveringAll:
				{209 to: 213}) seJuegaConUnSoloMazoErrorMessage ] valueCoveringAll:
				{215 to: 246}) ] valueCoveringAll:
			{197 to: 202} ]] valueCoveringAll:
		{183 to: 189}.! !

!testRun: #RepartidorDeCartasTest #test01 stamp: 'JA 7/5/2021 21:51:27'!
PASSED!
!Behavior method!
repartirAPie: cartasParaPie
	[
	(self coverAll:
		{30 to: 33}) assertCartasUnicas:
		(cartasParaPie
			cover: (55 to: 67)
			declaredAt: (15 to: 27)) ] valueCoveringAll:
		{35 to: 53}.
	[
	(cartasRepartidas
		cover: (71 to: 86)
		declaredAt: (71 to: 86)) addAll:
		(cartasParaPie
			cover: (96 to: 108)
			declaredAt: (15 to: 27)) ] valueCoveringAll:
		{88 to: 94}.
	[
	(pie
		cover: (112 to: 114)
		declaredAt: (112 to: 114)) asignarCartas:
		(cartasParaPie
			cover: (131 to: 143)
			declaredAt: (15 to: 27)) ] valueCoveringAll:
		{116 to: 129}.! !

!testRun: #RepartidorDeCartasTest #test02 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!

!testRun: #RepartidorDeCartasTest #test03 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!
!Behavior method!
mano: unJugadorMano pie: unJugadorPie
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeMano:
			(unJugadorMano
				cover: (68 to: 80)
				declaredAt: (7 to: 19))
		pie:
			(unJugadorPie
				cover: (87 to: 98)
				declaredAt: (26 to: 37)) ] valueCoveringAll:
		{52 to: 66. 82 to: 85}.! !
!Behavior method!
initializeMano: unJugadorMano pie: unJugadorPie
	(mano _ unJugadorMano
		cover: (59 to: 71)
		declaredAt: (17 to: 29))
		cover: (51 to: 54)
		declaredAt: (51 to: 54).
	[
	(mano
		cover: (75 to: 78)
		declaredAt: (51 to: 54)) participaEnRonda:
		(self coverAll:
			{98 to: 101}) ] valueCoveringAll:
		{80 to: 96}.
	(pie _ unJugadorPie
		cover: (112 to: 123)
		declaredAt: (36 to: 47))
		cover: (105 to: 107)
		declaredAt: (105 to: 107).
	[
	(pie
		cover: (127 to: 129)
		declaredAt: (105 to: 107)) participaEnRonda:
		(self coverAll:
			{149 to: 152}) ] valueCoveringAll:
		{131 to: 147}.
	(jugadorEnTurno _ mano
		cover: (174 to: 177)
		declaredAt: (51 to: 54))
		cover: (156 to: 169)
		declaredAt: (156 to: 169).
	(ganadorPorEnfrentamiento _ [
	(OrderedCollection
		cover: (210 to: 226)
		declaredAt: (210 to: 226)) new ] valueCoveringAll:
		{228 to: 230})
		cover: (181 to: 204)
		declaredAt: (181 to: 204).
	(enfrentamientoActual _ 1 coverAll:
		{258 to: 258})
		cover: (234 to: 253)
		declaredAt: (234 to: 253).
	(turnosPorEnfrentamiento _ [
	(OrderedCollection
		cover: (289 to: 305)
		declaredAt: (210 to: 226))
		with:
			([
			(OrderedCollection
				cover: (313 to: 329)
				declaredAt: (210 to: 226)) new ] valueCoveringAll:
				{331 to: 333})
		with:
			([
			(OrderedCollection
				cover: (341 to: 357)
				declaredAt: (210 to: 226)) new ] valueCoveringAll:
				{359 to: 361})
		with:
			([
			(OrderedCollection
				cover: (369 to: 385)
				declaredAt: (210 to: 226)) new ] valueCoveringAll:
				{387 to: 389}) ] valueCoveringAll:
		{307 to: 311. 335 to: 339. 363 to: 367})
		cover: (262 to: 284)
		declaredAt: (262 to: 284).
	(parda _ false coverAll:
		{402 to: 406})
		cover: (393 to: 397)
		declaredAt: (393 to: 397).! !
!Behavior method!
participaEnRonda: aRondaDeTruco
	(rondaDeTruco _ aRondaDeTruco
		cover: (51 to: 63)
		declaredAt: (19 to: 31))
		cover: (35 to: 46)
		declaredAt: (35 to: 46).! !
!Behavior method!
jugarCarta: aCartaDeTruco
	[
	([
	([
	(cartas
		cover: (30 to: 35)
		declaredAt: (30 to: 35)) includes:
		(aCartaDeTruco
			cover: (47 to: 59)
			declaredAt: (13 to: 25)) ] valueCoveringAll:
		{37 to: 45}) not ] valueCoveringAll:
		{62 to: 64}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			([
			(self coverAll:
				{87 to: 90}) class ] valueCoveringAll:
				{92 to: 96}) elJugadorNoPoseeLaCartaIndicadaErrorMessage ] valueCoveringAll:
				{98 to: 140}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{66 to: 72}.
	[
	(rondaDeTruco
		cover: (145 to: 156)
		declaredAt: (145 to: 156))
		jugador:
			(self coverAll:
				{167 to: 170})
		tiraCarta:
			(aCartaDeTruco
				cover: (183 to: 195)
				declaredAt: (13 to: 25)) ] valueCoveringAll:
		{158 to: 165. 172 to: 181}.
	[
	(cartas
		cover: (200 to: 205)
		declaredAt: (30 to: 35)) remove:
		(aCartaDeTruco
			cover: (215 to: 227)
			declaredAt: (13 to: 25)) ] valueCoveringAll:
		{207 to: 213}.! !
!Behavior method!
elJugadorNoPoseeLaCartaIndicadaErrorMessage
	^ 'El jugador no posee la carta indicada.' coverAll:
		{47 to: 86}.! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!
!Behavior method!
jugador: aJugador tiraCarta: aCartaDeTruco
	[
	([
	(aJugador
		cover: (46 to: 53)
		declaredAt: (10 to: 17)) ~=
		(jugadorEnTurno
			cover: (58 to: 71)
			declaredAt: (58 to: 71)) ] valueCoveringAll:
		{55 to: 56}) ifTrue: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			([
			(self coverAll:
				{93 to: 96}) class ] valueCoveringAll:
				{98 to: 102}) noEsElTurnoDelJugadorErrorMessage ] valueCoveringAll:
				{104 to: 136}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{73 to: 79}.
	[
	([
	(turnosPorEnfrentamiento
		cover: (146 to: 168)
		declaredAt: (146 to: 168)) at:
		(enfrentamientoActual
			cover: (174 to: 193)
			declaredAt: (174 to: 193)) ] valueCoveringAll:
		{170 to: 172}) add:
		(aJugador
			cover: (201 to: 208)
			declaredAt: (10 to: 17)) ] valueCoveringAll:
		{196 to: 199}.
	[
	(cartaEnfrentamientoActual
		cover: (214 to: 238)
		declaredAt: (214 to: 238))
		ifNil: [
			(cartaEnfrentamientoActual _ aCartaDeTruco
				cover: (281 to: 293)
				declaredAt: (30 to: 42))
				cover: (252 to: 276)
				declaredAt: (214 to: 238).
			[
			([
			(mano
				cover: (301 to: 304)
				declaredAt: (301 to: 304)) =
				(aJugador
					cover: (308 to: 315)
					declaredAt: (10 to: 17)) ] valueCoveringAll:
				{306 to: 306})
				ifTrue: [
					(jugadorEnTurno _ pie
						cover: (343 to: 345)
						declaredAt: (343 to: 345))
						cover: (325 to: 338)
						declaredAt: (58 to: 71) ]
				ifFalse: [
					(jugadorEnTurno _ mano
						cover: (381 to: 384)
						declaredAt: (301 to: 304))
						cover: (363 to: 376)
						declaredAt: (58 to: 71) ]] valueCoveringAll:
				{317 to: 323. 353 to: 360} ]
		ifNotNil: [
			[
			([
			(aCartaDeTruco
				cover: (416 to: 428)
				declaredAt: (30 to: 42)) mataA:
				(cartaEnfrentamientoActual
					cover: (437 to: 461)
					declaredAt: (214 to: 238)) ] valueCoveringAll:
				{430 to: 435})
				ifTrue: [
					[
					(ganadorPorEnfrentamiento
						cover: (476 to: 499)
						declaredAt: (476 to: 499)) add:
						(aJugador
							cover: (506 to: 513)
							declaredAt: (10 to: 17)) ] valueCoveringAll:
						{501 to: 504}.
					(jugadorEnTurno _ aJugador
						cover: (537 to: 544)
						declaredAt: (10 to: 17))
						cover: (519 to: 532)
						declaredAt: (58 to: 71) ]
				ifFalse: [
					[
					([
					(aCartaDeTruco
						cover: (569 to: 581)
						declaredAt: (30 to: 42)) empardaCon:
						(cartaEnfrentamientoActual
							cover: (595 to: 619)
							declaredAt: (214 to: 238)) ] valueCoveringAll:
						{583 to: 593})
						ifTrue: [
							(parda _ true coverAll:
								{644 to: 647})
								cover: (635 to: 639)
								declaredAt: (635 to: 639).
							[
							([
							(enfrentamientoActual
								cover: (654 to: 673)
								declaredAt: (174 to: 193)) =
								(1 coverAll:
									{677 to: 677}) ] valueCoveringAll:
								{675 to: 675})
								ifTrue: [
									(jugadorEnTurno _ mano
										cover: (706 to: 709)
										declaredAt: (301 to: 304))
										cover: (688 to: 701)
										declaredAt: (58 to: 71) ]
								ifFalse: [
									[
									([
									([
									([
									(turnosPorEnfrentamiento
										cover: (734 to: 756)
										declaredAt: (146 to: 168)) at:
										([
										(enfrentamientoActual
											cover: (763 to: 782)
											declaredAt: (174 to: 193)) -
											(1 coverAll:
												{786 to: 786}) ] valueCoveringAll:
											{784 to: 784}) ] valueCoveringAll:
										{758 to: 760}) at:
										(1 coverAll:
											{794 to: 794}) ] valueCoveringAll:
										{790 to: 792}) =
										(mano
											cover: (799 to: 802)
											declaredAt: (301 to: 304)) ] valueCoveringAll:
										{797 to: 797})
										ifTrue: [
											(jugadorEnTurno _ mano
												cover: (837 to: 840)
												declaredAt: (301 to: 304))
												cover: (819 to: 832)
												declaredAt: (58 to: 71) ]
										ifFalse: [
											(jugadorEnTurno _ pie
												cover: (875 to: 877)
												declaredAt: (343 to: 345))
												cover: (857 to: 870)
												declaredAt: (58 to: 71) ]] valueCoveringAll:
										{810 to: 816. 848 to: 855} ]] valueCoveringAll:
								{679 to: 685. 716 to: 723} ]
						ifFalse: [
							[
							([
							(mano
								cover: (904 to: 907)
								declaredAt: (301 to: 304)) =
								(aJugador
									cover: (911 to: 918)
									declaredAt: (10 to: 17)) ] valueCoveringAll:
								{909 to: 909})
								ifTrue: [
									[
									(ganadorPorEnfrentamiento
										cover: (932 to: 955)
										declaredAt: (476 to: 499)) add:
										(pie
											cover: (962 to: 964)
											declaredAt: (343 to: 345)) ] valueCoveringAll:
										{957 to: 960}.
									(jugadorEnTurno _ pie
										cover: (988 to: 990)
										declaredAt: (343 to: 345))
										cover: (970 to: 983)
										declaredAt: (58 to: 71) ]
								ifFalse: [
									[
									(ganadorPorEnfrentamiento
										cover: (1006 to: 1029)
										declaredAt: (476 to: 499)) add:
										(mano
											cover: (1036 to: 1039)
											declaredAt: (301 to: 304)) ] valueCoveringAll:
										{1031 to: 1034}.
									(jugadorEnTurno _ mano
										cover: (1063 to: 1066)
										declaredAt: (301 to: 304))
										cover: (1045 to: 1058)
										declaredAt: (58 to: 71) ]] valueCoveringAll:
								{920 to: 926. 996 to: 1003} ]] valueCoveringAll:
						{626 to: 632. 891 to: 898} ]] valueCoveringAll:
				{467 to: 473. 554 to: 561}.
			(enfrentamientoActual _ [
			(enfrentamientoActual
				cover: (1078 to: 1097)
				declaredAt: (174 to: 193)) +
				(1 coverAll:
					{1125 to: 1125}) ] valueCoveringAll:
				{1124 to: 1124})
				cover: (1103 to: 1122)
				declaredAt: (174 to: 193).
			(cartaEnfrentamientoActual _ nil coverAll:
				{1159 to: 1161})
				cover: (1130 to: 1154)
				declaredAt: (214 to: 238) ]] valueCoveringAll:
		{240 to: 245. 400 to: 408}.! !
!Behavior method!
noEsElTurnoDelJugadorErrorMessage
	^ 'No es el turno del jugador.' coverAll:
		{37 to: 65}.! !

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!
!Behavior method!
ganadorPrimerEnfrentamiento
	^ [
	(ganadorPorEnfrentamiento
		cover: (31 to: 54)
		declaredAt: (31 to: 54)) at:
		(1 coverAll:
			{59 to: 59}) ] valueCoveringAll:
		{56 to: 58}.! !

!testRun: #RondaDeTrucoTest #test05 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!
!Behavior method!
ganadorSegundoEnfrentamiento
	^ [
	(ganadorPorEnfrentamiento
		cover: (32 to: 55)
		declaredAt: (32 to: 55)) at:
		(2 coverAll:
			{59 to: 60}) ] valueCoveringAll:
		{57 to: 59}.! !
!Behavior method!
ganador
	[
	([
	([
	(ganadorPorEnfrentamiento
		cover: (13 to: 36)
		declaredAt: (13 to: 36)) occurrencesOf:
		(mano
			cover: (53 to: 56)
			declaredAt: (53 to: 56)) ] valueCoveringAll:
		{38 to: 51}) =
		(2 coverAll:
			{61 to: 61}) ] valueCoveringAll:
		{59 to: 59}) ifTrue: [ ^ mano
			cover: (74 to: 77)
			declaredAt: (53 to: 56) ]] valueCoveringAll:
		{64 to: 70}.
	[
	([
	([
	(ganadorPorEnfrentamiento
		cover: (84 to: 107)
		declaredAt: (13 to: 36)) occurrencesOf:
		(pie
			cover: (124 to: 126)
			declaredAt: (124 to: 126)) ] valueCoveringAll:
		{109 to: 122}) =
		(2 coverAll:
			{131 to: 131}) ] valueCoveringAll:
		{129 to: 129}) ifTrue: [ ^ pie
			cover: (144 to: 146)
			declaredAt: (124 to: 126) ]] valueCoveringAll:
		{134 to: 140}.
	[
	(parda
		cover: (151 to: 155)
		declaredAt: (151 to: 155)) ifTrue: [ ^ [
		(ganadorPorEnfrentamiento
			cover: (166 to: 189)
			declaredAt: (13 to: 36)) last ] valueCoveringAll:
			{191 to: 194} ]] valueCoveringAll:
		{157 to: 163}.
	[
	(self coverAll:
		{199 to: 202}) error:
		([
		([
		(self coverAll:
			{211 to: 214}) class ] valueCoveringAll:
			{216 to: 220}) aunNoHayGanadoresErrorMessage ] valueCoveringAll:
			{222 to: 250}) ] valueCoveringAll:
		{204 to: 209}.! !

!testRun: #RondaDeTrucoTest #test07 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!
!Behavior method!
aunNoHayGanadoresErrorMessage
	^ 'Aun No Hay ganadores' coverAll:
		{33 to: 54}.! !

!testRun: #RondaDeTrucoTest #test08 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:51:28'!
PASSED!

!methodRemoval: Jugador #asignarCartas stamp: 'JA 7/5/2021 21:51:49'!
asignarCartas
	cartas := OrderedCollection new.!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #JugadorTest #test01 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #JugadorTest #test02 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #JugadorTest #test03 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RepartidorDeCartasTest #test01 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RepartidorDeCartasTest #test02 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RepartidorDeCartasTest #test03 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test01 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test02 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test03 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test04 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test05 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test06 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test07 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test08 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test09 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test10 stamp: 'JA 7/5/2021 21:52:32'!
PASSED!

----SNAPSHOT----(5 July 2021 21:53:08) CuisUniversity-4532.image priorSource: 17078567!