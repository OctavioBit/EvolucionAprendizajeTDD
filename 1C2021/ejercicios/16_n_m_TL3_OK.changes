----STARTUP---- (17 June 2021 15:11:47) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!classRemoval: #Cart stamp: 'ja 6/17/2021 15:12:21'!
Object subclass: #Cart
	instanceVariableNames: 'items catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ja 6/17/2021 15:12:21'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/jampuero/Documentos/isw1/tps/isw1/21-TusLibros2/TusLibros.st----!

----QUIT----(17 June 2021 15:16:32) CuisUniversity-4532.image priorSource: 17910394!

----STARTUP---- (21 June 2021 11:27:52) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!classRemoval: #StoreTestSimulator stamp: 'ja 6/21/2021 11:28:13'!
Object subclass: #StoreTestSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'ja 6/21/2021 11:28:14'!
Object subclass: #CreditCard
	instanceVariableNames: 'date expiredDate number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'ja 6/21/2021 11:28:14'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesCollection total date merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'ja 6/21/2021 11:28:15'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CheckOutTest stamp: 'ja 6/21/2021 11:28:15'!
TestCase subclass: #CheckOutTest
	instanceVariableNames: 'storeTestSimulator isAStolenCreditCard creditCardCanDebitTheAmount debitedAmount debitedCreditCard isAnInvalidCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ja 6/21/2021 11:28:16'!
TestCase subclass: #CartTest
	instanceVariableNames: 'storeTestSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/jampuero/Documentos/isw1/tps-catedra-2021/2021-1c/20-TusLibros/TusLibros-33.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/21/2021 11:31:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/21/2021 11:31:20'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/21/2021 11:31:20'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/21/2021 11:31:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/21/2021 11:31:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/21/2021 11:31:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/21/2021 11:31:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/21/2021 11:31:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/21/2021 11:31:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/21/2021 11:31:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/21/2021 11:31:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/21/2021 11:31:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/21/2021 11:31:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/21/2021 11:31:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/21/2021 11:31:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/21/2021 11:31:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/21/2021 11:31:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/21/2021 11:31:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/21/2021 11:31:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/21/2021 11:31:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/21/2021 11:31:26'!
PASSED!

----End fileIn of /home/jampuero/Documentos/isw1/ExtractMehodCustom/vm test/VMTest2/4533-CuisCore-jose-2021May24-00h36m-ja.004.cs.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/21/2021 11:35:37'!
PASSED!

----QUIT----(21 June 2021 11:38:29) CuisUniversity-4532.image priorSource: 17932749!

----STARTUP---- (21 June 2021 15:03:56) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: 'TusLibros' stamp: 'ja 6/21/2021 15:28:13'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'no messages' stamp: 'ja 6/21/2021 15:28:33'!
test01! !

!classRenamed: #TusLibrosTest as: #TusLibrosFacadeTest stamp: 'ja 6/21/2021 15:39:33'!
Smalltalk renameClassNamed: #TusLibrosTest as: #TusLibrosFacadeTest!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'ja 6/21/2021 15:48:18'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:46:49' prior: 50893685!
test01

	self should:[ TusLibrosFacade createCartFor: 'invalidUser' withPassword: 'validPassword' ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !

!testRun: #TusLibrosFacadeTest #test01 stamp: 'ja 6/21/2021 15:48:25'!
ERROR!
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:48:37'!
invalidUserOrPasswordErrorDescription
	self shouldBeImplemented.! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:49:15' prior: 50893715!
invalidUserOrPasswordErrorDescription
	
	^'Invalid user or password' ! !

!testRun: #TusLibrosFacadeTest #test01 stamp: 'ja 6/21/2021 15:49:17'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:49:32' prior: 50893701!
test01

	self should:[ TusLibrosFacade createCartFor: 'invalidUser' withPassword: 'validPassword' ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros' stamp: 'ja 6/21/2021 15:49:46'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'facade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:49:45' overrides: 16927572!
setUp

	facade _ TusLibrosFacade new.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:49:56' prior: 50893730!
test01

	self should:[ facade createCartFor: 'invalidUser' withPassword: 'validPassword' ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !

!testRun: #TusLibrosFacadeTest #test01 stamp: 'ja 6/21/2021 15:49:57'!
FAILURE!
!TusLibrosFacade methodsFor: 'no messages' stamp: 'ja 6/21/2021 15:50:33'!
createCartFor: anUser withPassword: aPassword! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:52:25' prior: 50893767!
createCartFor: anUser withPassword: aPassword


	self error: self class invalidUserOrPasswordErrorDescription ! !

!testRun: #TusLibrosFacadeTest #test01 stamp: 'ja 6/21/2021 15:52:31'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:53:12'!
test02

	self should:[ facade createCartFor: 'validUser' withPassword: 'invalidPassword' ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !

!testRun: #TusLibrosFacadeTest #test02 stamp: 'ja 6/21/2021 15:53:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'ja 6/21/2021 15:53:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'ja 6/21/2021 15:53:14'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:53:46'!
test01CanNotCreateCartWithAnInvalidUser

	self should:[ facade createCartFor: 'invalidUser' withPassword: 'validPassword' ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !

!methodRemoval: TusLibrosFacadeTest #test01 stamp: 'ja 6/21/2021 15:53:46'!
test01

	self should:[ facade createCartFor: 'invalidUser' withPassword: 'validPassword' ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:54:09'!
test02CanNotCreateCartWithAnInvalidPassword

	self should:[ facade createCartFor: 'validUser' withPassword: 'invalidPassword' ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !

!methodRemoval: TusLibrosFacadeTest #test02 stamp: 'ja 6/21/2021 15:54:09'!
test02

	self should:[ facade createCartFor: 'validUser' withPassword: 'invalidPassword' ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 15:54:49'!
test03CanCreateCartWithAValidUserAndPassword

	self should:[ facade createCartFor: 'validUser' withPassword: 'invalidPassword' ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:01:56' prior: 50893843!
test03CanCreateCartWithAValidUserAndPassword

	| cartId |

	cartId _	 facade createCartFor: 'validUser' withPassword: 'validPassword' .
	self assert: (facade listCartById: cartId) isEmpty.
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:17:56' prior: 50893749 overrides: 16927572!
setUp
	
	facade _ TusLibrosFacade with: self validUsersAndPasswords.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:18:48'!
validUsersAndPasswords

	^ Dictionary new at: self validUser put: self validPassword;
	yourself ! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:19:17'!
validUser

	^ 'validUser'! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:19:17' prior: 50893856!
test03CanCreateCartWithAValidUserAndPassword

	| cartId |

	cartId _	 facade createCartFor: self validUser withPassword: 'validPassword' .
	self assert: (facade listCartById: cartId) isEmpty.
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:19:17' prior: 50893821!
test02CanNotCreateCartWithAnInvalidPassword

	self should:[ facade createCartFor: self validUser withPassword: 'invalidPassword' ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:19:35'!
validPassword

	^ 'validPassword'! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:19:35' prior: 50893799!
test01CanNotCreateCartWithAnInvalidUser

	self should:[ facade createCartFor: 'invalidUser' withPassword: self validPassword ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:19:35' prior: 50893882!
test03CanCreateCartWithAValidUserAndPassword

	| cartId |

	cartId _	 facade createCartFor: self validUser withPassword: self validPassword .
	self assert: (facade listCartById: cartId) isEmpty.
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:19:51'!
invalidUser

	^ 'invalidUser'! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:19:51' prior: 50893909!
test01CanNotCreateCartWithAnInvalidUser

	self should:[ facade createCartFor: self invalidUser withPassword: self validPassword ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:20:09'!
invalidPassword

	^ 'invalidPassword'! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:20:09' prior: 50893892!
test02CanNotCreateCartWithAnInvalidPassword

	self should:[ facade createCartFor: self validUser withPassword: self invalidPassword ]  
		raise: Error
	       withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription ]! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:22:58'!
with: aValidAccounts! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:23:19' prior: 50893966!
with: aValidAccounts

	^ self new initializeWith: aValidAccounts ! !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'ja 6/21/2021 16:23:45'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'validAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:23:43'!
initializeWith: aValidAccounts 

	validAccounts _ aValidAccounts ! !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 16:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 16:24:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 16:24:07'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 16:24:07'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:27:19' prior: 50893772!
createCartFor: anUser withPassword: aPassword

	self assertIf: anUser hasTheCorrect: aPassword.
	
	self error: self class invalidUserOrPasswordErrorDescription ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:28:51'!
assertIf: anUser hasTheCorrect: aPassword

	validAccounts at: anUser ifAbsent:[self error: self class invalidUserOrPasswordErrorDescription ].! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:30:04' prior: 50894012!
assertIf: anUser hasTheCorrect: aPassword
	
	| password |
	password _ validAccounts at: anUser ifAbsent:[self error: self class invalidUserOrPasswordErrorDescription].
	password = aPassword ifFalse: [self error: self class invalidUserOrPasswordErrorDescription]
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:30:13' prior: 50894004!
createCartFor: anUser withPassword: aPassword

	self assertIf: anUser hasTheCorrect: aPassword.
	
	! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:31:32'!
with: aValidAccounts withCatalog: aCatalog 

	^ self new initializeWith: aValidAccounts ! !

!methodRemoval: TusLibrosFacade class #with: stamp: 'ja 6/21/2021 16:31:32'!
with: aValidAccounts

	^ self new initializeWith: aValidAccounts !

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros' stamp: 'ja 6/21/2021 16:32:43'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'facade testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:33:10' prior: 50893866 overrides: 16927572!
setUp
	
	testObjectFactory _ StoreTestObjectsFactory new.
	facade _ TusLibrosFacade 
			with: self validUsersAndPasswords
			withCatalog: testObjectFactory defaultCatalog .! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:36:10'!
authenticatingOver: aValidAccounts withCatalog: aCatalog 

	^ self new initializeWith: aValidAccounts ! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:36:10' prior: 50894058 overrides: 16927572!
setUp
	
	testObjectFactory _ StoreTestObjectsFactory new.
	facade _ TusLibrosFacade 
			authenticatingOver: self validUsersAndPasswords
			withCatalog: testObjectFactory defaultCatalog .! !

!methodRemoval: TusLibrosFacade class #with:withCatalog: stamp: 'ja 6/21/2021 16:36:10'!
with: aValidAccounts withCatalog: aCatalog 

	^ self new initializeWith: aValidAccounts !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:36:34' prior: 50894067!
authenticatingOver: aValidAccounts withCatalog: aCatalog 

	^ self new initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog ! !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'ja 6/21/2021 16:36:56'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'validAccounts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:36:55'!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog 
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts ! !

!methodRemoval: TusLibrosFacade #initializeWith: stamp: 'ja 6/21/2021 16:37:00'!
initializeWith: aValidAccounts 

	validAccounts _ aValidAccounts !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:37:30' prior: 50894032!
createCartFor: anUser withPassword: aPassword

	self assertIf: anUser hasTheCorrect: aPassword.
	
	Cart acceptingItemsOf: catalog.
	
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:37:38' prior: 50894117!
createCartFor: anUser withPassword: aPassword
	
	
	self assertIf: anUser hasTheCorrect: aPassword.
	
	Cart acceptingItemsOf: catalog.
	
	! !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'ja 6/21/2021 16:38:24'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'validAccounts catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:38:22' prior: 50894125!
createCartFor: anUser withPassword: aPassword
	
	self assertIf: anUser hasTheCorrect: aPassword.
	carts add: (Cart acceptingItemsOf: catalog).
	
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:38:40' prior: 50894105!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog 
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	carts _ OrderedCollection new.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:39:31' prior: 50894149!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog 
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	carts _ Dictionary new.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:41:07' prior: 50894141!
createCartFor: anUser withPassword: aPassword
	
	| cartId |
	self assertIf: anUser hasTheCorrect: aPassword.
	cartId _ self generateNewId
	carts at: cartId put:(Cart acceptingItemsOf: catalog).
	
	^ cartId
	
	
	
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:41:24' prior: 50894166!
createCartFor: anUser withPassword: aPassword
	
	| cartId |
	self assertIf: anUser hasTheCorrect: aPassword.
	cartId _ self generateNewId.
	carts at: cartId put:(Cart acceptingItemsOf: catalog).
	
	^ cartId
	
	
	
	! !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'ja 6/21/2021 16:42:05'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'validAccounts catalog carts lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:42:03'!
generateNewId

	^ lastId _ lastId + 1 ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:42:16' prior: 50894158!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog 
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	carts _ Dictionary new.
	lastId  _ 0 ! !

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 16:42:33'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 16:42:42'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:42:48'!
listCartById: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:43:11' prior: 50894215!
listCartById: aCartId

	^ carts at: aCartId 
	
	! !

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 16:45:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 16:45:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 16:45:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 16:45:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 16:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 16:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 16:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 16:46:14'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:51:29'!
test04CanAddAnItemToACart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword .
	
	facade add: 1 of: self validBook to: cartId.
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:53:13' prior: 50894254!
test04CanAddAnItemToACart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword .
	
	facade add: 1 of: self validBook to: cartId.
	self assert: ((facade listCartById: cartId) occurrencesOf: self validBook) = 1 .
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:54:12'!
validBook

	^ testObjectFactory itemNotSellByTheStore ! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:54:18' prior: 50894274!
validBook

	^ testObjectFactory itemSellByTheStore ! !

!testRun: #TusLibrosFacadeTest #test04CanAddAnItemToACart stamp: 'ja 6/21/2021 16:54:24'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:54:33'!
add: aSmallInteger of: aString to: aSmallInteger3 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:57:25' prior: 50894288!
add: anAmount of: aBook to: aCartId
	
	| currentCart |
	
	currentCart _ carts at: aCartId.
	currentCart add: anAmount of: aBook.
	
	! !

!testRun: #TusLibrosFacadeTest #test04CanAddAnItemToACart stamp: 'ja 6/21/2021 16:57:28'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 16:57:28'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 16:57:28'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 16:57:28'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddAnItemToACart stamp: 'ja 6/21/2021 16:57:28'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 16:57:48'!
test04CanAddABookToACart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword .
	
	facade add: 1 of: self validBook to: cartId.
	self assert: ((facade listCartById: cartId) occurrencesOf: self validBook) = 1 .
		! !

!methodRemoval: TusLibrosFacadeTest #test04CanAddAnItemToACart stamp: 'ja 6/21/2021 16:57:48'!
test04CanAddAnItemToACart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword .
	
	facade add: 1 of: self validBook to: cartId.
	self assert: ((facade listCartById: cartId) occurrencesOf: self validBook) = 1 .
		!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:01:57'!
test05CanNotAddABookNotSellByTheStore

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword .
	
	self should: [facade add: 1 of: self invalidBook to: cartId.] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotAddABookNotSellByTheStoreErrorDescription.
			self assert: (facade listCartById: cartId) isEmpty ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:02:15'!
invalidBook

	^ testObjectFactory itemNotSellByTheStore ! !

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 17:02:25'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:08:44'!
canNotAddABookNotSellByTheStoreErrorDescription

	^ Cart invalidItemErrorMessage ! !
!Cart class methodsFor: 'instance creation' stamp: 'ja 6/21/2021 17:09:23'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 17:10:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 17:10:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 17:10:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 17:10:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 17:10:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/21/2021 17:10:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 17:10:03'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:14:14'!
test06CanNotAddABookToAnInvalidCartId

	facade createCartFor: self validUser withPassword: 	self validPassword .
	
	self should: [facade add: 1 of: self validBook to: self invalidCartId.] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotAddABookToAnInvalidCartIdErrorDescription]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:14:39' prior: 50894400!
test06CanNotAddABookToAnInvalidCartId

	facade createCartFor: self validUser withPassword: 	self validPassword .
	
	self should: [facade add: 1 of: self validBook to: self invalidCartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotAddABookToAnInvalidCartIdErrorDescription]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:15:02'!
invalidCartId

	^ 'invalidCartId'! !

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/21/2021 17:15:07'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:15:29' prior: 50894414!
test06CanNotAddABookToAnInvalidCartId

	facade createCartFor: self validUser withPassword: 	self validPassword .
	
	self should: [facade add: 1 of: self validBook to: self invalidCartId] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotAddABookToAnInvalidCartIdErrorDescription]
	
		! !

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/21/2021 17:15:30'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/21/2021 17:15:52'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:16:00' prior: 50894436!
test06CanNotAddABookToAnInvalidCartId

	facade createCartFor: self validUser withPassword: 	self validPassword .
	
	self should: [facade add: 1 of: self validBook to: self invalidCartId] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotAddABookToAnInvalidCartIdErrorDescription]
	
		! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:16:31'!
canNotAddABookToAnInvalidCartIdErrorDescription

	^ 'Can Not Add A Book To An Invalid CartId'! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:24:57'!
cartsAt: aCartId

	^ carts at: aCartId! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:24:57' prior: 50894294!
add: anAmount of: aBook to: aCartId
	
	| currentCart |
	
	currentCart _ self cartsAt: aCartId.
	currentCart add: anAmount of: aBook.
	
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:24:57' prior: 50894220!
listCartById: aCartId

	^ self cartsAt: aCartId 
	
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:25:29' prior: 50894478!
cartsAt: aCartId

	^ carts at: aCartId ifAbsent: [self error: self canNotAddABookToAnInvalidCartIdErrorDescription ]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:28:09'!
invalidCartIdErrorDescription

	^ 'Can Not Add A Book To An Invalid CartId'! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:28:09' prior: 50894458!
test06CanNotAddABookToAnInvalidCartId

	facade createCartFor: self validUser withPassword: 	self validPassword .
	
	self should: [facade add: 1 of: self validBook to: self invalidCartId] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidCartIdErrorDescription]
	
		! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:28:09' prior: 50894496!
cartsAt: aCartId

	^ carts at: aCartId ifAbsent: [self error: self invalidCartIdErrorDescription ]! !

!methodRemoval: TusLibrosFacade #canNotAddABookToAnInvalidCartIdErrorDescription stamp: 'ja 6/21/2021 17:28:09'!
canNotAddABookToAnInvalidCartIdErrorDescription

	^ 'Can Not Add A Book To An Invalid CartId'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:28:47' prior: 50894503!
invalidCartIdErrorDescription

	^ 'Cart was not found for the given CartId'! !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 17:28:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 17:28:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 17:28:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/21/2021 17:28:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 17:28:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/21/2021 17:28:50'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:33:21'!
test07CanNotAddAnInvalidQuantityOfABook

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword .
	
	self should: [facade add: 0 of: self validBook to: cartId.] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotAddAnInvalidQuantityOfABookErrorDescription.
			self assert: (facade listCartById: cartId) isEmpty ]
	
		! !

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/21/2021 17:33:23'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:33:45'!
canNotAddAnInvalidQuantityOfABookErrorDescription

	^ Cart ! !
!Cart class methodsFor: 'error description' stamp: 'ja 6/21/2021 17:33:54'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:34:06' prior: 50894583!
canNotAddAnInvalidQuantityOfABookErrorDescription

	^ Cart invalidQuantityErrorMessage ! !

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/21/2021 17:34:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/21/2021 17:34:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 17:34:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 17:34:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 17:34:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/21/2021 17:34:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 17:34:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/21/2021 17:34:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/21/2021 17:34:14'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:36:05'!
test08CanNotListCartOfAnInvalidCartId

	facade createCartFor: self validUser withPassword: 	self validPassword .
	
	self should: [facade listCartById: self invalidCartId .] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidCartIdErrorDescription]
	
		! !

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/21/2021 17:36:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 17:36:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 17:36:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 17:36:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/21/2021 17:36:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 17:36:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/21/2021 17:36:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/21/2021 17:36:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/21/2021 17:36:07'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:36:31' prior: 50894631!
test08CanNotListCartOfAnInvalidCartId

	facade createCartFor: self validUser withPassword: 	self validPassword.
	
	self should: [facade listCartById: self invalidCartId .] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidCartIdErrorDescription]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:45:19'!
test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks

	| cartId books |
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	books _ facade listCartById: cartId 	.
	self assert: (books occurrencesOf: self validBook) = 1.
	self assert: (books occurrencesOf: self otherValidBook) = 2.	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:45:54'!
otherValidBook

	^ testObjectFactory otherItemSellByTheStore ! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'ja 6/21/2021 17:46:43'!
otherItemSellByTheStore

	^ 'otherValidItem'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'ja 6/21/2021 17:47:05' prior: 50894710!
otherItemSellByTheStore

	^ 'otherValidBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'ja 6/21/2021 17:47:22'!
otherItemSellByTheStorePrice
	
	^23! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'ja 6/21/2021 17:47:56' prior: 50892621!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self otherItemSellByTheStore put: self otherItemSellByTheStorePrice;
		yourself ! !

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/21/2021 17:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 17:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 17:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 17:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/21/2021 17:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 17:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/21/2021 17:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/21/2021 17:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/21/2021 17:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/21/2021 17:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/21/2021 17:48:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 17:48:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 17:48:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 17:48:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/21/2021 17:48:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 17:48:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/21/2021 17:48:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/21/2021 17:48:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/21/2021 17:48:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/21/2021 17:48:07'!
PASSED!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:48:56' prior: 50894491!
listCartById: aCartId

	^ self cartsAt: aCartId 
	
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:49:16' prior: 50894805!
listCartById: aCartId

	^ self cartsAt: aCartId items
	
	! !
!Cart methodsFor: 'queries' stamp: 'ja 6/21/2021 17:50:03'!
items

	^items copy! !

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/21/2021 17:50:14'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 17:50:33' prior: 50894810!
listCartById: aCartId

	^ (self cartsAt: aCartId) items
	
	! !

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/21/2021 17:50:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 17:50:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 17:50:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 17:50:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/21/2021 17:50:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 17:50:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/21/2021 17:50:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/21/2021 17:50:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/21/2021 17:50:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/21/2021 17:50:34'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:00:39'!
test10CanCheckOutACart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner
	
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:01:25' prior: 50894863!
test10CanCheckOutACart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
		
	
	
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:02:10' prior: 50894075 overrides: 16927572!
setUp
	
	testObjectFactory _ StoreTestObjectsFactory new.
	facade _ TusLibrosFacade 
			authenticatingOver: self validUsersAndPasswords
			withCatalog: testObjectFactory defaultCatalog 
			registiringOn: OrderedCollection new.! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:02:48'!
authenticatingOver: aValidAccounts withCatalog: aCatalog registiringOn: aSalesBook

	^ self new initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog registiringOn: aSalesBook! !

!methodRemoval: TusLibrosFacade class #authenticatingOver:withCatalog: stamp: 'ja 6/21/2021 18:02:57'!
authenticatingOver: aValidAccounts withCatalog: aCatalog 

	^ self new initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'ja 6/21/2021 18:03:17'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'validAccounts catalog carts lastId salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:03:15'!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog registiringOn: aSalesBook
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	salesBook _ aSalesBook .
	carts _ Dictionary new.
	lastId  _ 0 ! !

!methodRemoval: TusLibrosFacade #initializeAuthenticatingOver:withCatalog: stamp: 'ja 6/21/2021 18:03:20'!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog 
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	carts _ Dictionary new.
	lastId  _ 0 !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:09:28' prior: 50894881!
test10CanCheckOutACart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	self deny: (facade listPurchasesOf: self validUser withPassword: self validPassword) isEmpty .
	
	
	
		! !

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/21/2021 18:09:36'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:09:44'!
notExpiredCreditCardNumber
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:11:45' prior: 50894976!
notExpiredCreditCardNumber
	
	^'1234567891234567' ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:12:10'!
notExpiredCreditCardExpiringDate

	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:12:35' prior: 50894987!
notExpiredCreditCardExpiringDate

	^ Month month: today monthIndex year: today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:12:54'!
notExpiredCreditCardOwner

	^ 'Jose'! !

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/21/2021 18:13:05'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:13:12'!
checkout: aSmallInteger withCreditCardNumber: aString expiringOn: aMonth withOwner: aString4 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:13:44' prior: 50895005!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	! !

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/21/2021 18:14:04'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:14:11'!
listPurchasesOf: aString withPassword: aString2 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:15:12' prior: 50895021!
listPurchasesOf: aUser withPassword: aPassword
	
	^ OrderedCollection new.! !

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/21/2021 18:15:13'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/21/2021 18:15:26'!
FAILURE!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:15:43' prior: 50895027!
listPurchasesOf: aUser withPassword: aPassword
	
	^ OrderedCollection with:'a' .! !

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/21/2021 18:15:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/21/2021 18:15:54'!
PASSED!

----QUIT----(21 June 2021 18:56:51) CuisUniversity-4532.image priorSource: 17984536!

----STARTUP---- (22 June 2021 19:18:26) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----QUIT----(22 June 2021 19:37:15) CuisUniversity-4532.image priorSource: 18029903!

----STARTUP---- (22 June 2021 19:39:32) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----QUIT----(22 June 2021 20:09:08) CuisUniversity-4532.image priorSource: 18030100!

----STARTUP---- (23 June 2021 15:23:01) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 15:40:58'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 15:45:15'!
test11CanNotCheckoutWithAnInvalidCartId

	self 
		should: [facade checkout: self invalidCartId 
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidCartIdErrorDescription ]
	
	.
	
	self deny: (facade listPurchasesOf: self validUser withPassword: self validPassword) isEmpty .
	
	
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 15:45:21' prior: 50895107!
test11CanNotCheckoutWithAnInvalidCartId

	self 
		should: [facade checkout: self invalidCartId 
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidCartIdErrorDescription ]
	
		! !

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 15:45:25'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 15:45:26'!
FAILURE!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 15:46:53' prior: 50895012!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentCart |
	currentCart _ self cartsAt: aCartId.! !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 15:47:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 15:47:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 15:47:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 15:47:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 15:47:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 15:47:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 15:47:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 15:47:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 15:47:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 15:47:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 15:47:03'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 15:48:06'!
test12CanNotCheckoutWithAnEmptyCart

	self 
		should: [facade checkout: self invalidCartId 
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidCartIdErrorDescription ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 15:49:42' prior: 50895198!
test12CanNotCheckoutWithAnEmptyCart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnEmptyCartErrorDescription ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 15:50:44' prior: 50895215!
test12CanNotCheckoutWithAnEmptyCart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnEmptyCartErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 15:50:50'!
FAILURE!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 15:51:20'!
canNotCheckoutWithAnEmptyCartErrorDescription

	^'Can Not Checkout With An Empty Cart'! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 15:53:15' prior: 50895259!
canNotCheckoutWithAnEmptyCartErrorDescription

	^ Cashier cartCanNotBeEmptyErrorMessage ! !

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 15:53:42'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 15:53:42'!
FAILURE!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'ja 6/23/2021 15:57:23'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'validAccounts catalog carts lastId salesBook merchantProcesor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 15:57:20' prior: 50895152!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentCart |
	currentCart _ self cartsAt: aCartId.
	
	^ (Cashier 
		toCheckout: currentCart 
		charging: (CreditCard expiringOn: aDate )
		throught: merchantProcesor
		on: DateAndTime now
		registeringOn: salesBook) checkout. ! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:00:17'!
authenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook

	^ self new initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:00:42'!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	salesBook _ aSalesBook .
	merchantProcesor _ aMerchantProcessor .
	carts _ Dictionary new.
	lastId  _ 0 ! !

!methodRemoval: TusLibrosFacade #initializeAuthenticatingOver:withCatalog:registiringOn: stamp: 'ja 6/23/2021 16:00:48'!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog registiringOn: aSalesBook
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	salesBook _ aSalesBook .
	carts _ Dictionary new.
	lastId  _ 0 !

!methodRemoval: TusLibrosFacade class #authenticatingOver:withCatalog:registiringOn: stamp: 'ja 6/23/2021 16:00:55'!
authenticatingOver: aValidAccounts withCatalog: aCatalog registiringOn: aSalesBook

	^ self new initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog registiringOn: aSalesBook!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:01:38' prior: 50894899 overrides: 16927572!
setUp
	
	testObjectFactory _ StoreTestObjectsFactory new.
	facade _ TusLibrosFacade 
			authenticatingOver: self validUsersAndPasswords
			withCatalog: testObjectFactory defaultCatalog 
			trought: self
			registiringOn: OrderedCollection new.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:02:10'!
debit: anAmount from: aCreditCard! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:02:49' prior: 50895287!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentCart |
	currentCart _ self cartsAt: aCartId.
	
	^ (Cashier 
		toCheckout: currentCart 
		charging: (CreditCard expiringOn: aDate )
		throught: merchantProcesor
		on: DateAndTime now
		registeringOn: salesBook) checkOut. ! !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 16:03:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 16:03:00'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:03:56'!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory expiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnEmptyCartErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:04:16'!
expiredCreditCardExpiringDate

	! !

!methodRemoval: TusLibrosFacadeTest #expiredCreditCardExpiringDate stamp: 'ja 6/23/2021 16:04:39'!
expiredCreditCardExpiringDate

	!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:05:00'!
expiredCreditCardExpiringDate

	^ Month month: today monthIndex year: today yearNumber - 1! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:05:25' prior: 50895416!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory expiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnExpiredCreditCardErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:05:52'!
canNotCheckoutWithAnExpiredCreditCardErrorDescription

	^ Cashier canNotChargeAnExpiredCreditCardErrorMessage ! !

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:05:56'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:05:56'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:06:35' prior: 50895453!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory expiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnExpiredCreditCardErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 16:06:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:06:36'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:08:45'!
test14CanNotCheckoutWithAnInvalidCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory expiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnExpiredCreditCardErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros' stamp: 'ja 6/23/2021 16:09:25'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'facade testObjectFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:09:23' prior: 50895345 overrides: 16927572!
setUp
	
	testObjectFactory _ StoreTestObjectsFactory new.
	debitBehavior _ [:anAmount :aCreditCart | ].
	facade _ TusLibrosFacade 
			authenticatingOver: self validUsersAndPasswords
			withCatalog: testObjectFactory defaultCatalog 
			trought: self
			registiringOn: OrderedCollection new.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:09:49' prior: 50895356!
debit: anAmount from: aCreditCard

	^ debitBehavior value: anAmount value: aCreditCard ! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:12:52' prior: 50895561!
test14CanNotCheckoutWithAnInvalidCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier invalidCreditCartErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory invalidCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory invalidCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidCreditCartErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:13:34' prior: 50895613!
test14CanNotCheckoutWithAnInvalidCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier invalidCreditCartErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory invalidCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory invalidCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:14:04'!
invalidCreditCardNumber

	^ 1! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:14:26' prior: 50895665!
invalidCreditCardNumber

	^ '1'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:14:50'!
invalidCreditCardOwner

	^ 'invalidOwner'! !
!Cashier class methodsFor: 'error messages' stamp: 'ja 6/23/2021 16:16:13'!
invalidCreditCardErrorDescription

	^ 'Invalid Credit Card'! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:16:19' prior: 50895639!
test14CanNotCheckoutWithAnInvalidCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier invalidCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory invalidCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory invalidCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:16:38'!
canNotCheckoutWithAnInvalidCreditCardErrorDescription

	^ Cashier invalidCreditCardErrorDescription ! !

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 16:16:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:16:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 16:16:46'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:17:41'!
test14CanNotCheckoutWithAStolenCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier stolenCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory invalidCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory invalidCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAStolenCreditCardErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:18:11' prior: 50895773!
test14CanNotCheckoutWithAStolenCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier stolenCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory va] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAStolenCreditCardErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:18:27'!
test15CanNotCheckoutWithAStolenCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier stolenCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory va] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAStolenCreditCardErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !

!methodRemoval: TusLibrosFacadeTest #test14CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 16:18:27'!
test14CanNotCheckoutWithAStolenCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier stolenCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory va] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAStolenCreditCardErrorDescription.
			"falta testear con listPuschasers" ]
	
		!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:18:37' prior: 50895824!
test15CanNotCheckoutWithAStolenCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier stolenCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAStolenCreditCardErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!Cashier class methodsFor: 'error messages' stamp: 'ja 6/23/2021 16:19:27'!
stolenCreditCardErrorDescription

	^ 'Stolen Credit Card'! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:20:04'!
canNotCheckoutWithAStolenCreditCardErrorDescription

	^ Cashier stolenCreditCardErrorDescription ! !

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 16:20:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 16:20:08'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:21:22'!
test16CanNotCheckoutWhenCreditCardHasNoCredit

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier stolenCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWhenCreditCardHasNoCreditErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:22:03' prior: 50895968!
test16CanNotCheckoutWhenCreditCardHasNoCredit

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier creditCardhasNoCreditErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWhenCreditCardHasNoCreditErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:22:12' prior: 50895994!
test16CanNotCheckoutWhenCreditCardHasNoCredit

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWhenCreditCardHasNoCreditErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!Cashier class methodsFor: 'error messages' stamp: 'ja 6/23/2021 16:22:41'!
creditCardHasNoCreditErrorDescription

	^ 'Credit Card Has No Credit'! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:23:16'!
canNotCheckoutWhenCreditCardHasNoCreditErrorDescription

	^ Cashier creditCardHasNoCreditErrorMessage ! !

!methodRemoval: Cashier class #creditCardHasNoCreditErrorDescription stamp: 'ja 6/23/2021 16:23:41'!
creditCardHasNoCreditErrorDescription

	^ 'Credit Card Has No Credit'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:23:48' prior: 50896021!
test16CanNotCheckoutWhenCreditCardHasNoCredit

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWhenCreditCardHasNoCreditErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 16:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 16:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 16:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 16:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 16:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 16:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 16:23:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 16:23:56'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:25:44'!
test17CanNotListPurchasesWithAnInvalidUser

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWhenCreditCardHasNoCreditErrorDescription.
			"falta testear con listPuschasers" ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:27:36' prior: 50896210!
test17CanNotListPurchasesWithAnInvalidUser

	self should: [facade listPurchasesOf: self invalidUser withPassword: self validPassword ] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotListPurchasesWithAnInvalidUserErrorDescription]
	
		! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:28:10'!
canNotListPurchasesWithAnInvalidUserErrorDescription

	^ 'Can Not List Purchases With An Invalid User'! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:28:39' prior: 50895039!
listPurchasesOf: anUser withPassword: aPassword
	
	self assertIf: anUser hasTheCorrect: aPassword.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:29:01' prior: 50896236!
test17CanNotListPurchasesWithAnInvalidUser

	self should: [facade listPurchasesOf: self invalidUser withPassword: self validPassword ] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidUserOrPasswordErrorDescription]
	
		! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/21/2021 18:15:43' prior: 50896255!
listPurchasesOf: aUser withPassword: aPassword
	
	^ OrderedCollection with:'a' .! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:29:48' prior: 50896274!
listPurchasesOf: anUser withPassword: aPassword
	self assertIf: anUser hasTheCorrect: aPassword.
	^ OrderedCollection with:'a' .! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:29:51' prior: 50896280!
listPurchasesOf: anUser withPassword: aPassword

	self assertIf: anUser hasTheCorrect: aPassword.
	^ OrderedCollection with:'a' .! !

!methodRemoval: TusLibrosFacade #canNotListPurchasesWithAnInvalidUserErrorDescription stamp: 'ja 6/23/2021 16:30:02'!
canNotListPurchasesWithAnInvalidUserErrorDescription

	^ 'Can Not List Purchases With An Invalid User'!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 16:30:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 16:30:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 16:30:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 16:30:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 16:30:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 16:30:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 16:30:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 16:30:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 16:30:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 16:30:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 16:30:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 16:30:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:30:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 16:30:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 16:30:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 16:30:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 16:30:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 16:30:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 16:31:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 16:31:40'!
ERROR!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 16:31:40'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:31:57' prior: 50896262!
test17CanNotListPurchasesWithAnInvalidUser

	self should: [facade listPurchasesOf: self invalidUser withPassword: self validPassword ] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription]
	
		! !

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 16:31:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 16:31:58'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:32:32'!
test18CanNotListPurchasesWithAnInvalidPassword

	self should: [facade listPurchasesOf: self validUser withPassword: self invalidPassword ] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription]
	
		! !

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 16:32:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 16:32:34'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:33:02'!
test19CanListPurchases

	self should: [facade listPurchasesOf: self validUser withPassword: self invalidPassword ] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:36:02'!
test19CanListPurchasesAndSalesAreSaved

	self should: [facade listPurchasesOf: self validUser withPassword: self invalidPassword ] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription]
	
		! !

!methodRemoval: TusLibrosFacadeTest #test19CanListPurchases stamp: 'ja 6/23/2021 16:36:07'!
test19CanListPurchases

	self should: [facade listPurchasesOf: self validUser withPassword: self invalidPassword ] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription]
	
		!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:36:38' prior: 50896598!
test19CanListPurchasesAndSalesAreSaved

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) isEmpty .
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:37:20' prior: 50896622!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases isEmpty 
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:37:27' prior: 50896643!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases isEmpty.
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:39:14' prior: 50896666!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases isEmpty.
	self assert: listPurchases 
		! !
!Cashier class methodsFor: 'instance creation' stamp: 'ja 6/23/2021 16:58:46'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook ownedBy: anOwner 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:58:46' prior: 50892476!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ownedBy: anOwner ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:58:46' prior: 50892452!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook ownedBy: anOwner.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:58:46' prior: 50892387!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ownedBy: anOwner ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:58:46' prior: 50895361!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentCart |
	currentCart _ self cartsAt: aCartId.
	
	^ (Cashier 
		toCheckout: currentCart 
		charging: (CreditCard expiringOn: aDate )
		throught: merchantProcesor
		on: DateAndTime now
		registeringOn: salesBook ownedBy: anOwner) checkOut. ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:58:46' prior: 50892494!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new ownedBy: anOwner.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:58:46' prior: 50892408!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook ownedBy: anOwner.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:58:46' prior: 50892426!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook ownedBy: anOwner.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'ja 6/23/2021 16:58:46'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook!
!Cashier methodsFor: 'initialization' stamp: 'ja 6/23/2021 16:59:42'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook ownedBy: anOwner 
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 16:59:42' prior: 50896712!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook ownedBy: anOwner 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook ownedBy: anOwner! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'ja 6/23/2021 16:59:42'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ja 6/23/2021 16:59:53'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'ja 6/23/2021 16:59:51' prior: 50896883!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook ownedBy: anOwner 
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	owner _ anOwner ! !
!CashierTest methodsFor: 'tests' stamp: 'ja 6/23/2021 17:01:16' prior: 50896726!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook 
			ownedBy: testObjectsFactory user]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 17:01:33'!
user

	^'user'! !
!CashierTest methodsFor: 'tests' stamp: 'ja 6/23/2021 17:01:47' prior: 50896807!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new 
		ownedBy: testObjectsFactory user.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'ja 6/23/2021 17:01:53' prior: 50896771!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook 
				ownedBy: testObjectsFactory user ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'ja 6/23/2021 17:01:59' prior: 50896824!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook 
		ownedBy: testObjectsFactory user.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'ja 6/23/2021 17:02:04' prior: 50896745!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook 
		ownedBy: testObjectsFactory user.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'ja 6/23/2021 17:02:10' prior: 50896843!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook 
		ownedBy: testObjectsFactory user.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 17:02:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 17:02:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 17:02:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 17:02:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 17:02:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 17:02:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 17:02:12'!
PASSED!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 17:02:31' prior: 50896793!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentCart |
	currentCart _ self cartsAt: aCartId.
	
	^ (Cashier 
		toCheckout: currentCart 
		charging: (CreditCard expiringOn: aDate )
		throught: merchantProcesor
		on: DateAndTime now
		registeringOn: salesBook 
		ownedBy: anOwner) checkOut. ! !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 17:02:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 17:02:37'!
ERROR!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 17:02:37'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 17:03:07' prior: 50896689!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases isEmpty.
	
		! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ja 6/23/2021 17:11:17'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total owner purchase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout - private' stamp: 'ja 6/23/2021 17:11:15' prior: 50892296!
createSale

	^ Sale by: owner with: purchase
! !
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:12:47' prior: 50892309!
checkOut

	self createPurchase.
	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ total! !
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:13:02'!
createPurchase

	! !
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:25:38' prior: 50897224!
createPurchase

	| zzz |
	zzz _ Dictionary new.
	cart do:[ :anItem | zzz at: anItem put: (zzz at: anItem ifAbsent:[1] + 1)]! !
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:26:34' prior: 50897228!
createPurchase

	| purchases |
	purchases _ Dictionary new.
	cart do:[ :anItem | purchases at: anItem put: (purchases at: anItem ifAbsent:[1] + 1)]! !
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:27:40' prior: 50897235!
createPurchase

	| purchases |
	purchases _ Dictionary new.
	cart items do:[ :anItem | purchases at: anItem put: (purchases at: anItem ifAbsent:[1] + 1)]! !

----QUIT----(23 June 2021 17:27:56) CuisUniversity-4532.image priorSource: 18030297!

----STARTUP---- (23 June 2021 17:28:01) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


pp _ OrderedCollection with: 'a' with: 'a' with: 'b'.!

zz _ pp asDictionary.!

pp _ OrderedCollection with: 'p' with: 'p' with: 'a'.!

pp _ OrderedCollection with: 'p' with: 'p' with: 'a'.
xx _ Bag new.
pp do: [:w | xx add: w].!

pp _ OrderedCollection with: 'p' with: 'p' with: 'a'.
xx _ Bag new.
pp do: [:w | xx add: w].
xx!

xx!

xx contents.!
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:39:40' prior: 50897243!
createPurchase

	| purchases |
	
	purchases _ Bag new.
	
	cart items do: [:anItem | purchases add: anItem ].! !
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:41:14' prior: 50897268!
createPurchase

	| purchases |
	
	purchases _ Bag new.
	
	cart items do: [:anItem | purchases add: anItem ].
	
	purchase _ purchases contents.! !
!Cashier methodsFor: 'checkout - private' stamp: 'ja 6/23/2021 17:42:30' prior: 50897213!
createSale

	^ Sale by: owner with: purchase
	
! !

Object subclass: #Receipt
	instanceVariableNames: 'purchases total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Receipt category: 'TusLibros' stamp: 'ja 6/23/2021 17:45:05'!
Object subclass: #Receipt
	instanceVariableNames: 'purchases total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:45:34'!
createReceipt

	| purchases |
	
	purchases _ Bag new.
	
	cart items do: [:anItem | purchases add: anItem ].
	
	purchase _ purchases contents.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 17:45:34' prior: 50897218!
checkOut

	self createReceipt.
	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ total! !

!methodRemoval: Cashier #createPurchase stamp: 'ja 6/23/2021 17:45:34'!
createPurchase

	| purchases |
	
	purchases _ Bag new.
	
	cart items do: [:anItem | purchases add: anItem ].
	
	purchase _ purchases contents.!
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:46:07' prior: 50897297!
createReceipt

	| purchases |
	
	purchases _ Bag new.
	
	cart items do: [:anItem | purchases add: anItem ].
	
	purchase _ purchases contents.
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ja 6/23/2021 17:46:24'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total owner purchase receipt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:46:22' prior: 50897318!
createReceipt

	| purchases |
	
	purchases _ Bag new.
	
	cart items do: [:anItem | purchases add: anItem ].
	
	receipt _ purchases contents.
	! !
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:47:45' prior: 50897334!
createReceipt

	| purchases |
	
	purchases _ Bag new.
	
	cart items do: [:anItem | purchases add: anItem ].
	
	receipt _ Receipt with: purchases contents addingATotalOf: self total.
	! !
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:48:11' prior: 50897342!
createReceipt

	| purchases |
	
	purchases _ Bag new.
	
	cart items do: [:anItem | purchases add: anItem ].
	
	receipt _ Receipt with: purchases contents addingATotalOf: total .
	! !
!Cashier methodsFor: 'checkout' stamp: 'ja 6/23/2021 17:48:57' prior: 50897305!
checkOut

	self 
		calculateTotal;
		createReceipt;
		debitTotal;
		registerSale.

	^ total! !
!Receipt class methodsFor: 'no messages' stamp: 'ja 6/23/2021 17:50:31'!
with: aPurchases addingATotalOf: anAmount 

	^ self new initiliazeWith: aPurchases addingATotalOf: anAmount ! !
!Receipt methodsFor: 'no messages' stamp: 'ja 6/23/2021 17:50:54'!
initiliazeWith: aPurchases addingATotalOf: anAmount 

	purchases _ aPurchases .
	total  _ anAmount ! !
!Cashier methodsFor: 'checkout - private' stamp: 'ja 6/23/2021 17:51:26' prior: 50897282!
createSale

	^ Sale by: owner with: receipt 
	
! !

Object subclass: #Sale
	instanceVariableNames: 'owner receipt total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'ja 6/23/2021 17:52:06'!
Object subclass: #Sale
	instanceVariableNames: 'owner receipt total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale class methodsFor: 'instance creation' stamp: 'ja 6/23/2021 17:52:53'!
by: anOwner with: aReceipt 

	^ self new initializeBy: anOwner with: aReceipt! !
!Sale methodsFor: 'initialization' stamp: 'ja 6/23/2021 17:53:16'!
initializeBy: anOwner with: aReceipt

	owner _ anOwner .
	receipt _ aReceipt ! !

!methodRemoval: Sale class #of: stamp: 'ja 6/23/2021 17:55:42'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!methodRemoval: Sale #initializeTotal: stamp: 'ja 6/23/2021 17:55:48'!
initializeTotal: aTotal

	total := aTotal !

Object subclass: #Sale
	instanceVariableNames: 'owner receipt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'ja 6/23/2021 17:56:09'!
Object subclass: #Sale
	instanceVariableNames: 'owner receipt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'total' stamp: 'ja 6/23/2021 17:56:15' prior: 50892569!
total
	
	^ receipt total! !
!Receipt methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 17:56:28'!
total 

	^ total! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 17:56:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 17:56:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 17:56:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 17:56:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 17:56:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 17:56:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 17:56:57'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 17:56:57'!
PASSED!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 17:58:02' prior: 50896288!
listPurchasesOf: anUser withPassword: aPassword

	self assertIf: anUser hasTheCorrect: aPassword.
	^ self salesOwnedBy: anUser.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 17:58:21'!
salesOwnedBy: anUser

	^ OrderedCollection new! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 17:59:44' prior: 50897527!
salesOwnedBy: anUser

	^ salesBook select:[ :aSale | aSale xxx: anUser ]! !
!Sale methodsFor: 'total' stamp: 'ja 6/23/2021 18:00:02'!
xxx: anUser

	! !
!Sale methodsFor: 'total' stamp: 'ja 6/23/2021 18:00:23' prior: 50897537!
xxx: anUser

	^ owner = anUser ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:03:11' prior: 50897532!
salesOwnedBy: anUser

	^ salesBook select:[ :aSale | aSale wasMadeBy: anUser ]! !
!Sale methodsFor: 'total' stamp: 'ja 6/23/2021 18:03:24'!
wasMadeBy: anUser

	^ owner = anUser ! !

!methodRemoval: Sale #xxx: stamp: 'ja 6/23/2021 18:03:26'!
xxx: anUser

	^ owner = anUser !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:17:00' prior: 50897545!
salesOwnedBy: anUser
	
	| allSales purchases |
	
	allSales _ salesBook select:[ :aSale | aSale wasMadeBy: anUser ].
	
	purchases _ Dictionary new.
	allSales do:[ :aSale | purchases addAll: aSale receipt ]! !
!Receipt methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:17:47'!
purchases
	
	^ purchases ! !
!Sale methodsFor: 'initialization' stamp: 'ja 6/23/2021 18:18:32'!
purchases 

	^ receipt purchases ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:18:45' prior: 50897558!
salesOwnedBy: anUser
	
	| allSales purchases |
	
	allSales _ salesBook select:[ :aSale | aSale wasMadeBy: anUser ].
	
	purchases _ Dictionary new.
	allSales do:[ :aSale | purchases addAll: aSale purchases ]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:19:02' prior: 50897575!
salesOwnedBy: anUser
	
	| allSales purchases |
	
	allSales _ salesBook select:[ :aSale | aSale wasMadeBy: anUser ].
	
	purchases _ Dictionary new.
	allSales do:[ :aSale | purchases addAll: aSale purchases ].
	
	^ purchases ! !

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:19:15'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:19:15'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:26:52' prior: 50894998!
notExpiredCreditCardOwner

	^ 'validUser'! !

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:26:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 18:27:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:27:05'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:27:36' prior: 50897182!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	self halt.
	self deny: listPurchases isEmpty.
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:27:56' prior: 50897750!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases isEmpty.
	
		! !

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:27:57'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:28:45' prior: 50897773!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases isEmpty.
	self assert: (listPurchases at: self validBook) = 1.
	self assert: (listPurchases at: self otherValidBook ) = 2.		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:30:21' prior: 50897799!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases isEmpty.
	self assert: (listPurchases at: self validBook) = 1.
	self assert: (listPurchases at: self otherValidBook ) = 2.! !

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 18:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:30:22'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:31:24' prior: 50896430!
test17CanNotListPurchasesWithAnInvalidUser

	self should: [facade listPurchasesOf: self invalidUser withPassword: self validPassword ] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: TusLibrosFacade invalidUserOrPasswordErrorDescription]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:31:46' prior: 50895235!
test12CanNotCheckoutWithAnEmptyCart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) isEmpty . ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:31:51' prior: 50897935!
test12CanNotCheckoutWithAnEmptyCart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:31:57' prior: 50895489!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory expiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnExpiredCreditCardErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:32:02' prior: 50895684!
test14CanNotCheckoutWithAnInvalidCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier invalidCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory invalidCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory invalidCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:32:09' prior: 50895875!
test15CanNotCheckoutWithAStolenCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier stolenCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAStolenCreditCardErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:32:14' prior: 50896064!
test16CanNotCheckoutWhenCreditCardHasNoCredit

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWhenCreditCardHasNoCreditErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:32:24' prior: 50895128!
test11CanNotCheckoutWithAnInvalidCartId

	self 
		should: [facade checkout: self invalidCartId 
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidCartIdErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) isEmpty ]
	
		! !

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 18:32:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:32:26'!
PASSED!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:41:56' prior: 50897585!
salesOwnedBy: anUser
	
	| allSales purchases total |
	
	allSales _ salesBook select:[ :aSale | aSale wasMadeBy: anUser ].
	
	total _ 0.
	purchases _ Dictionary new.
	allSales do:[ :aSale | purchases addAll: aSale purchases.
		total _ total + aSale total ].
	
	^ purchases ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:45:32' prior: 50898181!
salesOwnedBy: anUser
	
	| allSales purchases total |
	
	allSales _ salesBook select:[ :aSale | aSale wasMadeBy: anUser ].
	
	total _ 0.
	purchases _ Dictionary new.
	allSales do:[ :aSale | purchases addAll: aSale purchases.
		total _ total + aSale total ].
	
	^ OrderedCollection with: purchases with: total.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:47:05' prior: 50897825!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases first isEmpty.
	self assert: (listPurchases first at: self validBook) = 1.
	self assert: (listPurchases first at: self otherValidBook ) = 2.
	self assert: listPurchases second = testObjectFactory itemSellByTheStorePrice + testObjectFactory otherItemSellByTheStorePrice * 2.! !

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:47:06'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:47:32' prior: 50898206!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases first isEmpty.
	self assert: (listPurchases first at: self validBook) = 1.
	self assert: (listPurchases first at: self otherValidBook ) = 2.
	self assert: listPurchases second = testObjectFactory itemSellByTheStorePrice + (testObjectFactory otherItemSellByTheStorePrice * 2).! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:47:51' prior: 50894953!
test10CanCheckOutACart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	self deny: (facade listPurchasesOf: self validUser withPassword: self validPassword) first isEmpty .
	
	
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:48:03' prior: 50898090!
test11CanNotCheckoutWithAnInvalidCartId

	self 
		should: [facade checkout: self invalidCartId 
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidCartIdErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) first isEmpty ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:48:09' prior: 50897958!
test12CanNotCheckoutWithAnEmptyCart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) first isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:48:15' prior: 50897981!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory expiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnExpiredCreditCardErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) first isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:48:20' prior: 50898006!
test14CanNotCheckoutWithAnInvalidCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier invalidCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory invalidCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory invalidCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) first isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:48:26' prior: 50898034!
test15CanNotCheckoutWithAStolenCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier stolenCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAStolenCreditCardErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) first isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:48:32' prior: 50898062!
test16CanNotCheckoutWhenCreditCardHasNoCredit

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWhenCreditCardHasNoCreditErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) first isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:48:45' prior: 50898240!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases first isEmpty.
	self assert: (listPurchases first at: self validBook) = 1.
	self assert: (listPurchases first at: self otherValidBook ) = 2.
	self assert: listPurchases second = testObjectFactory itemSellByTheStorePrice + (testObjectFactory otherItemSellByTheStorePrice * 2) .! !

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:48:45'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 18:49:19' prior: 50898445!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases first isEmpty.
	self assert: (listPurchases first at: self validBook) = 1.
	self assert: (listPurchases first at: self otherValidBook ) = 2.
	self assert: listPurchases second = (testObjectFactory itemSellByTheStorePrice + (testObjectFactory otherItemSellByTheStorePrice * 2)) .! !

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 18:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 18:49:20'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:08:51'!
test20CanNotAddItemWhenSessionIsExpired

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases first isEmpty.
	self assert: (listPurchases first at: self validBook) = 1.
	self assert: (listPurchases first at: self otherValidBook ) = 2.
	self assert: listPurchases second = (testObjectFactory itemSellByTheStorePrice + (testObjectFactory otherItemSellByTheStorePrice * 2)) .! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:09:07' prior: 50898580!
test20CanNotAddItemWhenSessionIsExpired

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:12:12' prior: 50898611!
test20CanNotAddItemWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	self adjustTime: [:aTime | aTime + 30 ].
	
	self should: [facade add: 1 of: self validBook to: cartId.] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:12:20' prior: 50898621!
test20CanNotAddItemWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	self adjustTime: [:aTime | aTime + 30 ].
	
	self should: [facade add: 1 of: self validBook to: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:12:46' prior: 50898637!
test20CanNotAddItemWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	self adjustTime: [:aTime | aTime + 31 ].
	
	self should: [facade add: 1 of: self validBook to: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !

Object subclass: #CustomClock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CustomClock category: 'TusLibros' stamp: 'ja 6/23/2021 19:13:29'!
Object subclass: #CustomClock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros' stamp: 'ja 6/23/2021 19:14:20'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'facade testObjectFactory debitBehavior customClock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:14:18' prior: 50895593 overrides: 16927572!
setUp
	
	testObjectFactory _ StoreTestObjectsFactory new.
	customClock _ CustomClock from: testObjectFactory today.
	debitBehavior _ [:anAmount :aCreditCart | ].
	facade _ TusLibrosFacade 
			authenticatingOver: self validUsersAndPasswords
			withCatalog: testObjectFactory defaultCatalog 
			trought: self
			registiringOn: OrderedCollection new.! !
!CustomClock class methodsFor: 'no messages' stamp: 'ja 6/23/2021 19:15:07'!
from: aDate

	^ self new initializeFrom: aDate 
	
	! !
!CustomClock methodsFor: 'no messages' stamp: 'ja 6/23/2021 19:15:17'!
initializeFrom: aDate 

	now _ aDate ! !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 19:15:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:15:52'!
ERROR!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:15:52'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:18:10' prior: 50898653!
test20CanNotAddItemWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade add: 1 of: self validBook to: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:19:12'!
adjustTime: aBlock

	customClock adjustTime: aBlock ! !
!CustomClock methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:19:39'!
adjustTime: aBlock 

	aBlock value: now.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:20:45' prior: 50898786!
test20CanNotAddItemWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade add: 1 of: self validBook to: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !
!CustomClock methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:20:53' prior: 50898806!
adjustTime: aBlock 

	now _ aBlock value: now.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:21:39'!
sessionHasExpiredErrorDescription

	^ 'Session Has Expired'! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:24:11'!
authenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook withClock: aClock 

	^ self new initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:24:11' prior: 50898689 overrides: 16927572!
setUp
	
	testObjectFactory _ StoreTestObjectsFactory new.
	customClock _ CustomClock from: testObjectFactory today.
	debitBehavior _ [:anAmount :aCreditCart | ].
	facade _ TusLibrosFacade 
			authenticatingOver: self validUsersAndPasswords
			withCatalog: testObjectFactory defaultCatalog 
			trought: self
			registiringOn: OrderedCollection new withClock: aClock.! !

!methodRemoval: TusLibrosFacade class #authenticatingOver:withCatalog:trought:registiringOn: stamp: 'ja 6/23/2021 19:24:11'!
authenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook

	^ self new initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:24:30' prior: 50898850 overrides: 16927572!
setUp
	
	testObjectFactory _ StoreTestObjectsFactory new.
	customClock _ CustomClock from: testObjectFactory today.
	debitBehavior _ [:anAmount :aCreditCart | ].
	facade _ TusLibrosFacade 
			authenticatingOver: self validUsersAndPasswords
			withCatalog: testObjectFactory defaultCatalog 
			trought: self
			registiringOn: OrderedCollection new 
			withClock: customClock.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:25:18'!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook withClock: aClock 
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	salesBook _ aSalesBook .
	merchantProcesor _ aMerchantProcessor .
	carts _ Dictionary new.
	lastId  _ 0 ! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:25:18' prior: 50898837!
authenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook withClock: aClock 

	^ self new initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook withClock: aClock! !

!methodRemoval: TusLibrosFacade #initializeAuthenticatingOver:withCatalog:trought:registiringOn: stamp: 'ja 6/23/2021 19:25:18'!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	salesBook _ aSalesBook .
	merchantProcesor _ aMerchantProcessor .
	carts _ Dictionary new.
	lastId  _ 0 !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'ja 6/23/2021 19:25:48'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'validAccounts catalog carts lastId salesBook merchantProcesor clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:25:45' prior: 50898892!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook withClock: aClock 
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	salesBook _ aSalesBook .
	merchantProcesor _ aMerchantProcessor .
	clock _ aClock.
	carts _ Dictionary new.
	lastId  _ 0 ! !

!classDefinition: #Session category: 'TusLibros' stamp: 'ja 6/23/2021 19:31:37'!
Object subclass: #Session
	instanceVariableNames: 'owner cart facade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:31:04' prior: 50894176!
createCartFor: anUser withPassword: aPassword
	
	| cartId |
	self assertIf: anUser hasTheCorrect: aPassword.
	
	cartId _ self generateNewId.
	carts at: cartId put: (Session by: anUser with: (Cart acceptingItemsOf: catalog) on: self).
	
	^ cartId
	
	
	
	! !
!Session class methodsFor: 'no messages' stamp: 'ja 6/23/2021 19:32:34'!
by: anUser with: aCart on: aFacade

	^ self new initializeBy: anUser with: aCart on: aFacade! !
!Session methodsFor: 'no messages' stamp: 'ja 6/23/2021 19:33:01'!
initializeBy: anUser with: aCart on: aFacade

	owner  _ anUser .
	cart _ aCart.
	facade _ aFacade ! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:33:03' prior: 50898977!
initializeBy: anUser with: aCart on: aFacade

	owner  _ anUser .
	cart _ aCart.
	facade _ aFacade .! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:33:37' prior: 50898960!
createCartFor: anUser withPassword: aPassword
	
	| cartId |
	self assertIf: anUser hasTheCorrect: aPassword.
	
	cartId _ self generateNewId.
	
	carts at: cartId put: (Session by: anUser with: (Cart acceptingItemsOf: catalog) on: self).
	
	^ cartId
	
	
	
	! !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'ja 6/23/2021 19:39:44'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'validAccounts catalog sessions lastId salesBook merchantProcesor clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:39:44' prior: 50898939!
initializeAuthenticatingOver: aValidAccounts withCatalog: aCatalog trought: aMerchantProcessor registiringOn: aSalesBook withClock: aClock 
	
	catalog _ aCatalog .
	validAccounts _ aValidAccounts.
	salesBook _ aSalesBook .
	merchantProcesor _ aMerchantProcessor .
	clock _ aClock.
	sessions _ Dictionary new.
	lastId  _ 0 ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:39:44' prior: 50894523!
cartsAt: aCartId

	^ sessions at: aCartId ifAbsent: [self error: self invalidCartIdErrorDescription ]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:39:44' prior: 50898991!
createCartFor: anUser withPassword: aPassword
	
	| cartId |
	self assertIf: anUser hasTheCorrect: aPassword.
	
	cartId _ self generateNewId.
	
	sessions at: cartId put: (Session by: anUser with: (Cart acceptingItemsOf: catalog) on: self).
	
	^ cartId
	
	
	
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:40:17'!
sessionsAt: aCartId

	^ sessions at: aCartId ifAbsent: [self error: self invalidCartIdErrorDescription ]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:40:17' prior: 50897097!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentCart |
	currentCart _ self sessionsAt: aCartId.
	
	^ (Cashier 
		toCheckout: currentCart 
		charging: (CreditCard expiringOn: aDate )
		throught: merchantProcesor
		on: DateAndTime now
		registeringOn: salesBook 
		ownedBy: anOwner) checkOut. ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:40:17' prior: 50894483!
add: anAmount of: aBook to: aCartId
	
	| currentCart |
	
	currentCart _ self sessionsAt: aCartId.
	currentCart add: anAmount of: aBook.
	
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:40:17' prior: 50894822!
listCartById: aCartId

	^ (self sessionsAt: aCartId) items
	
	! !

!methodRemoval: TusLibrosFacade #cartsAt: stamp: 'ja 6/23/2021 19:40:17'!
cartsAt: aCartId

	^ sessions at: aCartId ifAbsent: [self error: self invalidCartIdErrorDescription ]!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:40:31' prior: 50899066!
add: anAmount of: aBook to: aCartId
	
	| currentSession |
	
	currentSession _ self sessionsAt: aCartId.
	currentSession add: anAmount of: aBook.
	
	! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:40:51'!
add: anAmount of: aBook! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:43:07' prior: 50899093!
add: anAmount of: aBook
	
	self assertIfExpired.
	cart add: anAmount of: aBook .! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:43:25'!
assertIfExpired

	! !

!classDefinition: #Session category: 'TusLibros' stamp: 'ja 6/23/2021 19:50:18'!
Object subclass: #Session
	instanceVariableNames: 'owner cart facade lastTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:50:15' prior: 50899102!
assertIfExpired

	(lastTime + facade sessionDuration < facade now) ifTrue:[ self error: self sessionExpiredErrorDescription]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:50:41'!
sessionDuration

	^ 30 minutes! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:50:50'!
now

	^ clock now! !
!CustomClock methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:51:07'!
now! !
!CustomClock methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:51:13' prior: 50899128!
now

	^ now! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:52:23'!
sessionHasExpiredErrorDescription

	^'Session has expired'! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:52:33' prior: 50899113!
assertIfExpired

	(lastTime + facade sessionDuration < facade now) ifTrue:[ self error: self sessionHasExpiredErrorDescription]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:53:17' prior: 50898832!
sessionHasExpiredErrorDescription

	^ Session sessionHasExpiredErrorDescription! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:53:26' prior: 50899140!
assertIfExpired

	(lastTime + facade sessionDuration < facade now) ifTrue:[ self error: self class sessionHasExpiredErrorDescription]! !

!methodRemoval: Session #sessionHasExpiredErrorDescription stamp: 'ja 6/23/2021 19:53:35'!
sessionHasExpiredErrorDescription

	^'Session has expired'!
!Session class methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:53:40'!
sessionHasExpiredErrorDescription

	^'Session has expired'! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:53:57' prior: 50899154!
assertIfExpired

	(lastTime + facade sessionDuration < facade now) ifTrue:[ self error: self sessionHasExpiredErrorDescription]! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:54:00'!
sessionHasExpiredErrorDescription

	^'Session has expired'! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:54:09' prior: 50899171!
assertIfExpired

	(lastTime + facade sessionDuration < facade now) ifTrue:[self error: self sessionHasExpiredErrorDescription]! !

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:54:22'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:54:22'!
FAILURE!
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:54:50' prior: 50899183!
assertIfExpired

	((lastTime + facade sessionDuration) < facade now) ifTrue:[self error: self sessionHasExpiredErrorDescription]! !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 19:54:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 19:54:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 19:54:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 19:54:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 19:54:55'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 19:54:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 19:54:55'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 19:54:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 19:54:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 19:54:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 19:54:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 19:54:55'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 19:54:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 19:54:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 19:54:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 19:54:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 19:54:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 19:54:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 19:54:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:54:55'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:55:03'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:55:03'!
FAILURE!
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:56:23' prior: 50899198!
assertIfExpired

	((lastTime + facade sessionDuration) > facade now) ifTrue:[self error: self sessionHasExpiredErrorDescription]! !

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:56:32'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:56:32'!
FAILURE!
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:56:45' prior: 50899283!
assertIfExpired

	((lastTime + facade sessionDuration) < facade now) ifTrue:[self error: self sessionHasExpiredErrorDescription]! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:57:57' prior: 50898984!
initializeBy: anUser with: aCart on: aFacade

	owner  _ anUser .
	cart _ aCart.
	facade _ aFacade .
	lastTime _ facade now.! !

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:58:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 19:58:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 19:58:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 19:58:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 19:58:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 19:58:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 19:58:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 19:58:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 19:58:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 19:58:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 19:58:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 19:58:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 19:58:09'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 19:58:09'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 19:58:09'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 19:58:09'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 19:58:09'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 19:58:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 19:58:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 19:58:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 19:58:09'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:59:33'!
test21CanNotListCartWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade add: 1 of: self validBook to: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 19:59:53' prior: 50899386!
test21CanNotListCartWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade listCartById: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 19:59:59'!
FAILURE!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:01:09' prior: 50899074!
listCartById: aCartId

	^ (self sessionsAt: aCartId) itemsOfCart.
	
	! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:01:28'!
itemsOfCart
	
	self assertIfExpired.
	cart items! !

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 20:01:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 20:01:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 20:01:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 20:01:38'!
ERROR!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 20:01:38'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 20:01:38'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 20:01:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 20:01:38'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 20:01:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 20:01:38'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 20:01:38'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 20:01:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 20:01:38'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 20:01:38'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 20:01:38'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 20:01:38'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 20:01:38'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 20:01:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 20:01:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 20:01:38'!
ERROR!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 20:01:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 20:01:38'!
PASSED!
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:02:32' prior: 50899427!
itemsOfCart
	
	self assertIfExpired.
	^ cart items! !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 20:02:41'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 20:02:41'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 20:02:41'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 20:02:41'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 20:02:41'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 20:02:41'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 20:02:41'!
ERROR!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 20:02:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 20:02:41'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:03:39'!
test21CanNotCheckoutWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade listCartById: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:03:48'!
test22CanNotListCartWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade listCartById: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !

!methodRemoval: TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 20:03:48'!
test21CanNotListCartWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade listCartById: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:04:06'!
test21CanNotListCartWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade listCartById: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !

!methodRemoval: TusLibrosFacadeTest #test22CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 20:04:06'!
test22CanNotListCartWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade listCartById: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:04:15'!
test22CanNotCheckoutWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade listCartById: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !

!methodRemoval: TusLibrosFacadeTest #test21CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 20:04:15'!
test21CanNotCheckoutWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade listCartById: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:04:54' prior: 50899671!
test22CanNotCheckoutWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner.] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription]
	
	! !

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 20:04:59'!
FAILURE!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:05:25' prior: 50899051!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentSession |
	currentSession _ self sessionsAt: aCartId.
	
	^ (Cashier 
		toCheckout: currentSession 
		charging: (CreditCard expiringOn: aDate )
		throught: merchantProcesor
		on: DateAndTime now
		registeringOn: salesBook 
		ownedBy: anOwner) checkOut. ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:08:34' prior: 50899730!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentSession |
	currentSession _ self sessionsAt: aCartId.
	currentSession checkoutWithCreditCardExpiringOn: aDate. 
	^ (Cashier 
		toCheckout: currentSession 
		charging: (CreditCard expiringOn: aDate )
		throught: merchantProcesor
		on: DateAndTime now
		registeringOn: salesBook 
		ownedBy: anOwner) checkOut. ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:08:45' prior: 50899745!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentSession |
	currentSession _ self sessionsAt: aCartId.
	^ currentSession checkoutWithCreditCardExpiringOn: aDate. 
	! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:10:41'!
checkoutWhitCreditCardExpiringOn: aDate 

	^ (Cashier 
		toCheckout: cart
		charging: (CreditCard expiringOn: aDate )
		throught: facade merchantProcessor
		on: facade now date
		registeringOn: facade salesBook
		ownedBy: owner) checkOut. ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:10:55'!
merchantProcessor

	^ merchantProcesor ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:11:07'!
salesBook
	^ salesBook ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:11:09' prior: 50899787!
salesBook
	
	^ salesBook ! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:11:29' prior: 50899772!
checkoutWhitCreditCardExpiringOn: aDate 

	self assertIfExpired.
	^ (Cashier 
		toCheckout: cart
		charging: (CreditCard expiringOn: aDate )
		throught: facade merchantProcessor
		on: facade now date
		registeringOn: facade salesBook
		ownedBy: owner) checkOut. ! !

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 20:11:36'!
FAILURE!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:12:52' prior: 50899762!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentSession |
	currentSession _ self sessionsAt: aCartId.
	^ currentSession checkoutWhitCreditCardExpiringOn: aDate. 
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:13:08' prior: 50899810!
checkout: aCartId withCreditCardNumber: aCreditCardNumber expiringOn: aDate withOwner: anOwner 
	
	| currentSession |
	currentSession _ self sessionsAt: aCartId.
	^ currentSession checkoutWithCreditCardExpiringOn: aDate. 
	! !
!Session methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:13:22'!
checkoutWithCreditCardExpiringOn: aDate 

	self assertIfExpired.
	^ (Cashier 
		toCheckout: cart
		charging: (CreditCard expiringOn: aDate )
		throught: facade merchantProcessor
		on: facade now date
		registeringOn: facade salesBook
		ownedBy: owner) checkOut. ! !

!methodRemoval: Session #checkoutWhitCreditCardExpiringOn: stamp: 'ja 6/23/2021 20:13:22'!
checkoutWhitCreditCardExpiringOn: aDate 

	self assertIfExpired.
	^ (Cashier 
		toCheckout: cart
		charging: (CreditCard expiringOn: aDate )
		throught: facade merchantProcessor
		on: facade now date
		registeringOn: facade salesBook
		ownedBy: owner) checkOut. !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 20:13:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 20:13:26'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:14:48' prior: 50898811!
test20CanNotAddItemWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade add: 1 of: self validBook to: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription.
			self adjustTime: [:aTime | aTime - 31 minutes].
			self assert: (facade listCartById: cartId) isEmpty ]
	
	! !

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 20:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 20:14:49'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:14:52' prior: 50899932!
test20CanNotAddItemWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade add: 1 of: self validBook to: cartId] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription.
			self adjustTime: [:aTime | aTime - 31 minutes].
			self assert: (facade listCartById: cartId) isEmpty]
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 20:15:31' prior: 50899704!
test22CanNotCheckoutWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner.] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) first isEmpty]
	
	! !

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 20:15:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 20:54:13'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 20:54:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:09:11'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:17:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:17:20'!
PASSED!
!TusLibrosFacade methodsFor: 'protocol' stamp: 'ja 6/23/2021 21:22:41' prior: 50899033!
createCartFor: anUser withPassword: aPassword
	
	| cartId |
	
	self assertIf: anUser hasTheCorrect: aPassword.
	
	cartId _ self generateNewId.
	
	sessions at: cartId put: (Session by: anUser with: (Cart acceptingItemsOf: catalog) on: self).
	
	^ cartId
	
	
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:28:41'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:31:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:31:37'!
PASSED!
!TusLibrosFacade methodsFor: 'protocol' stamp: 'ja 6/23/2021 21:33:30' prior: 50899422!
listCartById: aCartId

	^ self sessionsAt: aCartId itemsOfCart.
	
	! !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:33:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:33:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:33:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:33:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:33:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:33:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:33:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:33:32'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:33:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:33:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:33:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:33:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:33:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:33:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:33:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:33:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:33:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:33:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:33:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:33:33'!
ERROR!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:33:33'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:33:33'!
PASSED!
!TusLibrosFacade methodsFor: 'protocol' stamp: 'ja 6/23/2021 21:33:44' prior: 50900819!
listCartById: aCartId

	^ (self sessionsAt: aCartId) itemsOfCart.
	
	! !

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:33:45'!
PASSED!

Object subclass: #PurchaseReceipt
	instanceVariableNames: 'purchases total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #PurchaseReceipt category: 'TusLibros' stamp: 'ja 6/23/2021 21:47:52'!
Object subclass: #PurchaseReceipt
	instanceVariableNames: 'purchases total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!PurchaseReceipt class methodsFor: 'no messages' stamp: 'ja 6/23/2021 21:48:39'!
with: aPurchases with: aNumber

	^ self new initialize	! !
!PurchaseReceipt class methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 21:49:29'!
with: aPurchases addingATotalOf: aNumber

	^ self new initialize	! !

!methodRemoval: PurchaseReceipt class #with:with: stamp: 'ja 6/23/2021 21:49:29'!
with: aPurchases with: aNumber

	^ self new initialize	!
!PurchaseReceipt class methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 21:49:56' prior: 50901002!
with: aPurchases addingATotalOf: anAmount

	^ self new initiliazeWith: aPurchases addingATotalOf: anAmount ! !

!methodRemoval: PurchaseReceipt class #with:addingATotalOf: stamp: 'ja 6/23/2021 21:51:10'!
with: aPurchases addingATotalOf: anAmount

	^ self new initiliazeWith: aPurchases addingATotalOf: anAmount !

!classRemoval: #PurchaseReceipt stamp: 'ja 6/23/2021 21:51:18'!
Object subclass: #PurchaseReceipt
	instanceVariableNames: 'purchases total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:51:22'!
PASSED!

!classRenamed: #Receipt as: #PurchaseReceipt stamp: 'ja 6/23/2021 21:51:46'!
Smalltalk renameClassNamed: #Receipt as: #PurchaseReceipt!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ja 6/23/2021 21:51:46' prior: 50897351!
createReceipt

	| purchases |
	
	purchases _ Bag new.
	
	cart items do: [:anItem | purchases add: anItem ].
	
	receipt _ PurchaseReceipt with: purchases contents addingATotalOf: total .
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:51:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:51:59'!
PASSED!
!TusLibrosFacade methodsFor: 'private' stamp: 'ja 6/23/2021 21:52:37' prior: 50898193!
salesOwnedBy: anUser
	
	| allSales purchases total |
	
	allSales _ salesBook select:[ :aSale | aSale wasMadeBy: anUser ].
	
	total _ 0.
	purchases _ Dictionary new.
	allSales do:[ :aSale | purchases addAll: aSale purchases.
		total _ total + aSale total ].
	
	^ PurchaseReceipt with: purchases addingATotalOf: total.! !
!TusLibrosFacadeTest methodsFor: 'list purchases test' stamp: 'ja 6/23/2021 21:53:30' prior: 50898479!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases purchases isEmpty.
	self assert: (listPurchases purchases at: self validBook) = 1.
	self assert: (listPurchases purchases at: self otherValidBook ) = 2.
	self assert: listPurchases total = (testObjectFactory itemSellByTheStorePrice + (testObjectFactory otherItemSellByTheStorePrice * 2)) .! !

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:53:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:53:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:53:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:53:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:53:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:53:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:53:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:53:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:53:32'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'checkout test' stamp: 'ja 6/23/2021 21:53:42' prior: 50898271!
test10CanCheckOutACart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	self deny: (facade listPurchasesOf: self validUser withPassword: self validPassword) purchases isEmpty .
	
	
	
		! !
!TusLibrosFacadeTest methodsFor: 'checkout test' stamp: 'ja 6/23/2021 21:53:51' prior: 50898292!
test11CanNotCheckoutWithAnInvalidCartId

	self 
		should: [facade checkout: self invalidCartId 
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade invalidCartIdErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) purchases isEmpty ]
	
		! !
!TusLibrosFacadeTest methodsFor: 'checkout test' stamp: 'ja 6/23/2021 21:54:05' prior: 50898312!
test12CanNotCheckoutWithAnEmptyCart

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) purchases isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'checkout test' stamp: 'ja 6/23/2021 21:54:11' prior: 50898335!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory expiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnExpiredCreditCardErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) purchases isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'checkout test' stamp: 'ja 6/23/2021 21:54:18' prior: 50898360!
test14CanNotCheckoutWithAnInvalidCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier invalidCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory invalidCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory invalidCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) purchases isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'checkout test' stamp: 'ja 6/23/2021 21:54:25' prior: 50898388!
test15CanNotCheckoutWithAStolenCreditCard

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier stolenCreditCardErrorDescription].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWithAStolenCreditCardErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) purchases isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'checkout test' stamp: 'ja 6/23/2021 21:54:32' prior: 50898416!
test16CanNotCheckoutWhenCreditCardHasNoCredit

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	debitBehavior _ [:anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].

	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate 
			withOwner: testObjectFactory notExpiredCreditCardOwner] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: facade canNotCheckoutWhenCreditCardHasNoCreditErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) purchases isEmpty]
	
		! !
!TusLibrosFacadeTest methodsFor: 'session test' stamp: 'ja 6/23/2021 21:54:38' prior: 50900052!
test22CanNotCheckoutWhenSessionIsExpired

	| cartId |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	self adjustTime: [:aTime | aTime + 31 minutes].
	
	self should: [facade checkout: cartId
			withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
			expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
			withOwner: testObjectFactory notExpiredCreditCardOwner.] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError  messageText equals: facade sessionHasExpiredErrorDescription.
			self assert: (facade listPurchasesOf: self validUser withPassword: self validPassword) purchases isEmpty]
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:54:42'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'list purchases test' stamp: 'ja 6/23/2021 21:55:24' prior: 50901305!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases purchases isEmpty.
	self assert: (listPurchases purchases at: self validBook) = 1.
	self assert: (listPurchases purchases at: self otherValidBook ) = 2.
	self assert: listPurchases total = (testObjectFactory itemSellByTheStorePrice + testObjectFactory otherItemSellByTheStorePrice * 2) .! !

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:55:25'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'list purchases test' stamp: 'ja 6/23/2021 21:55:35' prior: 50901739!
test19CanListPurchasesAndSalesAreSaved

	| cartId listPurchases |
	
	cartId _ facade createCartFor: self validUser withPassword: 	self validPassword.
	facade add: 1 of: self validBook to: cartId.
	facade add: 2 of: self otherValidBook to: cartId.
	
	facade checkout: cartId
		withCreditCardNumber: testObjectFactory notExpiredCreditCardNumber 
		expiringOn: testObjectFactory notExpiredCreditCardExpiringDate
		withOwner: testObjectFactory notExpiredCreditCardOwner.
	
	listPurchases _ facade listPurchasesOf: self validUser withPassword: self validPassword.
	
	self deny: listPurchases purchases isEmpty.
	self assert: (listPurchases purchases at: self validBook) = 1.
	self assert: (listPurchases purchases at: self otherValidBook ) = 2.
	self assert: listPurchases total = (testObjectFactory itemSellByTheStorePrice + (testObjectFactory otherItemSellByTheStorePrice * 2)).! !

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 21:55:36'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/23/2021 22:07:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/23/2021 22:07:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/23/2021 22:07:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/23/2021 22:07:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/23/2021 22:07:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 22:08:00'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/23/2021 22:14:42'!
PASSED!

----QUIT----(23 June 2021 22:19:09) CuisUniversity-4532.image priorSource: 18099196!

----STARTUP---- (24 June 2021 15:23:44) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/24/2021 15:23:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/24/2021 15:23:50'!
PASSED!
!Session methodsFor: 'assertions' stamp: 'ja 6/24/2021 15:24:19' prior: 50899298!
assertIfExpired

	((lastTime + facade sessionDuration) < facade now) ifTrue:[self error: self sessionHasExpiredErrorDescription].
	lastTime _ facade now.! !
!Session methodsFor: 'assertions' stamp: 'ja 6/24/2021 15:25:16' prior: 50902261!
assertIfExpired
	
	| now |
	now _ facade now.
	((lastTime + facade sessionDuration) < now) ifTrue:[self error: self sessionHasExpiredErrorDescription].
	lastTime _ now.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/24/2021 15:25:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/24/2021 15:25:21'!
PASSED!
!Session methodsFor: 'assertions' stamp: 'ja 6/24/2021 15:25:51' prior: 50902269!
assertIfExpired
	
	| now |
	now _ facade now.
	
	((lastTime + facade sessionDuration) < now) ifTrue:[self error: self sessionHasExpiredErrorDescription].
	
	lastTime _ now.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/24/2021 15:28:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/24/2021 15:29:22'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanNotCreateCartWithAnInvalidUser stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateCartWithAnInvalidPassword stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanCreateCartWithAValidUserAndPassword stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanAddABookToACart stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05CanNotAddABookNotSellByTheStore stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddABookToAnInvalidCartId stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddAnInvalidQuantityOfABook stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanNotListCartOfAnInvalidCartId stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09ListCartReturnsTheCorrectQuantityOfAllAddedBooks stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10CanCheckOutACart stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotCheckoutWithAnInvalidCartId stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotCheckoutWithAnEmptyCart stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotCheckoutWithAnInvalidCreditCard stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutWithAStolenCreditCard stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotCheckoutWhenCreditCardHasNoCredit stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17CanNotListPurchasesWithAnInvalidUser stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test18CanNotListPurchasesWithAnInvalidPassword stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test19CanListPurchasesAndSalesAreSaved stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test20CanNotAddItemWhenSessionIsExpired stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test21CanNotListCartWhenSessionIsExpired stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test22CanNotCheckoutWhenSessionIsExpired stamp: 'ja 6/24/2021 15:31:03'!
PASSED!

----SNAPSHOT----(24 June 2021 15:31:10) CuisUniversity-4532.image priorSource: 18255393!