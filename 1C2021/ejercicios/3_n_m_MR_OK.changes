
----STARTUP---- (16 May 2021 16:13:56) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4384.image!


!classRemoval: #TurboLaserCannon stamp: 'FG 5/16/2021 16:14:09'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #HSBlaster stamp: 'FG 5/16/2021 16:14:09'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Claw stamp: 'FG 5/16/2021 16:14:10'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Weapon stamp: 'FG 5/16/2021 16:14:10'!
Object subclass: #Weapon
	instanceVariableNames: 'weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TankRover stamp: 'FG 5/16/2021 16:14:10'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Aluminum3000 stamp: 'FG 5/16/2021 16:14:10'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Robot stamp: 'FG 5/16/2021 16:14:11'!
Object subclass: #Robot
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #RobotWarsTest stamp: 'FG 5/16/2021 16:14:11'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TrailerE stamp: 'FG 5/16/2021 16:14:16'!
Object subclass: #TrailerE
	instanceVariableNames: 'weightCapacity heightCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjE'!

!classRemoval: #RobotE stamp: 'FG 5/16/2021 16:14:16'!
Object subclass: #RobotE
	instanceVariableNames: 'status trailer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjE'!

!classRemoval: #ProductBE stamp: 'FG 5/16/2021 16:14:17'!
ProductE subclass: #ProductBE
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjE'!

!classRemoval: #ProductAE stamp: 'FG 5/16/2021 16:14:17'!
ProductE subclass: #ProductAE
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjE'!

!classRemoval: #ProductE stamp: 'FG 5/16/2021 16:14:17'!
Object subclass: #ProductE
	instanceVariableNames: 'weight height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjE'!

!classRemoval: #CashierE stamp: 'FG 5/16/2021 16:14:17'!
Object subclass: #CashierE
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjE'!

!classRemoval: #TrailerTestE stamp: 'FG 5/16/2021 16:14:18'!
TestCase subclass: #TrailerTestE
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjE'!

!classRemoval: #RobotTestE stamp: 'FG 5/16/2021 16:14:18'!
TestCase subclass: #RobotTestE
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjE'!

!classRemoval: #ProductTestE stamp: 'FG 5/16/2021 16:14:18'!
TestCase subclass: #ProductTestE
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjE'!

!classRemoval: #CashierTestE stamp: 'FG 5/16/2021 16:14:18'!
TestCase subclass: #CashierTestE
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjE'!

!classRemoval: #Trailer stamp: 'FG 5/16/2021 16:14:21'!
Object subclass: #Trailer
	instanceVariableNames: 'weightCapacity heightCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #WorkingNormal stamp: 'FG 5/16/2021 16:14:21'!
RobotStatus subclass: #WorkingNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #SensorsFailure stamp: 'FG 5/16/2021 16:14:22'!
RobotStatus subclass: #SensorsFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #OutOfOrder stamp: 'FG 5/16/2021 16:14:22'!
RobotStatus subclass: #OutOfOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #MechanicalFailure stamp: 'FG 5/16/2021 16:14:22'!
RobotStatus subclass: #MechanicalFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #RobotStatus stamp: 'FG 5/16/2021 16:14:22'!
Object subclass: #RobotStatus
	instanceVariableNames: 'robot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #ProductB stamp: 'FG 5/16/2021 16:14:23'!
Product subclass: #ProductB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #ProductA stamp: 'FG 5/16/2021 16:14:23'!
Product subclass: #ProductA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #Product stamp: 'FG 5/16/2021 16:14:23'!
Object subclass: #Product
	instanceVariableNames: 'weight height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #Cashier stamp: 'FG 5/16/2021 16:14:23'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #TrailerTest stamp: 'FG 5/16/2021 16:14:24'!
TestCase subclass: #TrailerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #RobotTest stamp: 'FG 5/16/2021 16:14:24'!
TestCase subclass: #RobotTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #ProductTest stamp: 'FG 5/16/2021 16:14:24'!
TestCase subclass: #ProductTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

!classRemoval: #CashierTest stamp: 'FG 5/16/2021 16:14:25'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjS'!

Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverTest category: 'Mars Rover' stamp: 'FG 5/16/2021 16:14:46'!
Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverTest category: 'Mars Rover' stamp: 'FG 5/16/2021 16:16:49'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'FG 5/16/2021 16:18:35'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'FG 5/16/2021 16:18:23'!
test01

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: ''.
	
	self assert: (marsRover isAt: 1@1 facing: 
	#North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:18:40' prior: 51002418!
test01

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: ''.
	
	self assert: (marsRover isAt: 1@1 facing: #North) ! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:19:00'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:19:00'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'FG 5/16/2021 16:19:06'!
at: aPoint facing: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: aPoint facing: aSymbol ! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:19:10'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:19:10'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'FG 5/16/2021 16:19:12' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: MarsRover class #error: stamp: 'FG 5/16/2021 16:19:21'!
error: aString 
	self shouldBeImplemented.!
!MarsRover class methodsFor: 'instance creation' stamp: 'FG 5/16/2021 16:20:03' prior: 51002438!
at: aPosition facing: aDirection

	^ self new initializeAt: aPosition facing: aDirection. 
	! !

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'FG 5/16/2021 16:20:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'FG 5/16/2021 16:20:33'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'no messages' stamp: 'FG 5/16/2021 16:20:29'!
initializeAt: aPosition facing: aDirection

	position := aPosition.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:20:40'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:20:40'!
ERROR!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:20:49'!
do: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:20:59' prior: 51002491!
do: aCommandCollection

	! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:21:03'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:21:03'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 16:21:18'!
isAt: aPoint facing: aSymbol 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 16:21:52' prior: 51002503!
isAt: aPosition facing: aDirection 
	^ (position = aPosition) and: [direction = aDirection].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:21:58'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:23:10'!
test02

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@2 facing: #North) ! !

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:23:12'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:23:12'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:23:59' prior: 51002495!
do: aCommandCollection

	position := 1@2.! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:24:02'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:24:02'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:24:02'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:25:18' prior: 51002528!
do: aCommandCollection

	(aCommandCollection == 'f') ifTrue:[position := 1@2].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:25:23'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:25:23'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:25:23'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:25:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:25:32'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:25:32'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:26:03' prior: 51002539!
do: aCommandCollection

	(aCommandCollection = 'f') ifTrue:[position := 1@2].! !

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:26:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:26:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:26:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:26:33'!
test03

	| marsRover |
	
	marsRover :=  MarsRover at: 1@2 facing: #North.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@3 facing: #North) ! !

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 16:26:35'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 16:26:35'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:26:58' prior: 51002558!
do: aCommand

	(aCommand = 'f') ifTrue:[  position := 1@2 ].! !
!MarsRover class methodsFor: 'instance creation' stamp: 'FG 5/16/2021 16:30:01' prior: 51002461!
at: aPosition facing: aDirection

	(aDirection = #North) ifTrue: [^ self new initializeAt: aPosition facing: aDirection. ].
	
	self error: self invalidDirectionSignal.
	! !
!MarsRover class methodsFor: 'instance creation' stamp: 'FG 5/16/2021 16:30:18' prior: 51002588!
at: aPosition facing: aDirection

	(aDirection = #North) ifTrue: [^ self new initializeAt: aPosition facing: 0@1. ].
	
	self error: self invalidDirectionSignal.
	! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:31:05' prior: 51002582!
do: aCommand

	(aCommand = 'f') ifTrue:[  position := position + direction ].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:31:11'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:31:11'!
FAILURE!
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 16:33:01' prior: 51002508!
isAt: aPosition facing: aDirection 

	
	^ (position = aPosition) and: [
		(aDirection = #North) ifTrue: [direction = 0@1].
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:33:05'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:33:05'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 16:42:05' prior: 51002615!
isAt: aPosition facing: aDirection 

	
	^ (position = aPosition) and: [
		(aDirection = #North) ifTrue: [direction = 0@1] ifFalse:[false].
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:42:08'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:42:08'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 16:43:29' prior: 51002627!
isAt: aPosition facing: aDirection 

	| directionAux |
		
	directionAux := 0@0.
	(aDirection = #North) ifTrue: [directionAux := 0@1].
	
	^ (position = aPosition) and: [ direction = directionAux].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:43:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:43:34'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 16:43:35'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:45:28'!
test04

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #West.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 0@1 facing: #West) ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'FG 5/16/2021 16:46:20' prior: 51002597!
at: aPosition facing: aDirection

	(aDirection = #North) ifTrue: [^ self new initializeAt: aPosition facing: 0@1. ].
	(aDirection = #West) ifTrue: [^ self new initializeAt: aPosition facing: -1@0. ].
	
	self error: self invalidDirectionSignal.
	! !
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 16:46:38' prior: 51002639!
isAt: aPosition facing: aDirection 

	| directionAux |
		
	directionAux := 0@0.
	(aDirection = #North) ifTrue: [directionAux := 0@1].
	(aDirection = #West) ifTrue: [directionAux := -1@0].
	
	^ (position = aPosition) and: [ direction = directionAux].! !

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 16:46:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 16:46:50'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:46:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:46:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 16:46:52'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 16:46:52'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:47:09' prior: 51002655!
test04

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 2@1 facing: #East) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:47:15'!
test05

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 2@1 facing: #East) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:47:26' prior: 51002699!
test04

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #West.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 0@1 facing: #West) ! !

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 16:47:29'!
PASSED!
!MarsRover class methodsFor: 'error handling' stamp: 'FG 5/16/2021 16:48:35'!
invalidDirectionSignal
	^ 'Error - Invalid Direction'! !

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 16:48:42'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 16:48:42'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 16:49:16' prior: 51002674!
isAt: aPosition facing: aDirection 

	| directionAux |
		
	directionAux := 0@0.
	(aDirection = #North) ifTrue: [directionAux := 0@1].
	(aDirection = #West) ifTrue: [directionAux := -1@0].
	(aDirection = #East) ifTrue: [directionAux := 1@0].
	
	^ (position = aPosition) and: [ direction = directionAux].! !
!MarsRover class methodsFor: 'instance creation' stamp: 'FG 5/16/2021 16:49:38' prior: 51002663!
at: aPosition facing: aDirection

	(aDirection = #North) ifTrue: [^ self new initializeAt: aPosition facing: 0@1. ].
	(aDirection = #West) ifTrue: [^ self new initializeAt: aPosition facing: -1@0. ].
	(aDirection = #East) ifTrue: [^ self new initializeAt: aPosition facing: 1@0. ].
	
	self error: self invalidDirectionSignal.
	! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:49:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:49:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 16:49:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 16:49:45'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 16:49:45'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:50:02'!
test06

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@0 facing: #South) ! !

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 16:50:05'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 16:50:05'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'FG 5/16/2021 16:50:26' prior: 51002747!
at: aPosition facing: aDirection

	(aDirection = #North) ifTrue: [^ self new initializeAt: aPosition facing: 0@1. ].
	(aDirection = #West) ifTrue: [^ self new initializeAt: aPosition facing: -1@0. ].
	(aDirection = #East) ifTrue: [^ self new initializeAt: aPosition facing: 1@0. ].
	(aDirection = #South) ifTrue: [^ self new initializeAt: aPosition facing: 0@-1. ].
	
	self error: self invalidDirectionSignal.
	! !
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 16:50:47' prior: 51002734!
isAt: aPosition facing: aDirection 

	| directionAux |
		
	directionAux := 0@0.
	(aDirection = #North) ifTrue: [directionAux := 0@1].
	(aDirection = #West) ifTrue: [directionAux := -1@0].
	(aDirection = #East) ifTrue: [directionAux := 1@0].
	(aDirection = #South) ifTrue: [directionAux := 0@-1].
	
	^ (position = aPosition) and: [ direction = directionAux].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 16:50:57'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:51:54'!
test07

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: 'b'.
	
	self assert: (marsRover isAt: 1@0 facing: #North) ! !

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 16:51:55'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 16:51:55'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:53:14' prior: 51002605!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].! !

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 16:53:17'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:53:52'!
test08

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'b'.
	
	self assert: (marsRover isAt: 1@2 facing: #South) ! !

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 16:53:53'!
PASSED!

!methodRemoval: MarsRoverTest #test08 stamp: 'FG 5/16/2021 16:53:57'!
test08

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'b'.
	
	self assert: (marsRover isAt: 1@2 facing: #South) !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 16:54:23'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 16:54:23'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 16:54:23'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 16:54:23'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 16:54:23'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 16:54:23'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 16:54:23'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 16:55:47'!
test08

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #West) ! !

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 16:55:48'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:57:33' prior: 51002841!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = #North ifTrue: [direction = #West] 
		
		].! !

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 16:58:00'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 16:58:00'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:58:13' prior: 51002896!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = #North ifTrue: [direction := #West] 
		
		].! !

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 16:58:18'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 16:58:18'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:58:59' prior: 51002911!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			(direction = #North) ifTrue: [direction := #West] 
		
		].! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 16:59:42' prior: 51002926!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			(direction = 0@1) ifTrue: [direction := -1@0] 
		
		].! !

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 16:59:44'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 16:59:44'!
ERROR!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:00:03' prior: 51002936!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = (0@1) ifTrue: [direction := -1@0] 
		
		].! !

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:00:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:00:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:00:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:00:08'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:00:08'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:00:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:00:08'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:00:08'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:00:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:00:26'!
test09

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #West.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #South) ! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:00:37'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:00:37'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:01:13' prior: 51002951!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = (0@1) ifTrue: [direction := -1@0]. 
			direction = (-1@0) ifTrue: [direction := 0@-1].
		].! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:01:37'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:01:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:01:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:01:39'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:01:39'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:01:39'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:01:39'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:01:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:01:40'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:01:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:01:40'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:01:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:01:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:01:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:01:45'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:01:45'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:01:45'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:01:45'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:01:45'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:01:45'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:01:45'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:02:31'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:02:31'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:02:35'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:02:55'!
PASSED!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:03:37' prior: 51002994!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = (-1@0) ifTrue: [direction := 0@-1].
			direction = (0@1) ifTrue: [direction := -1@0]. 
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:03:39'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:04:11'!
test10

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #East) ! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:09:00' prior: 51003064!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = (-1@0) ifTrue: [direction := 0@-1]
							ifFalse: [
								direction = (0@1) ifTrue: [direction := -1@0]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (-1@0) ]
											ifFalse: [ 
												
											]
									]
							] 
		].! !

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:09:11'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:09:11'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:09:15'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:09:18'!
PASSED!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:10:09' prior: 51003105!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = (-1@0) ifTrue: [direction := 0@-1]
							ifFalse: [
								direction = (0@1) ifTrue: [direction := -1@0]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (1@0) ]
											ifFalse: [ 
												
											]
									]
							] 
		].! !

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:10:14'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:10:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:10:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:10:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:10:16'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:10:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:10:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:10:16'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:10:16'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:10:16'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:10:16'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:10:36' prior: 51003097!
test10

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:10:54'!
test11

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:11:04' prior: 51003174!
test10

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #East) ! !

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:11:06'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:11:08'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:11:08'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:11:45' prior: 51003131!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = (-1@0) ifTrue: [direction := 0@-1]
							ifFalse: [
								direction = (0@1) ifTrue: [direction := -1@0]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (1@0) ]
											ifFalse: [ 
												direction = (1@0) ifTrue: [ direction := (0@1) ]
											]
									]
							] 
		].! !

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:11:50'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:11:52'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:12:59'!
test12

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #East) ! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:13:49' prior: 51003205!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = (-1@0) ifTrue: [direction := 0@-1]
							ifFalse: [
								direction = (0@1) ifTrue: [direction := -1@0]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (1@0) ]
											ifFalse: [ 
												direction = (1@0) ifTrue: [ direction := (0@1) ]
											]
									]
							] 
		].
	
		(aCommand = 'r') ifTrue:[ 
			direction = (0@1) ifTrue: [direction := 1@0]
							ifFalse: [
								direction = (0@1) ifTrue: [direction := -1@0]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (1@0) ]
											ifFalse: [ 
												direction = (1@0) ifTrue: [ direction := (0@1) ]
											]
									]
							] 
		].! !

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 17:13:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 17:13:58'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:15:16'!
test13

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #South) ! !

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 17:15:20'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 17:15:20'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:15:52' prior: 51003259!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = (-1@0) ifTrue: [direction := 0@-1]
							ifFalse: [
								direction = (0@1) ifTrue: [direction := -1@0]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (1@0) ]
											ifFalse: [ 
												direction = (1@0) ifTrue: [ direction := (0@1) ]
											]
									]
							] 
		].
	
		(aCommand = 'r') ifTrue:[ 
			direction = (0@1) ifTrue: [direction := 1@0]
							ifFalse: [
								direction = (1@0) ifTrue: [direction := 0@-1]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (1@0) ]
											ifFalse: [ 
												direction = (1@0) ifTrue: [ direction := (0@1) ]
											]
									]
							] 
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:15:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:15:56'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:15:56'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:15:56'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:15:56'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:15:56'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:15:56'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:15:56'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:15:56'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:15:56'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:15:57'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 17:15:57'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 17:15:57'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:16:09' prior: 51003319!
test13

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #West) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:16:15'!
test14

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #West) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:16:29' prior: 51003391!
test13

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #West.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #South) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:16:36' prior: 51003399!
test14

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #East) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:16:56' prior: 51003407!
test13

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #South) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:17:03' prior: 51003415!
test14

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #West) ! !

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 17:17:17'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 17:17:19'!
PASSED!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:17:46' prior: 51003331!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = (-1@0) ifTrue: [direction := 0@-1]
							ifFalse: [
								direction = (0@1) ifTrue: [direction := -1@0]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (1@0) ]
											ifFalse: [ 
												direction = (1@0) ifTrue: [ direction := (0@1) ]
											]
									]
							] 
		].
	
		(aCommand = 'r') ifTrue:[ 
			direction = (0@1) ifTrue: [direction := 1@0]
							ifFalse: [
								direction = (1@0) ifTrue: [direction := 0@-1]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (-1@0) ]
											ifFalse: [ 
												direction = (1@0) ifTrue: [ direction := (0@1) ]
											]
									]
							] 
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FG 5/16/2021 17:17:50'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:18:04'!
test15

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #West.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #North) ! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:18:39' prior: 51003443!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ 
			direction = (-1@0) ifTrue: [direction := 0@-1]
							ifFalse: [
								direction = (0@1) ifTrue: [direction := -1@0]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (1@0) ]
											ifFalse: [ 
												direction = (1@0) ifTrue: [ direction := (0@1) ]
											]
									]
							] 
		].
	
		(aCommand = 'r') ifTrue:[ 
			direction = (0@1) ifTrue: [direction := 1@0]
							ifFalse: [
								direction = (1@0) ifTrue: [direction := 0@-1]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (-1@0) ]
											ifFalse: [ 
												direction = (-1@0) ifTrue: [ direction := (0@1) ]
											]
									]
							] 
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FG 5/16/2021 17:18:44'!
PASSED!

Object subclass: #MarsRoverCardinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverCardinal category: 'Mars Rover' stamp: 'FG 5/16/2021 17:19:40'!
Object subclass: #MarsRoverCardinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Object subclass: #MarsRoverCardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverCardinalPoint category: 'Mars Rover' stamp: 'FG 5/16/2021 17:19:46'!
Object subclass: #MarsRoverCardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classRemoval: #MarsRoverCardinal stamp: 'FG 5/16/2021 17:19:48'!
Object subclass: #MarsRoverCardinal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverCardinalPoint category: 'Mars Rover' stamp: 'FG 5/16/2021 17:20:07'!
Object subclass: #MarsRoverCardinalPoint
	instanceVariableNames: 'left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRoverCardinalPoint methodsFor: 'no messages' stamp: 'FG 5/16/2021 17:20:06'!
left
	^ left
	! !
!MarsRoverCardinalPoint methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:20:20' prior: 51003614!
left
	^ self subclassResponsibility .
	! !

Object subclass: #MarsRoverCardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverCardinalPoint category: 'Mars Rover' stamp: 'FG 5/16/2021 17:20:33'!
Object subclass: #MarsRoverCardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRoverCardinalPoint methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:20:47'!
right
	^ self subclassResponsibility .
	! !
!MarsRoverCardinalPoint methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:20:58' overrides: 16881508!
value
	self subclassResponsibility.! !
!MarsRoverCardinalPoint methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:21:02' prior: 51003634!
right
	self subclassResponsibility .
	! !
!MarsRoverCardinalPoint methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:21:06' prior: 51003618!
left
	self subclassResponsibility .
	! !

MarsRoverCardinalPoint subclass: #MarsRoverNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverNorth category: 'Mars Rover' stamp: 'FG 5/16/2021 17:21:32'!
MarsRoverCardinalPoint subclass: #MarsRoverNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRoverNorth methodsFor: 'no messages' stamp: 'FG 5/16/2021 17:22:06' overrides: 51003649!
left
	! !

MarsRoverCardinalPoint subclass: #MarsRoverEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverEast category: 'Mars Rover' stamp: 'FG 5/16/2021 17:22:14'!
MarsRoverCardinalPoint subclass: #MarsRoverEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

MarsRoverCardinalPoint subclass: #MarsRoverSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverSouth category: 'Mars Rover' stamp: 'FG 5/16/2021 17:22:18'!
MarsRoverCardinalPoint subclass: #MarsRoverSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

MarsRoverCardinalPoint subclass: #MarsRoverWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverWest category: 'Mars Rover' stamp: 'FG 5/16/2021 17:22:22'!
MarsRoverCardinalPoint subclass: #MarsRoverWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRoverNorth methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:22:53' prior: 51003666 overrides: 51003649!
left
	^ MarsRoverWest new.
	! !
!MarsRoverNorth methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:23:42' overrides: 51003644!
right
	^ MarsRoverEast new.
	! !
!MarsRoverNorth methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:23:55' overrides: 51003639!
value
	^ 0@1.
	! !
!MarsRoverEast methodsFor: 'no messages' stamp: 'FG 5/16/2021 17:25:11' overrides: 51003649!
left
	^ MarsRoverNorth new.! !
!MarsRoverEast methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:25:18' overrides: 51003644!
right
	^ MarsRoverSouth new.! !
!MarsRoverEast methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:25:32' overrides: 51003639!
value
	^ 1@0.! !
!MarsRoverSouth methodsFor: 'no messages' stamp: 'FG 5/16/2021 17:25:53' overrides: 51003649!
left
	^ MarsRoverEast new.! !
!MarsRoverSouth methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:26:01' overrides: 51003644!
right
	^ MarsRoverWest new.! !
!MarsRoverSouth methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:26:11' overrides: 51003639!
value
	^ 0@-1.! !
!MarsRoverWest methodsFor: 'no messages' stamp: 'FG 5/16/2021 17:27:02' overrides: 51003649!
left
	^ MarsRoverSouth new.! !
!MarsRoverWest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:27:10' overrides: 51003644!
right
	^ MarsRoverNorth new.! !
!MarsRoverWest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:27:18' overrides: 51003639!
value
	^ -1@0.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'FG 5/16/2021 17:28:20' prior: 51002785!
at: aPosition facing: aDirection

	(aDirection = #North) ifTrue: [^ self new initializeAt: aPosition facing: MarsRoverNorth new. ].
	(aDirection = #West) ifTrue: [^ self new initializeAt: aPosition facing: MarsRoverWest new. ].
	(aDirection = #East) ifTrue: [^ self new initializeAt: aPosition facing: MarsRoverEast new. ].
	(aDirection = #South) ifTrue: [^ self new initializeAt: aPosition facing: MarsRoverSouth new. ].
	
	self error: self invalidDirectionSignal.
	! !
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 17:31:11' prior: 51002801!
isAt: aPosition facing: aDirection 

	| directionAux |
		
	directionAux := 0@0.
	(aDirection = #North) ifTrue: [directionAux := 0@1].
	(aDirection = #West) ifTrue: [directionAux := -1@0].
	(aDirection = #East) ifTrue: [directionAux := 1@0].
	(aDirection = #South) ifTrue: [directionAux := 0@-1].
	
	^ (position = aPosition) and: [ direction class name =  ('MarsRover' , aDirection asString )].! !

#North asString.!
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 17:33:42' prior: 51003780!
isAt: aPosition facing: aDirection 

	^ (position = aPosition) and: [ direction class name =  ('MarsRover' , aDirection asString )].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:33:58' prior: 51002426!
test01

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: MarsRoverNorth.
	
	marsRover do: ''.
	
	self assert: (marsRover isAt: 1@1 facing: #North) ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'FG 5/16/2021 17:34:51' prior: 51003762!
at: aPosition facing: aDirection

	^ self new initializeAt: aPosition facing: aDirection new. 	! !
!MarsRover methodsFor: 'accessing' stamp: 'FG 5/16/2021 17:35:25' prior: 51003796!
isAt: aPosition facing: aDirection 

	^ (position = aPosition) and: [ direction class =  aDirection ].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:36:09' prior: 51003804!
test01

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: MarsRoverNorth.
	
	marsRover do: ''.
	
	self assert: (marsRover isAt: 1@1 facing: MarsRoverNorth) ! !

MarsRoverCardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #North category: 'Mars Rover' stamp: 'FG 5/16/2021 17:37:04'!
MarsRoverCardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classRemoval: #North stamp: 'FG 5/16/2021 17:37:24'!
MarsRoverCardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

MarsRoverCardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #North category: 'Mars Rover' stamp: 'FG 5/16/2021 17:37:38'!
MarsRoverCardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

North class
	instanceVariableNames: ''!

!classDefinition: 'North class' category: 'Mars Rover' stamp: 'FG 5/16/2021 17:37:38'!
North class
	instanceVariableNames: ''!
!North methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:37:38' overrides: 51003649!
left
	^ MarsRoverWest new.
	! !
!North methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:37:38' overrides: 51003644!
right
	^ MarsRoverEast new.
	! !
!North methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:37:38' overrides: 51003639!
value
	^ 0@1.
	! !

!classRemoval: #North stamp: 'FG 5/16/2021 17:37:58'!
MarsRoverCardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classRenamed: #MarsRoverNorth as: #North stamp: 'FG 5/16/2021 17:38:42'!
Smalltalk renameClassNamed: #MarsRoverNorth as: #North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:42' prior: 51003826!
test01

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: ''.
	
	self assert: (marsRover isAt: 1@1 facing: North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:42' prior: 51003505!
test15

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #West.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #North) ! !
!MarsRoverEast methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:42' prior: 51003720 overrides: 51003649!
left
	^ North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:42' prior: 51003251!
test12

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #East) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:43' prior: 51003182!
test11

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:43' prior: 51002884!
test08

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #West) ! !
!MarsRoverWest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:43' prior: 51003753 overrides: 51003644!
right
	^ North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:43' prior: 51002829!
test07

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: 'b'.
	
	self assert: (marsRover isAt: 1@0 facing: #North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:43' prior: 51002570!
test03

	| marsRover |
	
	marsRover :=  MarsRover at: 1@2 facing: #North.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@3 facing: #North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:43' prior: 51002516!
test02

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@2 facing: #North) ! !

!classRenamed: #MarsRoverWest as: #West stamp: 'FG 5/16/2021 17:38:53'!
Smalltalk renameClassNamed: #MarsRoverWest as: #West!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:53' prior: 51003431!
test14

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #West) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:53' prior: 51003898!
test15

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #West.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #North) ! !
!North methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:53' prior: 51003706 overrides: 51003649!
left
	^ West new.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:53' prior: 51002715!
test04

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #West.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 0@1 facing: #West) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:54' prior: 51002982!
test09

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #West.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #South) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:54' prior: 51003927!
test08

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #West) ! !
!MarsRoverSouth methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:38:54' prior: 51003739 overrides: 51003644!
right
	^ West new.! !

!classRenamed: #MarsRoverSouth as: #South stamp: 'FG 5/16/2021 17:39:02'!
Smalltalk renameClassNamed: #MarsRoverSouth as: #South!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:02' prior: 51003190!
test10

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #East) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:02' prior: 51003968!
test14

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #West) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:02' prior: 51002772!
test06

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@0 facing: #South) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:02' prior: 51003997!
test09

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #West.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #South) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:02' prior: 51003423!
test13

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #South) ! !
!MarsRoverEast methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:02' prior: 51003725 overrides: 51003644!
right
	^ South new.! !
!West methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:02' prior: 51003748 overrides: 51003649!
left
	^ South new.! !

!classRenamed: #MarsRoverEast as: #East stamp: 'FG 5/16/2021 17:39:10'!
Smalltalk renameClassNamed: #MarsRoverEast as: #East!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:10' prior: 51004022!
test10

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #South.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #East) ! !
!South methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:10' prior: 51003734 overrides: 51003649!
left
	^ East new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:10' prior: 51004054!
test13

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #South) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:10' prior: 51003911!
test12

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #North.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #East) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:10' prior: 51003919!
test11

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:10' prior: 51002707!
test05

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: #East.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 2@1 facing: #East) ! !
!North methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:39:10' prior: 51003711 overrides: 51003644!
right
	^ East new.
	! !

!classRenamed: #MarsRoverCardinalPoint as: #CardinalPoint stamp: 'FG 5/16/2021 17:40:18'!
Smalltalk renameClassNamed: #MarsRoverCardinalPoint as: #CardinalPoint!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:41:48' prior: 51003513!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ direction := direction left 		].
	
		(aCommand = 'r') ifTrue:[ 
			direction = (0@1) ifTrue: [direction := 1@0]
							ifFalse: [
								direction = (1@0) ifTrue: [direction := 0@-1]
									ifFalse:[
										direction = (0@-1) ifTrue:[ direction := (-1@0) ]
											ifFalse: [ 
												direction = (-1@0) ifTrue: [ direction := (0@1) ]
											]
									]
							] 
		].! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:42:01' prior: 51004131!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	
	(aCommand = 'l') ifTrue:[ direction := direction left 		].
	
	(aCommand = 'r') ifTrue:[ direction := direction right ].! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:42:08' prior: 51004151!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction ].
	(aCommand = 'b') ifTrue:[ position := position - direction ].
	(aCommand = 'l') ifTrue:[ direction := direction left 		].
	(aCommand = 'r') ifTrue:[ direction := direction right ].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:42:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:42:42'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:42:42'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:42:42'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:42:42'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:42:42'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:42:42'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:42:42'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:42:42'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:42:42'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:42:43'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 17:42:43'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 17:42:43'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'FG 5/16/2021 17:42:43'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'FG 5/16/2021 17:42:43'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:42:59' prior: 51003956!
test02

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@2 facing: North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:06' prior: 51003948!
test03

	| marsRover |
	
	marsRover :=  MarsRover at: 1@2 facing: North.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@3 facing: North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:11' prior: 51003989!
test04

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 0@1 facing: West) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:17' prior: 51004113!
test05

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: East.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 2@1 facing: East) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:24' prior: 51004038!
test06

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@0 facing: South) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:29' prior: 51003940!
test07

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'b'.
	
	self assert: (marsRover isAt: 1@0 facing: North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:37' prior: 51004005!
test08

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: West) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:41' prior: 51004046!
test09

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #South) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:43' prior: 51004264!
test09

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: South) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:46' prior: 51004076!
test10

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: #East) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:48' prior: 51004280!
test10

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: East) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:43:59' prior: 51004105!
test11

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: East.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:44:05' prior: 51004097!
test12

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: East) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:44:11' prior: 51004089!
test13

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: East.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: South) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:44:15' prior: 51004030!
test14

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: #West) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:44:17' prior: 51004320!
test14

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: West) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:44:24' prior: 51003976!
test15

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: North) ! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:44:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:44:27'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:44:27'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:44:27'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:44:27'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:44:27'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:44:27'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:44:27'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:44:27'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:44:27'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:44:27'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 17:44:27'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 17:44:27'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FG 5/16/2021 17:44:27'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FG 5/16/2021 17:44:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:44:42'!
ERROR!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:45:17' prior: 51004162!
do: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction value].
	(aCommand = 'b') ifTrue:[ position := position - direction value].
	(aCommand = 'l') ifTrue:[ direction := direction left 		].
	(aCommand = 'r') ifTrue:[ direction := direction right ].! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FG 5/16/2021 17:45:20'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:48:14'!
test16

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'fflbrrbblf'.
	
	self assert: (marsRover isAt: 0@4 facing: North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:48:38' prior: 51004426!
test16

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'fflbrrbblfr'.
	
	self assert: (marsRover isAt: 0@4 facing: East) ! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:49:38'!
doOneCommand: aCommand

	(aCommand = 'f') ifTrue:[ position := position + direction value].
	(aCommand = 'b') ifTrue:[ position := position - direction value].
	(aCommand = 'l') ifTrue:[ direction := direction left 		].
	(aCommand = 'r') ifTrue:[ direction := direction right ].! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:50:20' prior: 51004380!
do: aCommandLine

	aCommandLine do:[:aCommand | self doOneCommand: aCommand].! !

!testRun: #MarsRoverTest #test16 stamp: 'FG 5/16/2021 17:50:28'!
FAILURE!

!testRun: #MarsRoverTest #test16 stamp: 'FG 5/16/2021 17:50:28'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:51:08' prior: 51004454!
do: aCommandLine

	aCommandLine do: [:aCommand | self doOneCommand: aCommand].! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:52:02' prior: 51004442!
doOneCommand: aCommand

	(aCommand = $f) ifTrue:[ position := position + direction value].
	(aCommand = $b) ifTrue:[ position := position - direction value].
	(aCommand = $l) ifTrue:[ direction := direction left 		].
	(aCommand = $r) ifTrue:[ direction := direction right ].! !

!testRun: #MarsRoverTest #test16 stamp: 'FG 5/16/2021 17:52:17'!
PASSED!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 17:53:16' prior: 51004469!
doOneCommand: aCommand

	(aCommand = $f) ifTrue:[ position := position + direction value].
	(aCommand = $b) ifTrue:[ position := position - direction value].
	(aCommand = $l) ifTrue:[ direction := direction left 		].
	(aCommand = $r) ifTrue:[ direction := direction right ].
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:55:00'!
test17

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: '$'.
	
	self assert: (marsRover isAt: 1@1 facing: North) ! !

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 17:55:03'!
PASSED!

!methodRemoval: MarsRoverTest #test17 stamp: 'FG 5/16/2021 17:55:12'!
test17

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: '$'.
	
	self assert: (marsRover isAt: 1@1 facing: North) !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:55:39' prior: 51004435!
test16

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'f$f'.
	
	self assert: (marsRover isAt: 1@2 facing: North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:48:14' prior: 51004512!
test16

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'fflbrrbblf'.
	
	self assert: (marsRover isAt: 0@4 facing: North) ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 17:56:31'!
test17

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'f$f'.
	
	self assert: (marsRover isAt: 1@2 facing: North) ! !

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 17:56:33'!
FAILURE!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 17:56:33'!
FAILURE!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 18:00:48' prior: 51004464!
do: aCommandLine

	aCommandLine do: [:aCommand 
		| 
		self doOneCommand: aCommand
		].! !

Object subclass: #MarsRover
	instanceVariableNames: 'position direction knowCommands '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'FG 5/16/2021 18:01:02'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction knowCommands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'FG 5/16/2021 18:02:04'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction knowCommands knownCommands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'initialization' stamp: 'FG 5/16/2021 18:02:02' prior: 51002481!
initializeAt: aPosition facing: aDirection

	position := aPosition.
	direction := aDirection.
	knownCommands := OrderedCollection with: $f with: $b with: $l with: $r.! !

Object subclass: #MarsRover
	instanceVariableNames: 'position direction knownCommands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'FG 5/16/2021 18:02:12'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction knownCommands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 18:03:56' prior: 51004540!
do: aCommandLine

	aCommandLine do: [:aCommand |
		(knownCommands includes: aCommand) negated ifTrue: [self error: self class invalidCommandErrorSignal].
		self doOneCommand: aCommand
		].! !
!MarsRover class methodsFor: 'error handling' stamp: 'FG 5/16/2021 18:04:15'!
invalidCommandErrorSignal
	^ 'Error - Invalid Command'! !

!methodRemoval: MarsRover class #invalidDirectionSignal stamp: 'FG 5/16/2021 18:04:17'!
invalidDirectionSignal
	^ 'Error - Invalid Direction'!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:04:40'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:05:23'!
ERROR!

knownCommands includes: aCommand!

(knownCommands includes: aCommand) negated!
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 18:06:25' prior: 51004588!
do: aCommandLine

	aCommandLine do: [:aCommand |
		(knownCommands includes: aCommand) negate ifTrue: [self error: self class invalidCommandErrorSignal].
		self doOneCommand: aCommand
		].! !
!MarsRover methodsFor: 'do' stamp: 'FG 5/16/2021 18:06:50' prior: 51004616!
do: aCommandLine

	aCommandLine do: [:aCommand |
		(knownCommands includes: aCommand) not ifTrue: [self error: self class invalidCommandErrorSignal].
		self doOneCommand: aCommand
		].! !

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:07:01'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:07:01'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 18:09:35' prior: 51004528!
test17

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'f$f'.
	
	self should: [self assert: (marsRover isAt: 1@2 facing: North)]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError equals: MarsRover invalidCommandErrorSignal.
			self assert: (marsRover isAt: 1@2 facing: North) 
			].! !

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:09:37'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:09:37'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 18:10:01' prior: 51004639!
test17

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'f$f'.
	
	self should: [self assert: (marsRover isAt: 1@2 facing: North)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError equals: MarsRover invalidCommandErrorSignal.
			self assert: (marsRover isAt: 1@2 facing: North) 
			].! !

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:10:02'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:10:02'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 18:10:24' prior: 51004658!
test17

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	self should: [marsRover do: 'f$f']
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError equals: MarsRover invalidCommandErrorSignal.
			self assert: (marsRover isAt: 1@2 facing: North) 
			].! !

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:10:26'!
FAILURE!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:10:26'!
FAILURE!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:11:16'!
FAILURE!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:11:16'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 5/16/2021 18:12:07' prior: 51004678!
test17

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	self should: [marsRover do: 'f$f']
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCommandErrorSignal.
			self assert: (marsRover isAt: 1@2 facing: North) 
			].! !

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:12:08'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:12:11'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 18:12:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 18:12:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 18:12:14'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 18:12:14'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 18:12:14'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:12:15'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:17:44' prior: 51004224!
test04

	| marsRover | 
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 0@1 facing: West) ! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 18:18:18'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FG 5/16/2021 18:18:19'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FG 5/16/2021 18:18:19'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FG 5/16/2021 18:18:19'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:18:19'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 5/16/2021 18:18:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 5/16/2021 18:18:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:18:40'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:19:43'!
test01MarsRoverStaysInTheSamePositionFacingTheSameDirectionIfItTriesToDoNothing

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: ''.
	
	self assert: (marsRover isAt: 1@1 facing: North) ! !

!methodRemoval: MarsRoverTest #test01 stamp: 'FG 5/16/2021 18:19:46'!
test01

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: ''.
	
	self assert: (marsRover isAt: 1@1 facing: North) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:21:31'!
test02AdvancesOnePositionToTheNorthWhenReceivingAFowardCommandWhileFacingNorth

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@2 facing: North) ! !

!methodRemoval: MarsRoverTest #test02 stamp: 'FG 5/16/2021 18:21:35'!
test02

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@2 facing: North) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:22:43'!
test01StaysInTheSamePositionFacingTheSameDirectionIfItTriesToDoNothing

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: ''.
	
	self assert: (marsRover isAt: 1@1 facing: North) ! !

!methodRemoval: MarsRoverTest #test01MarsRoverStaysInTheSamePositionFacingTheSameDirectionIfItTriesToDoNothing stamp: 'FG 5/16/2021 18:22:45'!
test01MarsRoverStaysInTheSamePositionFacingTheSameDirectionIfItTriesToDoNothing

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: ''.
	
	self assert: (marsRover isAt: 1@1 facing: North) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:26:43'!
test03StartsAtAnotherPositionAndAdvancesOnePositionToTheNorthWhenReceivingAFowardCommandWhileFacingNorth
	
	| marsRover |
	
	marsRover :=  MarsRover at: 1@2 facing: North.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@3 facing: North) ! !

!methodRemoval: MarsRoverTest #test03 stamp: 'FG 5/16/2021 18:26:45'!
test03

	| marsRover |
	
	marsRover :=  MarsRover at: 1@2 facing: North.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@3 facing: North) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:27:31'!
test04AdvancesOnePositionToTheWestWhenReceivingAForwardCommandWhileFacingWest

	| marsRover | 
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 0@1 facing: West) ! !

!methodRemoval: MarsRoverTest #test04 stamp: 'FG 5/16/2021 18:27:34'!
test04

	| marsRover | 
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 0@1 facing: West) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:27:57'!
test05AdvancesOnePositionToTheEastWhenReceivingAForwardCommandWhileFacingEast

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: East.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 2@1 facing: East) ! !

!methodRemoval: MarsRoverTest #test05 stamp: 'FG 5/16/2021 18:28:00'!
test05

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: East.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 2@1 facing: East) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:28:12'!
test06AdvancesOnePositionToTheSouthWhenReceivingAForwardCommandWhileFacingSouth

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@0 facing: South) ! !

!methodRemoval: MarsRoverTest #test06 stamp: 'FG 5/16/2021 18:28:13'!
test06

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'f'.
	
	self assert: (marsRover isAt: 1@0 facing: South) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:30:22'!
test07BacksOnePositionToTheSouthWhenReceivingABackwardCommandWhileFacingNorth

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'b'.
	
	self assert: (marsRover isAt: 1@0 facing: North) ! !

!methodRemoval: MarsRoverTest #test07 stamp: 'FG 5/16/2021 18:30:24'!
test07

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'b'.
	
	self assert: (marsRover isAt: 1@0 facing: North) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:31:10'!
test07BacksOnePositionWhenReceivingABackwardCommand

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'b'.
	
	self assert: (marsRover isAt: 1@0 facing: North) ! !

!methodRemoval: MarsRoverTest #test07BacksOnePositionToTheSouthWhenReceivingABackwardCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:31:11'!
test07BacksOnePositionToTheSouthWhenReceivingABackwardCommandWhileFacingNorth

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'b'.
	
	self assert: (marsRover isAt: 1@0 facing: North) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:32:00'!
test08TurnsToTheWestWhenReceivingATurnLeftCommandWhileFacingNorth

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: West) ! !

!methodRemoval: MarsRoverTest #test08 stamp: 'FG 5/16/2021 18:32:02'!
test08

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: West) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:32:22'!
test09TurnsToTheSouthWhenReceivingATurnLeftCommandWhileFacingWest

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: South) ! !

!methodRemoval: MarsRoverTest #test09 stamp: 'FG 5/16/2021 18:32:24'!
test09

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: South) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:32:35'!
test10TurnsToTheEastWhenReceivingATurnLeftCommandWhileFacingSouth

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: East) ! !

!methodRemoval: MarsRoverTest #test10 stamp: 'FG 5/16/2021 18:32:36'!
test10

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: East) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:32:47'!
test11TurnsToTheNorthWhenReceivingATurnLeftCommandWhileFacingEast

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: East.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: North) ! !

!methodRemoval: MarsRoverTest #test11 stamp: 'FG 5/16/2021 18:32:48'!
test11

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: East.
	
	marsRover do: 'l'.
	
	self assert: (marsRover isAt: 1@1 facing: North) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:33:16'!
test12TurnsToTheEastWhenReceivingATurnRightCommandWhileFacingNorth

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: East) ! !

!methodRemoval: MarsRoverTest #test12 stamp: 'FG 5/16/2021 18:33:17'!
test12

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: East) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:33:40'!
test13TurnsToTheSouthWhenReceivingATurnRightCommandWhileFacingEast

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: East.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: South) ! !

!methodRemoval: MarsRoverTest #test13 stamp: 'FG 5/16/2021 18:33:41'!
test13

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: East.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: South) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:33:57'!
test14TurnsToTheWestWhenReceivingATurnRightCommandWhileFacingSouth

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: West) ! !

!methodRemoval: MarsRoverTest #test14 stamp: 'FG 5/16/2021 18:33:59'!
test14

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: South.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: West) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:34:13'!
test15TurnsToTheNorthWhenReceivingATurnRightCommandWhileFacingWest

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: North) ! !

!methodRemoval: MarsRoverTest #test15 stamp: 'FG 5/16/2021 18:34:15'!
test15

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: West.
	
	marsRover do: 'r'.
	
	self assert: (marsRover isAt: 1@1 facing: North) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:36:07'!
test16CanFollowCorrectlyAMultipleCommandLine

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'fflbrrbblf'.
	
	self assert: (marsRover isAt: 0@4 facing: North) ! !

!methodRemoval: MarsRoverTest #test16 stamp: 'FG 5/16/2021 18:36:08'!
test16

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'fflbrrbblf'.
	
	self assert: (marsRover isAt: 0@4 facing: North) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:36:31'!
test16CanFollowCorrectlyAMultipleCommandLineWithoutInvalidCommands

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'fflbrrbblf'.
	
	self assert: (marsRover isAt: 0@4 facing: North) ! !

!methodRemoval: MarsRoverTest #test16CanFollowCorrectlyAMultipleCommandLine stamp: 'FG 5/16/2021 18:36:32'!
test16CanFollowCorrectlyAMultipleCommandLine

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: 'fflbrrbblf'.
	
	self assert: (marsRover isAt: 0@4 facing: North) !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:37:16'!
test17IfAnInvalidCommandIsFoundInLineStopsExecutionAndRetrievesAnError

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	self should: [marsRover do: 'f$f']
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCommandErrorSignal.
			self assert: (marsRover isAt: 1@2 facing: North) 
			].! !

!methodRemoval: MarsRoverTest #test17 stamp: 'FG 5/16/2021 18:37:17'!
test17

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	self should: [marsRover do: 'f$f']
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCommandErrorSignal.
			self assert: (marsRover isAt: 1@2 facing: North) 
			].!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:42:29'!
assert: aBlockOfAsssertions for: aMarsRover doing: aCommandLine

	aMarsRover do: aCommandLine.
	
	aBlockOfAsssertions value.! !

!testRun: #MarsRoverTest #test01StaysInTheSamePositionFacingTheSameDirectionIfItTriesToDoNothing stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test02AdvancesOnePositionToTheNorthWhenReceivingAFowardCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test03StartsAtAnotherPositionAndAdvancesOnePositionToTheNorthWhenReceivingAFowardCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test04AdvancesOnePositionToTheWestWhenReceivingAForwardCommandWhileFacingWest stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test05AdvancesOnePositionToTheEastWhenReceivingAForwardCommandWhileFacingEast stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test06AdvancesOnePositionToTheSouthWhenReceivingAForwardCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test07BacksOnePositionWhenReceivingABackwardCommand stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test08TurnsToTheWestWhenReceivingATurnLeftCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test09TurnsToTheSouthWhenReceivingATurnLeftCommandWhileFacingWest stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test10TurnsToTheEastWhenReceivingATurnLeftCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test11TurnsToTheNorthWhenReceivingATurnLeftCommandWhileFacingEast stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test12TurnsToTheEastWhenReceivingATurnRightCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test13TurnsToTheSouthWhenReceivingATurnRightCommandWhileFacingEast stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test14TurnsToTheWestWhenReceivingATurnRightCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test15TurnsToTheNorthWhenReceivingATurnRightCommandWhileFacingWest stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test16CanFollowCorrectlyAMultipleCommandLineWithoutInvalidCommands stamp: 'FG 5/16/2021 18:42:32'!
PASSED!

!testRun: #MarsRoverTest #test17IfAnInvalidCommandIsFoundInLineStopsExecutionAndRetrievesAnError stamp: 'FG 5/16/2021 18:42:32'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:43:49' prior: 51004874!
test01StaysInTheSamePositionFacingTheSameDirectionIfItTriesToDoNothing

	| marsRover |
	
	self assert: [self assert: (marsRover isAt: 1@1 facing: North)] for: (MarsRover at: 1@1 facing: North) doing: ''.
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	marsRover do: ''.
	 ! !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:45:16'!
assert: aMarsRover endsAt: aPosition facing: aDirection whileDoing: aCommandLine

	aMarsRover do: aCommandLine.
	
	self assert: (aMarsRover isAt: aPosition facing: aDirection).! !

----SNAPSHOT----(16 May 2021 18:45:43) CuisUniversity-4384.image priorSource: 21457270!

!methodRemoval: MarsRoverTest #assert:for:doing: stamp: 'FG 5/16/2021 18:45:53'!
assert: aBlockOfAsssertions for: aMarsRover doing: aCommandLine

	aMarsRover do: aCommandLine.
	
	aBlockOfAsssertions value.!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:46:40' prior: 51005267!
test01StaysInTheSamePositionFacingTheSameDirectionIfItTriesToDoNothing
	
	self assert: (MarsRover at: 1@1 facing: North) endsAt: 1@1  facing: North whileDoing: ''. 
	
	 ! !

!testRun: #MarsRoverTest #test01StaysInTheSamePositionFacingTheSameDirectionIfItTriesToDoNothing stamp: 'FG 5/16/2021 18:46:42'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:47:06' prior: 51004858!
test02AdvancesOnePositionToTheNorthWhenReceivingAFowardCommandWhileFacingNorth
	
	self assert: (MarsRover at: 1@1 facing: North) endsAt: 1@2  facing: North whileDoing: 'f'. ! !

!testRun: #MarsRoverTest #test02AdvancesOnePositionToTheNorthWhenReceivingAFowardCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:47:08'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:47:24' prior: 51004895!
test03StartsAtAnotherPositionAndAdvancesOnePositionToTheNorthWhenReceivingAFowardCommandWhileFacingNorth 
	
	self assert: (MarsRover at: 1@2 facing: North) endsAt: 1@3  facing: North whileDoing: 'f'. ! !

!testRun: #MarsRoverTest #test03StartsAtAnotherPositionAndAdvancesOnePositionToTheNorthWhenReceivingAFowardCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:47:26'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:47:48' prior: 51004912!
test04AdvancesOnePositionToTheWestWhenReceivingAForwardCommandWhileFacingWest

	self assert: (MarsRover at: 1@1 facing: West) endsAt: 0@1  facing: West whileDoing: 'f'. ! !

!testRun: #MarsRoverTest #test04AdvancesOnePositionToTheWestWhenReceivingAForwardCommandWhileFacingWest stamp: 'FG 5/16/2021 18:47:50'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:48:13' prior: 51004928!
test05AdvancesOnePositionToTheEastWhenReceivingAForwardCommandWhileFacingEast
	
	self assert: (MarsRover at: 1@1 facing: East) endsAt: 2@1  facing: East whileDoing: 'f'. ! !

!testRun: #MarsRoverTest #test05AdvancesOnePositionToTheEastWhenReceivingAForwardCommandWhileFacingEast stamp: 'FG 5/16/2021 18:48:15'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:48:43' prior: 51004944!
test06AdvancesOnePositionToTheSouthWhenReceivingAForwardCommandWhileFacingSouth

	self assert: (MarsRover at: 1@0 facing: South) endsAt: 1@1  facing: South whileDoing: 'f'. ! !

!testRun: #MarsRoverTest #test06AdvancesOnePositionToTheSouthWhenReceivingAForwardCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:48:45'!
FAILURE!

!testRun: #MarsRoverTest #test06AdvancesOnePositionToTheSouthWhenReceivingAForwardCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:48:45'!
FAILURE!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:48:59' prior: 51005363!
test06AdvancesOnePositionToTheSouthWhenReceivingAForwardCommandWhileFacingSouth

	self assert: (MarsRover at: 1@1 facing: South) endsAt: 1@0  facing: South whileDoing: 'f'. ! !

!testRun: #MarsRoverTest #test06AdvancesOnePositionToTheSouthWhenReceivingAForwardCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:49:01'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:49:18' prior: 51004977!
test07BacksOnePositionWhenReceivingABackwardCommand

	self assert: (MarsRover at: 1@1 facing: North) endsAt: 1@0  facing: North whileDoing: 'b'. ! !

!testRun: #MarsRoverTest #test07BacksOnePositionWhenReceivingABackwardCommand stamp: 'FG 5/16/2021 18:49:20'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:49:43' prior: 51004997!
test08TurnsToTheWestWhenReceivingATurnLeftCommandWhileFacingNorth

	self assert: (MarsRover at: 1@1 facing: North) endsAt: 1@1  facing: West whileDoing: 'l'.  ! !

!testRun: #MarsRoverTest #test08TurnsToTheWestWhenReceivingATurnLeftCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:49:45'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:50:06' prior: 51005013!
test09TurnsToTheSouthWhenReceivingATurnLeftCommandWhileFacingWest

	self assert: (MarsRover at: 1@1 facing: West) endsAt: 1@1  facing: South whileDoing: 'l'. ! !

!testRun: #MarsRoverTest #test09TurnsToTheSouthWhenReceivingATurnLeftCommandWhileFacingWest stamp: 'FG 5/16/2021 18:50:08'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:50:30' prior: 51005029!
test10TurnsToTheEastWhenReceivingATurnLeftCommandWhileFacingSouth

	self assert: (MarsRover at: 1@1 facing: South) endsAt: 1@1  facing: East whileDoing: 'l'. ! !

!testRun: #MarsRoverTest #test10TurnsToTheEastWhenReceivingATurnLeftCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:50:31'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:50:50' prior: 51005045!
test11TurnsToTheNorthWhenReceivingATurnLeftCommandWhileFacingEast

	self assert: (MarsRover at: 1@1 facing: East) endsAt: 1@1  facing: North whileDoing: 'l'. ! !

!testRun: #MarsRoverTest #test11TurnsToTheNorthWhenReceivingATurnLeftCommandWhileFacingEast stamp: 'FG 5/16/2021 18:50:53'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:51:09' prior: 51005061!
test12TurnsToTheEastWhenReceivingATurnRightCommandWhileFacingNorth

	self assert: (MarsRover at: 1@1 facing: North) endsAt: 1@1  facing: East whileDoing: 'r'. ! !

!testRun: #MarsRoverTest #test12TurnsToTheEastWhenReceivingATurnRightCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:51:35'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:52:13' prior: 51005077!
test13TurnsToTheSouthWhenReceivingATurnRightCommandWhileFacingEast

	self assert: (MarsRover at: 1@1 facing: East) endsAt: 1@1  facing: South whileDoing: 'r'. ! !

!testRun: #MarsRoverTest #test13TurnsToTheSouthWhenReceivingATurnRightCommandWhileFacingEast stamp: 'FG 5/16/2021 18:52:17'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:52:52' prior: 51005093!
test14TurnsToTheWestWhenReceivingATurnRightCommandWhileFacingSouth

	self assert: (MarsRover at: 1@1 facing: South) endsAt: 1@1  facing: West whileDoing: 'r'. ! !

!testRun: #MarsRoverTest #test14TurnsToTheWestWhenReceivingATurnRightCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:53:33'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:53:52' prior: 51005109!
test15TurnsToTheNorthWhenReceivingATurnRightCommandWhileFacingWest

 
	self assert: (MarsRover at: 1@1 facing: West) endsAt: 1@1  facing: North whileDoing: 'r'. ! !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:53:56' prior: 51005490!
test15TurnsToTheNorthWhenReceivingATurnRightCommandWhileFacingWest

	self assert: (MarsRover at: 1@1 facing: West) endsAt: 1@1  facing: North whileDoing: 'r'. ! !

!testRun: #MarsRoverTest #test15TurnsToTheNorthWhenReceivingATurnRightCommandWhileFacingWest stamp: 'FG 5/16/2021 18:53:59'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:54:27' prior: 51005141!
test16CanFollowCorrectlyAMultipleCommandLineWithoutInvalidCommands

	self assert: (MarsRover at: 0@4 facing: North) endsAt: 1@1  facing: North whileDoing: 'fflbrrbblf'. ! !

!testRun: #MarsRoverTest #test16CanFollowCorrectlyAMultipleCommandLineWithoutInvalidCommands stamp: 'FG 5/16/2021 18:54:29'!
FAILURE!

!testRun: #MarsRoverTest #test16CanFollowCorrectlyAMultipleCommandLineWithoutInvalidCommands stamp: 'FG 5/16/2021 18:54:29'!
FAILURE!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:54:48' prior: 51005510!
test16CanFollowCorrectlyAMultipleCommandLineWithoutInvalidCommands

	self assert: (MarsRover at: 1@1 facing: North) endsAt: 0@4  facing: North whileDoing: 'fflbrrbblf'. ! !

!testRun: #MarsRoverTest #test16CanFollowCorrectlyAMultipleCommandLineWithoutInvalidCommands stamp: 'FG 5/16/2021 18:54:50'!
PASSED!

!testRun: #MarsRoverTest #test01StaysInTheSamePositionFacingTheSameDirectionIfItTriesToDoNothing stamp: 'FG 5/16/2021 18:54:52'!
PASSED!

!testRun: #MarsRoverTest #test02AdvancesOnePositionToTheNorthWhenReceivingAFowardCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:54:52'!
PASSED!

!testRun: #MarsRoverTest #test03StartsAtAnotherPositionAndAdvancesOnePositionToTheNorthWhenReceivingAFowardCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:54:52'!
PASSED!

!testRun: #MarsRoverTest #test04AdvancesOnePositionToTheWestWhenReceivingAForwardCommandWhileFacingWest stamp: 'FG 5/16/2021 18:54:52'!
PASSED!

!testRun: #MarsRoverTest #test05AdvancesOnePositionToTheEastWhenReceivingAForwardCommandWhileFacingEast stamp: 'FG 5/16/2021 18:54:52'!
PASSED!

!testRun: #MarsRoverTest #test06AdvancesOnePositionToTheSouthWhenReceivingAForwardCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test07BacksOnePositionWhenReceivingABackwardCommand stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test08TurnsToTheWestWhenReceivingATurnLeftCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test09TurnsToTheSouthWhenReceivingATurnLeftCommandWhileFacingWest stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test10TurnsToTheEastWhenReceivingATurnLeftCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test11TurnsToTheNorthWhenReceivingATurnLeftCommandWhileFacingEast stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test12TurnsToTheEastWhenReceivingATurnRightCommandWhileFacingNorth stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test13TurnsToTheSouthWhenReceivingATurnRightCommandWhileFacingEast stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test14TurnsToTheWestWhenReceivingATurnRightCommandWhileFacingSouth stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test15TurnsToTheNorthWhenReceivingATurnRightCommandWhileFacingWest stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test16CanFollowCorrectlyAMultipleCommandLineWithoutInvalidCommands stamp: 'FG 5/16/2021 18:54:53'!
PASSED!

!testRun: #MarsRoverTest #test17IfAnInvalidCommandIsFoundInLineStopsExecutionAndRetrievesAnError stamp: 'FG 5/16/2021 18:54:53'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 5/16/2021 18:55:24' prior: 51005160!
test17IfAnInvalidCommandIsFoundInLineStopsExecutionAndRetrievesAnError

	| marsRover |
	
	marsRover :=  MarsRover at: 1@1 facing: North.
	
	self should: [marsRover do: 'f$f']
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCommandErrorSignal.
			self assert: (marsRover isAt: 1@2 facing: North) 
		].! !

----QUIT----(16 May 2021 18:55:31) CuisUniversity-4384.image priorSource: 21556339!

----STARTUP---- (16 May 2021 18:56:09) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4384.image!


----QUIT----(16 May 2021 18:56:21) CuisUniversity-4384.image priorSource: 21567243!