
----STARTUP---- (8 June 2021 17:54:25) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!

!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:02:03'!
test08EmptyShoppingCartHasNoBooks
	| shoppingCart books catalog |
	
	catalog := BookCatalog new.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	books := shoppingCart books.
	self assert: 0 equals: books size.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:02:18' prior: 50363049!
test08EmptyShoppingCartHasNoBooks
	| shoppingCart books catalog |
	
	catalog := BookCatalog new.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	books := shoppingCart books.
	
	self assert: 0 equals: books size.! !

!testRun: #ShoppingCartTest #test08EmptyShoppingCartHasNoBooks stamp: 'TT 6/8/2021 18:02:20'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:02:24'!
books
	self shouldBeImplemented.
	^books! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:02:29' prior: 50363073!
books
	^books! !

!testRun: #ShoppingCartTest #test08EmptyShoppingCartHasNoBooks stamp: 'TT 6/8/2021 18:02:32'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:02:32'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:02:32'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:02:32'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:02:32'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:02:32'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:02:32'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartHasNoBooks stamp: 'TT 6/8/2021 18:02:32'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartHasNoBooks stamp: 'TT 6/8/2021 18:02:35'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:02:35'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:02:35'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:02:35'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:02:35'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:02:35'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:02:35'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartHasNoBooks stamp: 'TT 6/8/2021 18:02:35'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartHasNoBooks stamp: 'TT 6/8/2021 18:02:38'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:02:38'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:02:38'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:02:38'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:02:38'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:02:38'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:02:38'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartHasNoBooks stamp: 'TT 6/8/2021 18:02:38'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartHasNoBooks stamp: 'TT 6/8/2021 18:02:39'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:02:39'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:02:39'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:02:39'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:02:40'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:02:40'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:02:40'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartHasNoBooks stamp: 'TT 6/8/2021 18:02:40'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:03:48'!
test09ShoppingCartWithOneUniqueBookReturnsThatBook
	| shoppingCart books catalog |
	
	catalog := BookCatalog new.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	books := shoppingCart books.
	
	self assert: 0 equals: books size.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:04:06'!
test08EmptyShoppingCartReturnsNoBooks
	| shoppingCart books catalog |
	
	catalog := BookCatalog new.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	books := shoppingCart books.
	
	self assert: 0 equals: books size.! !

!methodRemoval: ShoppingCartTest #test08EmptyShoppingCartHasNoBooks stamp: 'TT 6/8/2021 18:04:06'!
test08EmptyShoppingCartHasNoBooks
	| shoppingCart books catalog |
	
	catalog := BookCatalog new.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	books := shoppingCart books.
	
	self assert: 0 equals: books size.!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:04:55' prior: 50363212!
test08EmptyShoppingCartReturnsNoBooks
	| shoppingCart books catalog book |
	book := '978-3-16-148410-0'.
	
	catalog := BookCatalog new.
	catalog register: book.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	shoppingCart add: book units: 1.
	 
	books := shoppingCart books.
	
	self assert: 0 equals: books size.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:05:07' prior: 50363233!
test08EmptyShoppingCartReturnsNoBooks
	| shoppingCart books catalog book |
	book := '978-3-16-148410-0'.
	
	catalog := BookCatalog new.
	catalog register: book.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	shoppingCart add: book units: 1.
	 
	books := shoppingCart books.
	
	self assert: 1 equals: books size.
	self assert: book equals: books first.! !

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:05:10'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:05:10'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:05:10'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:05:10'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:05:10'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:05:10'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:05:10'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:05:10'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:05:10'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:04:06' prior: 50363247!
test08EmptyShoppingCartReturnsNoBooks
	| shoppingCart books catalog |
	
	catalog := BookCatalog new.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	books := shoppingCart books.
	
	self assert: 0 equals: books size.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:05:35' prior: 50363201!
test09ShoppingCartWithOneUniqueBookReturnsThatBook
	| shoppingCart books catalog book |
	book := '978-3-16-148410-0'.
	
	catalog := BookCatalog new.
	catalog register: book.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	shoppingCart add: book units: 1.
	 
	books := shoppingCart books.
	
	self assert: 1 equals: books size.
	self assert: book equals: books first.! !

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:05:36'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:05:36'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:05:36'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:05:36'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:05:37'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:05:37'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:05:37'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:05:37'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:05:37'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:05:47' prior: 50363307!
test09ShoppingCartWithOneUniqueBookReturnsThatBook
	| shoppingCart books catalog book |
	book := '978-3-16-148410-0'.
	
	catalog := BookCatalog new.
	catalog register: book.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	shoppingCart add: book units: 5.
	 
	books := shoppingCart books.
	
	self assert: 1 equals: books size.
	self assert: book equals: books first.! !

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:05:49'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:06:18' prior: 50363078!
books
	^books first! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:06:22'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:06:22'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:06:22'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:06:22'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:06:22'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:06:22'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:06:23'!
ERROR!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:06:23'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:06:40' prior: 50363376!
books
	^OrderedCollection with: books first! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:06:41'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:06:41'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:06:42'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:06:42'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:06:42'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:06:42'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:06:42'!
ERROR!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:06:42'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:06:42'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:06:59' prior: 50363411!
books
	books  ifEmpty: [^books].
	^OrderedCollection with: books first! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:07:01'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:07:01'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:07:01'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:07:01'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:07:01'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:07:01'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:07:01'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:07:01'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:10:27'!
test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| shoppingCart books catalog book |
	book := '978-3-16-148410-0'.
	
	catalog := BookCatalog new.
	catalog register: book.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	shoppingCart add: book units: 5.
	 
	books := shoppingCart books.
	
	self assert: 1 equals: books size.
	self assert: book equals: books first.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:11:06' prior: 50363486!
test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| shoppingCart books catalog book1 book2 |
	book1 := '978-3-16-148410-0'.
	book2 := '978-3-16-148410-1'.
	
	catalog := BookCatalog new.
	catalog register: book1.
	catalog register: book2.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	shoppingCart add: book1 units: 5.
	shoppingCart add: book2 units: 7.
	 
	books := shoppingCart books.
	
	self assert: 2 equals: books size.
	self assert: book1 equals: books first.
	self assert: book2 equals: books second.! !

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:11:11'!
FAILURE!

	(OrderedCollection with: 4 with: 58) second!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:12:06' prior: 50363502!
test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| shoppingCart books catalog book1 book2 |
	book1 := '978-3-16-148410-0'.
	book2 := '978-3-16-148410-1'.
	
	catalog := BookCatalog new.
	catalog register: book1.
	catalog register: book2.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	shoppingCart add: book1 units: 5.
	shoppingCart add: book2 units: 7.
	 
	books := shoppingCart books.
	
	self assert: 2 equals: books size.
	self assert: book1 equals: books first.
	self assert: book2 equals: books second.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:14:28' prior: 50363450!
books
	books  ifEmpty: [^books].
	books size = 1 ifTrue: [^OrderedCollection with: books first].
	^OrderedCollection with: books first with: (books at: 6)! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:14:29'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:14:29'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:14:29'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:14:29'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:14:29'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:14:29'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:14:29'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:14:29'!
ERROR!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:14:29'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:14:29'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:14:35' prior: 50363548!
books
	books  ifEmpty: [^books].
	books size = 5 ifTrue: [^OrderedCollection with: books first].
	^OrderedCollection with: books first with: (books at: 6)! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:14:36'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:14:36'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:14:37'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:14:37'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:14:37'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:14:37'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:14:37'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:14:37'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:14:37'!
PASSED!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:15:40' prior: 50363594!
books
	| uniqueBooks |
	uniqueBooks := Set withAll: books.
	^uniqueBooks ! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:15:41'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:15:41'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:15:41'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:15:41'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:15:41'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:15:41'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:15:41'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:15:41'!
ERROR!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:15:41'!
ERROR!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:15:43'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:15:58' prior: 50363637!
books
	| uniqueBooks |
	uniqueBooks := Set withAll: books.
	^OrderedCollection withAll: uniqueBooks ! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:16:00'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:16:00'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:16:00'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:16:00'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:16:00'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:16:00'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:16:00'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:16:00'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:16:00'!
PASSED!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:17:21'!
assertQuantityIsPositiveInteger: aQuantity

	(aQuantity isKindOf: Integer) ifFalse: [self error: ShoppingCart unitsHasToBeANaturalNumberErrorDescription ].
	(aQuantity < 0) ifTrue: [self error: ShoppingCart unitsHasToBeANaturalNumberErrorDescription ]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:17:21' prior: 50362942!
add: aISBN units: aQuantity 
	self assertQuantityIsPositiveInteger: aQuantity.
	(bookCatalog has: aISBN) ifFalse: [self error: ShoppingCart bookIsNotInCatalogErrorDescription ].
	aQuantity timesRepeat: [ books add: aISBN ]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:18:03'!
assertBookIsInCatalog: aISBN

	^ (bookCatalog has: aISBN) ifFalse: [self error: ShoppingCart bookIsNotInCatalogErrorDescription ]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:18:03' prior: 50363733!
add: aISBN units: aQuantity 
	self assertQuantityIsPositiveInteger: aQuantity.
	self assertBookIsInCatalog: aISBN.
	aQuantity timesRepeat: [ books add: aISBN ]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:18:12' prior: 50363751!
add: aISBN units: aQuantity 
	self assertQuantityIsPositiveInteger: aQuantity.
	self assertBookIsInCatalog: aISBN.
	
	aQuantity timesRepeat: [ books add: aISBN ]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:18:55'!
signalBookIsNotInCatalog

	^ self error: ShoppingCart bookIsNotInCatalogErrorDescription! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:18:55' prior: 50363743!
assertBookIsInCatalog: aISBN

	^ (bookCatalog has: aISBN) ifFalse: [self signalBookIsNotInCatalog ]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:19:11'!
signalUnitHasToBePositiveInteger

	^ self error: ShoppingCart unitsHasToBeANaturalNumberErrorDescription! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:19:11' prior: 50363722!
assertQuantityIsPositiveInteger: aQuantity

	(aQuantity isKindOf: Integer) ifFalse: [self signalUnitHasToBePositiveInteger ].
	(aQuantity < 0) ifTrue: [self error: ShoppingCart unitsHasToBeANaturalNumberErrorDescription ]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:19:17' prior: 50363787!
assertQuantityIsPositiveInteger: aQuantity

	(aQuantity isKindOf: Integer) ifFalse: [self signalUnitHasToBePositiveInteger ].
	(aQuantity < 0) ifTrue: [self signalUnitHasToBePositiveInteger ]! !
!ShoppingCart class methodsFor: 'error description' stamp: 'TT 6/8/2021 18:19:40'!
unitsHasToBeAPositiveIntegerErrorDescription
	^'Solo se puede agregar una cantidad entera positiva de un libro'! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:19:40' prior: 50363780!
signalUnitHasToBePositiveInteger

	^ self error: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:19:40' prior: 50362778!
test07CanNotAddABookWithNegativeQuantityToShoppingCart
	| shoppingCart book catalog |
	book := '978-3-16-148410-0'.
	
	catalog := BookCatalog new.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	
	self should: [shoppingCart add: book units: -5] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:19:40' prior: 50362672!
test06CanNotAddABookWithFractionalQuantityToShoppingCart
	| shoppingCart book catalog |
	book := '978-3-16-148410-0'.
	
	catalog := BookCatalog new.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.
	
	self should: [shoppingCart add: book units: 1.5] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.! !

!methodRemoval: ShoppingCart class #unitsHasToBeANaturalNumberErrorDescription stamp: 'TT 6/8/2021 18:19:40'!
unitsHasToBeANaturalNumberErrorDescription
	^'Solo se puede agregar una cantidad entera positiva de un libro'!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:19:42'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:19:42'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:19:42'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:19:42'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:19:42'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:19:42'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:19:42'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:19:42'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:19:42'!
PASSED!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:20:11' prior: 50363797!
assertQuantityIsPositiveInteger: aQuantity

	((aQuantity isKindOf: Integer) or: (aQuantity < 0)) ifFalse: [self signalUnitHasToBePositiveInteger ].! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:20:18'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:20:18'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:20:18'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:20:18'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:20:18'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:20:18'!
FAILURE!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:20:18'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:20:18'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:20:18'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:20:18'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:20:51' prior: 50363890!
assertQuantityIsPositiveInteger: aQuantity

	((aQuantity isKindOf: Integer) not or: (aQuantity < 0)) ifFalse: [self signalUnitHasToBePositiveInteger ].! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:20:52'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:20:52'!
ERROR!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:20:52'!
ERROR!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:20:52'!
FAILURE!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:20:52'!
FAILURE!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:20:52'!
FAILURE!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:20:52'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:20:52'!
ERROR!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:20:53'!
ERROR!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:20:56'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:21:11' prior: 50363936!
assertQuantityIsPositiveInteger: aQuantity

	((aQuantity isKindOf: Integer) not or: (aQuantity < 0)) ifTrue: [self signalUnitHasToBePositiveInteger ].! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:21:12'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:21:12'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:21:12'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:21:12'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:21:12'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:21:12'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:21:12'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:21:12'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:21:12'!
PASSED!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:21:32' prior: 50363983!
assertQuantityIsPositiveInteger: aQuantity

	((aQuantity isKindOf: Integer) and: (aQuantity >= 0)) ifFalse: [self signalUnitHasToBePositiveInteger ].! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:21:34'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:21:34'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:21:34'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:21:34'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:21:34'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:21:34'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:21:34'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:21:34'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:21:34'!
PASSED!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:22:15' prior: 50363774!
assertBookIsInCatalog: aBook

	^ (bookCatalog has: aBook) ifFalse: [self signalBookIsNotInCatalog ]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:22:35' prior: 50362137!
has: aBook
	^books anySatisfy: [ :book | aBook = book ]! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:22:37'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:22:37'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:22:37'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:22:37'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:22:37'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:22:37'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:22:37'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:22:37'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:22:37'!
PASSED!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:22:48' prior: 50362520!
unitsOf: aBook
	^books sum: [ :book | aBook = book ifTrue: [1] ifFalse: [0] ] ifEmpty: [0]! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:22:49'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:22:49'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:22:49'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:22:49'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:22:49'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:22:49'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:22:49'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:22:49'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:22:49'!
PASSED!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:22:57' prior: 50363760!
add: aBook units: aQuantity 
	self assertQuantityIsPositiveInteger: aQuantity.
	self assertBookIsInCatalog: aBook.
	
	aQuantity timesRepeat: [ books add: aBook ]! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:22:58'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:22:58'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:22:58'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:22:58'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:22:58'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:22:58'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:22:58'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:22:58'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:22:58'!
PASSED!

!classDefinition: #ShoppingCart category: 'Ejercicio-TusLibros.com' stamp: 'TT 6/8/2021 18:24:38'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books bookCatalog newBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!ShoppingCart methodsFor: 'initialization' stamp: 'TT 6/8/2021 18:24:36' prior: 50361919!
initializeWithBookCatalog: aBookCatalog 
	bookCatalog := aBookCatalog.
	books := OrderedCollection new.
	newBooks := OrderedCollection new.! !

a := OrderedCollection withAll: #(1 2 3)!

a!

a detect: [ :e | e = 2] ifFound: [10] ifNone: [20] !

a detect: [ :e | e = 2] ifFound: [ :e | 10] ifNone: [20] !

a detect: [ :e | e = 2] ifFound: [ :e | e] ifNone: [20] !

a detect: [ :e | e = 3@4] ifFound: [ :e | e at: 2] ifNone: [20]!

a detect: [ :e | e = 3@4] ifFound: [ :e | e] ifNone: [20]!

a detect: [ :e | e = (3@4)] ifFound: [ :e | e] ifNone: [20]!

a detect: [ :e | e = (3@4)] ifFound: [ :e | e] ifNone: [20]!

a := OrderedCollection withAll: #((1@2) (3@4) (5@6)).!

a := OrderedCollection with: (1@2) with: (3@4) with: (5@6).!

a detect: [ :e | e = (3@4)] ifFound: [ :e | e] ifNone: [20]!

a detect: [ :e | e = (3@4)] ifFound: [ :e | e at: 1] ifNone: [20] !

Point!

a detect: [ :e | e = (3@4)] ifFound: [ :e | e x] ifNone: [20] !

a at: 2 put: 5!

a!

a := OrderedCollection with: (1@2) with: (3@4) with: (5@6).!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:33:26' prior: 50364157!
add: aBook units: aQuantity 
	self assertQuantityIsPositiveInteger: aQuantity.
	self assertBookIsInCatalog: aBook.
	
	aQuantity timesRepeat: [ books add: aBook ]! !
!BookCatalog methodsFor: 'actions' stamp: 'TT 6/8/2021 18:37:01' prior: 50361832!
register: aBook
	books add: aBook ! !
!BookCatalog methodsFor: 'accessing' stamp: 'TT 6/8/2021 18:37:13' prior: 50362937!
has: aBook
	^books anySatisfy: [ :book | book = aBook ]! !
!ShoppingCart methodsFor: 'initialization' stamp: 'TT 6/8/2021 18:40:38' prior: 50364208!
initializeWithBookCatalog: aBookCatalog 
	bookCatalog := aBookCatalog.
	books := OrderedCollection new.! !

!methodRemoval: ShoppingCart #amount stamp: 'TT 6/8/2021 18:43:07'!
amount
	^books size!
!ShoppingCart methodsFor: 'accessing' stamp: 'TT 6/8/2021 18:44:00' prior: 50364116!
unitsOf: aBook
	^books occurrencesOf: aBook! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:44:01'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:44:01'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:44:01'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:44:02'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:44:02'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:44:02'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:44:02'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:44:02'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:44:02'!
PASSED!
!ShoppingCart methodsFor: 'asserts' stamp: 'TT 6/8/2021 18:44:54' prior: 50364069!
assertBookIsInCatalog: aBook

	(bookCatalog has: aBook) ifFalse: [self signalBookIsNotInCatalog ]! !
!ShoppingCart methodsFor: 'signal errors' stamp: 'TT 6/8/2021 18:45:06' prior: 50363768!
signalBookIsNotInCatalog

	self error: ShoppingCart bookIsNotInCatalogErrorDescription! !
!ShoppingCart methodsFor: 'signal errors' stamp: 'TT 6/8/2021 18:45:10' prior: 50363813!
signalUnitHasToBePositiveInteger

	self error: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription! !

a detect: [ :e | e = (3@4)] ifNone: [20].!

a detect: [ :e | e = (3@4)] ifNone: [20].!

a detect: [ :e | e = (3@4)] ifNone: [20].!

a detect: [ :e | e = (5@4)] ifNone: [20].!

a detect: [ :e | e = (5@4)] ifNone: [a add: (6@6)].  !

e := a detect: [ :e | e = (5@4)] ifNone: [a add: (6@6)]. !

a := OrderedCollection with: (1@2) with: (3@4) with: (5@6).!

e := a detect: [ :e | e x = 3] ifNone: [a add: (6@6)]. !

e!

e := e + (0@5)!

a!

----SNAPSHOT----(8 June 2021 18:49:59) CuisUniversity-4532.image priorSource: 1004509!
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/8/2021 18:50:51'!
setup! !
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/8/2021 18:50:55' overrides: 16927572!
setUp! !

!methodRemoval: ShoppingCartTest #setup stamp: 'TT 6/8/2021 18:50:56'!
setup!

!classDefinition: #ShoppingCartTest category: 'Ejercicio-TusLibros.com' stamp: 'TT 6/8/2021 18:51:56'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: 'bookRuperto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #ShoppingCartTest category: 'Ejercicio-TusLibros.com' stamp: 'TT 6/8/2021 18:51:57'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: 'bookRuperto bookRicardo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #ShoppingCartTest category: 'Ejercicio-TusLibros.com' stamp: 'TT 6/8/2021 18:51:59'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: 'bookRuperto bookRicardo bookCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #ShoppingCartTest category: 'Ejercicio-TusLibros.com' stamp: 'TT 6/8/2021 18:52:00'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: 'bookRuperto bookRicardo bookCatalog shoppingCart1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!ShoppingCartTest methodsFor: 'setup' stamp: 'TT 6/8/2021 18:51:54' prior: 50364347 overrides: 16927572!
setUp
	bookRuperto := '978-3-16-148410-0'.
	bookRicardo := '978-3-16-148410-1'.
	
	bookCatalog := BookCatalog new.
	
	shoppingCart1 := ShoppingCart withBookCatalog: bookCatalog.! !
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:52:25' prior: 50362376!
test02EmptyShoppingCartHasZeroUnitsOfABook

	self assert: 0 equals: (shoppingCart1 unitsOf: bookRuperto).! !
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:52:51' prior: 50362475!
test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook
	| book |
	bookCatalog register: book.
	
	shoppingCart1 add: bookRuperto units: 1.
	
	self assert: 1 equals: (shoppingCart1 unitsOf: bookRuperto)! !
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:53:03' prior: 50364405!
test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook
	bookCatalog register: bookRuperto.
	
	shoppingCart1 add: bookRuperto units: 1.
	
	self assert: 1 equals: (shoppingCart1 unitsOf: bookRuperto)! !

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:53:05'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:53:05'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:53:05'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:53:05'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:53:05'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:53:05'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:53:05'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:53:05'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:53:05'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:53:05'!
PASSED!
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:53:47' prior: 50362988!
test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook
	bookCatalog register: bookRuperto.
	
	shoppingCart1 add: bookRuperto units: 1.
	shoppingCart1 add: bookRuperto units: 1.
	
	self assert: 2 equals: (shoppingCart1 unitsOf: bookRuperto).! !
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:54:07' prior: 50362686!
test05CanNotAddABookToShoppingCartThatIsNotInCatalog

	self should: [shoppingCart1 add: bookRuperto units: 1] raise: Error withMessageText: ShoppingCart bookIsNotInCatalogErrorDescription.! !

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:54:08'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:54:08'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:54:08'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:54:09'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:54:09'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:54:09'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:54:09'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:54:09'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:54:09'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:54:09'!
PASSED!
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:54:20' prior: 50363834!
test06CanNotAddABookWithFractionalQuantityToShoppingCart

	self should: [shoppingCart1 add: bookRuperto units: 1.5] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.! !

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:54:20'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:54:20'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:54:20'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:54:21'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:54:21'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:54:21'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:54:21'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:54:21'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:54:21'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:54:21'!
PASSED!
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:54:32' prior: 50363820!
test07CanNotAddABookWithNegativeQuantityToShoppingCart

	self should: [shoppingCart1 add: bookRuperto units: -5] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.! !

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:54:34'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:54:34'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:54:34'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:54:34'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:54:34'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:54:34'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:54:34'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:54:34'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:54:34'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:54:35'!
PASSED!
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/8/2021 18:54:50' prior: 50363296!
test08EmptyShoppingCartReturnsNoBooks
	| books |
	books := shoppingCart1 books.
	
	self assert: 0 equals: books size.! !
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/8/2021 18:55:25' prior: 50363357!
test09ShoppingCartWithOneUniqueBookReturnsThatBook
	| books |
	bookCatalog register: bookRuperto.
	
	shoppingCart1 add: bookRuperto units: 5.
	 
	books := shoppingCart1 books.
	
	self assert: 1 equals: books size.
	self assert: bookRuperto equals: books first.! !
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/8/2021 18:56:16' prior: 50363528!
test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	
	| books |
	bookCatalog register: bookRuperto .
	bookCatalog register: bookRicardo .
	
	shoppingCart1 := ShoppingCart withBookCatalog: bookCatalog.
	shoppingCart1 add: bookRuperto units: 5.
	shoppingCart1 add: bookRicardo units: 7.
	 
	books := shoppingCart1 books.
	
	self assert: 2 equals: books size.
	self assert: bookRuperto equals: books first.
	self assert: bookRicardo equals: books second.! !
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/8/2021 18:56:27' prior: 50364637!
test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| books |
	bookCatalog register: bookRuperto .
	bookCatalog register: bookRicardo .
	
	shoppingCart1 add: bookRuperto units: 5.
	shoppingCart1 add: bookRicardo units: 7.
	 
	books := shoppingCart1 books.
	
	self assert: 2 equals: books size.
	self assert: bookRuperto equals: books first.
	self assert: bookRicardo equals: books second.! !

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:56:29'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:56:29'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:56:29'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:56:29'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:56:29'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:56:29'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:56:30'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:56:30'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:56:30'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:56:30'!
PASSED!

----SNAPSHOT----(8 June 2021 18:56:33) CuisUniversity-4532.image priorSource: 1046048!

!classDefinition: #ShoppingCartTest category: 'Ejercicio-TusLibros.com' stamp: 'TT 6/8/2021 18:56:47'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: 'bookRuperto bookRicardo catalog shoppingCart1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:56:47' prior: 50364655!
test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| books |
	catalog register: bookRuperto .
	catalog register: bookRicardo .
	
	shoppingCart1 add: bookRuperto units: 5.
	shoppingCart1 add: bookRicardo units: 7.
	 
	books := shoppingCart1 books.
	
	self assert: 2 equals: books size.
	self assert: bookRuperto equals: books first.
	self assert: bookRicardo equals: books second.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:56:47' prior: 50364389 overrides: 16927572!
setUp
	bookRuperto := '978-3-16-148410-0'.
	bookRicardo := '978-3-16-148410-1'.
	
	catalog := BookCatalog new.
	
	shoppingCart1 := ShoppingCart withBookCatalog: catalog.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:56:47' prior: 50364625!
test09ShoppingCartWithOneUniqueBookReturnsThatBook
	| books |
	catalog register: bookRuperto.
	
	shoppingCart1 add: bookRuperto units: 5.
	 
	books := shoppingCart1 books.
	
	self assert: 1 equals: books size.
	self assert: bookRuperto equals: books first.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:56:47' prior: 50364415!
test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook
	catalog register: bookRuperto.
	
	shoppingCart1 add: bookRuperto units: 1.
	
	self assert: 1 equals: (shoppingCart1 unitsOf: bookRuperto)! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:56:47' prior: 50364463!
test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook
	catalog register: bookRuperto.
	
	shoppingCart1 add: bookRuperto units: 1.
	shoppingCart1 add: bookRuperto units: 1.
	
	self assert: 2 equals: (shoppingCart1 unitsOf: bookRuperto).! !

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:57:07'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:57:07'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:57:08'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:57:12'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:57:12'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:57:12'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:57:12'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:57:12'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:57:12'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:57:12'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:57:12'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:57:12'!
PASSED!

!classDefinition: #ShoppingCartTest category: 'Ejercicio-TusLibros.com' stamp: 'TT 6/8/2021 18:57:20'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: 'bookRuperto bookRicardo catalog shoppingCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:57:20' prior: 50364758!
test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 1.
	
	self assert: 1 equals: (shoppingCart unitsOf: bookRuperto)! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:57:20' prior: 50364768!
test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 1.
	shoppingCart add: bookRuperto units: 1.
	
	self assert: 2 equals: (shoppingCart unitsOf: bookRuperto).! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:57:21' prior: 50364522!
test06CanNotAddABookWithFractionalQuantityToShoppingCart

	self should: [shoppingCart add: bookRuperto units: 1.5] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:57:21' prior: 50364737 overrides: 16927572!
setUp
	bookRuperto := '978-3-16-148410-0'.
	bookRicardo := '978-3-16-148410-1'.
	
	catalog := BookCatalog new.
	
	shoppingCart := ShoppingCart withBookCatalog: catalog.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:57:21' prior: 50364746!
test09ShoppingCartWithOneUniqueBookReturnsThatBook
	| books |
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 5.
	 
	books := shoppingCart books.
	
	self assert: 1 equals: books size.
	self assert: bookRuperto equals: books first.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:57:21' prior: 50364398!
test02EmptyShoppingCartHasZeroUnitsOfABook

	self assert: 0 equals: (shoppingCart unitsOf: bookRuperto).! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:57:21' prior: 50364570!
test07CanNotAddABookWithNegativeQuantityToShoppingCart

	self should: [shoppingCart add: bookRuperto units: -5] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:57:21' prior: 50364618!
test08EmptyShoppingCartReturnsNoBooks
	| books |
	books := shoppingCart books.
	
	self assert: 0 equals: books size.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:57:21' prior: 50364721!
test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| books |
	catalog register: bookRuperto .
	catalog register: bookRicardo .
	
	shoppingCart add: bookRuperto units: 5.
	shoppingCart add: bookRicardo units: 7.
	 
	books := shoppingCart books.
	
	self assert: 2 equals: books size.
	self assert: bookRuperto equals: books first.
	self assert: bookRicardo equals: books second.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'TT 6/8/2021 18:57:21' prior: 50364474!
test05CanNotAddABookToShoppingCartThatIsNotInCatalog

	self should: [shoppingCart add: bookRuperto units: 1] raise: Error withMessageText: ShoppingCart bookIsNotInCatalogErrorDescription.! !

!testRun: #ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:57:38'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:57:38'!
PASSED!

!testRun: #ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:57:38'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:57:38'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:57:38'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:57:38'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:57:38'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:57:38'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:57:39'!
PASSED!
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:58:02'!
test01EmptyShoppingCartHasZeroUnitsOfABook

	self assert: 0 equals: (shoppingCart unitsOf: bookRuperto).! !

!methodRemoval: ShoppingCartTest #test02EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/8/2021 18:58:02'!
test02EmptyShoppingCartHasZeroUnitsOfABook

	self assert: 0 equals: (shoppingCart unitsOf: bookRuperto).!
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:58:07'!
test02EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 1.
	
	self assert: 1 equals: (shoppingCart unitsOf: bookRuperto)! !

!methodRemoval: ShoppingCartTest #test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/8/2021 18:58:08'!
test03EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 1.
	
	self assert: 1 equals: (shoppingCart unitsOf: bookRuperto)!
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:58:13'!
test03EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 1.
	shoppingCart add: bookRuperto units: 1.
	
	self assert: 2 equals: (shoppingCart unitsOf: bookRuperto).! !

!methodRemoval: ShoppingCartTest #test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/8/2021 18:58:13'!
test04EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 1.
	shoppingCart add: bookRuperto units: 1.
	
	self assert: 2 equals: (shoppingCart unitsOf: bookRuperto).!
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:58:19'!
test04CanNotAddABookToShoppingCartThatIsNotInCatalog

	self should: [shoppingCart add: bookRuperto units: 1] raise: Error withMessageText: ShoppingCart bookIsNotInCatalogErrorDescription.! !

!methodRemoval: ShoppingCartTest #test05CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/8/2021 18:58:20'!
test05CanNotAddABookToShoppingCartThatIsNotInCatalog

	self should: [shoppingCart add: bookRuperto units: 1] raise: Error withMessageText: ShoppingCart bookIsNotInCatalogErrorDescription.!
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:58:26'!
test05CanNotAddABookWithFractionalQuantityToShoppingCart

	self should: [shoppingCart add: bookRuperto units: 1.5] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.! !

!methodRemoval: ShoppingCartTest #test06CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/8/2021 18:58:26'!
test06CanNotAddABookWithFractionalQuantityToShoppingCart

	self should: [shoppingCart add: bookRuperto units: 1.5] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.!
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/8/2021 18:58:36'!
test06CanNotAddABookWithNegativeQuantityToShoppingCart

	self should: [shoppingCart add: bookRuperto units: -5] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.! !

!methodRemoval: ShoppingCartTest #test07CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/8/2021 18:58:36'!
test07CanNotAddABookWithNegativeQuantityToShoppingCart

	self should: [shoppingCart add: bookRuperto units: -5] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.!
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/8/2021 18:58:44'!
test07EmptyShoppingCartReturnsNoBooks
	| books |
	books := shoppingCart books.
	
	self assert: 0 equals: books size.! !

!methodRemoval: ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/8/2021 18:58:44'!
test08EmptyShoppingCartReturnsNoBooks
	| books |
	books := shoppingCart books.
	
	self assert: 0 equals: books size.!
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/8/2021 18:58:50'!
test08ShoppingCartWithOneUniqueBookReturnsThatBook
	| books |
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 5.
	 
	books := shoppingCart books.
	
	self assert: 1 equals: books size.
	self assert: bookRuperto equals: books first.! !

!methodRemoval: ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/8/2021 18:58:50'!
test09ShoppingCartWithOneUniqueBookReturnsThatBook
	| books |
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 5.
	 
	books := shoppingCart books.
	
	self assert: 1 equals: books size.
	self assert: bookRuperto equals: books first.!
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/8/2021 18:58:57'!
test9ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| books |
	catalog register: bookRuperto .
	catalog register: bookRicardo .
	
	shoppingCart add: bookRuperto units: 5.
	shoppingCart add: bookRicardo units: 7.
	 
	books := shoppingCart books.
	
	self assert: 2 equals: books size.
	self assert: bookRuperto equals: books first.
	self assert: bookRicardo equals: books second.! !

!methodRemoval: ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:58:57'!
test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| books |
	catalog register: bookRuperto .
	catalog register: bookRicardo .
	
	shoppingCart add: bookRuperto units: 5.
	shoppingCart add: bookRicardo units: 7.
	 
	books := shoppingCart books.
	
	self assert: 2 equals: books size.
	self assert: bookRuperto equals: books first.
	self assert: bookRicardo equals: books second.!
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/8/2021 18:59:03'!
test09ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| books |
	catalog register: bookRuperto .
	catalog register: bookRicardo .
	
	shoppingCart add: bookRuperto units: 5.
	shoppingCart add: bookRicardo units: 7.
	 
	books := shoppingCart books.
	
	self assert: 2 equals: books size.
	self assert: bookRuperto equals: books first.
	self assert: bookRicardo equals: books second.! !

!methodRemoval: ShoppingCartTest #test9ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/8/2021 18:59:03'!
test9ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| books |
	catalog register: bookRuperto .
	catalog register: bookRicardo .
	
	shoppingCart add: bookRuperto units: 5.
	shoppingCart add: bookRicardo units: 7.
	 
	books := shoppingCart books.
	
	self assert: 2 equals: books size.
	self assert: bookRuperto equals: books first.
	self assert: bookRicardo equals: books second.!

----SNAPSHOT----(8 June 2021 19:00:09) CuisUniversity-4532.image priorSource: 1057846!

----STARTUP---- (10 June 2021 15:15:10) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!

!ShoppingCart methodsFor: 'asserts' stamp: 'TT 6/10/2021 15:17:02' prior: 50364026!
assertQuantityIsPositiveInteger: aQuantity

	((aQuantity isKindOf: Integer) and: (aQuantity >= 1)) ifFalse: [self signalUnitHasToBePositiveInteger ].! !
!ShoppingCartTest methodsFor: 'adding books' stamp: 'TT 6/10/2021 15:17:32'!
test07CanNotAddABookWithZeroQuantityToShoppingCart

	self should: [shoppingCart add: bookRuperto units: 0] raise: Error withMessageText: ShoppingCart unitsHasToBeAPositiveIntegerErrorDescription.! !
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/10/2021 15:17:51'!
test08EmptyShoppingCartReturnsNoBooks
	| books |
	books := shoppingCart books.
	
	self assert: 0 equals: books size.! !

!methodRemoval: ShoppingCartTest #test07EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/10/2021 15:17:51'!
test07EmptyShoppingCartReturnsNoBooks
	| books |
	books := shoppingCart books.
	
	self assert: 0 equals: books size.!
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/10/2021 15:17:56'!
test09ShoppingCartWithOneUniqueBookReturnsThatBook
	| books |
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 5.
	 
	books := shoppingCart books.
	
	self assert: 1 equals: books size.
	self assert: bookRuperto equals: books first.! !

!methodRemoval: ShoppingCartTest #test08ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/10/2021 15:17:56'!
test08ShoppingCartWithOneUniqueBookReturnsThatBook
	| books |
	catalog register: bookRuperto.
	
	shoppingCart add: bookRuperto units: 5.
	 
	books := shoppingCart books.
	
	self assert: 1 equals: books size.
	self assert: bookRuperto equals: books first.!
!ShoppingCartTest methodsFor: 'finding books' stamp: 'TT 6/10/2021 15:18:09'!
test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| books |
	catalog register: bookRuperto .
	catalog register: bookRicardo .
	
	shoppingCart add: bookRuperto units: 5.
	shoppingCart add: bookRicardo units: 7.
	 
	books := shoppingCart books.
	
	self assert: 2 equals: books size.
	self assert: bookRuperto equals: books first.
	self assert: bookRicardo equals: books second.! !

!methodRemoval: ShoppingCartTest #test09ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/10/2021 15:18:09'!
test09ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks
	| books |
	catalog register: bookRuperto .
	catalog register: bookRicardo .
	
	shoppingCart add: bookRuperto units: 5.
	shoppingCart add: bookRicardo units: 7.
	 
	books := shoppingCart books.
	
	self assert: 2 equals: books size.
	self assert: bookRuperto equals: books first.
	self assert: bookRicardo equals: books second.!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithZeroQuantityToShoppingCart stamp: 'TT 6/10/2021 15:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test01EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/10/2021 15:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/10/2021 15:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/10/2021 15:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test04CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/10/2021 15:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/10/2021 15:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/10/2021 15:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithZeroQuantityToShoppingCart stamp: 'TT 6/10/2021 15:18:36'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/10/2021 15:18:36'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/10/2021 15:18:36'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/10/2021 15:18:36'!
PASSED!
!ShoppingCart methodsFor: 'asserts' stamp: 'TT 6/10/2021 15:19:01' prior: 50365187!
assertQuantityIsPositiveInteger: aQuantity

	((aQuantity isKindOf: Integer) and: (aQuantity >= 0)) ifFalse: [self signalUnitHasToBePositiveInteger ].! !

!testRun: #ShoppingCartTest #test01EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/10/2021 15:19:03'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/10/2021 15:19:03'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/10/2021 15:19:03'!
PASSED!

!testRun: #ShoppingCartTest #test04CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/10/2021 15:19:03'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/10/2021 15:19:03'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/10/2021 15:19:03'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithZeroQuantityToShoppingCart stamp: 'TT 6/10/2021 15:19:03'!
FAILURE!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/10/2021 15:19:03'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/10/2021 15:19:03'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/10/2021 15:19:03'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithZeroQuantityToShoppingCart stamp: 'TT 6/10/2021 15:19:03'!
FAILURE!
!ShoppingCart methodsFor: 'asserts' stamp: 'TT 6/10/2021 15:19:09' prior: 50365314!
assertQuantityIsPositiveInteger: aQuantity

	((aQuantity isKindOf: Integer) and: (aQuantity >= 1)) ifFalse: [self signalUnitHasToBePositiveInteger ].! !

!testRun: #ShoppingCartTest #test01EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/10/2021 15:19:13'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/10/2021 15:19:13'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/10/2021 15:19:13'!
PASSED!

!testRun: #ShoppingCartTest #test04CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/10/2021 15:19:13'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/10/2021 15:19:13'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/10/2021 15:19:13'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithZeroQuantityToShoppingCart stamp: 'TT 6/10/2021 15:19:13'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/10/2021 15:19:13'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/10/2021 15:19:13'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/10/2021 15:19:13'!
PASSED!
!ShoppingCart methodsFor: 'asserts' stamp: 'TT 6/10/2021 15:23:23' prior: 50365364!
assertQuantityIsPositiveInteger: aQuantity

	((aQuantity isKindOf: Integer) and: (aQuantity > 0)) ifFalse: [self signalUnitHasToBePositiveInteger ].! !

!testRun: #ShoppingCartTest #test01EmptyShoppingCartHasZeroUnitsOfABook stamp: 'TT 6/10/2021 15:23:25'!
PASSED!

!testRun: #ShoppingCartTest #test02EmptyShoppingCartWithBookAddedOnceHasOneUnitOfThatBook stamp: 'TT 6/10/2021 15:23:25'!
PASSED!

!testRun: #ShoppingCartTest #test03EmptyShoppingCartWithBookAddedTwiceHasTwoUnitsOfThatBook stamp: 'TT 6/10/2021 15:23:25'!
PASSED!

!testRun: #ShoppingCartTest #test04CanNotAddABookToShoppingCartThatIsNotInCatalog stamp: 'TT 6/10/2021 15:23:25'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithFractionalQuantityToShoppingCart stamp: 'TT 6/10/2021 15:23:25'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAddABookWithNegativeQuantityToShoppingCart stamp: 'TT 6/10/2021 15:23:25'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddABookWithZeroQuantityToShoppingCart stamp: 'TT 6/10/2021 15:23:25'!
PASSED!

!testRun: #ShoppingCartTest #test08EmptyShoppingCartReturnsNoBooks stamp: 'TT 6/10/2021 15:23:25'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartWithOneUniqueBookReturnsThatBook stamp: 'TT 6/10/2021 15:23:25'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartWithTwoUniqueBooksReturnsThoseTwoBooks stamp: 'TT 6/10/2021 15:23:25'!
PASSED!

----SNAPSHOT----(10 June 2021 15:26:40) CuisUniversity-4532.image priorSource: 1072924!