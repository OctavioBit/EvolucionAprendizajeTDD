----STARTUP---- (10 June 2021 19:30:16) as C:\Users\EnzoVigneti\Desktop\Facu\inge1\cui\CuisUniversity-4532.image!


!classRemoval: #MarsRoverHeadingWest stamp: 'E.V 6/10/2021 19:30:23'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'E.V 6/10/2021 19:30:23'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'E.V 6/10/2021 19:30:24'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'E.V 6/10/2021 19:30:24'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'E.V 6/10/2021 19:30:24'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'E.V 6/10/2021 19:30:25'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'E.V 6/10/2021 19:30:25'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of C:\Users\ENZOVI~1\AppData\Local\Temp\Rar$DRa15920.25959\TusLibros.st----!

!classRemoval: #NameOfSubclass stamp: 'E.V 6/10/2021 19:42:42'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: Cart #initialize stamp: 'E.V 6/10/2021 19:42:52'!
initialize
	books _ OrderedCollection new.!
!CartTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:44:26' prior: 50895013!
test02WhenAddingABookToEmptyCartItOnlyContainsThatBook
	|cart aBook|
	aBook _ 'isbn1'.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.
	self assert: cart amoutOfBooks equals: 1.! !
!CartTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:44:37' prior: 50895038!
test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook
	|cart aBook|
	aBook _ 'isbn1'.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	cart add: aBook.
	cart add: aBook.
	self assert: (cart quantityOf: aBook) equals: 3.
	self assert: cart amoutOfBooks equals: 3.! !
!CartTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:44:52' prior: 50895024!
test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks
	|cart aBook1 aBook2|
	aBook1 _ 'isbn1'.
	aBook2 _ 'isbn2'.
	cart _ Cart newWith: (OrderedCollection  with: aBook1 with: aBook2 ).
	cart add: aBook1.
	cart add: aBook2.
	self assert: cart includes: aBook1.
	self assert: cart includes: aBook2.
	self assert: cart amoutOfBooks equals: 2.! !
!CartTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:45:03' prior: 50895050!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook avaibleBookCollection|
	anUnavaibleBook _ 'isbn1'.
	avaibleBookCollection  _ OrderedCollection  new.
	cart _ Cart newWith: avaibleBookCollection.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart cantAddBookNotForSaleErrorDescription] ! !
!CartTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:45:14' prior: 50895072!
test07ListingCartElementsOfCartWithABookReturnsCorrectReport
	|cart aBook |
	"El mensaje ISBN no est� implementado, es temporal"
	aBook _ 'isbn1'.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	self assert: (cart list) equals: (OrderedCollection with: aBook ISBN with: 1).! !
!CartTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:45:22' prior: 50895084!
test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport
	|cart aBook |
	"El mensaje ISBN no est� implementado, es temporal"
	aBook _ 'isbn1'.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	cart add: aBook.
	self assert: (cart list) equals: (OrderedCollection with: aBook ISBN with: 2).! !

!classRemoval: #Book stamp: 'E.V 6/10/2021 19:45:29'!
Object subclass: #Book
	instanceVariableNames: 'isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/10/2021 19:45:37'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:45:49' prior: 50895291!
test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport
	|cart aBook |
	"El mensaje ISBN no est� implementado, es temporal"
	aBook _ 'isbn1'.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	cart add: aBook.
	self assert: (cart list) equals: (OrderedCollection with: aBook with: 2).! !

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/10/2021 19:45:51'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/10/2021 19:45:51'!
ERROR!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/10/2021 19:45:52'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/10/2021 19:45:52'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/10/2021 19:45:52'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/10/2021 19:45:52'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/10/2021 19:45:52'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/10/2021 19:45:52'!
ERROR!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/10/2021 19:45:52'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:45:57' prior: 50895278!
test07ListingCartElementsOfCartWithABookReturnsCorrectReport
	|cart aBook |
	"El mensaje ISBN no est� implementado, es temporal"
	aBook _ 'isbn1'.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	self assert: (cart list) equals: (OrderedCollection with: aBook  with: 1).! !

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/10/2021 19:46:05'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/10/2021 19:46:05'!
ERROR!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/10/2021 19:46:05'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/10/2021 19:46:05'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/10/2021 19:46:05'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/10/2021 19:46:05'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/10/2021 19:46:05'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/10/2021 19:46:05'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/10/2021 19:46:05'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/10/2021 19:46:05'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:46:44' prior: 50895008!
test01createdCartIsEmpty
	|cart|
	cart _ Cart newWith:(OrderedCollection new).
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/10/2021 19:46:46'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/10/2021 19:46:46'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/10/2021 19:46:46'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/10/2021 19:46:46'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/10/2021 19:46:46'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/10/2021 19:46:46'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/10/2021 19:46:46'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/10/2021 19:46:46'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/10/2021 19:46:46'!
PASSED!

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'E.V 6/10/2021 19:47:03'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/10/2021 19:48:03'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:56:07'!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier|
	
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier new.
	
	self should:[aCashier checkOut: aCart.]
	raise: Error
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/10/2021 19:57:08' prior: 50895469!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier aCreditCard |
	
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier new.
	aCreditCard _ 'ola'.
	
	self should:[aCashier checkOut: aCart payingWith:aCreditCard.]
	raise: Error
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/10/2021 19:59:37' prior: 50895482!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier  |
	
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier new.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard.]
	raise: Error
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/10/2021 19:59:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'aValidCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/10/2021 20:00:24' prior: 50895497!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier|
	
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier new.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard.]
	raise: Error
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/10/2021 20:00:24'!
ERROR!
!Cashier class methodsFor: 'error' stamp: 'E.V 6/10/2021 20:00:52'!
cantCheckOutAEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error' stamp: 'E.V 6/10/2021 20:01:47' prior: 50895535!
cantCheckOutAEmptyCartErrorDescription
	^ ' La proxima que vayas a hacer compras y no lleves nada no salgas de tu casa pap�, no ves que estamos en pandemia?!!?!!?!!?!!? '! !

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/10/2021 20:01:48'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/10/2021 20:02:28' prior: 50895518!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier|
	
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier new.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/10/2021 20:02:29'!
ERROR!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:03:26'!
checkOut: aCart payingWith: anUndefinedObject 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:04:08' prior: 50895570!
checkOut: aCart payingWith: aCreditCard 
		^ self raiseCantCheckOutAnEmptyCart! !

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/10/2021 20:04:11'!
ERROR!
!Cashier methodsFor: 'error' stamp: 'E.V 6/10/2021 20:04:18'!
raiseCantCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier methodsFor: 'error' stamp: 'E.V 6/10/2021 20:04:36' prior: 50895583!
raiseCantCheckOutAnEmptyCart
	self error: self class cantCheckOutAEmptyCartErrorDescription .! !

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/10/2021 20:04:37'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/10/2021 20:04:37'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/10/2021 20:07:18'!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aPriceList |
	
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: aPriceList.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/10/2021 20:14:02' prior: 50895600!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aPriceList aBook aTotal|
	
	aBook _ 'isbn1'.
	aPriceList _ Dictionary new.
	aPriceList add: aBook -> 10.
	aCart  _ Cart newWith:(OrderedCollection with:aBook).
	aCashier _ Cashier newWith: aPriceList.
	
	aCart add: aBook .

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 10.

	! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:14:02'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'E.V 6/10/2021 20:14:15'!
newWith: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewWith: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'E.V 6/10/2021 20:14:26' prior: 50895637!
newWith: aDictionary 

	^self new initializeWith: aDictionary ! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:14:27'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'E.V 6/10/2021 20:14:42'!
Object subclass: #Cashier
	instanceVariableNames: 'dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'E.V 6/10/2021 20:14:42'!
initializeWith: aDictionary 
	self shouldBeImplemented.
	dictionary := aDictionary.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'E.V 6/10/2021 20:15:04'!
Object subclass: #Cashier
	instanceVariableNames: 'dictionary priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'E.V 6/10/2021 20:15:11' prior: 50895662!
initializeWith: aPriceList 
	priceList := aPriceList.! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:15:15'!
ERROR!
!Cashier methodsFor: 'error' stamp: 'E.V 6/10/2021 20:16:14'!
raiseCantCheckOutAnEmptyCart: aCart
	self error: self class cantCheckOutAEmptyCartErrorDescription .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'E.V 6/10/2021 20:16:14' prior: 50895575!
checkOut: aCart payingWith: aCreditCard 
		^ self raiseCantCheckOutAnEmptyCart: aCart! !

!methodRemoval: Cashier #raiseCantCheckOutAnEmptyCart stamp: 'E.V 6/10/2021 20:16:14'!
raiseCantCheckOutAnEmptyCart
	self error: self class cantCheckOutAEmptyCartErrorDescription .!
!Cashier methodsFor: 'error' stamp: 'E.V 6/10/2021 20:17:12' prior: 50895683!
raiseCantCheckOutAnEmptyCart: aCart
	aCart isEmpty ifTrue: [self error: self class cantCheckOutAEmptyCartErrorDescription] .! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:39:01' prior: 50895690!
checkOut: aCart payingWith: aCreditCard 
	 self raiseCantCheckOutAnEmptyCart:aCart.
	 ^ self priceOf: (aCart list at:1).
! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:39:17'!
ERROR!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:39:43'!
priceOf: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:40:13' prior: 50895719!
priceOf: aBook 
	^ priceList associationAt: aBook! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:40:15'!
FAILURE!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:41:26' prior: 50895724!
priceOf: aBook 
	^ priceList at: aBook! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/10/2021 20:41:29'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/10/2021 20:41:29'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/10/2021 20:41:29'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/10/2021 20:41:29'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/10/2021 20:41:29'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/10/2021 20:41:29'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/10/2021 20:41:29'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/10/2021 20:41:29'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/10/2021 20:41:29'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:41:29'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/10/2021 20:42:24'!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aPriceList aBook aTotal|
	
	aBook _ 'isbn1'.
	aPriceList _ Dictionary new.
	aPriceList add: aBook -> 10.
	aCart  _ Cart newWith:(OrderedCollection with:aBook).
	aCashier _ Cashier newWith: aPriceList.
	
	aCart add: aBook .

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 10.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/10/2021 20:42:39' prior: 50895773!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aPriceList aBook aTotal|
	
	aBook _ 'isbn1'.
	aPriceList _ Dictionary new.
	aPriceList add: aBook -> 10.
	aCart  _ Cart newWith:(OrderedCollection with:aBook).
	aCashier _ Cashier newWith: aPriceList.
	
	aCart add: aBook.
	aCart add: aBook.

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 20.

	! !

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:42:43'!
FAILURE!

aCart list!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:45:13' prior: 50895708!
checkOut: aCart payingWith: aCreditCard 
	 self raiseCantCheckOutAnEmptyCart:aCart.
	^aCart list sum:[:aBook | self priceOf: aBook]
! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:46:36' prior: 50895811!
checkOut: aCart payingWith: aCreditCard 
	 self raiseCantCheckOutAnEmptyCart:aCart.
	^aCart list sum:[:aBook :aBookQuantity| (self priceOf: aBook) * aBookQuantity ]
! !

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:46:38'!
ERROR!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:51:20' prior: 50895818!
checkOut: aCart payingWith: aCreditCard 
	|index aBookList| 
	self raiseCantCheckOutAnEmptyCart:aCart.
	index _ 1.
	aBookList _ aCart list.
	^ index < aBookList size do: [ (self priceOf: (aBookList at:index )) * (aBookList at:(index+1) ).
							index _ index + 1]
! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:52:37' prior: 50895831!
checkOut: aCart payingWith: aCreditCard 
	|index aBookList res| 
	self raiseCantCheckOutAnEmptyCart:aCart.
	index _ 1.
	aBookList _ aCart list.
	index < aBookList size do: [ res _ (self priceOf: (aBookList at:index )) * (aBookList at:(index+1) ).
							index _ index + 1].
	^res
! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:53:00' prior: 50895842!
checkOut: aCart payingWith: aCreditCard 
	|index aBookList res| 
	self raiseCantCheckOutAnEmptyCart:aCart.
	index _ 1.
	res _ 0.
	aBookList _ aCart list.
	index < aBookList size do: [ res _ res + (self priceOf: (aBookList at:index )) * (aBookList at:(index+1) ).
							index _ index + 1].
	^res
! !

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:53:10'!
ERROR!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:53:10'!
ERROR!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:53:30' prior: 50895854!
checkOut: aCart payingWith: aCreditCard 
	|index aBookList res| 
	self raiseCantCheckOutAnEmptyCart:aCart.
	index _ 1.
	res _ 0.
	aBookList _ aCart list.
	index < aBookList size whileTrue: [ res _ res + (self priceOf: (aBookList at:index )) * (aBookList at:(index+1) ).
							index _ index + 1].
	^res
! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/10/2021 20:53:31'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/10/2021 20:53:31'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/10/2021 20:53:31'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/10/2021 20:53:31'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/10/2021 20:53:31'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/10/2021 20:53:31'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/10/2021 20:53:31'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/10/2021 20:53:31'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/10/2021 20:53:31'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:53:31'!
ERROR!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:53:31'!
ERROR!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:55:49'!
ERROR!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:55:49'!
ERROR!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:56:08' prior: 50895876!
checkOut: aCart payingWith: aCreditCard 
	|index aBookList res| 
	self raiseCantCheckOutAnEmptyCart:aCart.
	index _ 1.
	res _ 0.
	aBookList _ aCart list.
	[index < aBookList size] whileTrue: [ res _ res + (self priceOf: (aBookList at:index )) * (aBookList at:(index+1) ).
							index _ index + 1].
	^res
! !

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:56:09'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:56:12'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 20:56:14'!
PASSED!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 21:00:16' prior: 50895939!
checkOut: aCart payingWith: aCreditCard 
	|index aBookList res| 
	self raiseCantCheckOutAnEmptyCart:aCart.
	index _ 1.
	res _ 0.
	aBookList _ aCart list.
	^aBookList inject: 0 into: [:aBook :aBookQuantity | aBookQuantity + self priceOf: aBook].
! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 21:00:28' prior: 50895965!
checkOut: aCart payingWith: aCreditCard 
	|aBookList | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	
	aBookList _ aCart list.
	^aBookList inject: 0 into: [:aBook :aBookQuantity | aBookQuantity + self priceOf: aBook].
! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 21:00:36' prior: 50895976!
checkOut: aCart payingWith: aCreditCard 
	|aBookList | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	aBookList _ aCart list.
	^aBookList inject: 0 into: [:aBook :aBookQuantity | aBookQuantity + self priceOf: aBook].
! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/10/2021 21:00:36'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/10/2021 21:00:36'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/10/2021 21:00:36'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/10/2021 21:00:36'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/10/2021 21:00:36'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/10/2021 21:00:36'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/10/2021 21:00:36'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/10/2021 21:00:36'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/10/2021 21:00:37'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 21:00:37'!
ERROR!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 21:00:37'!
ERROR!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 21:00:40'!
ERROR!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 21:00:40'!
ERROR!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 21:00:47'!
ERROR!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 21:00:47'!
ERROR!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 21:01:17' prior: 50895986!
checkOut: aCart payingWith: aCreditCard 
	|aBookList | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	aBookList _ aCart list.
	^aBookList inject: 0 into: [:aBook :aBookQuantity | self priceOf: aBook * aBookQuantity ].
! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 21:01:17'!
ERROR!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 21:01:41' prior: 50896053!
checkOut: aCart payingWith: aCreditCard 
	|aBookList | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	aBookList _ aCart list.
	^aBookList inject: 0 into: [:aBook :aBookQuantity | (self priceOf: aBook) * aBookQuantity ].
! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 21:01:42'!
ERROR!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/10/2021 20:56:08' prior: 50896067!
checkOut: aCart payingWith: aCreditCard 
	|index aBookList res| 
	self raiseCantCheckOutAnEmptyCart:aCart.
	index _ 1.
	res _ 0.
	aBookList _ aCart list.
	[index < aBookList size] whileTrue: [ res _ res + (self priceOf: (aBookList at:index )) * (aBookList at:(index+1) ).
							index _ index + 1].
	^res
! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/10/2021 21:07:35'!
PASSED!

----QUIT----(10 June 2021 21:26:26) CuisUniversity-4532.image priorSource: 18025354!

----STARTUP---- (11 June 2021 14:33:48) as C:\Users\EnzoVigneti\Desktop\Facu\inge1\cui\CuisUniversity-4532.image!


!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:34:14'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:38:19'!
PASSED!

Object subclass: #TestObjectGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestObjectGenerator category: 'TusLibros' stamp: 'E.V 6/11/2021 14:41:12'!
Object subclass: #TestObjectGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/11/2021 14:42:46'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'E.V 6/11/2021 14:42:46'!
Xxxxxx subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Xxxxxx subclass: #CashierTest
	instanceVariableNames: 'aValidCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 14:43:23'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: 'aValidCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 14:44:12'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/11/2021 14:44:12'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'E.V 6/11/2021 14:45:23' prior: 50895133!
initializeWith: aCatalog
	books _ OrderedCollection new.
	avaibleBooks _ aCatalog.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'E.V 6/11/2021 14:45:28'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 14:45:28' prior: 50896273!
initializeWith: aCatalog
	books _ OrderedCollection new.
	catalog _ aCatalog.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 14:45:28' prior: 50895139!
raiseErrorIfBookIsNotForSale: aBook
	(catalog includes: aBook) ifFalse: [self error: self class cantAddBookNotForSaleErrorDescription].
	! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:45:41'!
PASSED!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/11/2021 14:46:33' prior: 50896081!
checkOut: aCart payingWith: aCreditCard 
	|aBookList | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	^ aCart totalPrice.
! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/11/2021 14:46:48' prior: 50896341!
checkOut: aCart payingWith: aCreditCard 
	self raiseCantCheckOutAnEmptyCart:aCart.
	^ aCart totalPrice.
! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 14:46:53'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:46:53'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:46:53'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:46:53'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:46:53'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:46:53'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:46:53'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:46:53'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 14:46:53'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:46:53'!
ERROR!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:46:53'!
ERROR!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 14:47:10'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:47:10'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:47:10'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:47:10'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:47:10'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:47:10'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:47:10'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:47:10'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 14:47:10'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:47:10'!
ERROR!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:47:10'!
ERROR!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:47:13'!
ERROR!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:47:13'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'E.V 6/11/2021 14:47:24'!
totalPrice
	self shouldBeImplemented.! !
!Cart methodsFor: 'operations' stamp: 'E.V 6/11/2021 14:48:36' prior: 50896444!
totalPrice
	^ books sum: [:aBook | catalog at: aBook].! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:49:04'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:49:48' prior: 50895789!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCataloge aBook aTotal|
	
	aBook _ 'isbn1'.
	aCataloge _ Dictionary new.
	aCataloge add: aBook -> 10.
	aCart  _ Cart newWith:(OrderedCollection with:aBook).
	aCashier _ Cashier newWith: aCataloge.
	
	aCart add: aBook.
	aCart add: aBook.

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 20.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:50:08' prior: 50896457!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCataloge aBook aTotal|
	
	aBook _ 'isbn1'.
	aCataloge _ Dictionary new.
	aCataloge add: aBook -> 10.
	aCart  _ Cart newWith:(aCataloge).
	aCashier _ Cashier new.
	
	aCart add: aBook.
	aCart add: aBook.

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 20.

	! !

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:50:11'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'E.V 6/11/2021 14:50:37' prior: 50895183!
newWith: aCataloge 
	^self new initializeWith: aCataloge ! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:51:31' prior: 50895617!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCataloge aBook aTotal|
	
	aBook _ 'isbn1'.
	aCataloge _ Dictionary new.
	aCataloge add: aBook -> 10.
	aCart  _ Cart newWith:(OrderedCollection with:aBook).
	aCashier _ Cashier newWith: aCataloge.
	
	aCart add: aBook .

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 10.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:51:50' prior: 50896474!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal|
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier new.
	
	aCart add: aBook.
	aCart add: aBook.

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 20.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:52:13' prior: 50896500!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal|
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(OrderedCollection with:aBook).
	aCashier _ Cashier newWith: aCatalog.
	
	aCart add: aBook .

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 10.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:52:32' prior: 50896532!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal|
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier new.
	
	aCart add: aBook .

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 10.

	! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:52:32'!
ERROR!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:53:31'!
ERROR!
!Cart methodsFor: 'error' stamp: 'E.V 6/11/2021 14:53:57' prior: 50896292!
raiseErrorIfBookIsNotForSale: aBook
	(catalog includesKey: aBook) ifFalse: [self error: self class cantAddBookNotForSaleErrorDescription].
	! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:54:00'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:54:02'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 14:54:12'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 14:54:12'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:54:12'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 14:54:12'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 14:54:17'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:54:17'!
ERROR!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:54:17'!
ERROR!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:54:17'!
ERROR!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:54:17'!
FAILURE!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:54:17'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:54:17'!
ERROR!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:54:17'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:54:38' prior: 50895410!
test01createdCartIsEmpty
	|cart|
	cart _ Cart newWith:(Dictionary new).
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:55:18' prior: 50895224!
test02WhenAddingABookToEmptyCartItOnlyContainsThatBook
	|cart aBook|
	aBook _ 'isbn1'.
	cart _ Cart newWith: (Dictionary with: aBook -> 10).
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.
	self assert: cart amoutOfBooks equals: 1.! !

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:55:19'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 14:55:19'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:55:19'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:55:19'!
ERROR!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:55:19'!
ERROR!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:55:19'!
FAILURE!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:55:19'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:55:19'!
ERROR!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:55:19'!
ERROR!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:55:23'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:55:45' prior: 50895249!
test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks
	|cart aBook1 aBook2|
	aBook1 _ 'isbn1'.
	aBook2 _ 'isbn2'.
	cart _ Cart newWith: (Dictionary  with: aBook1->10 with: aBook2->20 ).
	cart add: aBook1.
	cart add: aBook2.
	self assert: cart includes: aBook1.
	self assert: cart includes: aBook2.
	self assert: cart amoutOfBooks equals: 2.! !

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:55:46'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 14:55:46'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:55:46'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:55:46'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:55:46'!
ERROR!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:55:46'!
FAILURE!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:55:46'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:55:46'!
ERROR!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:55:46'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:55:58' prior: 50895236!
test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook
	|cart aBook|
	aBook _ 'isbn1'.
	cart _ Cart newWith: (Dictionary  with: aBook->10).
	cart add: aBook.
	cart add: aBook.
	cart add: aBook.
	self assert: (cart quantityOf: aBook) equals: 3.
	self assert: cart amoutOfBooks equals: 3.! !

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:56:06'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:56:29' prior: 50895263!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook |
	anUnavaibleBook _ 'isbn1'.
	cart _ Cart newWith: (Dictionary new).
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart cantAddBookNotForSaleErrorDescription] ! !

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:56:32'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:56:33'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:56:35'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:56:42' prior: 50895065!
test06ListingCartElementsOfEmptyCartReturnsEmptyReport
	|cart  |

	cart _ Cart newWith: Dictionary  new.
	self assert: (cart list isEmpty)! !
!CartTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:57:14' prior: 50895361!
test07ListingCartElementsOfCartWithABookReturnsCorrectReport
	|cart aBook |
	"El mensaje ISBN no est� implementado, es temporal"
	aBook _ 'isbn1'.
	cart _ Cart newWith: (Dictionary  with: aBook->10).
	cart add: aBook.
	self assert: (cart list) equals: (OrderedCollection with: aBook  with: 1).! !

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:57:17'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 14:57:17'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:57:17'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:57:17'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:57:17'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:57:17'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:57:17'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:57:17'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:57:17'!
ERROR!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:57:17'!
ERROR!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:57:26'!
ERROR!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:57:26'!
ERROR!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:57:29'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'E.V 6/11/2021 14:57:43' prior: 50895314!
test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport
	|cart aBook |
	"El mensaje ISBN no est� implementado, es temporal"
	aBook _ 'isbn1'.
	cart _ Cart newWith: (Dictionary  with: aBook -> 10).
	cart add: aBook.
	cart add: aBook.
	self assert: (cart list) equals: (OrderedCollection with: aBook with: 2).! !

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:57:45'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 14:57:45'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 14:57:45'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 14:57:45'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 14:57:45'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 14:57:45'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 14:57:45'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 14:57:45'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 14:57:45'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:02:27'!
test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices
	|aCart aCashier aCatalog aBook aTotal|
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier new.
	
	aCart add: aBook.
	aCart add: aBook.

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 20.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:04:17' prior: 50896888!
test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices
	|aCart aCashier aCatalog aBook anotherBook aTotal|
	
	aBook _ 'isbn1'.
	anotherBook _ 'isbn2'.
	aCatalog _ Dictionary with: aBook -> 10 with: anotherBook -> 100 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier new.
	.
	aCart add: aBook.
	aCart add: anotherBook.
	aCart add: anotherBook.
	
	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 210.

	! !

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:04:19'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 15:04:19'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:04:19'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:04:19'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:04:19'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 15:07:44'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: 'aExpiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:07:41' prior: 50896904!
test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier new.
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aExpiredCreditCard.]
	raise: Error
	withExceptionDo:[:anError | self assert: anError messageText equals: 
									Cashier cantProcessAnExpiredCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:08:15' prior: 50896951!
test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier new.
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aExpiredCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
									Cashier cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:08:18'!
FAILURE!
!Cashier class methodsFor: 'error' stamp: 'E.V 6/11/2021 15:10:54'!
cantProcessAnExpiredCreditCardErrorDescription
	^ ' Disculpame hermano, se te re vencio la tarjeta. 	Aceptamos mercadopago si queres...'! !

!classDefinition: #CardChecker category: 'TusLibros' stamp: 'E.V 6/11/2021 15:14:02'!
Object subclass: #CardChecker
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'error' stamp: 'E.V 6/11/2021 15:13:53'!
raiseCantProcessAnExpiredCreditCardErrorDescription: aCreditCard
	[CardChecker new isExpired:aCreditCard]  ifTrue: [self error: self class cantCheckOutAEmptyCartErrorDescription] .! !

Object subclass: #CardChecker
	instanceVariableNames: 'aExpiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CardChecker category: 'TusLibros' stamp: 'E.V 6/11/2021 15:16:37'!
Object subclass: #CardChecker
	instanceVariableNames: 'aExpiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #CardChecker as: #MerchantProcessorSimulator stamp: 'E.V 6/11/2021 15:16:58'!
Smalltalk renameClassNamed: #CardChecker as: #MerchantProcessorSimulator!
!Cashier methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 15:16:58' prior: 50897007!
raiseCantProcessAnExpiredCreditCardErrorDescription: aCreditCard
	[MerchantProcessorSimulator new isExpired:aCreditCard]  ifTrue: [self error: self class cantCheckOutAEmptyCartErrorDescription] .! !
!Cashier methodsFor: 'initialization' stamp: 'E.V 6/11/2021 15:18:00' prior: 50895675!
initializeWith: merchantProcessor 
	priceList := merchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'E.V 6/11/2021 15:18:32' prior: 50897042!
initializeWith: aMerchantProcessor 
	priceList := aMerchantProcessor.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'E.V 6/11/2021 15:18:46'!
Object subclass: #Cashier
	instanceVariableNames: 'dictionary merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 15:18:46' prior: 50897047!
initializeWith: aMerchantProcessor 
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 15:18:47' prior: 50895733!
priceOf: aBook 
	^ merchantProcessor at: aBook! !

Object subclass: #Cashier
	instanceVariableNames: ' merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'E.V 6/11/2021 15:19:16'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'error' stamp: 'E.V 6/11/2021 15:19:31' prior: 50897033!
raiseCantProcessAnExpiredCreditCardErrorDescription: aCreditCard
	[merchantProcessor isExpired:aCreditCard]  ifTrue: [self error: self class cantCheckOutAEmptyCartErrorDescription] .! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:22:12' prior: 50896970!
test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aExpiredCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
									Cashier cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:22:41'!
FAILURE!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/11/2021 15:25:46' prior: 50896348!
checkOut: aCart payingWith: aCreditCard
        |aTotalPurchaseValue | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	aTotalPurchaseValue  _ aCart totalPrice.
	merchantProcessor processPurchaseFor:aTotalPurchaseValue payingWith:aCreditCard .
	^ aTotalPurchaseValue
! !

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:25:59'!
ERROR!

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:25:59'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'E.V 6/11/2021 15:26:11'!
processPurchaseFor: aSmallInteger payingWith: anUndefinedObject 
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'E.V 6/11/2021 15:27:30' prior: 50897137!
processPurchaseFor: aTotalPrice payingWith: aCreditCard 
	self raiseCantProcessAnExpiredCreditCardError: aCreditCard.! !

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:27:53'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/11/2021 15:28:05'!
raiseCantProcessAnExpiredCreditCardError: anUndefinedObject 
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/11/2021 15:29:22' prior: 50897156!
raiseCantProcessAnExpiredCreditCardError: aCreditCard 
	aExpiredCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAnExpiredCreditCardErrorDescription]! !

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:29:27'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'E.V 6/11/2021 15:29:56'!
cantProcessAnExpiredCreditCardErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'E.V 6/11/2021 15:30:12' prior: 50897175!
cantProcessAnExpiredCreditCardErrorDescription
	^ ' Disculpame hermano, se te re vencio la tarjeta. 	Aceptamos mercadopago si queres...'! !

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:30:14'!
PASSED!

!methodRemoval: Cashier class #cantProcessAnExpiredCreditCardErrorDescription stamp: 'E.V 6/11/2021 15:30:22'!
cantProcessAnExpiredCreditCardErrorDescription
	^ ' Disculpame hermano, se te re vencio la tarjeta. 	Aceptamos mercadopago si queres...'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:30:42' prior: 50897091!
test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aExpiredCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:30:44'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 15:30:44'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:30:44'!
ERROR!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:30:44'!
ERROR!

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:30:44'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:30:50'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:30:57'!
ERROR!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:30:57'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:31:28' prior: 50896516!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal|
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBook.
	aCart add: aBook.

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 20.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:31:33' prior: 50896548!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal|
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBook .

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard.
	self assert: aTotal equals: 10.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:31:38' prior: 50895552!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier|
	
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:31:42'!
ERROR!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:31:42'!
ERROR!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/11/2021 15:34:47' overrides: 16927572!
setUp

aValidCreditCard _ 12/12/9999 .

! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 15:35:11'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/11/2021 15:35:11'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard aExpiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/11/2021 15:36:25' prior: 50897313 overrides: 16927572!
setUp

aValidCreditCard _ 12/12/9999 .
aExpiredCreditCard _ 1/1/0001 .
! !

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/11/2021 15:36:38'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard anExpiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Xxxxxx methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 15:36:38' prior: 50897332 overrides: 16927572!
setUp

aValidCreditCard _ 12/12/9999 .
anExpiredCreditCard _ 1/1/0001 .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 15:36:38' prior: 50897201!
test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

12/12/9999!

May/12/9999!

December/12/9999 !
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/11/2021 15:38:10' prior: 50897346 overrides: 16927572!
setUp

aValidCreditCard _ December/12/9999 .
anExpiredCreditCard _ January/1/0001 .
! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'E.V 6/11/2021 15:38:39'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'anExpiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 15:38:39' prior: 50897162!
raiseCantProcessAnExpiredCreditCardError: aCreditCard 
	anExpiredCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAnExpiredCreditCardErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'set' stamp: 'E.V 6/11/2021 15:39:13'!
expiredCard: aCreditCard
	anExpiredCreditCard _ aCreditCard .! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:39:46' prior: 50897352!
test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new expiredCard: anExpiredCreditCard ).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:39:47'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:42:33'!
test04CheckingOutACartWithAnExpiredCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new expiredCard: anExpiredCreditCard ).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!methodRemoval: CashierTest #test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices stamp: 'E.V 6/11/2021 15:42:33'!
test04CheckingOutACartWithMultipleDifferentItemsReturnsATotalEqualToTheSumOfThePrices
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new expiredCard: anExpiredCreditCard ).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:43:14'!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new expiredCard: anExpiredCreditCard ).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 15:45:01'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: 'aFoundlessCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:44:59'!
test04CheckingOutACartWithAFoundlessCreditCard
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new foundlessCard: aFoundlessCreditCard).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFoundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:47:16' prior: 50897547!
test04CheckingOutACartWithAFoundlessCreditCard
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new foundlessCard: aFoundlessCreditCard).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFoundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 15:47:23'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: 'aFundlessCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 15:47:23' prior: 50897568!
test04CheckingOutACartWithAFoundlessCreditCard
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new foundlessCard: aFundlessCreditCard).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:47:30' prior: 50897597!
test04CheckingOutACartWithAFoundlessCreditCard
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:47:49' prior: 50897618!
test04CheckingOutACartWithAFoundlessCreditCard
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnFundlessCreditCardErrorDescription].
	

	! !

!methodRemoval: CashierTest #test04CheckingOutACartWithAnExpiredCreditCardRaisesError stamp: 'E.V 6/11/2021 15:48:01'!
test04CheckingOutACartWithAnExpiredCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new expiredCard: anExpiredCreditCard ).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/11/2021 15:48:08'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:48:17'!
test05CheckingOutACartWithAFoundlessCreditCard
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnFundlessCreditCardErrorDescription].
	

	! !

!methodRemoval: CashierTest #test04CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:48:18'!
test04CheckingOutACartWithAFoundlessCreditCard
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnFundlessCreditCardErrorDescription].
	

	!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:48:21'!
ERROR!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:48:21'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'set' stamp: 'E.V 6/11/2021 15:48:32'!
fundlessCard: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'E.V 6/11/2021 15:48:58'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'anExpiredCreditCard fundlessCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'set' stamp: 'E.V 6/11/2021 15:48:56' prior: 50897734!
fundlessCard: aCreditCard
	fundlessCreditCard _ aCreditCard ! !

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:49:00'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'E.V 6/11/2021 15:49:40'!
cantProcessAnFundlessCreditCardErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'E.V 6/11/2021 15:49:52' prior: 50897757!
cantProcessAnFundlessCreditCardErrorDescription
	^ ''.! !

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/11/2021 15:51:34'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard anExpiredCreditCard merchantProcessorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 15:52:04'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/11/2021 15:52:04'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard anExpiredCreditCard merchantProcessorSimulator aFundlessCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/11/2021 15:52:57'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard anExpiredCreditCard merchantProcessorSimulator aFundlessCreditCard aMerchantProcessorSimulation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/11/2021 15:52:52' prior: 50897375 overrides: 16927572!
setUp

aValidCreditCard _ December/12/9999 .
anExpiredCreditCard _ January/1/0001 .
aMerchantProcessorSimulation _ MerchantProcessorSimulator new expiredCard: anExpiredCreditCard fundlessCard: aFundlessCreditCard .! !
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/11/2021 15:53:32' prior: 50897803 overrides: 16927572!
setUp

aValidCreditCard _ December/12/9999 .
anExpiredCreditCard _ January/1/0001 .
aMerchantProcessorSimulation _ MerchantProcessorSimulator new expiredCard: anExpiredCreditCard; fundlessCard: aFundlessCreditCard .! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:53:51' prior: 50897685!
test05CheckingOutACartWithAFoundlessCreditCard
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnFundlessCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:53:56' prior: 50897519!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/11/2021 15:54:04'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:54:06'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:54:06'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'E.V 6/11/2021 15:54:39' prior: 50897144!
processPurchaseFor: aTotalPrice payingWith: aCreditCard 
	self raiseCantProcessAnExpiredCreditCardError: aCreditCard.
	self raiseCantProcessAFundlessCreditCardError: aCreditCard.! !
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/11/2021 15:55:03'!
raiseCantProcessAFundlessCreditCardError: aCreditCard 
	anExpiredCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAnExpiredCreditCardErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/11/2021 15:55:15' prior: 50897390!
raiseCantProcessAnExpiredCreditCardError: aCreditCard 
	fundlessCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAnExpiredCreditCardErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/11/2021 15:55:37' prior: 50897894!
raiseCantProcessAnExpiredCreditCardError: aCreditCard 
	fundlessCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAnFundlessCreditCardErrorDescription ]! !
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'E.V 6/11/2021 15:55:45'!
cantProcessAFundlessCreditCardErrorDescription
	^ ''.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 15:55:45' prior: 50897903!
raiseCantProcessAnExpiredCreditCardError: aCreditCard 
	fundlessCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAFundlessCreditCardErrorDescription ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/11/2021 15:55:45' prior: 50897824!
test05CheckingOutACartWithAFoundlessCreditCard
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	! !

!methodRemoval: MerchantProcessorSimulator class #cantProcessAnFundlessCreditCardErrorDescription stamp: 'E.V 6/11/2021 15:55:45'!
cantProcessAnFundlessCreditCardErrorDescription
	^ ''.!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'E.V 6/11/2021 15:56:51' prior: 50897912!
cantProcessAFundlessCreditCardErrorDescription
	^ 'Uh mil disculpas boludo, se ve que en esta no tenes nada. Sabemos que esta dificil el tema, ojala te puedas levantar.'.! !

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:57:05'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:57:24'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:57:42'!
test05CheckingOutACartWithAFoundlessCreditCardRaisesErrror
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	! !

!methodRemoval: CashierTest #test05CheckingOutACartWithAFoundlessCreditCard stamp: 'E.V 6/11/2021 15:57:42'!
test05CheckingOutACartWithAFoundlessCreditCard
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 15:58:07'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: 'aStolenCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:58:05'!
test06CheckingOutACartWithAStolenCreditCardRaisesErrror
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aStolenCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 15:58:19' prior: 50898116!
test06CheckingOutACartWithAStolenCreditCardRaisesErrror
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aStolenCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAStolenCreditCardErrorDescription].
	

	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 15:59:17'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/11/2021 15:59:17'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard anExpiredCreditCard merchantProcessorSimulator aFundlessCreditCard aMerchantProcessorSimulation aStolenCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/11/2021 16:00:08' prior: 50897814 overrides: 16927572!
setUp

aValidCreditCard _ December/12/9999 .
anExpiredCreditCard _ January/1/0001 .
aStolenCreditCard _ 'tu mama'.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new expiredCard: anExpiredCreditCard; fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard.! !
!MerchantProcessorSimulator methodsFor: 'stepping' stamp: 'E.V 6/11/2021 16:03:10'!
stolenCard: aString 
	self shouldBeImplemented.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'E.V 6/11/2021 16:03:35'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'anExpiredCreditCard fundlessCreditCard aStolenCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'stepping' stamp: 'E.V 6/11/2021 16:03:34' prior: 50898186!
stolenCard: aCreditCard
	aStolenCreditCard _ aCreditCard .! !

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesErrror stamp: 'E.V 6/11/2021 16:03:37'!
FAILURE!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'E.V 6/11/2021 16:04:43'!
cantProcessAStolenCreditCardErrorDescription
	^ 'En 15 llega la yuta, raja de aca'! !
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/11/2021 16:09:42'!
raiseCantProcessAStolenCreditCardError: aCreditCard 
	aStolenCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAStolenCreditCardErrorDescription ]! !

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesErrror stamp: 'E.V 6/11/2021 16:09:52'!
FAILURE!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesErrror stamp: 'E.V 6/11/2021 16:09:52'!
FAILURE!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesErrror stamp: 'E.V 6/11/2021 16:09:59'!
FAILURE!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesErrror stamp: 'E.V 6/11/2021 16:09:59'!
FAILURE!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesErrror stamp: 'E.V 6/11/2021 16:10:44'!
FAILURE!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesErrror stamp: 'E.V 6/11/2021 16:10:50'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'E.V 6/11/2021 16:11:15' prior: 50897876!
processPurchaseFor: aTotalPrice payingWith: aCreditCard 
	self raiseCantProcessAnExpiredCreditCardError: aCreditCard.
	self raiseCantProcessAFundlessCreditCardError: aCreditCard.
	self raiseCantProcessAStolenCreditCardError: aCreditCard.! !

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesErrror stamp: 'E.V 6/11/2021 16:11:21'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 16:11:43'!
test05CheckingOutACartWithAFoundlessCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	! !

!methodRemoval: CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesErrror stamp: 'E.V 6/11/2021 16:11:43'!
test05CheckingOutACartWithAFoundlessCreditCardRaisesErrror
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 16:11:49'!
test06CheckingOutACartWithAStolenCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aStolenCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAStolenCreditCardErrorDescription].
	

	! !

!methodRemoval: CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesErrror stamp: 'E.V 6/11/2021 16:11:49'!
test06CheckingOutACartWithAStolenCreditCardRaisesErrror
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aStolenCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAStolenCreditCardErrorDescription].
	

	!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 16:12:55'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: 'aFakeCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 16:12:54'!
test07CheckingOutACartWithAFakeCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFakeCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAStolenCreditCardErrorDescription].
	

	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/11/2021 16:13:08'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/11/2021 16:13:08'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard anExpiredCreditCard merchantProcessorSimulator aFundlessCreditCard aMerchantProcessorSimulation aStolenCreditCard aFakeCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/11/2021 16:13:23' prior: 50898349!
test07CheckingOutACartWithAFakeCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFakeCreditCard.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFakeCreditCardErrorDescription].
	

	! !
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/11/2021 16:14:09' prior: 50898174 overrides: 16927572!
setUp

aValidCreditCard _ December/12/9999 .
anExpiredCreditCard _ January/1/0001 .
aStolenCreditCard _ 'tu mama'.
aFakeCreditCard  _ 'La tuya'.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new expiredCard: anExpiredCreditCard; fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.! !
!MerchantProcessorSimulator methodsFor: 'set' stamp: 'E.V 6/11/2021 16:14:54'!
fakeCard: aString 
	self shouldBeImplemented.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'E.V 6/11/2021 16:15:26'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'anExpiredCreditCard fundlessCreditCard aStolenCreditCard aFakeCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'set' stamp: 'E.V 6/11/2021 16:15:24' prior: 50898419!
fakeCard: aCreditCard
  		aFakeCreditCard _ aCreditCard ! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/11/2021 16:15:27'!
FAILURE!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'E.V 6/11/2021 16:15:54'!
cantProcessAFakeCreditCardErrorDescription
	^ ' Disculpame hermano, se te re vencio la tarjeta. 	Aceptamos mercadopago si queres...'! !
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/11/2021 16:16:15'!
raiseCantProcessAFakeCreditCardError: aCreditCard 
	aFakeCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAFakeCreditCardErrorDescription ]! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/11/2021 16:16:22'!
FAILURE!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/11/2021 16:16:22'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'E.V 6/11/2021 16:16:38' prior: 50898248!
processPurchaseFor: aTotalPrice payingWith: aCreditCard 
	self raiseCantProcessAnExpiredCreditCardError: aCreditCard.
	self raiseCantProcessAFundlessCreditCardError: aCreditCard.
	self raiseCantProcessAStolenCreditCardError: aCreditCard.
	self raiseCantProcessAnExpiredCreditCardError: aCreditCard ! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/11/2021 16:16:48'!
FAILURE!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/11/2021 16:16:48'!
FAILURE!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'E.V 6/11/2021 16:17:24' prior: 50898443!
cantProcessAFakeCreditCardErrorDescription
	^ ' Che amigo la sube sirve para el bondi nomas.'! !
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'E.V 6/11/2021 16:17:52' prior: 50898466!
processPurchaseFor: aTotalPrice payingWith: aCreditCard 
	self raiseCantProcessAnExpiredCreditCardError: aCreditCard.
	self raiseCantProcessAFundlessCreditCardError: aCreditCard.
	self raiseCantProcessAStolenCreditCardError: aCreditCard.
	self raiseCantProcessAFakeCreditCardError: aCreditCard ! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/11/2021 16:17:58'!
PASSED!

TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard anExpiredCreditCard merchantProcessorSimulator aFundlessCreditCard aMerchantProcessorSimulation aStolenCreditCard aFakeCreditCard aBookIsbn1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/11/2021 16:20:03'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard anExpiredCreditCard merchantProcessorSimulator aFundlessCreditCard aMerchantProcessorSimulation aStolenCreditCard aFakeCreditCard aBookIsbn1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----QUIT----(11 June 2021 16:21:14) CuisUniversity-4532.image priorSource: 18063483!

----STARTUP---- (14 June 2021 18:34:15) as C:\Users\EnzoVigneti\Desktop\Facu\inge1\cui\CuisUniversity-4532.image!

!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 18:35:26' prior: 50898406 overrides: 16927572!
setUp

aValidCreditCard _ December/12/9999 .
anExpiredCreditCard _ January/1/0001 .
aStolenCreditCard _ 'tu mama'.
aFakeCreditCard  _ 'La tuya'.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new expiredCard: anExpiredCreditCard; fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !

Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'E.V 6/14/2021 18:36:13'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 18:37:26' prior: 50898537 overrides: 16927572!
setUp

aValidCreditCard _ CreditCard new.
anExpiredCreditCard _ CreditCard new .
aStolenCreditCard _ CreditCard new.
aFakeCreditCard  _ CreditCard new.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new expiredCard: anExpiredCreditCard; fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 18:37:34'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 18:37:34'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 18:37:34'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 18:37:34'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 18:37:34'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 18:37:34'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 18:37:34'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 18:37:34'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 18:37:34'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 18:37:35'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 18:37:35'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 18:37:35'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 18:37:35'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 18:37:35'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 18:37:35'!
PASSED!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 18:38:22' prior: 50898563 overrides: 16927572!
setUp

aValidCreditCard _ CreditCard new.
anExpiredCreditCard _ CreditCard new .
aStolenCreditCard _ CreditCard new.
aFakeCreditCard  _ CreditCard new.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 18:38:24'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 18:38:24'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 18:38:24'!
FAILURE!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 18:39:16'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 18:39:16'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 18:39:16'!
FAILURE!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 18:39:29'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 18:39:37'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 18:39:37'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 18:39:37'!
FAILURE!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/14/2021 18:41:32'!
checkOut: aCart payingWith: aCreditCard On: date 
        |aTotalPurchaseValue | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	aTotalPurchaseValue  _ aCart totalPrice.
	merchantProcessor processPurchaseFor:aTotalPurchaseValue payingWith:aCreditCard .
	^ aTotalPurchaseValue
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:41:32' prior: 50897289!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier|
	
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard On: self today.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:41:32' prior: 50897273!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal|
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBook .

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard On: self today.
	self assert: aTotal equals: 10.

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:41:32' prior: 50897256!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal|
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBook.
	aCart add: aBook.

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard On: self today.
	self assert: aTotal equals: 20.

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:41:32' prior: 50898386!
test07CheckingOutACartWithAFakeCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFakeCreditCard On: self today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFakeCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:41:32' prior: 50897844!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard On: self today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:41:32' prior: 50898262!
test05CheckingOutACartWithAFoundlessCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard On: self today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:41:32' prior: 50898302!
test06CheckingOutACartWithAStolenCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aStolenCreditCard On: self today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAStolenCreditCardErrorDescription].
	

	! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'E.V 6/14/2021 18:41:32'!
checkOut: aCart payingWith: aCreditCard
        |aTotalPurchaseValue | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	aTotalPurchaseValue  _ aCart totalPrice.
	merchantProcessor processPurchaseFor:aTotalPurchaseValue payingWith:aCreditCard .
	^ aTotalPurchaseValue
!
!Cashier methodsFor: 'processing' stamp: 'E.V 6/14/2021 18:41:41' prior: 50898834!
checkOut: aCart payingWith: aCreditCard On: aDate 
        |aTotalPurchaseValue | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	aTotalPurchaseValue  _ aCart totalPrice.
	merchantProcessor processPurchaseFor:aTotalPurchaseValue payingWith:aCreditCard .
	^ aTotalPurchaseValue
! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/14/2021 18:43:53' prior: 50898992!
checkOut: aCart payingWith: aCreditCard On: aDate 
        |aTotalPurchaseValue | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	(aCreditCard isExpiredOn:aDate) ifTrue:[ self error: self class cantCheckOutAEmptyCartErrorDescription ].
	aTotalPurchaseValue  _ aCart totalPrice.
	merchantProcessor processPurchaseFor:aTotalPurchaseValue payingWith:aCreditCard .
	^ aTotalPurchaseValue
! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/14/2021 18:44:24'!
raiseErrorIF: aDate IsExpiredOn: aCreditCard

	^ (aCreditCard isExpiredOn:aDate) ifTrue:[ self error: self class cantCheckOutAEmptyCartErrorDescription ]! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/14/2021 18:44:24' prior: 50899004!
checkOut: aCart payingWith: aCreditCard On: aDate 
        |aTotalPurchaseValue | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	self raiseErrorIF: aDate IsExpiredOn: aCreditCard.
	aTotalPurchaseValue  _ aCart totalPrice.
	merchantProcessor processPurchaseFor:aTotalPurchaseValue payingWith:aCreditCard .
	^ aTotalPurchaseValue
! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/14/2021 18:44:39' prior: 50899027!
checkOut: aCart payingWith: aCreditCard On: aDate 
        |aTotalPurchaseValue | 
	self raiseCantCheckOutAnEmptyCart:aCart.
	self raiseErrorIF: aCreditCard IsExpiredOn: aDate.
	aTotalPurchaseValue  _ aCart totalPrice.
	merchantProcessor processPurchaseFor:aTotalPurchaseValue payingWith:aCreditCard .
	^ aTotalPurchaseValue
! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/14/2021 18:44:52' prior: 50899019!
raiseErrorIF: aCreditCard IsExpiredOn: aDate

	^ (aCreditCard isExpiredOn:aDate) ifTrue:[ self error: self class cantCheckOutAEmptyCartErrorDescription ]! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'E.V 6/14/2021 18:46:30'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'no messages' stamp: 'E.V 6/14/2021 18:46:28'!
isExpiredOn: aDate
	^ expirationDate > aDate! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 18:47:18'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 18:47:55' prior: 50898898!
test07CheckingOutACartWithAFakeCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFakeCreditCard On: FixedGregorianDate today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFakeCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 18:47:57'!
ERROR!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 18:50:26' prior: 50898635 overrides: 16927572!
setUp

aValidCreditCard _ CreditCard number: 1234567891234567 owner:'Santiago Corley' expirationDate: FixedGregorianDate today.
anExpiredCreditCard _ CreditCard new .
aStolenCreditCard _ CreditCard new.
aFakeCreditCard  _ CreditCard new.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/14/2021 18:50:45'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard anExpiredCreditCard merchantProcessorSimulator aFundlessCreditCard aMerchantProcessorSimulation aStolenCreditCard aFakeCreditCard aBookIsbn1 today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 18:50:43' prior: 50899101 overrides: 16927572!
setUp
today _ FixedGregorianDate today.
aValidCreditCard _ CreditCard number: 1234567891234567 owner:'Santiago Corley' expirationDate: FixedGregorianDate today.
anExpiredCreditCard _ CreditCard new .
aStolenCreditCard _ CreditCard new.
aFakeCreditCard  _ CreditCard new.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 18:51:20' prior: 50899129 overrides: 16927572!
setUp
today _ FixedGregorianDate today.
aValidCreditCard _ CreditCard number: 1234567891234567 owner:'Santiago Corley' expirationDate: today.
anExpiredCreditCard _ CreditCard new .
aStolenCreditCard _ CreditCard new.
aFakeCreditCard  _ CreditCard new.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !

!classDefinition: 'CreditCard class' category: 'TusLibros' stamp: 'E.V 6/14/2021 18:52:34'!
CreditCard class
	instanceVariableNames: 'creditCardNumber'!

!classDefinition: 'CreditCard class' category: 'TusLibros' stamp: 'E.V 6/14/2021 18:52:35'!
CreditCard class
	instanceVariableNames: 'creditCardNumber owner'!

!classDefinition: 'CreditCard class' category: 'TusLibros' stamp: 'E.V 6/14/2021 18:52:36'!
CreditCard class
	instanceVariableNames: 'owner creditCardNumber expirationDate'!
!CreditCard class methodsFor: 'no messages' stamp: 'E.V 6/14/2021 18:52:33'!
number: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
creditCardNumber _ aCreditCardNumber .
owner _ aName .
expirationDate _ anExpirationDate .! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:53:28' prior: 50899179!
number: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
self new initializeWithNumber: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:53:48'!
initializeWithNumber: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
 ! !

CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: 'TusLibros' stamp: 'E.V 6/14/2021 18:53:57'!
CreditCard class
	instanceVariableNames: ''!

Object subclass: #CreditCard
	instanceVariableNames: 'owner creditCardNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'E.V 6/14/2021 18:54:04'!
Object subclass: #CreditCard
	instanceVariableNames: 'owner creditCardNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:54:34' prior: 50899196!
initializeWithNumber: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
	creditCardNumber  _ aCreditCardNumber .
	owner  _ aName .
	expirationDate  _ anExpirationDate .
	 ! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 18:54:56'!
ERROR!

!classDefinition: #Xxxxxx category: 'TusLibros' stamp: 'E.V 6/14/2021 18:56:58'!
TestCase subclass: #Xxxxxx
	instanceVariableNames: 'aValidCreditCard anExpiredCreditCard merchantProcessorSimulator aFundlessCreditCard aMerchantProcessorSimulation aStolenCreditCard aFakeCreditCard aBookIsbn1 today yesterday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 18:56:56' prior: 50899147 overrides: 16927572!
setUp
today _ FixedGregorianDate today.
yesterday _ FixedGregorianDate yesterday .
aValidCreditCard _ CreditCard number: 1234567891234567 owner:'Santiago Corley' expirationDate: today.
anExpiredCreditCard _ CreditCard number: 1234567891234568 owner:'Enzo Vigneti' expirationDate: yesterday.
aStolenCreditCard _ CreditCard new.
aFakeCreditCard  _ CreditCard new.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 18:57:49' prior: 50898961!
test06CheckingOutACartWithAStolenCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aStolenCreditCard On: today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAStolenCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 18:57:50'!
ERROR!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 18:58:34' prior: 50899246 overrides: 16927572!
setUp
today _ FixedGregorianDate today.
yesterday _ FixedGregorianDate yesterday .
aValidCreditCard _ CreditCard number: 1234567891234567 owner:'Santiago Corley' expirationDate: today.
anExpiredCreditCard _ CreditCard number: 1234567891234568 owner:'Enzo Vigneti' expirationDate: yesterday.
aStolenCreditCard _ CreditCard number: 1234567891234569 owner:'Santiago Corley' expirationDate: today.
aFakeCreditCard  _ CreditCard number: 1234567891234561 owner:'Santiago Corley' expirationDate: today.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 18:58:45'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 18:59:09' prior: 50899188!
number: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
 ^self new initializeWithNumber: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 18:59:19' prior: 50898880!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal|
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBook.
	aCart add: aBook.

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.
	self assert: aTotal equals: 20.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 18:59:26' prior: 50898846!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier|
	
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 18:59:30' prior: 50898863!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal|
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBook .

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.
	self assert: aTotal equals: 10.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 18:59:34' prior: 50898919!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAnExpiredCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 18:59:37' prior: 50898940!
test05CheckingOutACartWithAFoundlessCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 18:59:46' prior: 50899076!
test07CheckingOutACartWithAFakeCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFakeCreditCard On: today .]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFakeCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 18:59:47'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 18:59:47'!
ERROR!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 18:59:47'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 18:59:56'!
ERROR!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 18:59:56'!
ERROR!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 19:01:05' prior: 50899291 overrides: 16927572!
setUp
today _ FixedGregorianDate today.
yesterday _ FixedGregorianDate yesterday .
aValidCreditCard _ CreditCard number: 1234567891234567 owner:'Santiago Corley' expirationDate: today.
anExpiredCreditCard _ CreditCard number: 1234567891234568 owner:'Enzo Vigneti' expirationDate: yesterday.
aStolenCreditCard _ CreditCard number: 1234567891234569 owner:'Santiago Corley' expirationDate: today.
aFakeCreditCard  _ CreditCard number: 1234567891234561 owner:'Santiago Corley' expirationDate: today.
aFundlessCreditCard _ CreditCard number: 1234567891234562 owner:'Enzo Vigneti' expirationDate: today.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:01:22'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:01:22'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:01:23'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 19:01:44' prior: 50899376!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!methodRemoval: MerchantProcessorSimulator class #cantProcessAnExpiredCreditCardErrorDescription stamp: 'E.V 6/14/2021 19:02:09'!
cantProcessAnExpiredCreditCardErrorDescription
	^ ' Disculpame hermano, se te re vencio la tarjeta. 	Aceptamos mercadopago si queres...'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 19:02:16' prior: 50899598!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	

	! !
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/14/2021 19:02:23' prior: 50897885!
raiseCantProcessAFundlessCreditCardError: aCreditCard 
! !
!Cashier class methodsFor: 'error' stamp: 'E.V 6/14/2021 19:03:01'!
cantProcessAnExpiredCreditCardErrorDescription
	^ ' La proxima que vayas a hacer compras y no lleves nada no salgas de tu casa pap�, no ves que estamos en pandemia?!!?!!?!!?!!? '! !
!Cashier class methodsFor: 'error' stamp: 'E.V 6/14/2021 19:07:52' prior: 50899650!
cantProcessAnExpiredCreditCardErrorDescription
	^ 'Che amigo esta tarjeta esta mas vencida que las manaos de uva que tengo en el almacen'! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:08:07'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:08:07'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:08:07'!
FAILURE!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:08:47'!
FAILURE!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:08:47'!
FAILURE!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:09:29'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 19:09:54' prior: 50899626!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today.
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:09:56'!
FAILURE!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:09:56'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 19:10:03' prior: 50899743!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	.
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	

	! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/14/2021 19:10:30' prior: 50899053!
raiseErrorIF: aCreditCard IsExpiredOn: aDate

	 (aCreditCard isExpiredOn:aDate) ifTrue:[ self error: self class cantCheckOutAEmptyCartErrorDescription ]! !
!Cashier methodsFor: 'processing' stamp: 'E.V 6/14/2021 19:10:48' prior: 50899793!
raiseErrorIF: aCreditCard IsExpiredOn: aDate

	 (aCreditCard isExpiredOn:aDate) ifTrue:[ self error: self class cantProcessAnExpiredCreditCardErrorDescription ]! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:11:27' prior: 50899068!
isExpiredOn: aDate
	^ expirationDate < aDate! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 19:11:34' prior: 50899773!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:11:35'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 19:11:35'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:11:35'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:11:35'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:11:35'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:11:35'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 19:11:35'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:11:35'!
PASSED!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:13:06' prior: 50899319!
number: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
	
	aCreditCardNumber digitLength 	= 16.
		
		
	 ^self new initializeWithNumber: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
! !

1234567891234567 digitLength = 16 !

1234567891234567 digitLength !
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 19:18:09' prior: 50899506 overrides: 16927572!
setUp
today _ FixedGregorianDate today.
yesterday _ FixedGregorianDate yesterday .
aValidCreditCard _ CreditCard number: '1234567891234567' owner:'Santiago Corley' expirationDate: today.
anExpiredCreditCard _ CreditCard number: '1234567891234568' owner:'Enzo Vigneti' expirationDate: yesterday.
aStolenCreditCard _ CreditCard number: '1234567891234569' owner:'Santiago Corley' expirationDate: today.
aFakeCreditCard  _ CreditCard number: '1234567891234561' owner:'Santiago Corley' expirationDate: today.
aFundlessCreditCard _ CreditCard number: '1234567891234562' owner:'Enzo Vigneti' expirationDate: today.
aMerchantProcessorSimulation _ MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:20:40' prior: 50899867!
number: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
	
	aCreditCardNumber length = 16 ifTrue:[self error: self invalidData].
	(aName ~= '' or: aName isAllWhite) ifTrue:[self error: self invalidData].
		
		
	 ^self new initializeWithNumber: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
! !

'                 ' isAllWhite !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:22:16' prior: 50899908!
number: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
	
	aCreditCardNumber length = 16 ifTrue:[self error: self invalidData].
	(aName ~= '' or: (aName occurrencesOf: ' ' = aName length)) ifTrue:[self error: self invalidData].
		
		
	 ^self new initializeWithNumber: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:23:39'!
xxxx: aName
	aName ~= '' ifTrue: [self error: self invalidData].
 	(aName occurrencesOf: ' ' = aName length) ifTrue:[self error: self invalidData].! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:24:25'!
raiseErrorIfIsInvalidName: aName
	aName ~= '' ifTrue: [self error: self invalidData].
 	(aName occurrencesOf: ' ' = aName length) ifTrue:[self error: self invalidData].! !

!methodRemoval: CreditCard class #xxxx: stamp: 'E.V 6/14/2021 19:24:25'!
xxxx: aName
	aName ~= '' ifTrue: [self error: self invalidData].
 	(aName occurrencesOf: ' ' = aName length) ifTrue:[self error: self invalidData].!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:25:06' prior: 50899923!
number: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
	
	aCreditCardNumber length = 16 ifTrue:[self error: self invalidData].
	self raiseErrorIfIsInvalidName: aName.
		
		
	 ^self new initializeWithNumber: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:25:26'!
invalidData
! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:25:45' prior: 50899961!
number: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
	
	
	self raiseErrorIfIsInvalidName: aName.
		
		
	 ^self new initializeWithNumber: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:26:10'!
raiseErrorIfIsInvalidNumber: aCreditCardNumber
	aCreditCardNumber length = 16 ifTrue:[self error: self invalidData].! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:26:16' prior: 50899987!
raiseErrorIfIsInvalidNumber: aCreditCardNumber
	aCreditCardNumber length ~= 16 ifTrue:[self error: self invalidData].! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:26:38' prior: 50899973!
invalidData
	^'Datos de creacion de tarjeta invalidos'
! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:26:52'!
invalidDataErrorDescription
	^'Datos de creacion de tarjeta invalidos'
! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:26:53' prior: 50899994!
raiseErrorIfIsInvalidNumber: aCreditCardNumber
	aCreditCardNumber length ~= 16 ifTrue:[self error: self invalidDataErrorDescription].! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:26:53' prior: 50899945!
raiseErrorIfIsInvalidName: aName
	aName ~= '' ifTrue: [self error: self invalidDataErrorDescription].
 	(aName occurrencesOf: ' ' = aName length) ifTrue:[self error: self invalidDataErrorDescription].! !

!methodRemoval: CreditCard class #invalidData stamp: 'E.V 6/14/2021 19:26:53'!
invalidData
	^'Datos de creacion de tarjeta invalidos'
!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:27:55' prior: 50899977!
number: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
	
	
	self raiseErrorIfIsInvalidName: aName.
	self raiseErrorIfIsInvalidNumber: aCreditCardNumber .	
		
	 ^self new initializeWithNumber: aCreditCardNumber owner:aName expirationDate: anExpirationDate.
! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:28:05' prior: 50900020!
raiseErrorIfIsInvalidName: aName
	aName = '' ifTrue: [self error: self invalidDataErrorDescription].
 	(aName occurrencesOf: ' ' = aName length) ifTrue:[self error: self invalidDataErrorDescription].! !

'hola' size !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:28:55' prior: 50900046!
raiseErrorIfIsInvalidName: aName
	aName = '' ifTrue: [self error: self invalidDataErrorDescription].
 	(aName occurrencesOf: ' ' = aName size) ifTrue:[self error: self invalidDataErrorDescription].! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:29:38' prior: 50900056!
raiseErrorIfIsInvalidName: aName
	aName = '' ifTrue: [self error: self invalidDataErrorDescription].
 	((aName occurrencesOf: ' ') = aName size) ifTrue:[self error: self invalidDataErrorDescription].! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'E.V 6/14/2021 19:29:49' prior: 50900012!
raiseErrorIfIsInvalidNumber: aCreditCardNumber
	aCreditCardNumber size ~= 16 ifTrue:[self error: self invalidDataErrorDescription].! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:29:50'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 19:29:50'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 19:29:50'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 19:29:50'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 19:29:50'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 19:29:50'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 19:29:50'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 19:29:51'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 19:29:51'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 19:29:51'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:29:51'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:29:51'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:29:51'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:29:51'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 19:29:51'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:29:51'!
PASSED!

!methodRemoval: MerchantProcessorSimulator #raiseCantProcessAnExpiredCreditCardError: stamp: 'E.V 6/14/2021 19:30:09'!
raiseCantProcessAnExpiredCreditCardError: aCreditCard 
	fundlessCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAFundlessCreditCardErrorDescription ]!
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'E.V 6/14/2021 19:30:14' prior: 50898494!
processPurchaseFor: aTotalPrice payingWith: aCreditCard 
	self raiseCantProcessAFundlessCreditCardError: aCreditCard.
	self raiseCantProcessAStolenCreditCardError: aCreditCard.
	self raiseCantProcessAFakeCreditCardError: aCreditCard ! !

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:30:22'!
FAILURE!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:30:22'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:30:22'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/14/2021 19:31:02' prior: 50899646!
raiseCantProcessAFundlessCreditCardError: aCreditCard 

anExpiredCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAnExpiredCreditCardErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/14/2021 19:31:15' prior: 50900229!
raiseCantProcessAFundlessCreditCardError: aCreditCard 

anExpiredCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAFundlessCreditCardErrorDescription ]! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:31:19'!
FAILURE!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:31:19'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:31:19'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 19:31:46'!
test05CheckingOutACartWithAFundlessCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	! !

!methodRemoval: CashierTest #test05CheckingOutACartWithAFoundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:31:46'!
test05CheckingOutACartWithAFoundlessCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:31:48'!
FAILURE!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:31:48'!
FAILURE!
!Xxxxxx methodsFor: 'setUp/tearDown' stamp: 'E.V 6/14/2021 19:32:46' prior: 50899880 overrides: 16927572!
setUp
today _ FixedGregorianDate today.
yesterday _ FixedGregorianDate yesterday .

aValidCreditCard _ CreditCard number: '1234567891234567' owner:'Santiago Corley' expirationDate: today.
anExpiredCreditCard _ CreditCard number: '1234567891234568' owner:'Enzo Vigneti' expirationDate: yesterday.
aStolenCreditCard _ CreditCard number: '1234567891234569' owner:'Santiago Corley' expirationDate: today.
aFakeCreditCard  _ CreditCard number: '1234567891234561' owner:'Santiago Corley' expirationDate: today.
aFundlessCreditCard _ CreditCard number: '1234567891234562' owner:'Enzo Vigneti' expirationDate: today.

aMerchantProcessorSimulation _ MerchantProcessorSimulator new fundlessCard: aFundlessCreditCard; stolenCard:aStolenCreditCard; fakeCard: aFakeCreditCard.

aBookIsbn1  _ 'isbn1'.! !

!methodRemoval: Cashier #raiseCantProcessAnExpiredCreditCardErrorDescription: stamp: 'E.V 6/14/2021 19:33:12'!
raiseCantProcessAnExpiredCreditCardErrorDescription: aCreditCard
	[merchantProcessor isExpired:aCreditCard]  ifTrue: [self error: self class cantCheckOutAEmptyCartErrorDescription] .!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 19:33:43' prior: 50900310!
test05CheckingOutACartWithAFundlessCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	aCashier checkOut: aCart payingWith:aFundlessCreditCard On:  today.
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:33:44'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'error' stamp: 'E.V 6/14/2021 19:34:16' prior: 50900238!
raiseCantProcessAFundlessCreditCardError: aCreditCard 

fundlessCreditCard = aCreditCard ifTrue:[self error: self class cantProcessAFundlessCreditCardErrorDescription ]! !

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:24'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 19:34:35' prior: 50900397!
test05CheckingOutACartWithAFundlessCreditCardRaisesError
	|aCart aCashier aCatalog aBook |
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ aCashier checkOut: aCart payingWith:aFundlessCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	

	! !

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:35'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 19:34:35'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:34:35'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:34:35'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:34:35'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:35'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:36'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:36'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:39'!
PASSED!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ' fundlessCreditCard aStolenCreditCard aFakeCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'E.V 6/14/2021 19:34:47'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'fundlessCreditCard aStolenCreditCard aFakeCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:52'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 19:34:52'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 19:34:52'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 19:34:52'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 19:34:52'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 19:34:52'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 19:34:52'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 19:34:53'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 19:34:53'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 19:34:53'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:34:53'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 19:34:53'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 19:34:53'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:53'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:53'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 19:34:53'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/14/2021 20:44:55'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: 'salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:44:53' prior: 50899344!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier|
	salesBook _ OrderedCollection new.
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:45:38' prior: 50900631!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier|
	
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !

Xxxxxx subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'E.V 6/14/2021 20:45:45'!
Xxxxxx subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:46:09' prior: 50900648!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier salesBook |
	salesBook _ OrderedCollection new.
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription]
	
	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:47:40' prior: 50900675!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier salesBook |
	salesBook _ OrderedCollection new.
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	
	self should:[aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription].
	
	self assert: salesBook size equals: 0.! !

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:47:41'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:47:41'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:47:41'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:47:41'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:47:41'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:47:41'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:47:41'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:47:42'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:48:01' prior: 50900693!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier salesBook |
	salesBook _ OrderedCollection new.
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	
	self should:[salesBook add: aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription].
	
	self assert: salesBook size equals: 0.! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:48:05' prior: 50900742!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier salesBook |
	salesBook _ OrderedCollection new.
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	
	self should:[salesBook add: (aCashier checkOut: aCart payingWith:aValidCreditCard On:  today).]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription].
	
	self assert: salesBook size equals: 0.! !

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:48:08'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:48:08'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:48:08'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:48:08'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:48:08'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:48:08'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:48:08'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:48:08'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:48:47' prior: 50899360!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal salesBook |
	
	salesBook _ OrderedCollection new.
	aCatalog _ Dictionary new.
	aCatalog add: aBookIsbn1 -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBook .

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.
	self assert: aTotal equals: 10.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:49:02' prior: 50900811!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aTotal salesBook |
	
	salesBook _ OrderedCollection new.
	aCatalog _ Dictionary new.
	aCatalog add: aBookIsbn1 -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBookIsbn1 .

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.
	self assert: aTotal equals: 10.

	! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:49:25'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:49:25'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:49:25'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:49:25'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:49:25'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:49:25'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:49:25'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:49:25'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:49:48' prior: 50900828!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aTotal salesBook |
	
	salesBook _ OrderedCollection new.
	aCatalog _ Dictionary new.
	aCatalog add: aBookIsbn1 -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBookIsbn1 .

	salesBook add: ( aCashier checkOut: aCart payingWith:aValidCreditCard On:  today).
	self assert: aTotal equals: 10.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:50:23' prior: 50900877!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog salesBook |
	
	salesBook _ OrderedCollection new.
	aCatalog _ Dictionary new.
	aCatalog add: aBookIsbn1 -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBookIsbn1 .

	salesBook add: ( aCashier checkOut: aCart payingWith:aValidCreditCard On:  today).
	self assert: salesBook includes: 10.
	self assert: salesBook size equals:1.

	! !

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:50:27'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:50:27'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:50:27'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:50:27'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:50:27'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:50:27'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:50:27'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:50:27'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:50:33' prior: 50900894!
test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog salesBook |
	
	salesBook _ OrderedCollection new.
	aCatalog _ Dictionary new.
	aCatalog add: aBookIsbn1 -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBookIsbn1 .

	salesBook add: ( aCashier checkOut: aCart payingWith:aValidCreditCard On:  today).
	
	self assert: salesBook includes: 10.
	self assert: salesBook size equals:1.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:50:54' prior: 50899327!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal salesBook |
	
	salesBook _ OrderedCollection new.
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBook.
	aCart add: aBook.

	aTotal _  aCashier checkOut: aCart payingWith:aValidCreditCard On:  today.
	self assert: aTotal equals: 20.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:51:20' prior: 50900963!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook aTotal salesBook |
	
	salesBook _ OrderedCollection new.
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBook.
	aCart add: aBook.

	salesBook add: (aCashier checkOut: aCart payingWith:aValidCreditCard On:  today).
	self assert: aTotal equals: 20.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:52:05' prior: 50900982!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog aBook salesBook |
	
	salesBook _ OrderedCollection new.
	aBook _ 'isbn1'.
	aCatalog _ Dictionary new.
	aCatalog add: aBook -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBook.
	aCart add: aBook.

	salesBook add: (aCashier checkOut: aCart payingWith:aValidCreditCard On:  today).
	self assert: salesBook includes: 20.
	self assert: salesBook size equals: 1.

	! !

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:52:08'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:52:08'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:52:09'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:52:09'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:52:09'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:52:09'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:52:09'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:52:09'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:52:21' prior: 50899815!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook salesBook |
	salesBook _ OrderedCollection new.	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	self should:[ aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:52:52' prior: 50901053!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook salesBook |
	salesBook _ OrderedCollection new.	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today) ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:53:10' prior: 50901074!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog aBook salesBook |
	salesBook _ OrderedCollection new.	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBook.
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today) ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	
	self assert: salesBook isEmpty .! !

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:53:13'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:53:13'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:53:13'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:53:13'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:53:13'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:53:13'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:53:13'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:53:13'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:53:52' prior: 50900436!
test05CheckingOutACartWithAFundlessCreditCardRaisesError
	|aCart aCashier aCatalog aBook salesBook |
	
	salesBook _ OrderedCollection new.
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aFundlessCreditCard On:  today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	
	self assert: salesBook isEmpty .
	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:55:04' prior: 50899266!
test06CheckingOutACartWithAStolenCreditCardRaisesError
	|aCart aCashier aCatalog aBook salesBook |
	
	salesBook _ OrderedCollection new.
	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aStolenCreditCard On: today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAStolenCreditCardErrorDescription].
	self assert: salesBook isEmpty .				
	

	! !

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:07'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:55:07'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:55:07'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:55:07'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:55:07'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:07'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:07'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:07'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:55:45' prior: 50899417!
test07CheckingOutACartWithAFakeCreditCardRaisesError
	|aCart aCashier aCatalog aBook salesBook |

	salesBook _ OrderedCollection new.	
	aBook _ 'isbn1'.
	aCatalog _ Dictionary with: aBook -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBook.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aFakeCreditCard On: today )]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFakeCreditCardErrorDescription].
					
	self assert: salesBook isEmpty .
	

	! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:48'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:55:48'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:55:48'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:55:48'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:55:48'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:48'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:48'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:48'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:51'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 20:55:51'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 20:55:51'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 20:55:51'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 20:55:51'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:55:52'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:55:59' prior: 50900761!
test01CheckingOutEmptyCartRaisesError
	|aCart aCashier salesBook |
	salesBook _ OrderedCollection new.
	aCart  _ Cart newWith:(OrderedCollection new).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	
	self should:[salesBook add: (aCashier checkOut: aCart payingWith:aValidCreditCard On:  today).]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError | self assert:  anError messageText equals:
									 Cashier cantCheckOutAEmptyCartErrorDescription].
	
	self assert: salesBook isEmpty ! !

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:56:01'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:56:01'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:56:01'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:56:01'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:56:01'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:56:01'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:56:01'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:56:01'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:56:46' prior: 50901096!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog salesBook |
	salesBook _ OrderedCollection new.	
	 
	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBookIsbn1.
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today) ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	
	self assert: salesBook isEmpty .! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:57:30' prior: 50901001!
test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice
	|aCart aCashier aCatalog salesBook |
	
	salesBook _ OrderedCollection new.
	
	aCatalog _ Dictionary new.
	aCatalog add: aBookIsbn1 -> 10.
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: MerchantProcessorSimulator new.
	
	aCart add: aBookIsbn1.
	aCart add: aBookIsbn1.

	salesBook add: (aCashier checkOut: aCart payingWith:aValidCreditCard On:  today).
	self assert: salesBook includes: 20.
	self assert: salesBook size equals: 1.

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:57:48' prior: 50901150!
test05CheckingOutACartWithAFundlessCreditCardRaisesError
	|aCart aCashier aCatalog salesBook |
	
	salesBook _ OrderedCollection new.
	
	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBookIsbn1.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aFundlessCreditCard On:  today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription].
	
	self assert: salesBook isEmpty .
	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:58:00' prior: 50901173!
test06CheckingOutACartWithAStolenCreditCardRaisesError
	|aCart aCashier aCatalog salesBook |
	
	salesBook _ OrderedCollection new.
	
	
	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBookIsbn1.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aStolenCreditCard On: today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAStolenCreditCardErrorDescription].
	self assert: salesBook isEmpty .				
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 20:58:11' prior: 50901227!
test07CheckingOutACartWithAFakeCreditCardRaisesError
	|aCart aCashier aCatalog salesBook |

	salesBook _ OrderedCollection new.	

	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBookIsbn1.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aFakeCreditCard On: today )]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFakeCreditCardErrorDescription].
					
	self assert: salesBook isEmpty .
	

	! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 20:58:14'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 20:58:15'!
PASSED!
!CashierTest methodsFor: 'aux' stamp: 'E.V 6/14/2021 21:01:15'!
xxxx:aCreditCard yyyy:aMerchantError
|aCart aCashier aCatalog salesBook |

	salesBook _ OrderedCollection new.	

	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBookIsbn1.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aFakeCreditCard On: today )]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						MerchantProcessorSimulator cantProcessAFakeCreditCardErrorDescription].
					
	self assert: salesBook isEmpty .
	! !
!CashierTest methodsFor: 'aux' stamp: 'E.V 6/14/2021 21:01:56' prior: 50901563!
xxxx:aCreditCard yyyy:aMerchantError
|aCart aCashier aCatalog salesBook |

	salesBook _ OrderedCollection new.	

	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBookIsbn1.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aCreditCard On: today )]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						aMerchantError ].
					
	self assert: salesBook isEmpty .
	! !
!CashierTest methodsFor: 'aux' stamp: 'E.V 6/14/2021 21:02:30'!
tryToCheckOutWith:aCreditCard andFailWithError:aMerchantError
|aCart aCashier aCatalog salesBook |

	salesBook _ OrderedCollection new.	

	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBookIsbn1.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aCreditCard On: today )]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						aMerchantError ].
					
	self assert: salesBook isEmpty .
	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 21:03:19' prior: 50901480!
test07CheckingOutACartWithAFakeCreditCardRaisesError


	self tryToCheckOutWith:aFakeCreditCard andFailWithError: MerchantProcessorSimulator cantProcessAFakeCreditCardErrorDescription 
	

	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 21:03:40' prior: 50901457!
test06CheckingOutACartWithAStolenCreditCardRaisesError

	self tryToCheckOutWith:aStolenCreditCard andFailWithError: MerchantProcessorSimulator cantProcessAStolenCreditCardErrorDescription 
	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 21:03:56' prior: 50901434!
test05CheckingOutACartWithAFundlessCreditCardRaisesError
	
	self tryToCheckOutWith:aFundlessCreditCard andFailWithError: MerchantProcessorSimulator cantProcessAFundlessCreditCardErrorDescription 
	! !
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 21:04:37'!
test04CheckingOutACartWithAnExpiredCreditCardRaisesError
	|aCart aCashier aCatalog salesBook |
	salesBook _ OrderedCollection new.	
	 
	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBookIsbn1.
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today) ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	
	self assert: salesBook isEmpty .! !

!methodRemoval: CashierTest #test04CheckingOutACartWithACreditCardWithoutCreditRaisesError stamp: 'E.V 6/14/2021 21:04:37'!
test04CheckingOutACartWithACreditCardWithoutCreditRaisesError
	|aCart aCashier aCatalog salesBook |
	salesBook _ OrderedCollection new.	
	 
	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation ).
	aCart add: aBookIsbn1.
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:anExpiredCreditCard On:  today) ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						Cashier cantProcessAnExpiredCreditCardErrorDescription].
	
	self assert: salesBook isEmpty .!
!CashierTest methodsFor: 'test' stamp: 'E.V 6/14/2021 21:05:05' prior: 50901653!
test04CheckingOutACartWithAnExpiredCreditCardRaisesError
	
	self tryToCheckOutWith:anExpiredCreditCard andFailWithError: Cashier cantProcessAnExpiredCreditCardErrorDescription 
	! !

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithAnExpiredCreditCardRaisesError stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 21:05:35'!
PASSED!
!CashierTest methodsFor: 'aux' stamp: 'E.V 6/14/2021 21:05:54' prior: 50901605!
tryToCheckOutWith:aCreditCard andFailWithError:anErrorDescription
|aCart aCashier aCatalog salesBook |

	salesBook _ OrderedCollection new.	

	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBookIsbn1.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aCreditCard On: today )]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						anErrorDescription ].
					
	self assert: salesBook isEmpty .
	! !

!methodRemoval: CashierTest #xxxx:yyyy: stamp: 'E.V 6/14/2021 21:05:57'!
xxxx:aCreditCard yyyy:aMerchantError
|aCart aCashier aCatalog salesBook |

	salesBook _ OrderedCollection new.	

	aCatalog _ Dictionary with: aBookIsbn1 -> 10 .
	aCart  _ Cart newWith:(aCatalog).
	aCashier _ Cashier newWith: (aMerchantProcessorSimulation).
	aCart add: aBookIsbn1.
	
	
	self should:[ salesBook add: (aCashier checkOut: aCart payingWith:aCreditCard On: today )]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError | self assert: anError messageText equals: 
						aMerchantError ].
					
	self assert: salesBook isEmpty .
	!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CashierTest #test01CheckingOutEmptyCartRaisesError stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CashierTest #test02CheckingOutACartWithOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CashierTest #test03CheckingOutACartWithMultipleCopiesOfOneItemReturnsATotalEqualToTheItemPrice stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CashierTest #test04CheckingOutACartWithAnExpiredCreditCardRaisesError stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CashierTest #test05CheckingOutACartWithAFundlessCreditCardRaisesError stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CashierTest #test06CheckingOutACartWithAStolenCreditCardRaisesError stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

!testRun: #CashierTest #test07CheckingOutACartWithAFakeCreditCardRaisesError stamp: 'E.V 6/14/2021 21:06:02'!
PASSED!

----QUIT----(14 June 2021 21:07:01) CuisUniversity-4532.image priorSource: 18140133!