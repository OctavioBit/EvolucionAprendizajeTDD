
----STARTUP---- (10 June 2021 19:02:19) as /home/lbiglieri/Downloads/build/CuisUniversity/libros2/CuisUniversity-4532.image!


----End fileIn of /home/lbiglieri/Downloads/build/CuisUniversity/libros2/TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'LB 6/10/2021 19:43:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'LB 6/10/2021 19:47:29'!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 19:47:35'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 19:47:41'!
createCart

	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 19:50:17'!
test01CheckoutOfEmptyCartShouldRaiseError
	
	self should: [self createCart checkout] 
		raise: Error-MessageNotUnderstood 
		withMessageText: Cart errorCantCheckoutEmptyCart.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 19:51:32' prior: 50859552!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart|
	cart := self createCart.
	self should: [cart checkout] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage].! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 19:51:34'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 19:51:56' prior: 50859561!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart|
	cart := self createCart.
	self should: [cart checkout] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart cantCheckoutEmptyCartError].! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 19:51:59'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 19:52:10'!
checkout
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 19:53:16' prior: 50859590!
checkout
	^self error: self cantCheckoutEmptyCartError.! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 19:53:21'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 19:53:28'!
cantCheckoutEmptyCartError
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 19:53:58' prior: 50859602!
cantCheckoutEmptyCartError
	^'Error: Cant checkout empty cart.'! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 19:53:59'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 19:53:59'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 19:54:02'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 19:54:02'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 19:57:47'!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart|
	cart := self createCart.
	cart add: self itemSellByTheStore.
	self should: [cart checkout] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart cantCheckoutEmptyCartError].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:03:04' prior: 50859625!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart total|
	cart := self createCart.
	cart add: self itemSellByTheStore.
	
	total := cart checkout.
	
	self assert: total equals: (self priceList at: self itemSellByTheStore).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:04:28' prior: 50859638!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart total|
	cart := self createCart.
	cart add: self itemSellByTheStore.
	
	total := cart checkout.
	
	self assert: total equals: (self itemSellByTheStorePrice).! !
!CashierTest methodsFor: 'support' stamp: 'LB 6/10/2021 20:04:42'!
itemSellByTheStorePrice
	
	^ 50! !

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:05:21'!
ERROR!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:05:50'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:06:38' prior: 50859594!
checkout
	(self isEmpty) ifTrue: [^self error: self cantCheckoutEmptyCartError].
	
	^50! !

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:06:39'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:06:39'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:06:39'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:07:29'!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart total|
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	total := cart checkout.
	
	self assert: total equals: (self itemSellByTheStorePrice).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:08:37' prior: 50859685!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart total expectedTotal|
	cart := self createCart.
	cart add: 2 of: self itemSellByTheStore.
	cart add: self item2SellByTheStore.
	
	total := cart checkout.
	expectedTotal := self itemSellByTheStorePrice * 2 + self item2SellByTheStorePrice.
	
	self assert: total equals: (self itemSellByTheStorePrice).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:08:46' prior: 50859696!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart total expectedTotal|
	cart := self createCart.
	cart add: 2 of: self itemSellByTheStore.
	cart add: self item2SellByTheStore.
	
	total := cart checkout.
	expectedTotal := self itemSellByTheStorePrice * 2 + self item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:08:49'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'LB 6/10/2021 20:08:59'!
item2SellByTheStore
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'LB 6/10/2021 20:09:31' prior: 50859728!
item2SellByTheStore
	^'El libro de bruno'.! !

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:09:32'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'LB 6/10/2021 20:09:52'!
item2SellByTheStorePrice
	^20! !

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:09:56'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'LB 6/10/2021 20:10:23' prior: 50859542!
defaultCatalog
	
	^ Array with: self itemSellByTheStore with: self item2SellByTheStore ! !

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:10:27'!
FAILURE!

!methodRemoval: CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:15:26'!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart total expectedTotal|
	cart := self createCart.
	cart add: 2 of: self itemSellByTheStore.
	cart add: self item2SellByTheStore.
	
	total := cart checkout.
	expectedTotal := self itemSellByTheStorePrice * 2 + self item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.!

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LB 6/10/2021 20:15:36'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:16:54' prior: 50859576!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier|
	cart := self createCart.
	cashier := Cashier new.
	self should: [cart checkout] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart cantCheckoutEmptyCartError].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:17:04' prior: 50859783!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier|
	cart := self createCart.
	cashier := Cashier new.
	self should: [cashier checkout] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier cantCheckoutEmptyCartError].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:17:14' prior: 50859795!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier|
	cart := self createCart.
	cashier := Cashier new.
	self should: [cashier checkout: cart] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier cantCheckoutEmptyCartError].! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:17:17'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:17:22'!
checkout: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:17:31' prior: 50859823!
checkout: aCart 
	^aCart checkout! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:17:32'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:17:39'!
cantCheckoutEmptyCartError
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:17:56' prior: 50859835!
cantCheckoutEmptyCartError
	^'hola'! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:17:57'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:18:07' prior: 50859840!
cantCheckoutEmptyCartError
	^'Error: Cant checkout empty cart.'! !

!methodRemoval: Cart #cantCheckoutEmptyCartError stamp: 'LB 6/10/2021 20:18:14'!
cantCheckoutEmptyCartError
	^'Error: Cant checkout empty cart.'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:18:32' prior: 50859828!
checkout: aCart 
	(aCart isEmpty) ifTrue: [^self error: self cantCheckoutEmptyCartError].
	
	^50! !

!methodRemoval: Cart #checkout stamp: 'LB 6/10/2021 20:18:39'!
checkout
	(self isEmpty) ifTrue: [^self error: self cantCheckoutEmptyCartError].
	
	^50!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:18:49'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:18:51'!
ERROR!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:18:51'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:19:24' prior: 50859649!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart cashier total|
	cart := self createCart.
	cashier := self createCashier.
	cart add: self itemSellByTheStore.
	
	total := cashier checkout: cart.
	
	self assert: total equals: (self itemSellByTheStorePrice).! !
!CashierTest methodsFor: 'support' stamp: 'LB 6/10/2021 20:20:00'!
createCashier

	^Cashier with: self defaultCatalogWithPrices! !
!CashierTest methodsFor: 'support' stamp: 'LB 6/10/2021 20:20:16' prior: 50859891!
createCashier

	^Cashier with: self zzz! !
!CashierTest methodsFor: 'support' stamp: 'LB 6/10/2021 20:25:18'!
zzz
	| www |
	www := Dictionary new.
	www at: (self defaultCatalog first)					put: 50.
	www at: (self defaultCatalog second)					put: 20.
	^ www.! !

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:25:40'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:25:45'!
with: aDictionary 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:26:39' prior: 50859911!
with: aPriceAsociation
	self new initializeWith: aPriceAsociation.! !

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:26:40'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LB 6/10/2021 20:26:45'!
Object subclass: #Cashier
	instanceVariableNames: 'priceAsociation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'LB 6/10/2021 20:26:45'!
initializeWith: aPriceAsociation 
	self shouldBeImplemented.
	priceAsociation := aPriceAsociation.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LB 6/10/2021 20:26:59'!
Object subclass: #Cashier
	instanceVariableNames: 'priceAsociation prices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'LB 6/10/2021 20:26:57' prior: 50859931!
initializeWith: aPriceAsociation 
	prices := aPriceAsociation.! !

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:26:59'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:27:35' prior: 50859916!
with: aPriceAsociation
	^self new initializeWith: aPriceAsociation.! !

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:27:41'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:27:46'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/10/2021 20:27:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/10/2021 20:27:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/10/2021 20:27:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/10/2021 20:27:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/10/2021 20:27:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LB 6/10/2021 20:27:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/10/2021 20:27:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/10/2021 20:27:50'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:27:50'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:27:50'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:29:23'!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal|
	cart := self createCart.
	cashier := self createCashier.
	cart add: 2 of: self itemSellByTheStore.
	cart add: self item2SellByTheStore.
	
	total := cashier checkout: cart.
	expectedTotal := self itemSellByTheStorePrice * 2 + self item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:29:25'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:34:14' prior: 50859858!
checkout: aCart 
	(aCart isEmpty) ifTrue: [^self error: self cantCheckoutEmptyCartError].
	
	^ aCart items inject: 0 into: [:aTotal :anItem | prices at: anItem].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:34:21' prior: 50860016!
checkout: aCart 
	(aCart isEmpty) ifTrue: [^self error: self cantCheckoutEmptyCartError].
	
	^ aCart items inject: 0 into: [:aTotal :anItem | aTotal + prices at: anItem].! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:34:23'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:34:23'!
ERROR!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:34:23'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:34:34' prior: 50860024!
checkout: aCart 
	(aCart isEmpty) ifTrue: [^self error: self cantCheckoutEmptyCartError].
	
	^ aCart items inject: 0 into: [:aTotal :anItem | aTotal + prices at: anItem].! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:34:35'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:34:35'!
ERROR!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:34:35'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:34:45' prior: 50860043!
checkout: aCart 
	(aCart isEmpty) ifTrue: [^self error: self cantCheckoutEmptyCartError].
	
	^ aCart items inject: 0 into: [:aTotal :anItem | aTotal + (prices at: anItem)].! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:34:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:34:58'!
ERROR!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:34:58'!
ERROR!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:35:03'!
ERROR!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:35:03'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:35:07'!
items
	self shouldBeImplemented.
	^items! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:35:13' prior: 50860088!
items
	^items! !

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:35:17'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:35:19'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:35:19'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:35:19'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:35:19'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/10/2021 20:35:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/10/2021 20:35:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/10/2021 20:35:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/10/2021 20:35:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/10/2021 20:35:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LB 6/10/2021 20:35:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/10/2021 20:35:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/10/2021 20:35:21'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:35:21'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:35:21'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:35:21'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'LB 6/10/2021 20:48:36'!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := self createCart.
	cart add: 2 of: self itemSellByTheStore.
	cart add: self item2SellByTheStore.
	
	creditCard := Date today previous.
	cashier := self createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 20:48:41'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:48:51'!
checkout: aCart withCard: aDate 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:52:41' prior: 50860170!
checkout: aCart withCard: anExpirationDate 
	(Date today < anExpirationDate) ifTrue: [^ self error: self class expiredCreditCardErrorMessage].
	^self checkout: aCart.! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:52:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:52:44'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:52:44'!
PASSED!

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 20:52:44'!
FAILURE!

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 20:52:44'!
FAILURE!

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 20:52:49'!
FAILURE!

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 20:52:49'!
FAILURE!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:53:14'!
expiredCreditCardErrorMessage
	^'Error: credit card is expired'.! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:53:18'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:53:18'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:53:18'!
PASSED!

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 20:53:18'!
FAILURE!

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 20:53:18'!
FAILURE!

Date today previous !

Date today < Date today previous !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/10/2021 20:54:06' prior: 50860175!
checkout: aCart withCard: anExpirationDate 
	(Date today < anExpirationDate) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	^self checkout: aCart.! !

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 20:54:08'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 20:54:08'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 20:54:08'!
PASSED!

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 20:54:08'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'LB 6/10/2021 21:12:49'!
createCheckoutCart
	|checkoutCart|
	checkoutCart := self createCart.
	checkoutCart add: 2 of: self itemSellByTheStore.
	checkoutCart add: self item2SellByTheStore.
	^checkoutCart! !
!CashierTest methodsFor: 'tests' stamp: 'LB 6/10/2021 21:13:06' prior: 50859997!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	
	total := cashier checkout: cart.
	expectedTotal := self itemSellByTheStorePrice * 2 + self item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !
!CashierTest methodsFor: 'tests' stamp: 'LB 6/10/2021 21:13:17' prior: 50860150!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	creditCard := Date today previous.
	cashier := self createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 21:13:30'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 21:13:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 21:13:30'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 21:13:30'!
PASSED!

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 21:13:30'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/10/2021 21:15:05'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/10/2021 21:15:05'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/10/2021 21:15:05'!
PASSED!

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/10/2021 21:15:05'!
PASSED!

----QUIT----(10 June 2021 21:46:45) CuisUniversity-4532.image priorSource: 16885915!

----STARTUP---- (12 June 2021 10:34:26) as /home/lbiglieri/Downloads/build/CuisUniversity/libros2/CuisUniversity-4532.image!


!testRun: #CashierTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 10:37:47'!
PASSED!

!testRun: #CashierTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 10:37:47'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 10:37:47'!
PASSED!

!testRun: #CashierTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 10:37:47'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'LB 6/12/2021 10:40:18' prior: 50859900!
zzz
	| www |
	www := Dictionary new.
	www at: self itemSellByTheStore 	put: self itemSellByTheStorePrice .
	www at: self item2SellByTheStore 	put: self item2SellByTheStorePrice .
	^ www.! !
!Cart methodsFor: 'assertions' stamp: 'LB 6/12/2021 10:42:18' prior: 50859363!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 10:42:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 10:42:53'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 10:42:53'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 10:42:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 10:42:53'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 10:42:53'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 10:42:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 10:42:53'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'LB 6/12/2021 10:43:22' prior: 50860341!
zzz
	| www |
	www := Dictionary new.
	www at: self itemSellByTheStore 	put: self itemSellByTheStorePrice.
	www at: self item2SellByTheStore 	put: self item2SellByTheStorePrice.
	^ www.! !
!CartTest methodsFor: 'support' stamp: 'LB 6/12/2021 10:45:33' prior: 50859515!
defaultCatalog
	|catalog|
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore 	put: 50.
	^ catalog! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 10:45:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 10:45:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 10:45:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 10:45:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 10:45:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 10:45:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 10:45:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 10:45:36'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'LB 6/12/2021 10:46:18'!
item2SellByTheStore
	^'El libro de bruno'.! !
!CartTest methodsFor: 'support' stamp: 'LB 6/12/2021 10:46:29'!
item2SellByTheStorePrice
	^20! !
!CartTest methodsFor: 'support' stamp: 'LB 6/12/2021 10:46:34'!
itemSellByTheStorePrice
	^50! !
!CartTest methodsFor: 'support' stamp: 'LB 6/12/2021 10:46:58' prior: 50860391!
defaultCatalog
	|catalog|
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore 	put: self itemSellByTheStorePrice.
	catalog at: self item2SellByTheStore 	put: self item2SellByTheStorePrice.
	^ catalog! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 10:47:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 10:47:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 10:47:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 10:47:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 10:47:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 10:47:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 10:47:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 10:47:21'!
PASSED!
!CartTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 10:48:10'!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier|
	cart := self createCart.
	cashier := Cashier new.
	self should: [cashier checkout: cart] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier cantCheckoutEmptyCartError].! !
!CartTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 10:48:22'!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart cashier total|
	cart := self createCart.
	cashier := self createCashier.
	cart add: self itemSellByTheStore.
	
	total := cashier checkout: cart.
	
	self assert: total equals: (self itemSellByTheStorePrice).! !
!CartTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 10:48:28'!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	
	total := cashier checkout: cart.
	expectedTotal := self itemSellByTheStorePrice * 2 + self item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !
!CartTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 10:48:36'!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	creditCard := Date today previous.
	cashier := self createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !
!CartTest methodsFor: 'support' stamp: 'LB 6/12/2021 10:48:52'!
createCashier

	^Cashier new.! !
!CartTest methodsFor: 'support' stamp: 'LB 6/12/2021 10:49:09'!
createCheckoutCart
	|checkoutCart|
	checkoutCart := self createCart.
	checkoutCart add: 2 of: self itemSellByTheStore.
	checkoutCart add: self item2SellByTheStore.
	^checkoutCart! !

!methodRemoval: Cashier class #with: stamp: 'LB 6/12/2021 10:49:29'!
with: aPriceAsociation
	^self new initializeWith: aPriceAsociation.!

!methodRemoval: Cashier #initializeWith: stamp: 'LB 6/12/2021 10:49:36'!
initializeWith: aPriceAsociation 
	prices := aPriceAsociation.!

Object subclass: #Cashier
	instanceVariableNames: 'prices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LB 6/12/2021 10:49:45'!
Object subclass: #Cashier
	instanceVariableNames: 'prices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 10:51:00'!
catalog
	^catalog! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 10:51:28' prior: 50860062!
checkout: aCart 
	(aCart isEmpty) ifTrue: [^self error: self cantCheckoutEmptyCartError].
	
	^ aCart items inject: 0 into: [:aTotal :anItem | aTotal + (aCart catalog at: anItem)].! !

!testRun: #CartTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 10:51:35'!
PASSED!

!classRemoval: #CashierTest stamp: 'LB 6/12/2021 10:51:43'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #CartTest as: #TusLibrosTest stamp: 'LB 6/12/2021 10:51:57'!
Smalltalk renameClassNamed: #CartTest as: #TusLibrosTest!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 10:52:50' prior: 50860469!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier|
	cart := self createCart.
	cashier := self createCashier.
	self should: [cashier checkout: cart] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier cantCheckoutEmptyCartError].! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 10:53:03'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 10:53:03'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 10:54:35'!
checkout
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 10:54:44' prior: 50860555!
checkout: aCart 
	(aCart isEmpty) ifTrue: [^self error: self cantCheckoutEmptyCartError].
	
	^ aCart checkout.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 10:55:10' prior: 50860666!
checkout
	^items inject: 0 into: [:aTotal :anItem | aTotal + (catalog at: anItem)].
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 10:55:13'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 10:55:13'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 10:55:26' prior: 50860670!
checkout: aCart 
	^ aCart checkout.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 10:55:41' prior: 50860677!
checkout
	(self isEmpty) ifTrue: [^self error: self cantCheckoutEmptyCartError].
	^items inject: 0 into: [:aTotal :anItem | aTotal + (catalog at: anItem)].
	! !
!Cart class methodsFor: 'nil' stamp: 'LB 6/12/2021 10:56:13'!
cantCheckoutEmptyCartError
	^'Error: Cant checkout empty cart.'! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 10:56:27' prior: 50860613!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier|
	cart := self createCart.
	cashier := self createCashier.
	self should: [cashier checkout: cart] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 10:56:31'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 10:56:31'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 10:56:31'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 10:56:51' prior: 50860728!
checkout
	(self isEmpty) ifTrue: [^self error: self class cantCheckoutEmptyCartError].
	^items inject: 0 into: [:aTotal :anItem | aTotal + (catalog at: anItem)].
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 10:56:52'!
PASSED!

!methodRemoval: Cashier #cantCheckoutEmptyCartError stamp: 'LB 6/12/2021 10:56:58'!
cantCheckoutEmptyCartError
	^'Error: Cant checkout empty cart.'!

!methodRemoval: Cart #catalog stamp: 'LB 6/12/2021 10:57:06'!
catalog
	^catalog!

!methodRemoval: Cart #items stamp: 'LB 6/12/2021 10:57:11'!
items
	^items!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 10:57:14'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 10:57:14'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 10:57:56'!
checkoutTotal
	(self isEmpty) ifTrue: [^self error: self class cantCheckoutEmptyCartError].
	^items inject: 0 into: [:aTotal :anItem | aTotal + (catalog at: anItem)].
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 10:57:56' prior: 50860724!
checkout: aCart 
	^ aCart checkoutTotal.! !

!methodRemoval: Cart #checkout stamp: 'LB 6/12/2021 10:57:56'!
checkout
	(self isEmpty) ifTrue: [^self error: self class cantCheckoutEmptyCartError].
	^items inject: 0 into: [:aTotal :anItem | aTotal + (catalog at: anItem)].
	!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 10:58:03'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 10:58:03'!
PASSED!
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:03:29'!
createCreditCard
	
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:04:08' prior: 50860957!
createCreditCard
	
	^ Date today previous.
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:04:32' prior: 50860961!
createCreditCard
	
	^ Date today next.
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:04:43'!
createExpiredCreditCard
	
	^ Date today previous.
	! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 11:04:58' prior: 50860505!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	creditCard := self createExpiredCreditCard.
	cashier := self createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 11:05:36' prior: 50860740!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier creditCard|
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	self should: [cashier checkout: cart with: creditCard] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 11:05:56' prior: 50860990!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier creditCard|
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	self should: [cashier checkout: cart withCard: creditCard] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:05:57'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:05:57'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 11:06:29' prior: 50860481!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart cashier total creditCard|
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cart add: self itemSellByTheStore.
	total := cashier checkout: cart withCard: creditCard.
	
	self assert: total equals: (self itemSellByTheStorePrice).! !

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:06:31'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:06:31'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 11:07:00' prior: 50860492!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	total := cashier checkout: cart withCard: creditCard.
	expectedTotal := self itemSellByTheStorePrice * 2 + self item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:07:12'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:07:12'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:07:36' prior: 50860231!
checkout: aCart withCard: anExpirationDate 
	(Date today < anExpirationDate) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	^aCart checkoutTotal.! !

!methodRemoval: Cashier #checkout: stamp: 'LB 6/12/2021 11:07:39'!
checkout: aCart 
	^ aCart checkoutTotal.!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:07:41'!
PASSED!

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LB 6/12/2021 11:09:09'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:09:10'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:09:10'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 11:22:36'!
test05CreditCardWithInvalidNumberShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	creditCard := self createExpiredCreditCard.
	cashier := self createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier invalidCreditCardErrorMessage]
		! !

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:22:39'!
ERROR!
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:23:32'!
createInvalidNumberCreditCard
	
	^ Array with: 1234 with: Date today previous.
	! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 11:23:39' prior: 50861284!
test05CreditCardWithInvalidNumberShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	creditCard := self createInvalidNumberCreditCard.
	cashier := self createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier invalidCreditCardErrorMessage]
		! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:24:30' prior: 50861181!
checkout: aCart withCard: aCreditCard 
	(aCreditCard first size = 16) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	(Date today < aCreditCard second) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	^aCart checkoutTotal.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:24:37' prior: 50861324!
checkout: aCart withCard: aCreditCard 
	(aCreditCard first size = 16) ifFalse: [^ self error: self class invalidCreditCardErrorMessage].
	(Date today < aCreditCard second) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	^aCart checkoutTotal.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:24:47'!
invalidCreditCardErrorMessage
	^'Error: credit card number is invalid'.! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:24:58' prior: 50861302!
createInvalidNumberCreditCard
	
	^ Array with: '1234' with: Date today previous.
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:25:00'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:25:00'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:25:00'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:25:00'!
ERROR!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:25:00'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:25:00'!
ERROR!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:25:00'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:25:00'!
ERROR!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:25:00'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:25:00'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:25:00'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:25:00'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:25:00'!
PASSED!
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:25:44' prior: 50860966!
createCreditCard
	
	^ Array with: '1234567891234567' with: Date today next.
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:25:56' prior: 50860970!
createExpiredCreditCard
	
	^ Array with: '1234567891234567' with: Date today previous.
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:25:59'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:25:59'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 11:27:05'!
test06CreditCardWithInvalidNameShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	creditCard := self createInvalidNameCreditCard.
	cashier := self createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:27:23'!
createInvalidNameCreditCard
	
	^ Array with: '1234' with: Date today previous.
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:28:29' prior: 50861473!
createInvalidNameCreditCard
	
	^ Array with: '1234567891234567' with: Date today previous with: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:28:43' prior: 50861479!
createInvalidNameCreditCard
	
	^ Array with: '1234567891234567' with: Date today previous with: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:28:51'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:28:51'!
PASSED!
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:29:13' prior: 50861499!
createInvalidNameCreditCard
	
	^ Array with: '1234567891234567' with: Date today next with: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:29:20' prior: 50861352!
createInvalidNumberCreditCard
	
	^ Array with: '1234' with: Date today next.
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 11:29:24'!
FAILURE!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:29:24'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 11:29:24'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:30:01' prior: 50861336!
checkout: aCart withCard: aCreditCard 
	(aCreditCard first size = 16) ifFalse: [^ self error: self class invalidCreditCardErrorMessage].
	(Date today < aCreditCard second) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	(aCreditCard third size between: 1 and: 30) ifFalse: [^ self error: self class invalidCreditCardErrorMessage].
	^aCart checkoutTotal.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:30:02'!
FAILURE!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:30:02'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:30:02'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:30:02'!
ERROR!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:30:02'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:30:02'!
ERROR!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:30:02'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:30:02'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:30:02'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:30:02'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:30:02'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 11:30:02'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:30:02'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:30:02'!
PASSED!
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:30:24' prior: 50861587!
createInvalidNumberCreditCard
	
	^ Array with: '1234' with: Date today next with: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:30:28' prior: 50861408!
createExpiredCreditCard
	
	^ Array with: '1234567891234567' with: Date today previous with: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:30:32' prior: 50861402!
createCreditCard
	
	^ Array with: '1234567891234567' with: Date today next with: 'Roberto the Owner'
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:30:34'!
PASSED!

Date today month  !

Date today month < Date today month previous !

Date today month previous !

Date today month < (Date today month previous)  !

(Date today month previous) < (Date today month previous)!

Date today month index !

Date today month monthIndex !

Month month: '04' year: '21'!

Month month: 04 year: 21 !

04/21 !

Date year: 21 month: 04 day: 1 !

Month month: 04 year: 21 !

Month month: Date today month year: Date today year. !

Month month: (Date today month) year: (Date today year). !

Month month: (Date today month) year: (Date today year). !

Date today month !

Date today year !

Month month: (Date today month) year: (Date today year). !

Month month: month year: year. !

|month year|
month := Date today month.
year := Date today year.
Month month: month year: year. !

Date today year!

Date today year!

|month year|
month := Date today month.
year := Date today year.
Month month: month year: year. 
!

month := Date today month. !

Date today month. !

Date today month. !

month := Date today month monthIndex !

year := Date today year yearNumber !

|month year|
month := Date today month monthIndex.
year := Date today year yearNumber. 
Month month: month year: year. 
!

Date year: year month: month day: 1 !

Date today month !

(Date year: year month: month day: 1) < (Date year: year + 1 month: month day: 1) !

Object subclass: #CreditCardPlastic
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardPlastic category: 'TusLibros' stamp: 'LB 6/12/2021 11:50:34'!
Object subclass: #CreditCardPlastic
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #CreditCardPlastic as: #CreditCardData stamp: 'LB 6/12/2021 11:50:52'!
Smalltalk renameClassNamed: #CreditCardPlastic as: #CreditCardData!
!CreditCardData class methodsFor: 'no messages' stamp: 'LB 6/12/2021 11:52:15'!
withNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner

	^self new initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner! !

!classDefinition: #CreditCardData category: 'TusLibros' stamp: 'LB 6/12/2021 11:53:35'!
Object subclass: #CreditCardData
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardData category: 'TusLibros' stamp: 'LB 6/12/2021 11:53:37'!
Object subclass: #CreditCardData
	instanceVariableNames: 'number expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardData category: 'TusLibros' stamp: 'LB 6/12/2021 11:53:38'!
Object subclass: #CreditCardData
	instanceVariableNames: 'number expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardData methodsFor: 'no messages' stamp: 'LB 6/12/2021 11:53:31'!
initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	number := aNumberAsString.
	expiration := anExpirationDate.
	owner := anOwner.! !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:53:49' prior: 50861833!
withNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	
	^self new initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner! !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:54:47' prior: 50861873!
withNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	(aNumberAsString size = 16) ifFalse: [^ self error: self class invalidCreditCardErrorMessage].
	(anOwner size between: 1 and: 30) ifFalse: [^ self error: self class invalidCreditCardErrorMessage].
	^self new initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner! !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:54:49' prior: 50861883!
withNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	(aNumberAsString size = 16) ifFalse: [^ self error: self class invalidCreditCardErrorMessage].
	(anOwner size between: 1 and: 30) ifFalse: [^ self error: self class invalidCreditCardErrorMessage].
	
	^self new initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner! !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:55:07'!
invalidCreditCardErrorMessage
	^'Error: credit card number is invalid'.! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:55:40' prior: 50861720!
createCreditCard
	
	^ CreditCardData with: '1234567891234567' with: Date today next with: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:55:45' prior: 50861713!
createExpiredCreditCard
	
	^ CreditCardData with: '1234567891234567' with: Date today previous with: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:55:48' prior: 50861567!
createInvalidNameCreditCard
	
	^ CreditCardData with: '1234567891234567' with: Date today next with: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:55:51' prior: 50861707!
createInvalidNumberCreditCard
	
	^ CreditCardData with: '1234' with: Date today next with: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 11:56:01' prior: 50861308!
test05CreditCardWithInvalidNumberShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	creditCard := self createInvalidNumberCreditCard.
	cashier := self createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 11:56:06' prior: 50861458!
test06CreditCardWithInvalidNameShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	creditCard := self createInvalidNameCreditCard.
	cashier := self createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:56:37' prior: 50861919!
createCreditCard
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:56:48' prior: 50861926!
createExpiredCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today previous withOwner: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:57:10' prior: 50861933!
createInvalidNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 11:57:22' prior: 50861953!
createInvalidNumberCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	! !

!methodRemoval: Cashier class #invalidCreditCardErrorMessage stamp: 'LB 6/12/2021 11:57:46'!
invalidCreditCardErrorMessage
	^'Error: credit card number is invalid'.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:58:25' prior: 50861644!
checkout: aCart withCard: aCreditCard 
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	^aCart checkoutTotal.! !
!CreditCardData methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:58:45'!
expiration
	^expiration! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:58:49'!
ERROR!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 11:58:49'!
ERROR!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:58:49'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:59:01'!
ERROR!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:59:01'!
ERROR!
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:59:20' prior: 50861899!
withNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	(aNumberAsString size = 16) ifFalse: [^ self error: self invalidCreditCardErrorMessage].
	(anOwner size between: 1 and: 30) ifFalse: [^ self error: self invalidCreditCardErrorMessage].
	
	^self new initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner! !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 11:59:26' prior: 50861914!
invalidCreditCardErrorMessage
	^'Error: credit card is invalid'.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:59:30'!
ERROR!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 11:59:30'!
ERROR!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 11:59:30'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:59:38'!
ERROR!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 11:59:38'!
ERROR!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:00:38' prior: 50861960!
test05CreditCardWithInvalidNumberShouldRaiseError
	|creditCard|
	creditCard := self createInvalidNumberCreditCard.
	
	self should: [self createInvalidNumberCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:00:52' prior: 50862186!
test05CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [self createInvalidNumberCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:00:54'!
ERROR!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 12:00:54'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:00:54'!
ERROR!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:01:07'!
ERROR!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 12:01:07'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:01:07'!
ERROR!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:01:14'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:01:25' prior: 50861976!
test06CreditCardWithInvalidNameShouldRaiseError

	self should: [self createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 12:01:26'!
PASSED!

----SNAPSHOT----(12 June 2021 12:03:11) CuisUniversity-4532.image priorSource: 16917422!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:03:37'!
test07

		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:09:07' prior: 50862389!
test07
	|cart cashier total creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	total := cashier checkout: cart withCard: creditCard.
	
	self assert: (Association key: cart value: creditCard) equals: cashier purchases.
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:09:19' prior: 50862393!
test07
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	
	self assert: (Association key: cart value: creditCard) equals: cashier purchases.
		! !

!testRun: #TusLibrosTest #test07 stamp: 'LB 6/12/2021 12:09:20'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:09:26'!
purchases
	self shouldBeImplemented.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LB 6/12/2021 12:09:57'!
Object subclass: #Cashier
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:09:55' prior: 50862419!
purchases
	^purchases! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:10:45' prior: 50862041!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	
	purchases := Association key: aCart value: aCreditCard.
	^total! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:11:08' prior: 50862434!
checkout: aCart withCard: aCreditCard 
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases := Association key: aCart value: aCreditCard.
	
	^ aCart checkoutTotal.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test07 stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 12:11:09'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 12:11:09'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:12:28'!
test08
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	cashier checkout: cart withCard: creditCard.
	
	self assert: (Association key: cart value: creditCard) equals: cashier purchases first.
	self assert: (Association key: cart value: creditCard) equals: cashier purchases second.
		! !

!testRun: #TusLibrosTest #test08 stamp: 'LB 6/12/2021 12:12:30'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:12:47' prior: 50862445!
checkout: aCart withCard: aCreditCard 
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	
	^ aCart checkoutTotal.! !
!Cashier methodsFor: 'initialization' stamp: 'LB 6/12/2021 12:13:03' overrides: 16896425!
initialize
	purchases := OrderedCollection new.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test07 stamp: 'LB 6/12/2021 12:13:04'!
FAILURE!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test08 stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 12:13:04'!
PASSED!

!testRun: #TusLibrosTest #test07 stamp: 'LB 6/12/2021 12:13:04'!
FAILURE!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:13:24' prior: 50862405!
test07
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	
	self assert: (Association key: cart value: creditCard) equals: cashier purchases first.
		! !

!testRun: #TusLibrosTest #test07 stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test07 stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test08 stamp: 'LB 6/12/2021 12:13:26'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 12:13:26'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:15:16'!
hasRegistered: aPurchase
	^purchases includes: aPurchase! !

!methodRemoval: Cashier #purchases stamp: 'LB 6/12/2021 12:15:20'!
purchases
	^purchases!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:15:52' prior: 50862595!
test07
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:17:16' prior: 50862505!
test08
	|cart cart2 cashier creditCard|
	cart := self createCheckoutCart.
	cart2 := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	cashier checkout: cart2 withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		! !

!testRun: #TusLibrosTest #test08 stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test07 stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test08 stamp: 'LB 6/12/2021 12:17:16'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 12:17:16'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:18:34'!
test07CashierRegisteresASingleSell
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !

!methodRemoval: TusLibrosTest #test07 stamp: 'LB 6/12/2021 12:18:34'!
test07
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
		!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:18:49'!
test08CashierRegistersAllSells
	|cart cart2 cashier creditCard|
	cart := self createCheckoutCart.
	cart2 := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	cashier checkout: cart2 withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		! !

!methodRemoval: TusLibrosTest #test08 stamp: 'LB 6/12/2021 12:18:49'!
test08
	|cart cart2 cashier creditCard|
	cart := self createCheckoutCart.
	cart2 := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	cashier checkout: cart2 withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:18:56'!
test08CashierRegistersAllItsSells
	|cart cart2 cashier creditCard|
	cart := self createCheckoutCart.
	cart2 := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	cashier checkout: cart2 withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		! !

!methodRemoval: TusLibrosTest #test08CashierRegistersAllSells stamp: 'LB 6/12/2021 12:18:56'!
test08CashierRegistersAllSells
	|cart cart2 cashier creditCard|
	cart := self createCheckoutCart.
	cart2 := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	cashier checkout: cart2 withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:19:08'!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard|
	cart := self createCheckoutCart.
	cart2 := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	cashier checkout: cart2 withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		! !

!methodRemoval: TusLibrosTest #test08CashierRegistersAllItsSells stamp: 'LB 6/12/2021 12:19:08'!
test08CashierRegistersAllItsSells
	|cart cart2 cashier creditCard|
	cart := self createCheckoutCart.
	cart2 := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	cashier checkout: cart2 withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		!

----SNAPSHOT----(12 June 2021 12:19:19) CuisUniversity-4532.image priorSource: 16983525!

TestCase subclass: #TusLibrosTestsSupport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTestsSupport category: 'TusLibros' stamp: 'LB 6/12/2021 12:24:54'!
TestCase subclass: #TusLibrosTestsSupport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTestsSupport class methodsFor: 'no messages' stamp: 'LB 6/12/2021 12:25:37'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:25:47'!
createCashier

	^Cashier new.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:25:56'!
createCheckoutCart
	|checkoutCart|
	checkoutCart := self createCart.
	checkoutCart add: 2 of: self itemSellByTheStore.
	checkoutCart add: self item2SellByTheStore.
	^checkoutCart! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:26:04'!
createCreditCard
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:26:15'!
createExpiredCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today previous withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:26:27'!
createInvalidNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:26:35'!
createInvalidNumberCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:26:44'!
defaultCatalog
	|catalog|
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore 	put: self itemSellByTheStorePrice.
	catalog at: self item2SellByTheStore 	put: self item2SellByTheStorePrice.
	^ catalog! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:26:53'!
item2SellByTheStore
	^'El libro de bruno'.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:27:00'!
item2SellByTheStorePrice
	^20! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:27:10'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:27:18'!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:27:28'!
itemSellByTheStorePrice
	^50! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:35:16'!
test09CreditCardWithNoCreditShouldRaiseError
	|cart cart2 cashier creditCard|
	cart := self createCheckoutCart.
	cart2 := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:35:28' prior: 50862992!
test09CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 12:35:32' prior: 50863010!
test09CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].! !

!testRun: #TusLibrosTest #test09CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 12:35:32'!
ERROR!
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:35:43'!
createCreditCardWithNoCredit
	self shouldBeImplemented.! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/12/2021 12:36:20' prior: 50863046!
createCreditCardWithNoCredit
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'Soy una tarjeta sin credito'! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 12:39:04'!
PASSED!

!testRun: #TusLibrosTest #test09CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 12:39:04'!
FAILURE!

!testRun: #TusLibrosTest #test09CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 12:39:04'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 12:41:04' prior: 50862524!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	^total! !

----SNAPSHOT----(12 June 2021 12:41:16) CuisUniversity-4532.image priorSource: 16999344!

!testRun: #TusLibrosTest #test09CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 16:11:57'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 16:19:01' prior: 50863121!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	self validateTransactionWith: aCreditCard for: total.
	^total! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 16:36:42'!
validateTransactionWith: aCreditCard for: total
	self validateTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration owner: aCreditCard owner forAmount: total.! !

----STARTUP---- (12 June 2021 17:53:22) as /home/lbiglieri/Downloads/build/CuisUniversity/libros2/CuisUniversity-4532.image!

!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 16:19:01' prior: 50863121!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	self validateTransactionWith: aCreditCard for: total.
	^total! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 16:36:42'!
validateTransactionWith: aCreditCard for: total
	self validateTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration owner: aCreditCard owner forAmount: total.! !

!methodRemoval: Cashier #validateTransactionWith:for: stamp: 'LB 6/12/2021 17:58:32'!
validateTransactionWith: aCreditCard for: total
	self validateTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration owner: aCreditCard owner forAmount: total.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 17:58:38' prior: 50863165!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	^total! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 17:58:40'!
PASSED!

!testRun: #TusLibrosTest #test09CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 17:58:40'!
FAILURE!

!testRun: #TusLibrosTest #test09CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 17:58:40'!
FAILURE!

!methodRemoval: TusLibrosTest #test09CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 17:59:09'!
test09CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 18:01:12'!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	cashier2 := self createCashier.
	creditCard := self createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	
	self deny: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 18:01:25' prior: 50863284!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	cashier2 := self createCashier.
	creditCard := self createCreditCard.
	
	cashier2 checkout: cart withCard: creditCard.
	
	self deny: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 18:01:26'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:01:26'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:01:42' prior: 50862661!
hasRegistered: aPurchase
	^true! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 18:01:45'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:01:45'!
FAILURE!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:01:45'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:01:49' prior: 50863373!
hasRegistered: aPurchase
	^purchases includes: aPurchase! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 18:01:50'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:01:50'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 18:02:09'!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:03:46' prior: 50863196!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	(TusLibrosTestsSupport createCreditCardWithNoCredit = aCreditCard) ifTrue: [^self error: self class noCreditCreditCardErrorMessage]
	^total! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:03:59' prior: 50863516!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	(TusLibrosTestsSupport createCreditCardWithNoCredit = aCreditCard) ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage]
	^total! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:04:08'!
noCreditOnCreditCardErrorMessage
	^'Error: credit card has no credit'.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:04:12'!
ERROR!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 18:04:12'!
ERROR!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 18:04:12'!
ERROR!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 18:04:12'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 18:04:12'!
ERROR!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:04:12'!
ERROR!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 18:04:12'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:04:44' prior: 50863532!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	(TusLibrosTestsSupport createCreditCardWithNoCredit = aCreditCard) ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	^total! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:04:46'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 18:04:46'!
FAILURE!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 18:04:46'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:06:17' prior: 50863613!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	(aCreditCard owner = 'lalala') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	^total! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:06:34' prior: 50863693!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	(aCreditCard owner = 'Soy una tarjeta sin credito') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	^total! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:06:36'!
ERROR!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 18:06:36'!
ERROR!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 18:06:36'!
ERROR!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 18:06:36'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 18:06:36'!
ERROR!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:06:36'!
ERROR!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 18:06:36'!
ERROR!
!CreditCardData methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:07:03'!
owner
	^owner! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 18:07:07'!
PASSED!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'LB 6/12/2021 18:11:47'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/12/2021 18:11:41' prior: 50860519!
createCashier
	^Cashier with: MerchantProcessorSimulator new.! !
!MerchantProcessorSimulator methodsFor: 'no messages' stamp: 'LB 6/12/2021 18:25:40'!
makeTransactionWithCreditCardNumber: creditCardNumber expiration: creditCardExpiration name: creditCardName for: anAmount
	^'1|no credit on credit card'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:27:38' prior: 50863707!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	self processTransaccion
	^total! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LB 6/12/2021 18:28:11'!
Object subclass: #Cashier
	instanceVariableNames: 'purchases merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:28:20'!
processTransaccionWith: aCreditCard for: aTotal
	
	merchantProcessor makeTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration name: aCreditCard owner for: aTotal.
	(aCreditCard owner = 'Soy una tarjeta sin credito') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:28:31' prior: 50863867!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	self processTransaccionWith: aCreditCard for: total
	^total! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:28:33' prior: 50863899!
checkout: aCart withCard: aCreditCard 
	|total|
	(Date today < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	self processTransaccionWith: aCreditCard for: total.
	^total! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:29:10' prior: 50863886!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration name: aCreditCard owner for: aTotal.
	(response = 'Soy una tarjeta sin credito') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:29:27' prior: 50863925!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration name: aCreditCard owner for: aTotal.
	(response = '1|no credit on credit card') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:30:33'!
with: aMerchantProcessor
	^self new initializeWith: aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'LB 6/12/2021 18:30:56'!
initializeWith: aMerchantProcessor
	merchantProcessor := aMerchantProcessor.
	purchases := OrderedCollection new.! !

!methodRemoval: Cashier #initialize stamp: 'LB 6/12/2021 18:31:00'!
initialize
	purchases := OrderedCollection new.!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:31:02'!
ERROR!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 18:31:02'!
ERROR!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 18:31:02'!
ERROR!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 18:31:02'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 18:31:02'!
ERROR!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:31:02'!
ERROR!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 18:31:02'!
ERROR!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:31:14'!
ERROR!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:31:14'!
ERROR!
!CreditCardData methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:31:21'!
number
	self shouldBeImplemented.
	^number! !
!CreditCardData methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:31:25' prior: 50864035!
number
	^number! !

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:31:26'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:32:15' prior: 50863859!
makeTransactionWithCreditCardNumber: creditCardNumber expiration: creditCardExpiration name: creditCardName for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card']! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/12/2021 18:32:31' prior: 50863052!
createCreditCardWithNoCredit
	^ CreditCardData withNumber: '1111111111111111' withExpirationDate: Date today next withOwner: 'Soy una tarjeta sin credito'! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:32:33'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 18:32:33'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:40:08' prior: 50863939!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration name: aCreditCard owner for: aTotal.
	(response = '1|no credit on credit card') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 18:44:54'!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier stolenCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 18:45:04' prior: 50864140!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier stolenCreditCardErrorMessage].! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/12/2021 18:46:39'!
createStolenCreditCard
	
	^ CreditCardData withNumber: '2222222222222222' withExpirationDate: Date today previous withOwner: 'Roberto the thief'
	! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:47:47' prior: 50864048!
makeTransactionWithCreditCardNumber: creditCardNumber expiration: creditCardExpiration name: creditCardName for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|stolen credit card']! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:48:06' prior: 50864180!
makeTransactionWithCreditCardNumber: creditCardNumber expiration: creditCardExpiration name: creditCardName for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|stolen credit card']! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:48:31' prior: 50864127!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration name: aCreditCard owner for: aTotal.
	(response = '1|no credit on credit card') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	(response = '1|stolen credit card') ifTrue: [^self error: self class stolenCreditCardErrorMessage].! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 18:49:00'!
stolenCreditCardErrorMessage
	^'Error: stolen credit card'.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 18:56:21'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/12/2021 18:56:21'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 18:57:18'!
test12InvalidCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := TusLibrosTestsSupport createInvalidCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier invalidCreditCardErrorMessage].! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/12/2021 18:59:19'!
createFakeCreditCard
	
	^ CreditCardData withNumber: '3333333333333333' withExpirationDate: Date today previous withOwner: 'Roberto the scammer'
	! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/12/2021 18:59:34' prior: 50864291!
test12InvalidCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := self createCheckoutCart.
	cashier := self createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier fakeCreditCardErrorMessage].! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 19:00:01'!
fakeCreditCardErrorMessage
	^'Error: credit card does not exist'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 19:00:24' prior: 50864205!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration name: aCreditCard owner for: aTotal.
	(response = '1|no credit on credit card') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	(response = '1|stolen credit card') ifTrue: [^self error: self class stolenCreditCardErrorMessage].
	(response = '1|credit card does not exist') ifTrue: [^self error: self class stolenCreditCardErrorMessage].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 19:00:32' prior: 50864335!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration name: aCreditCard owner for: aTotal.
	(response = '1|no credit on credit card') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	(response = '1|stolen credit card') ifTrue: [^self error: self class stolenCreditCardErrorMessage].
	(response = '1|credit card does not exist') ifTrue: [^self error: self class fakeCreditCardErrorMessage].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 19:00:49' prior: 50864193!
makeTransactionWithCreditCardNumber: creditCardNumber expiration: creditCardExpiration name: creditCardName for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|stolen credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|credit card does not exist']
	! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 19:00:54' prior: 50864376!
makeTransactionWithCreditCardNumber: creditCardNumber expiration: creditCardExpiration name: creditCardName for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|stolen credit card'].
	(creditCardNumber = '3333333333333333') ifTrue: [^'1|credit card does not exist']
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:00:59'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:01:01'!
PASSED!

----SNAPSHOT----(12 June 2021 19:06:13) CuisUniversity-4532.image priorSource: 17007392!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:06:14'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:06:15'!
PASSED!
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/12/2021 19:07:19'!
test01CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [self createInvalidNumberCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !

!methodRemoval: TusLibrosTest #test05CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 19:07:20'!
test05CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [self createInvalidNumberCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		!
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/12/2021 19:07:26'!
test02CreditCardWithInvalidNameShouldRaiseError

	self should: [self createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !

!methodRemoval: TusLibrosTest #test06CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 19:07:26'!
test06CreditCardWithInvalidNameShouldRaiseError

	self should: [self createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		!
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/12/2021 19:08:47'!
test02CreditCardWithInvalidNameLongitudShouldRaiseError

	self should: [self createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !

!methodRemoval: TusLibrosTest #test02CreditCardWithInvalidNameShouldRaiseError stamp: 'LB 6/12/2021 19:08:47'!
test02CreditCardWithInvalidNameShouldRaiseError

	self should: [self createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		!
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/12/2021 19:11:32'!
test03CreditCardWithInvalidNameCharactersShouldRaiseError

	self should: [self createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]! !
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/12/2021 19:11:50' prior: 50864655!
test02CreditCardWithInvalidNameLongitudShouldRaiseError

	self should: [self createInvalidNameLongitudCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/12/2021 19:12:02'!
createInvalidNameLongitudCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/12/2021 19:12:48' prior: 50862929!
createInvalidNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'I am an invalid {name}'.
	! !
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/12/2021 19:13:24' prior: 50864611!
test01CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/12/2021 19:13:29' prior: 50864688!
test02CreditCardWithInvalidNameLongitudShouldRaiseError

	self should: [TusLibrosTestsSupport createInvalidNameLongitudCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/12/2021 19:13:32' prior: 50864677!
test03CreditCardWithInvalidNameCharactersShouldRaiseError

	self should: [TusLibrosTestsSupport createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]! !

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/12/2021 19:14:15'!
FAILURE!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/12/2021 19:14:15'!
FAILURE!
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 19:15:16' prior: 50862109!
withNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	(aNumberAsString size = 16) ifFalse: [^ self error: self invalidCreditCardErrorMessage].
	self validateOwner: anOwner.
	
	^self new initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner! !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 19:16:58'!
validateOwner: anOwner.
	(anOwner size between: 1 and: 30) ifFalse: [^ self error: self invalidCreditCardErrorMessage].
	anOwner do: [:aChar | 
		((aChar isLetter) or: [aChar = ' ']) ifFalse: [^ self error: self invalidCreditCardErrorMessage]]! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/12/2021 19:17:06'!
ERROR!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/12/2021 19:17:06'!
ERROR!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/12/2021 19:17:06'!
ERROR!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:17:06'!
ERROR!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/12/2021 19:17:06'!
ERROR!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/12/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/12/2021 19:17:06'!
ERROR!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/12/2021 19:17:06'!
ERROR!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/12/2021 19:17:06'!
ERROR!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:17:06'!
ERROR!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/12/2021 19:17:06'!
ERROR!

'hola' do: [:aChar | (aChar isLetter) ifTrue: [^'lala']]!

'hola ' do: [:aChar | (aChar isLetter) ifTrue: [^'lala']]!

'hola hola' do: [:aChar | (aChar isLetter) ifTrue: [^'lala']]!

'hola hola' do: [:aChar | (aChar isLetter) ifTrue: [^'lalao']] !

' hola hola' do: [:aChar | (aChar isLetter) ifTrue: [^'lalao']]!

' hola hola' do: [:aChar | (aChar isLetter) ifFalse: [^'lalao']] !

'hola hola' do: [:aChar | (aChar isLetter) ifFalse: [^'lalao']] !

'hola hola' do: [:aChar | (aChar isLetter) ifFalse: [^'lalao']] !

'hola hola' do: [:aChar | (aChar isLetter) ifFalse: [^'lalao']] !

'hola hola' do: [:aChar | (aChar isLetter) ifFalse: [^'lalao']] !

'hola hola' do: [:aChar | (aChar isLetter) ifFalse: [^'lalao']] !

'hola hola' do: [:aChar | (aChar isLetter) ifFalse: [^'lalao']] !

 'lalao' !

'holahola' do: [:aChar | (aChar isLetter) ifFalse: [^'lalao']]!

'holahola' do: [:aChar | ((aChar isLetter) or: [aChar = ' ']) ifFalse: [^'lalao']] !

'hola hola' do: [:aChar | ((aChar isLetter) or: [aChar = ' ']) ifFalse: [^'lalao']] !

' hola hola' do: [:aChar | ((aChar isLetter) or: [aChar = ' ']) ifFalse: [^'lalao']] !

' hola .hola' do: [:aChar | ((aChar isLetter) or: [aChar = ' ']) ifFalse: [^'lalao']] !

' hola hola' do: [:aChar | ((aChar isLetter) or: [aChar = ' ']) ifFalse: [^'lalao']]!

' hola hola' do: [:aChar | ((aChar isLetter) or: [aChar = ' ' asCharacterSet ]) ifFalse: [^'lalao']]!

' hola hola' do: [:aChar | ((aChar isLetter) or: [aChar = (' ' asCharacterSet) ]) ifFalse: [^'lalao']]!
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/12/2021 19:22:24' prior: 50864786!
validateOwner: anOwner.
	(anOwner size between: 1 and: 30) ifFalse: [^ self error: self invalidCreditCardErrorMessage].! !

----QUIT----(12 June 2021 19:22:33) CuisUniversity-4532.image priorSource: 17052461!

----STARTUP---- (13 June 2021 11:27:27) as /home/lbiglieri/Downloads/build/CuisUniversity/libros2/CuisUniversity-4532.image!


----End fileIn of /home/lbiglieri/Downloads/build/CuisUniversity/libros2/Bruno-Helper.st----!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 11:30:27'!
FAILURE!

'hola hola' do: [:aChar | ((aChar isLetter) or: [aChar asString = ' ']) ifFalse: [^'holi']] !

'holahola' do: [:aChar | ((aChar isLetter) or: [aChar asString = ' ']) ifFalse: [^'holi']] !

'holaho}la' do: [:aChar | ((aChar isLetter) or: [aChar asString = ' ']) ifFalse: [^'holi']] !

'h olaho}la' do: [:aChar | ((aChar isLetter) or: [aChar asString = ' ']) ifFalse: [^'holi']]!

'h olahola' do: [:aChar | ((aChar isLetter) or: [aChar asString = ' ']) ifFalse: [^'holi']]!

'h olahola' do: [:aChar | ((aChar isLetter) or: [aChar asString = ' '])] !

'h olahola' do: [:aChar | ((aChar isLetter) or: [aChar asString = ' '])] !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:37:30' prior: 50864916!
validateOwner: anOwner.
	(anOwner size between: 1 and: 30) ifFalse: [^ self error: self invalidCreditCardErrorMessage].
	anOwner do: [:aChar | ((aChar isLetter) or: [aChar asString = ' ']) ifFalse: [^ self error: self invalidCreditCardErrorMessage]]! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:37:32'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:37:32'!
PASSED!
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/13/2021 11:39:43'!
createInvalidNumberLongitudCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'support' stamp: 'LB 6/13/2021 11:39:43'!
createInvalidNumberLongitudCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:39:43' prior: 50864729!
test01CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberLongitudCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !

!methodRemoval: TusLibrosTestsSupport class #createInvalidNumberCreditCard stamp: 'LB 6/13/2021 11:39:43'!
createInvalidNumberCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	!

!methodRemoval: TusLibrosTest #createInvalidNumberCreditCard stamp: 'LB 6/13/2021 11:39:43'!
createInvalidNumberCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	!
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/13/2021 11:40:13'!
test01CreditCardWithInvalidNumberLongitudShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberLongitudCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !

!methodRemoval: TusLibrosTest #test01CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 11:40:13'!
test01CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberLongitudCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		!
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/13/2021 11:40:36'!
test04CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 11:40:38'!
ERROR!
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/13/2021 11:41:26'!
createInvalidNumberCreditCard
	
	^ CreditCardData withNumber: '1234abcd1234[]{}' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 11:41:28'!
FAILURE!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:41:28'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 11:41:28'!
FAILURE!
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:41:49' prior: 50864773!
withNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	self validateNumber: aNumberAsString.
	self validateOwner: anOwner.
	
	^self new initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner! !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:42:05'!
validateNumber: aNumberAsString.
	(aNumberAsString size = 16) ifFalse: [^ self error: self invalidCreditCardErrorMessage].
	! !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:42:36' prior: 50865290!
validateNumber: aNumberAsString.
	(aNumberAsString size = 16) ifFalse: [^ self error: self invalidCreditCardErrorMessage].
	aNumberAsString do: [:aChar | (aChar isDigit) ifFalse: [^ self error: self invalidCreditCardErrorMessage]]
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:42:38'!
PASSED!

GregorianMonthOfYear new!

GregorianMonthOfYear current !

GregorianMonthOfYear nextMonth: (GregorianMonthOfYear current ) !

|today lastMonth nextMonth|
today := GregorianMonthOfYear current.
lastMonth := today nextMonth: (today month)!

today := GregorianMonthOfYear current. !

GregorianYear oneYear!

|today lastYear nextYear|
today := GregorianMonthOfYear current.
nextYear := today nextMonth: (today month).
lastYear := today previousMonth: (today month)!

nextYear := today nextMonth: (today month). !

today := GregorianMonthOfYear current. !

GregorianMonthOfYear current nextMonth: (today month).!

GregorianMonthOfYear current nextMonth: (GregorianMonthOfYear current month).!

today !
!TusLibrosTestsSupport class methodsFor: 'date' stamp: 'LB 6/13/2021 11:50:31'!
today
	^GregorianMonthOfYear current.! !
!TusLibrosTestsSupport class methodsFor: 'date' stamp: 'LB 6/13/2021 11:51:01'!
nextYear
	^self today nextMonth: (self today month).! !
!TusLibrosTestsSupport class methodsFor: 'date' stamp: 'LB 6/13/2021 11:51:16'!
lastYear
	^self today previousMonth: (self today month).! !

(MethodArgumentChanger for: TusLibrosTestsSupport) renameOnEveryMethod: 'Date today next' to: 'self nextYear'!

TusLibrosTestsSupport selectors!

TusLibrosTestsSupport selectorsClasses !

TusLibrosTestsSupport class selectors !

TusLibrosTestsSupport class selectors !

TusLibrosTestsSupport compiledMethodAt: #createStolenCreditCard!

TusLibrosTestsSupport compiledMethodAt: 'createStolenCreditCard'!

TusLibrosTestsSupport class compiledMethodAt: #createStolenCreditCard!
!MethodArgumentChanger methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:57:54'!
renameOnEveryClassMethod: anOldArgumentName to: aNewArgumentName
	|selectors|
	selectors := class class selectors.
 	selectors do: [:selector ||sourceCode | 
 			sourceCode _ (class class compiledMethodAt: selector) sourceCode.
 			sourceCode _ sourceCode copyReplaceAll: anOldArgumentName with: aNewArgumentName.
 			class class compile: sourceCode].

	^selectors! !

(MethodArgumentChanger for: TusLibrosTestsSupport) renameOnEveryClassMethod: 'Date today next' to: 'self nextYear'!
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50864171!
createStolenCreditCard
	
	^ CreditCardData withNumber: '2222222222222222' withExpirationDate: Date today previous withOwner: 'Roberto the thief'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862913!
createCreditCard
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50865191!
createInvalidNumberCreditCard
	
	^ CreditCardData withNumber: '1234abcd1234[]{}' withExpirationDate: self nextYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50864721!
createInvalidNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: 'I am an invalid {name}'.
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50864307!
createFakeCreditCard
	
	^ CreditCardData withNumber: '3333333333333333' withExpirationDate: Date today previous withOwner: 'Roberto the scammer'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50864058!
createCreditCardWithNoCredit
	^ CreditCardData withNumber: '1111111111111111' withExpirationDate: self nextYear withOwner: 'Soy una tarjeta sin credito'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862921!
createExpiredCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today previous withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862983!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50865406!
today
	^GregorianMonthOfYear current.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50865110!
createInvalidNumberLongitudCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: self nextYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862969!
item2SellByTheStore
	^'El libro de bruno'.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50865410!
nextYear
	^self today nextMonth: (self today month).! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862959!
defaultCatalog
	|catalog|
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore 	put: self itemSellByTheStorePrice.
	catalog at: self item2SellByTheStore 	put: self item2SellByTheStorePrice.
	^ catalog! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862988!
itemSellByTheStorePrice
	^50! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862895!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862900!
createCashier

	^Cashier new.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862978!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50864699!
createInvalidNameLongitudCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862974!
item2SellByTheStorePrice
	^20! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50865415!
lastYear
	^self today previousMonth: (self today month).! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:58:07' prior: 50862904!
createCheckoutCart
	|checkoutCart|
	checkoutCart := self createCart.
	checkoutCart add: 2 of: self itemSellByTheStore.
	checkoutCart add: self item2SellByTheStore.
	^checkoutCart! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 11:58:25'!
PASSED!

(MethodArgumentChanger for: TusLibrosTestsSupport) renameOnEveryClassMethod: 'Date today previous' to: 'self lastYear'!
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865454!
createStolenCreditCard
	
	^ CreditCardData withNumber: '2222222222222222' withExpirationDate: self lastYear withOwner: 'Roberto the thief'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865463!
createCreditCard
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865471!
createInvalidNumberCreditCard
	
	^ CreditCardData withNumber: '1234abcd1234[]{}' withExpirationDate: self nextYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865480!
createInvalidNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: 'I am an invalid {name}'.
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865489!
createFakeCreditCard
	
	^ CreditCardData withNumber: '3333333333333333' withExpirationDate: self lastYear withOwner: 'Roberto the scammer'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865498!
createCreditCardWithNoCredit
	^ CreditCardData withNumber: '1111111111111111' withExpirationDate: self nextYear withOwner: 'Soy una tarjeta sin credito'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865507!
createExpiredCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self lastYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865516!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865521!
today
	^GregorianMonthOfYear current.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865526!
createInvalidNumberLongitudCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: self nextYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865535!
item2SellByTheStore
	^'El libro de bruno'.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865540!
nextYear
	^self today nextMonth: (self today month).! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865546!
defaultCatalog
	|catalog|
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore 	put: self itemSellByTheStorePrice.
	catalog at: self item2SellByTheStore 	put: self item2SellByTheStorePrice.
	^ catalog! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865557!
itemSellByTheStorePrice
	^50! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865562!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865568!
createCashier

	^Cashier new.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865573!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865578!
createInvalidNameLongitudCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865600!
item2SellByTheStorePrice
	^20! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865605!
lastYear
	^self today previousMonth: (self today month).! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 11:59:20' prior: 50865611!
createCheckoutCart
	|checkoutCart|
	checkoutCart := self createCart.
	checkoutCart add: 2 of: self itemSellByTheStore.
	checkoutCart add: self item2SellByTheStore.
	^checkoutCart! !

(MethodArgumentChanger for: TusLibrosTestsSupport) renameOnEveryClassMethod: 'Date today' to: 'self today'!
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865696!
createStolenCreditCard
	
	^ CreditCardData withNumber: '2222222222222222' withExpirationDate: self lastYear withOwner: 'Roberto the thief'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865704!
createCreditCard
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865712!
createInvalidNumberCreditCard
	
	^ CreditCardData withNumber: '1234abcd1234[]{}' withExpirationDate: self nextYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865721!
createInvalidNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: 'I am an invalid {name}'.
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865730!
createFakeCreditCard
	
	^ CreditCardData withNumber: '3333333333333333' withExpirationDate: self lastYear withOwner: 'Roberto the scammer'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865738!
createCreditCardWithNoCredit
	^ CreditCardData withNumber: '1111111111111111' withExpirationDate: self nextYear withOwner: 'Soy una tarjeta sin credito'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865747!
createExpiredCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self lastYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865755!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865760!
today
	^GregorianMonthOfYear current.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865765!
createInvalidNumberLongitudCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: self nextYear withOwner: 'Roberto the Owner'
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865774!
item2SellByTheStore
	^'El libro de bruno'.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865779!
nextYear
	^self today nextMonth: (self today month).! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865785!
defaultCatalog
	|catalog|
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore 	put: self itemSellByTheStorePrice.
	catalog at: self item2SellByTheStore 	put: self item2SellByTheStorePrice.
	^ catalog! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865796!
itemSellByTheStorePrice
	^50! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865801!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865807!
createCashier

	^Cashier new.! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865812!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865817!
createInvalidNameLongitudCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865839!
item2SellByTheStorePrice
	^20! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865844!
lastYear
	^self today previousMonth: (self today month).! !
!TusLibrosTestsSupport class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:08' prior: 50865850!
createCheckoutCart
	|checkoutCart|
	checkoutCart := self createCart.
	checkoutCart add: 2 of: self itemSellByTheStore.
	checkoutCart add: self item2SellByTheStore.
	^checkoutCart! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:00:51' prior: 50863912!
checkout: aCart withCard: aCreditCard 
	|total|
	(GregorianMonthOfYear current < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	purchases add: (Association key: aCart value: aCreditCard).
	total := aCart checkoutTotal.
	self processTransaccionWith: aCreditCard for: total.
	^total! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:00:53'!
ERROR!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 12:00:53'!
ERROR!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 12:00:53'!
ERROR!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:00:53'!
ERROR!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 12:00:53'!
ERROR!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 12:00:53'!
ERROR!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 12:00:53'!
ERROR!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:00:53'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:01:03'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:01:07'!
ERROR!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:01:07'!
ERROR!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:01:14'!
ERROR!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:01:37'!
ERROR!

creditCard!

self expiration !

GregorianMonthOfYear current < self expiration !

TusLibrosTestsSupport nextYear !

----SNAPSHOT----(13 June 2021 12:05:01) CuisUniversity-4532.image priorSource: 17064698!

(MethodArgumentChanger for: TusLibrosTest) renameOnEveryMethod: 'self create' to: 'TusLibrosTestsSupport create'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50864315!
test12InvalidCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier fakeCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859456!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50864156!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier stolenCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859443!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859478!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50861999!
createExpiredCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today previous withOwner: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50861064!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart cashier total creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cart add: self itemSellByTheStore.
	total := cashier checkout: cart withCard: creditCard.
	
	self assert: total equals: (self itemSellByTheStorePrice).! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50863500!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50861122!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	total := cashier checkout: cart withCard: creditCard.
	expectedTotal := self itemSellByTheStorePrice * 2 + self item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50860975!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	creditCard := TusLibrosTestsSupport createExpiredCreditCard.
	cashier := TusLibrosTestsSupport createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50860422!
item2SellByTheStore
	^'El libro de bruno'.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50860434!
defaultCatalog
	|catalog|
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore 	put: self itemSellByTheStorePrice.
	catalog at: self item2SellByTheStore 	put: self item2SellByTheStorePrice.
	^ catalog! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50865152!
test01CreditCardWithInvalidNumberLongitudShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberLongitudCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859506!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859485!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859465!
test01NewCartsAreCreatedEmpty

	self assert: TusLibrosTestsSupport createCart isEmpty! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50860426!
item2SellByTheStorePrice
	^20! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50864753!
test03CreditCardWithInvalidNameCharactersShouldRaiseError

	self should: [TusLibrosTestsSupport createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50860523!
createCheckoutCart
	|checkoutCart|
	checkoutCart := TusLibrosTestsSupport createCart.
	checkoutCart add: 2 of: self itemSellByTheStore.
	checkoutCart add: self item2SellByTheStore.
	^checkoutCart! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50861992!
createCreditCard
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50862007!
createInvalidNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50862753!
test07CashierRegisteresASingleSell
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859430!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50865176!
test04CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50864741!
test02CreditCardWithInvalidNameLongitudShouldRaiseError

	self should: [TusLibrosTestsSupport createInvalidNameLongitudCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859520!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50861005!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	self should: [cashier checkout: cart withCard: creditCard] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50865117!
createInvalidNumberLongitudCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50860430!
itemSellByTheStorePrice
	^50! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50862845!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	cashier checkout: cart2 withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859510!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50863854!
createCashier
	^Cashier with: MerchantProcessorSimulator new.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859470!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:26' prior: 50859498!
test06CartRemembersAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:05:27' prior: 50863298!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	cashier2 := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier2 checkout: cart withCard: creditCard.
	
	self deny: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:05:41'!
ERROR!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:05:41'!
ERROR!
!TusLibrosTestsSupport class methodsFor: 'cashier' stamp: 'LB 6/13/2021 12:07:35' prior: 50865974!
createCashier

	^Cashier with: MerchantProcessorSimulator new.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:07:41'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:07:43'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 12:07:43'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 12:07:43'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:07:43'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 12:07:43'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 12:07:43'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 12:07:43'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 12:07:43'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:07:43'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:07:43'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:07:44'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 12:07:46'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 12:07:47'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 12:07:47'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 12:07:47'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 12:07:47'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 12:07:47'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 12:07:47'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:07:47'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:07:47'!
PASSED!

!methodRemoval: TusLibrosTest #createCart stamp: 'LB 6/13/2021 12:08:12'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: TusLibrosTest #createCashier stamp: 'LB 6/13/2021 12:08:14'!
createCashier
	^Cashier with: MerchantProcessorSimulator new.!

!methodRemoval: TusLibrosTest #createCheckoutCart stamp: 'LB 6/13/2021 12:08:20'!
createCheckoutCart
	|checkoutCart|
	checkoutCart := TusLibrosTestsSupport createCart.
	checkoutCart add: 2 of: self itemSellByTheStore.
	checkoutCart add: self item2SellByTheStore.
	^checkoutCart!

!methodRemoval: TusLibrosTest #createCreditCard stamp: 'LB 6/13/2021 12:08:20'!
createCreditCard
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	!

!methodRemoval: TusLibrosTest #createExpiredCreditCard stamp: 'LB 6/13/2021 12:08:20'!
createExpiredCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today previous withOwner: 'Roberto the Owner'
	!

!methodRemoval: TusLibrosTest #createInvalidNameCreditCard stamp: 'LB 6/13/2021 12:08:20'!
createInvalidNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: Date today next withOwner: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'.
	!

!methodRemoval: TusLibrosTest #createInvalidNumberLongitudCreditCard stamp: 'LB 6/13/2021 12:08:20'!
createInvalidNumberLongitudCreditCard
	
	^ CreditCardData withNumber: '1234' withExpirationDate: Date today next withOwner: 'Roberto the Owner'
	!

!methodRemoval: TusLibrosTest #defaultCatalog stamp: 'LB 6/13/2021 12:08:20'!
defaultCatalog
	|catalog|
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore 	put: self itemSellByTheStorePrice.
	catalog at: self item2SellByTheStore 	put: self item2SellByTheStorePrice.
	^ catalog!

!methodRemoval: TusLibrosTest #item2SellByTheStore stamp: 'LB 6/13/2021 12:08:20'!
item2SellByTheStore
	^'El libro de bruno'.!

!methodRemoval: TusLibrosTest #item2SellByTheStorePrice stamp: 'LB 6/13/2021 12:08:20'!
item2SellByTheStorePrice
	^20!

!methodRemoval: TusLibrosTest #itemNotSellByTheStore stamp: 'LB 6/13/2021 12:08:20'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: TusLibrosTest #itemSellByTheStore stamp: 'LB 6/13/2021 12:08:20'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: TusLibrosTest #itemSellByTheStorePrice stamp: 'LB 6/13/2021 12:08:20'!
itemSellByTheStorePrice
	^50!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 12:08:23'!
ERROR!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 12:08:23'!
ERROR!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 12:08:23'!
ERROR!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 12:08:23'!
ERROR!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 12:08:23'!
ERROR!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 12:08:23'!
ERROR!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 12:08:23'!
ERROR!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 12:08:23'!
ERROR!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 12:08:23'!
ERROR!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:08:23'!
PASSED!

(MethodArgumentChanger for: TusLibrosTest) renameOnEveryMethod: 'self item' to: 'TusLibrosTestsSupport item'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866143!
test12InvalidCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier fakeCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866160!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: 2 of: TusLibrosTestsSupport itemSellByTheStore.
	self assert: (cart occurrencesOf: TusLibrosTestsSupport itemSellByTheStore) = 2! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866170!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier stolenCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866187!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [ cart add: TusLibrosTestsSupport itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866201!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self deny: (cart includes: TusLibrosTestsSupport itemSellByTheStore)! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866233!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866217!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart cashier total creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	total := cashier checkout: cart withCard: creditCard.
	
	self assert: total equals: (TusLibrosTestsSupport itemSellByTheStorePrice).! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866250!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	total := cashier checkout: cart withCard: creditCard.
	expectedTotal := TusLibrosTestsSupport itemSellByTheStorePrice * 2 + TusLibrosTestsSupport item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866267!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	creditCard := TusLibrosTestsSupport createExpiredCreditCard.
	cashier := TusLibrosTestsSupport createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866299!
test01CreditCardWithInvalidNumberLongitudShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberLongitudCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866316!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [cart add: 2 of: TusLibrosTestsSupport itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866330!
test01NewCartsAreCreatedEmpty

	self assert: TusLibrosTestsSupport createCart isEmpty! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866341!
test03CreditCardWithInvalidNameCharactersShouldRaiseError

	self should: [TusLibrosTestsSupport createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866422!
test04CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866393!
test07CashierRegisteresASingleSell
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866408!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [cart add: 0 of: TusLibrosTestsSupport itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866434!
test02CreditCardWithInvalidNameLongitudShouldRaiseError

	self should: [TusLibrosTestsSupport createInvalidNameLongitudCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866451!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	self should: [cashier checkout: cart withCard: creditCard] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866481!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier checkout: cart withCard: creditCard.
	cashier checkout: cart2 withCard: creditCard.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866512!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	self deny: cart isEmpty ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866521!
test06CartRemembersAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	self assert: (cart includes: TusLibrosTestsSupport itemSellByTheStore)! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:08:41' prior: 50866530!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	cashier2 := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier2 checkout: cart withCard: creditCard.
	
	self deny: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:08:44'!
PASSED!

----SNAPSHOT----(13 June 2021 12:08:52) CuisUniversity-4532.image priorSource: 17103507!
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	| catalog |
	(catalog _ [
	(Dictionary
		cover: (39 to: 48)
		declaredAt: (39 to: 48)) new ] valueCoveringAll:
		{50 to: 52})
		cover: (28 to: 34)
		declaredAt: (18 to: 24).
	[
	(catalog
		cover: (56 to: 62)
		declaredAt: (18 to: 24))
		at:
			([
			(self coverAll:
				{68 to: 71}) itemSellByTheStore ] valueCoveringAll:
				{73 to: 90})
		put:
			([
			(self coverAll:
				{98 to: 101}) itemSellByTheStorePrice ] valueCoveringAll:
				{103 to: 125}) ] valueCoveringAll:
		{64 to: 66. 93 to: 96}.
	[
	(catalog
		cover: (129 to: 135)
		declaredAt: (18 to: 24))
		at:
			([
			(self coverAll:
				{141 to: 144}) item2SellByTheStore ] valueCoveringAll:
				{146 to: 164})
		put:
			([
			(self coverAll:
				{172 to: 175}) item2SellByTheStorePrice ] valueCoveringAll:
				{177 to: 200}) ] valueCoveringAll:
		{137 to: 139. 167 to: 170}.
	^ catalog
		cover: (206 to: 212)
		declaredAt: (18 to: 24).! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 50 coverAll:
		{27 to: 28}.! !
!Behavior method!
item2SellByTheStore
	^ 'El libro de bruno' coverAll:
		{23 to: 41}.! !
!Behavior method!
item2SellByTheStorePrice
	^ 20 coverAll:
		{28 to: 29}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
createCashier
	^ [
	(Cashier
		cover: (18 to: 24)
		declaredAt: (18 to: 24)) with:
		([
		(MerchantProcessorSimulator
			cover: (32 to: 57)
			declaredAt: (32 to: 57)) new ] valueCoveringAll:
			{59 to: 61}) ] valueCoveringAll:
		{26 to: 30}.! !
!Behavior method!
with: aMerchantProcessor
	^ [
	([
	(self coverAll:
		{28 to: 31}) new ] valueCoveringAll:
		{33 to: 35}) initializeWith:
		(aMerchantProcessor
			cover: (53 to: 70)
			declaredAt: (7 to: 24)) ] valueCoveringAll:
		{37 to: 51}.! !
!Behavior method!
initializeWith: aMerchantProcessor
	(merchantProcessor _ aMerchantProcessor
		cover: (58 to: 75)
		declaredAt: (17 to: 34))
		cover: (37 to: 53)
		declaredAt: (37 to: 53).
	(purchases _ [
	(OrderedCollection
		cover: (92 to: 108)
		declaredAt: (92 to: 108)) new ] valueCoveringAll:
		{110 to: 112})
		cover: (79 to: 87)
		declaredAt: (79 to: 87).! !
!Behavior method!
createCreditCard
	^ [
	(CreditCardData
		cover: (21 to: 34)
		declaredAt: (21 to: 34))
		withNumber:
			('1234567891234567' coverAll:
				{48 to: 65})
		withExpirationDate:
			([
			(self coverAll:
				{87 to: 90}) nextYear ] valueCoveringAll:
				{92 to: 99})
		withOwner:
			('Roberto the Owner' coverAll:
				{112 to: 130}) ] valueCoveringAll:
		{36 to: 46. 67 to: 85. 101 to: 110}.! !
!Behavior method!
nextYear
	^ [
	([
	(self coverAll:
		{12 to: 15}) today ] valueCoveringAll:
		{17 to: 21}) nextMonth:
		([
		([
		(self coverAll:
			{35 to: 38}) today ] valueCoveringAll:
			{40 to: 44}) month ] valueCoveringAll:
			{46 to: 50}) ] valueCoveringAll:
		{23 to: 32}.! !
!Behavior method!
today
	^ [
	(GregorianMonthOfYear
		cover: (9 to: 28)
		declaredAt: (9 to: 28)) current ] valueCoveringAll:
		{30 to: 36}.! !
!Behavior method!
withNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	[
	(self coverAll:
		{86 to: 89}) validateNumber:
		(aNumberAsString
			cover: (107 to: 121)
			declaredAt: (13 to: 27)) ] valueCoveringAll:
		{91 to: 105}.
	[
	(self coverAll:
		{125 to: 128}) validateOwner:
		(anOwner
			cover: (145 to: 151)
			declaredAt: (77 to: 83)) ] valueCoveringAll:
		{130 to: 143}.
	^ [
	([
	(self coverAll:
		{158 to: 161}) new ] valueCoveringAll:
		{163 to: 165})
		initiliazeWithNumber:
			(aNumberAsString
				cover: (189 to: 203)
				declaredAt: (13 to: 27))
		withExpirationDate:
			(anExpirationDate
				cover: (225 to: 240)
				declaredAt: (49 to: 64))
		withOwner:
			(anOwner
				cover: (253 to: 259)
				declaredAt: (77 to: 83)) ] valueCoveringAll:
		{167 to: 187. 205 to: 223. 242 to: 251}.! !
!Behavior method!
validateNumber: aNumberAsString
	self coverAll:
		{75 to: 78}.
	[
	([
	([
	(aNumberAsString
		cover: (36 to: 50)
		declaredAt: (17 to: 31)) size ] valueCoveringAll:
		{52 to: 55}) =
		(16 coverAll:
			{59 to: 60}) ] valueCoveringAll:
		{57 to: 57}) ifFalse: [ ^ [
		(self coverAll:
			{87 to: 90}) error:
			([
			(self coverAll:
				{183 to: 186}) invalidCreditCardErrorMessage ] valueCoveringAll:
				{92 to: 120}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{63 to: 70}.
	[
	(aNumberAsString
		cover: (125 to: 139)
		declaredAt: (17 to: 31)) do: [ :aChar |
		[
		([
		(aChar
			cover: (156 to: 160)
			declaredAt: (147 to: 151)) isDigit ] valueCoveringAll:
			{162 to: 168}) ifFalse: [ ^ [
			(self coverAll:
				{195 to: 198}) error:
				([ self invalidCreditCardErrorMessage ] valueCoveringAll:
					{200 to: 228}) ] valueCoveringAll:
				{188 to: 193} ]] valueCoveringAll:
			{171 to: 178} ]] valueCoveringAll:
		{141 to: 143}.! !
!Behavior method!
validateOwner: anOwner
	self coverAll:
		{72 to: 75}.
	[
	([
	([
	(anOwner
		cover: (27 to: 33)
		declaredAt: (16 to: 22)) size ] valueCoveringAll:
		{35 to: 38})
		between:
			(1 coverAll:
				{49 to: 49})
		and:
			(30 coverAll:
				{56 to: 57}) ] valueCoveringAll:
		{40 to: 47. 51 to: 54}) ifFalse: [ ^ [
		(self coverAll:
			{84 to: 87}) error:
			([
			(self coverAll:
				{202 to: 205}) invalidCreditCardErrorMessage ] valueCoveringAll:
				{89 to: 117}) ] valueCoveringAll:
			{77 to: 82} ]] valueCoveringAll:
		{60 to: 67}.
	[
	(anOwner
		cover: (122 to: 128)
		declaredAt: (16 to: 22)) do: [ :aChar |
		[
		([
		([
		(aChar
			cover: (146 to: 150)
			declaredAt: (136 to: 140)) isLetter ] valueCoveringAll:
			{152 to: 159}) or: [
			[
			([
			(aChar
				cover: (167 to: 171)
				declaredAt: (136 to: 140)) asString ] valueCoveringAll:
				{173 to: 180}) =
				(' ' coverAll:
					{184 to: 186}) ] valueCoveringAll:
				{182 to: 182} ]] valueCoveringAll:
			{162 to: 164}) ifFalse: [ ^ [
			(self coverAll:
				{214 to: 217}) error:
				([ self invalidCreditCardErrorMessage ] valueCoveringAll:
					{219 to: 247}) ] valueCoveringAll:
				{207 to: 212} ]] valueCoveringAll:
			{190 to: 197} ]] valueCoveringAll:
		{130 to: 132}.! !
!Behavior method!
initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	(number _ aNumberAsString
		cover: (106 to: 120)
		declaredAt: (23 to: 37))
		cover: (96 to: 101)
		declaredAt: (96 to: 101).
	(expiration _ anExpirationDate
		cover: (138 to: 153)
		declaredAt: (59 to: 74))
		cover: (124 to: 133)
		declaredAt: (124 to: 133).
	(owner _ anOwner
		cover: (166 to: 172)
		declaredAt: (87 to: 93))
		cover: (157 to: 161)
		declaredAt: (157 to: 161).! !
!Behavior method!
checkout: aCart withCard: aCreditCard
	| total |
	[
	([
	([
	(GregorianMonthOfYear
		cover: (51 to: 70)
		declaredAt: (51 to: 70)) current ] valueCoveringAll:
		{72 to: 78}) <
		([
		(aCreditCard
			cover: (82 to: 92)
			declaredAt: (27 to: 37)) expiration ] valueCoveringAll:
			{94 to: 103}) ] valueCoveringAll:
		{80 to: 80}) ifFalse: [ ^ [
		(self coverAll:
			{118 to: 121}) error:
			([
			([
			(self coverAll:
				{130 to: 133}) class ] valueCoveringAll:
				{135 to: 139}) expiredCreditCardErrorMessage ] valueCoveringAll:
				{141 to: 169}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{106 to: 113}.
	[
	(purchases
		cover: (174 to: 182)
		declaredAt: (174 to: 182)) add:
		([
		(Association
			cover: (190 to: 200)
			declaredAt: (190 to: 200))
			key:
				(aCart
					cover: (207 to: 211)
					declaredAt: (11 to: 15))
			value:
				(aCreditCard
					cover: (220 to: 230)
					declaredAt: (27 to: 37)) ] valueCoveringAll:
			{202 to: 205. 213 to: 218}) ] valueCoveringAll:
		{184 to: 187}.
	(total _ [
	(aCart
		cover: (244 to: 248)
		declaredAt: (11 to: 15)) checkoutTotal ] valueCoveringAll:
		{250 to: 262})
		cover: (235 to: 239)
		declaredAt: (42 to: 46).
	[
	(self coverAll:
		{266 to: 269})
		processTransaccionWith:
			(aCreditCard
				cover: (295 to: 305)
				declaredAt: (27 to: 37))
		for:
			(total
				cover: (312 to: 316)
				declaredAt: (42 to: 46)) ] valueCoveringAll:
		{271 to: 293. 307 to: 310}.
	^ total
		cover: (321 to: 325)
		declaredAt: (42 to: 46).! !
!Behavior method!
expiration
	^ expiration
		cover: (14 to: 23)
		declaredAt: (14 to: 23).! !
!Behavior method!
checkoutTotal
	[
	([
	(self coverAll:
		{17 to: 20}) isEmpty ] valueCoveringAll:
		{22 to: 28}) ifTrue: [ ^ [
		(self coverAll:
			{41 to: 44}) error:
			([
			([
			(self coverAll:
				{53 to: 56}) class ] valueCoveringAll:
				{58 to: 62}) cantCheckoutEmptyCartError ] valueCoveringAll:
				{64 to: 89}) ] valueCoveringAll:
			{46 to: 51} ]] valueCoveringAll:
		{31 to: 37}.
	^ [
	(items
		cover: (95 to: 99)
		declaredAt: (95 to: 99))
		inject:
			(0 coverAll:
				{109 to: 109})
		into: [ :aTotal :anItem |
			[
			(aTotal
				cover: (136 to: 141)
				declaredAt: (119 to: 124)) +
				([
				(catalog
					cover: (146 to: 152)
					declaredAt: (146 to: 152)) at:
					(anItem
						cover: (158 to: 163)
						declaredAt: (127 to: 132)) ] valueCoveringAll:
					{154 to: 156}) ] valueCoveringAll:
				{143 to: 143} ]] valueCoveringAll:
		{101 to: 107. 111 to: 115}.! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !
!Behavior method!
cantCheckoutEmptyCartError
	^ 'Error: Cant checkout empty cart.' coverAll:
		{30 to: 63}.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
createInvalidNumberLongitudCreditCard
	^ [
	(CreditCardData
		cover: (44 to: 57)
		declaredAt: (44 to: 57))
		withNumber:
			('1234' coverAll:
				{71 to: 76})
		withExpirationDate:
			([
			(self coverAll:
				{98 to: 101}) nextYear ] valueCoveringAll:
				{103 to: 110})
		withOwner:
			('Roberto the Owner' coverAll:
				{123 to: 141}) ] valueCoveringAll:
		{59 to: 69. 78 to: 96. 112 to: 121}.! !
!Behavior method!
invalidCreditCardErrorMessage
	^ 'Error: credit card is invalid' coverAll:
		{33 to: 63}.! !

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:08:56'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
processTransaccionWith: aCreditCard for: aTotal
	| response |
	(response _ [
	(merchantProcessor
		cover: (74 to: 90)
		declaredAt: (74 to: 90))
		makeTransactionWithCreditCardNumber:
			([
			(aCreditCard
				cover: (129 to: 139)
				declaredAt: (25 to: 35)) number ] valueCoveringAll:
				{141 to: 146})
		expiration:
			([
			(aCreditCard
				cover: (160 to: 170)
				declaredAt: (25 to: 35)) expiration ] valueCoveringAll:
				{172 to: 181})
		name:
			([
			(aCreditCard
				cover: (189 to: 199)
				declaredAt: (25 to: 35)) owner ] valueCoveringAll:
				{201 to: 205})
		for:
			(aTotal
				cover: (212 to: 217)
				declaredAt: (42 to: 47)) ] valueCoveringAll:
		{92 to: 127. 148 to: 158. 183 to: 187. 207 to: 210})
		cover: (62 to: 69)
		declaredAt: (51 to: 58).
	[
	([
	(response
		cover: (222 to: 229)
		declaredAt: (51 to: 58)) =
		('1|no credit on credit card' coverAll:
			{233 to: 260}) ] valueCoveringAll:
		{231 to: 231}) ifTrue: [ ^ [
		(self coverAll:
			{273 to: 276}) error:
			([
			([
			(self coverAll:
				{285 to: 288}) class ] valueCoveringAll:
				{290 to: 294}) noCreditOnCreditCardErrorMessage ] valueCoveringAll:
				{296 to: 327}) ] valueCoveringAll:
			{278 to: 283} ]] valueCoveringAll:
		{263 to: 269}.
	[
	([
	(response
		cover: (333 to: 340)
		declaredAt: (51 to: 58)) =
		('1|stolen credit card' coverAll:
			{344 to: 365}) ] valueCoveringAll:
		{342 to: 342}) ifTrue: [ ^ [
		(self coverAll:
			{378 to: 381}) error:
			([
			([
			(self coverAll:
				{390 to: 393}) class ] valueCoveringAll:
				{395 to: 399}) stolenCreditCardErrorMessage ] valueCoveringAll:
				{401 to: 428}) ] valueCoveringAll:
			{383 to: 388} ]] valueCoveringAll:
		{368 to: 374}.
	[
	([
	(response
		cover: (434 to: 441)
		declaredAt: (51 to: 58)) =
		('1|credit card does not exist' coverAll:
			{445 to: 474}) ] valueCoveringAll:
		{443 to: 443}) ifTrue: [ ^ [
		(self coverAll:
			{487 to: 490}) error:
			([
			([
			(self coverAll:
				{499 to: 502}) class ] valueCoveringAll:
				{504 to: 508}) fakeCreditCardErrorMessage ] valueCoveringAll:
				{510 to: 535}) ] valueCoveringAll:
			{492 to: 497} ]] valueCoveringAll:
		{477 to: 483}.! !
!Behavior method!
number
	^ number
		cover: (10 to: 15)
		declaredAt: (10 to: 15).! !
!Behavior method!
owner
	^ owner
		cover: (9 to: 13)
		declaredAt: (9 to: 13).! !
!Behavior method!
makeTransactionWithCreditCardNumber: creditCardNumber expiration: creditCardExpiration name: creditCardName for: anAmount
	[
	([
	(creditCardNumber
		cover: (125 to: 140)
		declaredAt: (38 to: 53)) =
		('1111111111111111' coverAll:
			{144 to: 161}) ] valueCoveringAll:
		{142 to: 142}) ifTrue: [ ^ '1|no credit on credit card' coverAll:
			{174 to: 201} ]] valueCoveringAll:
		{164 to: 170}.
	[
	([
	(creditCardNumber
		cover: (207 to: 222)
		declaredAt: (38 to: 53)) =
		('2222222222222222' coverAll:
			{226 to: 243}) ] valueCoveringAll:
		{224 to: 224}) ifTrue: [ ^ '1|stolen credit card' coverAll:
			{256 to: 277} ]] valueCoveringAll:
		{246 to: 252}.
	[
	([
	(creditCardNumber
		cover: (283 to: 298)
		declaredAt: (38 to: 53)) =
		('3333333333333333' coverAll:
			{302 to: 319}) ] valueCoveringAll:
		{300 to: 300}) ifTrue: [ ^ '1|credit card does not exist' coverAll:
			{332 to: 361} ]] valueCoveringAll:
		{322 to: 328}.! !

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
createInvalidNameLongitudCreditCard
	^ [
	(CreditCardData
		cover: (42 to: 55)
		declaredAt: (42 to: 55))
		withNumber:
			('1234567891234567' coverAll:
				{69 to: 86})
		withExpirationDate:
			([
			(self coverAll:
				{108 to: 111}) nextYear ] valueCoveringAll:
				{113 to: 120})
		withOwner:
			('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum' coverAll:
				{133 to: 578}) ] valueCoveringAll:
		{57 to: 67. 88 to: 106. 122 to: 131}.! !

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:08:56'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
createCheckoutCart
	| checkoutCart |
	(checkoutCart _ [
	(self coverAll:
		{53 to: 56}) createCart ] valueCoveringAll:
		{58 to: 67})
		cover: (37 to: 48)
		declaredAt: (22 to: 33).
	[
	(checkoutCart
		cover: (71 to: 82)
		declaredAt: (22 to: 33))
		add:
			(2 coverAll:
				{89 to: 89})
		of:
			([
			(self coverAll:
				{95 to: 98}) itemSellByTheStore ] valueCoveringAll:
				{100 to: 117}) ] valueCoveringAll:
		{84 to: 87. 91 to: 93}.
	[
	(checkoutCart
		cover: (121 to: 132)
		declaredAt: (22 to: 33)) add:
		([
		(self coverAll:
			{139 to: 142}) item2SellByTheStore ] valueCoveringAll:
			{144 to: 162}) ] valueCoveringAll:
		{134 to: 137}.
	^ checkoutCart
		cover: (167 to: 178)
		declaredAt: (22 to: 33).! !

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
createInvalidNameCreditCard
	^ [
	(CreditCardData
		cover: (34 to: 47)
		declaredAt: (34 to: 47))
		withNumber:
			('1234567891234567' coverAll:
				{61 to: 78})
		withExpirationDate:
			([
			(self coverAll:
				{100 to: 103}) nextYear ] valueCoveringAll:
				{105 to: 112})
		withOwner:
			('I am an invalid {name}' coverAll:
				{125 to: 148}) ] valueCoveringAll:
		{49 to: 59. 80 to: 98. 114 to: 123}.! !

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
createInvalidNumberCreditCard
	^ [
	(CreditCardData
		cover: (36 to: 49)
		declaredAt: (36 to: 49))
		withNumber:
			('1234abcd1234[]{}' coverAll:
				{63 to: 80})
		withExpirationDate:
			([
			(self coverAll:
				{102 to: 105}) nextYear ] valueCoveringAll:
				{107 to: 114})
		withOwner:
			('Roberto the Owner' coverAll:
				{127 to: 145}) ] valueCoveringAll:
		{51 to: 61. 82 to: 100. 116 to: 125}.! !

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
createExpiredCreditCard
	^ [
	(CreditCardData
		cover: (30 to: 43)
		declaredAt: (30 to: 43))
		withNumber:
			('1234567891234567' coverAll:
				{57 to: 74})
		withExpirationDate:
			([
			(self coverAll:
				{96 to: 99}) lastYear ] valueCoveringAll:
				{101 to: 108})
		withOwner:
			('Roberto the Owner' coverAll:
				{121 to: 139}) ] valueCoveringAll:
		{45 to: 55. 76 to: 94. 110 to: 119}.! !
!Behavior method!
lastYear
	^ [
	([
	(self coverAll:
		{12 to: 15}) today ] valueCoveringAll:
		{17 to: 21}) previousMonth:
		([
		([
		(self coverAll:
			{39 to: 42}) today ] valueCoveringAll:
			{44 to: 48}) month ] valueCoveringAll:
			{50 to: 54}) ] valueCoveringAll:
		{23 to: 36}.! !
!Behavior method!
expiredCreditCardErrorMessage
	^ 'Error: credit card is expired' coverAll:
		{33 to: 63}.! !

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:08:56'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 12:08:56'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
hasRegistered: aPurchase
	^ [
	(purchases
		cover: (28 to: 36)
		declaredAt: (28 to: 36)) includes:
		(aPurchase
			cover: (48 to: 56)
			declaredAt: (16 to: 24)) ] valueCoveringAll:
		{38 to: 46}.! !

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 12:08:56'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 12:08:56'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
createCreditCardWithNoCredit
	^ [
	(CreditCardData
		cover: (33 to: 46)
		declaredAt: (33 to: 46))
		withNumber:
			('1111111111111111' coverAll:
				{60 to: 77})
		withExpirationDate:
			([
			(self coverAll:
				{99 to: 102}) nextYear ] valueCoveringAll:
				{104 to: 111})
		withOwner:
			('Soy una tarjeta sin credito' coverAll:
				{124 to: 152}) ] valueCoveringAll:
		{48 to: 58. 79 to: 97. 113 to: 122}.! !
!Behavior method!
noCreditOnCreditCardErrorMessage
	^ 'Error: credit card has no credit' coverAll:
		{36 to: 69}.! !

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
createStolenCreditCard
	^ [
	(CreditCardData
		cover: (29 to: 42)
		declaredAt: (29 to: 42))
		withNumber:
			('2222222222222222' coverAll:
				{56 to: 73})
		withExpirationDate:
			([
			(self coverAll:
				{95 to: 98}) lastYear ] valueCoveringAll:
				{100 to: 107})
		withOwner:
			('Roberto the thief' coverAll:
				{120 to: 138}) ] valueCoveringAll:
		{44 to: 54. 75 to: 93. 109 to: 118}.! !
!Behavior method!
stolenCreditCardErrorMessage
	^ 'Error: stolen credit card' coverAll:
		{32 to: 58}.! !

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!Behavior method!
createFakeCreditCard
	^ [
	(CreditCardData
		cover: (27 to: 40)
		declaredAt: (27 to: 40))
		withNumber:
			('3333333333333333' coverAll:
				{54 to: 71})
		withExpirationDate:
			([
			(self coverAll:
				{93 to: 96}) lastYear ] valueCoveringAll:
				{98 to: 105})
		withOwner:
			('Roberto the scammer' coverAll:
				{118 to: 138}) ] valueCoveringAll:
		{42 to: 52. 73 to: 91. 107 to: 116}.! !
!Behavior method!
fakeCreditCardErrorMessage
	^ 'Error: credit card does not exist' coverAll:
		{30 to: 64}.! !

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:08:56'!
PASSED!
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/13/2021 12:11:17'!
test05CreditCardWithInvalidDateShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidDateCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/13/2021 12:11:48'!
createInvalidDateCreditCard
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: 'falsa fecha' withOwner: 'Roberto the Owner'
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
FAILURE!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/13/2021 12:11:51'!
FAILURE!
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:12:08' prior: 50865279!
withNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	self validateNumber: aNumberAsString.
	self validateOwner: anOwner.
	self validateDate: anExpirationDate.
	
	^self new initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner! !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:12:47'!
validateDate: anExpirationDate.
	(anExpirationDate isKindOf: 	GregorianMonthOfYear) ifFalse: [^self error: self class invalidCreditCardErrorMessage]! !
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:12:56' prior: 50868186!
validateDate: anExpirationDate.
	(anExpirationDate isKindOf: 	GregorianMonthOfYear) ifFalse: [^self error: self invalidCreditCardErrorMessage]! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

!testRun: #TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:12:56'!
PASSED!

CreditCardData withNumber: '3333333333333333' withExpirationDate: self lastYear withOwner: 'Roberto the scammer' !

CreditCardData withNumber: '3333333333333333' withExpirationDate: TusLibrosTestsSupport lastYear withOwner: 'Roberto the scammer' !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/13/2021 12:16:38'!
test12FakeCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier fakeCreditCardErrorMessage].! !

!methodRemoval: TusLibrosTest #test12InvalidCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:16:38'!
test12InvalidCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier fakeCreditCardErrorMessage].!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/13/2021 12:17:03' prior: 50866026!
checkout: aCart withCard: aCreditCard 
	|total|
	(GregorianMonthOfYear current < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	purchases add: (Association key: aCart value: aCreditCard).
	self processTransaccionWith: aCreditCard for: total.
	^total! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/13/2021 12:17:04'!
PASSED!

----SNAPSHOT----(13 June 2021 12:18:05) CuisUniversity-4532.image priorSource: 17140653!

----QUIT----(13 June 2021 12:21:07) CuisUniversity-4532.image priorSource: 17176393!

----STARTUP---- (14 June 2021 18:42:30) as /home/lbiglieri/Downloads/build/CuisUniversity/libros2/CuisUniversity-4532.image!


' hola ' withBlanksTrimmed !

' hola  hola ' withBlanksTrimmed !
!TusLibrosTest methodsFor: 'credit card tests' stamp: 'LB 6/14/2021 18:48:12'!
test06CreditCardWithSpacesAsNameShouldRaiseError
	
	self should: [TusLibrosTestsSupport createSpacesAsNameCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/14/2021 18:48:25' prior: 50865888!
createInvalidNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: '                                '.
	! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/14/2021 18:48:33' prior: 50868437!
createInvalidNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: 'I am an invalid {name}'.
	! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/14/2021 18:48:47'!
createSpacesAsNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: '                               '.
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:48:55'!
PASSED!
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/14/2021 18:49:28' prior: 50868454!
createSpacesAsNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: '                               '.
	! !
!TusLibrosTestsSupport class methodsFor: 'credit card' stamp: 'LB 6/14/2021 18:49:35' prior: 50868546!
createSpacesAsNameCreditCard
	
	^ CreditCardData withNumber: '1234567891234567' withExpirationDate: self nextYear withOwner: '                '.
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
FAILURE!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 18:49:40'!
FAILURE!
!CreditCardData class methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:50:01' prior: 50868173!
withNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner
	self validateNumber: aNumberAsString.
	self validateOwner: anOwner withBlanksTrimmed.
	self validateDate: anExpirationDate.
	
	^self new initiliazeWithNumber: aNumberAsString withExpirationDate: anExpirationDate withOwner: anOwner withBlanksTrimmed! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:50:03'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33'!
checkout: aCart withCard: aCreditCard onDate: date  
	|total|
	(GregorianMonthOfYear current < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	purchases add: (Association key: aCart value: aCreditCard).
	self processTransaccionWith: aCreditCard for: total.
	^total! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33' prior: 50866982!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33' prior: 50867205!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	cashier2 := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier2 checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today.
	
	self deny: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33' prior: 50867034!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	creditCard := TusLibrosTestsSupport createExpiredCreditCard.
	cashier := TusLibrosTestsSupport createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33' prior: 50866999!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart cashier total creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	total := cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today.
	
	self assert: total equals: (TusLibrosTestsSupport itemSellByTheStorePrice).! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33' prior: 50867149!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33' prior: 50867016!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	total := cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today.
	expectedTotal := TusLibrosTestsSupport itemSellByTheStorePrice * 2 + TusLibrosTestsSupport item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33' prior: 50866942!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier stolenCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33' prior: 50867108!
test07CashierRegisteresASingleSell
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33' prior: 50867166!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today.
	cashier checkout: cart2 withCard: creditCard onDate: TusLibrosTestsSupport today.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:53:33' prior: 50868288!
test12FakeCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier fakeCreditCardErrorMessage].! !

!methodRemoval: Cashier #checkout:withCard: stamp: 'LB 6/14/2021 18:53:33'!
checkout: aCart withCard: aCreditCard 
	|total|
	(GregorianMonthOfYear current < aCreditCard expiration) ifFalse: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	purchases add: (Association key: aCart value: aCreditCard).
	self processTransaccionWith: aCreditCard for: total.
	^total!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:53:40'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:54:27' prior: 50868746!
checkout: aCart withCard: aCreditCard onDate: date  
	|total|
	(aCreditCard isExpiredOn: date) ifTrue: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	purchases add: (Association key: aCart value: aCreditCard).
	self processTransaccionWith: aCreditCard for: total.
	^total! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
ERROR!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 18:54:30'!
ERROR!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 18:54:30'!
ERROR!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
ERROR!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 18:54:30'!
ERROR!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 18:54:30'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 18:54:30'!
ERROR!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 18:54:30'!
ERROR!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
ERROR!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
ERROR!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:54:30'!
ERROR!
!CreditCardData methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:55:16'!
isExpiredOn: date
	^date >= self expiration! !
!CreditCardData methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 18:55:31' prior: 50869134!
isExpiredOn: date
	^date > self expiration! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 18:55:41'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:00:25'!
makeTransactionWithCreditCardNumber: creditCardNumber expiration: creditCardExpiration for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|stolen credit card'].
	(creditCardNumber = '3333333333333333') ifTrue: [^'1|credit card does not exist']
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:00:25' prior: 50864355!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWithCreditCardNumber: aCreditCard number expiration: aCreditCard expiration for: aTotal.
	(response = '1|no credit on credit card') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	(response = '1|stolen credit card') ifTrue: [^self error: self class stolenCreditCardErrorMessage].
	(response = '1|credit card does not exist') ifTrue: [^self error: self class fakeCreditCardErrorMessage].! !

!methodRemoval: MerchantProcessorSimulator #makeTransactionWithCreditCardNumber:expiration:name:for: stamp: 'LB 6/14/2021 19:00:25'!
makeTransactionWithCreditCardNumber: creditCardNumber expiration: creditCardExpiration name: creditCardName for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|stolen credit card'].
	(creditCardNumber = '3333333333333333') ifTrue: [^'1|credit card does not exist']
	!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:00:31'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:00:48'!
makeTransactionWithCreditCardNumber: creditCardNumber for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|stolen credit card'].
	(creditCardNumber = '3333333333333333') ifTrue: [^'1|credit card does not exist']
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:00:48' prior: 50869241!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWithCreditCardNumber: aCreditCard number for: aTotal.
	(response = '1|no credit on credit card') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	(response = '1|stolen credit card') ifTrue: [^self error: self class stolenCreditCardErrorMessage].
	(response = '1|credit card does not exist') ifTrue: [^self error: self class fakeCreditCardErrorMessage].! !

!methodRemoval: MerchantProcessorSimulator #makeTransactionWithCreditCardNumber:expiration:for: stamp: 'LB 6/14/2021 19:00:48'!
makeTransactionWithCreditCardNumber: creditCardNumber expiration: creditCardExpiration for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|stolen credit card'].
	(creditCardNumber = '3333333333333333') ifTrue: [^'1|credit card does not exist']
	!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:00:51'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:01:48'!
makeTransactionWith: creditCardNumber for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|stolen credit card'].
	(creditCardNumber = '3333333333333333') ifTrue: [^'1|credit card does not exist']
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:01:48' prior: 50869372!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWith: aCreditCard number for: aTotal.
	(response = '1|no credit on credit card') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	(response = '1|stolen credit card') ifTrue: [^self error: self class stolenCreditCardErrorMessage].
	(response = '1|credit card does not exist') ifTrue: [^self error: self class fakeCreditCardErrorMessage].! !

!methodRemoval: MerchantProcessorSimulator #makeTransactionWithCreditCardNumber:for: stamp: 'LB 6/14/2021 19:01:48'!
makeTransactionWithCreditCardNumber: creditCardNumber for: anAmount
	(creditCardNumber = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(creditCardNumber = '2222222222222222') ifTrue: [^'1|stolen credit card'].
	(creditCardNumber = '3333333333333333') ifTrue: [^'1|credit card does not exist']
	!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:02:08' prior: 50869488!
makeTransactionWith: aCreditCard for: anAmount
	(aCreditCard number = '1111111111111111') ifTrue: [^'1|no credit on credit card'].
	(aCreditCard number = '2222222222222222') ifTrue: [^'1|stolen credit card'].
	(aCreditCard number = '3333333333333333') ifTrue: [^'1|credit card does not exist']
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:02:19' prior: 50869501!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWith: aCreditCard for: aTotal.
	(response = '1|no credit on credit card') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	(response = '1|stolen credit card') ifTrue: [^self error: self class stolenCreditCardErrorMessage].
	(response = '1|credit card does not exist') ifTrue: [^self error: self class fakeCreditCardErrorMessage].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21'!
checkout: aCart withCard: aCreditCard onDate: date registerOn: salesBook   
	|total|
	(aCreditCard isExpiredOn: date) ifTrue: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	purchases add: (Association key: aCart value: aCreditCard).
	self processTransaccionWith: aCreditCard for: total.
	^total! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21' prior: 50868926!
test12FakeCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier fakeCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21' prior: 50868832!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21' prior: 50868887!
test07CashierRegisteresASingleSell
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21' prior: 50868796!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	creditCard := TusLibrosTestsSupport createExpiredCreditCard.
	cashier := TusLibrosTestsSupport createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21' prior: 50868778!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	cashier2 := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier2 checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	
	self deny: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21' prior: 50868869!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier stolenCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21' prior: 50868903!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	cashier checkout: cart2 withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21' prior: 50868814!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart cashier total creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	total := cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	
	self assert: total equals: (TusLibrosTestsSupport itemSellByTheStorePrice).! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21' prior: 50868760!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:11:21' prior: 50868850!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	total := cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	expectedTotal := TusLibrosTestsSupport itemSellByTheStorePrice * 2 + TusLibrosTestsSupport item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !

!methodRemoval: Cashier #checkout:withCard:onDate: stamp: 'LB 6/14/2021 19:11:21'!
checkout: aCart withCard: aCreditCard onDate: date  
	|total|
	(aCreditCard isExpiredOn: date) ifTrue: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	purchases add: (Association key: aCart value: aCreditCard).
	self processTransaccionWith: aCreditCard for: total.
	^total!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:13:05' prior: 50869614!
test07CashierRegisteresASingleSell
	|cart cashier creditCard salesBook |
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
		! !
!TusLibrosTestsSupport class methodsFor: 'cashier' stamp: 'LB 6/14/2021 19:13:29'!
createSalesBook

	^OrderedCollection new.! !

(MethodArgumentChanger for: TusLibrosTest) renameOnEveryMethod: 'registerOn: salesBook' to: 'registerOn: TusLibrosTestsSupport salesBook'
!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50866931!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: 2 of: TusLibrosTestsSupport itemSellByTheStore.
	self assert: (cart occurrencesOf: TusLibrosTestsSupport itemSellByTheStore) = 2! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50869667!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier stolenCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50866959!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [ cart add: TusLibrosTestsSupport itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50866973!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self deny: (cart includes: TusLibrosTestsSupport itemSellByTheStore)! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50869728!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50869710!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart cashier total creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	total := cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook.
	
	self assert: total equals: (TusLibrosTestsSupport itemSellByTheStorePrice).! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50869577!
test12FakeCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier fakeCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50869747!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	total := cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook.
	expectedTotal := TusLibrosTestsSupport itemSellByTheStorePrice * 2 + TusLibrosTestsSupport item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50869630!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	creditCard := TusLibrosTestsSupport createExpiredCreditCard.
	cashier := TusLibrosTestsSupport createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50868425!
test06CreditCardWithSpacesAsNameShouldRaiseError
	
	self should: [TusLibrosTestsSupport createSpacesAsNameCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50867051!
test01CreditCardWithInvalidNumberLongitudShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberLongitudCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50868071!
test05CreditCardWithInvalidDateShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidDateCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50867063!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [cart add: 2 of: TusLibrosTestsSupport itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50867078!
test01NewCartsAreCreatedEmpty

	self assert: TusLibrosTestsSupport createCart isEmpty! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50867084!
test03CreditCardWithInvalidNameCharactersShouldRaiseError

	self should: [TusLibrosTestsSupport createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50867096!
test04CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50869779!
test07CashierRegisteresASingleSell
	|cart cashier creditCard salesBook |
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50867123!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [cart add: 0 of: TusLibrosTestsSupport itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50867137!
test02CreditCardWithInvalidNameLongitudShouldRaiseError

	self should: [TusLibrosTestsSupport createInvalidNameLongitudCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50869595!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50869686!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook.
	cashier checkout: cart2 withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50867186!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	self deny: cart isEmpty ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50867195!
test06CartRemembersAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	self assert: (cart includes: TusLibrosTestsSupport itemSellByTheStore)! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:15:36' prior: 50869649!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	cashier2 := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier2 checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport salesBook.
	
	self deny: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !

(MethodArgumentChanger for: TusLibrosTest) renameOnEveryMethod: 'TusLibrosTestsSupport salesBook' to: 'TusLibrosTestsSupport createSalesBook'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869806!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: 2 of: TusLibrosTestsSupport itemSellByTheStore.
	self assert: (cart occurrencesOf: TusLibrosTestsSupport itemSellByTheStore) = 2! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869817!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier stolenCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869836!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [ cart add: TusLibrosTestsSupport itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869850!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self deny: (cart includes: TusLibrosTestsSupport itemSellByTheStore)! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869859!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869879!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart cashier total creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	total := cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.
	
	self assert: total equals: (TusLibrosTestsSupport itemSellByTheStorePrice).! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869898!
test12FakeCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier fakeCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869917!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	total := cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.
	expectedTotal := TusLibrosTestsSupport itemSellByTheStorePrice * 2 + TusLibrosTestsSupport item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869938!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	creditCard := TusLibrosTestsSupport createExpiredCreditCard.
	cashier := TusLibrosTestsSupport createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869958!
test06CreditCardWithSpacesAsNameShouldRaiseError
	
	self should: [TusLibrosTestsSupport createSpacesAsNameCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869970!
test01CreditCardWithInvalidNumberLongitudShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberLongitudCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869982!
test05CreditCardWithInvalidDateShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidDateCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50869994!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [cart add: 2 of: TusLibrosTestsSupport itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870009!
test01NewCartsAreCreatedEmpty

	self assert: TusLibrosTestsSupport createCart isEmpty! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870015!
test03CreditCardWithInvalidNameCharactersShouldRaiseError

	self should: [TusLibrosTestsSupport createInvalidNameCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870027!
test04CreditCardWithInvalidNumberShouldRaiseError
	
	self should: [TusLibrosTestsSupport createInvalidNumberCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870039!
test07CashierRegisteresASingleSell
	|cart cashier creditCard salesBook |
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870058!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	self 
		should: [cart add: 0 of: TusLibrosTestsSupport itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870072!
test02CreditCardWithInvalidNameLongitudShouldRaiseError

	self should: [TusLibrosTestsSupport createInvalidNameLongitudCreditCard.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = CreditCardData invalidCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870084!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870103!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.
	cashier checkout: cart2 withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.
	
	self assert: (cashier hasRegistered: (Association key: cart value: creditCard)).
	self assert: (cashier hasRegistered: (Association key: cart2 value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870128!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	self deny: cart isEmpty ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870137!
test06CartRemembersAddedItems

	| cart |
	
	cart := TusLibrosTestsSupport createCart.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	self assert: (cart includes: TusLibrosTestsSupport itemSellByTheStore)! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:16:04' prior: 50870147!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	cashier2 := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cashier2 checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.
	
	self deny: (cashier hasRegistered: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:16:25' prior: 50870404!
test07CashierRegisteresASingleSell
	|cart cashier creditCard salesBook |
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:16:47' prior: 50870468!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.
	cashier checkout: cart2 withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
	self assert: (salesBook includes: (Association key: cart2 value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:17:01' prior: 50870513!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	cashier2 := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier2 checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook.
	
	self deny: (salesBook includes: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:18:10' prior: 50870577!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	cashier2 := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier2 checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	
	self deny: (salesBook includes: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:18:28' prior: 50870550!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	cashier checkout: cart2 withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
	self assert: (salesBook includes: (Association key: cart2 value: creditCard)).
		! !

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:20:00'!
FAILURE!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:20:00'!
FAILURE!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:20:00'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:20:35'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:20:40'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:20:45'!
FAILURE!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:20:45'!
FAILURE!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:20:45'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:20:54'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:22:19' prior: 50870598!
test09CashierRegistersOnlyItsSells
	|cart cashier cashier2 creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	cashier2 := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier2 checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.
	
	self deny: (salesBook includes: (Association key: cart value: creditCard)).
		! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:22:27'!
FAILURE!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:22:27'!
FAILURE!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:22:27'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:22:43' prior: 50869563!
checkout: aCart withCard: aCreditCard onDate: date registerOn: salesBook   
	|total|
	(aCreditCard isExpiredOn: date) ifTrue: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	salesBook add: (Association key: aCart value: aCreditCard).
	self processTransaccionWith: aCreditCard for: total.
	^total! !

Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LB 6/14/2021 19:22:48'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'LB 6/14/2021 19:22:53' prior: 50863957!
initializeWith: aMerchantProcessor
	merchantProcessor := aMerchantProcessor.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:22:57'!
FAILURE!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:22:57'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:22:57'!
FAILURE!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:23:37' prior: 50870826!
test09CashierRegistersOnlyItsSells
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.

	
	self deny: (salesBook includes: (Association key: cart value: creditCard)).
		! !

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:23:47'!
PASSED!

!methodRemoval: TusLibrosTest #test09CashierRegistersOnlyItsSells stamp: 'LB 6/14/2021 19:24:36'!
test09CashierRegistersOnlyItsSells
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.

	
	self deny: (salesBook includes: (Association key: cart value: creditCard)).
		!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:34:21' prior: 50870263!
test12FakeCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier fakeCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:34:35' prior: 50870181!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier stolenCreditCardErrorMessage].! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:34:46' prior: 50871182!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier stolenCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:34:47'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:35:10' prior: 50870224!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = Cashier noCreditOnCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:35:11'!
FAILURE!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:35:24'!
FAILURE!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:35:24'!
FAILURE!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:35:42'!
FAILURE!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:35:44'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:35:52'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:35:55'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
FAILURE!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:36:47'!
FAILURE!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:36:51'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:36:54'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:36:56'!
FAILURE!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:36:56'!
FAILURE!

!methodRemoval: Cashier #hasRegistered: stamp: 'LB 6/14/2021 19:39:57'!
hasRegistered: aPurchase
	^purchases includes: aPurchase!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:40:20' prior: 50870929!
checkout: aCart withCard: aCreditCard onDate: date registerOn: salesBook   
	|total|
	(aCreditCard isExpiredOn: date) ifTrue: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	self processTransaccionWith: aCreditCard for: total.
	salesBook add: (Association key: aCart value: aCreditCard).
	^total! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:40:23'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:40:26'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:40:26'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:40:26'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:40:26'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:40:26'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:40:26'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:40:26'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:40:26'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:40:26'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:40:29'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:41:30' prior: 50869533!
makeTransactionWith: aCreditCard for: anAmount
	(aCreditCard number = '1111111111111111') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	(aCreditCard number = '2222222222222222') ifTrue: [^self error: self class stolenCreditCardErrorMessage].
	(aCreditCard number = '3333333333333333') ifTrue: [^self error: self class fakeCreditCardErrorMessage].
	! !
!MerchantProcessorSimulator class methodsFor: 'no messages' stamp: 'LB 6/14/2021 19:41:49'!
fakeCreditCardErrorMessage
	^'Error: credit card does not exist'.! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:41:58'!
noCreditOnCreditCardErrorMessage
	^'Error: credit card has no credit'.! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:42:06'!
stolenCreditCardErrorMessage
	^'Error: stolen credit card'.! !

!methodRemoval: Cashier class #fakeCreditCardErrorMessage stamp: 'LB 6/14/2021 19:42:15'!
fakeCreditCardErrorMessage
	^'Error: credit card does not exist'.!

!methodRemoval: Cashier class #noCreditOnCreditCardErrorMessage stamp: 'LB 6/14/2021 19:42:17'!
noCreditOnCreditCardErrorMessage
	^'Error: credit card has no credit'.!

!methodRemoval: Cashier class #stolenCreditCardErrorMessage stamp: 'LB 6/14/2021 19:42:19'!
stolenCreditCardErrorMessage
	^'Error: stolen credit card'.!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:42:45' prior: 50871306!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator noCreditOnCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:42:50' prior: 50871202!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator stolenCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:42:54' prior: 50871161!
test12FakeCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator fakeCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:42:56'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:45:03' prior: 50869546!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWith: aCreditCard for: aTotal.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:45:30' prior: 50871456!
checkout: aCart withCard: aCreditCard onDate: date registerOn: salesBook   
	|total|
	(aCreditCard isExpiredOn: date) ifTrue: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	merchantProcessor makeTransactionWith: aCreditCard for: total.
	salesBook add: (Association key: aCart value: aCreditCard).
	^total! !

!methodRemoval: Cashier #processTransaccionWith:for: stamp: 'LB 6/14/2021 19:45:35'!
processTransaccionWith: aCreditCard for: aTotal
	|response|
	response := merchantProcessor makeTransactionWith: aCreditCard for: aTotal.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:50:37'!
checkout: aCart withCard: aCreditCard onDate: date registerOn: salesBook processWith: aMerchantProcessor    
	|total|
	(aCreditCard isExpiredOn: date) ifTrue: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	merchantProcessor makeTransactionWith: aCreditCard for: total.
	salesBook add: (Association key: aCart value: aCreditCard).
	^total! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:50:37' prior: 50870532!
test07CashierRegisteresASingleSell
	|cart cashier creditCard salesBook |
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:50:37' prior: 50870282!
test03CheckoutOfMultipleProductsShouldReturnTotal
	|cart cashier total expectedTotal creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	total := cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	expectedTotal := TusLibrosTestsSupport itemSellByTheStorePrice * 2 + TusLibrosTestsSupport item2SellByTheStorePrice.
	
	self assert: total equals: expectedTotal.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:50:37' prior: 50870303!
test04ExpiredCreditCardShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCheckoutCart.
	creditCard := TusLibrosTestsSupport createExpiredCreditCard.
	cashier := TusLibrosTestsSupport createCashier.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook processWith: TusLibrosTestsSupport createMerchantProcessor]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Cashier expiredCreditCardErrorMessage]
		! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:50:37' prior: 50870244!
test02CheckoutOf1ProductShouldReturnProductPrice
	|cart cashier total creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	cart add: TusLibrosTestsSupport itemSellByTheStore.
	total := cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	
	self assert: total equals: (TusLibrosTestsSupport itemSellByTheStorePrice).! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:50:37' prior: 50871654!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator stolenCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:50:37' prior: 50871676!
test12FakeCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator fakeCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:50:37' prior: 50870449!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier creditCard|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: TusLibrosTestsSupport createSalesBook processWith: TusLibrosTestsSupport createMerchantProcessor] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:50:37' prior: 50871631!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator noCreditOnCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:50:37' prior: 50870618!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	cashier checkout: cart2 withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
	self assert: (salesBook includes: (Association key: cart2 value: creditCard)).
		! !

!methodRemoval: Cashier #checkout:withCard:onDate:registerOn: stamp: 'LB 6/14/2021 19:50:37'!
checkout: aCart withCard: aCreditCard onDate: date registerOn: salesBook   
	|total|
	(aCreditCard isExpiredOn: date) ifTrue: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	merchantProcessor makeTransactionWith: aCreditCard for: total.
	salesBook add: (Association key: aCart value: aCreditCard).
	^total!
!TusLibrosTestsSupport class methodsFor: 'cashier' stamp: 'LB 6/14/2021 19:51:03'!
createMerchantProcessor
	^MerchantProcessorSimulator new.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:51:04'!
PASSED!
!TusLibrosTestsSupport class methodsFor: 'cashier' stamp: 'LB 6/14/2021 19:51:23' prior: 50866553!
createCashier

	^Cashier new.! !

!methodRemoval: Cashier class #with: stamp: 'LB 6/14/2021 19:51:29'!
with: aMerchantProcessor
	^self new initializeWith: aMerchantProcessor.!

!methodRemoval: Cashier #initializeWith: stamp: 'LB 6/14/2021 19:51:36'!
initializeWith: aMerchantProcessor
	merchantProcessor := aMerchantProcessor.!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:51:40'!
ERROR!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:51:40'!
ERROR!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:51:40'!
ERROR!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:51:40'!
ERROR!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
ERROR!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:51:40'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:52:13'!
ERROR!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:52:13'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'LB 6/14/2021 19:52:32' prior: 50871806!
checkout: aCart withCard: aCreditCard onDate: date registerOn: salesBook processWith: aMerchantProcessor    
	|total|
	(aCreditCard isExpiredOn: date) ifTrue: [^ self error: self class expiredCreditCardErrorMessage].
	total := aCart checkoutTotal.
	aMerchantProcessor makeTransactionWith: aCreditCard for: total.
	salesBook add: (Association key: aCart value: aCreditCard).
	^total! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:52:35'!
PASSED!

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LB 6/14/2021 19:52:39'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:52:41'!
PASSED!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 19:54:18' prior: 50871956!
test01CheckoutOfEmptyCartShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should: [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor] 
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart cantCheckoutEmptyCartError].
		
	self assert: salesBook isEmpty.
	! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:54:19'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

!testRun: #TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 19:54:21'!
PASSED!

----SNAPSHOT----(14 June 2021 20:01:19) CuisUniversity-4532.image priorSource: 17176483!

----SNAPSHOT----(14 June 2021 20:01:26) CuisUniversity-4532.image priorSource: 17310379!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 20:02:50'!
test05CashierRegisteresASingleSell
	|cart cashier creditCard salesBook |
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
		! !

!methodRemoval: TusLibrosTest #test07CashierRegisteresASingleSell stamp: 'LB 6/14/2021 20:02:50'!
test07CashierRegisteresASingleSell
	|cart cashier creditCard salesBook |
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
		!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 20:02:54'!
test06CashierRegistersItsSells
	|cart cart2 cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	cashier checkout: cart2 withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
	self assert: (salesBook includes: (Association key: cart2 value: creditCard)).
		! !

!methodRemoval: TusLibrosTest #test08CashierRegistersItsSells stamp: 'LB 6/14/2021 20:02:54'!
test08CashierRegistersItsSells
	|cart cart2 cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cart2 := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	cashier checkout: cart2 withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.
	
	self assert: (salesBook includes: (Association key: cart value: creditCard)).
	self assert: (salesBook includes: (Association key: cart2 value: creditCard)).
		!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 20:03:00'!
test07CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator noCreditOnCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !

!methodRemoval: TusLibrosTest #test10CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/14/2021 20:03:00'!
test10CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator noCreditOnCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 20:03:13'!
test08StolenCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator stolenCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !

!methodRemoval: TusLibrosTest #test11StolenCreditCardShouldRaiseError stamp: 'LB 6/14/2021 20:03:13'!
test11StolenCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator stolenCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.!
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/14/2021 20:03:18'!
test09FakeCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator fakeCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !

!methodRemoval: TusLibrosTest #test12FakeCreditCardShouldRaiseError stamp: 'LB 6/14/2021 20:03:18'!
test12FakeCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator fakeCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.!

----SNAPSHOT----(14 June 2021 20:03:56) CuisUniversity-4532.image priorSource: 17310469!

----QUIT----(14 June 2021 20:04:50) CuisUniversity-4532.image priorSource: 17318210!

----STARTUP---- (17 June 2021 14:19:09) as /home/lbiglieri/Downloads/build/CuisUniversity/libros2/CuisUniversity-4532.image!

!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'LB 6/17/2021 14:21:02'!
invalidCreditCardErrorMessage
	^'Error: credit card does not exist'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:21:02' prior: 50871584!
makeTransactionWith: aCreditCard for: anAmount
	(aCreditCard number = '1111111111111111') ifTrue: [^self error: self class noCreditOnCreditCardErrorMessage].
	(aCreditCard number = '2222222222222222') ifTrue: [^self error: self class stolenCreditCardErrorMessage].
	(aCreditCard number = '3333333333333333') ifTrue: [^self error: self class invalidCreditCardErrorMessage].
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:21:02' prior: 50872798!
test09FakeCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator invalidCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !

!methodRemoval: MerchantProcessorSimulator class #fakeCreditCardErrorMessage stamp: 'LB 6/17/2021 14:21:02'!
fakeCreditCardErrorMessage
	^'Error: credit card does not exist'.!

!methodRemoval: MerchantProcessorSimulator class #invalidCreditCardErrorMessage stamp: 'LB 6/17/2021 14:21:21'!
invalidCreditCardErrorMessage
	^'Error: credit card does not exist'.!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'LB 6/17/2021 14:21:36'!
invalidCreditCardErrorMessage
	^'Error: credit card has no credit'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:21:36' prior: 50872861!
makeTransactionWith: aCreditCard for: anAmount
	(aCreditCard number = '1111111111111111') ifTrue: [^self error: self class invalidCreditCardErrorMessage].
	(aCreditCard number = '2222222222222222') ifTrue: [^self error: self class stolenCreditCardErrorMessage].
	(aCreditCard number = '3333333333333333') ifTrue: [^self error: self class invalidCreditCardErrorMessage].
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:21:36' prior: 50872703!
test07CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator invalidCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !

!methodRemoval: MerchantProcessorSimulator class #noCreditOnCreditCardErrorMessage stamp: 'LB 6/17/2021 14:21:36'!
noCreditOnCreditCardErrorMessage
	^'Error: credit card has no credit'.!

!methodRemoval: MerchantProcessorSimulator class #invalidCreditCardErrorMessage stamp: 'LB 6/17/2021 14:21:42'!
invalidCreditCardErrorMessage
	^'Error: credit card has no credit'.!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'LB 6/17/2021 14:21:50'!
invalidCreditCardErrorMessage
	^'Error: stolen credit card'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:21:50' prior: 50872917!
makeTransactionWith: aCreditCard for: anAmount
	(aCreditCard number = '1111111111111111') ifTrue: [^self error: self class invalidCreditCardErrorMessage].
	(aCreditCard number = '2222222222222222') ifTrue: [^self error: self class invalidCreditCardErrorMessage].
	(aCreditCard number = '3333333333333333') ifTrue: [^self error: self class invalidCreditCardErrorMessage].
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:21:50' prior: 50872751!
test08StolenCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator invalidCreditCardErrorMessage].
		
	self assert: salesBook isEmpty.! !

!methodRemoval: MerchantProcessorSimulator class #stolenCreditCardErrorMessage stamp: 'LB 6/17/2021 14:21:50'!
stolenCreditCardErrorMessage
	^'Error: stolen credit card'.!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'LB 6/17/2021 14:22:13' prior: 50872968!
invalidCreditCardErrorMessage
	^'Error: invalid credit card'.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test05CashierRegisteresASingleSell stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test06CashierRegistersItsSells stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test07CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test08StolenCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!

!testRun: #TusLibrosTest #test09FakeCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:22:15'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'transaction' stamp: 'LB 6/17/2021 14:24:53' prior: 50872974!
makeTransactionWith: aCreditCard for: anAmount
	((aCreditCard number = '1111111111111111') or: 
		[(aCreditCard number = '2222222222222222')] or: 
			[aCreditCard number = '3333333333333333']) 
		ifTrue: [^self error: self class invalidCreditCardErrorMessage].! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test05CashierRegisteresASingleSell stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test06CashierRegistersItsSells stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test07CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test08StolenCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!

!testRun: #TusLibrosTest #test09FakeCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:24:56'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'transaction' stamp: 'LB 6/17/2021 14:25:04' prior: 50873104!
makeTransactionWith: aCreditCard for: anAmount
	((aCreditCard number = '1111111111111111') or: 
		[aCreditCard number = '2222222222222222'] or: 
			[aCreditCard number = '3333333333333333']) 
		ifTrue: [^self error: self class invalidCreditCardErrorMessage].! !
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'LB 6/17/2021 14:56:31'!
PaymentFailureErrorMessage
	^'Error: invalid credit card'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:56:31' prior: 50873195!
makeTransactionWith: aCreditCard for: anAmount
	((aCreditCard number = '1111111111111111') or: 
		[aCreditCard number = '2222222222222222'] or: 
			[aCreditCard number = '3333333333333333']) 
		ifTrue: [^self error: self class PaymentFailureErrorMessage].! !

!methodRemoval: MerchantProcessorSimulator class #invalidCreditCardErrorMessage stamp: 'LB 6/17/2021 14:56:31'!
invalidCreditCardErrorMessage
	^'Error: invalid credit card'.!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'LB 6/17/2021 14:57:08' prior: 50873206!
PaymentFailureErrorMessage
	^'Error: Payment could not be completed'.! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/17/2021 14:57:19' prior: 50872932!
test07CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator PaymentFailureErrorMessage].
		
	self assert: salesBook isEmpty.! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/17/2021 14:57:30' prior: 50872989!
test08StolenCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator PaymentFailureErrorMessage].
		
	self assert: salesBook isEmpty.! !
!TusLibrosTest methodsFor: 'cashier tests' stamp: 'LB 6/17/2021 14:57:33' prior: 50872876!
test09FakeCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator PaymentFailureErrorMessage].
		
	self assert: salesBook isEmpty.! !

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test05CashierRegisteresASingleSell stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test06CashierRegistersItsSells stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test07CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test08StolenCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!

!testRun: #TusLibrosTest #test09FakeCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:57:41'!
PASSED!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'LB 6/17/2021 14:57:49'!
paymentFailureErrorMessage
	^'Error: Payment could not be completed'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:57:49' prior: 50873212!
makeTransactionWith: aCreditCard for: anAmount
	((aCreditCard number = '1111111111111111') or: 
		[aCreditCard number = '2222222222222222'] or: 
			[aCreditCard number = '3333333333333333']) 
		ifTrue: [^self error: self class paymentFailureErrorMessage].! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:57:49' prior: 50873235!
test07CreditCardWithNoCreditShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createCreditCardWithNoCredit.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator paymentFailureErrorMessage].
		
	self assert: salesBook isEmpty.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:57:49' prior: 50873259!
test08StolenCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createStolenCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator paymentFailureErrorMessage].
		
	self assert: salesBook isEmpty.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'LB 6/17/2021 14:57:49' prior: 50873283!
test09FakeCreditCardShouldRaiseError
	|cart cashier creditCard salesBook|
	cart := TusLibrosTestsSupport createCheckoutCart.
	cashier := TusLibrosTestsSupport createCashier.
	creditCard := TusLibrosTestsSupport createFakeCreditCard.
	salesBook := TusLibrosTestsSupport createSalesBook.
	
	self should:  [cashier checkout: cart withCard: creditCard onDate: TusLibrosTestsSupport today registerOn: salesBook processWith: TusLibrosTestsSupport createMerchantProcessor.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			anError messageText = MerchantProcessorSimulator paymentFailureErrorMessage].
		
	self assert: salesBook isEmpty.! !

!methodRemoval: MerchantProcessorSimulator class #PaymentFailureErrorMessage stamp: 'LB 6/17/2021 14:57:49'!
PaymentFailureErrorMessage
	^'Error: Payment could not be completed'.!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test05CashierRegisteresASingleSell stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test06CashierRegistersItsSells stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test07CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test08StolenCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test09FakeCreditCardShouldRaiseError stamp: 'LB 6/17/2021 14:57:53'!
PASSED!

!testRun: #TusLibrosTest #test01CheckoutOfEmptyCartShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test01CreditCardWithInvalidNumberLongitudShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartsAreCreatedEmpty stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test02CheckoutOf1ProductShouldReturnProductPrice stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test02CreditCardWithInvalidNameLongitudShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test03CheckoutOfMultipleProductsShouldReturnTotal stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test03CreditCardWithInvalidNameCharactersShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test04CreditCardWithInvalidNumberShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test04ExpiredCreditCardShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test05CashierRegisteresASingleSell stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test05CreditCardWithInvalidDateShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test06CartRemembersAddedItems stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test06CashierRegistersItsSells stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test06CreditCardWithSpacesAsNameShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test07CartDoesNotHoldNotAddedItems stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test07CreditCardWithNoCreditShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test08StolenCreditCardShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

!testRun: #TusLibrosTest #test09FakeCreditCardShouldRaiseError stamp: 'LB 6/17/2021 15:19:58'!
PASSED!

----QUIT----(17 June 2021 15:20:05) CuisUniversity-4532.image priorSource: 17318300!