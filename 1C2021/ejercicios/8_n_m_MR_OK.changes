
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #MarsRover category: '' stamp: 'ijgt 5/13/2021 21:05:10'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

MarsRover subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classRemoval: #MarsRover stamp: 'ijgt 5/13/2021 21:05:46'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #MarsRoverTest category: '' stamp: 'ijgt 5/13/2021 21:08:54'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'ijgt 5/13/2021 21:09:17'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'ijgt 5/13/2021 21:09:35'!
test01

	! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'ijgt 5/13/2021 21:39:04'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/13/2021 21:38:33' prior: 50861466!
test01

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self assert: (marsRover position) equals: 0@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/13/2021 21:39:51' prior: 50861477!
test01

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/13/2021 21:39:57'!
ERROR!
!MarsRover class methodsFor: 'creation' stamp: 'ijgt 5/13/2021 21:40:49'!
in: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'creation' stamp: 'ijgt 5/13/2021 21:41:22' prior: 50861495!
in: aPoint heading: aDirection
	! !
!MarsRover class methodsFor: 'creation' stamp: 'ijgt 5/13/2021 21:41:49' prior: 50861500!
in: aCoordinate heading: aDirection
	! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:04:26' prior: 50861347!
asRomanString
	
	^String streamContents: [:stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
			(self-40) convertDigitUsing: stream
		] ifFalse:[
		self convertDigitUsing: stream.
		
		(self//10) timesRepeat: [
			stream nextPut: $X.
			self - 10 convertDigitUsing: stream.	
			]
		]
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 00:09:43'!
test19

	self assert: 45 asRomanString equals: 'XLV'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 00:11:09' prior: 50861583!
test19

	self assert: 35 asRomanString equals: 'XXXV'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:11:11'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:14:58' prior: 50861509!
asRomanString
	
	^String streamContents: [:stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
			(self-40) convertDigitUsing: stream
		] ifFalse:[
		
		(self//10) timesRepeat: [
			stream nextPut: $X.	
			].
		self \\ 10 convertDigitUsing: stream.
		]
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 00:16:02'!
test20

	self assert: 50 asRomanString equals: 'L'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:16:03'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:16:19' prior: 50861663!
asRomanString
	
	^String streamContents: [:stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
			(self-40) convertDigitUsing: stream
		] ifFalse:[
		(self//10) timesRepeat: [
			stream nextPut: $X.	
			].
		self \\ 10 convertDigitUsing: stream.
		]
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:18:03' prior: 50861749!
asRomanString
	
	^String streamContents: [:stream |
		self >= 40 ifTrue:[
			(self >= 50) ifTrue: [
			stream nextPutAll: 'L'.
			(self-50) convertDigitUsing: stream
			] ifFalse: [
			stream nextPutAll: 'XL'.
			(self-40) convertDigitUsing: stream
			]
		] ifFalse:[
		(self//10) timesRepeat: [
			stream nextPut: $X.	
			].
		self \\ 10 convertDigitUsing: stream.
		]
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!methodRemoval: Integer #number:withRomanNumber:andSecondRomanNumber:withStream: stamp: 'ijgt 5/14/2021 00:24:48'!
number: aNumber withRomanNumber: aRomanNumber andSecondRomanNumber: aSecondRomanNumber withStream: stream
	
	(self between: (aNumber + 1) and: (aNumber + 4) ) ifTrue: [ 
		stream nextPutAll: aSecondRomanNumber.
		(self - (aNumber + 1) ) timesRepeat: [stream nextPut: $I] ].
	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:26:29'!
convertTensUsing: stream

	|tens|
	tens := self // 10.
	(tens between: 1 and: 3) ifTrue: [ tens timesRepeat: [stream nextPut: $X] ].
	tens = 4 ifTrue:[stream nextPutAll: 'XL'].
	(tens between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(tens - 5 ) timesRepeat: [stream nextPut: $X] ].
	tens = 9 ifTrue:[stream nextPutAll: 'XC'].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:27:00' prior: 50861761!
asRomanString
	
	^String streamContents: [:stream |
		self convertTensUsing: stream.
		self convertDigitUsing: stream.
	]! !

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'ijgt 5/14/2021 00:27:05'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:27:36'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:28:52' prior: 50861871!
asRomanString
	
	^String streamContents: [:stream |
		self convertTensUsing: stream.
		self \\ 10 convertDigitUsing: stream.
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:28:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 00:31:11'!
test21

	self assert: 102 asRomanString equals: 'CII'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:32:37'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:33:04'!
convertHundredsUsing: stream

	|tens|
	tens := self // 10.
	(tens between: 1 and: 3) ifTrue: [ tens timesRepeat: [stream nextPut: $X] ].
	tens = 4 ifTrue:[stream nextPutAll: 'XL'].
	(tens between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(tens - 5 ) timesRepeat: [stream nextPut: $X] ].
	tens = 9 ifTrue:[stream nextPutAll: 'XC'].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:33:21' prior: 50862444!
convertHundredsUsing: stream

	|hundreds|
	hundreds := self // 10.
	(hundreds between: 1 and: 3) ifTrue: [ hundreds timesRepeat: [stream nextPut: $X] ].
	hundreds = 4 ifTrue:[stream nextPutAll: 'XL'].
	(hundreds between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(hundreds - 5 ) timesRepeat: [stream nextPut: $X] ].
	hundreds = 9 ifTrue:[stream nextPutAll: 'XC'].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:33:57' prior: 50862458!
convertHundredsUsing: stream

	|hundreds|
	hundreds := self // 100.
	(hundreds between: 1 and: 3) ifTrue: [ hundreds timesRepeat: [stream nextPut: $C] ].
	hundreds = 4 ifTrue:[stream nextPutAll: 'CD'].
	(hundreds between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'D'.
		(hundreds - 5 ) timesRepeat: [stream nextPut: $C] ].
	hundreds = 9 ifTrue:[stream nextPutAll: 'CM'].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:34:51' prior: 50862357!
asRomanString
	
	^String streamContents: [:stream |
		self convertHundredsUsing: stream.
		self convertTensUsing: stream.
		self \\ 10 convertDigitUsing: stream.
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:39:31'!
xxx: stream unit: aUnit five: aFive ten: aTen

	(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: aUnit] ].
	self = 4 ifTrue:[stream nextPutAll: aFive].
	(self between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(self - 5 ) timesRepeat: [stream nextPut: aUnit] ].
	self = 9 ifTrue:[stream nextPutAll: aTen].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:39:56'!
convertUsing: stream unit: aUnit five: aFive ten: aTen

	(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: aUnit] ].
	self = 4 ifTrue:[stream nextPutAll: aFive].
	(self between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(self - 5 ) timesRepeat: [stream nextPut: aUnit] ].
	self = 9 ifTrue:[stream nextPutAll: aTen].! !

!methodRemoval: Integer #xxx:unit:five:ten: stamp: 'ijgt 5/14/2021 00:39:56'!
xxx: stream unit: aUnit five: aFive ten: aTen

	(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: aUnit] ].
	self = 4 ifTrue:[stream nextPutAll: aFive].
	(self between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(self - 5 ) timesRepeat: [stream nextPut: aUnit] ].
	self = 9 ifTrue:[stream nextPutAll: aTen].!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:41:18' prior: 50862488!
asRomanString
	
	^String streamContents: [:stream |
		self convertHundredsUsing: stream.
		self convertTensUsing: stream.
		(self \\ 10) convertUsing: stream unit:$I five:$V ten:$X.
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:45:13' prior: 50862608!
asRomanString
	
	^String streamContents: [:stream |
		(self // 100) convertUsing: stream unit:$C five:$D ten:$M.
		(self \\ 100) //10 convertUsing: stream unit:$X five:$L ten:$C.
		(self \\ 10) convertUsing: stream unit:$I five:$V ten:$X.
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:46:05' prior: 50862617!
asRomanString
	
	^String streamContents: [:stream |
		(self // 100) convertUsing: stream unit:$C five:$D ten:$X.
		(self \\ 100) //10 convertUsing: stream unit:$X five:$L ten:$C.
		(self \\ 10) convertUsing: stream unit:$I five:$V ten:$X.
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:46:07'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:46:07'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:46:07'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:46:07'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:46:07'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:46:08'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:46:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:46:08'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:47:52' prior: 50862699!
asRomanString
	
	^String streamContents: [:stream |
		(self // 100) convertUsing: stream unit:$C five:$D ten:$M.
		(self \\ 100) //10 convertUsing: stream unit:$X five:$L ten:$C.
		(self \\ 10) convertUsing: stream unit:$I five:$V ten:$X.
	]! !
!MarsRover class methodsFor: 'creation' stamp: 'ijgt 5/14/2021 15:35:17' prior: 50861504!
in: aCoordinate heading: aDirection
	
	^ self new initializeIn: aCoordinate heading: aDirection.! !
!MarsRover methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 15:36:22'!
initializeIn: aCoordinate heading: aDirection

	position := aCoordinate.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:36:27'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:36:27'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:36:53'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:36:53'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'ijgt 5/14/2021 15:39:20'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'testing' stamp: 'ijgt 5/14/2021 15:39:27' prior: 50862813!
position

	^position! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:39:50'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'ijgt 5/14/2021 15:40:10'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'testing' stamp: 'ijgt 5/14/2021 15:40:14' prior: 50862824!
direction
	
	^direction! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:40:16'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:40:20'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:41:12'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 15:43:59'!
test02

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process "".
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:44:02'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 15:44:22' prior: 50862840!
test02

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:44:25'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:44:56'!
process: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:45:06' prior: 50862863!
process: aString 
	! !

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:45:10'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:45:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:45:10'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:45:46' prior: 50862868!
process: aString
	! !

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:45:51'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:45:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:45:51'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 15:46:28'!
test03

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'f'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:46:44'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:46:44'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:50:11' prior: 50862879!
process: aString
	
	aString = 'f' ifTrue:[position := position + 0@1]! !

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:50:28'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:51:29' prior: 50862904!
process: aString
	
	aString = 'f' ifTrue:[position := position + (0@1)]! !

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:51:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:51:38'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:51:43'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:51:43'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:51:43'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 15:53:36'!
test04

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'b'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:53:38'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:55:01' prior: 50862912!
process: aString
	
	aString = 'f' ifTrue:[position := position + (0@1)].
	aString = 'b' ifTrue:[position := position + (0@-1)].! !

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:55:03'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:55:03'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:55:03'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:55:03'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:55:03'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 15:55:11'!
test05

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:55:13'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 15:55:42' prior: 50862960!
test05

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:55:44'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:56:56' prior: 50862941!
process: aString
	
	aString = 'f' ifTrue:[position := position + (0@1)].
	aString = 'b' ifTrue:[position := position + (0@-1)].
	aString = 'l' ifTrue:[direction := #West].! !

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 15:58:23'!
test06

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'r'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 15:58:25'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:58:47' prior: 50862984!
process: aString
	
	aString = 'f' ifTrue:[position := position + (0@1)].
	aString = 'b' ifTrue:[position := position + (0@-1)].
	aString = 'l' ifTrue:[direction := #West].
	aString = 'r' ifTrue:[direction := #East].! !

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:15:28'!
test07

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self should: [marsRover process: 'h'] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: marsRover invalidCommandErrorDescription.
		self assert: (marsRover position) equals: 0@0.
		self assert: (marsRover direction) equals: #North.
		].! !

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:15:42'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:15:42'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:16:15'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:16:35'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:18:51' prior: 50863018!
process: aString

	aString = '' ifTrue:[].
	aString = 'f' ifTrue:[position := position + (0@1)].
	aString = 'b' ifTrue:[position := position + (0@-1)].
	aString = 'l' ifTrue:[direction := #West].
	aString = 'r' ifTrue:[direction := #East].
	! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:18:56'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:18:56'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:24:24' prior: 50863082!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	^ self invalidCommandErrorDescription. 
	
	! !
!MarsRover methodsFor: 'error descriptions' stamp: 'ijgt 5/14/2021 16:25:47'!
invalidCommandErrorDescription

	^ ''! !
!MarsRover methodsFor: 'error descriptions' stamp: 'ijgt 5/14/2021 16:30:02' prior: 50863124!
invalidCommandErrorDescription

	^ 'Invalid command received'! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:30:43' prior: 50863112!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription. 
	
	! !

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:30:51'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:30:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:31:54'!
test08

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:31:55'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:33:57' prior: 50863134!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:34:16' prior: 50863168!
test08

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:31:54' prior: 50863216!
test08

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:34:54'!
test09

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:34:56'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:35:24' prior: 50863180!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	aString = 'fb' ifTrue:[^position := position + (0@0)].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:35:50'!
test10

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:35:51'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:36:53' prior: 50863246!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	aString = 'fb' ifTrue:[^position := position + (0@0)].
	aString = 'fr' ifTrue:[position := position + (0@1). ^direction := #West].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:37:17'!
test11

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fl'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:37:19'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:37:43' prior: 50863297!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	aString = 'fb' ifTrue:[^position := position + (0@0)].
	aString = 'fr' ifTrue:[position := position + (0@1). ^direction := #West].
	aString = 'fl' ifTrue:[position := position + (0@1). ^direction := #East].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:38:26'!
test12

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'bl'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:38:30'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:39:31' prior: 50863353!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	aString = 'fb' ifTrue:[^position := position + (0@0)].
	aString = 'fr' ifTrue:[position := position + (0@1). ^direction := #East].
	aString = 'fl' ifTrue:[position := position + (0@1). ^direction := #West].
	aString = 'bl' ifTrue:[position := position + (0@-1). ^direction := #West].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:39:32'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:39:32'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:39:35'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:40:01' prior: 50863285!
test10

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:40:03'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:40:05'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:40:14' prior: 50863341!
test11

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fl'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:40:16'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:45:12' prior: 50863414!
process: aString

	aString do:[:aCommand | self runCommand: aCommand].
	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	aString = 'fb' ifTrue:[^position := position + (0@0)].
	aString = 'fr' ifTrue:[position := position + (0@1). ^direction := #East].
	aString = 'fl' ifTrue:[position := position + (0@1). ^direction := #West].
	aString = 'bl' ifTrue:[position := position + (0@-1). ^direction := #West].
	self error: self invalidCommandErrorDescription.! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:46:04' prior: 50863496!
process: aString

	aString do:[:aCommand | self runCommand: aCommand].! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:48:20'!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[^direction := #West].
	aCommand = $r ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:51:09'!
test13

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #South.! !

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 16:51:12'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:56:10' prior: 50863526!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[direction = #North ifTrue:[^ direction := #West].
		direction = #West ifTrue:[^direction := #South].
		].
	aCommand = $r ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:56:44'!
test14

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'lll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #South.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:56:58'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:56:58'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:57:11' prior: 50863625!
test14

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'lll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:57:16'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:57:47' prior: 50863670!
test14

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'lll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:57:48'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:58:06'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:58:48' prior: 50863578!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[direction = #North ifTrue:[^ direction := #West].
		direction = #West ifTrue:[^direction := #South].
		direction = #South ifTrue:[^direction := #East].
		direction = #East ifTrue:[^direction := #North].
		].
	aCommand = $r ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:59:14' prior: 50863696!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[
		direction = #North ifTrue:[^ direction := #West].
		direction = #West ifTrue:[^direction := #South].
		direction = #South ifTrue:[^direction := #East].
		direction = #East ifTrue:[^direction := #North].
		].
	aCommand = $r ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription.! !

Object subclass: #MarsRoverState
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverState category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:00:34'!
Object subclass: #MarsRoverState
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #MarsRoverHeadingNorth
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:02:36'!
MarsRoverState subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:02:45'!
MarsRoverState subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:02:48'!
MarsRoverState subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:02:52'!
MarsRoverState subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverState category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:03:43'!
Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverState methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:04:58'!
rotateLeft: aMarsRover

	self shouldBeImplemented! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:05:10' prior: 50863842!
rotateLeft: aMarsRover

	self subclassResponsibility ! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:05:21'!
rotateRight: aMarsRover

	self subclassResponsibility ! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:05:41' prior: 50863852!
rotateRight: aMarsRover

	self subclassResponsibility! !
!MarsRoverHeadingEast methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:07:44' overrides: 50863847!
rotateLeft: aMarsRover

	aMarsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:10:25' overrides: 50863857!
rotateRight: aMarsRover

	aMarsRover headSouth! !
!MarsRoverHeadingNorth methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:11:01' overrides: 50863857!
rotateRight: aMarsRover

	aMarsRover headEast! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:11:10' overrides: 50863847!
rotateLeft: aMarsRover

	aMarsRover headWest! !
!MarsRoverHeadingSouth methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:11:27' overrides: 50863857!
rotateRight: aMarsRover

	aMarsRover headWest! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:11:37'!
rotateEast: aMarsRover

	aMarsRover headEast! !
!MarsRoverHeadingWest methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:11:50' overrides: 50863857!
rotateRight: aMarsRover

	aMarsRover headNorth! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:11:59' overrides: 50863847!
rotateLeft: aMarsRover

	aMarsRover headSouth! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:12:38'!
headNorth

	direction := #North! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:14:08' prior: 50863901!
headNorth

	direction := MarsRoverHeadingNorth new.! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:14:22'!
headSouth

	direction := MarsRoverHeadingSouth new.! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:14:30'!
headEast

	direction := MarsRoverHeadingEast new.! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:14:38'!
headWest

	direction := MarsRoverHeadingWest new.! !
!MarsRover methodsFor: 'initialize' stamp: 'ijgt 5/14/2021 17:17:08' prior: 50862798!
initializeIn: aCoordinate heading: aDirection

	position := aCoordinate.
	direction := MarsRoverState heading: aDirection.! !
!MarsRoverState class methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:17:25'!
heading: aDirection

	! !
!MarsRoverState class methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:19:55' prior: 50863929!
heading: aDirection

	self allSubclasses detect: [:aCardinalPoint | aCardinalPoint canHandle: aDirection]! !
!MarsRoverState class methodsFor: 'creation' stamp: 'ijgt 5/14/2021 17:21:46' prior: 50863934!
heading: aDirection

	self allSubclasses detect: [:aCardinalPoint | aCardinalPoint canHandle: aDirection]! !
!MarsRoverState class methodsFor: 'creation' stamp: 'ijgt 5/14/2021 17:22:54' prior: 50863941!
heading: aDirection

	^ (self allSubclasses detect: [:aCardinalPoint | aCardinalPoint canHandle: aDirection]) new.! !
!MarsRoverHeadingEast class methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:24:26'!
canHandle: aDirection

	^aDirection = #East.! !
!MarsRoverHeadingNorth class methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:25:26'!
canHandle: aDirection

	^ aDirection = #North! !
!MarsRoverHeadingSouth class methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:25:42'!
canHandle: aDirection

	^ aDirection = #South! !
!MarsRoverHeadingWest class methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:25:59'!
canHandle: aDirection

	^ aDirection = #West! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:26:29'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:26:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:26:29'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:26:29'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:26:29'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:26:29'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:26:29'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:26:34'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:27:43'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:29:00' prior: 50863749!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[^direction rotateLeft: self	].
	aCommand = $r ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:29:05'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:29:05'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:29:05'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:29:28' prior: 50864013!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[^direction rotateLeft: self	].
	aCommand = $r ifTrue:[^direction rotateRight: self].
	self error: self invalidCommandErrorDescription.! !
!MarsRover methodsFor: 'testing' stamp: 'ijgt 5/14/2021 17:35:09' prior: 50862829!
direction
	
	^direction cardinalDirection! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:35:27'!
cardianlDirection

	self subclassResponsibility ! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:35:44'!
cardinalDirection

	self subclassResponsibility ! !

!methodRemoval: MarsRoverState #cardianlDirection stamp: 'ijgt 5/14/2021 17:35:44'!
cardianlDirection

	self subclassResponsibility !
!MarsRoverHeadingEast methodsFor: 'testing' stamp: 'ijgt 5/14/2021 17:36:47' overrides: 50864081!
cardinalDirection

	^#East! !
!MarsRoverHeadingNorth methodsFor: 'testing' stamp: 'ijgt 5/14/2021 17:37:17' overrides: 50864081!
cardinalDirection

	^#North! !
!MarsRoverHeadingSouth methodsFor: 'testing' stamp: 'ijgt 5/14/2021 17:37:38' overrides: 50864081!
cardinalDirection

	^#South! !
!MarsRoverHeadingWest methodsFor: 'testing' stamp: 'ijgt 5/14/2021 17:37:58' overrides: 50864081!
cardinalDirection

	^#West! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:38:11'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:38:11'!
ERROR!
!MarsRoverHeadingSouth methodsFor: 'rotating' stamp: 'ijgt 5/14/2021 17:39:10' overrides: 50863847!
rotateLeft: aMarsRover

	aMarsRover headEast! !

!methodRemoval: MarsRoverHeadingSouth #rotateEast: stamp: 'ijgt 5/14/2021 17:39:10'!
rotateEast: aMarsRover

	aMarsRover headEast!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:39:17'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:41:54'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:41:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:41:58'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:42:03'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 17:43:14'!
test15

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'llf'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #South.! !

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 17:43:17'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:48:07' prior: 50864059!
runCommand: aCommand

	aCommand = $f ifTrue:[^direction moveForward].
	aCommand = $b ifTrue:[^direction moveBackward].
	aCommand = $l ifTrue:[^direction rotateLeft: self	].
	aCommand = $r ifTrue:[^direction rotateRight: self].
	self error: self invalidCommandErrorDescription.! !
!MarsRoverState methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:49:04'!
moveForward: aMarsRover

	self subclassResponsibility! !
!MarsRoverState methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:49:12'!
moveBackward: aMarsRover

	self subclassResponsibility! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:50:25' overrides: 50864257!
moveForward: aMarsRover

	aMarsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:51:27' overrides: 50864261!
moveBackward: aMarsRover

	aMarsRover moveWest! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:52:35' overrides: 50864257!
moveForward: aMarsRover

	aMarsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:52:48' overrides: 50864261!
moveBackward: aMarsRover

	aMarsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:53:05' overrides: 50864257!
moveForward: aMarsRover

	aMarsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:53:15' overrides: 50864261!
moveBackward: aMarsRover

	aMarsRover moveNorth! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:53:28' overrides: 50864257!
moveForward: aMarsRover

	aMarsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:53:36' overrides: 50864261!
moveBackward: aMarsRover

	aMarsRover moveEast! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:54:31'!
moveNorth

	position := position + (0@1)! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:54:41'!
moveSouth

	position := position + (0@-1)! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:54:54'!
moveEast

	position := position + (1@0)! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:55:01'!
moveWest

	position := position + (-1@0)! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:55:11'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:55:51' prior: 50864246!
runCommand: aCommand

	aCommand = $f ifTrue:[^direction moveForward: self].
	aCommand = $b ifTrue:[^direction moveBackward: self].
	aCommand = $l ifTrue:[^direction rotateLeft: self	].
	aCommand = $r ifTrue:[^direction rotateRight: self].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 17:59:25'!
test16

	self should: [MarsRover in: 0@0 heading: #Down.] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: (MarsRover invalidDirectionErrorDescription)
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 17:59:42'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 17:59:42'!
ERROR!
!MarsRover class methodsFor: 'error description' stamp: 'ijgt 5/14/2021 18:00:03'!
invalidDirectionErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error description' stamp: 'ijgt 5/14/2021 18:00:23' prior: 50864456!
invalidDirectionErrorDescription
	
	^'Invalid direction provided'! !
!MarsRover class methodsFor: 'error description' stamp: 'ijgt 5/14/2021 18:00:46' prior: 50864462!
invalidDirectionErrorDescription
	
	^'Invalid direction received'! !

!testRun: #MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 18:00:48'!
FAILURE!
!MarsRoverState class methodsFor: 'creation' stamp: 'ijgt 5/14/2021 18:05:59' prior: 50863948!
heading: aDirection

	^ self allSubclasses detect: [:aCardinalPoint | aCardinalPoint canHandle: aDirection] ifFound: [:aCardinalPoint | aCardinalPoint new] ifNone: [self error: MarsRover invalidDirectionErrorDescription]! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 18:13:27' prior: 50864359!
runCommand: aCommand

	"Se podr�a crear una clase Command para eliminar estos ifs, sobre todo si se espera agregar
	m�s comandos en el futuro."
	aCommand = $f ifTrue:[^direction moveForward: self].
	aCommand = $b ifTrue:[^direction moveBackward: self].
	aCommand = $l ifTrue:[^direction rotateLeft: self	].
	aCommand = $r ifTrue:[^direction rotateRight: self].
	self error: self invalidCommandErrorDescription.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:16:04'!
test01creationIsValid

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 18:16:04'!
test01

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 18:16:23'!
PASSED!

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:17:34'!
test02processEmptyCommandShouldDonNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 18:17:34'!
test02

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:17:45'!
test02processEmptyCommandShouldDoNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test02processEmptyCommandShouldDonNothing stamp: 'ijgt 5/14/2021 18:17:45'!
test02processEmptyCommandShouldDonNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:18:03'!
test02emptyCommandShouldDoNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test02processEmptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:18:03'!
test02processEmptyCommandShouldDoNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:18:52'!
test03forwardCommandMovesForwardHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'f'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 18:18:52'!
test03

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'f'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:19:27'!
test04backwardCommandMovesBackwardHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'b'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 18:19:27'!
test04

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'b'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:19:57'!
test05leftCommandRotatesLeftHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #West.! !

!methodRemoval: MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 18:19:57'!
test05

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #West.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:20:25'!
test06rightCommandRotatesRightHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'r'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!methodRemoval: MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 18:20:25'!
test06

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'r'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:20:55'!
test07invalidCommandShouldRaiseErrorAndDoNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self should: [marsRover process: 'h'] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: marsRover invalidCommandErrorDescription.
		self assert: (marsRover position) equals: 0@0.
		self assert: (marsRover direction) equals: #North.
		].! !

!methodRemoval: MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 18:20:55'!
test07

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self should: [marsRover process: 'h'] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: marsRover invalidCommandErrorDescription.
		self assert: (marsRover position) equals: 0@0.
		self assert: (marsRover direction) equals: #North.
		].!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:21:40'!
test08forwardCommandTwiceMovesForwardTwice

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 18:21:41'!
test08

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:21:51'!
test08forwardCommandTwiceMovesForwardTwiceHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:21:51'!
test08forwardCommandTwiceMovesForwardTwice

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:23:03'!
test09forwardAndBackwardStaysInPlaceHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 18:23:03'!
test09

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:25:15'!
test03forwardCommandMovesForward

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'f'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test03forwardCommandMovesForwardHeadingNorth stamp: 'ijgt 5/14/2021 18:25:15'!
test03forwardCommandMovesForwardHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'f'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:25:24'!
test04backwardCommandMovesBackward

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'b'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test04backwardCommandMovesBackwardHeadingNorth stamp: 'ijgt 5/14/2021 18:25:24'!
test04backwardCommandMovesBackwardHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'b'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:25:39'!
test05leftCommandRotatesLeft

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #West.! !

!methodRemoval: MarsRoverTest #test05leftCommandRotatesLeftHeadingNorth stamp: 'ijgt 5/14/2021 18:25:39'!
test05leftCommandRotatesLeftHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #West.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:26:03'!
test06rightCommandRotatesRight

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'r'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!methodRemoval: MarsRoverTest #test06rightCommandRotatesRightHeadingNorth stamp: 'ijgt 5/14/2021 18:26:03'!
test06rightCommandRotatesRightHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'r'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:26:23'!
test08forwardCommandTwiceMovesForwardTwice

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test08forwardCommandTwiceMovesForwardTwiceHeadingNorth stamp: 'ijgt 5/14/2021 18:26:23'!
test08forwardCommandTwiceMovesForwardTwiceHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:26:33'!
test09forwardAndBackwardStaysInPlace

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test09forwardAndBackwardStaysInPlaceHeadingNorth stamp: 'ijgt 5/14/2021 18:26:33'!
test09forwardAndBackwardStaysInPlaceHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:27:09'!
test10forwardRight

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.! !

!methodRemoval: MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 18:27:09'!
test10

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:27:25'!
test10forwardRightMovesAndRotates

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.! !

!methodRemoval: MarsRoverTest #test10forwardRight stamp: 'ijgt 5/14/2021 18:27:25'!
test10forwardRight

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:27:47'!
test11forwardLeftMovesAndRotates

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fl'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #West.! !

!methodRemoval: MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 18:27:47'!
test11

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fl'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #West.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:28:22'!
test12backwardLeftMovesAndRotates

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'bl'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #West.! !

!methodRemoval: MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 18:28:22'!
test12

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'bl'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #West.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:28:40'!
test13leftLeftRotatesTwice

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #South.! !

!methodRemoval: MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 18:28:40'!
test13

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #South.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:28:58'!
test14leftLeftLeftRotateThrice

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'lll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!methodRemoval: MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 18:28:58'!
test14

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'lll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:29:45'!
test15leftLeftForwardRotatesTwiceAndMoves

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'llf'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #South.! !

!methodRemoval: MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 18:29:45'!
test15

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'llf'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #South.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:30:05'!
test16invalidDirectionShouldRaiseError

	self should: [MarsRover in: 0@0 heading: #Down.] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: (MarsRover invalidDirectionErrorDescription)
		].! !

!methodRemoval: MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 18:30:05'!
test16

	self should: [MarsRover in: 0@0 heading: #Down.] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: (MarsRover invalidDirectionErrorDescription)
		].!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:30:47'!
test17headingSouth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #South.
	marsRover process: 'll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test17headingSouth stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test17headingSouth stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:31:13'!
test18headingEast

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #East.
	marsRover process: 'lr'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test18headingEast stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test17headingSouth stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test18headingEast stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:33:03'!
test19headingWestMovingRotatin

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #West.
	marsRover process: 'ffllbll'.
	self assert: (marsRover position) equals: 3@0.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test19headingWestMovingRotatin stamp: 'ijgt 5/14/2021 18:33:06'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:33:20' prior: 50865224!
test19headingWestMovingRotatin

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #West.
	marsRover process: 'ffllbll'.
	self assert: (marsRover position) equals: -3@0.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test19headingWestMovingRotatin stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test17headingSouth stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test18headingEast stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test19headingWestMovingRotatin stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!methodRemoval: MarsRoverTest #test17headingSouth stamp: 'ijgt 5/14/2021 18:33:38'!
test17headingSouth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #South.
	marsRover process: 'll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!

!methodRemoval: MarsRoverTest #test18headingEast stamp: 'ijgt 5/14/2021 18:33:42'!
test18headingEast

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #East.
	marsRover process: 'lr'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.!

!methodRemoval: MarsRoverTest #test19headingWestMovingRotatin stamp: 'ijgt 5/14/2021 18:33:46'!
test19headingWestMovingRotatin

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #West.
	marsRover process: 'ffllbll'.
	self assert: (marsRover position) equals: -3@0.
	self assert: (marsRover direction) equals: #West.!

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!
!MarsRoverTest methodsFor: 'setUp' stamp: 'ijgt 5/14/2021 18:38:14' overrides: 16927572!
setUp

	! !

Object subclass: #NameOfSubclass
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #NameOfSubclass category: 'MarsRover' stamp: 'ijgt 5/14/2021 18:38:27'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #NameOfSubclass stamp: 'ijgt 5/14/2021 18:38:37'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'aMarsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'ijgt 5/14/2021 18:38:55'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'aMarsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'setUp' stamp: 'ijgt 5/14/2021 18:39:24' prior: 50865391 overrides: 16927572!
setUp

	aMarsRover := MarsRover in: 0@0 heading: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:40:07' prior: 50864540!
test01creationIsValid

	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:40:13'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:40:26' prior: 50864636!
test02emptyCommandShouldDoNothing

	aMarsRover process: ''.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:40:41' prior: 50864817!
test03forwardCommandMovesForward

	aMarsRover process: 'f'.
	self assert: (aMarsRover position) equals: 0@1.
	self assert: (aMarsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:40:56' prior: 50864838!
test04backwardCommandMovesBackward

	aMarsRover process: 'b'.
	self assert: (aMarsRover position) equals: 0@-1.
	self assert: (aMarsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:41:12' prior: 50864859!
test05leftCommandRotatesLeft

	aMarsRover process: 'l'.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #West.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:41:29' prior: 50864879!
test06rightCommandRotatesRight

	aMarsRover process: 'r'.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #East.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:41:48' prior: 50864730!
test07invalidCommandShouldRaiseErrorAndDoNothing

	self should: [aMarsRover process: 'h'] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: aMarsRover invalidCommandErrorDescription.
		self assert: (aMarsRover position) equals: 0@0.
		self assert: (aMarsRover direction) equals: #North.
		].! !

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:42:04' prior: 50864899!
test08forwardCommandTwiceMovesForwardTwice

	aMarsRover process: 'ff'.
	self assert: (aMarsRover position) equals: 0@2.
	self assert: (aMarsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:42:19' prior: 50864921!
test09forwardAndBackwardStaysInPlace

	aMarsRover process: 'fb'.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:42:32' prior: 50864960!
test10forwardRightMovesAndRotates

	aMarsRover process: 'fr'.
	self assert: (aMarsRover position) equals: 0@1.
	self assert: (aMarsRover direction) equals: #East.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:42:47' prior: 50864979!
test11forwardLeftMovesAndRotates

	aMarsRover process: 'fl'.
	self assert: (aMarsRover position) equals: 0@1.
	self assert: (aMarsRover direction) equals: #West.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:43:00' prior: 50864997!
test12backwardLeftMovesAndRotates

	aMarsRover process: 'bl'.
	self assert: (aMarsRover position) equals: 0@-1.
	self assert: (aMarsRover direction) equals: #West.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:43:13' prior: 50865015!
test13leftLeftRotatesTwice

	aMarsRover process: 'll'.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #South.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:43:35' prior: 50865033!
test14leftLeftLeftRotateThrice

	aMarsRover process: 'lll'.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #East.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:43:47' prior: 50865051!
test15leftLeftForwardRotatesTwiceAndMoves

	aMarsRover process: 'llf'.
	self assert: (aMarsRover position) equals: 0@-1.
	self assert: (aMarsRover direction) equals: #South.! !

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!