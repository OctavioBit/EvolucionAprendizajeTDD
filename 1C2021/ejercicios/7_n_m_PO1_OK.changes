----STARTUP---- (20 May 2021 20:02:58) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'nil' stamp: 'bocaccio 5/20/2021 20:22:29'!
test01NewPortfolioHasBalance0
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0! !

!methodRemoval: PortfolioTest #test01 stamp: 'bocaccio 5/20/2021 20:22:29'!
test01
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:23:18'!
test02PortFolioWithOneAccountHasAccountBalance
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	portfolio register: account.
	self assert: portfolio balance equals: 100! !

!methodRemoval: PortfolioTest #test02 stamp: 'bocaccio 5/20/2021 20:23:18'!
test02
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	portfolio register: account.
	self assert: portfolio balance equals: 100!
!PortfolioTest methodsFor: 'nil' stamp: 'bocaccio 5/20/2021 20:31:37'!
createAccountWithDepositedAmount: anAmount 
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:32:12' prior: 50861782!
createAccountWithDepositedAmount: anAmount 
	| anAccount|
	anAccount  := ReceptiveAccount  new.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:33:31' prior: 50861787!
createAccountWithDepositedAmount: anAmount 
	| anAccount|
	anAccount  := ReceptiveAccount  new.
	Deposit register: anAmount on: anAccount.
	^ anAccount 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:35:43' prior: 50861763!
test02PortFolioWithOneAccountHasAccountBalance
	|portfolio |
	portfolio := Portfolio new.
	portfolio register: ( self createAccountWithDepositedAmount: 100).
	self assert: portfolio balance equals: 100! !

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'bocaccio 5/20/2021 20:35:46'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:36:44' prior: 50861643!
test03
	|portfolio1  portfolio2 | 
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 register: (self createAccountWithDepositedAmount: 100).
	portfolio2 register: portfolio1.
	portfolio2 register: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350! !

!testRun: #PortfolioTest #test03 stamp: 'bocaccio 5/20/2021 20:36:47'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:56:33'!
test03PortfolioBalanceWithAPorfolioAndAccountBalance
	|portfolio1  portfolio2 | 
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 register: (self createAccountWithDepositedAmount: 100).
	portfolio2 register: portfolio1.
	portfolio2 register: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350! !

!methodRemoval: PortfolioTest #test03 stamp: 'bocaccio 5/20/2021 20:56:33'!
test03
	|portfolio1  portfolio2 | 
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 register: (self createAccountWithDepositedAmount: 100).
	portfolio2 register: portfolio1.
	portfolio2 register: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:59:04'!
test04PortfolioHasRegisteredAccountDeposit
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	deposit := Deposit register: 100 on: account.
	portfolio register: account .
	
	self assert: (portfolio hasRegistered: deposit) equals: true.! !

!methodRemoval: PortfolioTest #test04 stamp: 'bocaccio 5/20/2021 20:59:04'!
test04
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	deposit := Deposit register: 100 on: account.
	portfolio register: account .
	
	self assert: (portfolio hasRegistered: deposit) equals: true.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 21:01:55'!
test05PorfolioDoesnt
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test05 stamp: 'bocaccio 5/20/2021 21:01:55'!
test05
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit)!

----STARTUP---- (22 May 2021 15:26:44) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'nil' stamp: 'bocaccio 5/20/2021 20:22:29'!
test01NewPortfolioHasBalance0
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0! !

!methodRemoval: PortfolioTest #test01 stamp: 'bocaccio 5/22/2021 15:26:46'!
test01
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:23:18'!
test02PortFolioWithOneAccountHasAccountBalance
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	portfolio register: account.
	self assert: portfolio balance equals: 100! !

!methodRemoval: PortfolioTest #test02 stamp: 'bocaccio 5/22/2021 15:26:47'!
test02
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	Deposit register: 100 on: account.
	portfolio register: account.
	self assert: portfolio balance equals: 100!
!PortfolioTest methodsFor: 'nil' stamp: 'bocaccio 5/20/2021 20:31:37'!
createAccountWithDepositedAmount: anAmount 
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:32:12' prior: 50861935!
createAccountWithDepositedAmount: anAmount 
	| anAccount|
	anAccount  := ReceptiveAccount  new.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:33:31' prior: 50861940!
createAccountWithDepositedAmount: anAmount 
	| anAccount|
	anAccount  := ReceptiveAccount  new.
	Deposit register: anAmount on: anAccount.
	^ anAccount 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:35:43' prior: 50861916!
test02PortFolioWithOneAccountHasAccountBalance
	|portfolio |
	portfolio := Portfolio new.
	portfolio register: ( self createAccountWithDepositedAmount: 100).
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:36:44' prior: 50861643!
test03
	|portfolio1  portfolio2 | 
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 register: (self createAccountWithDepositedAmount: 100).
	portfolio2 register: portfolio1.
	portfolio2 register: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:56:33'!
test03PortfolioBalanceWithAPorfolioAndAccountBalance
	|portfolio1  portfolio2 | 
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 register: (self createAccountWithDepositedAmount: 100).
	portfolio2 register: portfolio1.
	portfolio2 register: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350! !

!methodRemoval: PortfolioTest #test03 stamp: 'bocaccio 5/22/2021 15:26:47'!
test03
	|portfolio1  portfolio2 | 
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 register: (self createAccountWithDepositedAmount: 100).
	portfolio2 register: portfolio1.
	portfolio2 register: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 20:59:04'!
test04PortfolioHasRegisteredAccountDeposit
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	deposit := Deposit register: 100 on: account.
	portfolio register: account .
	
	self assert: (portfolio hasRegistered: deposit) equals: true.! !

!methodRemoval: PortfolioTest #test04 stamp: 'bocaccio 5/22/2021 15:26:47'!
test04
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	deposit := Deposit register: 100 on: account.
	portfolio register: account .
	
	self assert: (portfolio hasRegistered: deposit) equals: true.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/20/2021 21:01:55'!
test05PorfolioDoesnt
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test05 stamp: 'bocaccio 5/22/2021 15:26:47'!
test05
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!ReceptiveAccount methodsFor: 'balance' stamp: 'bocaccio 5/22/2021 15:35:31' prior: 50861473!
balance

	^transactions sum: [ :aTransaction | aTransaction valueForBalanceFor: self ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bocaccio 5/22/2021 15:36:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:36:09'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:36:09'!
ERROR!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:36:23'!
valueForBalanceFor: aReceptiveAccount 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:36:34' prior: 50862066!
valueForBalanceFor: aReceptiveAccount 
	self subclassResponsibility .! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:36:36'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:36:48' overrides: 50862072!
valueForBalanceFor: aReceptiveAccount 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:38:30' prior: 50862082 overrides: 50862072!
valueForBalanceFor: aReceptiveAccount 
	aReceptiveAccount valueOfADepositWithAmount: self value. ! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:38:35'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:38:44'!
valueOfADepositWithAmount: aSmallInteger 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:39:11' prior: 50862098!
valueOfADepositWithAmount: aDepositValue
 ^ aDepositValue .
	! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:39:13'!
FAILURE!
!Deposit methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:39:33' prior: 50862088 overrides: 50862072!
valueForBalanceFor: aReceptiveAccount 
	aReceptiveAccount valueOfADepositWithAmount: (self value). ! !
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) valueForBalanceFor:
				(self coverAll:
					{81 to: 84}) ] valueCoveringAll:
				{61 to: 79} ]
		ifEmpty: [
			0 coverAll:
				{99 to: 99} ]] valueCoveringAll:
		{25 to: 28. 88 to: 95}.! !
!Behavior method!
valueForBalanceFor: aReceptiveAccount
	[
	(aReceptiveAccount
		cover: (41 to: 57)
		declaredAt: (21 to: 37)) valueOfADepositWithAmount:
		([
		(self coverAll:
			{87 to: 90}) value ] valueCoveringAll:
			{92 to: 96}) ] valueCoveringAll:
		{59 to: 84}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
valueOfADepositWithAmount: aDepositValue
	^ aDepositValue
		cover: (45 to: 57)
		declaredAt: (28 to: 40).! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:40:00'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:40:00'!
FAILURE!
!Deposit methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:40:35' prior: 50862114 overrides: 50862072!
valueForBalanceFor: aReceptiveAccount 
	^ aReceptiveAccount valueOfADepositWithAmount: (self value). ! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:40:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:40:45'!
PASSED!
!Withdraw methodsFor: 'nil' stamp: 'bocaccio 5/22/2021 15:41:36' overrides: 50862072!
valueForBalanceFor: aReceptiveAccount 
	^ aReceptiveAccount  value! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:42:08' prior: 50862214 overrides: 50862072!
valueForBalanceFor: aReceptiveAccount 
	^ aReceptiveAccount valueOfAWithdrawWithAmount: (self value).! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:42:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:42:19'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:42:26'!
valueOfAWithdrawWithAmount: aSmallInteger 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:42:47' prior: 50862235!
valueOfAWithdrawWithAmount: aWithdrawValue 
	^ aWithdrawValue  negated.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:42:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bocaccio 5/22/2021 15:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 15:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bocaccio 5/22/2021 15:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bocaccio 5/22/2021 15:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bocaccio 5/22/2021 15:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bocaccio 5/22/2021 15:42:53'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:54:39'!
test05xxx
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test05PorfolioDoesnt stamp: 'bocaccio 5/22/2021 15:54:39'!
test05PorfolioDoesnt
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:57:41'!
test06
	|portfolio account  |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 15:58:26' prior: 50862297!
test06
	|portfolio account  |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio  register: account.

	
! !

----End fileIn of /home/sebasbocaccio/Desktop/FACU/Inge1/EjerciciosCatedra/2021-1c/15-Stack/Stack-Solution-2.st----!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:05:47' prior: 50862304!
test06
	|portfolio account  |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio  register: account.
	
	self
		should: [ portfolio register: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered ]

	
! !

!testRun: #PortfolioTest #test06 stamp: 'bocaccio 5/22/2021 16:05:56'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'bocaccio 5/22/2021 16:05:56'!
FAILURE!
!Portfolio class methodsFor: 'nil' stamp: 'bocaccio 5/22/2021 16:06:53'!
portfolioAccountAlreadyRegistered
	^ 'You already registered the account'! !

!testRun: #PortfolioTest #test06 stamp: 'bocaccio 5/22/2021 16:07:14'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'bocaccio 5/22/2021 16:07:14'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:17:17' prior: 50861734!
hasRegistered: aTransaction
	| isRegistered|
	isRegistered := false.
	elements do: [:element| isRegistered := (element hasRegistered: aTransaction) or: isRegistered.  ] .
	^ isRegistered .
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:18:44'!
addElem: anElement
	
	elements add:  anElement ! !

!methodRemoval: Portfolio #register: stamp: 'bocaccio 5/22/2021 16:18:44'!
register: anElement
	
	elements add:  anElement !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:19:20'!
register: anElement
	
	elements add:  anElement ! !

!methodRemoval: Portfolio #addElem: stamp: 'bocaccio 5/22/2021 16:19:20'!
addElem: anElement
	
	elements add:  anElement !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:20:41'!
addElem: anElement
	
	elements add:  anElement ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'bocaccio 5/22/2021 16:20:41'!
addElem: aTransaction

	transactions add: aTransaction 
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:20:41' prior: 50862576!
test06
	|portfolio account  |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio  addElem: account.
	
	self
		should: [ portfolio addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered ]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:20:41' prior: 50861956!
test02PortFolioWithOneAccountHasAccountBalance
	|portfolio |
	portfolio := Portfolio new.
	portfolio addElem: ( self createAccountWithDepositedAmount: 100).
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:20:41' prior: 50861979!
test03PortfolioBalanceWithAPorfolioAndAccountBalance
	|portfolio1  portfolio2 | 
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 addElem: (self createAccountWithDepositedAmount: 100).
	portfolio2 addElem: portfolio1.
	portfolio2 addElem: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350! !
!AccountTransaction class methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:20:41' prior: 50861333!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account addElem: transaction.
		
	^ transaction! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:20:41' prior: 50862006!
test04PortfolioHasRegisteredAccountDeposit
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	deposit := Deposit register: 100 on: account.
	portfolio addElem: account .
	
	self assert: (portfolio hasRegistered: deposit) equals: true.! !

!methodRemoval: Portfolio #register: stamp: 'bocaccio 5/22/2021 16:20:41'!
register: anElement
	
	elements add:  anElement !

!methodRemoval: ReceptiveAccount #register: stamp: 'bocaccio 5/22/2021 16:20:41'!
register: aTransaction

	transactions add: aTransaction 
!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bocaccio 5/22/2021 16:21:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 16:21:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bocaccio 5/22/2021 16:21:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bocaccio 5/22/2021 16:21:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bocaccio 5/22/2021 16:21:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bocaccio 5/22/2021 16:21:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bocaccio 5/22/2021 16:21:21'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'bocaccio 5/22/2021 16:21:29'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'bocaccio 5/22/2021 16:21:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'bocaccio 5/22/2021 16:21:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'bocaccio 5/22/2021 16:21:29'!
PASSED!

!testRun: #PortfolioTest #test05xxx stamp: 'bocaccio 5/22/2021 16:21:29'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'bocaccio 5/22/2021 16:21:29'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'bocaccio 5/22/2021 16:21:29'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'bocaccio 5/22/2021 16:22:33'!
PASSED!

----End fileIn of /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/Packages/TerseGuide.pck.st----!
!Portfolio methodsFor: 'nil' stamp: 'bocaccio 5/22/2021 16:27:28'!
includesAnAccount: anAccount
	^ (elements includes: anAccount)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:29:17' prior: 50862632!
addElem: anElement
	(self includesAnAccount: anElement) ifTrue:[ ^ Portfolio]. 
	elements add:  anElement ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:30:37' prior: 50865696!
addElem: anElement
	(self includesAnAccount: anElement) ifTrue:[ ]. 
	elements add:  anElement ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:31:23' prior: 50865703!
addElem: anElement
	(self includesAnAccount: anElement) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	elements add:  anElement ! !

!testRun: #PortfolioTest #test06 stamp: 'bocaccio 5/22/2021 16:31:33'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:41:16'!
test07
	|portfolio1 portfolio2 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio2 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered ]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:42:25' prior: 50865721!
test07
	|portfolio1 portfolio2 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio2 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 16:42:36'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 16:42:36'!
FAILURE!

anAccount ReceptiveAccount!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:46:35' prior: 50865710!
addElem: anElement
	(self includesAnAccount: anElement) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	elements add:  anElement.
	anElement addedToPortfolio: self. ! !

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 16:47:03'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 16:47:03'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:47:22'!
addedToPortfolio: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'bocaccio 5/22/2021 16:49:15'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions xxx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:49:10' prior: 50865773!
addedToPortfolio: aPortfolio 
	xxx add: aPortfolio .! !

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 16:49:21'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'bocaccio 5/22/2021 16:49:56' prior: 50861434 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	xxx:= OrderedCollection new.! !

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 16:50:08'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 16:50:08'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:50:24'!
addedToPortfolio: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'bocaccio 5/22/2021 16:51:10'!
Object subclass: #Portfolio
	instanceVariableNames: 'elements xxx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:51:08' prior: 50865806!
addedToPortfolio: aPortfolio 
	xxx add: aPortfolio .! !

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 16:51:16'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'bocaccio 5/22/2021 16:51:41' prior: 50861633 overrides: 16896425!
initialize

	elements:= OrderedCollection new.
	xxx := OrderedCollection  new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:55:25' prior: 50865690!
includesAnAccount: anAccount
	^ (elements includes: anAccount) or: ( self zzz)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:55:39' prior: 50865833!
includesAnAccount: anAccount
	^ (elements includes: anAccount)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:56:23' prior: 50865759!
addElem: anElement
	((self includesAnAccount: anElement) or: ( self zzz)) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	elements add:  anElement.
	anElement addedToPortfolio: self. ! !
!Portfolio methodsFor: 'nil' stamp: 'bocaccio 5/22/2021 16:56:32'!
zzz! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 16:56:45' prior: 50865854!
zzz
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 17:00:58'!
zzz: anAccount
	| hasAccount|
	hasAccount  := false.
	xxx do: [:aPortfolio| hasAccount := (aPortfolio hasRegistered: anAccount) or: hasAccount ].
	^ hasAccount ! !

!methodRemoval: Portfolio #zzz stamp: 'bocaccio 5/22/2021 17:01:07'!
zzz
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 17:01:49' prior: 50865845!
addElem: anElement
	((self includesAnAccount: anElement) or: ( self zzz: anElement)) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	elements add:  anElement.
	anElement addedToPortfolio: self. ! !

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 17:02:02'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 17:02:02'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 17:05:50' prior: 50865861!
zzz: anAccount
	| hasAccount|
	hasAccount  := false.
	xxx do: [:aPortfolio| hasAccount := ((aPortfolio hasRegistered: anAccount) or: hasAccount) ].
	^ hasAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 17:06:43' prior: 50865887!
zzz: anAccount
	| hasAccount|
	hasAccount  := false.
	xxx do: [:aPortfolio| hasAccount := ((aPortfolio includesAccount: anAccount) or: hasAccount) ].
	^ hasAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 17:06:51'!
includesAccount: anAccount
	^ (elements includes: anAccount)! !

!methodRemoval: Portfolio #includesAnAccount: stamp: 'bocaccio 5/22/2021 17:06:54'!
includesAnAccount: anAccount
	^ (elements includes: anAccount)!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 17:07:10' prior: 50865872!
addElem: anElement
	((self includesAccount: anElement) or: ( self zzz: anElement)) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	elements add:  anElement.
	anElement addedToPortfolio: self. ! !

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 17:07:18'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 17:07:18'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 17:08:22'!
yyy
	^ 'The account is in a portfolio that includes this portfolio'! !

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 17:08:37'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 17:08:37'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/22/2021 17:09:58' prior: 50865914!
addElem: anElement
	(self includesAccount: anElement)  ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	( self zzz: anElement)  ifTrue:[ self error: Portfolio yyy].
	elements add:  anElement.
	anElement addedToPortfolio: self. ! !

!testRun: #PortfolioTest #test07 stamp: 'bocaccio 5/22/2021 17:10:16'!
PASSED!

----QUIT----(22 May 2021 17:10:37) CuisUniversity-4532.image priorSource: 16963018!

----STARTUP---- (22 May 2021 17:13:11) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


Object subclass: #FinancialObjects
	instanceVariableNames: 'elements xxx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialObjects category: 'Portfolio-Ejercicio' stamp: 'AM 5/22/2021 17:14:34'!
Object subclass: #FinancialObjects
	instanceVariableNames: 'elements xxx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialObjects subclass: #Portfolio
	instanceVariableNames: 'elements xxx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialObjects subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 5/22/2021 17:15:11'!
FinancialObjects subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialObjects subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'AM 5/22/2021 17:15:27'!
FinancialObjects subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AM 5/22/2021 17:16:04'!
register: aTransaction

	transactions add: aTransaction 
! !

!methodRemoval: ReceptiveAccount #addElem: stamp: 'AM 5/22/2021 17:16:32'!
addElem: aTransaction

	transactions add: aTransaction 
!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'AM 5/22/2021 17:16:42' prior: 50862682!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/22/2021 17:17:51'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/22/2021 17:17:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/22/2021 17:17:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/22/2021 17:17:51'!
PASSED!

!testRun: #PortfolioTest #test05xxx stamp: 'AM 5/22/2021 17:17:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AM 5/22/2021 17:17:51'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AM 5/22/2021 17:17:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 5/22/2021 17:17:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 5/22/2021 17:17:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 5/22/2021 17:17:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 5/22/2021 17:17:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 5/22/2021 17:17:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 5/22/2021 17:17:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 5/22/2021 17:17:56'!
PASSED!
!FinancialObjects methodsFor: 'no messages' stamp: 'AM 5/22/2021 17:19:01'!
addedToPortfolio: aPortfolio 
	xxx add: aPortfolio .! !

!methodRemoval: Portfolio #addedToPortfolio: stamp: 'AM 5/22/2021 17:19:14'!
addedToPortfolio: aPortfolio 
	xxx add: aPortfolio .!

!methodRemoval: ReceptiveAccount #addedToPortfolio: stamp: 'AM 5/22/2021 17:19:24'!
addedToPortfolio: aPortfolio 
	xxx add: aPortfolio .!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 17:21:26'!
test08
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	self
		should: [ portfolio3 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !

!testRun: #PortfolioTest #test08 stamp: 'AM 5/22/2021 17:21:37'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'AM 5/22/2021 17:21:37'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'AM 5/22/2021 17:22:09'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'AM 5/22/2021 17:22:09'!
FAILURE!
!Portfolio methodsFor: 'nil' stamp: 'AM 5/22/2021 17:41:17' prior: 50865827 overrides: 16896425!
initialize

	elements:= OrderedCollection new.
	xxx := OrderedCollection  new.
	xxx add: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 17:44:07' prior: 50865940!
addElem: anElement
	(self includesAccount: anElement)  ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	( self zzz: anElement)  ifTrue:[ self error: Portfolio yyy].
	
	"1)fijarme que no este entre mis cuentas"
	"2) actualizar las raices"
	
	elements add:  anElement.
	anElement addedToPortfolio: self. ! !
!FinancialObjects methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 17:45:42' prior: 50866067!
addedToPortfolio: aPortfolio 
	xxx add: (aPortfolio raices).! !
!Portfolio methodsFor: 'nil' stamp: 'AM 5/22/2021 17:47:20'!
raices
^xxx! !

Object subclass: #FinancialObjects
	instanceVariableNames: 'elements roots'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialObjects category: 'Portfolio-Ejercicio' stamp: 'AM 5/22/2021 17:47:56'!
Object subclass: #FinancialObjects
	instanceVariableNames: 'elements roots'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'nil' stamp: 'AM 5/22/2021 17:48:12' prior: 50866107 overrides: 16896425!
initialize

	elements:= OrderedCollection new.
	roots := OrderedCollection  new.
	roots add: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 17:48:21' prior: 50866131!
raices
^roots! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 17:48:27' prior: 50865896!
zzz: anAccount
	| hasAccount|
	hasAccount  := false.
	roots do: [:aPortfolio| hasAccount := ((aPortfolio includesAccount: anAccount) or: hasAccount) ].
	^ hasAccount ! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 5/22/2021 17:48:55' prior: 50865795 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	roots:= OrderedCollection new.! !
!FinancialObjects methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 17:49:13' prior: 50866127!
addedToPortfolio: aPortfolio 
	roots add: (aPortfolio raices).! !

|rMias rPadre rAbuelo|

rMias:= OrderedCollection new.
rPadre:= OrderedCollection new.
rAbuelo:= OrderedCollection new.

rPadre add: #Padre.
rPadre.!

|rMias rPadre rAbuelo|

rMias:= OrderedCollection new.
rPadre:= OrderedCollection new.
rAbuelo:= OrderedCollection new.

rPadre add: #Padre.
rMias add: rPadre.
rMias !

|rMias rPadre rAbuelo|

rMias:= OrderedCollection new.
rPadre:= OrderedCollection new.
rAbuelo:= OrderedCollection new.

rPadre add: #Padre.
rMias add: rPadre.

rAbuelo add: #Abuelo.

rPadre remove: #Padre.
rPadre add: rAbuelo. 
rPadre!

|rMias rPadre rAbuelo|

rMias:= OrderedCollection new.
rPadre:= OrderedCollection new.
rAbuelo:= OrderedCollection new.

rPadre add: #Padre.
rMias add: rPadre.

rAbuelo add: #Abuelo.

rPadre remove: #Padre.
rPadre add: rAbuelo. 
rMias !

|rMias rPadre rAbuelo rTioAbuelo|

rMias:= OrderedCollection new.
rPadre:= OrderedCollection new.
rAbuelo:= OrderedCollection new.
rTioAbuelo:=OrderedCollection new.

rPadre add: #Padre.
rMias add: rPadre.

rAbuelo add: #Abuelo.

rPadre remove: #Padre.
rPadre add: rAbuelo. 

rTioAbuelo add: #TioAbuelo.
rPadre add: rTioAbuelo.
rPadre.!

|rMias rPadre rAbuelo rTioAbuelo|

rMias:= OrderedCollection new.
rPadre:= OrderedCollection new.
rAbuelo:= OrderedCollection new.
rTioAbuelo:=OrderedCollection new.

rPadre add: #Padre.
rMias add: rPadre.

rAbuelo add: #Abuelo.

rPadre remove: #Padre.
rPadre add: rAbuelo. 

rTioAbuelo add: #TioAbuelo.
rPadre add: rTioAbuelo.
rMias. !
!FinancialObjects methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:05:08' prior: 50866174!
addedToPortfolio: aPortfolio 

	(roots includes: self) ifTrue:[roots remove:self].
	roots add: (aPortfolio raices).! !

|rMias rPadre rAbuelo rTioAbuelo|

rMias:= OrderedCollection new.
rPadre:= OrderedCollection new.
rAbuelo:= OrderedCollection new.
rTioAbuelo:=OrderedCollection new.

rPadre add: #Padre.
rMias add: rPadre.

rAbuelo add: #Abuelo.

rPadre:= rAbuelo. 

rTioAbuelo add: #TioAbuelo.
rPadre add: rTioAbuelo.
rMias.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:14:45' prior: 50866159!
zzz: anAccount
	| hasAccount|
	hasAccount  := false.
	roots do: [:aPortfolio| hasAccount := ((aPortfolio includesAccount: anAccount) or: (aPortfolio zzz: anAccount) or: hasAccount) ].
	^ hasAccount ! !
!FinancialObjects methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:15:59' prior: 50866226!
addedToPortfolio: aPortfolio 

	"(roots includes: self) ifTrue:[roots remove:self]."
	roots add: aPortfolio.! !
!Portfolio methodsFor: 'nil' stamp: 'AM 5/22/2021 18:23:30' prior: 50866148 overrides: 16896425!
initialize

	elements:= OrderedCollection new.
	roots := OrderedCollection  new.! !

!testRun: #PortfolioTest #test07 stamp: 'AM 5/22/2021 18:23:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AM 5/22/2021 18:23:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:25:57'!
test09

	|portfolio1 portfolio2 portfolio3 account  account2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addElem: account.
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:26:05' prior: 50866270!
test09

	|portfolio1 portfolio2 portfolio3 account  account2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addElem: account2.
	
	
	


	
! !

!testRun: #PortfolioTest #test09 stamp: 'AM 5/22/2021 18:26:09'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:26:28' prior: 50866285!
test09

	|portfolio1 portfolio2 portfolio3 account  account2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addElem: account2.
	self halt.
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:27:09' prior: 50866302!
test09

	|portfolio1 portfolio2 portfolio3 account  account2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addElem: account2.
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:27:25'!
test10
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	self
		should: [ portfolio3 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:28:52' prior: 50866331!
test10
	|portfolio1 portfolio2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio1 addElem: portfolio2 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !

!testRun: #PortfolioTest #test10 stamp: 'AM 5/22/2021 18:28:57'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'AM 5/22/2021 18:28:57'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:29:55' prior: 50866349!
test10
	|portfolio1 portfolio2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio1 addElem: portfolio2 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]

	
! !

!testRun: #PortfolioTest #test10 stamp: 'AM 5/22/2021 18:29:59'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:39:47' prior: 50865904!
includesAccount: anAccount
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:= (anElement = anAccount) or: (anElement includesAccount: anAccount)].
	^isIncluded.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:39:58' prior: 50866383!
includesAccount: anAccount
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:= (anElement = anAccount) or: (anElement includesAccount: anAccount) or: isIncluded].
	^isIncluded.! !

!testRun: #PortfolioTest #test07 stamp: 'AM 5/22/2021 18:40:17'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'AM 5/22/2021 18:40:17'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 5/22/2021 18:41:35'!
includesAnAccount: anAccount

	^ (self = anAccount)
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:41:47' prior: 50866392!
includesAccount: anAccount
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement includesAccount: anAccount) or: isIncluded].
	^isIncluded.! !

!testRun: #PortfolioTest #test07 stamp: 'AM 5/22/2021 18:41:55'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'AM 5/22/2021 18:41:55'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 5/22/2021 18:42:06'!
includesAccount: anAccount

	^ (self = anAccount)
! !

!methodRemoval: ReceptiveAccount #includesAnAccount: stamp: 'AM 5/22/2021 18:42:16'!
includesAnAccount: anAccount

	^ (self = anAccount)
!

!testRun: #PortfolioTest #test07 stamp: 'AM 5/22/2021 18:42:26'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/22/2021 18:42:34'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/22/2021 18:42:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/22/2021 18:42:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/22/2021 18:42:34'!
PASSED!

!testRun: #PortfolioTest #test05xxx stamp: 'AM 5/22/2021 18:42:34'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AM 5/22/2021 18:42:34'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AM 5/22/2021 18:42:34'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AM 5/22/2021 18:42:34'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AM 5/22/2021 18:42:34'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AM 5/22/2021 18:42:34'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'AM 5/22/2021 18:42:34'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'AM 5/22/2021 18:42:52'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'AM 5/22/2021 18:42:52'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:43:23'!
test11
	|portfolio1 portfolio2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio1 addElem: portfolio2 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:45:17' prior: 50866367!
test10
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: portfolio2.
	portfolio1 addElem: portfolio3.
	portfolio2 addElem: account.
	
	self
		should: [ portfolio3 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]! !

!testRun: #PortfolioTest #test10 stamp: 'AM 5/22/2021 18:45:22'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:46:46'!
test05PortfolioShouldntHaveDeposit
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test05xxx stamp: 'AM 5/22/2021 18:46:46'!
test05xxx
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:47:23'!
test05PortfolioShouldntHaveDepositAdded
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test05PortfolioShouldntHaveDeposit stamp: 'AM 5/22/2021 18:47:23'!
test05PortfolioShouldntHaveDeposit
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:47:53'!
test06PortfolioCantRegisterSameAccountTwice
	|portfolio account  |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio  addElem: account.
	
	self
		should: [ portfolio addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered ]

	
! !

!methodRemoval: PortfolioTest #test06 stamp: 'AM 5/22/2021 18:47:54'!
test06
	|portfolio account  |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio  addElem: account.
	
	self
		should: [ portfolio addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered ]

	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:50:23'!
test07CannotAddAccountInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio2 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !

!methodRemoval: PortfolioTest #test07 stamp: 'AM 5/22/2021 18:50:23'!
test07
	|portfolio1 portfolio2 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio2 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:51:13'!
test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	self
		should: [ portfolio3 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !

!methodRemoval: PortfolioTest #test08 stamp: 'AM 5/22/2021 18:51:13'!
test08
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	self
		should: [ portfolio3 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:52:41'!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount

	|portfolio1 portfolio2 portfolio3 account  account2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addElem: account2.
	
	
	


	
! !

!methodRemoval: PortfolioTest #test09 stamp: 'AM 5/22/2021 18:52:41'!
test09

	|portfolio1 portfolio2 portfolio3 account  account2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addElem: account2.
	
	
	


	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:53:36'!
test10PorfolioCannotAddAccountAlreadyInCousinLeaf
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: portfolio2.
	portfolio1 addElem: portfolio3.
	portfolio2 addElem: account.
	
	self
		should: [ portfolio3 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]! !

!methodRemoval: PortfolioTest #test10 stamp: 'AM 5/22/2021 18:53:36'!
test10
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: portfolio2.
	portfolio1 addElem: portfolio3.
	portfolio2 addElem: account.
	
	self
		should: [ portfolio3 addElem: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:54:31'!
test11CannotAddEmptyPortfolioTwiceInSamePorfolio
	|portfolio1 portfolio2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio1 addElem: portfolio2 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]

	
! !

!methodRemoval: PortfolioTest #test11 stamp: 'AM 5/22/2021 18:54:31'!
test11
	|portfolio1 portfolio2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio1 addElem: portfolio2 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]

	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:55:24' prior: 50866635!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount

	|portfolio1 portfolio2 portfolio3 account  account2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addElem: account.
	portfolio1 addElem: portfolio2.
	portfolio2 addElem: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addElem: account2.
	
	self assert: (portfolio3 includesAccount: account2).
	
	
	


	
! !

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/22/2021 18:55:28'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:57:21'!
test07CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 emptyPortfolio  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	emptyPortfolio := Portfolio new.
	portfolio1 addElem: emptyPortfolio.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio2 addElem: emptyPortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 18:57:33'!
test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 emptyPortfolio  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	emptyPortfolio := Portfolio new.
	portfolio1 addElem: emptyPortfolio.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio2 addElem: emptyPortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !

!methodRemoval: PortfolioTest #test07CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/22/2021 18:57:38'!
test07CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 emptyPortfolio  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	emptyPortfolio := Portfolio new.
	portfolio1 addElem: emptyPortfolio.
	portfolio1 addElem: portfolio2.
	
	self
		should: [ portfolio2 addElem: emptyPortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/22/2021 18:57:56'!
FAILURE!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/22/2021 18:57:56'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:02:41' prior: 50866411!
includesAccount: anAccount
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=anAccount) or:(anElement includesAccount: anAccount) or: isIncluded].
	^isIncluded.! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/22/2021 19:02:48'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/22/2021 19:02:48'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:04:11'!
isInUpperPortfolioTree: anAccount
	| hasAccount|
	hasAccount  := false.
	roots do: [:aPortfolio| hasAccount := ((aPortfolio includesAccount: anAccount) or: (aPortfolio zzz: anAccount) or: hasAccount) ].
	^ hasAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:04:11' prior: 50866243!
zzz: anAccount
	| hasAccount|
	hasAccount  := false.
	roots do: [:aPortfolio| hasAccount := ((aPortfolio includesAccount: anAccount) or: (aPortfolio isInUpperPortfolioTree: anAccount) or: hasAccount) ].
	^ hasAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:04:11' prior: 50866113!
addElem: anElement
	(self includesAccount: anElement)  ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	( self isInUpperPortfolioTree: anElement)  ifTrue:[ self error: Portfolio yyy].
	
	"1)fijarme que no este entre mis cuentas"
	"2) actualizar las raices"
	
	elements add:  anElement.
	anElement addedToPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:04:11' prior: 50866864!
isInUpperPortfolioTree: anAccount
	| hasAccount|
	hasAccount  := false.
	roots do: [:aPortfolio| hasAccount := ((aPortfolio includesAccount: anAccount) or: (aPortfolio isInUpperPortfolioTree: anAccount) or: hasAccount) ].
	^ hasAccount ! !

!methodRemoval: Portfolio #zzz: stamp: 'AM 5/22/2021 19:04:11'!
zzz: anAccount
	| hasAccount|
	hasAccount  := false.
	roots do: [:aPortfolio| hasAccount := ((aPortfolio includesAccount: anAccount) or: (aPortfolio isInUpperPortfolioTree: anAccount) or: hasAccount) ].
	^ hasAccount !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/22/2021 19:04:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 5/22/2021 19:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 5/22/2021 19:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 5/22/2021 19:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 5/22/2021 19:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 5/22/2021 19:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 5/22/2021 19:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 5/22/2021 19:04:25'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16'!
addFinancialObject: anElement
	(self includesAccount: anElement)  ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	( self isInUpperPortfolioTree: anElement)  ifTrue:[ self error: Portfolio yyy].
	
	"1)fijarme que no este entre mis cuentas"
	"2) actualizar las raices"
	
	elements add:  anElement.
	anElement addedToPortfolio: self. ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16' prior: 50862690!
test04PortfolioHasRegisteredAccountDeposit
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	
	deposit := Deposit register: 100 on: account.
	portfolio addFinancialObject: account .
	
	self assert: (portfolio hasRegistered: deposit) equals: true.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16' prior: 50866767!
test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 emptyPortfolio  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	emptyPortfolio := Portfolio new.
	portfolio1 addFinancialObject: emptyPortfolio.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio2 addFinancialObject: emptyPortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16' prior: 50866569!
test07CannotAddAccountInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio2 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16' prior: 50866665!
test10PorfolioCannotAddAccountAlreadyInCousinLeaf
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: portfolio2.
	portfolio1 addFinancialObject: portfolio3.
	portfolio2 addFinancialObject: account.
	
	self
		should: [ portfolio3 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16' prior: 50866542!
test06PortfolioCantRegisterSameAccountTwice
	|portfolio account  |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio  addFinancialObject: account.
	
	self
		should: [ portfolio addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered ]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16' prior: 50866728!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount

	|portfolio1 portfolio2 portfolio3 account  account2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addFinancialObject: account2.
	
	self assert: (portfolio3 includesAccount: account2).
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16' prior: 50866700!
test11CannotAddEmptyPortfolioTwiceInSamePorfolio
	|portfolio1 portfolio2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio2 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16' prior: 50866600!
test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	self
		should: [ portfolio3 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16' prior: 50862657!
test02PortFolioWithOneAccountHasAccountBalance
	|portfolio |
	portfolio := Portfolio new.
	portfolio addFinancialObject: ( self createAccountWithDepositedAmount: 100).
	self assert: portfolio balance equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:05:16' prior: 50862667!
test03PortfolioBalanceWithAPorfolioAndAccountBalance
	|portfolio1  portfolio2 | 
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 addFinancialObject: (self createAccountWithDepositedAmount: 100).
	portfolio2 addFinancialObject: portfolio1.
	portfolio2 addFinancialObject: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350! !

!methodRemoval: Portfolio #addElem: stamp: 'AM 5/22/2021 19:05:16'!
addElem: anElement
	(self includesAccount: anElement)  ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	( self isInUpperPortfolioTree: anElement)  ifTrue:[ self error: Portfolio yyy].
	
	"1)fijarme que no este entre mis cuentas"
	"2) actualizar las raices"
	
	elements add:  anElement.
	anElement addedToPortfolio: self. !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:06:21' prior: 50866987!
addFinancialObject: aFinancialObject
	(self includesAccount: aFinancialObject)  ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	( self isInUpperPortfolioTree: aFinancialObject)  ifTrue:[ self error: Portfolio yyy].
	
	"1)fijarme que no este entre mis cuentas"
	"2) actualizar las raices"
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:06:48'!
includesFinancialObject: anAccount
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=anAccount) or:(anElement includesAccount: anAccount) or: isIncluded].
	^isIncluded.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 5/22/2021 19:06:48'!
includesFinancialObject: anAccount

	^ (self = anAccount)
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:06:48' prior: 50866811!
includesAccount: anAccount
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=anAccount) or:(anElement includesFinancialObject: anAccount) or: isIncluded].
	^isIncluded.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:06:48' prior: 50866898!
isInUpperPortfolioTree: anAccount
	| hasAccount|
	hasAccount  := false.
	roots do: [:aPortfolio| hasAccount := ((aPortfolio includesFinancialObject: anAccount) or: (aPortfolio isInUpperPortfolioTree: anAccount) or: hasAccount) ].
	^ hasAccount ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:06:48' prior: 50867088!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount

	|portfolio1 portfolio2 portfolio3 account  account2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addFinancialObject: account2.
	
	self assert: (portfolio3 includesFinancialObject: account2).
	
	
	


	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:06:48' prior: 50867184!
addFinancialObject: aFinancialObject
	(self includesFinancialObject: aFinancialObject)  ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	( self isInUpperPortfolioTree: aFinancialObject)  ifTrue:[ self error: Portfolio yyy].
	
	"1)fijarme que no este entre mis cuentas"
	"2) actualizar las raices"
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:06:48' prior: 50867199!
includesFinancialObject: anAccount
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=anAccount) or:(anElement includesFinancialObject: anAccount) or: isIncluded].
	^isIncluded.! !

!methodRemoval: Portfolio #includesAccount: stamp: 'AM 5/22/2021 19:06:48'!
includesAccount: anAccount
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=anAccount) or:(anElement includesFinancialObject: anAccount) or: isIncluded].
	^isIncluded.!

!methodRemoval: ReceptiveAccount #includesAccount: stamp: 'AM 5/22/2021 19:06:48'!
includesAccount: anAccount

	^ (self = anAccount)
!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 5/22/2021 19:06:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 5/22/2021 19:06:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 5/22/2021 19:06:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 5/22/2021 19:06:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 5/22/2021 19:06:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 5/22/2021 19:06:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 5/22/2021 19:06:58'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/22/2021 19:07:07'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/22/2021 19:07:07'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:07:33' prior: 50867254!
addFinancialObject: aFinancialObject
	(self includesFinancialObject: aFinancialObject)  ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	( self isInUpperPortfolioTree: aFinancialObject)  ifTrue:[ self error: Portfolio yyy].
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !
!FinancialObjects methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:07:43' prior: 50866253!
addedToPortfolio: aPortfolio 

	roots add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:07:57'!
roots
^roots! !

!methodRemoval: Portfolio #raices stamp: 'AM 5/22/2021 19:07:57'!
raices
^roots!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:08:25' prior: 50867223!
isInUpperPortfolioTree: aFinancialObject
	| hasAccount|
	hasAccount  := false.
	roots do: [:aPortfolio| hasAccount := ((aPortfolio includesFinancialObject: aFinancialObject) or: (aPortfolio isInUpperPortfolioTree: aFinancialObject) or: hasAccount) ].
	^ hasAccount ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:11:54'!
test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]! !

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'AM 5/22/2021 19:11:59'!
FAILURE!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'AM 5/22/2021 19:11:59'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:14:20' prior: 50867270!
includesFinancialObject: aFinancialObject
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=aFinancialObject) or:(anElement includesFinancialObject: aFinancialObject) or: isIncluded].
	^isIncluded.! !

|a b|
	a:=OrderedCollection new.
	b:=OrderedCollection new.
	a add: #a.
	b add: #b.
	a join: b.!

|a b|
	a:=OrderedCollection new.
	b:=OrderedCollection new.
	a add: #a.
	b add: #b.
	a + b.!

|a b|
	a:=OrderedCollection new.
	b:=OrderedCollection new.
	a add: #a.
	b add: #b.
	a addAll:  b .!

|a b|
	a:=OrderedCollection new.
	b:=OrderedCollection new.
	a add: #a.
	b add: #b.
	a addAll:  b asArray . !

|a b|
	a:=OrderedCollection new.
	b:=OrderedCollection new.
	a add: #a.
	b add: #b.
	a add:  b asArray .!

|a b|
	a:=OrderedCollection new.
	b:=OrderedCollection new.
	a add: #a.!

|a b|
	a:=OrderedCollection new.
	b:=OrderedCollection new.
	a add: #aZKJXH. 
	b add: #b.
	a add: b asArray .!

|a b|
	a:=OrderedCollection new.
	b:=OrderedCollection new.
	a add: #aZKJXH. 
	b add: #b.!

|a b|
	a:=OrderedCollection new.
	b:=OrderedCollection new.
	a add: #aZKJXH. 
	b add: #b. 
	a add: b asArray .!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:28:20'!
financialTreeLeaves
	|myLeaves|
	myLeaves:=Array new.
	
	
! !

----SNAPSHOT----(22 May 2021 19:30:56) CuisUniversity-4532.image priorSource: 17097674!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:35:13' prior: 50867467!
financialTreeLeaves
	|myLeaves|
	myLeaves:=OrderedCollection new.
	
	elements do: [:anElement| myLeaves:= myLeaves addAllLast: anElement financialTreeLeaves] .
	
	
! !

|hola|
hola:=OrderedCollection new.
hola remove: #a.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:40:06' prior: 50867475!
financialTreeLeaves
	|myLeaves|
	myLeaves:=OrderedCollection new.
	
	elements do: [:anElement| myLeaves:= myLeaves addAllLast: anElement financialTreeLeaves] .
	
	
	
! !

Object subclass: #PortfolioState
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioState category: 'Portfolio-Ejercicio' stamp: 'AM 5/22/2021 19:40:43'!
Object subclass: #PortfolioState
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #RootPortfolio
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootPortfolio category: 'Portfolio-Ejercicio' stamp: 'AM 5/22/2021 19:41:15'!
PortfolioState subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #NodePortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #NodePortfolio category: 'Portfolio-Ejercicio' stamp: 'AM 5/22/2021 19:41:22'!
PortfolioState subclass: #NodePortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #EmptyPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #EmptyPortfolio category: 'Portfolio-Ejercicio' stamp: 'AM 5/22/2021 19:43:06'!
PortfolioState subclass: #EmptyPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState class
	instanceVariableNames: 'portfolio'!

!classDefinition: 'PortfolioState class' category: 'Portfolio-Ejercicio' stamp: 'AM 5/22/2021 19:48:56'!
PortfolioState class
	instanceVariableNames: 'portfolio'!
!PortfolioState class methodsFor: 'nil' stamp: 'AM 5/22/2021 19:50:37'!
for: aPortfolio
	|aPortfolioState|
	aPortfolioState:= RootPortfolio new.
	! !
!PortfolioState class methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:50:59' prior: 50867554!
for: aPortfolio
	|aPortfolioState|
	aPortfolioState:= RootPortfolio new.
	
	^aPortfolioState.
	! !
!PortfolioState methodsFor: 'nil' stamp: 'AM 5/22/2021 19:51:35'!
initializeWith: aPortfolio
	portfolio:=aPortfolio.! !
!PortfolioState class methodsFor: 'as yet unclassified' stamp: 'AM 5/22/2021 19:52:03' prior: 50867560!
for: aPortfolio
	|aPortfolioState|
	aPortfolioState:= RootPortfolio new.
	aPortfolioState initializeWith: aPortfolio.
	^aPortfolioState.
	! !

FinancialObjects subclass: #Portfolio
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 5/22/2021 19:52:32'!
FinancialObjects subclass: #Portfolio
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'nil' stamp: 'AM 5/22/2021 19:52:53' prior: 50866260 overrides: 16896425!
initialize

	elements:= OrderedCollection new.
	roots := OrderedCollection  new.
	state:= PortfolioState for: self.! !

----SNAPSHOT----(22 May 2021 19:55:29) CuisUniversity-4532.image priorSource: 17146269!

----QUIT----(22 May 2021 19:55:59) CuisUniversity-4532.image priorSource: 17150294!

----STARTUP---- (24 May 2021 11:02:41) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!


!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:03:47'!
FAILURE!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:03:47'!
FAILURE!
!Portfolio methodsFor: 'nil' stamp: 'Sebas Bocaccio 5/24/2021 11:19:22' prior: 50867591 overrides: 16896425!
initialize

	elements:= OrderedCollection new.
	roots := OrderedCollection  new.
! !

!classRemoval: #RootPortfolio stamp: 'Sebas Bocaccio 5/24/2021 11:19:41'!
PortfolioState subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #NodePortfolio stamp: 'Sebas Bocaccio 5/24/2021 11:19:41'!
PortfolioState subclass: #NodePortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #EmptyPortfolio stamp: 'Sebas Bocaccio 5/24/2021 11:19:42'!
PortfolioState subclass: #EmptyPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioState stamp: 'Sebas Bocaccio 5/24/2021 11:19:42'!
Object subclass: #PortfolioState
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #FinancialObjects as: #FinancialObject stamp: 'Sebas Bocaccio 5/24/2021 11:20:55'!
Smalltalk renameClassNamed: #FinancialObjects as: #FinancialObject!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
PASSED!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
FAILURE!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:21:02'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 11:25:59' prior: 50867363!
addFinancialObject: aFinancialObject
	(self hasRegistered: aFinancialObject)  ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	( self isInUpperPortfolioTree: aFinancialObject)  ifTrue:[ self error: Portfolio yyy].
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 11:26:21' prior: 50867399!
test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree
	^ true."
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]"! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
FAILURE!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:26:23'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 11:26:55' prior: 50867728!
test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
FAILURE!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
PASSED!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:28:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Sebas Bocaccio 5/24/2021 11:30:29' prior: 50861453!
hasRegistered: aTransaction

	^ (transactions includes: aTransaction) or: (self = aTransaction )
! !

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 11:30:35'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
FAILURE!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
PASSED!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:30:39'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 11:32:10' prior: 50862605!
hasRegistered: aTransaction
	| isRegistered|
	isRegistered := false.
	elements do: [:element| isRegistered := (element= aTransaction)or:(element hasRegistered: aTransaction) or: isRegistered.  ] .
	^ isRegistered .
	! !

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 11:32:15'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 11:32:23'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
PASSED!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
FAILURE!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:33:25'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 11:36:01' prior: 50867941!
hasRegistered: aTransaction
	| isRegistered|
	isRegistered := false.
	elements do: [:element| isRegistered := (element hasRegistered: aTransaction) or: isRegistered.  ] .
	^ isRegistered .
	! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Sebas Bocaccio 5/24/2021 11:36:13' prior: 50867877!
hasRegistered: aTransaction

	^ transactions includes: aTransaction
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 11:37:58' prior: 50867714!
addFinancialObject: aFinancialObject
	(self includesFinancialObject: aFinancialObject)  ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	( self isInUpperPortfolioTree: aFinancialObject)  ifTrue:[ self error: Portfolio yyy].
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:38:27'!
FAILURE!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:38:27'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 11:52:42' prior: 50867429!
includesFinancialObject: aFinancialObject
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=aFinancialObject) or:(anElement includesFinancialObject: aFinancialObject) or: (anElement hasRegistered: aFinancialObject) or: isIncluded].
	^isIncluded.! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
PASSED!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
FAILURE!

!testRun: #PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 11:52:50'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 11:56:55'!
test14EmptyPortfolioShouldHaveEmptyTransactions
	|portfolio |
	portfolio := Portfolio new.
	self assert: (portfolio transtracions) equals: Set new.! !

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 11:57:17'!
ERROR!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 11:57:45'!
transtracions
	self shouldBeImplemented.! !

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 11:57:48'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'Sebas Bocaccio 5/24/2021 11:59:02' prior: 50866168 overrides: 16896425!
initialize

	transactions := Set new.
	roots:= OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sebas Bocaccio 5/24/2021 11:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 11:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 11:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sebas Bocaccio 5/24/2021 11:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 11:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 11:59:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sebas Bocaccio 5/24/2021 11:59:09'!
PASSED!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:00:39' prior: 50868140!
transtracions
	self subclassResponsibility.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:03:57'!
transactions
	^ Set new.! !

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:04:06'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:04:06'!
ERROR!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:04:42'!
transtrations
	self subclassResponsibility.! !

!methodRemoval: FinancialObject #transtracions stamp: 'Sebas Bocaccio 5/24/2021 12:04:42'!
transtracions
	self subclassResponsibility.!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:05:24'!
transactions
	self subclassResponsibility.! !

!methodRemoval: FinancialObject #transtrations stamp: 'Sebas Bocaccio 5/24/2021 12:05:24'!
transtrations
	self subclassResponsibility.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:05:45' prior: 50868128!
test14EmptyPortfolioShouldHaveEmptyTransactions
	|portfolio |
	portfolio := Portfolio new.
	self assert: (portfolio transactions ) equals: Set new.! !

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:05:48'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:08:41'!
test15PortfolioWithAccountHasAccountsTransactions
	|portfolio |
	portfolio := Portfolio new.
	self assert: (portfolio transactions ) equals: Set new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:11:59' prior: 50868233!
test15PortfolioWithAccountHasAccountsTransactions
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	self assert: (portfolio transactions) equals:  (Set with: deposit).! !

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:12:12'!
FAILURE!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:12:12'!
FAILURE!

| s c|

s := Set new.
c := OrderedCollection with: 4 with: 3 with: 2 with: 1.
s addAll: c.
s!

| s c|

s := Set new.

c := OrderedCollection with: 4 with: 3 with: 2 with: 1.
s addAll: c.
s add: 5.
s!

| s ss c|

s := Set new.
ss := Set new.
c := OrderedCollection with: 4 with: 3 with: 2 with: 1.
s addAll: c.
s addAll:  ss.
s !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:19:29' prior: 50868190 overrides: 50868211!
transactions
	|transactions|
	transactions  := Set new.
	elements do: [:aFinancialObject| transactions  addAll: aFinancialObject transactions].
	^ transactions ! !

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:19:42'!
FAILURE!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:19:42'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:20:43' prior: 50868242!
test15PortfolioWithAccountHasAccountsTransactions
	|portfolio account deposit |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	portfolio addFinancialObject: account .
	self assert: (portfolio transactions) equals:  (Set with: deposit).! !

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:20:48'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:24:53'!
test16PortfolioWithPortfolioHasHisSonTransactions
	|portfolio1 portfolio2 account deposit |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	portfolio2 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	self assert: (portfolio1 transactions) equals: (portfolio2 transactions).! !

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:25:12'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:35:54'!
test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]! !

!methodRemoval: PortfolioTest #test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:35:54'!
test13PorfolioCannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]!
!Portfolio methodsFor: 'nil' stamp: 'Sebas Bocaccio 5/24/2021 12:38:59' prior: 50867617 overrides: 16896425!
initialize

	elements:= Set new.
	roots := OrderedCollection  new.
! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
FAILURE!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:39:06'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:39:30'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:39:30'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:39:50'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:39:50'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:40:01' prior: 50868327!
test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree
	
	"|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]"! !

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:40:03'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:40:07'!
PASSED!
!Portfolio methodsFor: 'nil' stamp: 'Sebas Bocaccio 5/24/2021 12:40:17' prior: 50868370 overrides: 16896425!
initialize

	elements:= Set new.
	roots := Set  new.
! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:40:21'!
PASSED!
!Portfolio methodsFor: 'nil' stamp: 'Sebas Bocaccio 5/24/2021 12:44:27'!
hasFinanciaObjectsInCommonWithOtherFinancialObjectElements: aFinancialObject
|copy originalSize|
	copy := elements copy.
	originalSize  := copy size.
	copy removeAll: aFinancialObject  elements.
	^ (originalSize = copy size) negated. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:46:25' prior: 50868624!
hasFinanciaObjectsInCommonWithOtherFinancialObjectElements: aFinancialObject
|copy originalSize|
	copy := elements copy.
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	copy removeAll: aFinancialObject  elements.
	^ (originalSize = copy size) negated. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:47:24' prior: 50868058!
includesFinancialObject: aFinancialObject
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=aFinancialObject) or:(anElement includesFinancialObject: aFinancialObject) or: (anElement hasFinanciaObjectsInCommonWithOtherFinancialObjectElements: aFinancialObject
) or: isIncluded].
	^isIncluded.! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
ERROR!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
ERROR!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
ERROR!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
ERROR!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
ERROR!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:47:30'!
PASSED!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:48:18'!
hasFinanciaObjectsInCommonWithOtherFinancialObjectElements: aFinancialObject
|copy originalSize|
	copy := elements copy.
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	copy removeAll: aFinancialObject  elements.
	^ (originalSize = copy size) negated. ! !

!methodRemoval: Portfolio #hasFinanciaObjectsInCommonWithOtherFinancialObjectElements: stamp: 'Sebas Bocaccio 5/24/2021 12:48:18'!
hasFinanciaObjectsInCommonWithOtherFinancialObjectElements: aFinancialObject
|copy originalSize|
	copy := elements copy.
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	copy removeAll: aFinancialObject  elements.
	^ (originalSize = copy size) negated. !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
ERROR!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
ERROR!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
ERROR!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
FAILURE!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:48:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:48:44'!
ERROR!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
ERROR!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
ERROR!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
ERROR!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
FAILURE!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 12:50:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:50:26'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 12:54:48'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Sebas Bocaccio 5/24/2021 12:56:31'!
elements 
	^ self.! !
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 12:59:54'!
hasTransactionsInCommonWithOtherFinancialObjectTransactions: aFinancialObject
|copy originalSize|
	copy := self transactions .
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	copy removeAll: aFinancialObject  transactions .
	^ (originalSize = copy size) negated. ! !

!methodRemoval: FinancialObject #hasFinanciaObjectsInCommonWithOtherFinancialObjectElements: stamp: 'Sebas Bocaccio 5/24/2021 13:00:11'!
hasFinanciaObjectsInCommonWithOtherFinancialObjectElements: aFinancialObject
|copy originalSize|
	copy := elements copy.
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	copy removeAll: aFinancialObject  elements.
	^ (originalSize = copy size) negated. !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:00:35' prior: 50868647!
includesFinancialObject: aFinancialObject
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=aFinancialObject) or:(anElement includesFinancialObject: aFinancialObject) or: (anElement hasTransactionsInCommonWithFinancialObject: aFinancialObject
) or: isIncluded].
	^isIncluded.! !
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:01:26'!
hasTransactionsInCommonWithFinancialObject: aFinancialObject
|copy originalSize|
	copy := self transactions .
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	copy removeAll: aFinancialObject  transactions .
	^ (originalSize = copy size) negated. ! !

!methodRemoval: FinancialObject #hasTransactionsInCommonWithOtherFinancialObjectTransactions: stamp: 'Sebas Bocaccio 5/24/2021 13:01:26'!
hasTransactionsInCommonWithOtherFinancialObjectTransactions: aFinancialObject
|copy originalSize|
	copy := self transactions .
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	copy removeAll: aFinancialObject  transactions .
	^ (originalSize = copy size) negated. !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:02:00' prior: 50868922!
includesFinancialObject: aFinancialObject
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=aFinancialObject) or:(anElement includesFinancialObject: aFinancialObject) or: (anElement hasTransactionsInCommonWithFinancialObject: aFinancialObject
: aFinancialObject
) or: isIncluded].
	^isIncluded.! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
ERROR!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
ERROR!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
ERROR!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
ERROR!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
ERROR!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
ERROR!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
ERROR!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:02:11'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
ERROR!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
ERROR!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
ERROR!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
ERROR!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
ERROR!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
ERROR!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
ERROR!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:02:17'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:02:27'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:02:55'!
PASSED!

----QUIT----(24 May 2021 13:03:04) CuisUniversity-4532.image priorSource: 17150383!

----STARTUP---- (24 May 2021 13:03:12) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sebas Bocaccio 5/24/2021 13:03:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 13:03:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 13:03:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sebas Bocaccio 5/24/2021 13:03:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:03:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:03:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:03:27'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:04:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:05:03'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:05:03'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:06:05'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:06:05'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:06:26'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:07:24' prior: 50868961!
includesFinancialObject: aFinancialObject
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=aFinancialObject) or:(anElement includesFinancialObject: aFinancialObject) or: (anElement hasTransactionsInCommonWithFinancialObject: aFinancialObject) or: isIncluded].
	^isIncluded.! !

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:07:27'!
ERROR!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:07:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:07:53'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:07:53'!
ERROR!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:12:11' prior: 50868935!
hasTransactionsInCommonWithFinancialObject: aFinancialObject
|copy originalSize|
	copy := self transactions .
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	(aFinancialObject elements) do:[:aTransaction| 	copy remove: aTransaction ifAbsent:[]].
	^(originalSize = copy size) negated. ! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:12:18'!
ERROR!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:12:42' prior: 50869201!
hasTransactionsInCommonWithFinancialObject: aFinancialObject
|copy originalSize|
	copy := self transactions .
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	(aFinancialObject transactions) do:[:aTransaction| 	copy remove: aTransaction ifAbsent:[]].
	^(originalSize = copy size) negated. ! !

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:12:43'!
ERROR!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:13:24' prior: 50869284!
hasTransactionsInCommonWithFinancialObject: aFinancialObject
|copy originalSize|
	copy := self transactions .
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	(aFinancialObject transactions) do:[:aTransaction| 	copy remove: aTransaction ifAbsent:[]].
	^(originalSize = copy size) not. ! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:13:28'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:13:40' prior: 50868464!
test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]! !

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:13:45'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:13:45'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:15:49'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:15:49'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Sebas Bocaccio 5/24/2021 13:18:38' prior: 50868892!
elements 
	^ self! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'Sebas Bocaccio 5/24/2021 13:19:30' prior: 50868150 overrides: 16896425!
initialize

	transactions := Set new.
	roots:= OrderedCollection new.
	elements := Set with: self! !

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:19:40'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:19:40'!
FAILURE!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:27:21' prior: 50869302!
hasTransactionsInCommonWithFinancialObject: aFinancialObject
|copy originalSize|
	copy := (self elements).
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	(aFinancialObject elements) do:[:aElement| 	copy remove: aElement ifAbsent:[]].
	^(originalSize = copy size) not. ! !
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:27:42' prior: 50869440!
hasTransactionsInCommonWithFinancialObject: aFinancialObject
|copy originalSize|
	copy := (elements copy).
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	(aFinancialObject elements) do:[:aElement| 	copy remove: aElement ifAbsent:[]].
	^(originalSize = copy size) not. ! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
ERROR!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
ERROR!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
ERROR!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
ERROR!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
ERROR!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:27:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 13:28:42'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:28:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:28:55'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:28:55'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:29:37'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Sebas Bocaccio 5/24/2021 13:30:15' prior: 50869419!
elements 
	^ Set with: self ! !

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:30:39'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
ERROR!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
ERROR!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
ERROR!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:30:44'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:31:00'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'Sebas Bocaccio 5/24/2021 13:31:38'!
elements 
^ elements! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:31:46' prior: 50869628!
elements 
^ elements copy! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
FAILURE!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:31:53'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:32:07'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:32:07'!
FAILURE!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:32:49'!
hasElementsInCommonWithFinancialObject: aFinancialObject
|copy originalSize|
	copy := (elements copy).
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	(aFinancialObject elements) do:[:aElement| 	copy remove: aElement ifAbsent:[]].
	^(originalSize = copy size) not. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:32:49' prior: 50869171!
includesFinancialObject: aFinancialObject
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=aFinancialObject) or:(anElement includesFinancialObject: aFinancialObject) or: (anElement hasElementsInCommonWithFinancialObject: aFinancialObject) or: isIncluded].
	^isIncluded.! !

!methodRemoval: FinancialObject #hasTransactionsInCommonWithFinancialObject: stamp: 'Sebas Bocaccio 5/24/2021 13:32:49'!
hasTransactionsInCommonWithFinancialObject: aFinancialObject
|copy originalSize|
	copy := (elements copy).
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	(aFinancialObject elements) do:[:aElement| 	copy remove: aElement ifAbsent:[]].
	^(originalSize = copy size) not. !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
FAILURE!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:32:53'!
FAILURE!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:33:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:33:14'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:33:20'!
PASSED!

(originalSize = copy size)!

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:37:55'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:38:06' prior: 50869380!
test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]! !

!testRun: #PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:38:09'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:39:28'!
test13CannotAddPortfolioWhenSharesAccountWithFutureBrother
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]! !

!methodRemoval: PortfolioTest #test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree stamp: 'Sebas Bocaccio 5/24/2021 13:39:28'!
test13CannotAddPortfolioThatContainsAccountAlreadyInPortfolioTree
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:39:51'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 13:41:47'!
test10CannotAddAccountAlreadyInCousinLeaf
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: portfolio2.
	portfolio1 addFinancialObject: portfolio3.
	portfolio2 addFinancialObject: account.
	
	self
		should: [ portfolio3 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]! !

!methodRemoval: PortfolioTest #test10PorfolioCannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:41:47'!
test10PorfolioCannotAddAccountAlreadyInCousinLeaf
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: portfolio2.
	portfolio1 addFinancialObject: portfolio3.
	portfolio2 addFinancialObject: account.
	
	self
		should: [ portfolio3 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio yyy]!

!methodRemoval: Portfolio #financialTreeLeaves stamp: 'Sebas Bocaccio 5/24/2021 13:44:35'!
financialTreeLeaves
	|myLeaves|
	myLeaves:=OrderedCollection new.
	
	elements do: [:anElement| myLeaves:= myLeaves addAllLast: anElement financialTreeLeaves] .
	
	
	
!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Sebas Bocaccio 5/24/2021 13:51:26' prior: 50869551!
elements 
	^ transactions copy.! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 13:51:31'!
PASSED!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:03:22'!
valueFor: aReceptiveAccount 
	self subclassResponsibility .! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:03:22' overrides: 50870095!
valueFor: aReceptiveAccount 
	^ aReceptiveAccount valueOfADepositWithAmount: (self value). ! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:03:22' overrides: 50870095!
valueFor: aReceptiveAccount 
	^ aReceptiveAccount valueOfAWithdrawWithAmount: (self value).! !

!methodRemoval: AccountTransaction #valueForBalanceFor: stamp: 'Sebas Bocaccio 5/24/2021 14:03:22'!
valueForBalanceFor: aReceptiveAccount 
	self subclassResponsibility .!

!methodRemoval: Deposit #valueForBalanceFor: stamp: 'Sebas Bocaccio 5/24/2021 14:03:22'!
valueForBalanceFor: aReceptiveAccount 
	^ aReceptiveAccount valueOfADepositWithAmount: (self value). !

!methodRemoval: Withdraw #valueForBalanceFor: stamp: 'Sebas Bocaccio 5/24/2021 14:03:22'!
valueForBalanceFor: aReceptiveAccount 
	^ aReceptiveAccount valueOfAWithdrawWithAmount: (self value).!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sebas Bocaccio 5/24/2021 14:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:03:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:03:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sebas Bocaccio 5/24/2021 14:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:03:28'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Sebas Bocaccio 5/24/2021 14:04:06' prior: 50862047!
balance

	^transactions sum: [ :aTransaction | aTransaction valueFor: self ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:04:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sebas Bocaccio 5/24/2021 14:04:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:04:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:04:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sebas Bocaccio 5/24/2021 14:04:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:04:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:04:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:04:14'!
PASSED!

!methodRemoval: AccountTransaction #valueForBalance stamp: 'Sebas Bocaccio 5/24/2021 14:04:51'!
valueForBalance
	self subclassResponsibility !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'Sebas Bocaccio 5/24/2021 14:07:59' prior: 50866013!
register: aValue on: account

	| transaction |
	
	transaction := self for: account withValue: aValue.
	account register: transaction.
		
	^ transaction! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sebas Bocaccio 5/24/2021 14:08:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:08:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:08:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sebas Bocaccio 5/24/2021 14:08:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:08:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:08:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:08:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:08:45'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:08:45'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:09:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:09:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:09:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:09:55'!
ERROR!
!Deposit class methodsFor: 'instance creation' stamp: 'Sebas Bocaccio 5/24/2021 14:10:14'!
for: aReceptiveAccount withValue: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount withValue: aSmallInteger ! !
!Deposit class methodsFor: 'instance creation' stamp: 'Sebas Bocaccio 5/24/2021 14:11:00' prior: 50870268!
for: aReceptiveAccount withValue: aValue 
	
	^self new initializeFor: aReceptiveAccount withValue: aValue ! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:11:06'!
ERROR!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:11:17'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'Sebas Bocaccio 5/24/2021 14:11:17'!
initializeFor: aReceptiveAccount withValue: aValue 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.
	value := aValue.! !
!Deposit methodsFor: 'initialization' stamp: 'Sebas Bocaccio 5/24/2021 14:11:26' prior: 50870298!
initializeFor: aReceptiveAccount withValue: aValue 
	receptiveAccount := aReceptiveAccount.
	value := aValue.! !

AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:14:24'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #AccountTransaction
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:14:33'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:14:55'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:14:55'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:14:55'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'receptiveAccount value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'nil' stamp: 'Sebas Bocaccio 5/24/2021 14:15:50' prior: 50861489!
valueForBalance
	^ self valueOfADepositWithAmount: (self value).! !
!Deposit methodsFor: 'nil' stamp: 'Sebas Bocaccio 5/24/2021 14:16:07' prior: 50870363!
valueForBalance
	^ receptiveAccount valueOfADepositWithAmount: (self value).! !
!Withdraw methodsFor: 'nil' stamp: 'Sebas Bocaccio 5/24/2021 14:17:10' prior: 50861493!
valueForBalance
		^ receptiveAccount valueOfAWithdrawWithAmount: (self value). ! !

Object subclass: #AccountTransaction
	instanceVariableNames: ' value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:19:15'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Deposit #initializeFor:withValue: stamp: 'Sebas Bocaccio 5/24/2021 14:19:23'!
initializeFor: aReceptiveAccount withValue: aValue 
	receptiveAccount := aReceptiveAccount.
	value := aValue.!

!methodRemoval: Deposit class #for:withValue: stamp: 'Sebas Bocaccio 5/24/2021 14:19:48'!
for: aReceptiveAccount withValue: aValue 
	
	^self new initializeFor: aReceptiveAccount withValue: aValue !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'AM 5/22/2021 17:16:42' prior: 50870206!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sebas Bocaccio 5/24/2021 14:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sebas Bocaccio 5/24/2021 14:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:21:14'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:21:20'!
PASSED!

!methodRemoval: Deposit #valueForBalance stamp: 'Sebas Bocaccio 5/24/2021 14:21:52'!
valueForBalance
	^ receptiveAccount valueOfADepositWithAmount: (self value).!

!methodRemoval: Withdraw #valueForBalance stamp: 'Sebas Bocaccio 5/24/2021 14:22:09'!
valueForBalance
		^ receptiveAccount valueOfAWithdrawWithAmount: (self value). !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sebas Bocaccio 5/24/2021 14:22:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:22:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 14:22:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sebas Bocaccio 5/24/2021 14:22:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:22:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:22:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:22:21'!
PASSED!

FinancialObject subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:23:29'!
FinancialObject subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'Sebas Bocaccio 5/24/2021 14:24:27' prior: 50869424 overrides: 16896425!
initialize

	transactions := Set new.
	roots:= Set new.
	elements := Set with: self! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:24:32'!
PASSED!

!classDefinition: #FinancialObject category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:25:08'!
Object subclass: #FinancialObject
	instanceVariableNames: 'elements portfoliosImIn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:25:08' prior: 50867377!
addedToPortfolio: aPortfolio 

	portfoliosImIn add: aPortfolio.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:25:08' prior: 50870560 overrides: 16896425!
initialize

	transactions := Set new.
	portfoliosImIn:= Set new.
	elements := Set with: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:25:08' prior: 50867382!
roots
^portfoliosImIn! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:25:08' prior: 50868555 overrides: 16896425!
initialize

	elements:= Set new.
	portfoliosImIn := Set  new.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:25:08' prior: 50867388!
isInUpperPortfolioTree: aFinancialObject
	| hasAccount|
	hasAccount  := false.
	portfoliosImIn do: [:aPortfolio| hasAccount := ((aPortfolio includesFinancialObject: aFinancialObject) or: (aPortfolio isInUpperPortfolioTree: aFinancialObject) or: hasAccount) ].
	^ hasAccount ! !

!classDefinition: #FinancialObject category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:26:33'!
Object subclass: #FinancialObject
	instanceVariableNames: 'elements portfoliosIBelong'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:26:33' prior: 50870640!
addedToPortfolio: aPortfolio 

	portfoliosIBelong add: aPortfolio.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:26:33' prior: 50870647 overrides: 16896425!
initialize

	transactions := Set new.
	portfoliosIBelong:= Set new.
	elements := Set with: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:26:33' prior: 50870654!
roots
^portfoliosIBelong! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:26:33' prior: 50870659 overrides: 16896425!
initialize

	elements:= Set new.
	portfoliosIBelong := Set  new.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:26:33' prior: 50870665!
isInUpperPortfolioTree: aFinancialObject
	| hasAccount|
	hasAccount  := false.
	portfoliosIBelong do: [:aPortfolio| hasAccount := ((aPortfolio includesFinancialObject: aFinancialObject) or: (aPortfolio isInUpperPortfolioTree: aFinancialObject) or: hasAccount) ].
	^ hasAccount ! !

!classDefinition: #FinancialObject category: 'Portfolio-Ejercicio' stamp: 'Sebas Bocaccio 5/24/2021 14:26:56'!
Object subclass: #FinancialObject
	instanceVariableNames: 'elements portfoliosImIn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:26:56' prior: 50870686!
addedToPortfolio: aPortfolio 

	portfoliosImIn add: aPortfolio.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:26:56' prior: 50870693 overrides: 16896425!
initialize

	transactions := Set new.
	portfoliosImIn:= Set new.
	elements := Set with: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:26:56' prior: 50870700!
roots
^portfoliosImIn! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:26:56' prior: 50870705 overrides: 16896425!
initialize

	elements:= Set new.
	portfoliosImIn := Set  new.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 14:26:56' prior: 50870711!
isInUpperPortfolioTree: aFinancialObject
	| hasAccount|
	hasAccount  := false.
	portfoliosImIn do: [:aPortfolio| hasAccount := ((aPortfolio includesFinancialObject: aFinancialObject) or: (aPortfolio isInUpperPortfolioTree: aFinancialObject) or: hasAccount) ].
	^ hasAccount ! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 14:28:01'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 14:28:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 14:28:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 14:28:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 14:28:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 14:28:01'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 14:28:01'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 14:28:01'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 14:28:01'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 14:28:02'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 14:28:02'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 14:28:02'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 14:28:02'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:28:02'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:28:02'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:28:02'!
PASSED!

!methodRemoval: Portfolio #roots stamp: 'Sebas Bocaccio 5/24/2021 14:29:48'!
roots
^portfoliosImIn!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:29:52'!
PASSED!
!FinancialObject methodsFor: 'nil' stamp: 'Sebas Bocaccio 5/24/2021 14:36:35'!
balance 
	^ self subclassResponsibility .! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Sebas Bocaccio 5/24/2021 14:40:58' prior: 50867208!
includesFinancialObject: aFinancialObject 

	^ (self = aFinancialObject) or: (aFinancialObject elements includes: self)
! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 14:41:03'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'Sebas Bocaccio 5/24/2021 14:46:32' prior: 50870757!
isInUpperPortfolioTree: aFinancialObject
	| hasFinancialObject|
	hasFinancialObject  := false.
	portfoliosImIn do: [:aPortfolio| hasFinancialObject := ((aPortfolio includesFinancialObject: aFinancialObject) or: (aPortfolio isInUpperPortfolioTree: aFinancialObject) or: hasFinancialObject) ].
	^ hasFinancialObject ! !
!Portfolio methodsFor: 'testing' stamp: 'Sebas Bocaccio 5/24/2021 14:47:10' prior: 50870978!
isInUpperPortfolioTree: aFinancialObject
	| isIncluded|
	isIncluded  := false.
	portfoliosImIn do: [:aPortfolio| isIncluded := ((aPortfolio includesFinancialObject: aFinancialObject) or: (aPortfolio isInUpperPortfolioTree: aFinancialObject) or: isIncluded) ].
	^ isIncluded ! !

a:=Collection new !

|a|
a:=Collection new !
!ReceptiveAccount methodsFor: 'be added' stamp: 'Sebas Bocaccio 5/24/2021 15:04:37' overrides: 50870732!
addedToPortfolio: aPortfolio 

	portfoliosImIn add: aPortfolio.! !
!Portfolio methodsFor: 'be added' stamp: 'Sebas Bocaccio 5/24/2021 15:04:37' overrides: 50870732!
addedToPortfolio: aPortfolio 

	portfoliosImIn add: aPortfolio.! !

!methodRemoval: FinancialObject #addedToPortfolio: stamp: 'Sebas Bocaccio 5/24/2021 15:04:37'!
addedToPortfolio: aPortfolio 

	portfoliosImIn add: aPortfolio.!
!FinancialObject methodsFor: 'be added' stamp: 'Sebas Bocaccio 5/24/2021 15:05:07'!
addedToPortfolio: aPortfolio 

	portfoliosImIn add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 15:16:18' prior: 50868034!
addFinancialObject: aFinancialObject
	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
FAILURE!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
FAILURE!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
FAILURE!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
FAILURE!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:16:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 15:16:51' prior: 50867034!
test07CannotAddAccountInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio2 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 15:16:55' prior: 50867124!
test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	self
		should: [ portfolio3 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 15:16:59' prior: 50869977!
test10CannotAddAccountAlreadyInCousinLeaf
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: portfolio2.
	portfolio1 addFinancialObject: portfolio3.
	portfolio2 addFinancialObject: account.
	
	self
		should: [ portfolio3 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 15:17:04' prior: 50867015!
test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 emptyPortfolio  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	emptyPortfolio := Portfolio new.
	portfolio1 addFinancialObject: emptyPortfolio.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio2 addFinancialObject: emptyPortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]

	
! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:17:10'!
PASSED!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'Sebas Bocaccio 5/24/2021 15:20:51' prior: 50870739 overrides: 16896425!
initialize

	transactions := Set new.
	portfoliosImIn:= Set new.
! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
ERROR!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
ERROR!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
FAILURE!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
FAILURE!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:21:02'!
PASSED!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'Sebas Bocaccio 5/24/2021 15:21:23' prior: 50871281 overrides: 16896425!
initialize

	transactions := Set new.
	portfoliosImIn:= Set new.
	elements:= Set with: self
! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'Sebas Bocaccio 5/24/2021 15:23:17'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 15:24:35'!
test17CannotAddPortfolioWhenSharesAccountWithCousin
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Sebas Bocaccio 5/24/2021 15:27:50'!
test17CannotAddPortfolioWhenSharesAccounWithxxx
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio2 addFinancialObject: portfolio3.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio2 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]! !

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'Sebas Bocaccio 5/24/2021 15:28:03'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'Sebas Bocaccio 5/24/2021 15:28:03'!
FAILURE!

!methodRemoval: PortfolioTest #test17CannotAddPortfolioWhenSharesAccountWithCousin stamp: 'Sebas Bocaccio 5/24/2021 15:28:18'!
test17CannotAddPortfolioWhenSharesAccountWithCousin
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered]!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'Sebas Bocaccio 5/24/2021 15:28:44'!
FAILURE!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'Sebas Bocaccio 5/24/2021 15:28:44'!
FAILURE!

----QUIT----(24 May 2021 15:49:29) CuisUniversity-4532.image priorSource: 17198717!

----STARTUP---- (24 May 2021 15:51:32) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!

!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:02:14' prior: 50871027!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:04:21'!
childs
	|childSet|
	childSet:= Set new.
	
	elements do: [:financialElement| childSet:= childSet addAll: (financialElement childs)].
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:04:56' prior: 50871510!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:07:25' prior: 50871525!
childs
	|childSet|
	childSet:= Set new.
	childSet addAll: elements.
	
	elements do: [:financialElement| childSet:= childSet addAll: (financialElement childs)].
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:07:51' prior: 50871560!
childs
	|childSet|
	childSet:= Set new.
	childSet addAll: elements.
	
	elements do: [:financialElement| childSet:= childSet addAll: (financialElement childs)].
	
	^childSet.
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !

|porfolio1 porfolio2 porfolio3 account1 account2|

portfolio1:= Portfolio new.
portfolio2:= Portfolio new.
portfolio3:= Portfolio new.
account1:= ReceptiveAccount new.
account2:= ReceptiveAccount new.

portfolio1 addFinancialObject: account1.
portfolio2 addFinancialObject: account2.
portfolio1 addFinancialObject: portfolio3.
portfolio1 addFinancialObject: portfolio2.

portfolio1 childs.!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AM 5/24/2021 16:10:01'!
childs
	^Set new.! !
!FinancialObject methodsFor: 'nil' stamp: 'AM 5/24/2021 16:10:23'!
childs
	self subclassResponsibility ! !

|portfolio1 portfolio2 portfolio3 account1 account2|

portfolio1:= Portfolio new.
portfolio2:= Portfolio new.
portfolio3:= Portfolio new.
account1:= ReceptiveAccount new.
account2:= ReceptiveAccount new.

portfolio1 addFinancialObject: account1.
portfolio2 addFinancialObject: account2.
portfolio1 addFinancialObject: portfolio3.
portfolio1 addFinancialObject: portfolio2.

portfolio1 childs.!

|set1 set2|

set1:= Set new.
set2 := Set new.

set1 add: 3.
set1 addAll: set2.
set1.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:15:15' prior: 50871580 overrides: 50871615!
childs
	|childSet|
	childSet:= Set new.
	childSet addAll: elements.
	
	elements do: [:financialElement|childSet addAll: (financialElement childs)].
	
	^childSet.
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !

|portfolio1 portfolio2 portfolio3 account1 account2|

portfolio1:= Portfolio new.
portfolio2:= Portfolio new.
portfolio3:= Portfolio new.
account1:= ReceptiveAccount new.
account2:= ReceptiveAccount new.

portfolio1 addFinancialObject: account1.
portfolio2 addFinancialObject: account2.
portfolio1 addFinancialObject: portfolio3.
portfolio1 addFinancialObject: portfolio2.

portfolio1 childs.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:18:36'!
treeRoots

	|treeRoots|
	treeRoots:= Set new.
	
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:24:01' prior: 50871667!
treeRoots

	|treeRoots|
	treeRoots:= Set new.
	portfoliosImIn ifEmpty: [treeRoots add:self].
	portfoliosImIn do: [:portfolio| treeRoots addAll: portfolio treeRoots] 
	
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !

|portfolio1 portfolio2 portfolio3 account1 account2|

portfolio1:= Portfolio new.
portfolio2:= Portfolio new.
portfolio3:= Portfolio new.
account1:= ReceptiveAccount new.
account2:= ReceptiveAccount new.

portfolio1 addFinancialObject: account1.
portfolio2 addFinancialObject: account2.
portfolio1 addFinancialObject: portfolio3.
portfolio1 addFinancialObject: portfolio2.

portfolio2 treeRoots.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:25:18' prior: 50871683!
treeRoots

	|treeRoots|
	treeRoots:= Set new.
	portfoliosImIn ifEmpty: [treeRoots add:self].
	portfoliosImIn do: [:portfolio| treeRoots addAll: portfolio treeRoots].
	^treeRoots.
	
	
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !

|portfolio1 portfolio2 portfolio3 account1 account2|

portfolio1:= Portfolio new.
portfolio2:= Portfolio new.
portfolio3:= Portfolio new.
account1:= ReceptiveAccount new.
account2:= ReceptiveAccount new.

portfolio1 addFinancialObject: account1.
portfolio2 addFinancialObject: account2.
portfolio1 addFinancialObject: portfolio3.
portfolio1 addFinancialObject: portfolio2.

portfolio2 treeRoots.!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:26:00'!
treeRoots

	|treeRoots|
	treeRoots:= Set new.
	portfoliosImIn ifEmpty: [treeRoots add:self].
	portfoliosImIn do: [:portfolio| treeRoots addAll: portfolio treeRoots].
	^treeRoots.! !

!methodRemoval: Portfolio #treeRoots stamp: 'AM 5/24/2021 16:26:13'!
treeRoots

	|treeRoots|
	treeRoots:= Set new.
	portfoliosImIn ifEmpty: [treeRoots add:self].
	portfoliosImIn do: [:portfolio| treeRoots addAll: portfolio treeRoots].
	^treeRoots.
	
	
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "!

|portfolio1 portfolio2 portfolio3 account1 account2|

portfolio1:= Portfolio new.
portfolio2:= Portfolio new.
portfolio3:= Portfolio new.
account1:= ReceptiveAccount new.
account2:= ReceptiveAccount new.

portfolio1 addFinancialObject: account1.
portfolio2 addFinancialObject: account2.
portfolio1 addFinancialObject: portfolio3.
portfolio1 addFinancialObject: portfolio2.

portfolio2 treeRoots. !

|portfolio1 portfolio2 portfolio3 account1 account2|

portfolio1:= Portfolio new.
portfolio2:= Portfolio new.
portfolio3:= Portfolio new.
account1:= ReceptiveAccount new.
account2:= ReceptiveAccount new.

portfolio1 addFinancialObject: account1.
portfolio2 addFinancialObject: account2.
portfolio1 addFinancialObject: portfolio3.
portfolio1 addFinancialObject: portfolio2.

account2 treeRoots.!

|portfolio1 portfolio2 portfolio3 account1 account2|

portfolio1:= Portfolio new.
portfolio2:= Portfolio new.
portfolio3:= Portfolio new.
portfolio4:= Portfolio new.

account1:= ReceptiveAccount new.
account2:= ReceptiveAccount new.

portfolio1 addFinancialObject: account1.
portfolio2 addFinancialObject: account2.
portfolio4 addFinancialObject: account2.

portfolio1 addFinancialObject: portfolio3.
portfolio1 addFinancialObject: portfolio2.

account2 treeRoots.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:32:17'!
completeTree
	|treeElements roots|
	treeElements:= Set new.
	roots:= self treeRoots.
	roots do: [:aRoot| treeElements add: aRoot. treeElements addAll: aRoot childs].
	^treeElements
	! !

|portfolio1 portfolio2 portfolio3 account1 account2|

portfolio1:= Portfolio new.
portfolio2:= Portfolio new.
portfolio3:= Portfolio new.
portfolio4:= Portfolio new.

account1:= ReceptiveAccount new.
account2:= ReceptiveAccount new.

portfolio1 addFinancialObject: account1.
portfolio2 addFinancialObject: account2.
portfolio4 addFinancialObject: account2.

portfolio1 addFinancialObject: portfolio3.
portfolio1 addFinancialObject: portfolio2.

account2 completeTree.!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:33:45'!
completeTree
	|treeElements roots|
	treeElements:= Set new.
	roots:= self treeRoots.
	roots do: [:aRoot| treeElements add: aRoot. treeElements addAll: aRoot childs].
	^treeElements! !

!methodRemoval: Portfolio #completeTree stamp: 'AM 5/24/2021 16:33:52'!
completeTree
	|treeElements roots|
	treeElements:= Set new.
	roots:= self treeRoots.
	roots do: [:aRoot| treeElements add: aRoot. treeElements addAll: aRoot childs].
	^treeElements
	!

|portfolio1 portfolio2 portfolio3 account1 account2|

portfolio1:= Portfolio new.
portfolio2:= Portfolio new.
portfolio3:= Portfolio new.
portfolio4:= Portfolio new.

account1:= ReceptiveAccount new.
account2:= ReceptiveAccount new.

portfolio1 addFinancialObject: account1.
portfolio2 addFinancialObject: account2.
portfolio4 addFinancialObject: account2.

portfolio1 addFinancialObject: portfolio3.
portfolio1 addFinancialObject: portfolio2.

account2 completeTree.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:46:12'!
hasElementsInCommon: aSet with: anotherSet
	|hasElementsInCommon|
	hasElementsInCommon:=false.
	aSet do: [:anElement| hasElementsInCommon:=hasElementsInCommon or: (anotherSet includes: anElement)].
	^hasElementsInCommon! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:48:58' prior: 50871544!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"
	
	(self hasElementsInCommon: self completeTree with: (aFinancialObject childs add: aFinancialObject)) ifTrue: [self error: Portfolio portfolioAccountAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. 


	"((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/24/2021 16:49:09'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/24/2021 16:49:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'AM 5/24/2021 16:49:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'AM 5/24/2021 16:49:09'!
ERROR!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:49:25'!
ERROR!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:49:25'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:50:54' prior: 50871881!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"
	
	(self hasElementsInCommon: (self completeTree) with: ((aFinancialObject childs) add: aFinancialObject)) ifTrue: [self error: Portfolio portfolioAccountAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. 


	"((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:51:11'!
ERROR!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:51:11'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:53:38' prior: 50871973!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"
	
	|treeToAdd|
	treeToAdd:=(aFinancialObject childs) add: aFinancialObject.
	
	(self hasElementsInCommon: (self completeTree) with: (treeToAdd))ifTrue: [self error: Portfolio portfolioAccountAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. 


	"((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:53:53'!
ERROR!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:53:53'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:55:37' prior: 50872004!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject childs) add: aFinancialObject).
	
	(self hasElementsInCommon: (self completeTree) with: (treeToAdd))ifTrue: [self error: Portfolio portfolioAccountAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. 


	"((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:55:49'!
ERROR!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:55:49'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:58:23' prior: 50872036!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject childs)).
	
	(self hasElementsInCommon: (self completeTree) with: (treeToAdd))ifTrue: [self error: Portfolio portfolioAccountAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. 


	"((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:59:27' prior: 50872068!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject childs)).
	treeToAdd add: self.
	
	(self hasElementsInCommon: (self completeTree) with: (treeToAdd))ifTrue: [self error: Portfolio portfolioAccountAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. 


	"((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 16:59:33' prior: 50872092!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject childs)).
	treeToAdd add: aFinancialObject.
	
	(self hasElementsInCommon: (self completeTree) with: (treeToAdd))ifTrue: [self error: Portfolio portfolioAccountAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. 


	"((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'AM 5/24/2021 16:59:48'!
PASSED!

----SNAPSHOT----(24 May 2021 17:00:04) CuisUniversity-4532.image priorSource: 17275249!

----SNAPSHOT----(24 May 2021 17:00:23) CuisUniversity-4532.image priorSource: 17297807!

----SNAPSHOT----(24 May 2021 17:33:29) CuisUniversity-4532.image priorSource: 17297896!

!methodRemoval: ReceptiveAccount #includesFinancialObject: stamp: 'AM 5/24/2021 17:33:56'!
includesFinancialObject: aFinancialObject 

	^ (self = aFinancialObject) or: (aFinancialObject elements includes: self)
!

!methodRemoval: Portfolio #isInUpperPortfolioTree: stamp: 'AM 5/24/2021 17:34:13'!
isInUpperPortfolioTree: aFinancialObject
	| isIncluded|
	isIncluded  := false.
	portfoliosImIn do: [:aPortfolio| isIncluded := ((aPortfolio includesFinancialObject: aFinancialObject) or: (aPortfolio isInUpperPortfolioTree: aFinancialObject) or: isIncluded) ].
	^ isIncluded !

!methodRemoval: Portfolio #includesFinancialObject: stamp: 'AM 5/24/2021 17:34:25'!
includesFinancialObject: aFinancialObject
|isIncluded|
	isIncluded:=false.
	 elements do: [:anElement | isIncluded:=(anElement=aFinancialObject) or:(anElement includesFinancialObject: aFinancialObject) or: (anElement hasElementsInCommonWithFinancialObject: aFinancialObject) or: isIncluded].
	^isIncluded.!

!methodRemoval: Portfolio #elements stamp: 'AM 5/24/2021 17:34:40'!
elements 
^ elements copy!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 17:34:57'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'AM 5/24/2021 17:34:57'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 17:34:57'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 17:37:34'!
includesFinancialObject:aFinancialObject
	^ self childs includes: aFinancialObject.
	! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'AM 5/24/2021 17:37:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 5/24/2021 17:37:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 5/24/2021 17:37:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 5/24/2021 17:37:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 5/24/2021 17:37:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 5/24/2021 17:37:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 5/24/2021 17:37:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 5/24/2021 17:37:45'!
PASSED!

!methodRemoval: FinancialObject #hasElementsInCommonWithFinancialObject: stamp: 'AM 5/24/2021 17:38:13'!
hasElementsInCommonWithFinancialObject: aFinancialObject
|copy originalSize|
	copy := (elements copy).
	originalSize  := copy size.
	(originalSize  = 0) ifTrue: [^ false].
	(aFinancialObject elements) do:[:aElement| 	copy remove: aElement ifAbsent:[]].
	^(originalSize = copy size) not. !

----SNAPSHOT----(24 May 2021 17:38:38) CuisUniversity-4532.image priorSource: 17297985!

!methodRemoval: ReceptiveAccount #elements stamp: 'AM 5/24/2021 18:08:34'!
elements 
	^ transactions copy.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:12:25'!
financialObjectsAddedTo
	|childSet|
	childSet:= Set new.
	childSet addAll: elements.
	
	elements do: [:financialElement|childSet addAll: (financialElement childs)].
	
	^childSet.
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !
!ReceptiveAccount methodsFor: 'unclasified' stamp: 'AM 5/24/2021 18:12:25'!
financialObjectsAddedTo
	^Set new.! !
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:12:25'!
financialObjectsAddedTo
	self subclassResponsibility ! !
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:12:25' prior: 50871840!
completeTree
	|treeElements roots|
	treeElements:= Set new.
	roots:= self treeRoots.
	roots do: [:aRoot| treeElements add: aRoot. treeElements addAll: aRoot financialObjectsAddedTo].
	^treeElements! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:12:25' prior: 50872315!
includesFinancialObject:aFinancialObject
	^ self financialObjectsAddedTo includes: aFinancialObject.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:12:25' prior: 50872117!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject financialObjectsAddedTo)).
	treeToAdd add: aFinancialObject.
	
	(self hasElementsInCommon: (self completeTree) with: (treeToAdd))ifTrue: [self error: Portfolio portfolioAccountAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. 


	"((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:12:25' prior: 50871635 overrides: 50871615!
childs
	|childSet|
	childSet:= Set new.
	childSet addAll: elements.
	
	elements do: [:financialElement|childSet addAll: (financialElement financialObjectsAddedTo)].
	
	^childSet.
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:12:25' prior: 50872427 overrides: 50872451!
financialObjectsAddedTo
	|childSet|
	childSet:= Set new.
	childSet addAll: elements.
	
	elements do: [:financialElement|childSet addAll: (financialElement financialObjectsAddedTo)].
	
	^childSet.
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !

!methodRemoval: Portfolio #childs stamp: 'AM 5/24/2021 18:12:25'!
childs
	|childSet|
	childSet:= Set new.
	childSet addAll: elements.
	
	elements do: [:financialElement|childSet addAll: (financialElement financialObjectsAddedTo)].
	
	^childSet.
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "!

!methodRemoval: ReceptiveAccount #childs stamp: 'AM 5/24/2021 18:12:25'!
childs
	^Set new.!

!methodRemoval: FinancialObject #childs stamp: 'AM 5/24/2021 18:12:25'!
childs
	self subclassResponsibility !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'AM 5/24/2021 18:12:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 5/24/2021 18:12:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 5/24/2021 18:12:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 5/24/2021 18:12:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 5/24/2021 18:12:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 5/24/2021 18:12:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 5/24/2021 18:12:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 5/24/2021 18:12:54'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:13:17' prior: 50872473!
addFinancialObject: aFinancialObject

	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject financialObjectsAddedTo)).
	treeToAdd add: aFinancialObject.
	
	(self hasElementsInCommon: (self completeTree) with: (treeToAdd))ifTrue: [self error: Portfolio portfolioAccountAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:13:30' prior: 50872656!
addFinancialObject: aFinancialObject
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject financialObjectsAddedTo)).
	treeToAdd add: aFinancialObject.
	
	(self hasElementsInCommon: (self completeTree) with: (treeToAdd))ifTrue: [self error: Portfolio portfolioAccountAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:16:20' prior: 50872456!
completeTree
	|treeElements roots|
	treeElements:= Set new.
	roots:= self treeRoots.
	roots do: [:aRoot| treeElements add: aRoot. 
		treeElements addAll: aRoot financialObjectsAddedTo].
	^treeElements! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:33:14'!
blockShouldTriggerFinancialObjectAlreadyRegistered: aBlock
	
	self
		should: aBlock
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio portfolioAccountAlreadyRegistered ]

	
! !

!methodRemoval: Portfolio class #yyy stamp: 'AM 5/24/2021 18:35:46'!
yyy
	^ 'The account is in a portfolio that includes this portfolio'!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30'!
financialObjectAlreadyRegistered
	^ 'You already registered the account'! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30' prior: 50867072!
test06PortfolioCantRegisterSameAccountTwice
	|portfolio account  |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio  addFinancialObject: account.
	
	self
		should: [ portfolio addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio financialObjectAlreadyRegistered ]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30' prior: 50871444!
test17CannotAddPortfolioWhenSharesAccounWithxxx
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio2 addFinancialObject: portfolio3.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio2 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio financialObjectAlreadyRegistered]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30' prior: 50871105!
test07CannotAddAccountInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio2 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio financialObjectAlreadyRegistered]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30' prior: 50871167!
test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 emptyPortfolio  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	emptyPortfolio := Portfolio new.
	portfolio1 addFinancialObject: emptyPortfolio.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio2 addFinancialObject: emptyPortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio financialObjectAlreadyRegistered]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30' prior: 50867108!
test11CannotAddEmptyPortfolioTwiceInSamePorfolio
	|portfolio1 portfolio2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio2 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio financialObjectAlreadyRegistered]

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30' prior: 50869868!
test13CannotAddPortfolioWhenSharesAccountWithFutureBrother
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self
		should: [ portfolio1 addFinancialObject: portfolio3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio financialObjectAlreadyRegistered]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30' prior: 50871124!
test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	self
		should: [ portfolio3 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio financialObjectAlreadyRegistered]

	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30' prior: 50872674!
addFinancialObject: aFinancialObject
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject financialObjectsAddedTo)).
	treeToAdd add: aFinancialObject.
	
	(self hasElementsInCommon: (self completeTree) with: (treeToAdd))ifTrue: [self error: Portfolio financialObjectAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30' prior: 50871146!
test10CannotAddAccountAlreadyInCousinLeaf
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: portfolio2.
	portfolio1 addFinancialObject: portfolio3.
	portfolio2 addFinancialObject: account.
	
	self
		should: [ portfolio3 addFinancialObject: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio financialObjectAlreadyRegistered]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:36:30' prior: 50872698!
blockShouldTriggerFinancialObjectAlreadyRegistered: aBlock
	
	self
		should: aBlock
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio financialObjectAlreadyRegistered ]

	
! !

!methodRemoval: Portfolio class #portfolioAccountAlreadyRegistered stamp: 'AM 5/24/2021 18:36:30'!
portfolioAccountAlreadyRegistered
	^ 'You already registered the account'!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'AM 5/24/2021 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'AM 5/24/2021 18:36:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:37:27' prior: 50872719!
test06PortfolioCantRegisterSameAccountTwice
	|portfolio account  |
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio  addFinancialObject: account.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio addFinancialObject: account ].

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:37:45' prior: 50872756!
test07CannotAddAccountInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio2 addFinancialObject: account ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:38:07' prior: 50872833!
test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio3 addFinancialObject: account ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:38:40' prior: 50872870!
test10CannotAddAccountAlreadyInCousinLeaf
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: portfolio2.
	portfolio1 addFinancialObject: portfolio3.
	portfolio2 addFinancialObject: account.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio3 addFinancialObject: account ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:39:04' prior: 50872795!
test11CannotAddEmptyPortfolioTwiceInSamePorfolio
	|portfolio1 portfolio2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 addFinancialObject: portfolio2.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: portfolio2 ].	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:39:23' prior: 50872775!
test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	|portfolio1 portfolio2 emptyPortfolio  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	emptyPortfolio := Portfolio new.
	portfolio1 addFinancialObject: emptyPortfolio.
	portfolio1 addFinancialObject: portfolio2.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio2 addFinancialObject: emptyPortfolio ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:39:44' prior: 50872811!
test13CannotAddPortfolioWhenSharesAccountWithFutureBrother
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: portfolio3 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:40:26' prior: 50872735!
test17CannotAddPortfolioWhenSharesAccounWithxxx
	
	|portfolio1 portfolio2 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio2 addFinancialObject: portfolio3.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: portfolio2 ].! !

----SNAPSHOT----(24 May 2021 18:41:24) CuisUniversity-4532.image priorSource: 17304651!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 5/24/2021 18:53:21'!
createAccountWithDepositedAmount: anAmount 
	| anAccount|
	anAccount  := ReceptiveAccount  new.
	Deposit register: anAmount on: anAccount.
	^ anAccount ! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 5/24/2021 18:54:59' prior: 50861236!
test02DepositIncreasesBalanceOnTransactionValue 

		
	self assert: 100 equals: (self createAccountWithDepositedAmount: 100) balance.
! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 5/24/2021 18:55:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 18:57:50' overrides: 16927572!
setUp

	|portfolio1 portfolio2 portfolio3 account  account2 |
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addFinancialObject: account2.
	
	self assert: (portfolio3 includesFinancialObject: account2).
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:00:29' prior: 50873120 overrides: 16927572!
setUp
	"portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new."
	

	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:01:30' prior: 50867145!
test02PortFolioWithOneAccountHasAccountBalance
"	|portfolio |
	portfolio := Portfolio new.
	portfolio addFinancialObject: ( self createAccountWithDepositedAmount: 100).
	self assert: portfolio balance equals: 100"! !

----SNAPSHOT----(24 May 2021 19:02:08) CuisUniversity-4532.image priorSource: 17326280!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'AM 5/24/2021 19:02:11'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:02:09' prior: 50873139 overrides: 16927572!
setUp
	"portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new."
		portfolio4 := Portfolio new.

	

	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:02:49' prior: 50873148!
test02PortFolioWithOneAccountHasAccountBalance

	portfolio4 addFinancialObject: ( self createAccountWithDepositedAmount: 100).
	self assert: portfolio4 balance equals: 100! !

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 19:02:57'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:03:38' prior: 50867155!
test03PortfolioBalanceWithAPorfolioAndAccountBalance
	|portfolio10  portfolio2 | 
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio10 addFinancialObject: (self createAccountWithDepositedAmount: 100).
	portfolio2 addFinancialObject: portfolio10.
	portfolio2 addFinancialObject: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:05:19' prior: 50873192!
test03PortfolioBalanceWithAPorfolioAndAccountBalance
	|portfolio10  portfolio2 | 
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio10 addFinancialObject: (self createAccountWithDepositedAmount: 100).
	portfolio2 addFinancialObject: portfolio10.
	portfolio2 addFinancialObject: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4 portfolio2 '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4 portfolio2 '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4 portfolio2 '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:06:34' prior: 50873208!
test03PortfolioBalanceWithAPorfolioAndAccountBalance
	|portfolio10  portfolio20 | 
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	
	portfolio10 addFinancialObject: (self createAccountWithDepositedAmount: 100).
	portfolio20 addFinancialObject: portfolio10.
	portfolio20 addFinancialObject: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio20 balance equals: 350! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:06:59' prior: 50872982!
test07CannotAddAccountInPortfolioAlreadyInPortfolioFather
	|portfolio10 portfolio2 account  |
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio2.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio2 addFinancialObject: account ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:07:18' prior: 50873255!
test07CannotAddAccountInPortfolioAlreadyInPortfolioFather
	|portfolio10 portfolio20 account  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio20.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio20 addFinancialObject: account ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:07:38' prior: 50872997!
test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather
	|portfolio10 portfolio2 portfolio3 account  |
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio3 addFinancialObject: account ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:07:50' prior: 50873287!
test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather
	|portfolio10 portfolio20 portfolio3 account  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio20.
	portfolio20 addFinancialObject: portfolio3.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio3 addFinancialObject: account ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:08:19' prior: 50873305!
test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather
	|portfolio10 portfolio20 portfolio30 account  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio30 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio20.
	portfolio20 addFinancialObject: portfolio30.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio30 addFinancialObject: account ].
	
! !

----SNAPSHOT----(24 May 2021 19:08:55) CuisUniversity-4532.image priorSource: 17328216!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:14:24'!
portfoliosWhichImInAndArentInAnyOtherPortfolio

	|treeRoots|
	treeRoots:= Set new.
	portfoliosImIn ifEmpty: [treeRoots add:self].
	portfoliosImIn do: [:portfolio| treeRoots addAll: portfolio treeRoots].
	^treeRoots.! !
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:14:24' prior: 50872689!
completeTree
	|treeElements roots|
	treeElements:= Set new.
	roots:= self portfoliosWhichImInAndArentInAnyOtherPortfolio.
	roots do: [:aRoot| treeElements add: aRoot. 
		treeElements addAll: aRoot financialObjectsAddedTo].
	^treeElements! !
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:14:24' prior: 50871749!
treeRoots

	|treeRoots|
	treeRoots:= Set new.
	portfoliosImIn ifEmpty: [treeRoots add:self].
	portfoliosImIn do: [:portfolio| treeRoots addAll: portfolio portfoliosWhichImInAndArentInAnyOtherPortfolio].
	^treeRoots.! !
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:14:25' prior: 50873345!
portfoliosWhichImInAndArentInAnyOtherPortfolio

	|treeRoots|
	treeRoots:= Set new.
	portfoliosImIn ifEmpty: [treeRoots add:self].
	portfoliosImIn do: [:portfolio| treeRoots addAll: portfolio portfoliosWhichImInAndArentInAnyOtherPortfolio].
	^treeRoots.! !

!methodRemoval: FinancialObject #treeRoots stamp: 'AM 5/24/2021 19:14:25'!
treeRoots

	|treeRoots|
	treeRoots:= Set new.
	portfoliosImIn ifEmpty: [treeRoots add:self].
	portfoliosImIn do: [:portfolio| treeRoots addAll: portfolio portfoliosWhichImInAndArentInAnyOtherPortfolio].
	^treeRoots.!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:15:05' prior: 50873376!
portfoliosWhichImInAndArentInAnyOtherPortfolio

	|supraPortfolios|
	supraPortfolios:= Set new.
	portfoliosImIn ifEmpty: [supraPortfolios add:self].
	portfoliosImIn do: [:portfolio| supraPortfolios addAll: portfolio portfoliosWhichImInAndArentInAnyOtherPortfolio].
	^supraPortfolios.! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'AM 5/24/2021 19:15:11'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'AM 5/24/2021 19:15:11'!
PASSED!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:18:31'!
portfoliosInPortfoliosWhichImInAndArentInAnyOtherPortfolio
	|treeElements roots|
	treeElements:= Set new.
	roots:= self portfoliosWhichImInAndArentInAnyOtherPortfolio.
	roots do: [:aRoot| treeElements add: aRoot. 
		treeElements addAll: aRoot financialObjectsAddedTo].
	^treeElements! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:18:31' prior: 50872855!
addFinancialObject: aFinancialObject
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject financialObjectsAddedTo)).
	treeToAdd add: aFinancialObject.
	
	(self hasElementsInCommon: (self portfoliosInPortfoliosWhichImInAndArentInAnyOtherPortfolio) with: (treeToAdd))ifTrue: [self error: Portfolio financialObjectAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !

!methodRemoval: FinancialObject #completeTree stamp: 'AM 5/24/2021 19:18:31'!
completeTree
	|treeElements roots|
	treeElements:= Set new.
	roots:= self portfoliosWhichImInAndArentInAnyOtherPortfolio.
	roots do: [:aRoot| treeElements add: aRoot. 
		treeElements addAll: aRoot financialObjectsAddedTo].
	^treeElements!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:19:16'!
financialObjectsInPortfoliosWhichImInAndArentInAnyOtherPortfolio
	|treeElements roots|
	treeElements:= Set new.
	roots:= self portfoliosWhichImInAndArentInAnyOtherPortfolio.
	roots do: [:aRoot| treeElements add: aRoot. 
		treeElements addAll: aRoot financialObjectsAddedTo].
	^treeElements! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:19:16' prior: 50873483!
addFinancialObject: aFinancialObject
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject financialObjectsAddedTo)).
	treeToAdd add: aFinancialObject.
	
	(self hasElementsInCommon: (self financialObjectsInPortfoliosWhichImInAndArentInAnyOtherPortfolio) with: (treeToAdd))ifTrue: [self error: Portfolio financialObjectAlreadyRegistered].
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !

!methodRemoval: FinancialObject #portfoliosInPortfoliosWhichImInAndArentInAnyOtherPortfolio stamp: 'AM 5/24/2021 19:19:16'!
portfoliosInPortfoliosWhichImInAndArentInAnyOtherPortfolio
	|treeElements roots|
	treeElements:= Set new.
	roots:= self portfoliosWhichImInAndArentInAnyOtherPortfolio.
	roots do: [:aRoot| treeElements add: aRoot. 
		treeElements addAll: aRoot financialObjectsAddedTo].
	^treeElements!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'AM 5/24/2021 19:21:00'!
PASSED!

Object subclass: #FinancialObject
	instanceVariableNames: 'portfoliosImIn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialObject category: 'Portfolio-Ejercicio' stamp: 'AM 5/24/2021 19:21:29'!
Object subclass: #FinancialObject
	instanceVariableNames: 'portfoliosImIn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialObject subclass: #Portfolio
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 5/24/2021 19:21:44'!
FinancialObject subclass: #Portfolio
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'AM 5/24/2021 19:21:56'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AM 5/24/2021 19:23:01'!
FinancialObject subclass: #Portfolio
	instanceVariableNames: 'containedFinancialObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:23:01' prior: 50868018!
hasRegistered: aTransaction
	| isRegistered|
	isRegistered := false.
	containedFinancialObjects do: [:element| isRegistered := (element hasRegistered: aTransaction) or: isRegistered.  ] .
	^ isRegistered .
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:23:01' prior: 50868273 overrides: 50868211!
transactions
	|transactions|
	transactions  := Set new.
	containedFinancialObjects do: [:aFinancialObject| transactions  addAll: aFinancialObject transactions].
	^ transactions ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:23:01' prior: 50870751 overrides: 16896425!
initialize

	containedFinancialObjects:= Set new.
	portfoliosImIn := Set  new.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:23:01' prior: 50873522!
addFinancialObject: aFinancialObject
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject financialObjectsAddedTo)).
	treeToAdd add: aFinancialObject.
	
	(self hasElementsInCommon: (self financialObjectsInPortfoliosWhichImInAndArentInAnyOtherPortfolio) with: (treeToAdd))ifTrue: [self error: Portfolio financialObjectAlreadyRegistered].
	containedFinancialObjects add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:23:01' prior: 50872521 overrides: 50872451!
financialObjectsAddedTo
	|childSet|
	childSet:= Set new.
	childSet addAll: containedFinancialObjects.
	
	containedFinancialObjects do: [:financialElement|childSet addAll: (financialElement financialObjectsAddedTo)].
	
	^childSet.
	
	"((aFinancialObject childs) intersection (self completeTree) = empty) ifTrue [agrego] ifFalse [puteo]"



"	((self includesFinancialObject: aFinancialObject )or: (self isInUpperPortfolioTree: aFinancialObject) ) ifTrue:[ self error: Portfolio portfolioAccountAlreadyRegistered]. 
	
	elements add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. "! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:23:01' prior: 50861638 overrides: 50870901!
balance
	^ containedFinancialObjects sum:[:element| element balance] ifEmpty:[0]! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'AM 5/24/2021 19:23:22'!
PASSED!

----SNAPSHOT----(24 May 2021 19:23:28) CuisUniversity-4532.image priorSource: 17334115!
!FinancialObject methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:25:36' prior: 50873509!
financialObjectsInPortfoliosWhichImInAndArentInAnyOtherPortfolio
	|financialObjects supraPorfolios|
	financialObjects:= Set new.
	supraPorfolios:= self portfoliosWhichImInAndArentInAnyOtherPortfolio.
	supraPorfolios do: [:aSupraPortfolio| financialObjects add: aSupraPortfolio. 
		financialObjects addAll: aSupraPortfolio financialObjectsAddedTo].
	^financialObjects! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 5/24/2021 19:27:47' prior: 50873752 overrides: 50872451!
financialObjectsAddedTo
	|childSet|
	childSet:= Set new.
	childSet addAll: containedFinancialObjects.
	
	containedFinancialObjects do: [:financialElement|childSet addAll: (financialElement financialObjectsAddedTo)].
	
	^childSet.
	
	! !

----SNAPSHOT----(24 May 2021 19:31:25) CuisUniversity-4532.image priorSource: 17350130!

----QUIT----(24 May 2021 19:33:05) CuisUniversity-4532.image priorSource: 17351084!

----STARTUP---- (24 May 2021 20:24:59) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!


!classRemoval: #ReceptiveAccount stamp: 'sb 5/24/2021 20:25:10'!
FinancialObject subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'sb 5/24/2021 20:25:11'!
FinancialObject subclass: #Portfolio
	instanceVariableNames: 'containedFinancialObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialObject stamp: 'sb 5/24/2021 20:25:11'!
Object subclass: #FinancialObject
	instanceVariableNames: 'portfoliosImIn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'sb 5/24/2021 20:25:12'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'sb 5/24/2021 20:25:12'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'sb 5/24/2021 20:25:13'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'sb 5/24/2021 20:25:13'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'sb 5/24/2021 20:25:14'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'sb 5/24/2021 20:25:29'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sb 5/24/2021 20:25:29'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'sb 5/24/2021 20:25:29'!
FAILURE!

----End fileIn of /home/sebasbocaccio/Downloads/Portfolio-Ejercicio (1).st----!

!classRemoval: #ReceptiveAccount stamp: 'sb 5/24/2021 20:26:13'!
FinancialObject subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'sb 5/24/2021 20:26:14'!
FinancialObject subclass: #Portfolio
	instanceVariableNames: 'containedFinancialObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialObject stamp: 'sb 5/24/2021 20:26:14'!
Object subclass: #FinancialObject
	instanceVariableNames: 'portfoliosImIn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'sb 5/24/2021 20:26:15'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'sb 5/24/2021 20:26:15'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'sb 5/24/2021 20:26:16'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'sb 5/24/2021 20:26:16'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'sb 5/24/2021 20:26:17'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/sebasbocaccio/Downloads/Portfolio-Ejercicio (1).st----!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'sb 5/24/2021 20:26:38'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'sb 5/24/2021 20:26:38'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:28:49' prior: 50875661!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount

	|portfolio10 portfolio2 portfolio3 account  account2 |
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addFinancialObject: account2.
	
	self assert: (portfolio3 includesFinancialObject: account2).
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:29:29' prior: 50876295!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount

	|portfolio10 portfolio2 portfolio30 account  account2 |
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio30 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio30.
	
	account2 := ReceptiveAccount  new.
	portfolio30 addFinancialObject: account2.
	
	self assert: (portfolio30 includesFinancialObject: account2).
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:29:39' prior: 50876315!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount

	|portfolio10 portfolio20 portfolio30 account  account2 |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio30 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio20.
	portfolio20 addFinancialObject: portfolio30.
	
	account2 := ReceptiveAccount  new.
	portfolio30 addFinancialObject: account2.
	
	self assert: (portfolio30 includesFinancialObject: account2).
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:29:49' prior: 50876335!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount

	|portfolio10 portfolio20 portfolio30 account10  account2 |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio30 := Portfolio new.
	account10 := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account10.
	portfolio10 addFinancialObject: portfolio20.
	portfolio20 addFinancialObject: portfolio30.
	
	account2 := ReceptiveAccount  new.
	portfolio30 addFinancialObject: account2.
	
	self assert: (portfolio30 includesFinancialObject: account2).
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:30:00' prior: 50876355!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount

	|portfolio10 portfolio20 portfolio30 account10  account20 |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio30 := Portfolio new.
	account10 := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account10.
	portfolio10 addFinancialObject: portfolio20.
	portfolio20 addFinancialObject: portfolio30.
	
	account20 := ReceptiveAccount  new.
	portfolio30 addFinancialObject: account20.
	
	self assert: (portfolio30 includesFinancialObject: account20).
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:30:43' prior: 50875680!
test10CannotAddAccountAlreadyInCousinLeaf
	|portfolio1 portfolio20 portfolio3 account  |
	portfolio1 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio1 addFinancialObject: portfolio20.
	portfolio1 addFinancialObject: portfolio3.
	portfolio20 addFinancialObject: account.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio3 addFinancialObject: account ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:30:48' prior: 50876396!
test10CannotAddAccountAlreadyInCousinLeaf
	|portfolio10 portfolio20 portfolio3 account  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: portfolio20.
	portfolio10 addFinancialObject: portfolio3.
	portfolio20 addFinancialObject: account.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio3 addFinancialObject: account ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:30:57' prior: 50876414!
test10CannotAddAccountAlreadyInCousinLeaf
	|portfolio10 portfolio20 portfolio30 account  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio30 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: portfolio20.
	portfolio10 addFinancialObject: portfolio30.
	portfolio20 addFinancialObject: account.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio30 addFinancialObject: account ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:31:06' prior: 50876432!
test10CannotAddAccountAlreadyInCousinLeaf
	|portfolio10 portfolio20 portfolio30 account10  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio30 := Portfolio new.
	account10 := ReceptiveAccount  new.
	portfolio10 addFinancialObject: portfolio20.
	portfolio10 addFinancialObject: portfolio30.
	portfolio20 addFinancialObject: account10.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio30 addFinancialObject: account10 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:31:18' prior: 50875697!
test11CannotAddEmptyPortfolioTwiceInSamePorfolio
	|portfolio10 portfolio2 |
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio10 addFinancialObject: portfolio2.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio10 addFinancialObject: portfolio2 ].	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:31:27' prior: 50876468!
test11CannotAddEmptyPortfolioTwiceInSamePorfolio
	|portfolio10 portfolio20 |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio10 addFinancialObject: portfolio20.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio10 addFinancialObject: portfolio20 ].	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:31:41' prior: 50875709!
test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	|portfolio10 portfolio2 emptyPortfolio  |
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	emptyPortfolio := Portfolio new.
	portfolio10 addFinancialObject: emptyPortfolio.
	portfolio10 addFinancialObject: portfolio2.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio2 addFinancialObject: emptyPortfolio ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:31:55' prior: 50876494!
test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	|portfolio10 portfolio20 emptyPortfolio  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	emptyPortfolio := Portfolio new.
	portfolio10 addFinancialObject: emptyPortfolio.
	portfolio10 addFinancialObject: portfolio20.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio20 addFinancialObject: emptyPortfolio ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:32:04' prior: 50876510!
test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	|portfolio10 portfolio20 emptyPortfolio10  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	emptyPortfolio10 := Portfolio new.
	portfolio10 addFinancialObject: emptyPortfolio10.
	portfolio10 addFinancialObject: portfolio20.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio20 addFinancialObject: emptyPortfolio10 ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:32:18' prior: 50875725!
test13CannotAddPortfolioWhenSharesAccountWithFutureBrother
	
	|portfolio10 portfolio2 portfolio3 account  |
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio2 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio2.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio10 addFinancialObject: portfolio3 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:32:27' prior: 50876544!
test13CannotAddPortfolioWhenSharesAccountWithFutureBrother
	
	|portfolio10 portfolio20 portfolio3 account  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio20 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio20.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio10 addFinancialObject: portfolio3 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:32:31' prior: 50876562!
test13CannotAddPortfolioWhenSharesAccountWithFutureBrother
	
	|portfolio10 portfolio20 portfolio30 account  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio30 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio20 addFinancialObject: account.
	portfolio30 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio20.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio10 addFinancialObject: portfolio30 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:32:36' prior: 50876580!
test13CannotAddPortfolioWhenSharesAccountWithFutureBrother
	
	|portfolio10 portfolio20 portfolio30 account10  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio30 := Portfolio new.
	account10 := ReceptiveAccount  new.
	portfolio20 addFinancialObject: account10.
	portfolio30 addFinancialObject: account10.
	portfolio10 addFinancialObject: portfolio20.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio10 addFinancialObject: portfolio30 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:32:46' prior: 50875743!
test14EmptyPortfolioShouldHaveEmptyTransactions
	|portfolio10 |
	portfolio10 := Portfolio new.
	self assert: (portfolio10 transactions ) equals: Set new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:32:55' prior: 50875751!
test15PortfolioWithAccountHasAccountsTransactions
	|portfolio10 account deposit |
	portfolio10 := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	portfolio10 addFinancialObject: account .
	self assert: (portfolio10 transactions) equals:  (Set with: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:33:00' prior: 50876626!
test15PortfolioWithAccountHasAccountsTransactions
	|portfolio10 account10 deposit |
	portfolio10 := Portfolio new.
	account10 := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account10.
	portfolio10 addFinancialObject: account10 .
	self assert: (portfolio10 transactions) equals:  (Set with: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:33:12' prior: 50876639!
test15PortfolioWithAccountHasAccountsTransactions
	|portfolio10 account10 deposit10 |
	portfolio10 := Portfolio new.
	account10 := ReceptiveAccount  new.
	deposit10 := Deposit register: 100 on: account10.
	portfolio10 addFinancialObject: account10 .
	self assert: (portfolio10 transactions) equals:  (Set with: deposit10).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:33:30' prior: 50875764!
test16PortfolioWithPortfolioHasHisSonTransactions
	|portfolio10 portfolio2 account deposit |
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	portfolio2 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio2.
	self assert: (portfolio10 transactions) equals: (portfolio2 transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:33:40' prior: 50876667!
test16PortfolioWithPortfolioHasHisSonTransactions
	|portfolio10 portfolio20 account deposit |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	portfolio20 addFinancialObject: account.
	portfolio10 addFinancialObject: portfolio20.
	self assert: (portfolio10 transactions) equals: (portfolio20 transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:33:51' prior: 50876683!
test16PortfolioWithPortfolioHasHisSonTransactions
	|portfolio10 portfolio20 account10 deposit |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	account10 := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account10.
	portfolio20 addFinancialObject: account10.
	portfolio10 addFinancialObject: portfolio20.
	self assert: (portfolio10 transactions) equals: (portfolio20 transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:33:59' prior: 50876699!
test16PortfolioWithPortfolioHasHisSonTransactions
	|portfolio10 portfolio20 account10 deposit10 |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	account10 := ReceptiveAccount  new.
	deposit10 := Deposit register: 100 on: account10.
	portfolio20 addFinancialObject: account10.
	portfolio10 addFinancialObject: portfolio20.
	self assert: (portfolio10 transactions) equals: (portfolio20 transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:34:18' prior: 50875779!
test17CannotAddPortfolioWhenSharesAccounWithxxx
	
	|portfolio10 portfolio2 portfolio3 account  |
	portfolio10 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio2 addFinancialObject: portfolio3.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio10 addFinancialObject: portfolio2 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:34:22' prior: 50876732!
test17CannotAddPortfolioWhenSharesAccounWithxxx
	
	|portfolio10 portfolio20 portfolio3 account  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio3 addFinancialObject: account.
	portfolio20 addFinancialObject: portfolio3.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio10 addFinancialObject: portfolio20 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:34:34' prior: 50876750!
test17CannotAddPortfolioWhenSharesAccounWithxxx
	
	|portfolio10 portfolio20 portfolio30 account  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio30 := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account.
	portfolio30 addFinancialObject: account.
	portfolio20 addFinancialObject: portfolio30.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio10 addFinancialObject: portfolio20 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:34:42' prior: 50876768!
test17CannotAddPortfolioWhenSharesAccounWithxxx
	
	|portfolio10 portfolio20 portfolio30 account10  |
	portfolio10 := Portfolio new.
	portfolio20 := Portfolio new.
	portfolio30 := Portfolio new.
	account10 := ReceptiveAccount  new.
	portfolio10 addFinancialObject: account10.
	portfolio30 addFinancialObject: account10.
	portfolio20 addFinancialObject: portfolio30.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio10 addFinancialObject: portfolio20 ].! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'sb 5/24/2021 20:34:55'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4 portfolio1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'sb 5/24/2021 20:34:56'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4 portfolio1 portfolio2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'sb 5/24/2021 20:34:57'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4 portfolio1 portfolio2 portfolio3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'sb 5/24/2021 20:35:14'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4 portfolio1 portfolio2 portfolio3 account1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'sb 5/24/2021 20:35:15'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio4 portfolio1 portfolio2 portfolio3 account1 account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:35:13' prior: 50875560 overrides: 16927572!
setUp
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
		

	

	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:35:57' prior: 50876849 overrides: 16927572!
setUp
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
		

	

	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:36:07' prior: 50875570!
test02PortFolioWithOneAccountHasAccountBalance

	portfolio1 addFinancialObject: ( self createAccountWithDepositedAmount: 100).
	self assert: portfolio1 balance equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:36:51' prior: 50875542!
test01NewPortfolioHasBalance0

	self assert: portfolio1 balance equals: 0! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:37:13' prior: 50875578!
test03PortfolioBalanceWithAPorfolioAndAccountBalance
	
	portfolio1 addFinancialObject: (self createAccountWithDepositedAmount: 100).
	portfolio2 addFinancialObject: portfolio1.
	portfolio2 addFinancialObject: (self createAccountWithDepositedAmount: 250).
	
	self assert: portfolio2 balance equals: 350! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'sb 5/24/2021 20:37:16'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'sb 5/24/2021 20:37:16'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:37:47' prior: 50875594!
test04PortfolioHasRegisteredAccountDeposit
	|deposit|
	
	deposit := Deposit register: 100 on: account1.
	portfolio1 addFinancialObject: account1 .
	
	self assert: (portfolio1 hasRegistered: deposit) equals: true.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:39:09' prior: 50875606!
test05PortfolioShouldntHaveDepositAdded
	|deposit |
	account1 := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account1.
	self deny: (portfolio1 hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:39:26' prior: 50875616!
test06PortfolioCantRegisterSameAccountTwice

	account1 := ReceptiveAccount  new.
	portfolio1  addFinancialObject: account1.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: account1 ].

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:39:49' prior: 50875628!
test07CannotAddAccountInPortfolioAlreadyInPortfolioFather
	
	account1 := ReceptiveAccount  new.
	portfolio1 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio2 addFinancialObject: account1 ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:40:16' prior: 50875643!
test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather
	
	portfolio1 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio3 addFinancialObject: account1 ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:41:12' prior: 50876375!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount



	portfolio1 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addFinancialObject: account2.
	
	self assert: (portfolio3 includesFinancialObject: account2).
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:41:25' prior: 50877014!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount
	portfolio1 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	
	account2 := ReceptiveAccount  new.
	portfolio3 addFinancialObject: account2.
	
	self assert: (portfolio3 includesFinancialObject: account2).
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:41:48' prior: 50876450!
test10CannotAddAccountAlreadyInCousinLeaf

	portfolio1 addFinancialObject: portfolio2.
	portfolio1 addFinancialObject: portfolio3.
	portfolio2 addFinancialObject: account1.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio3 addFinancialObject: account1 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:42:36' prior: 50876481!
test11CannotAddEmptyPortfolioTwiceInSamePorfolio

	portfolio1 addFinancialObject: portfolio2.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: portfolio2 ].	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:43:28' prior: 50876527!
test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	
	portfolio1 addFinancialObject: portfolio3 .
	portfolio1 addFinancialObject: portfolio2.
	
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio2 addFinancialObject: portfolio3 ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:43:51' prior: 50876599!
test13CannotAddPortfolioWhenSharesAccountWithFutureBrother

	portfolio2 addFinancialObject: account1.
	portfolio3 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: portfolio3 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:44:04' prior: 50876618!
test14EmptyPortfolioShouldHaveEmptyTransactions

	self assert: (portfolio1 transactions ) equals: Set new.! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'sb 5/24/2021 20:44:07'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'sb 5/24/2021 20:44:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:45:24' prior: 50876653!
test15PortfolioWithAccountHasAccountsTransactions
	| deposit |

	deposit := Deposit register: 100 on: account1.
	portfolio1 addFinancialObject: account1 .
	self assert: (portfolio1 transactions) equals:  (Set with: deposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:45:50' prior: 50876715!
test16PortfolioWithPortfolioHasHisSonTransactions
	| deposit |

	deposit := Deposit register: 100 on: account1.
	portfolio2 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	self assert: (portfolio1 transactions) equals: (portfolio2 transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:46:23' prior: 50876786!
test17CannotAddPortfolioWhenSharesAccounWithxxx
	
	portfolio1 addFinancialObject: account1.
	portfolio3 addFinancialObject: account1.
	portfolio2 addFinancialObject: portfolio3.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: portfolio2 ].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:46:33' prior: 50876877!
test01NewPortfolioHasBalance0
	self assert: portfolio1 balance equals: 0! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:46:41' prior: 50876868!
test02PortFolioWithOneAccountHasAccountBalance
	portfolio1 addFinancialObject: ( self createAccountWithDepositedAmount: 100).
	self assert: portfolio1 balance equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:46:50' prior: 50876883!
test03PortfolioBalanceWithAPorfolioAndAccountBalance
	
	portfolio1 addFinancialObject: (self createAccountWithDepositedAmount: 100).
	portfolio2 addFinancialObject: portfolio1.
	portfolio2 addFinancialObject: (self createAccountWithDepositedAmount: 250).
	self assert: portfolio2 balance equals: 350! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:47:13' prior: 50876958!
test04PortfolioHasRegisteredAccountDeposit
	|deposit|
	deposit := Deposit register: 100 on: account1.
	portfolio1 addFinancialObject: account1 .
	self assert: (portfolio1 hasRegistered: deposit) equals: true.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:47:38' prior: 50876977!
test06PortfolioCantRegisterSameAccountTwice
	portfolio1  addFinancialObject: account1.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: account1 ].

	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:47:49' prior: 50876988!
test07CannotAddAccountInPortfolioAlreadyInPortfolioFather
	
	portfolio1 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio2 addFinancialObject: account1 ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:47:53' prior: 50877001!
test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather
	
	portfolio1 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio3 addFinancialObject: account1 ].
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:48:05' prior: 50877028!
test09CanAddAccountInPortfolioTreeWithouRepeatedAccount
	
	portfolio1 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	portfolio2 addFinancialObject: portfolio3.
	portfolio3 addFinancialObject: account2.
	self assert: (portfolio3 includesFinancialObject: account2).
	
	
	


	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'sb 5/24/2021 20:48:14' prior: 50877064!
test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather
	
	portfolio1 addFinancialObject: portfolio3 .
	portfolio1 addFinancialObject: portfolio2.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio2 addFinancialObject: portfolio3 ].
	
! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'sb 5/24/2021 20:54:39'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'sb 5/24/2021 20:54:39'!
PASSED!
!PortfolioTest methodsFor: 'test-addRepeatedPortfolios' stamp: 'sb 5/24/2021 20:59:06'!
test17CannotAddPortfolioWhenSharesAccountWithGreatUncle
	
	portfolio1 addFinancialObject: account1.
	portfolio3 addFinancialObject: account1.
	portfolio2 addFinancialObject: portfolio3.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: portfolio2 ].! !

!methodRemoval: PortfolioTest #test17CannotAddPortfolioWhenSharesAccounWithxxx stamp: 'sb 5/24/2021 20:59:06'!
test17CannotAddPortfolioWhenSharesAccounWithxxx
	
	portfolio1 addFinancialObject: account1.
	portfolio3 addFinancialObject: account1.
	portfolio2 addFinancialObject: portfolio3.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: portfolio2 ].!
!PortfolioTest methodsFor: 'test-transactions' stamp: 'sb 5/24/2021 21:01:57'!
test18PortfolioWithPortfolioHasHisGrandsonTransactions
	| deposit |

	deposit := Deposit register: 100 on: account1.
	portfolio2 addFinancialObject: account1.
	portfolio3 addFinancialObject: portfolio2.
	portfolio1 addFinancialObject: portfolio3 .
	self assert: (portfolio1 transactions) equals: (portfolio2 transactions).! !

!testRun: #PortfolioTest #test18PortfolioWithPortfolioHasHisGrandsonTransactions stamp: 'sb 5/24/2021 21:02:03'!
PASSED!
!PortfolioTest methodsFor: 'test-addRepeatedPortfolios' stamp: 'sb 5/24/2021 21:02:50'!
test14CannotAddPortfolioWhenSharesAccountWithGreatUncle
	
	portfolio1 addFinancialObject: account1.
	portfolio3 addFinancialObject: account1.
	portfolio2 addFinancialObject: portfolio3.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: portfolio2 ].! !

!methodRemoval: PortfolioTest #test17CannotAddPortfolioWhenSharesAccountWithGreatUncle stamp: 'sb 5/24/2021 21:02:52'!
test17CannotAddPortfolioWhenSharesAccountWithGreatUncle
	
	portfolio1 addFinancialObject: account1.
	portfolio3 addFinancialObject: account1.
	portfolio2 addFinancialObject: portfolio3.
	self blockShouldTriggerFinancialObjectAlreadyRegistered: [ portfolio1 addFinancialObject: portfolio2 ].!
!PortfolioTest methodsFor: 'test-transactions' stamp: 'sb 5/24/2021 21:03:16'!
test15EmptyPortfolioShouldHaveEmptyTransactions

	self assert: (portfolio1 transactions ) equals: Set new.! !

!methodRemoval: PortfolioTest #test14EmptyPortfolioShouldHaveEmptyTransactions stamp: 'sb 5/24/2021 21:03:16'!
test14EmptyPortfolioShouldHaveEmptyTransactions

	self assert: (portfolio1 transactions ) equals: Set new.!
!PortfolioTest methodsFor: 'test-transactions' stamp: 'sb 5/24/2021 21:03:23'!
test16PortfolioWithAccountHasAccountsTransactions
	| deposit |

	deposit := Deposit register: 100 on: account1.
	portfolio1 addFinancialObject: account1 .
	self assert: (portfolio1 transactions) equals:  (Set with: deposit ).! !

!methodRemoval: PortfolioTest #test15PortfolioWithAccountHasAccountsTransactions stamp: 'sb 5/24/2021 21:03:23'!
test15PortfolioWithAccountHasAccountsTransactions
	| deposit |

	deposit := Deposit register: 100 on: account1.
	portfolio1 addFinancialObject: account1 .
	self assert: (portfolio1 transactions) equals:  (Set with: deposit ).!
!PortfolioTest methodsFor: 'test-transactions' stamp: 'sb 5/24/2021 21:03:32'!
test17PortfolioWithPortfolioHasHisSonTransactions
	| deposit |

	deposit := Deposit register: 100 on: account1.
	portfolio2 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	self assert: (portfolio1 transactions) equals: (portfolio2 transactions).! !

!methodRemoval: PortfolioTest #test16PortfolioWithPortfolioHasHisSonTransactions stamp: 'sb 5/24/2021 21:03:32'!
test16PortfolioWithPortfolioHasHisSonTransactions
	| deposit |

	deposit := Deposit register: 100 on: account1.
	portfolio2 addFinancialObject: account1.
	portfolio1 addFinancialObject: portfolio2.
	self assert: (portfolio1 transactions) equals: (portfolio2 transactions).!

----QUIT----(24 May 2021 21:29:17) CuisUniversity-4532.image priorSource: 17351173!

----STARTUP---- (25 May 2021 15:00:35) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!

!Portfolio methodsFor: 'initialization' stamp: 'sb 5/25/2021 15:02:00' prior: 50876097 overrides: 16896425!
initialize
	containedFinancialObjects:= Set new.
	portfoliosImIn := Set  new.
! !
!Portfolio methodsFor: 'private' stamp: 'sb 5/25/2021 15:03:35'!
hasElementsInCommonWith: anotherSet
	|hasElementsInCommon|
	hasElementsInCommon:=false.
	self  do: [:anElement| hasElementsInCommon:=hasElementsInCommon or: (anotherSet includes: anElement)].
	^hasElementsInCommon! !
!Portfolio methodsFor: 'private' stamp: 'sb 5/25/2021 15:04:11' prior: 50877489!
hasElementsInCommonWith: anotherSet
	|hasElementsInCommon|
	hasElementsInCommon:=false.
	self financialObjectsInPortfoliosWhichImInAndArentInAnyOtherPortfolio do: [:anElement| hasElementsInCommon:=hasElementsInCommon or: (anotherSet includes: anElement)].
	^hasElementsInCommon! !
!Portfolio methodsFor: 'adding' stamp: 'sb 5/25/2021 15:04:31' prior: 50876137!
addFinancialObject: aFinancialObject
	
	|treeToAdd|
	treeToAdd:=((aFinancialObject financialObjectsAddedTo)).
	treeToAdd add: aFinancialObject.
	
	(self hasElementsInCommonWith: (treeToAdd))ifTrue: [self error: Portfolio financialObjectAlreadyRegistered].
	containedFinancialObjects add:  aFinancialObject.
	aFinancialObject addedToPortfolio: self. ! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test14CannotAddPortfolioWhenSharesAccountWithGreatUncle stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test15EmptyPortfolioShouldHaveEmptyTransactions stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithAccountHasAccountsTransactions stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithPortfolioHasHisSonTransactions stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithPortfolioHasHisGrandsonTransactions stamp: 'sb 5/25/2021 15:04:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'sb 5/25/2021 15:04:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'sb 5/25/2021 15:04:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'sb 5/25/2021 15:04:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'sb 5/25/2021 15:04:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'sb 5/25/2021 15:04:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'sb 5/25/2021 15:04:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'sb 5/25/2021 15:04:51'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test14CannotAddPortfolioWhenSharesAccountWithGreatUncle stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test15EmptyPortfolioShouldHaveEmptyTransactions stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithAccountHasAccountsTransactions stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithPortfolioHasHisSonTransactions stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithPortfolioHasHisGrandsonTransactions stamp: 'sb 5/25/2021 15:04:55'!
PASSED!

!methodRemoval: Portfolio #hasElementsInCommon:with: stamp: 'sb 5/25/2021 15:05:02'!
hasElementsInCommon: aSet with: anotherSet
	|hasElementsInCommon|
	hasElementsInCommon:=false.
	aSet do: [:anElement| hasElementsInCommon:=hasElementsInCommon or: (anotherSet includes: anElement)].
	^hasElementsInCommon!
!Portfolio methodsFor: 'private' stamp: 'sb 5/25/2021 15:06:22' prior: 50877499!
hasElementsInCommonWith: setWithFinancialObjects
	|hasElementsInCommon|
	hasElementsInCommon:=false.
	self financialObjectsInPortfoliosWhichImInAndArentInAnyOtherPortfolio do: [:anElement| hasElementsInCommon:=hasElementsInCommon or: (setWithFinancialObjects includes: anElement)].
	^hasElementsInCommon! !

!testRun: #PortfolioTest #test01NewPortfolioHasBalance0 stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test02PortFolioWithOneAccountHasAccountBalance stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioBalanceWithAPorfolioAndAccountBalance stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasRegisteredAccountDeposit stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldntHaveDepositAdded stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCantRegisterSameAccountTwice stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAccountInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test08CannotAddAccountInPorfolioAlreadyInPortfolioGrandfather stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test09CanAddAccountInPortfolioTreeWithouRepeatedAccount stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddAccountAlreadyInCousinLeaf stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test11CannotAddEmptyPortfolioTwiceInSamePorfolio stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddEmptyPortfolioInPortfolioAlreadyInPortfolioFather stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddPortfolioWhenSharesAccountWithFutureBrother stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test14CannotAddPortfolioWhenSharesAccountWithGreatUncle stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test15EmptyPortfolioShouldHaveEmptyTransactions stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithAccountHasAccountsTransactions stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test17PortfolioWithPortfolioHasHisSonTransactions stamp: 'sb 5/25/2021 15:06:28'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioWithPortfolioHasHisGrandsonTransactions stamp: 'sb 5/25/2021 15:06:28'!
PASSED!
!FinancialObject methodsFor: 'private' stamp: 'sb 5/25/2021 15:07:09' prior: 50876051!
portfoliosWhichImInAndArentInAnyOtherPortfolio
"Returns the roots of the trees"

	|supraPortfolios|
	supraPortfolios:= Set new.
	portfoliosImIn ifEmpty: [supraPortfolios add:self].
	portfoliosImIn do: [:portfolio| supraPortfolios addAll: portfolio portfoliosWhichImInAndArentInAnyOtherPortfolio].
	^supraPortfolios.! !
!FinancialObject methodsFor: 'private' stamp: 'sb 5/25/2021 15:08:16' prior: 50876037!
financialObjectsInPortfoliosWhichImInAndArentInAnyOtherPortfolio
"Return all elements of the trees im in"

	|financialObjects supraPorfolios|
	financialObjects:= Set new.
	supraPorfolios:= self portfoliosWhichImInAndArentInAnyOtherPortfolio.
	supraPorfolios do: [:aSupraPortfolio| financialObjects add: aSupraPortfolio. 
		financialObjects addAll: aSupraPortfolio financialObjectsAddedTo].
	^financialObjects! !
!Portfolio methodsFor: 'private' stamp: 'sb 5/25/2021 15:10:57' prior: 50876077 overrides: 50876033!
financialObjectsAddedTo
" Return all financial objects connected below me in the tree"

	|childSet|
	childSet:= Set new.
	childSet addAll: containedFinancialObjects.
	
	containedFinancialObjects do: [:financialElement|childSet addAll: (financialElement financialObjectsAddedTo)].
	
	^childSet.
	
	! !
!Portfolio methodsFor: 'private' stamp: 'sb 5/25/2021 15:11:32' prior: 50877802 overrides: 50876033!
financialObjectsAddedTo
" Return all financial objects under me in the tree"

	|childSet|
	childSet:= Set new.
	childSet addAll: containedFinancialObjects.
	
	containedFinancialObjects do: [:financialElement|childSet addAll: (financialElement financialObjectsAddedTo)].
	
	^childSet.
	
	! !
!Portfolio methodsFor: 'private' stamp: 'sb 5/25/2021 15:12:25' prior: 50877815 overrides: 50876033!
financialObjectsAddedTo


	|childSet|
	childSet:= Set new.
	childSet addAll: containedFinancialObjects.
	
	containedFinancialObjects do: [:financialElement|childSet addAll: (financialElement financialObjectsAddedTo)].
	
	^childSet.
	
	! !
!FinancialObject methodsFor: 'private' stamp: 'sb 5/25/2021 15:12:31' prior: 50876033!
financialObjectsAddedTo
" Return all financial objects under me in the tree"
	self subclassResponsibility ! !

----QUIT----(25 May 2021 15:18:39) CuisUniversity-4532.image priorSource: 17466423!

----STARTUP---- (25 May 2021 19:56:16) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!


----QUIT----(25 May 2021 19:58:12) CuisUniversity-4532.image priorSource: 17478221!