----End fileIn of /home/igna/Desktop/17-Portfolio 1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:19:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:19:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/17/2021 20:19:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:19:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/17/2021 20:23:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:23:27'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 20:33:46' prior: 50865886!
balance

	^ self depositsBalance - (self withdrawalsBalance)! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 20:37:16'!
depositsBalance

	^ transactions inject: 0 into: [:aTransaction | aTransaction isDeposit]! !
!AccountTransaction methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:37:39'!
isDeposit

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:38:17'!
isWithdraw

	self subclassResponsibility ! !
!Deposit methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:38:38' overrides: 50865960!
isDeposit

	^ true! !
!Deposit methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:38:48' overrides: 50865964!
isWithdraw

	^ false! !
!Withdraw methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:39:03' overrides: 50865960!
isDeposit

	^false! !
!Withdraw methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:39:14' overrides: 50865964!
isWithdraw

	^true! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 20:40:43' prior: 50865954!
depositsBalance

	^ (transactions select: [:aTransaction | aTransaction isDeposit]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 20:41:16'!
withdrawalsBalance

	^ (transactions select: [:aTransaction | aTransaction isWithdraw]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:42:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/17/2021 20:42:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/17/2021 20:42:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/17/2021 20:42:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/17/2021 20:42:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/17/2021 20:42:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:46:01' prior: 50865746!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:46:45'!
test08

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:48:27' prior: 50866061!
test08

	! !

!methodRemoval: ReceptiveAccountTest #test08 stamp: 'ijgt 5/17/2021 20:48:35'!
test08

	!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/17/2021 20:49:00'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'ijgt 5/17/2021 20:49:22'!
test01! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:49:36' prior: 50866086!
test01

	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/17/2021 20:51:44'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:51:22' prior: 50866089!
test01

	|aPortfolio|
	aPortfolio := Portfolio new
	self assert: (aPortfolio accounts)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:52:24' prior: 50866100!
test01

	|aPortfolio|
	aPortfolio := Portfolio new.
	self assert: (aPortfolio accounts isEmpty)! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:52:30'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:52:30'!
ERROR!
!Portfolio class methodsFor: 'no messages' stamp: 'ijgt 5/17/2021 20:54:30' overrides: 16783533!
new

	self initialize! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ijgt 5/17/2021 20:54:40' prior: 50866117 overrides: 16783533!
new

	^self initialize! !
!Portfolio methodsFor: 'no messages' stamp: 'ijgt 5/17/2021 20:55:30' overrides: 16896425!
initialize

	accounts := OrderedCollection new! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:55:43'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:55:43'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:55:52'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:56:23'!
accounts

	^ accounts ! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:56:28'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:56:28'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:57:05'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:57:05'!
ERROR!
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 20:57:50' prior: 50866122 overrides: 16783533!
new

	self initialize! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:57:57'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:57:57'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:58:35'!
ERROR!
!Portfolio class methodsFor: 'algo' stamp: 'ijgt 5/17/2021 20:59:17'!
accounts
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'algo' stamp: 'ijgt 5/17/2021 20:59:32' prior: 50866161!
accounts
	! !

!methodRemoval: Portfolio class #accounts stamp: 'ijgt 5/17/2021 20:59:45'!
accounts
	!
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 21:00:38' prior: 50866151 overrides: 16783533!
new

	^ self new initialize! !
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 21:01:05'!
create

	^ self new initialize! !
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 21:01:16' prior: 50866172 overrides: 16783533!
new

	^ self initialize! !
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 21:01:21' prior: 50866181 overrides: 16783533!
new

	self initialize! !
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 21:01:30' prior: 50866186 overrides: 16783533!
new

	^ self initialize! !

!methodRemoval: Portfolio class #new stamp: 'ijgt 5/17/2021 21:01:49'!
new

	^ self initialize!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:01:59' prior: 50866106!
test01

	|aPortfolio|
	aPortfolio := Portfolio create.
	self assert: (aPortfolio accounts isEmpty)! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 21:02:02'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 21:02:04'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:04:54'!
test02

	|aPortfolio anAccount|
	aPortfolio := Portfolio create.
	aPortfolio addAccount: anAccount.
	self assert: (aPortfolio accounts isEmpty)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:06:05' prior: 50866209!
test02

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts isEmpty)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:06:44' prior: 50866217!
test02

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts isEmpty)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:08:22' prior: 50866228!
test02

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/17/2021 21:08:27'!
ERROR!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/17/2021 21:08:43'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/17/2021 21:09:12' prior: 50866250!
addAccount: aReceptiveAccount 
	accounts add: aReceptiveAccount! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/17/2021 21:09:17' prior: 50866255!
addAccount: aReceptiveAccount

	accounts add: aReceptiveAccount! !

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/17/2021 21:10:32'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 21:10:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/17/2021 21:10:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:10:50'!
test03

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:10:52'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 21:10:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/17/2021 21:10:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:10:52'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:43:26' prior: 50865992!
withdrawalsBalance

	^ (transactions select: [:aTransaction | aTransaction isKindOf: Withdraw]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:43:37' prior: 50865985!
depositsBalance

	^ (transactions select: [:aTransaction | aTransaction isKindOf: Deposit ]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!methodRemoval: AccountTransaction #isDeposit stamp: 'ijgt 5/17/2021 21:43:52'!
isDeposit

	self subclassResponsibility !

!methodRemoval: AccountTransaction #isWithdraw stamp: 'ijgt 5/17/2021 21:43:56'!
isWithdraw

	self subclassResponsibility !

!methodRemoval: Withdraw #isDeposit stamp: 'ijgt 5/17/2021 21:44:08'!
isDeposit

	^false!

!methodRemoval: Withdraw #isWithdraw stamp: 'ijgt 5/17/2021 21:44:12'!
isWithdraw

	^true!

!methodRemoval: Deposit #isDeposit stamp: 'ijgt 5/17/2021 21:44:19'!
isDeposit

	^ true!

!methodRemoval: Deposit #isWithdraw stamp: 'ijgt 5/17/2021 21:44:23'!
isWithdraw

	^ false!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:46:06'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:48:29' prior: 50866272!
test03

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:48:32'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:48:49'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:49:30' prior: 50866369!
balance
	
	^ accounts sum! !

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:49:33'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:49:45'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:52:13' prior: 50866373!
balance
	
	^ 100! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 21:52:18'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/17/2021 21:52:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:52:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:52:32'!
test04

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 101 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 101! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:52:37'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:53:56' prior: 50866392!
test04

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 200! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:53:57'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:55:19' prior: 50866404!
test04

	|aPortfolio account secondAccount|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: secondAccount .	
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: secondAccount.
	self assert: (aPortfolio balance) equals: 200! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:55:51'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:55:51'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:56:39' prior: 50866382!
balance
	
	^ accounts sum: [:account | account balance]! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:56:43'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:56:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:59:59' prior: 50866417!
test04

	|aPortfolio account |
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 200! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 22:00:33'!
test05

	|aPortfolio account |
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 200! !

----QUIT----(17 May 2021 22:15:18) CuisUniversity-4532.image priorSource: 17088489!

----STARTUP---- (20 May 2021 16:14:14) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:14:47'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:21:09' prior: 50866446!
test04

	|aPortfolio account |
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:21:13'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:23:19'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:26:26' prior: 50866260!
addAccount: aReceptiveAccount

	(accounts includes: aReceptiveAccount) ifFalse: [accounts add: aReceptiveAccount].! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:26:42'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:26:42'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:26:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:27:08' prior: 50866198!
test01

	|aPortfolio|
	aPortfolio := Portfolio new.
	self assert: (aPortfolio accounts isEmpty)! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:27:09'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:27:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:27:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:27:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:27:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:27:09'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:27:09'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:27:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:27:29' prior: 50866239!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:27:34' prior: 50866357!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:27:40' prior: 50866476!
test04

	|aPortfolio account |
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:27:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:27:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:27:47'!
PASSED!

!methodRemoval: Portfolio class #create stamp: 'ijgt 5/20/2021 16:28:01'!
create

	^ self new initialize!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:28:42' prior: 50866457!
test05

	|aPortfolio account |
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 200! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:30:05' prior: 50866583!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:30:07'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'ijgt 5/20/2021 16:30:51' prior: 50866436!
balance
	
	^ accounts sum: [:account | account balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:30:57'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:30:57'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:31:35' prior: 50866594!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aSecondPortfolio addAccount: aPortfolio.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:32:04' prior: 50866618!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:33:05' prior: 50866631!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:35:14'!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: aPortfolio.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:37:53' prior: 50866685!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: aPortfolio.
	self assert: [aPortfolio accounts isEmpty]! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:38:00' prior: 50866693!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: aPortfolio.
	self assert: aPortfolio accounts isEmpty! !

----SNAPSHOT----(20 May 2021 16:38:16) CuisUniversity-4532.image priorSource: 17114139!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:38:25'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:42:31' prior: 50866492!
addAccount: aReceptiveAccount

	(self ~= aReceptiveAccount and: [accounts includes: aReceptiveAccount]) ifFalse: [accounts add: aReceptiveAccount].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:42:32'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:43:25' prior: 50866712!
addAccount: aReceptiveAccount

	((self ~= aReceptiveAccount) and: [accounts includes: aReceptiveAccount]) ifFalse: [accounts add: aReceptiveAccount].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:43:26'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:44:25' prior: 50866722!
addAccount: aReceptiveAccount

	((self ~= aReceptiveAccount) or: [accounts includes: aReceptiveAccount]) ifFalse: [accounts add: aReceptiveAccount].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:44:35'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:45:57' prior: 50866732!
addAccount: aReceptiveAccount

	((self == aReceptiveAccount) or: [accounts includes: aReceptiveAccount]) ifFalse: [accounts add: aReceptiveAccount].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:46:05'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:48:21'!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	aSecondPortfolio addAccount: aPortfolio.
	self assert: aSecondPortfolio accounts isEmpty! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:49:45' prior: 50866742!
addAccount: anAccount

	((self == anAccount) or: [accounts includes: anAccount]) ifFalse: [accounts add: anAccount].! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:49:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:49:57'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:49:58'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:50:00'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:50:01'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:50:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 20:12:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:12:11'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:14:19' prior: 50866562!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/20/2021 20:14:20'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/20/2021 20:14:20'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:19:34' prior: 50866805!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: Portfolio accountCanNotBeAddedErrorDescription]! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:19:39'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 20:21:31' prior: 50866777!
addAccount: anAccount

	((self == anAccount) or: [accounts includes: anAccount]) ifTrue: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:24:54' prior: 50866837!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !
!Portfolio methodsFor: 'error descriptions' stamp: 'ijgt 5/20/2021 20:26:10'!
accountCanNotBeAddedErrorDescription

	^ ''! !
!Portfolio methodsFor: 'error descriptions' stamp: 'ijgt 5/20/2021 20:28:38' prior: 50866876!
accountCanNotBeAddedErrorDescription

	^ 'Account already exists in Portfolio, or is the Portfolio itself.'! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:29:07'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:31:39' prior: 50866658!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:31:44'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:31:44'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:33:05' prior: 50866890!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:32:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:32:46' prior: 50866700!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	
	
	aPortfolio addAccount: aPortfolio.
	self assert: aPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:33:17' prior: 50866926!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/20/2021 20:33:27'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/20/2021 20:33:27'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 20:33:33'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:34:34' prior: 50866766!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/20/2021 20:34:36'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/20/2021 20:47:32'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialize' stamp: 'ijgt 5/20/2021 20:47:51' prior: 50866126 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 20:51:03' prior: 50866853!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/20/2021 20:54:39'!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	parents do: []! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/20/2021 21:59:46'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts parents rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/20/2021 21:59:37' prior: 50867012!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/20/2021 21:59:56'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialize' stamp: 'ijgt 5/20/2021 22:00:33' prior: 50866999 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	rootPortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 15:43:10'!
register: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866862!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio register: account.
	self should: [aPortfolio register: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866968!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: aSecondPortfolio.
	self should: [aSecondPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866911!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: account.
	aPortfolio register: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866933!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866552!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio register: account.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866543!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio register: account.
	self assert: (aPortfolio accounts includes: account) .! !

!methodRemoval: Portfolio #addAccount: stamp: 'ijgt 5/21/2021 15:43:10'!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 15:43:49'!
canRegister: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:49' prior: 50867027!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canRegister: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:49' prior: 50867054!
register: anAccount

	(self canRegister: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:49' prior: 50867141!
canRegister: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canRegister: anAccount]
	! !

!methodRemoval: Portfolio #canAddAccount: stamp: 'ijgt 5/21/2021 15:43:49'!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canRegister: anAccount]
	!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:47:27'!
test08

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:47:56'!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: aSecondPortfolio.
	self should: [aSecondPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!methodRemoval: PortfolioTest #test07 stamp: 'ijgt 5/21/2021 15:47:56'!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: aSecondPortfolio.
	self should: [aSecondPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:48:02'!
test07

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !

!methodRemoval: PortfolioTest #test08 stamp: 'ijgt 5/21/2021 15:48:08'!
test08

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:48:36' prior: 50867221!
test07

	|aPortfolio|
	aPortfolio := Portfolio new.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:55:26' prior: 50867241!
test07

	|aPortfolio account |
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	self assert: (aPortfolio transactions) isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:55:42' prior: 50867246!
test07

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty! !

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 15:55:49'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:56:10'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:56:37' prior: 50867263!
transactions
	
	^ OrderedCollection new! !

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 15:56:43'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 15:56:43'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 15:56:43'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 15:56:43'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 15:56:43'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 15:56:43'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 15:56:43'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 15:56:43'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 15:56:43'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 15:57:05'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 15:57:07'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 15:57:07'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'ijgt 5/21/2021 16:04:47'!
addAccount: aTransaction

	transactions add: aTransaction 
! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:04:47'!
addAccount: anAccount

	(self canRegister: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867116!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867126!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867062!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867192!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867092!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867105!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !
!AccountTransaction class methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50865783!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account addAccount: transaction.
		
	^ transaction! !

!methodRemoval: ReceptiveAccount #register: stamp: 'ijgt 5/21/2021 16:04:47'!
register: aTransaction

	transactions add: aTransaction 
!

!methodRemoval: Portfolio #register: stamp: 'ijgt 5/21/2021 16:04:47'!
register: anAccount

	(self canRegister: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 16:05:32'!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canRegister: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:05:32' prior: 50867305!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:05:32' prior: 50867167!
canRegister: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:05:32' prior: 50867404!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	! !

!methodRemoval: Portfolio #canRegister: stamp: 'ijgt 5/21/2021 16:05:32'!
canRegister: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:18:05' prior: 50867413!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount addRootPortfolios: rootPortfolios.
		].
	accounts add: anAccount! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:19:43'!
addRootPortfolios: aPortfolioCollection

	 aPortfolioCollection do:[:aPortfolio | rootPortfolios add: aPortfolio].

! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:24:32' prior: 50867445!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount addRootPortfolios: rootPortfolios ofParent: self.
		].
	accounts add: anAccount! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:34:19' prior: 50867455!
addRootPortfolios: aPortfolioCollection

	rootPortfolios ifEmpty: [rootPortfolios add: self] ifNotEmpty: [aPortfolioCollection do:[:aPortfolio | rootPortfolios add: aPortfolio] ].
	 

! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:50:03' prior: 50867462!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount addRootPortfolios: rootPortfolios ofParent: self.
		].
	accounts add: anAccount! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:50:56'!
addRootPortfolios: aPortfolioCollection ofParent: aParentPortfolio

	aPortfolioCollection ifEmpty: [rootPortfolios add: aParentPortfolio ] ifNotEmpty: [aPortfolioCollection do:[:aPortfolio | rootPortfolios add: aPortfolio] ].
	 

! !

!methodRemoval: Portfolio #addRootPortfolios: stamp: 'ijgt 5/21/2021 16:51:01'!
addRootPortfolios: aPortfolioCollection

	rootPortfolios ifEmpty: [rootPortfolios add: self] ifNotEmpty: [aPortfolioCollection do:[:aPortfolio | rootPortfolios add: aPortfolio] ].
	 

!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 16:53:31'!
assertCanAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:53:31' prior: 50867430!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio assertCanAddAccount: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:53:31' prior: 50867482!
addAccount: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount addRootPortfolios: rootPortfolios ofParent: self.
		].
	accounts add: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:53:31' prior: 50867511!
assertCanAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio assertCanAddAccount: anAccount]
	! !

!methodRemoval: Portfolio #canAddAccount: stamp: 'ijgt 5/21/2021 16:53:31'!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio assertCanAddAccount: anAccount]
	!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 17:25:59' prior: 50867541!
assertCanAddAccount: anAccount

	^ (rootPortfolios allSatisfy: [:ada | ada containsAccount: anAccount not]) "esto es suficiente si rootPortfolios es no vacio"
	and: [self containsAccount: anAccount not] "si rootPortfolios es vacio, necesito ver containsAccount de migo mismo"
	"La segunda parte del and: es redundante si rootPortfolios es no vacio. Por ahora lo dejamos asi por elegancia"
	! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 17:30:24'!
containsAccount: anAccount
	
	^ self == anAccount or: [accounts anySatisfy: [:account | account containsAccount: anAccount] ]! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:30:38'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:30:41'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:30:41'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'ijgt 5/21/2021 17:32:11'!
containsAccount: anAccount

	^ self == anAccount! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:32:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:32:36'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:32:36'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:32:57'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:32:57'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 17:33:19' prior: 50867557!
assertCanAddAccount: anAccount

	^ (rootPortfolios allSatisfy: [:ada | (ada containsAccount: anAccount) not]) "esto es suficiente si rootPortfolios es no vacio"
	and: [(self containsAccount: anAccount) not] "si rootPortfolios es vacio, necesito ver containsAccount de migo mismo"
	"La segunda parte del and: es redundante si rootPortfolios es no vacio. Por ahora lo dejamos asi por elegancia"
	! !

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:33:20'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:33:23'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:33:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:33:26'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:33:29'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:33:30'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:33:43'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:33:45'!
PASSED!

Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/21/2021 17:40:01'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/21/2021 17:41:00'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/21/2021 17:41:21'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Account methodsFor: 'no messages' stamp: 'ijgt 5/21/2021 17:43:04'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:44:05'!
hasRegistered

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:44:38'!
addAccount: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:44:55'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:45:16'!
hasRegistered: aTransaction

	self subclassResponsibility ! !

!methodRemoval: Account #hasRegistered stamp: 'ijgt 5/21/2021 17:45:19'!
hasRegistered

	self subclassResponsibility !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:45:59'!
containsAccount: anAccount

	self subclassResponsibility ! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 17:51:06' prior: 50867529 overrides: 50867684!
addAccount: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	anAccount addRootPortfolios: rootPortfolios ofParent: self.
	accounts add: anAccount! !
!ReceptiveAccount methodsFor: 'add' stamp: 'ijgt 5/21/2021 17:51:49'!
register: aTransaction

	transactions add: aTransaction 
! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49'!
register: anAccount

	self subclassResponsibility ! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 17:51:49' overrides: 50867721!
register: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	anAccount addRootPortfolios: rootPortfolios ofParent: self.
	accounts add: anAccount! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867375!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867313!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio register: account.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867332!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio register: account.
	self should: [aPortfolio register: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867323!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio register: account.
	self assert: (aPortfolio accounts includes: account) .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867346!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: aSecondPortfolio.
	self should: [aSecondPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867362!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: account.
	aPortfolio register: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !
!AccountTransaction class methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867386!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!methodRemoval: ReceptiveAccount #addAccount: stamp: 'ijgt 5/21/2021 17:51:49'!
addAccount: aTransaction

	transactions add: aTransaction 
!

!methodRemoval: Account #addAccount: stamp: 'ijgt 5/21/2021 17:51:49'!
addAccount: anAccount

	self subclassResponsibility !

!methodRemoval: Portfolio #addAccount: stamp: 'ijgt 5/21/2021 17:51:49'!
addAccount: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	anAccount addRootPortfolios: rootPortfolios ofParent: self.
	accounts add: anAccount!
!ReceptiveAccount methodsFor: 'add' stamp: 'ijgt 5/21/2021 17:52:30'!
addAccount: anAccount

	! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 17:53:36'!
addAccount: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	anAccount addRootPortfolios: rootPortfolios ofParent: self.
	accounts add: anAccount! !

!methodRemoval: Portfolio #register: stamp: 'ijgt 5/21/2021 17:53:36'!
register: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	anAccount addRootPortfolios: rootPortfolios ofParent: self.
	accounts add: anAccount!
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:53:55' prior: 50867721!
register: anTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:54:08'!
addAccount: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:54:13' prior: 50867856!
register: aTransaction

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:39'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:54:39'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:54:39'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:54:39'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:54:39'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:54:39'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:54:39'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:54:39'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:54:42'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:54:42'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:54:42'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:54:42'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:54:42'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:54:42'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:54:42'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:54:46'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:54:46'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:54:46'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:54:46'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:54:46'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:54:46'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:54:46'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:49'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:53'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:53'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:55:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:55:03'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:55:03'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:55:03'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:55:03'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:55:03'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:55:03'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:55:03'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:55:10'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:55:43'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:55:45'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:55:45'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:56:22' prior: 50867771!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:56:24'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:57:06'!
addRootPortfolios: anOrderedCollection ofParent: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:57:13' prior: 50867990!
addRootPortfolios: anOrderedCollection ofParent: aPortfolio 
	! !

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:57:32'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:57:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:57:32'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:57:32'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:57:32'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:57:32'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:57:32'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:57:32'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:57:32'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:57:36'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:57:47' prior: 50867747!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:57:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:58:10' prior: 50867757!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:58:14'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:58:28' prior: 50867796!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:58:30'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:58:30'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:58:47' prior: 50867736!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:58:49'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:58:54'!
ERROR!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:58:54'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:59:01'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:59:22' prior: 50867780!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:59:23'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:06:14' prior: 50868127!
test99

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:07:55' prior: 50868164!
test99

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts includes: account.
	self assert: aPortfolio accounts size equals: 1.! !

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 18:07:57'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:08:31'!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts includes: account.
	self assert: aPortfolio accounts size equals: 1.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:59:22' prior: 50868182!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 18:08:59'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:09:02'!
FAILURE!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:09:02'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:10:13' prior: 50868203!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: aPortfolio accounts includes: account! !

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:10:14'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:12:50' prior: 50868245!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio containsAccount: account)! !

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:08:31' prior: 50868260!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts includes: account.
	self assert: aPortfolio accounts size equals: 1.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:15:38' prior: 50868296!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 1.
	self assert: aSecondPortfolio accounts size equals: 1.! !

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:16:17'!
test08

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty! !

!methodRemoval: PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:16:17'!
test07

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:16:27'!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!methodRemoval: PortfolioTest #test99 stamp: 'ijgt 5/21/2021 18:16:27'!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:20:34' prior: 50868315!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 1.
	self assert: aSecondPortfolio accounts size equals: 1.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:21:02' prior: 50868427!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:21:56'!
test101

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:35:15' prior: 50868492!
test101

	|aPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftRootPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: aPortfolio accounts isEmpty.! !

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:37:33'!
test102

	|aPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftRootPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: aPortfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:40:17' prior: 50868569!
test102

	|aPortfolio aLeftParentPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aLeftParentPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftParentPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 1.
	self assert: aLeftParentPortfolio accounts size equals: 1.
	self assert: aPortfolio accounts isEmpty.! !

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:42:34'!
test103

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aSecondPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts size equals: 1.! !

!testRun: #PortfolioTest #test103 stamp: 'ijgt 5/21/2021 18:42:36'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 18:44:46' prior: 50867572 overrides: 50867702!
containsAccount: anAccount
	
	^ self == anAccount or: [accounts anySatisfy: [:account | (account containsAccount: anAccount) or: [anAccount containsAccount: account] ] ]! !

!testRun: #PortfolioTest #test103 stamp: 'ijgt 5/21/2021 18:44:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test103 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:45:20'!
test09

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty! !

!methodRemoval: PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:45:20'!
test08

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:45:29'!
test08

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aSecondPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts size equals: 1.! !

!methodRemoval: PortfolioTest #test103 stamp: 'ijgt 5/21/2021 18:45:35'!
test103

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aSecondPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts size equals: 1.!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:45:38'!
PASSED!

----QUIT----(22 May 2021 00:25:51) CuisUniversity-4532.image priorSource: 17121798!

----STARTUP---- (22 May 2021 16:10:50) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:12:55'!
test10

	|aPortfolio account |
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	self assert: (aPortfolio transactions) isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:15:50' prior: 50868774!
test10

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio transactions) size equals: 1.
	self assert: aPortfolio transactions includes: transaction.! !

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:15:51'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:21:36' prior: 50867268 overrides: 50867689!
transactions
	
	^ accounts isEmpty ifTrue: [OrderedCollection new] ifFalse: [accounts first transactions]! !

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:22:28'!
test11

	|aPortfolio account transaction1 transaction2|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account.
	transaction2 := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:23:32' prior: 50868837!
test11

	|aPortfolio account transaction1 transaction2|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account.
	transaction2 := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (transaction1 == transaction2).
	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:23:37' prior: 50868890!
test11

	|aPortfolio account transaction1 transaction2|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account.
	transaction2 := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self deny: (transaction1 == transaction2).
	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:25:21' prior: 50868908!
test11

	|aPortfolio account transaction1 transaction2|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account.
	transaction2 := Withdraw register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:25:49' prior: 50868682 overrides: 50867702!
containsAccount: anAccount
	
	^ self = anAccount or: [accounts anySatisfy: [:account | (account containsAccount: anAccount) or: [anAccount containsAccount: account] ] ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:26:03' prior: 50867586 overrides: 50867702!
containsAccount: anAccount

	^ self = anAccount! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:28:17' prior: 50868962!
test11

	|aPortfolio account1 account2 transaction1 transaction2|
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account1.
	transaction2 := Withdraw register: 100 on: account2.
	aPortfolio addAccount: account1.
	aPortfolio addAccount: account2.
	
	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:28:18'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:31:42' prior: 50869027!
test11

	|aPortfolio account1 account2 transaction1 transaction2|
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account1.
	transaction2 := Deposit register: 100 on: account2.
	aPortfolio addAccount: account1.
	aPortfolio addAccount: account2.

	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:31:43'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:36:54' prior: 50868798 overrides: 50867689!
transactions
	
	^ accounts inject: OrderedCollection new into: [:transactions :account | transactions addAll: account transactions].! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:36:58'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:37:28' prior: 50869049!
test11

	|aPortfolio account1 account2 transaction1 transaction2|
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account1.
	transaction2 := Withdraw register: 100 on: account2.
	aPortfolio addAccount: account1.
	aPortfolio addAccount: account2.

	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:37:32'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:38:23' prior: 50869071 overrides: 50867689!
transactions
	
	^ accounts inject: (OrderedCollection new) into: [:transactions :account | transactions addAll: account transactions].! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:39:43'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:44:36'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:44:40'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:44:44'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:44:44'!
FAILURE!

aPortfolio transactions!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:49:44' prior: 50869104 overrides: 50867689!
transactions
	
	|listOfTransactions|
	listOfTransactions := OrderedCollection new.
	^ accounts inject: listOfTransactions into: [:transactions :account | transactions addAll: account transactions].! !

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:49:54'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:49:55'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:49:57'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:49:57'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:51:46' prior: 50869152 overrides: 50867689!
transactions
	
	|listOfTransactions|
	listOfTransactions := OrderedCollection new.
	^ accounts inject: listOfTransactions into: [:transactions :account | transactions addAll: account transactions. transactions].! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:51:58'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:52:30' prior: 50869172 overrides: 50867689!
transactions
	
	^ accounts inject: OrderedCollection new into: [:transactions :account | transactions addAll: account transactions. transactions].! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:53:56'!
test12

	|aPortfolio account |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio hasRegistered: account)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:54:26' prior: 50869228!
test12

	|aPortfolio account |
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	self assert: (aPortfolio transactions hasRegistered: account)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:56:03' prior: 50869235!
test12

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio hasRegistered: Deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:56:24' prior: 50869243!
test12

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio hasRegistered: Deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:57:21' prior: 50869250!
test12

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio hasRegistered: (Deposit for: 100) )! !

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 16:57:24'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 16:57:34'!
ERROR!
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/22/2021 16:58:44' prior: 50867693!
hasRegistered: aTransaction

	^ false ! !

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 16:58:46'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:59:05' prior: 50869257!
test12

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self deny: (aPortfolio hasRegistered: (Deposit for: 100) )! !

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:02:36'!
test13

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := (Deposit for: 100 on: account).
	
	self assert: (aPortfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:03:30' prior: 50869320!
test13

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := (Deposit register: 100 on: account).
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test13 stamp: 'ijgt 5/22/2021 17:03:32'!
FAILURE!
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/22/2021 17:05:16' prior: 50869269!
hasRegistered: aTransaction

	^ self transactions includes: aTransaction ! !

!testRun: #PortfolioTest #test13 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:17:30' prior: 50867602!
assertCanAddAccount: anAccount

	^ (rootPortfolios allSatisfy: [:portfolio | (portfolio containsAccount: anAccount) not]) 
	and: [(self containsAccount: anAccount) not] "si rootPortfolios es vacio, necesito ver containsAccount de migo mismo"
	"La segunda parte del and: es redundante si rootPortfolios es no vacio. Por ahora lo dejamos asi por elegancia"
	! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:17:38' prior: 50869390!
assertCanAddAccount: anAccount

	^ (rootPortfolios allSatisfy: [:portfolio | (portfolio containsAccount: anAccount) not]) 
	and: [(self containsAccount: anAccount) not]
	! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:17:43' prior: 50869404!
assertCanAddAccount: anAccount

	^ (rootPortfolios allSatisfy: [:portfolio | (portfolio containsAccount: anAccount) not]) and: [(self containsAccount: anAccount) not]
	! !
!Account methodsFor: 'add' stamp: 'ijgt 5/22/2021 17:33:23'!
addRoot! !
!Account methodsFor: 'add' stamp: 'ijgt 5/22/2021 17:33:46'!
addRootPortfolios: anOrderedCollection ofParent: aPortfolio 
	
	self subclassResponsibility! !

!methodRemoval: Account #addRoot stamp: 'ijgt 5/22/2021 17:33:55'!
addRoot!
!Account methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:35:28' prior: 50869344!
hasRegistered: aTransaction

	^ self transactions includes: aTransaction! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:36:08' overrides: 50869432!
hasRegistered: aTransaction

	^ self transactions includes: aTransaction! !
!Account methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:36:20' prior: 50869432!
hasRegistered: aTransaction

	self subclassResponsibility! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:39:49'!
test01newPortfolioShouldBeEmpty

	|aPortfolio|
	aPortfolio := Portfolio new.
	self assert: (aPortfolio accounts isEmpty)! !

!methodRemoval: PortfolioTest #test01 stamp: 'ijgt 5/22/2021 17:39:49'!
test01

	|aPortfolio|
	aPortfolio := Portfolio new.
	self assert: (aPortfolio accounts isEmpty)!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:40:50'!
test02newPortfolioCanAddAccount

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !

!methodRemoval: PortfolioTest #test02 stamp: 'ijgt 5/22/2021 17:40:50'!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:41:28'!
test03portfolioCanCalculateBalanceWithOneAccount

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!methodRemoval: PortfolioTest #test03 stamp: 'ijgt 5/22/2021 17:41:28'!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:42:26'!
test04portfolioCanNotAddSameAccountTwice

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !

!methodRemoval: PortfolioTest #test04 stamp: 'ijgt 5/22/2021 17:42:26'!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:44:07'!
test05portfolioCanCalculateBalanceRecursively

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!methodRemoval: PortfolioTest #test05 stamp: 'ijgt 5/22/2021 17:44:07'!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:45:20'!
test06portfolioCanNotAddHimself

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !

!methodRemoval: PortfolioTest #test06 stamp: 'ijgt 5/22/2021 17:45:20'!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:48:23'!
test07portfolioCanNotContainItselfRecursively

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!methodRemoval: PortfolioTest #test07 stamp: 'ijgt 5/22/2021 17:48:23'!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:48:33'!
test06portfolioCanNotAddItself

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !

!methodRemoval: PortfolioTest #test06portfolioCanNotAddHimself stamp: 'ijgt 5/22/2021 17:48:33'!
test06portfolioCanNotAddHimself

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:50:18'!
test08portfolioCanNotAddPortfolioWithRepeatedAccount

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aSecondPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts size equals: 1.! !

!methodRemoval: PortfolioTest #test08 stamp: 'ijgt 5/22/2021 17:50:18'!
test08

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aSecondPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts size equals: 1.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:51:00'!
test09newPortfolioHasNoTransactions

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty! !

!methodRemoval: PortfolioTest #test09 stamp: 'ijgt 5/22/2021 17:51:00'!
test09

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:52:18'!
test10portfolioCanReturnTransactionsWithOneAccount

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio transactions) size equals: 1.
	self assert: aPortfolio transactions includes: transaction.! !

!methodRemoval: PortfolioTest #test10 stamp: 'ijgt 5/22/2021 17:52:18'!
test10

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio transactions) size equals: 1.
	self assert: aPortfolio transactions includes: transaction.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:52:57'!
test11portfolioCanReturnTransactionsWithTwoAccounts

	|aPortfolio account1 account2 transaction1 transaction2|
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account1.
	transaction2 := Withdraw register: 100 on: account2.
	aPortfolio addAccount: account1.
	aPortfolio addAccount: account2.

	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!methodRemoval: PortfolioTest #test11 stamp: 'ijgt 5/22/2021 17:52:57'!
test11

	|aPortfolio account1 account2 transaction1 transaction2|
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account1.
	transaction2 := Withdraw register: 100 on: account2.
	aPortfolio addAccount: account1.
	aPortfolio addAccount: account2.

	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:54:13'!
test12newPortfolioHasNotRegisteredDeposit

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self deny: (aPortfolio hasRegistered: (Deposit for: 100) )! !

!methodRemoval: PortfolioTest #test12 stamp: 'ijgt 5/22/2021 17:54:13'!
test12

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self deny: (aPortfolio hasRegistered: (Deposit for: 100) )!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:54:48'!
test13portfolioHasRegisteredTransaction

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := (Deposit register: 100 on: account).
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test13 stamp: 'ijgt 5/22/2021 17:54:48'!
test13

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := (Deposit register: 100 on: account).
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio hasRegistered: transaction)!

!testRun: #PortfolioTest #test01newPortfolioShouldBeEmpty stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test02newPortfolioCanAddAccount stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test03portfolioCanCalculateBalanceWithOneAccount stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test04portfolioCanNotAddSameAccountTwice stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test05portfolioCanCalculateBalanceRecursively stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test06portfolioCanNotAddItself stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test07portfolioCanNotContainItselfRecursively stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test08portfolioCanNotAddPortfolioWithRepeatedAccount stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test09newPortfolioHasNoTransactions stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test10portfolioCanReturnTransactionsWithOneAccount stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test11portfolioCanReturnTransactionsWithTwoAccounts stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test12newPortfolioHasNotRegisteredDeposit stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test13portfolioHasRegisteredTransaction stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!methodRemoval: PortfolioTest #test102 stamp: 'ijgt 5/22/2021 17:58:10'!
test102

	|aPortfolio aLeftParentPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aLeftParentPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftParentPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 1.
	self assert: aLeftParentPortfolio accounts size equals: 1.
	self assert: aPortfolio accounts isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:59:37' prior: 50868513!
test101

	"Test escrito despu�s de TDD."

	|aPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftRootPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: aPortfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:59:56' prior: 50868448!
test100

	"Test escrito despu�s de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:02:01'!
test100portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito despu�s de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !

!methodRemoval: PortfolioTest #test100 stamp: 'ijgt 5/22/2021 18:02:01'!
test100

	"Test escrito despu�s de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:02:14'!
test15portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito despu�s de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !

!methodRemoval: PortfolioTest #test100portfolioCanNotAddAccountAlreadyInParentPortfolio stamp: 'ijgt 5/22/2021 18:02:14'!
test100portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito despu�s de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:02:24'!
test14portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito despu�s de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !

!methodRemoval: PortfolioTest #test15portfolioCanNotAddAccountAlreadyInParentPortfolio stamp: 'ijgt 5/22/2021 18:02:24'!
test15portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito despu�s de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:03:38'!
test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios

	"Test escrito despu�s de TDD."

	|aPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftRootPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: aPortfolio accounts isEmpty.! !

!methodRemoval: PortfolioTest #test101 stamp: 'ijgt 5/22/2021 18:03:38'!
test101

	"Test escrito despu�s de TDD."

	|aPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftRootPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: aPortfolio accounts isEmpty.!

!testRun: #PortfolioTest #test01newPortfolioShouldBeEmpty stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test02newPortfolioCanAddAccount stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test03portfolioCanCalculateBalanceWithOneAccount stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test04portfolioCanNotAddSameAccountTwice stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test05portfolioCanCalculateBalanceRecursively stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test06portfolioCanNotAddItself stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test07portfolioCanNotContainItselfRecursively stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test08portfolioCanNotAddPortfolioWithRepeatedAccount stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test09newPortfolioHasNoTransactions stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test10portfolioCanReturnTransactionsWithOneAccount stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test11portfolioCanReturnTransactionsWithTwoAccounts stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test12newPortfolioHasNotRegisteredDeposit stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test13portfolioHasRegisteredTransaction stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test14portfolioCanNotAddAccountAlreadyInParentPortfolio stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!
!PortfolioTest methodsFor: 'setUp' stamp: 'ijgt 5/22/2021 18:08:09' overrides: 16927572!
setUp

	! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'aPortfolio account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/22/2021 18:09:22'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setUp' stamp: 'ijgt 5/22/2021 18:09:59' prior: 50870228 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio anAccount withdrawal deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/22/2021 18:10:40'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio anAccount withdrawal deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setUp' stamp: 'ijgt 5/22/2021 18:11:37' prior: 50870255 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdrawal := Withdraw for: 100.! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio secondPortfolio anAccount withdrawal deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/22/2021 18:11:57'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio secondPortfolio anAccount withdrawal deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setUp' stamp: 'ijgt 5/22/2021 18:12:10' prior: 50870275 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdrawal := Withdraw for: 100.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:12:23' prior: 50869486!
test01newPortfolioShouldBeEmpty

	self assert: (portfolio accounts isEmpty)! !

!testRun: #PortfolioTest #test01newPortfolioShouldBeEmpty stamp: 'ijgt 5/22/2021 18:12:25'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:12:45' prior: 50869498!
test02newPortfolioCanAddAccount
	
	portfolio addAccount: anAccount.
	self assert: (portfolio accounts includes: anAccount) .! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:13:09' prior: 50869515!
test03portfolioCanCalculateBalanceWithOneAccount

	Deposit register: 100 on: anAccount.
	
	portfolio addAccount: anAccount.
	self assert: (portfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:13:31' prior: 50869535!
test04portfolioCanNotAddSameAccountTwice

	Deposit register: 100 on: anAccount.
	
	portfolio addAccount: anAccount.
	self should: [portfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:14:06' prior: 50869563!
test05portfolioCanCalculateBalanceRecursively

	Deposit register: 100 on: anAccount.
	
	portfolio addAccount: anAccount.
	portfolio addAccount: secondPortfolio.
	self assert: (portfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:14:22' prior: 50869641!
test06portfolioCanNotAddItself

	self should: [portfolio addAccount: portfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].! !

!testRun: #PortfolioTest #test01newPortfolioShouldBeEmpty stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test02newPortfolioCanAddAccount stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test03portfolioCanCalculateBalanceWithOneAccount stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test04portfolioCanNotAddSameAccountTwice stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test05portfolioCanCalculateBalanceRecursively stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test06portfolioCanNotAddItself stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test07portfolioCanNotContainItselfRecursively stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test08portfolioCanNotAddPortfolioWithRepeatedAccount stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test09newPortfolioHasNoTransactions stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test10portfolioCanReturnTransactionsWithOneAccount stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test11portfolioCanReturnTransactionsWithTwoAccounts stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test12newPortfolioHasNotRegisteredDeposit stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test13portfolioHasRegisteredTransaction stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test14portfolioCanNotAddAccountAlreadyInParentPortfolio stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:14:53' prior: 50869610!
test07portfolioCanNotContainItselfRecursively
	
	portfolio addAccount: secondPortfolio.
	self should: [secondPortfolio addAccount: portfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: secondPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:16:10' prior: 50869663!
test08portfolioCanNotAddPortfolioWithRepeatedAccount
	
	portfolio addAccount: anAccount.
	secondPortfolio addAccount: anAccount.
	self should: [portfolio addAccount: secondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: portfolio accounts size equals: 1.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:16:26' prior: 50869698!
test09newPortfolioHasNoTransactions

	self assert: (portfolio transactions) isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:17:10' prior: 50869710!
test10portfolioCanReturnTransactionsWithOneAccount

	|transaction|
	transaction := Deposit register: 100 on: anAccount.
	portfolio addAccount: anAccount.
	
	self assert: (portfolio transactions) size equals: 1.
	self assert: portfolio transactions includes: transaction.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:17:55' prior: 50869736!
test11portfolioCanReturnTransactionsWithTwoAccounts

	| account2 transaction1 transaction2|
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: anAccount.
	transaction2 := Withdraw register: 100 on: account2.
	portfolio addAccount: anAccount.
	portfolio addAccount: account2.

	self assert: (portfolio transactions) size equals: 2.
	self assert: portfolio transactions includes: transaction1.
	self assert: portfolio transactions includes: transaction2.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:18:27' prior: 50869775!
test12newPortfolioHasNotRegisteredDeposit

	self deny: (portfolio hasRegistered: (Deposit for: 100) )! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:18:53' prior: 50869788!
test13portfolioHasRegisteredTransaction

	| transaction|
	transaction := (Deposit register: 100 on: anAccount).
	portfolio addAccount: anAccount.
	
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:19:36' prior: 50870038!
test14portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito despu�s de TDD."

	portfolio addAccount: anAccount.
	portfolio addAccount: secondPortfolio.
	self should: [secondPortfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: (portfolio containsAccount: anAccount).
	self assert: portfolio accounts size equals: 2.
	self assert: secondPortfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:21:09' prior: 50870085!
test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios

	"Test escrito despu�s de TDD."

	|aLeftRootPortfolio aRightRootPortfolio |
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	
	aLeftRootPortfolio addAccount: anAccount.
	aRightRootPortfolio addAccount: anAccount.
	aLeftRootPortfolio addAccount: portfolio .
	aRightRootPortfolio addAccount: portfolio .
	
	self should: [portfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: anAccount).
	self assert: (aLeftRootPortfolio containsAccount: anAccount).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: portfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:23:33' prior: 50870517!
test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios

	"Test escrito despu�s de TDD."

	|aLeftRootPortfolio aRightRootPortfolio |
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	
	aLeftRootPortfolio addAccount: anAccount.
	aRightRootPortfolio addAccount: anAccount.
	aLeftRootPortfolio addAccount: portfolio .
	aRightRootPortfolio addAccount: portfolio .
	
	self should: [portfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: anAccount).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: (aLeftRootPortfolio containsAccount: anAccount).
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: portfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:24:12'!
m1: aRightRootPortfolio

	self assert: (aRightRootPortfolio containsAccount: anAccount).
	self assert: aRightRootPortfolio accounts size equals: 2! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:24:12' prior: 50870547!
test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios

	"Test escrito despu�s de TDD."

	|aLeftRootPortfolio aRightRootPortfolio |
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	
	aLeftRootPortfolio addAccount: anAccount.
	aRightRootPortfolio addAccount: anAccount.
	aLeftRootPortfolio addAccount: portfolio .
	aRightRootPortfolio addAccount: portfolio .
	
	self should: [portfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self m1: aRightRootPortfolio.
	self assert: (aLeftRootPortfolio containsAccount: anAccount).
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: portfolio accounts isEmpty.! !

!methodRemoval: PortfolioTest #m1: stamp: 'ijgt 5/22/2021 18:27:44'!
m1: aRightRootPortfolio

	self assert: (aRightRootPortfolio containsAccount: anAccount).
	self assert: aRightRootPortfolio accounts size equals: 2!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:23:33' prior: 50870585!
test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios

	"Test escrito despu�s de TDD."

	|aLeftRootPortfolio aRightRootPortfolio |
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	
	aLeftRootPortfolio addAccount: anAccount.
	aRightRootPortfolio addAccount: anAccount.
	aLeftRootPortfolio addAccount: portfolio .
	aRightRootPortfolio addAccount: portfolio .
	
	self should: [portfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: anAccount).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: (aLeftRootPortfolio containsAccount: anAccount).
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: portfolio accounts isEmpty.! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio secondPortfolio anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/22/2021 18:32:29'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio secondPortfolio anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setUp' stamp: 'ijgt 5/22/2021 18:32:36' prior: 50870298 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.! !

!testRun: #PortfolioTest #test01newPortfolioShouldBeEmpty stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test02newPortfolioCanAddAccount stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test03portfolioCanCalculateBalanceWithOneAccount stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test04portfolioCanNotAddSameAccountTwice stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test05portfolioCanCalculateBalanceRecursively stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test06portfolioCanNotAddItself stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test07portfolioCanNotContainItselfRecursively stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test08portfolioCanNotAddPortfolioWithRepeatedAccount stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test09newPortfolioHasNoTransactions stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test10portfolioCanReturnTransactionsWithOneAccount stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test11portfolioCanReturnTransactionsWithTwoAccounts stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test12newPortfolioHasNotRegisteredDeposit stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test13portfolioHasRegisteredTransaction stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test14portfolioCanNotAddAccountAlreadyInParentPortfolio stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

----QUIT----(22 May 2021 18:35:46) CuisUniversity-4532.image priorSource: 17187766!