

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (3 May 2021 16:33:26) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


----End fileIn of \Users\castr\Desktop\windows64\Stack-Solution-3 - beginsWith ya testeado.st----!

----End fileIn of \Users\castr\Desktop\windows64\CodigoRepetido-SolucionConSetup.st----!

----End fileIn of \Users\castr\Desktop\windows64\Numero-Solution-3.6.st----!

----End fileIn of \Users\castr\Desktop\windows64\ISW1-2021-1C-1erParcial-11Parcial.st----!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:12:06'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:12:07'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:12:07'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:12:07'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:22:25' prior: 50861503!
totalSpeedImpact

	| total |

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	total := (weapons select:[:weapon| weapon weight > (10 * kilogram )]) sum .
	^ total.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:22:33'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:22:33'!
ERROR!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:23:20' prior: 50861766!
totalSpeedImpact

	

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	^(weapons select:[:weapon| weapon weight > (10 * kilogram )]) sum ifEmpty:[0].
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:23:29'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:23:29'!
ERROR!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:25:50' prior: 50861840!
totalSpeedImpact

	

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].


	^(weapons select:[:weapon| weapon weight > (10 * kilogram )]) sum ifEmpty:[0 * kilometer / hour].
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:25:54'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:25:54'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:25:54'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:25:54'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:25:55'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:25:57'!
ERROR!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:29:29' prior: 50861914!
totalSpeedImpact

	

	| weightGreaterThanTen |
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	

	weightGreaterThanTen := (weapons select:[:weapon| weapon weight > (10 * kilogram )]).
	
	weightGreaterThanTen isEmpty ifTrue:[^0 * kilometer / hour].
	
	^weightGreaterThanTen sum
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:29:40'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:29:40'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:29:40'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:29:40'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:29:40'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:29:44'!
ERROR!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:30:55' prior: 50861992!
totalSpeedImpact

	

	| weightGreaterThanTen |
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	

	weightGreaterThanTen := (weapons select:[:weapon| weapon weight > (10 * kilogram )]).
	
	weightGreaterThanTen isEmpty ifTrue:[^0 * kilometer / hour].
	
	^weightGreaterThanTen inject: 0 into: [:weapon :total| total + weapon].
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:31:00'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:31:00'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:31:00'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:31:00'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:31:00'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:31:03'!
ERROR!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:31:41' prior: 50862074!
totalSpeedImpact

	

	| weightGreaterThanTen |
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	

	weightGreaterThanTen := (weapons select:[:weapon| weapon weight > (10 * kilogram )]).
	
	weightGreaterThanTen isEmpty ifTrue:[^0 * kilometer / hour].
	
	^weightGreaterThanTen inject: (0* kilometer / hour) into: [:weapon :total| total + weapon speedImpact ].
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:31:51'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:31:51'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:31:51'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:31:51'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:31:51'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:31:51'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:31:51'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:31:51'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:31:51'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:31:51'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:31:51'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:31:51'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:31:52'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:31:52'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:31:52'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:31:52'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:31:52'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:31:52'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:31:53'!
ERROR!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:32:13' prior: 50862157!
totalSpeedImpact

	

	| weightGreaterThanTen |
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	

	weightGreaterThanTen := (weapons select:[:weapon| weapon weight > (10 * kilogram )]).
	
	weightGreaterThanTen isEmpty ifTrue:[^0 * kilometer / hour].
	
	^weightGreaterThanTen inject: (0* kilometer / hour) into: [:weapon :total| total + (weapon speedImpact) ].
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:32:17'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:32:17'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:32:17'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:32:17'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:32:17'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:32:19'!
ERROR!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:32:41' prior: 50862241!
totalSpeedImpact

	

	| weightGreaterThanTen |
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	

	weightGreaterThanTen := (weapons select:[:weapon| weapon weight > (10 * kilogram )]).
	
	weightGreaterThanTen isEmpty ifTrue:[^0 * kilometer / hour].
	
	^weightGreaterThanTen inject: (0* kilometer / hour) into: [:total :weapon| total + (weapon speedImpact) ].
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:32:44'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:32:44'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:32:44'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:32:44'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:32:44'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:32:44'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:32:44'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:32:44'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:32:44'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:32:45'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:32:45'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:32:45'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:32:45'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:32:45'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:32:45'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:32:45'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:32:45'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:32:45'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:33:43'!
sumSpeedImpactWeapons: weightGreaterThanTen

	^ weightGreaterThanTen inject: (0* kilometer / hour) into: [:total :weapon| total + (weapon speedImpact) ]! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:33:43' prior: 50862325!
totalSpeedImpact

	

	| weightGreaterThanTen |
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	

	weightGreaterThanTen := (weapons select:[:weapon| weapon weight > (10 * kilogram )]).
	
	weightGreaterThanTen isEmpty ifTrue:[^0 * kilometer / hour].
	
	^self sumSpeedImpactWeapons: weightGreaterThanTen.
	! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:33:59' prior: 50862413!
totalSpeedImpact

	

	| weightGreaterThanTen |
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	weightGreaterThanTen := (weapons select:[:weapon| weapon weight > (10 * kilogram )]).
		
	^self sumSpeedImpactWeapons: weightGreaterThanTen.
	! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:34:03' prior: 50862426!
totalSpeedImpact

	| weightGreaterThanTen |
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	weightGreaterThanTen := (weapons select:[:weapon| weapon weight > (10 * kilogram )]).
		
	^self sumSpeedImpactWeapons: weightGreaterThanTen.
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:34:06'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:34:06'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:34:06'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:34:06'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:34:06'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:34:06'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:34:06'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:34:06'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:34:06'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:34:07'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:34:07'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:34:07'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:34:07'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:34:07'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:34:07'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:34:07'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:34:07'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:34:07'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:35:26' prior: 50861516!
totalWeaponWeight

	| total index |

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^ self sumWeightWeapons: weapons.! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:36:16'!
sumWeightWeapons: collectionOfWeapons

! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:36:43' prior: 50862526!
sumWeightWeapons: collectionOfWeapons

	^collectionOfWeapons  inject: (0) into: [:total :weapon| total + (weapon speedImpact) ]! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:37:17' prior: 50862530!
sumWeightWeapons: collectionOfWeapons

	^collectionOfWeapons  inject: (0 * kilogram ) into: [:total :weapon| total + weapon weight  ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:37:33'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:37:33'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:37:33'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:37:33'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:37:33'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:37:33'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:37:34'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:37:48' prior: 50862514!
totalWeaponWeight

	

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	^ self sumWeightWeapons: weapons.! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:37:56' prior: 50862610!
totalWeaponWeight

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	^ self sumWeightWeapons: weapons.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:38:02'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:38:02'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:38:02'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:38:02'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:38:03'!
PASSED!

----SNAPSHOT----(3 May 2021 17:38:10) CuisUniversity-4532.image priorSource: 16885703!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:40:32' prior: 50862437!
totalSpeedImpact

	| weaponsWithWeightGreaterThanTen |
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	weaponsWithWeightGreaterThanTen := (weapons select:[:weapon| weapon weight > (10 * kilogram )]).
		
	^self sumSpeedImpactWeapons: weaponsWithWeightGreaterThanTen.
	! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:41:06' prior: 50862405!
sumSpeedImpactWeapons: collectionOfWeapons

	^ collectionOfWeapons inject: (0* kilometer / hour) into: [:total :weapon| total + (weapon speedImpact) ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:41:09'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:41:09'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:41:10'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:41:12'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:41:13'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:41:14'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:41:15'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:41:15'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:41:15'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:41:15'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:41:15'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:41:15'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:41:15'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:41:17'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:41:18'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:41:20'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:41:20'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:20'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:41:20'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:20'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:41:20'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:41:20'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:41:20'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:41:21'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:41:24'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:41:29'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:41:29'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:29'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:41:30'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:42:20'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:42:20'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:42:20'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:42:20'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:42:20'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:42:20'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:42:20'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:42:20'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:42:21'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:42:21'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:42:21'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:42:21'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:42:21'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:42:21'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:42:21'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:42:21'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:42:21'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:42:21'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:42:26'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:43:05'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:43:11'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:43:36'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:43:36'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:43:37'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:43:39'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:43:39'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:43:39'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:43:40'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:43:47'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:44:22'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:44:22'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:44:22'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:44:22'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:44:22'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:44:22'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:44:22'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:44:22'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:44:22'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:44:23'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:44:23'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:44:23'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:44:23'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:44:23'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:44:23'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:44:23'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:44:23'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:44:23'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:45:26'!
assertWeaponsSpeedAndWeight: aWeapon

	(self totalWeaponWeight + aWeapon weight) > maxWeaponWeight ifTrue: [ self signalMaxWeaponWeightExceeded ].
	
	(self totalSpeedImpact + aWeapon speedImpact) > speed ifTrue: [ self signalSpeedBelowZero ]! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 17:45:27' prior: 50861472!
addWeapon: aWeapon

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].
	
	self assertWeaponsSpeedAndWeight: aWeapon.
	
	weapons add: aWeapon.
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:46:38'!
PASSED!

Weapon subclass: #Claw
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'LEC 5/3/2021 17:47:46'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'LEC 5/3/2021 17:48:16'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #TurboLaserCanon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLaserCanon category: 'ISW1-2021-1C-1erParcial' stamp: 'LEC 5/3/2021 17:48:25'!
Weapon subclass: #TurboLaserCanon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Claw methodsFor: 'no messages' stamp: 'LEC 5/3/2021 17:50:57' overrides: 50861627!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
	].! !
!HSBlaster methodsFor: 'no messages' stamp: 'LEC 5/3/2021 17:51:35' overrides: 50861627!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].! !
!TurboLaserCanon methodsFor: 'no messages' stamp: 'LEC 5/3/2021 17:52:11' overrides: 50861627!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].! !
!Weapon methodsFor: 'attacking' stamp: 'LEC 5/3/2021 17:52:28' prior: 50861627!
attack: aVictim by: anAttacker 	

	self subclassResponsibility ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:52:34'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:52:34'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:52:34'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:52:34'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:52:34'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:52:34'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:52:34'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:52:36'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 17:53:05'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 17:53:05'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:53:05'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 17:53:05'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 17:53:05'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 17:53:05'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 17:53:05'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 17:53:09'!
ERROR!
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 17:55:29' prior: 50861678!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].
	(self allSubclasses) detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType] ifAbsent:[self error: 'Invalid Weapon Type'].
	! !
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 17:57:31' prior: 50864028!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].
	(self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType]) ifAbsent:[self error: 'Invalid Weapon Type'].
	
	! !
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 17:59:30' prior: 50864049!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].
	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType] ifNone:[self error: 'Invalid Weapon Type'].
	
	! !
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:00:10' prior: 50864070!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].
	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType] 
		ifNone:[self error: 'Invalid Weapon Type'].
		
	
	! !
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:01:29' prior: 50864091!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [  ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].
	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType]
		ifFound:[] 
		ifNone:[self error: 'Invalid Weapon Type'].
		
	
	! !
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:03:03' prior: 50864112!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].
	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType]
		ifFound:[aWeaponType new initialize] 
		ifNone:[self error: 'Invalid Weapon Type'].
		
	
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:03:49' overrides: 16896425!
initialize

	 weight := 10 * kilogram.
	 speedImpact := 5 * kilometer / hour! !
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:04:06' prior: 50864154 overrides: 16896425!
initialize

	 weight := 10 * kilogram.
	 speedImpact := 5 * kilometer / hour! !
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:04:45' prior: 50864160 overrides: 16896425!
initialize

	weight := 10 * kilogram.
	speedImpact := 5 * kilometer / hour.
	usedTimes := 0.! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:05:23' overrides: 16896425!
initialize

	weight := 10 * kilogram.
	speedImpact := 5 * kilometer / hour.
	usedTimes := 0.! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:05:52' prior: 50864173 overrides: 16896425!
initialize

	weight := 20 * kilogram.
	speedImpact := 10 * kilometer / hour.
	usedTimes := 0.! !
!TurboLaserCanon methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:05:59' overrides: 16896425!
initialize

	weight := 20 * kilogram.
	speedImpact := 10 * kilometer / hour.
	usedTimes := 0.! !
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:06:20' prior: 50864131!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].
	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType]
		ifFound:[^aWeaponType new initialize] 
		ifNone:[self error: 'Invalid Weapon Type'].
		
	
	! !
!TurboLaserCanon methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:06:31' prior: 50864187 overrides: 16896425!
initialize

	weight := 40 * kilogram.
	speedImpact := 15 * kilometer / hour.
	usedTimes := 0.! !
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:07:02' prior: 50864193!
ofType: aWeaponType

	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType]
		ifFound:[^aWeaponType new initialize] 
		ifNone:[self error: 'Invalid Weapon Type'].
		
	
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:08:00'!
canHandler: aWeaponType

	^self className = aWeaponType ! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:08:11'!
canHandler: aWeaponType

	^self className = aWeaponType ! !
!TurboLaserCanon methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:08:18'!
canHandler: aWeaponType

	^self className = aWeaponType ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:08:23'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:08:23'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:08:23'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:08:23'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:08:23'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:08:23'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:08:23'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:08:23'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:08:23'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:08:23'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:08:24'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:08:24'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:08:24'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:08:24'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:08:24'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:08:24'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:08:24'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:08:24'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:08:26'!
ERROR!

!methodRemoval: Claw #canHandler: stamp: 'LEC 5/3/2021 18:08:46'!
canHandler: aWeaponType

	^self className = aWeaponType !
!Claw class methodsFor: 'no messages' stamp: 'LEC 5/3/2021 18:08:50'!
canHandler: aWeaponType

	^self className = aWeaponType ! !

!methodRemoval: HSBlaster #canHandler: stamp: 'LEC 5/3/2021 18:08:59'!
canHandler: aWeaponType

	^self className = aWeaponType !
!HSBlaster class methodsFor: 'no messages' stamp: 'LEC 5/3/2021 18:09:02'!
canHandler: aWeaponType

	^self className = aWeaponType ! !

!methodRemoval: TurboLaserCanon #canHandler: stamp: 'LEC 5/3/2021 18:09:10'!
canHandler: aWeaponType

	^self className = aWeaponType !
!TurboLaserCanon class methodsFor: 'no messages' stamp: 'LEC 5/3/2021 18:09:14'!
canHandler: aWeaponType

	^self className = aWeaponType ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:09:18'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:09:18'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:09:18'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:09:20'!
ERROR!
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:10:30' prior: 50864166 overrides: 16896425!
initialize

	type := #Claw.
	weight := 10 * kilogram.
	speedImpact := 5 * kilometer / hour.
	usedTimes := 0.! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:10:41' prior: 50864180 overrides: 16896425!
initialize

	type := #HSBlaster.
	weight := 20 * kilogram.
	speedImpact := 10 * kilometer / hour.
	usedTimes := 0.! !
!TurboLaserCanon methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:10:53' prior: 50864216 overrides: 16896425!
initialize

	type := #TurboLaserCanon.
	weight := 40 * kilogram.
	speedImpact := 15 * kilometer / hour.
	usedTimes := 0.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:10:56'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:10:56'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:10:56'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:10:56'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:10:56'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:10:56'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:10:56'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:10:56'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:10:56'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:10:56'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:10:56'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:10:57'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:10:57'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:10:57'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:10:57'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:10:57'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:10:57'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:10:57'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:10:58'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:11:47'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:12:01'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:12:01'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:12:01'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:12:02'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:12:02'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:12:02'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:12:02'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:12:02'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:12:07'!
ERROR!

addedWeapon!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:14:39'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:14:39'!
ERROR!
!Claw class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:16:01' prior: 50864319!
canHandler: aWeaponType

	^self = aWeaponType ! !
!HSBlaster class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:16:08' prior: 50864328!
canHandler: aWeaponType

	^self = aWeaponType ! !
!TurboLaserCanon class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:16:17' prior: 50864337!
canHandler: aWeaponType

	^self = aWeaponType ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:16:20'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:16:20'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:16:20'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:16:20'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:16:20'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:16:20'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:16:20'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:16:20'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:16:20'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:16:21'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:16:21'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:16:21'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:16:21'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:16:21'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:16:21'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:16:21'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:16:21'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:16:21'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:16:23'!
ERROR!
!HSBlaster class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:17:41' prior: 50864590!
canHandler: aWeaponType

	^self = aWeaponType 
	! !
!Claw class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:17:52' prior: 50864585!
canHandler: aWeaponType

	^self ~= aWeaponType ! !
!HSBlaster class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:17:58' prior: 50864670!
canHandler: aWeaponType

	^self ~= aWeaponType 
	! !
!TurboLaserCanon class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:18:04' prior: 50864595!
canHandler: aWeaponType

	^self ~= aWeaponType ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:18:08'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:18:08'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:18:08'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:18:09'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:18:09'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:18:10'!
ERROR!
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:21:33' prior: 50864222!
ofType: aWeaponType

	| subclass |
	subclass:= self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType].
	subclass 
		ifNil:[self error: 'Invalid Weapon Type'].
	^subclass new initialize 
		
	
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:21:41'!
FAILURE!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:21:41'!
FAILURE!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:21:41'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:21:41'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:21:41'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:21:41'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:21:41'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:21:41'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:21:41'!
FAILURE!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:21:41'!
FAILURE!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:21:41'!
FAILURE!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:21:41'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:21:41'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:21:41'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:21:41'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:21:41'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:21:41'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:21:41'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:21:43'!
ERROR!
!HSBlaster class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:24:21' prior: 50864680!
canHandler: aWeaponType

	^self = aWeaponType 
	! !
!TurboLaserCanon class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:24:27' prior: 50864685!
canHandler: aWeaponType

	^self = aWeaponType ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:24:36'!
FAILURE!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:24:36'!
FAILURE!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:24:36'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:24:36'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:24:36'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:24:36'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:24:36'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:24:36'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:24:36'!
FAILURE!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:24:37'!
FAILURE!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:24:37'!
FAILURE!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:24:37'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:24:37'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:24:37'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:24:37'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:24:37'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:24:37'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:24:37'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:24:39'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:25:45'!
FAILURE!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:25:45'!
FAILURE!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:25:45'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:25:45'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:25:45'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:25:45'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:25:45'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:25:45'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:25:45'!
FAILURE!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:25:45'!
FAILURE!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:25:45'!
FAILURE!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:25:45'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:25:45'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:25:45'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:25:45'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:25:45'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:25:45'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:25:45'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:25:47'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:28:55'!
FAILURE!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:28:55'!
FAILURE!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:28:55'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:28:55'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:28:55'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:28:55'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:28:55'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:28:55'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:28:55'!
FAILURE!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:28:55'!
FAILURE!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:28:55'!
FAILURE!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:28:55'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:28:55'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:28:55'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:28:55'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:28:55'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:28:55'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:28:55'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:28:57'!
ERROR!
!Weapon class methodsFor: 'instance creation' stamp: 'HAW 5/2/2021 15:44:12' prior: 50864759!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:30:14'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:30:14'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:30:14'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:30:14'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:30:14'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:30:14'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:30:14'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:30:14'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:30:14'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:30:14'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:30:14'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:30:14'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:30:14'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:30:15'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:30:15'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:30:15'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:30:15'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:30:15'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:30:16'!
ERROR!
!Weapon methodsFor: 'attacking' stamp: 'HAW 5/2/2021 15:46:43' prior: 50863884!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].

	type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:30:40'!
PASSED!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 18:32:03' prior: 50861118!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot addedWeapon |
	
	robot := self createAluminum3000.
	addedWeapon := self createTurboLaserCannon.
	robot addWeapon: addedWeapon.
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: addedWeapon)

	
	

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:32:08'!
PASSED!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 18:33:09' prior: 50865258!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot addedWeapon |
	
	robot := self createAluminum3000.
	self insertInThis: robot theWeapon: addedWeapon .
	
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: addedWeapon)

	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:31:10' prior: 50865342!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot addedWeapon |
	
	robot := self createAluminum3000.
	addedWeapon := self createTurboLaserCannon.
	robot addWeapon: addedWeapon.
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: addedWeapon)

	
	

	! !
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:07:02' prior: 50865064!
ofType: aWeaponType

	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType]
		ifFound:[^aWeaponType new initialize] 
		ifNone:[self error: 'Invalid Weapon Type'].
		
	
	! !

!classRenamed: #TurboLaserCanon as: #TurboLaserCannon stamp: 'LEC 5/3/2021 18:38:25'!
Smalltalk renameClassNamed: #TurboLaserCanon as: #TurboLaserCannon!
!RobotWarsTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:38:26' prior: 50861322!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #TurboLaserCannon).
	! !
!RobotWarsTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:38:26' prior: 50861409!
createTurboLaserCannon

	^ Weapon ofType: #TurboLaserCannon ! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:38:26' prior: 50863850 overrides: 50865151!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].! !
!Weapon methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:38:26' prior: 50865151!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].

	type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:38:26' prior: 50864428 overrides: 16896425!
initialize

	type := #TurboLaserCannon.
	weight := 40 * kilogram.
	speedImpact := 15 * kilometer / hour.
	usedTimes := 0.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:38:42'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:38:42'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:38:42'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:38:42'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:38:42'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:38:42'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:38:43'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:38:45'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:39:23'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:39:23'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:39:31'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:40:10'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:40:10'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:41:00'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:41:07'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:41:37'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:41:37'!
ERROR!
!Claw class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:43:04' prior: 50864675!
canHandler: aWeaponType

	^self = aWeaponType ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:43:19'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:43:19'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:43:29'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:43:29'!
ERROR!
!Weapon class methodsFor: 'instance creation' stamp: 'HAW 5/2/2021 15:44:12' prior: 50865376!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:45:05' prior: 50865603!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new initialize].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new 		initialize ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new 		initialize].

	self error: 'Invalid Weapon Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:45:10'!
PASSED!
!Weapon methodsFor: 'attacking' stamp: 'LEC 5/3/2021 17:52:28' prior: 50865433!
attack: aVictim by: anAttacker 	

	self subclassResponsibility ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:45:57'!
PASSED!
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:46:45' prior: 50863836 overrides: 50865698!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
	].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 18:47:04'!
PASSED!
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:07:02' prior: 50865621!
ofType: aWeaponType

	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType]
		ifFound:[^aWeaponType new initialize] 
		ifNone:[self error: 'Invalid Weapon Type'].
		
	
	! !
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:45:05' prior: 50865850!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new initialize].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new 		initialize ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new 		initialize].

	self error: 'Invalid Weapon Type'! !
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:56:22' prior: 50865770 overrides: 50865698!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
	].
	aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
	].
	aVictim isAttackedforRobot: anAttacker withClaw: self.! !

Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Aluminum3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'LEC 5/3/2021 18:57:15'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'LEC 5/3/2021 18:57:26'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'nil' stamp: 'LEC 5/3/2021 18:57:53'!
isAttackedforRobot: anAttacker withClaw: aClaw

! !
!Robot methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 18:58:48' prior: 50865910!
isAttackedforRobot: anAttacker withClaw: aClaw

	self subclassResponsibility ! !
!Aluminum3000 methodsFor: 'nil' stamp: 'LEC 5/3/2021 18:59:21' overrides: 50865915!
isAttackedforRobot: anAttacker withClaw: aClaw

	self subclassResponsibility ! !
!TankRover methodsFor: 'no messages' stamp: 'LEC 5/3/2021 18:59:25' overrides: 50865915!
isAttackedforRobot: anAttacker withClaw: aClaw

	self subclassResponsibility ! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:00:40' prior: 50865921 overrides: 50865915!
isAttackedforRobot: anAttacker withClaw: aClaw

	self life: self life - (25 * year).
	(aClaw usedMoreThan:2) ifTrue: [ anAttacker removeWeapon: self ].! !
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:01:33'!
usedMoreThan: numberOfUses

	^usedTimes > numberOfUses ! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:01:47' prior: 50865934 overrides: 50865915!
isAttackedforRobot: anAttacker withClaw: aClaw

	self life: self life - (25 * year).
	(aClaw usedMoreThan:3) ifTrue: [ anAttacker removeWeapon: self ].! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:02:24' prior: 50865948 overrides: 50865915!
isAttackedforRobot: anAttacker withClaw: aClaw

	self life: self life - (25 * year).
	(aClaw used:3) ifTrue: [ anAttacker removeWeapon: self ].! !
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:02:44'!
used: numberOfUses

	^usedTimes > numberOfUses ! !

!methodRemoval: Claw #usedMoreThan: stamp: 'LEC 5/3/2021 19:02:44'!
usedMoreThan: numberOfUses

	^usedTimes > numberOfUses !
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:02:47' prior: 50865964!
used: numberOfUses

	^usedTimes = numberOfUses ! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:03:36' prior: 50865927 overrides: 50865915!
isAttackedforRobot: anAttacker withClaw: aClaw

	self life: self life - (5 * year).
	anAttacker removeWeapon: aClaw.! !
!Robot class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 19:04:41' prior: 50861585!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ Aluminum3000 new initialize ].
	aRobotType = #TankRover ifTrue: [ ^ TankRover new 
		initializeType: aRobotType 
		life: 100 * year
		speed: 40 * kilometer / hour
		maxWeaponWeight: 200 * kilogram ].

	self error: 'Invalid Robot Type'! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:05:40' overrides: 16896425!
initialize

		type:= #Aluminum3000.
		life:= 100 * year.
		speed:= 90 * kilometer / hour.
		maxWeaponWeight:= 50 * kilogram.! !
!Robot class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 19:06:00' prior: 50865986!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ Aluminum3000 new initialize ].
	aRobotType = #TankRover ifTrue: [ ^ TankRover new 	initialize ].

	self error: 'Invalid Robot Type'! !
!TankRover class methodsFor: 'nil' stamp: 'LEC 5/3/2021 19:07:00' overrides: 16883149!
initialize

		! !

!methodRemoval: TankRover class #initialize stamp: 'LEC 5/3/2021 19:07:12'!
initialize

		!
!TankRover methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:07:26' overrides: 16896425!
initialize

		type := TankRover .
		life := 100 * year.
		speed := 40 * kilometer / hour.
		maxWeaponWeight := 200 * kilogram.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:07:30'!
FAILURE!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:07:30'!
FAILURE!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:07:30'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:07:30'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:07:30'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:07:30'!
FAILURE!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:07:34'!
FAILURE!
!Claw methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:09:22' prior: 50865872 overrides: 50865698!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	aVictim isAttackedforRobot: anAttacker withClaw: self.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:09:27'!
FAILURE!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:09:27'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:09:27'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:09:27'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:09:27'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:09:27'!
FAILURE!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:09:29'!
FAILURE!

!methodRemoval: Claw #used: stamp: 'LEC 5/3/2021 19:10:07'!
used: numberOfUses

	^usedTimes = numberOfUses !
!Weapon methodsFor: 'type' stamp: 'LEC 5/3/2021 19:10:12'!
used: numberOfUses

	^usedTimes = numberOfUses ! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:10:40' prior: 50865415 overrides: 50865698!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	aVictim isAttackedforRobot: anAttacker withCHSBlaster: self.! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:12:41'!
isAttackedforRobot: anAttacker withCHSBlaster: aBlaster.

		self life: self life - (5 * year).
		(aBlaster used: 3) ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		
	! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:14:07'!
isAttackedforRobot: anAttacker withCHSBlaster: aBlaster.

		self life: self life - (5 * year).
		(aBlaster used: 3) ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:14:40' prior: 50866214!
isAttackedforRobot: anAttacker withCHSBlaster: aBlaster.


		self life: self life - (50 * year).
		self life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:14:57' prior: 50866185 overrides: 50865698!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	aVictim isAttackedforRobot: anAttacker withCHSBlaster: self.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:15:00'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:15:00'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:15:00'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:15:00'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:15:00'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:15:00'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:15:00'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:15:00'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:15:00'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:15:01'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:15:01'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:15:01'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:15:01'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:15:01'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:15:01'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:15:01'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:15:01'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:15:01'!
FAILURE!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:15:04'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:17:11'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:17:11'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:17:11'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:17:11'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:17:11'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:17:11'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:17:11'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:17:11'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:17:11'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:17:11'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:17:12'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:17:12'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:17:12'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:17:12'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:17:12'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:17:12'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:17:12'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:17:12'!
FAILURE!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:17:14'!
ERROR!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:18:14' prior: 50866204!
isAttackedforRobot: anAttacker withCHSBlaster: aBlaster.

		self life: self life - (5 * year).
		(aBlaster used: 5) ifTrue: [ 
			anAttacker removeWeapon: self.
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:18:16'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:18:16'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:18:16'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:18:16'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:18:16'!
FAILURE!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:18:18'!
ERROR!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:19:45' prior: 50866385!
isAttackedforRobot: anAttacker withCHSBlaster: aBlaster.

		self life: self life - (5 * year).
		(aBlaster used: 5) ifTrue: [ 
			anAttacker removeWeapon: aBlaster .
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		
	! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:19:54' prior: 50865957 overrides: 50865915!
isAttackedforRobot: anAttacker withClaw: aClaw

	self life: self life - (25 * year).
	(aClaw used:3) ifTrue: [ anAttacker removeWeapon: aClaw ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:20:03'!
FAILURE!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:20:03'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:20:03'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:20:03'!
FAILURE!
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:20:50' prior: 50863868 overrides: 50865698!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	aVictim isAttackedforRobot: anAttacker withLaser: self.! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:22:20'!
isAttackedforRobot: anAttacker withLaser: aLaser.

	
			self life: self life - (100 * year).
			(aLaser used:10) ifTrue: [ anAttacker removeWeapon: aLaser ]
		! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:22:26'!
isAttackedforRobot: anAttacker withLaser: aLaser.

	
			self life: self life - (100 * year).
			(aLaser used:10) ifTrue: [ anAttacker removeWeapon: aLaser ]
		! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:22:54' prior: 50866554 overrides: 50865698!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim isAttackedforRobot: anAttacker withLaser: self.! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:23:45' prior: 50866580!
isAttackedforRobot: anAttacker withLaser: aLaser.

	self life: self life - (100 * year).
	(aLaser used:5) ifTrue: [ 
		anAttacker removeWeapon: aLaser.
		anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:23:49'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:23:49'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:23:50'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:23:50'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:23:50'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:23:50'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:23:50'!
FAILURE!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:24:46'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:24:46'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:24:46'!
FAILURE!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:25:57' prior: 50866479 overrides: 50865915!
isAttackedforRobot: anAttacker withClaw: aClaw

	self life: self life - (25 * year).
	(aClaw used:2) ifTrue: [ anAttacker removeWeapon: aClaw ].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:26:05'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:26:06'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:26:06'!
PASSED!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:26:55'!
isAttackedforRobot: anAttacker withHSBlaster: aBlaster.

		self life: self life - (5 * year).
		(aBlaster used: 5) ifTrue: [ 
			anAttacker removeWeapon: aBlaster .
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		
	! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:26:55'!
isAttackedforRobot: anAttacker withHSBlaster: aBlaster.


		self life: self life - (50 * year).
		self life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		! !
!HSBlaster methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 19:26:55' prior: 50866235 overrides: 50865698!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
	aVictim isAttackedforRobot: anAttacker withHSBlaster: self.! !

!methodRemoval: Aluminum3000 #isAttackedforRobot:withCHSBlaster: stamp: 'LEC 5/3/2021 19:26:55'!
isAttackedforRobot: anAttacker withCHSBlaster: aBlaster.

		self life: self life - (5 * year).
		(aBlaster used: 5) ifTrue: [ 
			anAttacker removeWeapon: aBlaster .
			anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		
	!

!methodRemoval: TankRover #isAttackedforRobot:withCHSBlaster: stamp: 'LEC 5/3/2021 19:26:55'!
isAttackedforRobot: anAttacker withCHSBlaster: aBlaster.


		self life: self life - (50 * year).
		self life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:27:02'!
PASSED!

----SNAPSHOT----(3 May 2021 19:31:24) CuisUniversity-4532.image priorSource: 16993246!
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 19:43:22'!
assertingRobot: attackerWeapon withWeapon: attacker

	self assert: 2 equals: attacker weaponsCount.
	self assert: (attacker includesWeapon: attackerWeapon).
	self assert: (attacker includesWeaponOfType: #Claw)! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 19:43:22' prior: 50861340!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster .
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assertingRobot: attackerWeapon withWeapon: attacker.
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:43:41'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:43:41'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:43:41'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:43:41'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:43:41'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:43:42'!
PASSED!
!Robot methodsFor: 'attacking' stamp: 'LEC 5/3/2021 19:47:19' prior: 50865915!
isAttackedforRobot: anAttacker withClaw: aClaw

	self subclassResponsibility ! !
!Robot methodsFor: 'attacking' stamp: 'LEC 5/3/2021 19:47:42'!
isAttackedforRobot: anAttacker withLaser: aLaser

	self subclassResponsibility ! !
!Robot methodsFor: 'attacking' stamp: 'LEC 5/3/2021 19:47:56'!
isAttackedforRobot: anAttacker withHSBlaster: aBlaster.

	self subclassResponsibility ! !
!Robot methodsFor: 'initialization' stamp: 'LEC 5/3/2021 19:48:35' overrides: 16896425!
initialize

	self subclassResponsibility ! !
!Weapon methodsFor: 'initialization' stamp: 'LEC 5/3/2021 19:48:55' overrides: 16896425!
initialize

	self subclassResponsibility ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:48:58'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:48:59'!
PASSED!
!Robot methodsFor: 'initialization' stamp: 'LEC 5/3/2021 19:53:56' prior: 50861453!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type := aRobotType.
	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.
	weapons := OrderedCollection new.

	! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 19:54:05' prior: 50863721!
addWeapon: aWeapon
	
	self assertWeaponsSpeedAndWeight: aWeapon.
	
	weapons add: aWeapon.
	! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 19:54:14' prior: 50861484!
includesWeapon: aWeapon 

	^weapons includes: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 19:54:20' prior: 50861490!
includesWeaponOfType: aWeaponType


	^weapons anySatisfy: [ :weapon | weapon type = aWeaponType ]! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 19:54:26' prior: 50861497!
removeWeapon: aWeapon 
	
	weapons remove: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 19:54:37' prior: 50862693!
totalSpeedImpact

	| weaponsWithWeightGreaterThanTen |

	weaponsWithWeightGreaterThanTen := (weapons select:[:weapon| weapon weight > (10 * kilogram )]).
		
	^self sumSpeedImpactWeapons: weaponsWithWeightGreaterThanTen.
	! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 19:54:45' prior: 50862617!
totalWeaponWeight

	^ self sumWeightWeapons: weapons.! !
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 19:54:53' prior: 50861528!
weaponsCount

	^ weapons size 	! !
!Robot methodsFor: 'attacking' stamp: 'LEC 5/3/2021 19:55:22' prior: 50861462!
attack: aVictim with: aWeapon

	(weapons includes: aWeapon) 
		ifTrue: [ aWeapon attack: aVictim by: self ]
		ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:55:50'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:55:51'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:55:51'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:55:51'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:55:51'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:55:51'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:55:53'!
ERROR!
!Aluminum3000 methodsFor: 'initialization' stamp: 'LEC 5/3/2021 19:56:21' prior: 50865999 overrides: 50867045!
initialize

		type:= #Aluminum3000.
		life:= 100 * year.
		speed:= 90 * kilometer / hour.
		maxWeaponWeight:= 50 * kilogram.
		weapons := OrderedCollection new.! !
!TankRover methodsFor: 'initialization' stamp: 'LEC 5/3/2021 19:56:27' prior: 50866022 overrides: 50867045!
initialize

		type := TankRover .
		life := 100 * year.
		speed := 40 * kilometer / hour.
		maxWeaponWeight := 200 * kilogram.
		weapons := OrderedCollection new.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 19:56:30'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 19:56:30'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:56:30'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 19:56:30'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 19:56:30'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 19:56:30'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 19:56:30'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 19:56:30'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 19:56:30'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 19:56:31'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 19:56:31'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 19:56:31'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 19:56:31'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 19:56:31'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 19:56:31'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 19:56:31'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 19:56:31'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 19:56:31'!
PASSED!
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 18:07:02' prior: 50865860!
ofType: aWeaponType

	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType]
		ifFound:[^aWeaponType new initialize] 
		ifNone:[self error: 'Invalid Weapon Type'].
		
	
	! !
!Claw class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 20:09:50' prior: 50865584!
canHandler: aWeaponType

	^#Claw = aWeaponType ! !
!HSBlaster class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 20:10:02' prior: 50864841!
canHandler: aWeaponType

	^#HSBlaster = aWeaponType 
	! !
!TurboLaserCannon class methodsFor: 'as yet unclassified' stamp: 'LEC 5/3/2021 20:10:16' prior: 50864846!
canHandler: aWeaponType

	^#TurboLaserCannon = aWeaponType ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:10:20'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:10:20'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:10:21'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:10:21'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:10:21'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:10:25'!
ERROR!
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 20:11:15' prior: 50867335!
ofType: aWeaponType

	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType]
		ifFound:[:aTypeOfWeapon| aTypeOfWeapon new initialize] 
		ifNone:[self error: 'Invalid Weapon Type'].
		
	
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:11:19'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:11:19'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:11:19'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:11:21'!
ERROR!
!Weapon class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 20:12:06' prior: 50867431!
ofType: aWeaponType

	self allSubclasses detect:[:aTypeOfWeapon| aTypeOfWeapon canHandler: aWeaponType]
		ifFound:[:aTypeOfWeapon| ^aTypeOfWeapon new initialize] 
		ifNone:[self error: 'Invalid Weapon Type'].
		
	
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:12:09'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:12:09'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:12:09'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:12:09'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:12:09'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:12:09'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:12:09'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:12:09'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:12:10'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:12:10'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:12:10'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:12:10'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:12:10'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:12:10'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:12:10'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:12:10'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:12:10'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:12:10'!
PASSED!
!Robot class methodsFor: 'instance creation' stamp: 'LEC 5/3/2021 20:13:39' prior: 50866006!
ofType: aRobotType

	self allSubclasses detect:[:aTypeOfRobot| aTypeOfRobot canHandler: aRobotType]
		ifFound:[:aTypeOfRobot| ^aTypeOfRobot new initialize] 
		ifNone:[self error:'Invalid Robot Type'].
! !
!Aluminum3000 class methodsFor: 'no messages' stamp: 'LEC 5/3/2021 20:14:28'!
canHandler: aRobotType

	^#Aluminum3000 = aRobotType
	 ! !
!TankRover class methodsFor: 'no messages' stamp: 'LEC 5/3/2021 20:15:03'!
canHandler: aRobotType

	^aRobotType = #TankRover! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:15:12'!
PASSED!

----SNAPSHOT----(3 May 2021 20:25:37) CuisUniversity-4532.image priorSource: 17129038!
!HSBlaster methodsFor: 'attacking' stamp: 'LEC 5/3/2021 20:27:07' prior: 50866841 overrides: 50865698!
attack: aVictim by: anAttacker 	
	
	aVictim isAttackedforRobot: anAttacker withHSBlaster: self.! !
!Claw methodsFor: 'attacking' stamp: 'LEC 5/3/2021 20:27:16' prior: 50866100 overrides: 50865698!
attack: aVictim by: anAttacker 	
	
	aVictim isAttackedforRobot: anAttacker withClaw: self.! !
!TurboLaserCannon methodsFor: 'attacking' stamp: 'LEC 5/3/2021 20:27:23' prior: 50866589 overrides: 50865698!
attack: aVictim by: anAttacker 	

	aVictim isAttackedforRobot: anAttacker withLaser: self.! !
!Weapon methodsFor: 'attacking' stamp: 'LEC 5/3/2021 20:27:29' prior: 50865698!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.

	self subclassResponsibility ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:27:33'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:27:33'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:27:33'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:27:33'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:27:33'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:27:33'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:27:33'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:27:33'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:27:34'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:27:34'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:27:34'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:27:34'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:27:34'!
FAILURE!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:27:34'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:27:34'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:27:34'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:27:34'!
FAILURE!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:27:34'!
FAILURE!
!Weapon methodsFor: 'attacking' stamp: 'LEC 5/3/2021 20:27:50' prior: 50867695!
attack: aVictim by: anAttacker 	

	
	self subclassResponsibility ! !
!Claw methodsFor: 'attacking' stamp: 'LEC 5/3/2021 20:27:55' prior: 50867682 overrides: 50867767!
attack: aVictim by: anAttacker 	
	
	usedTimes := usedTimes + 1.

	aVictim isAttackedforRobot: anAttacker withClaw: self.! !
!HSBlaster methodsFor: 'attacking' stamp: 'LEC 5/3/2021 20:28:01' prior: 50867675 overrides: 50867767!
attack: aVictim by: anAttacker 	
	
	usedTimes := usedTimes + 1.

	aVictim isAttackedforRobot: anAttacker withHSBlaster: self.! !
!TurboLaserCannon methodsFor: 'attacking' stamp: 'LEC 5/3/2021 20:28:07' prior: 50867689 overrides: 50867767!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.

	aVictim isAttackedforRobot: anAttacker withLaser: self.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:28:10'!
PASSED!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:30:47' prior: 50865359!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot weapons |
	
	weapons := OrderedCollection with: self createTurboLaserCannon.
	robot := self createAluminum300WithWeapon: weapons.
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: weapons first)

	
	

	! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'LEC 5/3/2021 20:32:54'!
createAluminum3000WithWeapons: CollectionWithWeapons
	
	^ CollectionWithWeapons inject: (Robot ofType: #Aluminum3000) into:[:aWeapon :robot| robot addWeapon: aWeapon ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:33:00'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:33:00'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:33:00'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:33:22' prior: 50867863!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot weapons |
	
	weapons := OrderedCollection with: self createTurboLaserCannon.
	robot := self createAluminum300WithWeapons: weapons.
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: weapons first)

	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:33:36' prior: 50867959!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot weapons |
	
	weapons := OrderedCollection with: self createTurboLaserCannon.
	robot := self createAluminum3000WithWeapons: weapons.
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: weapons first)

	
	

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:33:39'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:33:40'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:33:40'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation' stamp: 'LEC 5/3/2021 20:34:02' prior: 50867880!
createAluminum3000WithWeapons: CollectionWithWeapons
	
	^ CollectionWithWeapons inject: (Robot ofType: #Aluminum3000) into:[:robot :aWeapon| robot addWeapon: aWeapon ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:34:09'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:34:09'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:34:09'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:34:09'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:34:09'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:34:09'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:34:09'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:34:09'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:34:09'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:34:10'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:34:10'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:34:10'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:34:10'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:34:10'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:34:10'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:34:10'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:34:10'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:34:10'!
PASSED!
!RobotWarsTest methodsFor: 'robot creation' stamp: 'LEC 5/3/2021 20:34:28'!
createAluminumTankRoverWithWeapons: CollectionWithWeapons
	
	^ CollectionWithWeapons inject: (Robot ofType: #TankRover) into:[:robot :aWeapon| robot addWeapon: aWeapon ]! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:36:07' prior: 50861135!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot firstAddedWeapon secondAddedWeapon weapons |
	weapons := OrderedCollection new with: self createTurboLaserCannon with: self createTurboLaserCannon.
	robot := self createTankRover .
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: firstAddedWeapon).
	self assert: (robot includesWeapon: secondAddedWeapon)
	

	! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'LEC 5/3/2021 20:36:34'!
createTankRoverWithWeapons: CollectionWithWeapons
	
	^ CollectionWithWeapons inject: (Robot ofType: #TankRover) into:[:robot :aWeapon| robot addWeapon: aWeapon ]! !

!methodRemoval: RobotWarsTest #createAluminumTankRoverWithWeapons: stamp: 'LEC 5/3/2021 20:36:34'!
createAluminumTankRoverWithWeapons: CollectionWithWeapons
	
	^ CollectionWithWeapons inject: (Robot ofType: #TankRover) into:[:robot :aWeapon| robot addWeapon: aWeapon ]!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:37:27' prior: 50868147!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection new with: self createTurboLaserCannon with: self createTurboLaserCannon.
	robot := self createTankRoverWithWeapons: weapons.
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	self assert: (robot includesWeapon: weapons second )
	

	! !

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:37:36'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:37:36'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:37:57' prior: 50868184!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection new with: self createTurboLaserCannon with: self createTurboLaserCannon.
	robot := self createTankRoverWithWeapons: weapons.
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	self assert: (robot includesWeapon: weapons second )
	

	! !

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:38:04'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:38:04'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:38:56' prior: 50868211!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection new with: self createTurboLaserCannon with: self createTurboLaserCannon.
	robot := self createTankRoverWithWeapons: weapons.
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	self assert: (robot includesWeapon: weapons second )
	

	! !

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:39:01'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:39:01'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:43:38' prior: 50868238!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection new with: self createTurboLaserCannon :: with: self createTurboLaserCannon.
	robot := self createTankRoverWithWeapons: weapons. 
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	self assert: (robot includesWeapon: weapons second )
	

	! !

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:43:42'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:43:42'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:43:53'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:43:53'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:44:06' prior: 50868265!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection new with: self createTurboLaserCannon .
	robot := self createTankRoverWithWeapons: weapons. 
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	self assert: (robot includesWeapon: weapons second )
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:44:22' prior: 50868298!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection new with: self createTurboLaserCannon .
	robot := self createTankRoverWithWeapons: weapons. 
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	
	

	! !

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:44:26'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:44:26'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:44:41' prior: 50868317!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection new :: with: self createTurboLaserCannon :: with: self createTurboLaserCannon.
	robot := self createTankRoverWithWeapons: weapons. 
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	self assert: (robot includesWeapon: weapons second )
	

	! !

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:44:47'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:44:47'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:44:56' prior: 50868341!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection new with: self createTurboLaserCannon :: with: self createTurboLaserCannon.
	robot := self createTankRoverWithWeapons: weapons. 
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	self assert: (robot includesWeapon: weapons second )
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:45:06' prior: 50868368!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection with: self createTurboLaserCannon :: with: self createTurboLaserCannon.
	robot := self createTankRoverWithWeapons: weapons. 
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	self assert: (robot includesWeapon: weapons second )
	

	! !

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:45:09'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:45:09'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:45:17'!
PASSED!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 20:45:26' prior: 50868388!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection with: self createTurboLaserCannon with: self createTurboLaserCannon.
	robot := self createTankRoverWithWeapons: weapons. 
	
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	self assert: (robot includesWeapon: weapons second )
	

	! !

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:45:29'!
PASSED!
!Claw methodsFor: 'initialization' stamp: 'LEC 5/3/2021 20:54:19' prior: 50864412 overrides: 50867050!
initialize

	
	weight := 10 * kilogram.
	speedImpact := 5 * kilometer / hour.
	usedTimes := 0.! !
!HSBlaster methodsFor: 'initialization' stamp: 'LEC 5/3/2021 20:54:26' prior: 50864420 overrides: 50867050!
initialize

	
	weight := 20 * kilogram.
	speedImpact := 10 * kilometer / hour.
	usedTimes := 0.! !
!TurboLaserCannon methodsFor: 'initialization' stamp: 'LEC 5/3/2021 20:54:32' prior: 50865475 overrides: 50867050!
initialize

	
	weight := 40 * kilogram.
	speedImpact := 15 * kilometer / hour.
	usedTimes := 0.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:54:42'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:54:42'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:54:42'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:54:42'!
FAILURE!
!Robot methodsFor: 'weapons' stamp: 'LEC 5/3/2021 20:57:44' prior: 50867142!
includesWeaponOfType: aWeaponType


	^weapons anySatisfy: [ :weapon | weapon className = aWeaponType ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 20:57:52'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 20:57:52'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:57:52'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 20:57:52'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 20:57:52'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 20:57:52'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 20:57:52'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 20:57:53'!
PASSED!
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 20:58:36' prior: 50865391!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: TurboLaserCannon).
	! !

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:58:39'!
FAILURE!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 20:58:39'!
FAILURE!
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 20:59:26' prior: 50868600!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #TurboLaserCannon).
	! !

!methodRemoval: Weapon #type stamp: 'LEC 5/3/2021 21:00:52'!
type
	
	^type!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:00:57'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:00:57'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:00:57'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:00:57'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:00:58'!
PASSED!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 21:02:22' prior: 50861165!
test04ShouldAddWeightWhenAddingWeapon
	
	| robot weapons |
	weapons :=  OrderedCollection with:self createTurboLaserCannon.
	robot := self createTankRoverWithWeapons: weapons .

	self assert: weapons first weight equals: robot totalWeaponWeight.
	
	

	! !

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:02:30'!
PASSED!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 21:03:41' prior: 50861183!
test06ShouldAddSpeedImpactWhenAddingWeapons

	| robot weapons |
	
	robot := self createTankRover.
	
	weapons :=  OrderedCollection with:self createTurboLaserCannon with: self createClaw.
	
	self assert: weapons first  weight + weapons second weight equals: robot totalWeaponWeight.
	
	

	! !

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:03:48'!
FAILURE!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:03:48'!
FAILURE!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 21:04:12' prior: 50868730!
test06ShouldAddSpeedImpactWhenAddingWeapons

	| robot weapons |
	
	weapons :=  OrderedCollection with:self createTurboLaserCannon with: self createClaw.
	robot := self createTankRoverWithWeapons: weapons .
	
	
	
	self assert: weapons first  weight + weapons second weight equals: robot totalWeaponWeight.
	
	

	! !

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:04:16'!
PASSED!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 21:04:41' prior: 50868418!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot weapons |
	weapons := OrderedCollection with: self createTurboLaserCannon with: self createTurboLaserCannon.
	robot := self createTankRoverWithWeapons: weapons. 
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: weapons first).
	self assert: (robot includesWeapon: weapons second )
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 21:05:09' prior: 50868750!
test06ShouldAddSpeedImpactWhenAddingWeapons

	| robot weapons |
	
	weapons :=  OrderedCollection with:self createTurboLaserCannon with: self createClaw.
	robot := self createTankRoverWithWeapons: weapons .
	
	self assert: weapons first  weight + weapons second weight equals: robot totalWeaponWeight.
	
	

	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:07:03' prior: 50861197!
test07ClawReducesLifeOfAluminum3000By25

	| attacker attacked attackerWeapons |
	
	attackerWeapons := OrderedCollection with: self createClaw.
	attacker := self createAluminum3000WithWeapons: attackerWeapons.
	attacked := self createAluminum3000.
	
	attacker attack: attacked with: attackerWeapons first.
	
	self assert: (100 * year) - (25 * year) equals: attacked life
	
	! !

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:07:10'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:07:14'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:07:15'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:07:15'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:07:15'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:08:02' prior: 50861211!
test08ClawReducesLifeOfTankRoverBy5

	| attacker attacked attackerWeapon attackerWeapons |
	attackerWeapons := OrderedCollection with: self createClaw.
	attacker := self createAluminum3000WithWeapons: attackerWeapons.
	attacked := self createTankRover.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:08:10' prior: 50868886!
test08ClawReducesLifeOfTankRoverBy5

	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createClaw.
	attacker := self createAluminum3000WithWeapons: attackerWeapons.
	attacked := self createTankRover.
	
	attacker attack: attacked with: attackerWeapons first.
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	
	! !

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:08:15'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:08:15'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:08:15'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:08:15'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:08:15'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:08:15'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:08:55' prior: 50861225!
test09HSBlasterReducesLifeOfAluminum3000By5

	| attacker attacked attackerWeapons |
	
	attackerWeapons := OrderedCollection with: self createHSBlaster .
	attacker := self createAluminum3000WithWeapons: attackerWeapons .
	attacked := self createAluminum3000.
	
	
	attacker attack: attacked with: attackerWeapons first.
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:09:03' prior: 50868938!
test09HSBlasterReducesLifeOfAluminum3000By5

	| attacker attacked attackerWeapons |
	
	attackerWeapons := OrderedCollection with: self createHSBlaster .
	attacker := self createAluminum3000WithWeapons: attackerWeapons .
	attacked := self createAluminum3000.
		
	attacker attack: attacked with: attackerWeapons first.
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:10:21' prior: 50861240!
test10HSBlasterReducesLifeOfTankRoverBy50

	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createHSBlaster .
	attacker := self createAluminum3000WithWeapons: attackerWeapons .
	attacked := self createTankRover.
	
	attacker attack: attacked with: attackerWeapons.
	
	self assert: (100 * year) - (50 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:10:29' prior: 50868970!
test10HSBlasterReducesLifeOfTankRoverBy50

	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createHSBlaster .
	attacker := self createAluminum3000WithWeapons: attackerWeapons .
	attacked := self createTankRover.
	
	attacker attack: attacked with: attackerWeapons first.
	
	self assert: (100 * year) - (50 * year) equals: attacked life
	
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:10:32'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:10:32'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:10:33'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:11:30' prior: 50861255!
test11TurboLaserCannonReducesLifeOfAluminum3000By100

	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createTurboLaserCannon.
	attacker := self createAluminum3000WithWeapons: attackerWeapons .
	attacked := self createAluminum3000.

	attacker attack: attacked with: attackerWeapons first.
	
	self assert: (100 * year) - (100 * year) equals: attacked life
	
	! !

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:11:41'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:11:42'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:12:43' prior: 50861270!
test12TurboLaserCannonReducesLifeOfTankRoverBy100

	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createTurboLaserCannon.
	attacker := self createAluminum3000WithWeapons: attackerWeapons .
	attacked := self createTankRover.
	
	
	attacker attack: attacked with: attackerWeapons first.
	
	self assert: (100 * year) - (100 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:14:11' prior: 50861285!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createClaw .
	attacker := self createAluminum3000WithWeapons: attackerWeapons .
	attacked := self createAluminum3000.
	
	
	2 timesRepeat: [ attacker attack: attacked with: attackerWeapons first ].
	
	self 
		should: [ attacker attack: attacked with: attackerWeapons first]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:15:11' prior: 50861304!
test14CanUseClawOnlyOnceWhenAttackingTankRover

	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createClaw.
	attacker := self createAluminum3000WithWeapons: attackerWeapons.
	attacked := self createTankRover.
	
	
	attacker attack: attacked with: attackerWeapons first.
	
	self 
		should: [ attacker attack: attacked with: attackerWeapons first ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:16:30' prior: 50868628!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createHSBlaster .
	attacker := self createAluminum3000WithWeapons: attackerWeapons.
	attacked := self createAluminum3000.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapons first ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #TurboLaserCannon).
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:16:37'!
PASSED!
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:17:08' prior: 50861359!
test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000

	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createTurboLaserCannon.
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	
	10 timesRepeat: [ attacker attack: attacked with: attackerWeapons first ].
	
	self assert: 0 equals: attacker weaponsCount.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:17:28' prior: 50869295!
test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000

	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createTurboLaserCannon.
	attacker := self createAluminum3000WithWeapons: attackerWeapons .
	attacked := self createAluminum3000.
	
	10 timesRepeat: [ attacker attack: attacked with: attackerWeapons first ].
	
	self assert: 0 equals: attacker weaponsCount.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:18:01' prior: 50861375!
test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover

	| attacker attacked attackerWeapons |
	attackerWeapons := OrderedCollection with: self createTurboLaserCannon.
	attacker := self createAluminum3000WithWeapons: attackerWeapons.
	attacked := self createTankRover.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapons first ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #HSBlaster)
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:18:09'!
PASSED!

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'LEC 5/3/2021 21:19:40'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: 'aLasserCannon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'LEC 5/3/2021 21:19:42'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: 'aLasserCannon aClaw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'LEC 5/3/2021 21:19:44'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: 'aLasserCannon aClaw aBlaster'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!RobotWarsTest methodsFor: 'nil' stamp: 'LEC 5/3/2021 21:19:37' overrides: 16927572!
setUp

	aLasserCannon := self createTurboLaserCannon.
	aClaw := self createClaw.
	aBlaster := self createHSBlaster ! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'LEC 5/3/2021 21:20:52'!
createAluminum3000WithWeapon: aWeapons
	
	^ Robot ofType: #Aluminum3000 :: add:aWeapons ! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'LEC 5/3/2021 21:21:21'!
createTankRoverWithWeapon: aWeapon
	
	^ Robot ofType: #TankRover :: addWeapon: aWeapon! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 21:22:00' prior: 50867977!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot weapon |
	
	robot := self createAluminum3000WithWeapon: aLasserCannon .
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: weapon)

	
	

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:22:10'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:22:10'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation' stamp: 'LEC 5/3/2021 21:22:31' prior: 50869444!
createAluminum3000WithWeapon: aWeapon
	
	^ Robot ofType: #Aluminum3000 :: addWeapon: aWeapon ! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 21:23:29' prior: 50868715!
test04ShouldAddWeightWhenAddingWeapon
	
	| robot |
	
	robot := self createTankRoverWithWeapons: aLasserCannon .

	self assert: aLasserCannon weight equals: robot totalWeaponWeight.
	
	

	! !

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:23:37'!
ERROR!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:23:37'!
ERROR!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:23:46'!
ERROR!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:23:46'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 21:23:55' prior: 50869486!
test04ShouldAddWeightWhenAddingWeapon
	
	| robot |
	
	robot := self createTankRoverWithWeapon: aLasserCannon .

	self assert: aLasserCannon weight equals: robot totalWeaponWeight.
	
	

	! !

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:23:58'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:24:03'!
FAILURE!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:24:03'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:24:03'!
FAILURE!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'LEC 5/3/2021 21:24:20' prior: 50869456!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot |
	
	robot := self createAluminum3000WithWeapon: aLasserCannon .
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: aLasserCannon )

	
	

	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:24:31'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:25:08' prior: 50868801!
test07ClawReducesLifeOfAluminum3000By25

	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapon: aClaw .
	attacked := self createAluminum3000.
	
	attacker attack: attacked with: aClaw .
	
	self assert: (100 * year) - (25 * year) equals: attacked life
	
	! !

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:25:14'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:25:35' prior: 50868902!
test08ClawReducesLifeOfTankRoverBy5

	| attacker attacked |

	attacker := self createAluminum3000WithWeapons: aClaw .
	attacked := self createTankRover.
	
	attacker attack: attacked with: aClaw .
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:26:05' prior: 50868954!
test09HSBlasterReducesLifeOfAluminum3000By5

	| attacker attacked |
	
	
	attacker := self createAluminum3000WithWeapons: aBlaster .
	attacked := self createAluminum3000.
		
	attacker attack: attacked with: aBlaster .
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:26:26' prior: 50868986!
test10HSBlasterReducesLifeOfTankRoverBy50

	| attacker attacked |
	.
	attacker := self createAluminum3000WithWeapons: aBlaster .
	attacked := self createTankRover.
	
	attacker attack: attacked with: aBlaster .
	
	self assert: (100 * year) - (50 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:26:32' prior: 50869653!
test10HSBlasterReducesLifeOfTankRoverBy50

	| attacker attacked |
	.
	attacker := self createAluminum3000WithWeapon: aBlaster .
	attacked := self createTankRover.
	
	attacker attack: attacked with: aBlaster .
	
	self assert: (100 * year) - (50 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:26:37' prior: 50869640!
test09HSBlasterReducesLifeOfAluminum3000By5

	| attacker attacked |
	
	
	attacker := self createAluminum3000WithWeapon: aBlaster .
	attacked := self createAluminum3000.
		
	attacker attack: attacked with: aBlaster .
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:26:44' prior: 50869628!
test08ClawReducesLifeOfTankRoverBy5

	| attacker attacked |

	attacker := self createAluminum3000WithWeapon: aClaw .
	attacked := self createTankRover.
	
	attacker attack: attacked with: aClaw .
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:26:48'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:27:24' prior: 50869068!
test11TurboLaserCannonReducesLifeOfAluminum3000By100

	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapon: aLasserCannon .
	attacked := self createAluminum3000.

	attacker attack: attacked with: aLasserCannon .
	
	self assert: (100 * year) - (100 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:27:47' prior: 50869154!
test12TurboLaserCannonReducesLifeOfTankRoverBy100

	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapons: aLasserCannon .
	attacked := self createTankRover.
	
	attacker attack: attacked with: aLasserCannon .
	
	self assert: (100 * year) - (100 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:27:55' prior: 50869784!
test12TurboLaserCannonReducesLifeOfTankRoverBy100

	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapon: aLasserCannon .
	attacked := self createTankRover.
	
	attacker attack: attacked with: aLasserCannon .
	
	self assert: (100 * year) - (100 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:28:28' prior: 50869170!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker attacked |

	attacker := self createAluminum3000WithWeapon: aClaw .
	attacked := self createAluminum3000.
	
	
	2 timesRepeat: [ attacker attack: attacked with: aClaw ].
	
	self 
		should: [ attacker attack: attacked with: aClaw ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:28:36' prior: 50869810!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker attacked |

	attacker := self createAluminum3000WithWeapon: aClaw .
	attacked := self createAluminum3000.
	
	2 timesRepeat: [ attacker attack: attacked with: aClaw ].
	
	self 
		should: [ attacker attack: attacked with: aClaw ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:29:07' prior: 50869190!
test14CanUseClawOnlyOnceWhenAttackingTankRover

	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapon: aClaw .
	attacked := self createTankRover.
	
	
	attacker attack: attacked with: aClaw .
	
	self 
		should: [ attacker attack: attacked with: aClaw ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:29:28' prior: 50869209!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapons: aBlaster .
	attacked := self createAluminum3000.
	
	5 timesRepeat: [ attacker attack: attacked with: aBlaster ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #TurboLaserCannon).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:29:37' prior: 50869858!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapon: aBlaster .
	attacked := self createAluminum3000.
	
	5 timesRepeat: [ attacker attack: attacked with: aBlaster ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #TurboLaserCannon).
	! !

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:29:42'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:29:59'!
PASSED!
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:33:19' prior: 50866948!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000WithWeapon: aBlaster .
	attacked := self createTankRover.
	
	
	attacker attack: attacked with: aBlaster .
	
	self assertingRobot: attackerWeapon withWeapon: attacker.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:33:24' prior: 50869961!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000WithWeapon: aBlaster .
	attacked := self createTankRover.
	
	attacker attack: attacked with: aBlaster .
	
	self assertingRobot: attackerWeapon withWeapon: attacker.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:33:59' prior: 50869311!
test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000

	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapons: aLasserCannon .
	attacked := self createAluminum3000.
	
	10 timesRepeat: [ attacker attack: attacked with: aLasserCannon ].
	
	self assert: 0 equals: attacker weaponsCount.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:34:29' prior: 50869328!
test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover

	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapon: aLasserCannon. 
	attacked := self createTankRover.
	
	5 timesRepeat: [ attacker attack: attacked with: aLasserCannon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #HSBlaster)
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:34:34'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:34:35'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:34:35'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:34:35'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:34:35'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:34:35'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:34:35'!
PASSED!
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:34:40' prior: 50869989!
test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000

	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapon: aLasserCannon .
	attacked := self createAluminum3000.
	
	10 timesRepeat: [ attacker attack: attacked with: aLasserCannon ].
	
	self assert: 0 equals: attacker weaponsCount.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:35:07' prior: 50869975!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked |
	
	attacker := self createAluminum3000WithWeapon: aBlaster .
	attacked := self createTankRover.
	
	attacker attack: attacked with: aBlaster .
	
	self assertingRobot: aBlaster withWeapon: attacker.
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:35:13'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:35:13'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:35:13'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:35:13'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:35:13'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:35:13'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:35:13'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:35:13'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:35:13'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:35:14'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:35:14'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:35:14'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:35:14'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:35:14'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:35:14'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:35:14'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:35:14'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:35:14'!
PASSED!

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'LEC 5/3/2021 21:36:26'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: 'aLasserCannon aClaw aBlaster anAttackedAluminum'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'LEC 5/3/2021 21:36:27'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: 'aLasserCannon aClaw aBlaster anAttackedAluminum anAttackedTankRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!RobotWarsTest methodsFor: 'setUp' stamp: 'LEC 5/3/2021 21:36:24' prior: 50869437 overrides: 16927572!
setUp

	aLasserCannon := self createTurboLaserCannon.
	aClaw := self createClaw.
	aBlaster := self createHSBlaster. 
	anAttackedAluminum := self createAluminum3000. 
	anAttackedTankRover := self createTankRover .! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:37:22' prior: 50869612!
test07ClawReducesLifeOfAluminum3000By25

	| attacker |
	
	attacker := self createAluminum3000WithWeapon: aClaw .

	attacker attack: anAttackedAluminum with: aClaw .
	
	self assert: (100 * year) - (25 * year) equals: anAttackedAluminum life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:37:44' prior: 50869692!
test08ClawReducesLifeOfTankRoverBy5

	| attacker |

	attacker := self createAluminum3000WithWeapon: aClaw .
	
	attacker attack: anAttackedTankRover with: aClaw .
	
	self assert: (100 * year) - (5 * year) equals: anAttackedTankRover life
	
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:37:51'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:38:26' prior: 50869679!
test09HSBlasterReducesLifeOfAluminum3000By5

	| attacker |
	
	
	attacker := self createAluminum3000WithWeapon: aBlaster .
		
	attacker attack: anAttackedAluminum with: aBlaster .
	
	self assert: (100 * year) - (5 * year) equals: anAttackedAluminum life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:38:49' prior: 50869666!
test10HSBlasterReducesLifeOfTankRoverBy50

	| attacker |
	.
	attacker := self createAluminum3000WithWeapon: aBlaster .
	
	attacker attack: anAttackedTankRover with: aBlaster .
	
	self assert: (100 * year) - (50 * year) equals: anAttackedTankRover life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:39:19' prior: 50869771!
test11TurboLaserCannonReducesLifeOfAluminum3000By100

	| attacker |
	
	attacker := self createAluminum3000WithWeapon: aLasserCannon .

	attacker attack: anAttackedAluminum with: aLasserCannon .
	
	self assert: (100 * year) - (100 * year) equals: anAttackedAluminum life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'LEC 5/3/2021 21:39:42' prior: 50869797!
test12TurboLaserCannonReducesLifeOfTankRoverBy100

	| attacker |
	
	attacker := self createAluminum3000WithWeapon: aLasserCannon .
	
	attacker attack: anAttackedTankRover with: aLasserCannon .
	
	self assert: (100 * year) - (100 * year) equals: anAttackedTankRover life
	
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:40:21' prior: 50869826!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker attacked |

	attacker := self createAluminum3000WithWeapon: aClaw .

	2 timesRepeat: [ anAttackedAluminum attack: attacked with: aClaw ].
	
	self 
		should: [ anAttackedAluminum attack: attacked with: aClaw ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:40:52' prior: 50870348!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker |

	attacker := self createAluminum3000WithWeapon: aClaw .
	
	2 timesRepeat: [ attacker attack: anAttackedAluminum with: aClaw ].
	
	self 
		should: [ attacker attack: anAttackedAluminum with: aClaw ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:40:57'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:40:57'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:40:57'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:40:57'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:40:57'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:40:57'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:40:57'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:40:57'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:40:57'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:40:58'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:40:58'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:40:58'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:40:58'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:40:58'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:40:58'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:40:58'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:40:58'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:40:58'!
PASSED!
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:41:24' prior: 50869842!
test14CanUseClawOnlyOnceWhenAttackingTankRover

	| attacker |
	
	attacker := self createAluminum3000WithWeapon: aClaw .
	
	attacker attack: anAttackedTankRover with: aClaw .
	
	self 
		should: [ attacker attack: anAttackedTankRover with: aClaw ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:41:40' prior: 50869874!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker |
	
	attacker := self createAluminum3000WithWeapon: aBlaster .

	5 timesRepeat: [ attacker attack: anAttackedAluminum with: aBlaster ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #TurboLaserCannon).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:42:06' prior: 50870099!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker |
	
	attacker := self createAluminum3000WithWeapon: aBlaster .
	
	attacker attack: anAttackedTankRover with: aBlaster .
	
	self assertingRobot: aBlaster withWeapon: attacker.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:42:30' prior: 50870085!
test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000

	| attacker |
	
	attacker := self createAluminum3000WithWeapon: aLasserCannon .
	
	10 timesRepeat: [ attacker attack: anAttackedAluminum with: aLasserCannon ].
	
	self assert: 0 equals: attacker weaponsCount.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'LEC 5/3/2021 21:43:00' prior: 50870003!
test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover

	| attacker |
	
	attacker := self createAluminum3000WithWeapon: aLasserCannon. 
	
	5 timesRepeat: [ attacker attack: anAttackedTankRover with: aLasserCannon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #HSBlaster)
	! !

----SNAPSHOT----(3 May 2021 21:45:11) CuisUniversity-4532.image priorSource: 17152668!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'LEC 5/3/2021 21:47:15'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'LEC 5/3/2021 21:47:16'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'LEC 5/3/2021 21:47:16'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'LEC 5/3/2021 21:47:16'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'LEC 5/3/2021 21:47:16'!
PASSED!

----STARTUP---- (6 May 2021 20:06:13) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!

!classDefinition: #Rot13Test category: 'Rot13' stamp: 'LEC 5/6/2021 20:13:57'!
TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!
!Rot13Test methodsFor: 'no messages' stamp: 'LEC 5/6/2021 20:18:36'!
tests01

	self assert: '' asRot13 equals: ''! !

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 20:19:20'!
ERROR!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 20:19:20'!
ERROR!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 20:20:35'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 20:21:52'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 20:25:37' prior: 50870607!
asRot13
	
	^''! !

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 20:25:39'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 20:25:39'!
PASSED!

$a.!

$a.!

$a + 3.!

$a nextInstance .!

$a nextInstance .!

'a' nextInstance .!

'a' nextInstance .!

'a' + 1.!

'a' orderedDither32To16 .!

a!

'a'!

$a!

'a' nextObject .!

'a' nextObject .!

'a' asNumber .!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 20:29:17'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 20:32:47'!
tests02

	self assert: 'a' asRot13 equals: 'n'! !

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 20:36:00'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 20:37:56' prior: 50870611!
asRot13
	
	self = 'a' ifTrue:[^'n'].
	^''! !

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 20:37:58'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 20:37:58'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 20:37:58'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 20:46:47'!
tests03

	self assert: 'b' asRot13 equals: 'o'! !

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 20:46:53'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 20:46:53'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 20:46:53'!
FAILURE!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 20:46:53'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 20:47:16' prior: 50870634!
asRot13
	
	self = 'a' ifTrue:[^'n'].
	self = 'b' ifTrue:[^'o'].
	^''! !

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 20:47:18'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 20:47:25'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 20:47:25'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 20:47:25'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 20:53:07' prior: 50870658!
asRot13
	
	self = '' ifTrue:[^''].
	^(Character asciiValue: (self first asciiValue + 13)) asString ! !

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 20:53:29'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 20:53:29'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 20:53:29'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 21:00:16'!
tests04

	self assert: 'z' asRot13 equals: 'o'! !
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 21:00:27' prior: 50870684!
tests04

	self assert: 'z' asRot13 equals: 'm'! !

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:04:52'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:05:15' prior: 50870672!
asRot13
	
	self = '' ifTrue:[^''].
	self = 'z' ifTrue:[^'m'].
	^(Character asciiValue: (self first asciiValue + 13)) asString ! !

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:05:42'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:05:42'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:05:42'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:05:42'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:05:42'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 21:12:50'!
tests05

	self assert: 'p' asRot13 equals: 'c'! !

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:12:56'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:13:15' prior: 50870696!
asRot13
	
	self = '' ifTrue:[^''].
	self = 'z' ifTrue:[^'m'].
	self = 'p' ifTrue:[^'c'].
	^(Character asciiValue: (self first asciiValue + 13)) asString ! !

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:22:24'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:22:24'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:22:24'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:22:24'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:22:24'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:22:24'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:25:03' prior: 50870721!
asRot13
	
	self = '' ifTrue:[^''].
	(self first asciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	^(Character asciiValue: (self first asciiValue + 13)) asString ! !

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:25:11'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:25:11'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:25:11'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:25:11'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:25:11'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:25:11'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 21:30:26'!
tests06

	self assert: 'm' asRot13 equals: 'z'! !

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 21:30:28'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:30:28'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:30:28'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:30:28'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:30:28'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:30:28'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 21:30:28'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 21:33:50'!
tests07

	self assert: ' ' asRot13 equals: ' '! !

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 21:33:54'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:34:12' prior: 50870742!
asRot13
	
	self = '' ifTrue:[^''].
	self = ' ' ifTrue:[^' '].
	(self first asciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	^(Character asciiValue: (self first asciiValue + 13)) asString ! !

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 21:34:30'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:34:30'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:34:30'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:34:30'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:34:30'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:34:30'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 21:34:30'!
PASSED!

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 21:34:30'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 21:37:37'!
tests08

	self assert: '?' asRot13 equals: '?'! !

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:37:39'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:38:04' prior: 50870792!
asRot13
	
	self = '' ifTrue:[^''].
	self = ' ' ifTrue:[^' '].
	self = '?' ifTrue:[^'?'].
	(self first asciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	^(Character asciiValue: (self first asciiValue + 13)) asString ! !

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:38:07'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:38:07'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:38:07'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:38:07'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:38:07'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:38:07'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 21:38:07'!
PASSED!

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 21:38:07'!
PASSED!

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:38:07'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:46:34' prior: 50870827!
asRot13
	
	self = '' ifTrue:[^''].
	($a asciiValue <= self first ascii value and:[$z asciiValue >= self first ascii value])
	ifTrue:[
	(self first asciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	(self first asciiValue) < $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	^(Character asciiValue: (self first asciiValue + 13)) asString 
	]! !

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:46:54'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:47:14' prior: 50870858!
asRot13
	
	self = '' ifTrue:[^''].
	($a asciiValue <= self first asciiValue and:[$z asciiValue >= self first ascii value])
	ifTrue:[
	(self first asciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	(self first asciiValue) < $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	^(Character asciiValue: (self first asciiValue + 13)) asString 
	]! !
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:47:21' prior: 50870877!
asRot13
	
	self = '' ifTrue:[^''].
	($a asciiValue <= self first asciiValue and:[$z asciiValue >= self first asciiValue])
	ifTrue:[
	(self first asciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	(self first asciiValue) < $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	^(Character asciiValue: (self first asciiValue + 13)) asString 
	]! !

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:47:23'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:47:23'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:47:23'!
FAILURE!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:47:23'!
FAILURE!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:47:23'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:47:23'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 21:47:23'!
PASSED!

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 21:47:23'!
PASSED!

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:47:23'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:48:10' prior: 50870894!
asRot13
	
	self = '' ifTrue:[^''].
	($a asciiValue <= self first asciiValue and:[$z asciiValue >= self first asciiValue])
	ifTrue:[
	(self first asciiValue) >= $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	(self first asciiValue) < $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	^(Character asciiValue: (self first asciiValue + 13)) asString 
	]! !

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:48:13'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:48:13'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:48:13'!
FAILURE!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:48:13'!
FAILURE!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:48:13'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:48:13'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 21:48:13'!
FAILURE!

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 21:48:13'!
PASSED!

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:48:13'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:48:35'!
FAILURE!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:48:44'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:49:06' prior: 50870931!
asRot13
	
	self = '' ifTrue:[^''].
	($a asciiValue <= self first asciiValue and:[$z asciiValue >= self first asciiValue])
	ifTrue:[
	(self first asciiValue) >= $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	(self first asciiValue) < $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue + 13)) asString]. 
	^(Character asciiValue: (self first asciiValue + 13)) asString 
	]! !

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:49:10'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:49:10'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:49:10'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:49:10'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:49:10'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:49:10'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 21:49:10'!
FAILURE!

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 21:49:10'!
PASSED!

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:49:10'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 21:49:10'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:49:47' prior: 50870972!
asRot13
	
	self = '' ifTrue:[^''].
	($a asciiValue <= self first asciiValue and:[$z asciiValue >= self first asciiValue])
	ifTrue:[
	(self first asciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	(self first asciiValue) <= $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue + 13)) asString]. 
	^(Character asciiValue: (self first asciiValue + 13)) asString 
	]! !

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:49:51'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:49:51'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:49:51'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:49:51'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:49:51'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:49:51'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 21:49:51'!
PASSED!

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 21:49:51'!
PASSED!

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:49:51'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:52:49' prior: 50871011!
asRot13
	
	self = '' ifTrue:[^''].
	($a asciiValue <= self first asciiValue and:[$z asciiValue >= self first asciiValue])
	ifTrue:[
	| firstAsciiValue |
	firstAsciiValue _ self first asciiValue.
	(firstAsciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]. 
	(self first asciiValue) <= $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue + 13)) asString]. 
	^(Character asciiValue: (self first asciiValue + 13)) asString 
	]! !
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:53:31' prior: 50871047!
asRot13
	
	self = '' ifTrue:[^''].
	($a asciiValue <= self first asciiValue and:[$z asciiValue >= self first asciiValue])
	ifTrue:[
	| firstAsciiValue |
	firstAsciiValue _ self first asciiValue.
	(firstAsciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString]. 
	(firstAsciiValue) <= $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue + 13)) asString]. 
	^(Character asciiValue: (firstAsciiValue + 13)) asString 
	]! !
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:55:34' prior: 50871065!
asRot13
	| firstAsciiValue |
	self = '' ifTrue:[^''].
	firstAsciiValue _ self first asciiValue.
	($a asciiValue <= firstAsciiValue and:[$z asciiValue >= firstAsciiValue])
	ifTrue:[
	(firstAsciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString]. 
	(firstAsciiValue) <= $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue + 13)) asString]. 
	^(Character asciiValue: (firstAsciiValue + 13)) asString 
	]! !
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 21:56:44' prior: 50871083!
asRot13
	| firstAsciiValue |
	self = '' ifTrue:[^''].
	firstAsciiValue _ self first asciiValue.
	($a asciiValue <= firstAsciiValue and:[$z asciiValue >= firstAsciiValue])
	ifTrue:[
		(firstAsciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString]. 
		(firstAsciiValue) <= $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue + 13)) asString]. 
		^(Character asciiValue: (firstAsciiValue + 13)) asString 
	]! !

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:56:48'!
PASSED!

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 21:56:48'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 21:56:48'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 21:56:48'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 21:56:48'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 21:56:48'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 21:56:48'!
PASSED!

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 21:56:48'!
PASSED!

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 21:56:48'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 21:58:21'!
tests09

	self assert: 'A' asRot13 equals: 'M'! !

!testRun: #Rot13Test #tests09 stamp: 'LEC 5/6/2021 21:58:23'!
FAILURE!
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 21:59:48'!
tests10

	self assert: 'M' asRot13 equals: 'A'! !

!testRun: #Rot13Test #tests10 stamp: 'LEC 5/6/2021 21:59:49'!
FAILURE!
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 22:01:12' prior: 50871143!
tests10

	self assert: 'N' asRot13 equals: 'A'! !
!Rot13Test methodsFor: 'testing' stamp: 'LEC 5/6/2021 22:01:16' prior: 50871137!
tests09

	self assert: 'A' asRot13 equals: 'N'! !

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 22:01:35'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 22:01:35'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 22:01:35'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 22:01:35'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 22:01:35'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 22:01:35'!
PASSED!

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 22:01:35'!
PASSED!

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 22:01:36'!
PASSED!

!testRun: #Rot13Test #tests09 stamp: 'LEC 5/6/2021 22:01:36'!
FAILURE!

!testRun: #Rot13Test #tests10 stamp: 'LEC 5/6/2021 22:01:36'!
FAILURE!

!testRun: #Rot13Test #tests09 stamp: 'LEC 5/6/2021 22:01:38'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 22:02:27' prior: 50871100!
asRot13
	| firstAsciiValue |
	self = '' ifTrue:[^''].
	self = 'A' ifTrue:[^'N'].
	self = 'N' ifTrue:[^'A'].
	firstAsciiValue _ self first asciiValue.
	($a asciiValue <= firstAsciiValue and:[$z asciiValue >= firstAsciiValue])
	ifTrue:[
		(firstAsciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString]. 
		(firstAsciiValue) <= $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue + 13)) asString]. 
		^(Character asciiValue: (firstAsciiValue + 13)) asString 
	]! !

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 22:02:37'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 22:02:37'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 22:02:37'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 22:02:37'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 22:02:37'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 22:02:37'!
PASSED!

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 22:02:37'!
PASSED!

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 22:02:37'!
PASSED!

!testRun: #Rot13Test #tests09 stamp: 'LEC 5/6/2021 22:02:37'!
PASSED!

!testRun: #Rot13Test #tests10 stamp: 'LEC 5/6/2021 22:02:37'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'LEC 5/6/2021 22:05:44' prior: 50871184!
asRot13
	| firstAsciiValue |
	self = '' ifTrue:[^''].
	firstAsciiValue _ self first asciiValue.
	($A asciiValue <= firstAsciiValue and:[$Z asciiValue >= firstAsciiValue])
	ifTrue:[
		(firstAsciiValue) > $M asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString]. 
		(firstAsciiValue) <= $M asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue + 13)) asString]. 
		^(Character asciiValue: (firstAsciiValue + 13)) asString 
	].
	($a asciiValue <= firstAsciiValue and:[$z asciiValue >= firstAsciiValue])
	ifTrue:[
		(firstAsciiValue) > $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString]. 
		(firstAsciiValue) <= $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue + 13)) asString]. 
		^(Character asciiValue: (firstAsciiValue + 13)) asString 
	]! !

!testRun: #Rot13Test #tests01 stamp: 'LEC 5/6/2021 22:05:55'!
PASSED!

!testRun: #Rot13Test #tests02 stamp: 'LEC 5/6/2021 22:05:55'!
PASSED!

!testRun: #Rot13Test #tests03 stamp: 'LEC 5/6/2021 22:05:55'!
PASSED!

!testRun: #Rot13Test #tests04 stamp: 'LEC 5/6/2021 22:05:55'!
PASSED!

!testRun: #Rot13Test #tests05 stamp: 'LEC 5/6/2021 22:05:55'!
PASSED!

!testRun: #Rot13Test #tests06 stamp: 'LEC 5/6/2021 22:05:55'!
PASSED!

!testRun: #Rot13Test #tests07 stamp: 'LEC 5/6/2021 22:05:55'!
PASSED!

!testRun: #Rot13Test #tests08 stamp: 'LEC 5/6/2021 22:05:55'!
PASSED!

!testRun: #Rot13Test #tests09 stamp: 'LEC 5/6/2021 22:05:55'!
PASSED!

!testRun: #Rot13Test #tests10 stamp: 'LEC 5/6/2021 22:05:56'!
PASSED!

----STARTUP---- (10 May 2021 17:12:26) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


TestCase subclass: #DecimalToStringRomanNumberConvertionTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman-Numbers-Integrationl'!

!classDefinition: #DecimalToStringRomanNumberConvertionTests category: 'Roman-Numbers-Integrationl' stamp: 'LEC 5/10/2021 17:21:30'!
TestCase subclass: #DecimalToStringRomanNumberConvertionTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman-Numbers-Integrationl'!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'no messages' stamp: 'LEC 5/10/2021 17:22:12'!
tests01


	self assert: 1 asRomanString equals: 'I'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:22:17'!
ERROR!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:23:08'!
asRomanString
	self shouldBeImplemented.! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:23:23' prior: 50871303!
asRomanString
	 ^'I'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:23:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:23:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:23:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:23:31'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:27:41'!
tests02


	self assert: 2 asRomanString equals: 'II'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 17:27:42'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:28:46' prior: 50871308!
asRomanString
	 ^self = 2 ifTrue:[^'II']
	  ^ 'I'! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:28:57' prior: 50871335!
asRomanString
	self = 2 ifTrue:[^'II']. 
	^ 'I'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 17:29:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:29:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 17:29:02'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:30:33' prior: 50871326!
tests02


	self assert: 3 asRomanString equals: 'III'! !
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:30:41' prior: 50871356!
tests02


	self assert: 2 asRomanString equals: 'II'! !
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:30:47'!
tests03


	self assert: 3 asRomanString equals: 'III'! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:31:02' prior: 50871340!
asRomanString
	self = 2 ifTrue:[^'II']. 
	self = 3 ifTrue:[^'III']. 
	^ 'I'! !
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:33:10'!
tests04


	self assert: 3 asRomanString equals: 'III'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:33:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 17:33:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 17:33:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:33:14'!
PASSED!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:35:05' prior: 50871373!
asRomanString
	^String streamContents: [:stream|
		self timesRepeat: [stream nextPut: $I]]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:35:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 17:35:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 17:35:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:35:20'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:39:12' prior: 50871379!
tests04


	self assert: 4 asRomanString equals: 'IV'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:39:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 17:39:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 17:39:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:39:25'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:39:25'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:40:05' prior: 50871397!
asRomanString
	^String streamContents: [:stream|
		self = 4 ifTrue:[^'IV'].
		self timesRepeat: [stream nextPut: $I]]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:40:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:40:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 17:40:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 17:40:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:40:28'!
PASSED!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:40:58' prior: 50871439!
asRomanString
	self = 4 ifTrue:[^'IV'].
	^String streamContents: [:stream|
		
		self timesRepeat: [stream nextPut: $I]]! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:44:53' prior: 50871463!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[stream nextPut: $I].
		self = 4 ifTrue:[stream nextPut: 'IV'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:44:57'!
ERROR!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:45:42' prior: 50871471!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat:[ stream nextPut: $I]].
		self = 4 ifTrue:[stream nextPut: 'IV'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:45:45'!
ERROR!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:46:35' prior: 50871483!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat:[ stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPut: 'IV'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:46:39'!
ERROR!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:47:20' prior: 50871495!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat:[ stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPut: 'IV'].
		self = 5 ifTrue:[stream nextPut: 'V'].
		]! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:47:45' prior: 50871507!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat:[stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPut: 'IV'].
		self = 5 ifTrue:[stream nextPut: 'V'].
		]! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:48:08' prior: 50871517!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPut: 'IV'].
		self = 5 ifTrue:[stream nextPut: 'V'].
		]! !
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:48:46'!
tests05


	self assert: 5 asRomanString equals: 'V'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 17:48:47'!
ERROR!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:49:04' prior: 50871527!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPut: 'IV'].
		self = 5 ifTrue:[stream nextPut: 'V'].
		]! !
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:51:00'!
tests06


	self assert: 6 asRomanString equals: 'VI'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 17:51:01'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:51:37' prior: 50871547!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPut: 'IV'].
		self = 5 ifTrue:[stream nextPut: 'V'].
		self = 6 ifTrue:[stream nextPut: 'V'I].
		]! !
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:52:57'!
tests07


	self assert: 7 asRomanString equals: 'VII'! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:53:28' prior: 50871567!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPut: 'IV'].
		self = 5 ifTrue:[stream nextPut: 'V'].
		self = 6 ifTrue:[stream nextPut: 'VI'].
		self = 7 ifTrue:[stream nextPut: 'VII'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 17:53:32'!
ERROR!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:54:16' prior: 50871584!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		self = 5 ifTrue:[stream nextPutAll: 'V'].
		self = 6 ifTrue:[stream nextPutAll: 'VI'].
		self = 7 ifTrue:[stream nextPutAll: 'VII'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 17:54:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:54:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 17:54:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 17:54:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:54:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 17:54:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 17:54:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 17:54:31'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:54:54'!
tests08


	self assert: 8 asRomanString equals: 'VIII'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 17:55:04'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:55:42' prior: 50871600!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		self = 5 ifTrue:[stream nextPutAll: 'V'].
		self = 6 ifTrue:[stream nextPutAll: 'VI'].
		self = 7 ifTrue:[stream nextPutAll: 'VII'].
		self = 8 ifTrue:[stream nextPutAll: 'VIII'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 17:56:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 17:56:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 17:56:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 17:56:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 17:56:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 17:56:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 17:56:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 17:56:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 17:56:04'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 17:57:00'!
tests09


	self assert: 9 asRomanString equals: 'IX'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 17:57:02'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 17:57:23' prior: 50871649!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		self = 5 ifTrue:[stream nextPutAll: 'V'].
		self = 6 ifTrue:[stream nextPutAll: 'VI'].
		self = 7 ifTrue:[stream nextPutAll: 'VII'].
		self = 8 ifTrue:[stream nextPutAll: 'VIII'].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		]! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:01:08' prior: 50871702!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[self timesRepeat: ['V', stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:01:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:01:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:01:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:01:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:01:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:01:10'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:01:10'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:01:10'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:01:10'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:01:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:01:15'!
ERROR!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:02:07' prior: 50871718!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:['V', self timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:02:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:02:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:02:11'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:02:11'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:02:11'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:02:11'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:02:11'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:02:11'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:02:11'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:02:11'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:02:12'!
ERROR!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:03:56' prior: 50871767!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:04:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:04:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:04:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:04:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:04:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:04:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:04:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:04:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:04:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:04:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:04:10'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:09:17'!
tests010


	self assert: 10 asRomanString equals: 'X'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:09:19'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:09:49' prior: 50871816!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		self = 10 ifTrue:[stream nextPutAll: 'X'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:10:05'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:10:36' prior: 50871866!
tests010


	self assert: 11 asRomanString equals: 'XI'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:10:38'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:11:07' prior: 50871875!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		self = 10 ifTrue:[stream nextPutAll: 'X'].
		self = 11 ifTrue:[stream nextPutAll: 'XI'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:11:09'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:11:21'!
tests011


	self assert: 11 asRomanString equals: 'XI'! !
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:11:30' prior: 50871927!
tests010


	self assert: 10 asRomanString equals: 'X'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:11:32'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:11:51'!
tests012


	self assert: 12 asRomanString equals: 'XII'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:12:02'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:12:26' prior: 50871936!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		self = 10 ifTrue:[stream nextPutAll: 'X'].
		self = 11 ifTrue:[stream nextPutAll: 'XI'].
		self = 12 ifTrue:[stream nextPutAll: 'XII'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:12:28'!
PASSED!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:15:38' prior: 50872049!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between:10 and: 13) ifTrue:[stream nextPut: $X. 
			(self - 13) timesRepeat: [stream nextPut: $I].].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:15:42'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:16:09' prior: 50872110!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between:10 and: 13) ifTrue:[stream nextPut: $X. 
			(self - 10) timesRepeat: [stream nextPut: $I].].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:16:13'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:19:09'!
tests013


	self assert: 14 asRomanString equals: 'XIV'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:19:11'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:19:40' prior: 50872131!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between:10 and: 13) ifTrue:[stream nextPut: $X. 
			(self - 10) timesRepeat: [stream nextPut: $I].].
		self = 14 ifTrue:[stream nextPutAll: 'XIV'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:20:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:20:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:20:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:20:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:20:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:20:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:20:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:20:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:20:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:20:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:20:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:20:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:20:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:20:06'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:21:13'!
tests014


	self assert: 14 asRomanString equals: 'XV'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:21:16'!
FAILURE!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:21:32' prior: 50872265!
tests014


	self assert: 15 asRomanString equals: 'XV'! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:22:13' prior: 50872200!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between:10 and: 13) ifTrue:[stream nextPut: $X. 
			(self - 10) timesRepeat: [stream nextPut: $I].].
		self = 14 ifTrue:[stream nextPutAll: 'XIV'].
		(self between:15 and: 18) ifTrue:[stream nextPutAll: 'XV'. 
			(self - 15) timesRepeat: [stream nextPut: $I].].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:22:16'!
FAILURE!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:22:33' prior: 50872275!
tests014


	self assert: 15 asRomanString equals: 'XV'! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:22:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:22:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:22:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:22:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:22:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:22:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:22:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:22:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:22:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:22:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:22:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:22:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:22:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:22:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:22:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:24:14'!
PASSED!

SmallInteger!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:38:52'!
number: aNumber between: aFirstNumber and: aSecondNumber withRomanNumber: aRomanNumber xxx:aSecondRomanNumber withStream: stream

	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].
		(self between:aFirstNumber and: aSecondNumber ) ifTrue:[stream nextPut: aSecondRomanNumber . 
			(self - aFirstNumber) timesRepeat: [stream nextPut: $I].].
		! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:40:42' prior: 50872281!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between:10 and: 13) ifTrue:[stream nextPut: $X. 
			(self - 10) timesRepeat: [stream nextPut: $I].].
		self number:14 between: 15 and: 18 withRomanNumber:'XIV' xxx:'XV' withStream: stream .
		]! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LEC 5/10/2021 18:40:44'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'LEC 5/10/2021 18:40:44'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'LEC 5/10/2021 18:40:44'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'LEC 5/10/2021 18:40:44'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'LEC 5/10/2021 18:40:44'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'LEC 5/10/2021 18:40:44'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'LEC 5/10/2021 18:40:44'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'LEC 5/10/2021 18:40:44'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'LEC 5/10/2021 18:40:44'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'LEC 5/10/2021 18:40:44'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'LEC 5/10/2021 18:40:44'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'LEC 5/10/2021 18:40:44'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:40:54' prior: 50872307!
tests014


	self assert: 15 asRomanString equals: 'XV'
! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:40:54'!
ERROR!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:41:08' prior: 50872410!
number: aNumber between: aFirstNumber and: aSecondNumber withRomanNumber: aRomanNumber xxx:aSecondRomanNumber withStream: stream

	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].
		(self between:aFirstNumber and: aSecondNumber ) ifTrue:[stream nextPutAll: aSecondRomanNumber . 
			(self - aFirstNumber) timesRepeat: [stream nextPut: $I].].
		! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:41:12'!
PASSED!

15!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:48:56'!
number: aNumber  withRomanNumber: aRomanNumber xxx:aSecondRomanNumber withStream: stream

	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].
		(self between: aNumber + 1 and: aNumber +4 ) ifTrue:[stream nextPutAll: aSecondRomanNumber . 
			(self - aNumber + 1) timesRepeat: [stream nextPut: $I].].
		! !
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:49:09' prior: 50872425!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between:10 and: 13) ifTrue:[stream nextPut: $X. 
			(self - 10) timesRepeat: [stream nextPut: $I].].
		self number:14 withRomanNumber:'XIV' xxx:'XV' withStream: stream .
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:49:19'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:49:38' prior: 50872549!
number: aNumber  withRomanNumber: aRomanNumber xxx:aSecondRomanNumber withStream: stream

	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].
		(self between: aNumber + 1 and: aNumber +4 ) ifTrue:[stream nextPutAll: aSecondRomanNumber . 
			(self - (aNumber + 1)) timesRepeat: [stream nextPut: $I].].
		! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:49:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:49:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:49:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:49:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:49:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:49:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:49:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:49:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:49:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:49:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:49:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:49:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:49:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:49:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:49:43'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:53:09'!
tests015


	self assert: 19 asRomanString equals: 'XIX'
! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:53:10'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:54:31' prior: 50872562!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between:10 and: 13) ifTrue:[stream nextPut: $X. 
			(self - 10) timesRepeat: [stream nextPut: $I].].
		self number:14 withRomanNumber:'XIV' xxx:'XV' withStream: stream .
		self number:19 withRomanNumber:'XIX' xxx:'XX' withStream: stream .
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:54:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:54:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:54:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:54:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:54:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:54:36'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:54:42' prior: 50872648!
tests015


	self assert: 20 asRomanString equals: 'XX'
! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:54:44'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 18:54:53' prior: 50872732!
tests015


	self assert: 19 asRomanString equals: 'XIX'
! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:54:55'!
PASSED!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:58:52' prior: 50872657!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between:5 and: 8) ifTrue:[stream nextPut: $V. 
			(self - 5) timesRepeat: [stream nextPut: $I].].
		self number:9 withRomanNumber:'IX' xxx:'X' withStream: stream .
		self number:14 withRomanNumber:'XIV' xxx:'XV' withStream: stream .
		self number:19 withRomanNumber:'XIX' xxx:'XX' withStream: stream .
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:58:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:58:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:58:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:58:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:58:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:58:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:58:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:58:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:58:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:58:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:58:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:58:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:58:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:58:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:58:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:58:57'!
PASSED!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 18:59:36' prior: 50872848!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self number:4 withRomanNumber:'IV' xxx:'V' withStream: stream .
		self number:9 withRomanNumber:'IX' xxx:'X' withStream: stream .
		self number:14 withRomanNumber:'XIV' xxx:'XV' withStream: stream .
		self number:19 withRomanNumber:'XIX' xxx:'XX' withStream: stream .
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 18:59:41'!
PASSED!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 19:03:58'!
number: aNumber  withRomanNumber: aRomanNumber secondRomanNumber:aSecondRomanNumber withStream: stream

	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].
		(self between: aNumber + 1 and: aNumber +4 ) ifTrue:[stream nextPutAll: aSecondRomanNumber . 
			(self - (aNumber + 1)) timesRepeat: [stream nextPut: $I].].
		! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 19:03:58' prior: 50872919!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self number:4 withRomanNumber:'IV' secondRomanNumber:'V' withStream: stream .
		self number:9 withRomanNumber:'IX' secondRomanNumber:'X' withStream: stream .
		self number:14 withRomanNumber:'XIV' secondRomanNumber:'XV' withStream: stream .
		self number:19 withRomanNumber:'XIX' secondRomanNumber:'XX' withStream: stream .
		]! !

!methodRemoval: SmallInteger #number:withRomanNumber:xxx:withStream: stamp: 'LEC 5/10/2021 19:03:58'!
number: aNumber  withRomanNumber: aRomanNumber xxx:aSecondRomanNumber withStream: stream

	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].
		(self between: aNumber + 1 and: aNumber +4 ) ifTrue:[stream nextPutAll: aSecondRomanNumber . 
			(self - (aNumber + 1)) timesRepeat: [stream nextPut: $I].].
		!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 19:06:59'!
tests016


	self assert: 24 asRomanString equals: 'XXIV'
! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests016 stamp: 'LEC 5/10/2021 19:07:06'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests016 stamp: 'LEC 5/10/2021 19:07:21'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 19:08:18' prior: 50873001!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self number:4 withRomanNumber:'IV' secondRomanNumber:'V' withStream: stream .
		self number:9 withRomanNumber:'IX' secondRomanNumber:'X' withStream: stream .
		self number:14 withRomanNumber:'XIV' secondRomanNumber:'XV' withStream: stream .
		self number:19 withRomanNumber:'XIX' secondRomanNumber:'XX' withStream: stream .
		self number:24 withRomanNumber:'XXIV' secondRomanNumber:'XXV' withStream: stream .
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests016 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests016 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 19:08:20'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 19:10:16'!
tests017


	self assert: 29 asRomanString equals: 'IXXX'
! !
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 19:10:25' prior: 50873120!
tests017


	self assert: 29 asRomanString equals: 'XXIX'
! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests017 stamp: 'LEC 5/10/2021 19:10:30'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 19:11:00' prior: 50873044!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self number:4 withRomanNumber:'IV' secondRomanNumber:'V' withStream: stream .
		self number:9 withRomanNumber:'IX' secondRomanNumber:'X' withStream: stream .
		self number:14 withRomanNumber:'XIV' secondRomanNumber:'XV' withStream: stream .
		self number:19 withRomanNumber:'XIX' secondRomanNumber:'XX' withStream: stream .
		self number:24 withRomanNumber:'XXIV' secondRomanNumber:'XXV' withStream: stream .
		self number:29 withRomanNumber:'XXIX' secondRomanNumber:'XXX' withStream: stream .
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests017 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests016 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests017 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 19:11:03'!
PASSED!
!DecimalToStringRomanNumberConvertionTests methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 19:18:15'!
tests018


	self assert: 34 asRomanString equals: 'XXXIV'
! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests018 stamp: 'LEC 5/10/2021 19:18:17'!
FAILURE!
!SmallInteger methodsFor: '*Roman-Number-Integration' stamp: 'LEC 5/10/2021 19:19:01' prior: 50873135!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self number:4 withRomanNumber:'IV' secondRomanNumber:'V' withStream: stream .
		self number:9 withRomanNumber:'IX' secondRomanNumber:'X' withStream: stream .
		self number:14 withRomanNumber:'XIV' secondRomanNumber:'XV' withStream: stream .
		self number:19 withRomanNumber:'XIX' secondRomanNumber:'XX' withStream: stream .
		self number:24 withRomanNumber:'XXIV' secondRomanNumber:'XXV' withStream: stream .
		self number:29 withRomanNumber:'XXIX' secondRomanNumber:'XXX' withStream: stream .
		self number:34 withRomanNumber:'XXXIV' secondRomanNumber:'XXXV' withStream: stream .
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTests #tests018 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests01 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests010 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests011 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests012 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests013 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests014 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests015 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests016 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests017 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests018 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests02 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests03 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests04 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests05 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests06 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests07 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests08 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTests #tests09 stamp: 'LEC 5/10/2021 19:19:03'!
PASSED!

!classRemoval: #DecimalToStringRomanNumberConvertionTests stamp: 'LEC 5/10/2021 20:15:57'!
TestCase subclass: #DecimalToStringRomanNumberConvertionTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman-Numbers-Integrationl'!

----End fileIn of \Users\castr\Desktop\windows64\Roman-Numbers-Integration.pck.st----!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 20:17:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 20:17:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 20:17:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 20:17:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 20:17:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 20:17:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 20:17:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 20:17:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 20:17:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 20:17:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 20:17:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 20:17:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 20:17:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 20:17:09'!
PASSED!

!methodRemoval: SmallInteger #asRomanString stamp: 'LEC 5/10/2021 20:19:17'!
asRomanString
	
	^String streamContents: [:stream|
		(self between:1 and: 3) ifTrue:[self timesRepeat: [stream nextPut: $I].].
		self number:4 withRomanNumber:'IV' secondRomanNumber:'V' withStream: stream .
		self number:9 withRomanNumber:'IX' secondRomanNumber:'X' withStream: stream .
		self number:14 withRomanNumber:'XIV' secondRomanNumber:'XV' withStream: stream .
		self number:19 withRomanNumber:'XIX' secondRomanNumber:'XX' withStream: stream .
		self number:24 withRomanNumber:'XXIV' secondRomanNumber:'XXV' withStream: stream .
		self number:29 withRomanNumber:'XXIX' secondRomanNumber:'XXX' withStream: stream .
		self number:34 withRomanNumber:'XXXIV' secondRomanNumber:'XXXV' withStream: stream .
		]!

!methodRemoval: SmallInteger #number:between:and:withRomanNumber:xxx:withStream: stamp: 'LEC 5/10/2021 20:19:17'!
number: aNumber between: aFirstNumber and: aSecondNumber withRomanNumber: aRomanNumber xxx:aSecondRomanNumber withStream: stream

	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].
		(self between:aFirstNumber and: aSecondNumber ) ifTrue:[stream nextPutAll: aSecondRomanNumber . 
			(self - aFirstNumber) timesRepeat: [stream nextPut: $I].].
		!

!methodRemoval: SmallInteger #number:withRomanNumber:secondRomanNumber:withStream: stamp: 'LEC 5/10/2021 20:19:17'!
number: aNumber  withRomanNumber: aRomanNumber secondRomanNumber:aSecondRomanNumber withStream: stream

	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].
		(self between: aNumber + 1 and: aNumber +4 ) ifTrue:[stream nextPutAll: aSecondRomanNumber . 
			(self - (aNumber + 1)) timesRepeat: [stream nextPut: $I].].
		!

!classRemoval: #DecimalToStringRomanNumberConvertionTest stamp: 'LEC 5/10/2021 20:22:59'!
TestCase subclass: #DecimalToStringRomanNumberConvertionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman-Numbers-Integration'!

----End fileIn of \Users\castr\Desktop\windows64\Roman-Numbers-Integration.pck.st----!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 20:24:19' prior: 50873679!
test15

	self assert: 34 asRomanString equals: 'XXXIV'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 20:24:20'!
FAILURE!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 20:24:32' prior: 50873710!
test15

	self assert: 19 asRomanString equals: 'XIX'.! !
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'ARM 5/10/2021 20:17:09' prior: 50873719!
test15

	self assert: 19 asRomanString equals: 'XIX'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 20:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 20:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 20:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 20:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 20:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 20:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 20:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 20:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 20:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 20:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 20:24:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 20:24:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 20:24:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 20:24:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 20:24:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 20:24:59'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 20:27:18' prior: 50873684!
asRomanString

	^String streamContents: [ :stream |
		self convertDigitUsing: stream.
		
		self >= 10 ifTrue:[
			stream nextPut: $X.
		(self - 10) convertDigitUsing: stream
		]
	]! !
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 20:27:57'!
test16

	self assert: 20 asRomanString equals: 'XX'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 20:28:01'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 20:28:49' prior: 50873781!
asRomanString

	^String streamContents: [ :stream |
		self convertDigitUsing: stream.
		
		self >= 20 ifTrue:[
			stream nextPut: $X.
		(self - 20) convertDigitUsing: stream
		].
		self >= 10 ifTrue:[
			stream nextPut: $X.
		(self - 10) convertDigitUsing: stream
		]
	
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 20:30:19' prior: 50873800!
asRomanString

	^String streamContents: [ :stream |
		self convertDigitUsing: stream.
		
		
		self >= 10 ifTrue:[
			stream nextPut: $X.
			(self - 10) convertDigitUsing: stream.
		self >= 20 ifTrue:[
			stream nextPut: $X.
		(self - 20) convertDigitUsing: stream
		].
		
		]
	
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 20:30:21'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 20:30:33'!
test17

	self assert: 30 asRomanString equals: 'XXX'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 20:30:36'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 20:31:13'!
FAILURE!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 20:32:03' prior: 50873879!
test17

	self assert: 25 asRomanString equals: 'XXV'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 20:32:04'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 20:32:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 20:32:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 20:32:05'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 20:32:15' prior: 50873892!
test17

	self assert: 30 asRomanString equals: 'XXX'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 20:33:01' prior: 50873812!
asRomanString

	^String streamContents: [ :stream |
		self convertDigitUsing: stream.
		
		
		self >= 10 ifTrue:[
			stream nextPut: $X.
			(self - 10) convertDigitUsing: stream.
		self >= 20 ifTrue:[
			stream nextPut: $X.
		(self - 20) convertDigitUsing: stream
		].
		
		self >= 30 ifTrue:[
			stream nextPut: $X.
		(self - 30) convertDigitUsing: stream
		].
		]
	
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 20:33:06'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 20:35:22'!
test18

	self assert: 40 asRomanString equals: 'XL'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 20:35:25'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 20:44:34' prior: 50873961!
asRomanString

	^String streamContents: [ :stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
		(self - 40) convertDigitUsing: stream
		]
		ifFalse:[
		self convertDigitUsing: stream.
		
		
		self >= 10 ifTrue:[
			stream nextPut: $X.
			(self - 10) convertDigitUsing: stream.
			].
		self >= 20 ifTrue:[
			stream nextPut: $X.
		(self - 20) convertDigitUsing: stream
		].
		
		self >= 30 ifTrue:[
			stream nextPut: $X.
		(self - 30) convertDigitUsing: stream
		].
		
		
		].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 20:44:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 20:44:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 20:44:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 20:44:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 20:44:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 20:44:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 20:44:43'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 20:54:28' prior: 50874043!
asRomanString
	
	^String streamContents: [ :stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
		(self - 40) convertDigitUsing: stream
		]
		ifFalse:[
		self convertDigitUsing: stream.
		
		
		(self // 10) timesRepeat:[
			stream nextPut: $X.
			self - 10 convertDigitUsing: stream.
		].
		
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 20:54:33'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 21:00:39'!
test19

	self assert: 45 asRomanString equals: 'XLV'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:00:57'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 21:01:16' prior: 50874196!
test19

	self assert: 45 asRomanString equals: 'XLV'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:01:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 21:01:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 21:01:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 21:01:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 21:01:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 21:01:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 21:01:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:01:19'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 21:03:25' prior: 50874266!
test19

	self assert: 35 asRomanString equals: 'XXXV'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:03:27'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:03:54' prior: 50874122!
asRomanString
	
	^String streamContents: [ :stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
		(self - 40) convertDigitUsing: stream
		]
		ifFalse:[
		self convertDigitUsing: stream.
		
		
		(self // 10) timesRepeat:[
			stream nextPut: $X.
			
		].
		(self // 10) - 10 convertDigitUsing: stream.
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:03:57'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:04:04' prior: 50874345!
asRomanString
	
	^String streamContents: [ :stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
		(self - 40) convertDigitUsing: stream
		]
		ifFalse:[
		self convertDigitUsing: stream.
		
		
		(self // 10) timesRepeat:[
			stream nextPut: $X.
			
		].
		(self // 10) convertDigitUsing: stream.
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:04:06'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:05:02' prior: 50874362!
asRomanString
	
	^String streamContents: [ :stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
		(self - 40) convertDigitUsing: stream
		]
		ifFalse:[
		self convertDigitUsing: stream.
		
		
		(self // 10) timesRepeat:[
			stream nextPut: $X.
			
		].
		(self \\ 10) convertDigitUsing: stream.
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 21:05:21'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 21:05:21'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 21:05:21'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 21:05:21'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 21:05:21'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 21:05:21'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 21:05:21'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 21:05:21'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 21:05:21'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:05:21'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:05:33' prior: 50874379!
asRomanString
	
	^String streamContents: [ :stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
		(self - 40) convertDigitUsing: stream
		]
		ifFalse:[
		self convertDigitUsing: stream.
		
		
		(self // 10) timesRepeat:[
			stream nextPut: $X.
			(self \\ 10) convertDigitUsing: stream.
			
		].
		
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:05:35'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:07:58' prior: 50874456!
asRomanString
	
	^String streamContents: [ :stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
		(self - 40) convertDigitUsing: stream
		]
		ifFalse:[
		(self // 10) timesRepeat:[
			stream nextPut: $X.
			(self \\ 10) convertDigitUsing: stream.
			
		].
		
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:08:01'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:08:51' prior: 50874473!
asRomanString
	
	^String streamContents: [ :stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
		(self - 40) convertDigitUsing: stream
		]
		ifFalse:[
		(self // 10) timesRepeat:[
			stream nextPut: $X.
		].
			(self \\ 10) convertDigitUsing: stream.
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:08:54'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 21:09:14'!
test20

	self assert: 50 asRomanString equals: 'L'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:10:28' prior: 50874488!
asRomanString
	
	^String streamContents: [ :stream |
		self >= 40 ifTrue:[
			self >= 50 ifTrue:[
				stream nextPutAll: 'L'.
		(self - 50) convertDigitUsing: stream
				]
				ifFalse:[
					stream nextPutAll: 'XL'.
					(self - 40) convertDigitUsing: stream
		]
		]
		ifFalse:[
		(self // 10) timesRepeat:[
			stream nextPut: $X.
		].
			(self \\ 10) convertDigitUsing: stream.
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test20 stamp: 'LEC 5/10/2021 21:10:30'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 21:10:30'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 21:10:30'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 21:10:30'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 21:10:30'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 21:10:30'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 21:10:30'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 21:10:30'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test20 stamp: 'LEC 5/10/2021 21:10:31'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 21:10:57' prior: 50874564!
test20

	self assert: 60 asRomanString equals: 'LX'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test20 stamp: 'LEC 5/10/2021 21:10:58'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:16:00'!
convertTensUsing: stream

	| tens |
	tens := self // 10.
		(self between: 1 and: 3) ifTrue: [self timesRepeat: [ stream nextPut: $L ]].
		self = 4 ifTrue: [stream nextPutAll: 'XL'].
		(self between: 5 and: 8) ifTrue: [stream nextPutAll: 'L'.
			(self - 5) timesRepeat: [ stream nextPut: $X ] ].
		tens = 9 ifTrue: [stream nextPutAll: 'IC'].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:21:51' prior: 50874569!
asRomanString
	
	^String streamContents: [ :stream |
		self convertTensUsing: stream.
		(self \\ 10) convertDigitUsing: stream.
				
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test20 stamp: 'LEC 5/10/2021 21:21:58'!
FAILURE!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 21:22:08' prior: 50874652!
test20

	self assert: 50 asRomanString equals: 'L'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test20 stamp: 'LEC 5/10/2021 21:22:09'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:27:07'!
xxx: stream unitSymbol: aUnitSymbol fiveSymbol: aFiveSymbol tensSymbol: aTensSymbol

		(self between: 1 and: 3) ifTrue: [self timesRepeat: [ stream nextPut: aUnitSymbol ]].
		self = 4 ifTrue: [stream nextPut: aUnitSymbol. stream nextPut: aFiveSymbol ].
		(self between: 5 and: 8) ifTrue: [stream nextPutAll: aFiveSymbol .
			(self - 5) timesRepeat: [ stream nextPut: aUnitSymbol ] ].
		self = 9 ifTrue: [stream nextPut: aUnitSymbol . stream nextPut: aFiveSymbol ].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:27:54' prior: 50874674!
asRomanString
	
	^String streamContents: [ :stream |
		self xxx: stream unitSymbol: 'I' fiveSymbol: 'V' tensSymbol: 'X'
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test20 stamp: 'LEC 5/10/2021 21:27:59'!
FAILURE!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 21:28:21' prior: 50874686!
test20

	self assert: 40 asRomanString equals: 'XL'.! !

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'LEC 5/10/2021 21:28:23'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'LEC 5/10/2021 21:28:24'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'LEC 5/10/2021 21:28:25'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'LEC 5/10/2021 21:28:25'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'LEC 5/10/2021 21:28:26'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'LEC 5/10/2021 21:28:26'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'LEC 5/10/2021 21:28:26'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'LEC 5/10/2021 21:28:26'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'LEC 5/10/2021 21:28:26'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'LEC 5/10/2021 21:28:28'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'LEC 5/10/2021 21:28:29'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'LEC 5/10/2021 21:28:41' prior: 50874724!
test20

	self assert: 30 asRomanString equals: 'XXX'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test20 stamp: 'LEC 5/10/2021 21:28:42'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'LEC 5/10/2021 21:28:49'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'LEC 5/10/2021 21:28:49'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'LEC 5/10/2021 21:28:49'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'LEC 5/10/2021 21:28:49'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'LEC 5/10/2021 21:28:49'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'LEC 5/10/2021 21:28:49'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'LEC 5/10/2021 21:28:49'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'LEC 5/10/2021 21:28:49'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'LEC 5/10/2021 21:28:49'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test20 stamp: 'LEC 5/10/2021 21:28:49'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'LEC 5/10/2021 21:29:18' prior: 50874694!
xxx: stream unitSymbol: aUnitSymbol fiveSymbol: aFiveSymbol tensSymbol: aTensSymbol

		(self between: 1 and: 3) ifTrue: [self timesRepeat: [ stream nextPut: aUnitSymbol ]].
		self = 4 ifTrue: [stream nextPut: aUnitSymbol. stream nextPut: aFiveSymbol ].
		(self between: 5 and: 8) ifTrue: [stream nextPutAll: aFiveSymbol .
			(self - 5) timesRepeat: [ stream nextPut: aUnitSymbol ] ].
		self = 9 ifTrue: [stream nextPut: aUnitSymbol . stream nextPut: aFiveSymbol ].! !

----STARTUP---- (18 May 2021 21:39:08) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


!classRemoval: #TurboLaserCannon stamp: 'LEC 5/18/2021 21:39:17'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #HSBlaster stamp: 'LEC 5/18/2021 21:39:17'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Claw stamp: 'LEC 5/18/2021 21:39:18'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Weapon stamp: 'LEC 5/18/2021 21:39:18'!
Object subclass: #Weapon
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TankRover stamp: 'LEC 5/18/2021 21:39:18'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Aluminum3000 stamp: 'LEC 5/18/2021 21:39:19'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Robot stamp: 'LEC 5/18/2021 21:39:19'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #RobotWarsTest stamp: 'LEC 5/18/2021 21:39:20'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: 'aLasserCannon aClaw aBlaster anAttackedAluminum anAttackedTankRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

----End fileIn of \Users\castr\Desktop\windows64\ISW1-2021-1C-1erParcial.st----!

----STARTUP---- (18 May 2021 22:49:44) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


!classRemoval: #TurboLaserCannon stamp: 'LEC 5/18/2021 22:49:54'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #HSBlaster stamp: 'LEC 5/18/2021 22:49:55'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Claw stamp: 'LEC 5/18/2021 22:49:55'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Weapon stamp: 'LEC 5/18/2021 22:49:55'!
Object subclass: #Weapon
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TankRover stamp: 'LEC 5/18/2021 22:49:56'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Aluminum3000 stamp: 'LEC 5/18/2021 22:49:56'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Robot stamp: 'LEC 5/18/2021 22:49:57'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #RobotWarsTest stamp: 'LEC 5/18/2021 22:49:57'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: 'aLasserCannon aClaw aBlaster anAttackedAluminum anAttackedTankRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

----End fileIn of \Users\castr\Desktop\windows64\ISW1-2021-1C-1erParcial.st----!

----SNAPSHOT----(18 May 2021 22:57:10) CuisUniversity-4532.image priorSource: 17243629!

----SNAPSHOT----(19 May 2021 00:29:07) CuisUniversity-4532.image priorSource: 17449387!

----STARTUP---- (20 May 2021 20:15:19) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


----QUIT----(20 May 2021 21:45:46) CuisUniversity-4532.image priorSource: 17449476!

----STARTUP---- (3 June 2021 19:54:05) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'LEC 6/3/2021 19:54:25'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'prefix stack stackSize auxiliaryReversedStack foundSentences'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-3'!

!classRemoval: #OOStack stamp: 'LEC 6/3/2021 19:54:26'!
Object subclass: #OOStack
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-3'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'LEC 6/3/2021 19:54:27'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-3'!

!classRemoval: #OOStackTest stamp: 'LEC 6/3/2021 19:54:28'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-3'!

!classRemoval: #CustomerBook stamp: 'LEC 6/3/2021 19:54:39'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'LEC 6/3/2021 19:54:40'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook paulMcCartney johnLennon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'LEC 6/3/2021 19:54:41'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'LEC 6/3/2021 19:54:41'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #Fraccion stamp: 'LEC 6/3/2021 19:54:47'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Uno stamp: 'LEC 6/3/2021 19:54:48'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #PositivoMayorAUno stamp: 'LEC 6/3/2021 19:54:49'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Negativo stamp: 'LEC 6/3/2021 19:54:50'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #EnteroMenosCeroYUno stamp: 'LEC 6/3/2021 19:54:50'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Cero stamp: 'LEC 6/3/2021 19:54:51'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Entero stamp: 'LEC 6/3/2021 19:54:51'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Numero stamp: 'LEC 6/3/2021 19:54:52'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #NumeroTest stamp: 'LEC 6/3/2021 19:54:53'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #TurboLaserCannon stamp: 'LEC 6/3/2021 19:55:01'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #HSBlaster stamp: 'LEC 6/3/2021 19:55:02'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Claw stamp: 'LEC 6/3/2021 19:55:02'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Weapon stamp: 'LEC 6/3/2021 19:55:03'!
Object subclass: #Weapon
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TankRover stamp: 'LEC 6/3/2021 19:55:04'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Aluminum3000 stamp: 'LEC 6/3/2021 19:55:05'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Robot stamp: 'LEC 6/3/2021 19:55:05'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #RobotWarsTest stamp: 'LEC 6/3/2021 19:55:06'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: 'aLasserCannon aClaw aBlaster anAttackedAluminum anAttackedTankRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

----QUIT----(3 June 2021 19:55:09) CuisUniversity-4532.image priorSource: 17449669!

----STARTUP---- (3 June 2021 19:56:38) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


----End fileIn of \Users\castr\Desktop\windows64\MarsRover-WithHeading.st----!
!MarsRoverTest methodsFor: 'tests' stamp: 'LEC 6/3/2021 20:05:11' prior: 50331782!
test16

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log = OrderedCollection new.
	marsRover process: 'l'.
	
	self assert: 1@2 equals: log first.
	self assert: log size equals: 1.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'LEC 6/3/2021 20:05:24' prior: 50332188!
test16

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := OrderedCollection new.
	marsRover process: 'l'.
	
	self assert: 1@2 equals: log first.
	self assert: log size equals: 1.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'LEC 6/3/2021 20:09:29' prior: 50332198!
test16

	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindow: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'LEC 6/3/2021 20:13:44'!
test17

	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindow: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'LEC 6/3/2021 20:14:28'!
Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'LEC 6/3/2021 20:14:20' prior: 50332208!
test16

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover process: 'l'.
	
	self assert: 1@2 equals: log first.
	self assert: log size equals: 1.! !

TestCase subclass: #MRLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MRLogTest category: 'MarsRover-WithHeading' stamp: 'LEC 6/3/2021 20:16:28'!
TestCase subclass: #MRLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MRLogTest methodsFor: 'no messages' stamp: 'LEC 6/3/2021 20:16:54'!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover process: 'l'.
	
	self assert: 1@2 equals: log first.
	self assert: log size equals: 1.! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:17:18'!
test02

	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindow: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	! !

!methodRemoval: MarsRoverTest #test16 stamp: 'LEC 6/3/2021 20:17:31'!
test16

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover process: 'l'.
	
	self assert: 1@2 equals: log first.
	self assert: log size equals: 1.!

!methodRemoval: MarsRoverTest #test17 stamp: 'LEC 6/3/2021 20:17:35'!
test17

	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindow: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	!

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/3/2021 20:17:42'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:17:58'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:18:18'!
first
	self shouldBeImplemented.! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:22:31' prior: 50332254!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'l'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:22:36'!
ERROR!
!MarsRover methodsFor: 'Log' stamp: 'LEC 6/3/2021 20:23:03'!
addLog: aLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LEC 6/3/2021 20:24:41'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'Log' stamp: 'LEC 6/3/2021 20:24:39' prior: 50332344!
addLog: aLog 
	
	logs := OrderedCollection with: aLog.! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:24:44'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:24:59'!
currentLogs
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:25:31' prior: 50332363!
currentLogs
	
	^1@2! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:25:33'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:26:16' prior: 50332368!
currentLogs
	
	^OrderedCollection with: 1@2! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:26:31'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:26:31'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:26:31'!
ERROR!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:26:31'!
ERROR!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:27:22'!
test99
	"
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindow: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	"
	! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:28:09' prior: 50332263!
test02

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'll'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: 1@3 equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:28:11'!
ERROR!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:30:29' prior: 50332332!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'l'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:30:45'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:30:48'!
ERROR!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:30:48'!
ERROR!
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/3/2021 20:32:13' prior: 50331887!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand].
	
! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/3/2021 20:33:54' prior: 50331867!
moveEast
	
	position := position + (1@0).
	logs 	add: position! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/3/2021 20:34:10' prior: 50331875!
moveNorth
	
	position := position + (0@1).
	logs 	add: position! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/3/2021 20:34:16' prior: 50331879!
moveSouth
	
	position := position + (0@-1).
	logs 	add: position! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/3/2021 20:34:23' prior: 50331883!
moveWest
	
	position := position + (-1@0).
	logs 	add: position! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/3/2021 20:35:11' prior: 50331821!
headNorth
	
	head := MarsRoverHeadingNorth new
	! !

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:35:30'!
ERROR!

Object subclass: #Log
	instanceVariableNames: 'currentLogs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'LEC 6/3/2021 20:37:12'!
Object subclass: #Log
	instanceVariableNames: 'currentLogs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!methodRemoval: Log #first stamp: 'LEC 6/3/2021 20:37:32'!
first
	self shouldBeImplemented.!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:37:54' overrides: 16896425!
initialize

	currentLogs := OrderedCollection new.! !
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:38:03' prior: 50332374!
currentLogs
	
	^currentLogs ! !

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:38:11'!
ERROR!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:38:11'!
ERROR!
!MarsRover methodsFor: 'Log' stamp: 'LEC 6/3/2021 20:38:50' prior: 50332356!
addLog: aLog 
	
	logs := aLog.! !

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:38:59'!
ERROR!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:38:59'!
ERROR!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:40:18' prior: 50332412!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:40:27' prior: 50332500!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'f'.
	
	
	self assert: 2@1 equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:40:28'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:41:06'!
add: aLog

	currentLogs add: aLog! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:41:10'!
FAILURE!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:41:10'!
FAILURE!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:41:20' prior: 50332511!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:41:21'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:41:21'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:41:21'!
ERROR!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/3/2021 20:41:22'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:41:22'!
ERROR!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:41:29'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:41:32'!
ERROR!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:41:32'!
ERROR!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:41:42' prior: 50332397!
test02

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'ff'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: 1@3 equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:41:49'!
PASSED!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:42:34' prior: 50332561!
test02

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'ffb'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: 1@3 equals: log currentLogs second.
	self assert: 1@2 equals: log currentLogs third.
	self assert: log currentLogs size equals: 3.
	! !

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:42:39'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:42:39'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:42:39'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/3/2021 20:42:39'!
PASSED!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:44:43'!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'l'.
	
	
	self assert: 'Oeste' equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.
	! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/3/2021 20:44:45'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/3/2021 20:45:39' prior: 50331829!
headWest
	
	head := MarsRoverHeadingWest new.
	logs add:'West'! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:45:51' prior: 50332599!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'l'.
	
	
	self assert: 'West' equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.
	! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/3/2021 20:45:53'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:45:53'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:45:53'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/3/2021 20:45:53'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/3/2021 20:45:53'!
PASSED!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:46:01' prior: 50332617!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'll'.
	
	
	self assert: 'West' equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.
	! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:46:29' prior: 50332639!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentLogs second.
	self assert: 'Sourth' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/3/2021 20:47:01' prior: 50331825!
headSouth
	
	head := MarsRoverHeadingSouth new.
	logs add: 'South'! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:47:08' prior: 50332650!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentLogs second.
	self assert: 'South' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/3/2021 20:47:09'!
FAILURE!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:47:24' prior: 50332669!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentLogs first.
	self assert: 'South' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/3/2021 20:47:26'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:47:26'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:47:26'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/3/2021 20:47:26'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/3/2021 20:47:26'!
PASSED!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:47:58' prior: 50332684!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'r'.
	
	self assert: 'East' equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.
	! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:48:04'!
test04

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'r'.
	
	self assert: 'East' equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.
	! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:47:24' prior: 50332708!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentLogs first.
	self assert: 'South' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:48:33'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:48:33'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/3/2021 20:48:33'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/3/2021 20:48:33'!
ERROR!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/3/2021 20:48:33'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/3/2021 20:48:33'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/3/2021 20:49:00' prior: 50331817!
headEast
	
	head := MarsRoverHeadingEast new.
	logs add: 'East'! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/3/2021 20:49:22' prior: 50332456!
headNorth
	
	head := MarsRoverHeadingNorth new.
	logs add: 'North'
	! !

!testRun: #MRLogTest #test04 stamp: 'LEC 6/3/2021 20:49:30'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:49:30'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:49:30'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/3/2021 20:49:30'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/3/2021 20:49:30'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/3/2021 20:49:30'!
PASSED!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/3/2021 20:50:44' prior: 50332719!
test04

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.
	log := Log new.
	marsRover addLog: log.
	marsRover process: 'rr'.
	
	self assert: 'North' equals: log currentLogs first.
	self assert: 'East' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !

!testRun: #MRLogTest #test04 stamp: 'LEC 6/3/2021 20:50:45'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/3/2021 20:50:45'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/3/2021 20:50:45'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/3/2021 20:50:46'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/3/2021 20:50:46'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/3/2021 20:50:46'!
PASSED!

----SNAPSHOT----(3 June 2021 20:56:13) CuisUniversity-4532.image priorSource: 5507!

----QUIT----(3 June 2021 21:06:28) CuisUniversity-4532.image priorSource: 36946!

----STARTUP---- (6 June 2021 15:38:28) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


Object subclass: #Log
	instanceVariableNames: 'directionLogs positionLogs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 15:57:33'!
Object subclass: #Log
	instanceVariableNames: 'directionLogs positionLogs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 15:57:42'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 15:57:42'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 15:57:42'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 15:57:42'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 15:57:42'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 15:57:42'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 15:57:48'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 15:57:48'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 15:57:48'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 15:58:33'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 15:58:33'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 15:58:33'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 15:58:36'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 15:58:37'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 15:58:47'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 15:58:47'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 15:58:47'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 15:58:47'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 15:58:47'!
PASSED!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 16:00:03' prior: 50332478 overrides: 16896425!
initialize

	directionLogs := OrderedCollection new.
	positionLogs := OrderedCollection new.! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 16:00:10'!
ERROR!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 16:00:10'!
ERROR!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 16:00:32'!
ERROR!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 16:00:32'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 16:02:53' prior: 50332441!
moveNorth
	
	^position := position + (0@1).
	! !

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/6/2021 16:08:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/6/2021 16:08:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 16:08:16'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 16:08:16'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/6/2021 16:08:17'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/6/2021 16:08:17'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/6/2021 16:08:17'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/6/2021 16:08:17'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/6/2021 16:08:17'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/6/2021 16:08:17'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/6/2021 16:08:17'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/6/2021 16:08:17'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/6/2021 16:08:17'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/6/2021 16:08:17'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/6/2021 16:08:17'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 16:08:21'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 16:08:46' prior: 50332524!
add: aLog

	positionLogs add: aLog! !

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/6/2021 16:08:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/6/2021 16:08:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 16:08:51'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 16:08:51'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/6/2021 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/6/2021 16:08:52'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/6/2021 16:08:52'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/6/2021 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/6/2021 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/6/2021 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/6/2021 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/6/2021 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/6/2021 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/6/2021 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/6/2021 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 16:08:57'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 16:09:28' prior: 50332483!
currentLogs
	
	^positionLogs ! !

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/6/2021 16:09:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/6/2021 16:09:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/6/2021 16:09:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/6/2021 16:09:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/6/2021 16:09:49'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 16:09:53'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 16:11:22' prior: 50332761!
headNorth
	
	head := MarsRoverHeadingNorth new.
	"logs add: 'North'"
	! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 16:11:29' prior: 50332663!
headSouth
	
	head := MarsRoverHeadingSouth new.
	"logs add: 'South'"! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 16:11:36' prior: 50332612!
headWest
	
	head := MarsRoverHeadingWest new.
	"logs add:'West'"! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 16:11:44' prior: 50332756!
headEast
	
	head := MarsRoverHeadingEast new.
	"logs add: 'East'"! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 16:11:57' prior: 50332436!
moveEast
	
	position := position + (1@0).
	"logs 	add: position"! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 16:12:09' prior: 50332446!
moveSouth
	
	position := position + (0@-1).
	"logs 	add: position"! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 16:12:15' prior: 50332451!
moveWest
	
	position := position + (-1@0).
	"logs 	add: position"! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 16:12:23' prior: 50332884!
moveNorth
	
	position := position + (0@1).
	! !

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/6/2021 16:12:30'!
PASSED!

!classDefinition: #Command category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 16:15:45'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/6/2021 16:15:36' prior: 50331893!
processCommand: aCommand

	self applyCommand: (Command for: aCommand)
	"
	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.
	"! !

Command subclass: #FowardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #FowardCommand category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 16:16:23'!
Command subclass: #FowardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Command subclass: #BackwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #BackwardCommand category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 16:16:32'!
Command subclass: #BackwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Command subclass: #RightCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #RightCommand category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 16:16:42'!
Command subclass: #RightCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Command subclass: #LeftCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LeftCommand category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 16:16:50'!
Command subclass: #LeftCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Command class methodsFor: 'no messages' stamp: 'LEC 6/6/2021 16:19:01'!
for: aCommand

	^self subclasses 
		detect: [ :aCommandClass | aCommandClass canHandle: aCommand ]
		ifFound: [ :aCommandClass | aCommandClass new ]
		ifNone: [ self error: MarsRover ]! !
!Command class methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 16:20:51' prior: 50333152!
for: aCommand

	^self subclasses 
		detect: [ :aCommandClass | aCommandClass canHandle: aCommand ]
		ifFound: [ :aCommandClass | aCommandClass new ]
		ifNone: [ self error: MarsRover invalidCommandErrorDescription ]! !
!MarsRover class methodsFor: 'instance creation' stamp: 'LEC 6/6/2021 16:21:09'!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!Command class methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 16:21:40'!
canHandle: aCommand

	self subclassResponsibility ! !
!BackwardCommand class methodsFor: 'no messages' stamp: 'LEC 6/6/2021 16:22:02' overrides: 50333176!
canHandle: aCommand

	^$b = aCommand! !
!FowardCommand class methodsFor: 'no messages' stamp: 'LEC 6/6/2021 16:22:11' overrides: 50333176!
canHandle: aCommand

	^$f = aCommand! !
!LeftCommand class methodsFor: 'no messages' stamp: 'LEC 6/6/2021 16:22:20' overrides: 50333176!
canHandle: aCommand

	^$l = aCommand! !
!RightCommand class methodsFor: 'no messages' stamp: 'LEC 6/6/2021 16:22:28' overrides: 50333176!
canHandle: aCommand

	^$r = aCommand! !
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/6/2021 16:24:11'!
applyCommand: aCommand

	aCommand actionFor: self
	! !
!BackwardCommand methodsFor: 'no messages' stamp: 'LEC 6/6/2021 16:24:50'!
actionFor: marsRover

	marsRover moveBackward ! !
!FowardCommand methodsFor: 'no messages' stamp: 'LEC 6/6/2021 16:25:28'!
actionFor: marsRover

	marsRover moveForward! !

!classRenamed: #FowardCommand as: #ForwardCommand stamp: 'LEC 6/6/2021 16:25:50'!
Smalltalk renameClassNamed: #FowardCommand as: #ForwardCommand!
!LeftCommand methodsFor: 'no messages' stamp: 'LEC 6/6/2021 16:26:20'!
actionFor: marsRover

	marsRover rotateRight ! !
!LeftCommand methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 16:26:31' prior: 50333218!
actionFor: marsRover

	marsRover rotateLeft! !
!RightCommand methodsFor: 'no messages' stamp: 'LEC 6/6/2021 16:26:43'!
actionFor: marsRover

	marsRover rotateLeft! !

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 16:27:13'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/6/2021 16:27:13'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/6/2021 16:27:13'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/6/2021 16:27:13'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/6/2021 16:27:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 16:27:17'!
FAILURE!

position!
!RightCommand methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 16:28:51' prior: 50333227!
actionFor: marsRover

	marsRover rotateRight! !

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/6/2021 16:28:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/6/2021 16:28:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/6/2021 16:28:58'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 16:30:09'!
ERROR!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 16:30:09'!
ERROR!

----SNAPSHOT----(6 June 2021 16:35:20) CuisUniversity-4532.image priorSource: 37031!

----QUIT----(6 June 2021 17:19:01) CuisUniversity-4532.image priorSource: 53167!

----STARTUP---- (6 June 2021 18:03:00) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!

!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 18:05:04' prior: 50333042!
moveNorth
	
	self changePositionTo: position + (0@1).
	! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 18:05:31'!
changePositionTo: aPosition

	position := aPosition ! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 18:05:58' prior: 50333027!
moveEast
	
	self changePositionTo: position + (1@0).
	! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 18:06:19' prior: 50333032!
moveSouth
	
	self changePositionTo: position + (0@-1).
	! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 18:06:31' prior: 50333037!
moveWest
	
	self changePositionTo: position + (-1@0).
	! !

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/6/2021 18:06:40'!
PASSED!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 18:09:16'!
test05

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.

	marsRover process: 'f'.
	
	self assert: 'North' equals: log currentLogs first.
	self assert: 'East' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 18:09:52' prior: 50332533!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLogPosition: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.! !
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 18:10:02' prior: 50332576!
test02

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLogPosition: log.
	marsRover process: 'ffb'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: 1@3 equals: log currentLogs second.
	self assert: 1@2 equals: log currentLogs third.
	self assert: log currentLogs size equals: 3.
	! !
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 18:10:15' prior: 50332730!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLogDirection: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentLogs first.
	self assert: 'South' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 18:10:23' prior: 50332780!
test04

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.
	log := Log new.
	marsRover addLogDirection: log.
	marsRover process: 'rr'.
	
	self assert: 'North' equals: log currentLogs first.
	self assert: 'East' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:10:30'!
ERROR!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:10:30'!
ERROR!

Object subclass: #MarsRover
	instanceVariableNames: 'position head logsPositions logsDirections'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 18:12:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head logsPositions logsDirections'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!methodRemoval: MarsRover #addLog: stamp: 'LEC 6/6/2021 18:12:42'!
addLog: aLog 
	
	logs := aLog.!
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/6/2021 18:13:31'!
addLogPosition: aLog

	logsPositions add: aLog.

! !
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/6/2021 18:13:53'!
addLogDirection: aLog

	logsDirections add: aLog.

! !
!MarsRover methodsFor: 'initialization' stamp: 'LEC 6/6/2021 18:14:51' prior: 50331812!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading .
	logsPositions := nil.
	logsDirections := nil.! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:15:13'!
ERROR!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:15:13'!
ERROR!
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/6/2021 18:16:21' prior: 50333462!
addLogPosition: aLog

	logsPositions := aLog

! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:16:23'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 18:17:21' prior: 50333325!
changePositionTo: aPosition

	position := aPosition .
	logsPositions isNil ifFalse:[logsPositions add: aPosition ].! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:17:37'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 18:17:37'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:17:41'!
ERROR!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 18:17:41'!
ERROR!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:17:41'!
ERROR!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 18:17:41'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:17:44'!
ERROR!
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/6/2021 18:18:08' prior: 50333467!
addLogDirection: aLog

	logsDirections := aLog.

! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:18:09'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 18:21:53' prior: 50333022!
headEast
	
	head := MarsRoverHeadingEast new.
	head := MarsRoverHeading.! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 18:22:45' prior: 50333520!
headEast
	
	head := self Stateheading:#East.! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 18:23:34'!
Stateheading: cardinalPoint

	
	^MarsRoverHeading heading: cardinalPoint! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 18:24:34' prior: 50333529!
Stateheading: cardinalPoint

	logsDirections isNil ifFalse:[logsDirections add: cardinalPoint asString].
	^MarsRoverHeading heading: cardinalPoint! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 18:24:51'!
stateHeading: cardinalPoint

	logsDirections isNil ifFalse:[logsDirections add: cardinalPoint asString].
	^MarsRoverHeading heading: cardinalPoint! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:24:51' prior: 50333525!
headEast
	
	head := self stateHeading:#East.! !

!methodRemoval: MarsRover #Stateheading: stamp: 'LEC 6/6/2021 18:24:51'!
Stateheading: cardinalPoint

	logsDirections isNil ifFalse:[logsDirections add: cardinalPoint asString].
	^MarsRoverHeading heading: cardinalPoint!
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 18:25:14' prior: 50333007!
headNorth
	
	head := self stateHeading:#North.
	! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 18:25:37' prior: 50333012!
headSouth
	
	head := self stateHeading:#South.! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 18:25:47' prior: 50333017!
headWest
	
	head := self stateHeading:#West.! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:25:54'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 18:25:54'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:25:55'!
ERROR!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 18:25:55'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:25:55'!
ERROR!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 18:26:13' prior: 50333379!
test05
	"
	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.

	marsRover process: 'f'.
	
	self assert: 'North' equals: log currentLogs first.
	self assert: 'East' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	"
	! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:26:17'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 18:26:17'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:26:17'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 18:26:17'!
PASSED!

!methodRemoval: MRLogTest #test05 stamp: 'LEC 6/6/2021 18:29:04'!
test05
	"
	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.

	marsRover process: 'f'.
	
	self assert: 'North' equals: log currentLogs first.
	self assert: 'East' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	"
	!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 18:32:28'!
test05
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindow: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	
	! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:32:30'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:32:42'!
addWindow: aMRLogTest 
	self shouldBeImplemented.! !
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 18:33:03' prior: 50333616!
test05
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindowPosition: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	
	! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:33:06'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:33:12'!
addWindowPosition: aMRLogTest 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 18:34:07'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head logsPositions logsDirections windowPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:34:03' prior: 50333645!
addWindowPosition: aWindow 
	
	windowPosition add: aWindow ! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:34:10'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:34:27' prior: 50333659!
addWindowPosition: aWindow 
	
	windowPosition := aWindow ! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:34:29'!
ERROR!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:34:41'!
positionTextFieldModel
	self shouldBeImplemented.! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:35:08'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 18:37:11' prior: 50333491!
changePositionTo: aPosition

	position := aPosition .
	logsPositions isNil ifFalse:[logsPositions add: aPosition ].
	windowPosition isNil ifFalse:[windowPosition := aPosition ].! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 18:40:26' prior: 50333681!
changePositionTo: aPosition

	position := aPosition .
	logsPositions isNil ifFalse:[logsPositions add: aPosition ].
	windowPosition isNil ifFalse:[windowPosition := aPosition ].
	
	! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:40:35'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 18:41:46' prior: 50333690!
changePositionTo: aPosition

	position := aPosition .
	logsPositions isNil ifFalse:[logsPositions add: aPosition ].
	windowPosition isNil ifFalse:[windowPosition add: aPosition ].
	
	! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:41:56'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 18:43:29' prior: 50333701!
changePositionTo: aPosition

	position := aPosition .
	logsPositions isNil ifFalse:[logsPositions add: aPosition ].
	windowPosition isNil ifFalse:[windowPosition positionChangedTo: aPosition ].
	
	! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:43:32'!
ERROR!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:43:40'!
positionChangedTo: aPoint 
	self shouldBeImplemented.! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:44:05'!
ERROR!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:44:27'!
ERROR!

!classDefinition: #MRLogTest category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 18:44:57'!
TestCase subclass: #MRLogTest
	instanceVariableNames: 'currentPositionMR'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:44:55' prior: 50333723!
positionChangedTo: aPoint 
	
	
	currentPositionMR := aPoint ! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:45:02'!
ERROR!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:45:02'!
ERROR!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:45:23' prior: 50333674!
positionTextFieldModel
	
	^currentPositionMR ! !

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:45:25'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:45:30'!
PASSED!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:46:16'!
positionChangedTo: aLog

	positionLogs add: aLog! !
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:46:16' prior: 50332925!
add: aLog

	positionLogs positionChangedTo: aLog! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:46:16' prior: 50333541!
stateHeading: cardinalPoint

	logsDirections isNil ifFalse:[logsDirections positionChangedTo: cardinalPoint asString].
	^MarsRoverHeading heading: cardinalPoint! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:46:16' prior: 50333712!
changePositionTo: aPosition

	position := aPosition .
	logsPositions isNil ifFalse:[logsPositions positionChangedTo: aPosition ].
	windowPosition isNil ifFalse:[windowPosition positionChangedTo: aPosition ].
	
	! !
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:46:16' prior: 50333759!
positionChangedTo: aLog

	positionLogs positionChangedTo: aLog! !

!methodRemoval: Log #add: stamp: 'LEC 6/6/2021 18:46:16'!
add: aLog

	positionLogs positionChangedTo: aLog!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:46:19'!
ERROR!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 18:46:19'!
ERROR!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:46:19'!
ERROR!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 18:46:19'!
ERROR!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:46:19'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 18:46:19'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:46:31'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:46:47' prior: 50333788!
positionChangedTo: aLog

	positionLogs add: aLog! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:46:48'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 18:46:51'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:46:53'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 18:46:54'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:47:00'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 18:47:00'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:47:00'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 18:47:00'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:47:00'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 18:47:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/6/2021 18:47:12'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:47:18'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 18:47:18'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:47:18'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 18:47:18'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:47:18'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 18:47:18'!
PASSED!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 18:47:39'!
test06
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindowPosition: window.
	
	marsRover process: 'f'.
	
	self assert: 1@3 equals: window positionTextFieldModel.
	
	! !

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:47:41'!
FAILURE!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 18:47:52' prior: 50333886!
test06
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindowPosition: window.
	
	marsRover process: 'ff'.
	
	self assert: 1@3 equals: window positionTextFieldModel.
	
	! !

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:47:53'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:47:53'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 18:47:53'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:47:53'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 18:47:53'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:47:54'!
PASSED!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:47:54'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 18:47:54'!
PASSED!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 18:48:30' prior: 50333899!
test06
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindowPosition: window.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: window directionTextFieldModel.
	
	! !

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:48:34'!
ERROR!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 18:48:43' prior: 50333927!
test06
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindowDirection: window.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: window directionTextFieldModel.
	
	! !

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:48:46'!
ERROR!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:49:06'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:49:11'!
addWindowDirection: aMRLogTest 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 18:49:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head logsPositions logsDirections windowPosition windowDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:49:36' prior: 50333955!
addWindowDirection: aWindow
	
	windowDirection := aWindow ! !

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:49:40'!
ERROR!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:49:49'!
directionTextFieldModel
	self shouldBeImplemented.! !

!classDefinition: #MRLogTest category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 18:50:00'!
TestCase subclass: #MRLogTest
	instanceVariableNames: 'currentPositionMR directionMR'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:49:57' prior: 50333977!
directionTextFieldModel
	
	^directionMR! !

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:50:02'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 18:51:08' prior: 50333769!
stateHeading: cardinalPoint

	logsDirections isNil ifFalse:[logsDirections positionChangedTo: cardinalPoint asString].
	windowDirection isNil ifFalse:[windowDirection directionChangedTo: cardinalPoint asString].
	^MarsRoverHeading heading: cardinalPoint! !

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:51:21'!
ERROR!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:51:21'!
ERROR!
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:51:50'!
directionChangedTo: aString 
	self shouldBeImplemented.! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 18:52:05' prior: 50334012!
directionChangedTo: aDirection 
	
	directionMR := aDirection! !

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:52:06'!
PASSED!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:52:08'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 18:52:12'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 18:52:12'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 18:52:12'!
PASSED!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 18:52:12'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 18:52:12'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 18:52:14'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 18:52:14'!
PASSED!
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:00:16' prior: 50333390!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverPosition: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.! !
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:00:22' prior: 50334042!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addLogPosition: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.! !
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/6/2021 19:00:52'!
addObserverPosition: aLog

	logsPositions := aLog

! !

!methodRemoval: MarsRover #addLogPosition: stamp: 'LEC 6/6/2021 19:00:52'!
addLogPosition: aLog

	logsPositions := aLog

!
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:01:07' prior: 50334053!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverPosition: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: log currentLogs size equals: 1.! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 19:01:09'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 19:01:09'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 19:01:09'!
ERROR!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:01:09'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 19:01:09'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 19:01:09'!
PASSED!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 19:01:10'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 19:01:10'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 19:01:10'!
ERROR!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 19:01:17'!
PASSED!
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:01:25' prior: 50333401!
test02

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover  addObserverPosition: log.
	marsRover process: 'ffb'.
	
	
	self assert: 1@2 equals: log currentLogs first.
	self assert: 1@3 equals: log currentLogs second.
	self assert: 1@2 equals: log currentLogs third.
	self assert: log currentLogs size equals: 3.
	! !

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 19:01:27'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 19:01:27'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 19:01:27'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:01:27'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 19:01:27'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 19:01:27'!
PASSED!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 19:01:27'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 19:01:27'!
PASSED!
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:01:58' prior: 50333633!
test05
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addObserverPosition: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	
	! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head observerPositions observerDirections'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 19:02:24'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observerPositions observerDirections'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'LEC 6/6/2021 19:02:34' prior: 50333472!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading .! !
!MarsRover methodsFor: 'moving' stamp: 'LEC 6/6/2021 19:03:45' prior: 50333778!
changePositionTo: aPosition

	position := aPosition .
	observerPositions do:[:anObserver| anObserver positionChangedTo: aPosition].
	
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'LEC 6/6/2021 19:04:19' prior: 50333997!
stateHeading: cardinalPoint

	observerDirections do:[:anObserver| anObserver directionChangedTo: cardinalPoint asString].
	^MarsRoverHeading heading: cardinalPoint! !

!methodRemoval: MarsRover #addLogDirection: stamp: 'LEC 6/6/2021 19:04:29'!
addLogDirection: aLog

	logsDirections := aLog.

!

!methodRemoval: MarsRover #addWindow: stamp: 'LEC 6/6/2021 19:04:35'!
addWindow: aMRLogTest 
	self shouldBeImplemented.!

!methodRemoval: MarsRover #addWindowDirection: stamp: 'LEC 6/6/2021 19:04:46'!
addWindowDirection: aWindow
	
	windowDirection := aWindow !

!methodRemoval: MarsRover #addWindowPosition: stamp: 'LEC 6/6/2021 19:04:51'!
addWindowPosition: aWindow 
	
	windowPosition := aWindow !
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/6/2021 19:05:18' prior: 50334064!
addObserverPosition: anObserver

	observerPositions add: anObserver 

	

! !
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/6/2021 19:05:35'!
addObserverDirections: anObserver

	observerDirections add: anObserver 

	

! !
!MarsRover methodsFor: 'initialization' stamp: 'LEC 6/6/2021 19:06:05' prior: 50334163!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading .
	observerPositions := OrderedCollection new.
	observerDirections := OrderedCollection new.! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 19:06:11'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 19:06:15'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 19:06:15'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 19:06:15'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:06:18'!
ERROR!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 19:06:18'!
ERROR!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 19:06:18'!
ERROR!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 19:06:18'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:06:20'!
ERROR!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:06:38' prior: 50333415!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentLogs first.
	self assert: 'South' equals: log currentLogs second.
	self assert: log currentLogs size equals: 2.
	! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:06:40'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 19:07:05'!
directionChangedTo: aLog

	directionLogs add: aLog! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:07:12'!
ERROR!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 19:07:12'!
ERROR!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 19:07:12'!
ERROR!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 19:07:12'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:07:15'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 19:08:44'!
currentPositionLogs
	
	^positionLogs ! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 19:08:44' prior: 50334106!
test02

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover  addObserverPosition: log.
	marsRover process: 'ffb'.
	
	
	self assert: 1@2 equals: log currentPositionLogs first.
	self assert: 1@3 equals: log currentPositionLogs second.
	self assert: 1@2 equals: log currentPositionLogs third.
	self assert: log currentPositionLogs size equals: 3.
	! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 19:08:44' prior: 50334240!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentPositionLogs first.
	self assert: 'South' equals: log currentPositionLogs second.
	self assert: log currentPositionLogs size equals: 2.
	! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 19:08:44' prior: 50334073!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverPosition: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentPositionLogs first.
	self assert: log currentPositionLogs size equals: 1.! !
!MRLogTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 19:08:44' prior: 50333428!
test04

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.
	log := Log new.
	marsRover addLogDirection: log.
	marsRover process: 'rr'.
	
	self assert: 'North' equals: log currentPositionLogs first.
	self assert: 'East' equals: log currentPositionLogs second.
	self assert: log currentPositionLogs size equals: 2.
	! !

!methodRemoval: Log #currentLogs stamp: 'LEC 6/6/2021 19:08:44'!
currentLogs
	
	^positionLogs !
!Log methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 19:09:10'!
currentDirectionLogs
	
	^directionLogs ! !
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:09:45' prior: 50334291!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentDirectionLogs first.
	self assert: 'South' equals: log currentDirectionLogs second.
	self assert: log currentPositionLogs size equals: 2.
	! !
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:09:58' prior: 50334317!
test04

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.
	log := Log new.
	marsRover addLogDirection: log.
	marsRover process: 'rr'.
	
	self assert: 'North' equals: log currentDirectionLogs first.
	self assert: 'East' equals: log currentDirectionLogs second.
	self assert: log currentPositionLogs size equals: 2.
	! !
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:10:08' prior: 50334352!
test04

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'rr'.
	
	self assert: 'North' equals: log currentDirectionLogs first.
	self assert: 'East' equals: log currentDirectionLogs second.
	self assert: log currentPositionLogs size equals: 2.
	! !
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:10:21' prior: 50333940!
test06
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addObserverDirections: window.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: window directionTextFieldModel.
	
	! !

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 19:10:32'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 19:10:32'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 19:10:32'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:10:35'!
FAILURE!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 19:10:35'!
FAILURE!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 19:10:35'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 19:10:35'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:10:37'!
FAILURE!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:11:01' prior: 50334366!
test04

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'rr'.
	
	self assert: 'North' equals: log currentDirectionLogs first.
	self assert: 'East' equals: log currentDirectionLogs second.
	self assert: log currentDirectionLogs size equals: 2.
	! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:11:43'!
FAILURE!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 19:11:43'!
PASSED!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 19:11:43'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 19:11:43'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:11:43'!
FAILURE!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:11:54' prior: 50334338!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentDirectionLogs first.
	self assert: 'South' equals: log currentDirectionLogs second.
	self assert: log currentDirectionLogs size equals: 2.
	! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:11:56'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:12:00'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 19:12:00'!
PASSED!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 19:12:00'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 19:12:00'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 19:12:03'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 19:12:03'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 19:12:04'!
PASSED!

----SNAPSHOT----(6 June 2021 19:15:16) CuisUniversity-4532.image priorSource: 53253!
!MarsRover methodsFor: 'command processing' stamp: 'LEC 6/6/2021 19:17:21' prior: 50333089!
processCommand: aCommand

	self applyCommand: (Command for: aCommand)
	! !
!Command methodsFor: 'no messages' stamp: 'LEC 6/6/2021 19:18:13'!
actionFor: aMarsRover

	self subclassResponsibility ! !

Object subclass: #MarsRoverWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 19:25:03'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 19:25:22'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'directionMR'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'no messages' stamp: 'LEC 6/6/2021 19:25:20'!
directionChangedTo: aDirection 
	
	directionMR := aDirection! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 19:25:42'!
directionTextFieldModel
	
	^directionMR! !

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LEC 6/6/2021 19:26:04'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'directionMR currentPositionMR'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 19:26:00'!
positionChangedTo: aPoint 
	
	
	currentPositionMR := aPoint ! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LEC 6/6/2021 19:26:24'!
positionTextFieldModel
	
	^currentPositionMR ! !
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:26:55' prior: 50334138!
test05
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := MarsRoverWindow new.
	marsRover addObserverPosition: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	
	! !
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:27:12' prior: 50334380!
test06
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := MarsRoverWindow new.
	marsRover addObserverDirections: window.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: window directionTextFieldModel.
	
	! !

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:27:17'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 19:27:17'!
PASSED!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 19:27:17'!
PASSED!

!testRun: #MRLogTest #test99 stamp: 'LEC 6/6/2021 19:27:17'!
PASSED!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 19:27:20'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 19:27:20'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 19:27:20'!
PASSED!

----SNAPSHOT----(6 June 2021 19:29:07) CuisUniversity-4532.image priorSource: 90025!

!methodRemoval: MRLogTest #directionChangedTo: stamp: 'LEC 6/6/2021 19:29:13'!
directionChangedTo: aDirection 
	
	directionMR := aDirection!

!methodRemoval: MRLogTest #directionTextFieldModel stamp: 'LEC 6/6/2021 19:29:13'!
directionTextFieldModel
	
	^directionMR!

!methodRemoval: MRLogTest #positionChangedTo: stamp: 'LEC 6/6/2021 19:29:13'!
positionChangedTo: aPoint 
	
	
	currentPositionMR := aPoint !

!methodRemoval: MRLogTest #positionTextFieldModel stamp: 'LEC 6/6/2021 19:29:13'!
positionTextFieldModel
	
	^currentPositionMR !

!methodRemoval: MRLogTest #test99 stamp: 'LEC 6/6/2021 19:29:21'!
test99
	"
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := self.
	marsRover addWindow: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	"
	!

!testRun: #MRLogTest #test01 stamp: 'LEC 6/6/2021 19:29:24'!
PASSED!

!testRun: #MRLogTest #test02 stamp: 'LEC 6/6/2021 19:29:24'!
PASSED!

!testRun: #MRLogTest #test03 stamp: 'LEC 6/6/2021 19:29:24'!
PASSED!

!testRun: #MRLogTest #test04 stamp: 'LEC 6/6/2021 19:29:24'!
PASSED!

!testRun: #MRLogTest #test05 stamp: 'LEC 6/6/2021 19:29:24'!
PASSED!

!testRun: #MRLogTest #test06 stamp: 'LEC 6/6/2021 19:29:24'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/6/2021 19:29:29'!
PASSED!
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:31:09'!
test01logOneChange

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverPosition: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentPositionLogs first.
	self assert: log currentPositionLogs size equals: 1.! !

!methodRemoval: MRLogTest #test01 stamp: 'LEC 6/6/2021 19:31:09'!
test01

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverPosition: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentPositionLogs first.
	self assert: log currentPositionLogs size equals: 1.!
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:31:40'!
test02logWithManyChanges

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover  addObserverPosition: log.
	marsRover process: 'ffb'.
	
	
	self assert: 1@2 equals: log currentPositionLogs first.
	self assert: 1@3 equals: log currentPositionLogs second.
	self assert: 1@2 equals: log currentPositionLogs third.
	self assert: log currentPositionLogs size equals: 3.
	! !

!methodRemoval: MRLogTest #test02 stamp: 'LEC 6/6/2021 19:31:40'!
test02

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover  addObserverPosition: log.
	marsRover process: 'ffb'.
	
	
	self assert: 1@2 equals: log currentPositionLogs first.
	self assert: 1@3 equals: log currentPositionLogs second.
	self assert: 1@2 equals: log currentPositionLogs third.
	self assert: log currentPositionLogs size equals: 3.
	!
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:32:22'!
test05windowUpdatePosition
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := MarsRoverWindow new.
	marsRover addObserverPosition: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	
	! !

!methodRemoval: MRLogTest #test05 stamp: 'LEC 6/6/2021 19:32:22'!
test05
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := MarsRoverWindow new.
	marsRover addObserverPosition: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window positionTextFieldModel.
	
	!
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:33:01'!
test01logOnePositionChange

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverPosition: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentPositionLogs first.
	self assert: log currentPositionLogs size equals: 1.! !

!methodRemoval: MRLogTest #test01logOneChange stamp: 'LEC 6/6/2021 19:33:01'!
test01logOneChange

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverPosition: log.
	marsRover process: 'f'.
	
	
	self assert: 1@2 equals: log currentPositionLogs first.
	self assert: log currentPositionLogs size equals: 1.!
!MRLogTest methodsFor: 'test position' stamp: 'LEC 6/6/2021 19:33:33'!
test02logWithManyPositionsChanges

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover  addObserverPosition: log.
	marsRover process: 'ffb'.
	
	
	self assert: 1@2 equals: log currentPositionLogs first.
	self assert: 1@3 equals: log currentPositionLogs second.
	self assert: 1@2 equals: log currentPositionLogs third.
	self assert: log currentPositionLogs size equals: 3.
	! !

!methodRemoval: MRLogTest #test02logWithManyChanges stamp: 'LEC 6/6/2021 19:33:33'!
test02logWithManyChanges

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover  addObserverPosition: log.
	marsRover process: 'ffb'.
	
	
	self assert: 1@2 equals: log currentPositionLogs first.
	self assert: 1@3 equals: log currentPositionLogs second.
	self assert: 1@2 equals: log currentPositionLogs third.
	self assert: log currentPositionLogs size equals: 3.
	!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:34:15'!
test03logManyRotationChanges

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentDirectionLogs first.
	self assert: 'South' equals: log currentDirectionLogs second.
	self assert: log currentDirectionLogs size equals: 2.
	! !

!methodRemoval: MRLogTest #test03 stamp: 'LEC 6/6/2021 19:34:15'!
test03

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentDirectionLogs first.
	self assert: 'South' equals: log currentDirectionLogs second.
	self assert: log currentDirectionLogs size equals: 2.
	!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:34:37'!
test03logManyRotationLeftChanges

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentDirectionLogs first.
	self assert: 'South' equals: log currentDirectionLogs second.
	self assert: log currentDirectionLogs size equals: 2.
	! !

!methodRemoval: MRLogTest #test03logManyRotationChanges stamp: 'LEC 6/6/2021 19:34:37'!
test03logManyRotationChanges

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #North.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'll'.
	
	self assert: 'West' equals: log currentDirectionLogs first.
	self assert: 'South' equals: log currentDirectionLogs second.
	self assert: log currentDirectionLogs size equals: 2.
	!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:35:00'!
test04LogManyRotationRightChanges

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'rr'.
	
	self assert: 'North' equals: log currentDirectionLogs first.
	self assert: 'East' equals: log currentDirectionLogs second.
	self assert: log currentDirectionLogs size equals: 2.
	! !

!methodRemoval: MRLogTest #test04 stamp: 'LEC 6/6/2021 19:35:00'!
test04

	| marsRover log |
	
	marsRover := MarsRover at: 1@1 heading: #West.
	log := Log new.
	marsRover addObserverDirections: log.
	marsRover process: 'rr'.
	
	self assert: 'North' equals: log currentDirectionLogs first.
	self assert: 'East' equals: log currentDirectionLogs second.
	self assert: log currentDirectionLogs size equals: 2.
	!
!MRLogTest methodsFor: 'tests direction' stamp: 'LEC 6/6/2021 19:35:56'!
test06windowRotateUpdate
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := MarsRoverWindow new.
	marsRover addObserverDirections: window.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: window directionTextFieldModel.
	
	! !

!methodRemoval: MRLogTest #test06 stamp: 'LEC 6/6/2021 19:35:56'!
test06
	
	| marsRover window|
	
	marsRover := MarsRover at: 1@1 heading: #North.
	window := MarsRoverWindow new.
	marsRover addObserverDirections: window.
	
	marsRover process: 'r'.
	
	self assert: 'East' equals: window directionTextFieldModel.
	
	!

!classRenamed: #MRLogTest as: #ObserversTest stamp: 'LEC 6/6/2021 19:36:30'!
Smalltalk renameClassNamed: #MRLogTest as: #ObserversTest!

!testRun: #ObserversTest #test01logOnePositionChange stamp: 'LEC 6/6/2021 19:36:49'!
PASSED!

!testRun: #ObserversTest #test02logWithManyPositionsChanges stamp: 'LEC 6/6/2021 19:36:49'!
PASSED!

!testRun: #ObserversTest #test03logManyRotationLeftChanges stamp: 'LEC 6/6/2021 19:36:49'!
PASSED!

!testRun: #ObserversTest #test04LogManyRotationRightChanges stamp: 'LEC 6/6/2021 19:36:49'!
PASSED!

!testRun: #ObserversTest #test05windowUpdatePosition stamp: 'LEC 6/6/2021 19:36:49'!
PASSED!

!testRun: #ObserversTest #test06windowRotateUpdate stamp: 'LEC 6/6/2021 19:36:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LEC 6/6/2021 19:36:55'!
PASSED!

----SNAPSHOT----(6 June 2021 19:38:26) CuisUniversity-4532.image priorSource: 93157!

----QUIT----(6 June 2021 19:39:49) CuisUniversity-4532.image priorSource: 104815!

----STARTUP---- (7 June 2021 19:58:05) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


----QUIT----(7 June 2021 22:04:29) CuisUniversity-4532.image priorSource: 104901!

----STARTUP---- (9 June 2021 17:07:34) as C:\Users\castr\Desktop\windows64\CuisUniversity-4532.image!


TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'LEC 6/9/2021 17:08:27'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'LEC 6/9/2021 17:12:39'!
Object subclass: #Cart
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'LEC 6/9/2021 17:12:27'!
test01EmptyCart

	| carrito catalogue |
	catalogue := Dictionary new.
	carrito := Cart with:catalogue.
	
	self assert: carrito empty.
	
	! !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:12:43'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'LEC 6/9/2021 17:12:53'!
with: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aDictionary ! !
!Cart class methodsFor: 'instance creation' stamp: 'LEC 6/9/2021 17:12:59' prior: 50334967!
with: aDictionary 
	
	^self new initializeWith: aDictionary ! !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:13:01'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'LEC 6/9/2021 17:13:27'!
Object subclass: #Cart
	instanceVariableNames: 'catalogue dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'LEC 6/9/2021 17:13:27'!
initializeWith: aDictionary 
	self shouldBeImplemented.
	dictionary := aDictionary.! !
!Cart methodsFor: 'initialization' stamp: 'LEC 6/9/2021 17:13:50' prior: 50334989!
initializeWith: aCatalogue
	
	catalogue := aCatalogue ! !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:13:52'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:14:00'!
empty
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:14:31' prior: 50335002!
empty
	
	^catalogue isEmpty ! !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:14:35'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:14:35'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:14:58'!
isEmpty
	
	^catalogue isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:14:58' prior: 50334957!
test01EmptyCart

	| carrito catalogue |
	catalogue := Dictionary new.
	carrito := Cart with:catalogue.
	
	self assert: carrito isEmpty.
	
	! !

!methodRemoval: Cart #empty stamp: 'LEC 6/9/2021 17:14:58'!
empty
	
	^catalogue isEmpty !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:15:03'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:15:03'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:16:06' prior: 50335019!
test01EmptyCart

	| carrito catalogue |
	catalogue := Dictionary at: 'un libro' put: 15.
	carrito := Cart with:catalogue.
	
	self assert: carrito isEmpty.
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:16:18' prior: 50335035!
test01EmptyCart

	| carrito catalogue |
	catalogue := Dictionary at: 'un libro' put: 15.
	carrito := Cart with:catalogue.
	
	self assert: carrito isEmpty.
	
	! !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:16:19'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:16:35'!
test02
	| carrito catalogue |
	catalogue := Dictionary at: 'un libro' put: 15.
	carrito := Cart with:catalogue.
	
	self assert: carrito isEmpty.
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:14:58' prior: 50335043!
test01EmptyCart

	| carrito catalogue |
	catalogue := Dictionary new.
	carrito := Cart with:catalogue.
	
	self assert: carrito isEmpty.
	
	! !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:16:58'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:16:58'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:16:58'!
ERROR!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:16:58'!
ERROR!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:17:07'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:17:37' prior: 50335053!
test02
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15.
	carrito := Cart with:catalogue.
	
	self assert: carrito isEmpty.
	
	! !

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:17:39'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:18:36' prior: 50335080!
test02
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	self assert: carrito isEmpty.
	
	! !

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:18:36'!
FAILURE!

Object subclass: #Cart
	instanceVariableNames: 'catalogue contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'LEC 6/9/2021 17:19:35'!
Object subclass: #Cart
	instanceVariableNames: 'catalogue contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'LEC 6/9/2021 17:21:51' prior: 50334995!
initializeWith: aCatalogue
	
	catalogue := aCatalogue .
	contents := Dictionary new.! !

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:22:13'!
FAILURE!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:22:13'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:22:56' prior: 50335015!
isEmpty
	
	^contents isEmpty ! !

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:22:58'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:23:01'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:23:01'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:23:01'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:26:48'!
test03
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	self assert: carrito add: 'otro libro' amount: 15.
	
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:28:07' prior: 50335135!
test03
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	self 	should: [carrito add: 'otro libro' amount: 15. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: carrito invalidItemErrorDescription.
			self assert: carrito isEmpty ]
	
	
	! !

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:28:24'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:28:34'!
invalidItemErrorDescription
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:29:00' prior: 50335160!
invalidItemErrorDescription
	
	^'This item is not in the catalogue'! !

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:29:02'!
FAILURE!
!CartTest methodsFor: 'assertions' stamp: 'LEC 6/9/2021 17:29:09' overrides: 16927375!
assert: aFalse description: aBlockClosure 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:30:49'!
add: anItem amount: anAmount

	(self assertItemValid: anItem) ifFalse:[self error: self invalidItemErrorDescription ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:31:35'!
assertItemValid: anItem

	^catalogue includes: anItem ! !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:31:39'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:31:39'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:31:39'!
ERROR!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:31:39'!
ERROR!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:32:31'!
ERROR!

anError messageText!

carrito invalidItemErrorDescription!

anError messageText!

!methodRemoval: CartTest #assert:description: stamp: 'LEC 6/9/2021 17:33:23'!
assert: aFalse description: aBlockClosure 
	self shouldBeImplemented.!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:33:30'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:33:30'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:33:30'!
PASSED!

Dictionary!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:39:02'!
test04
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	carrito add: 'un libro' amount: 15.
	
	self assert: (carrito items includes: 'un libro').
	self assert: (carrito amountOf:'un libro') equals: 15.
		
	
	
	! !

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:39:07'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:39:35' prior: 50335215!
test04
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	carrito add: 'un libro' amount: 15.
	
	self assert: (carrito items includes: 'un libro').
	self assert: (carrito amountOf:'un libro') equals: 15.
		
	
	
	! !

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:39:37'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:40:05' prior: 50335185!
assertItemValid: anItem

	^catalogue includesKey: anItem ! !

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:40:07'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:40:25'!
items
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:40:42' prior: 50335250!
items
	^contents keys ! !

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:40:47'!
FAILURE!

carrito items!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:42:01' prior: 50335178!
add: anItem amount: anAmount

	(self assertItemValid: anItem) ifFalse:[self error: self invalidItemErrorDescription ].
	
	contents at: anItem put:anAmount! !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:42:05'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:42:05'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:42:05'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:42:05'!
ERROR!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:42:05'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:42:15'!
amountOf: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:43:28' prior: 50335280!
amountOf: anItem
	
	^contents at:anItem  ifAbsent: [0].! !

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:43:29'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:43:32'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:43:36'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:43:36'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:43:36'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:43:36'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:43:55' prior: 50335285!
amountOf: anItem
	
	^contents at:anItem.! !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:43:58'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:43:58'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:43:58'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:43:58'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:46:02'!
test05
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	carrito add: 'un libro' amount: 2.
	self 	should: [carrito add: 'un libro' amount: -1. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: carrito invalidAmountErrorDescription.
			self assert: (carrito amountOf:'un libro') equals: 2]
	
	
	! !

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 17:46:07'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:46:55' prior: 50335261!
add: anItem amount: anAmount

	(self assertItemValid: anItem) ifFalse:[self error: self invalidItemErrorDescription ].
	(self assertAmountValid: anAmount) ifFalse:[self error: self invalidAmountErrorDescription ].
	
	contents at: anItem put:anAmount! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:48:16'!
assertAmountValid: anAmount

	^(anAmount isKindOf: SmallInteger) and:[anAmount > 0].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:49:00'!
invalidAmountErrorDescription

	^'The amount must be a positive number.'
	
	! !

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 17:49:04'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:49:09'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:49:09'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:49:09'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:49:09'!
PASSED!

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 17:49:09'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:51:36'!
assertValidItem: anItem withAmount: anAmount

	(self assertItemValid: anItem) ifFalse:[self error: self invalidItemErrorDescription ].
	(self assertAmountValid: anAmount) ifFalse:[self error: self invalidAmountErrorDescription ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:51:36' prior: 50335334!
add: anItem amount: anAmount

	self assertValidItem: anItem withAmount: anAmount.
	
	contents at: anItem put:anAmount! !

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:51:44'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:51:44'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:51:44'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:51:44'!
PASSED!

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 17:51:44'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:54:00'!
test06
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.

	
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:54:50' prior: 50335396!
test06
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	carrito remove:'un libro' amount:3.
	
	self assert: (carrito items includes: 'un libro').
	self assert: (carrito amountOf:'un libro') equals: 12.
	
	
	! !

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 17:54:54'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:55:02'!
remove: aString amount: aSmallInteger 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:56:59' prior: 50335419!
remove: anItem amount: anAmount

	contents at:anItem put: ((contents at: anItem) -anAmount)! !

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 17:57:01'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 17:57:01'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 17:57:01'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 17:57:01'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 17:57:01'!
PASSED!

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 17:57:01'!
PASSED!

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 17:57:01'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 17:58:14'!
test07
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	carrito remove:'un libro' amount:15.
	
	self assert: (carrito items isEmpty).
	
	
	
	! !

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 17:58:16'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:01:54' prior: 50335424!
remove: anItem amount: anAmount

	| finalAmount |
	finalAmount := ((contents at: anItem) -anAmount).
	finalAmount isZero ifTrue:[ contents removeKey: anItem].
	
	contents at:anItem put: finalAmount.! !

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:02:01'!
FAILURE!

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:02:01'!
FAILURE!

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:02:21'!
FAILURE!

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:02:21'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:03:36' prior: 50335458!
remove: anItem amount: anAmount

	| finalAmount |
	finalAmount := ((contents at: anItem) -anAmount).
	finalAmount isZero
		 ifTrue:[ contents removeKey: anItem]
		ifFalse:[contents at:anItem put: finalAmount.]
	! !

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:03:39'!
ERROR!

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:03:47'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 18:03:52'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 18:03:52'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 18:03:52'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 18:03:52'!
PASSED!

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 18:03:52'!
PASSED!

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 18:03:52'!
PASSED!

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:03:52'!
PASSED!

!methodRemoval: CartTest #test07 stamp: 'LEC 6/9/2021 18:06:12'!
test07
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	carrito remove:'un libro' amount:15.
	
	self assert: (carrito items isEmpty).
	
	
	
	!

!methodRemoval: Cart #remove:amount: stamp: 'LEC 6/9/2021 18:06:41'!
remove: anItem amount: anAmount

	| finalAmount |
	finalAmount := ((contents at: anItem) -anAmount).
	finalAmount isZero
		 ifTrue:[ contents removeKey: anItem]
		ifFalse:[contents at:anItem put: finalAmount.]
	!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 18:06:45'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 18:06:45'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 18:06:45'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 18:06:45'!
PASSED!

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 18:06:45'!
PASSED!

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 18:06:45'!
ERROR!

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 18:06:45'!
ERROR!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 18:06:54'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 18:06:55'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 18:06:57'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 18:06:58'!
PASSED!

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 18:06:59'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:07:46' prior: 50335404!
test06
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	
	
	self assert: carrito totalPrice equals: 15*15.
	
	
	! !

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 18:07:48'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:07:53'!
totalPrice
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:07:57' prior: 50335563!
totalPrice
	
	^225! !

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 18:07:59'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 18:07:59'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 18:07:59'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 18:07:59'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 18:07:59'!
PASSED!

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 18:07:59'!
PASSED!

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 18:07:59'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:08:59'!
test07
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15:: at: 'otro libro' put: 25;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	carrito add: 'otro libro' amount: 25.	
	
	self assert: carrito totalPrice equals: 15*15 + 25*25.
	
	
	! !

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:09:01'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:09:14' prior: 50335587!
test07
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15; at: 'otro libro' put: 25;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	carrito add: 'otro libro' amount: 25.	
	
	self assert: carrito totalPrice equals: 15*15 + 25*25.
	
	
	! !

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:10:21'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:14:17' prior: 50335568!
totalPrice
	
	^contents keys sum:[:anItem|(contents at:anItem) * (catalogue at:anItem)] ifEmpty: [0]! !

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:14:27'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:14:45' prior: 50335602!
test07
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15; at: 'otro libro' put: 25;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	carrito add: 'otro libro' amount: 25.	
	
	self assert: carrito totalPrice equals: (15*15) + (25*25).
	
	
	! !

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:14:46'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 18:14:46'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 18:14:47'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 18:14:47'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 18:14:47'!
PASSED!

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 18:14:47'!
PASSED!

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 18:14:47'!
PASSED!

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:14:47'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 18:15:02'!
PASSED!

!testRun: #CartTest #test02 stamp: 'LEC 6/9/2021 18:15:02'!
PASSED!

!testRun: #CartTest #test03 stamp: 'LEC 6/9/2021 18:15:02'!
PASSED!

!testRun: #CartTest #test04 stamp: 'LEC 6/9/2021 18:15:02'!
PASSED!

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 18:15:02'!
PASSED!

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 18:15:02'!
PASSED!

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:15:03'!
PASSED!

!methodRemoval: CartTest #test02 stamp: 'LEC 6/9/2021 18:16:01'!
test02
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	self assert: carrito isEmpty.
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:17:55'!
test02CannotAddUncataloguedItem
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	self 	should: [carrito add: 'otro libro' amount: 15. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: carrito invalidItemErrorDescription.
			self assert: carrito isEmpty ]
	
	
	! !

!methodRemoval: CartTest #test03 stamp: 'LEC 6/9/2021 18:17:55'!
test03
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	self 	should: [carrito add: 'otro libro' amount: 15. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: carrito invalidItemErrorDescription.
			self assert: carrito isEmpty ]
	
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:19:22'!
test03CartHasTheItemAndItsAmount
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	carrito add: 'un libro' amount: 15.
	
	self assert: (carrito items includes: 'un libro').
	self assert: (carrito amountOf:'un libro') equals: 15.
		
	
	
	! !

!methodRemoval: CartTest #test04 stamp: 'LEC 6/9/2021 18:19:22'!
test04
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	carrito add: 'un libro' amount: 15.
	
	self assert: (carrito items includes: 'un libro').
	self assert: (carrito amountOf:'un libro') equals: 15.
		
	
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:19:47' prior: 50335706!
test03CartHasTheItemAndItsAmount
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	
	carrito add: 'un libro' amount: 15.
	
	self assert: (carrito items size) equals:1.
	self assert: (carrito items includes: 'un libro').
	self assert: (carrito amountOf:'un libro') equals: 15.
		
	
	
	! !

!testRun: #CartTest #test03CartHasTheItemAndItsAmount stamp: 'LEC 6/9/2021 18:19:49'!
PASSED!

!testRun: #CartTest #test01EmptyCart stamp: 'LEC 6/9/2021 18:19:49'!
PASSED!

!testRun: #CartTest #test02CannotAddUncataloguedItem stamp: 'LEC 6/9/2021 18:19:49'!
PASSED!

!testRun: #CartTest #test03CartHasTheItemAndItsAmount stamp: 'LEC 6/9/2021 18:19:49'!
PASSED!

!testRun: #CartTest #test05 stamp: 'LEC 6/9/2021 18:19:49'!
PASSED!

!testRun: #CartTest #test06 stamp: 'LEC 6/9/2021 18:19:49'!
PASSED!

!testRun: #CartTest #test07 stamp: 'LEC 6/9/2021 18:19:49'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:21:09'!
test04CannotAddAnItemWithNegativeAmount
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	carrito add: 'un libro' amount: 2.
	self 	should: [carrito add: 'un libro' amount: -1. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: carrito invalidAmountErrorDescription.
			self assert: (carrito amountOf:'un libro') equals: 2]
	
	
	! !

!methodRemoval: CartTest #test05 stamp: 'LEC 6/9/2021 18:21:09'!
test05
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.
	carrito add: 'un libro' amount: 2.
	self 	should: [carrito add: 'un libro' amount: -1. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: carrito invalidAmountErrorDescription.
			self assert: (carrito amountOf:'un libro') equals: 2]
	
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:21:52'!
test05CartCalculateTotalPriceForAnItem
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	
	
	self assert: carrito totalPrice equals: 15*15.
	
	
	! !

!methodRemoval: CartTest #test06 stamp: 'LEC 6/9/2021 18:21:52'!
test06
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	
	
	self assert: carrito totalPrice equals: 15*15.
	
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'LEC 6/9/2021 18:23:43'!
test06CartCalculateTotalPriceForManyItems
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15; at: 'otro libro' put: 25;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	carrito add: 'otro libro' amount: 25.	
	
	self assert: carrito totalPrice equals: (15*15) + (25*25).
	
	
	! !

!methodRemoval: CartTest #test07 stamp: 'LEC 6/9/2021 18:23:43'!
test07
	| carrito catalogue |
	catalogue := Dictionary new at: 'un libro' put: 15; at: 'otro libro' put: 25;yourself.
	carrito := Cart with:catalogue.

	carrito add: 'un libro' amount: 15.
	carrito add: 'otro libro' amount: 25.	
	
	self assert: carrito totalPrice equals: (15*15) + (25*25).
	
	
	!

----QUIT----(9 June 2021 18:27:34) CuisUniversity-4532.image priorSource: 105088!