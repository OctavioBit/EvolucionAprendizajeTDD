----STARTUP---- (31 May 2021 15:41:29) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!

!TransferTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 15:52:57'!
test07

	|anAccount|
	anAccount  := ReceptiveAccount new.
	self should: [Transfer from: anAccount to: anAccount withValue: 50] raise: Error withMessageText: [].! !
!TransferTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 15:56:27' prior: 50872773!
test07

	|anAccount|
	anAccount  := ReceptiveAccount new.
	self should: [Transfer from: anAccount to: anAccount withValue: 50] raise: Error withMessageText: [Transfer invalidAccountErrorDescription].! !

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 15:56:33'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'ijgt 5/31/2021 16:00:04'!
invalidAccountErrorDescription

	^ 'Accounts in transfer must be different.'! !

!testRun: #TransferTest #test01 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:00:11'!
FAILURE!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:00:11'!
FAILURE!
!Transfer methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:01:44' prior: 50872434!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	self assertTransferIsValidFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount.
	withdrawLeg := aReceptiveAccount withdrawTransfer: self.
	depositLeg := aSecondReceptiveAccount depositTransfer: self.
	value := anAmount.
	
	Withdraw register: anAmount on: aReceptiveAccount.
	Deposit register: anAmount on: aSecondReceptiveAccount.! !

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:01:47'!
FAILURE!
!Transfer methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:04:05'!
assertTransferIsValidFrom: anAccount to: aSecondAccount withValue: anAmount

	(anAmount > 0) ifFalse: [^self error: self class canNotTransferNegativeAmountErrorDescription]! !
!Transfer methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:05:32' prior: 50872836!
assertTransferIsValidFrom: anAccount to: aSecondAccount withValue: anAmount

	(anAmount > 0) ifFalse: [^self error: self class canNotTransferNegativeAmountErrorDescription].
	(anAccount == aSecondAccount) ifTrue: [^ self error: self class invalidAccountErrorDescription]! !

!methodRemoval: Transfer #assertAmountIsValid: stamp: 'ijgt 5/31/2021 16:05:43'!
assertAmountIsValid: anAmount

	^ anAmount > 0!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:05:48'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #ReportTest category: 'Portfolio-18' stamp: 'ijgt 5/31/2021 16:12:18'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Report category: 'Portfolio-18' stamp: 'ijgt 5/31/2021 16:16:09'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReportTest methodsFor: 'no messages' stamp: 'ijgt 5/31/2021 16:15:46'!
test01

	| accountReport anAccount |
	accountReport := Report for: anAccount.
	self assert: (accountReport at: 1) equals: ('Balance: 0')! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/31/2021 16:18:59' prior: 50872913!
test01

	| accountReport |
	accountReport := Report for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!TransferLegs methodsFor: 'testing' stamp: 'ijgt 5/31/2021 16:21:40'!
withdrawLeg

	self shouldBeImplemented! !
!TransferLegs methodsFor: 'testing' stamp: 'ijgt 5/31/2021 16:21:45'!
depositLeg

	self shouldBeImplemented! !
!TransferDepositLeg methodsFor: 'testing' stamp: 'ijgt 5/31/2021 16:22:06' overrides: 50872934!
depositLeg

	^ self! !

!methodRemoval: TransferDepositLeg #depositLeg stamp: 'ijgt 5/31/2021 16:22:58'!
depositLeg

	^ self!

!methodRemoval: TransferLegs #withdrawLeg stamp: 'ijgt 5/31/2021 16:23:13'!
withdrawLeg

	self shouldBeImplemented!

!methodRemoval: TransferLegs #depositLeg stamp: 'ijgt 5/31/2021 16:23:18'!
depositLeg

	self shouldBeImplemented!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:26:22'!
ERROR!
!Report class methodsFor: 'instance creation' stamp: 'ijgt 5/31/2021 16:26:40'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!Report class methodsFor: 'instance creation' stamp: 'ijgt 5/31/2021 16:27:19' prior: 50872972!
for: anAccount
	
	^self new initializeFor: anAccount ! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:27:21'!
ERROR!

!classDefinition: #Report category: 'Portfolio-18' stamp: 'ijgt 5/31/2021 16:27:36'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Report methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:27:36'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!Report methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:29:11' prior: 50872994!
initializeFor: anAccount 
	
	account := anAccount.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:29:13'!
ERROR!
!Report methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:36:05' prior: 50873000!
initializeFor: anAccount 
	
	account := anAccount.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:38:15' prior: 50872921!
test01

	| accountReport |
	accountReport := Report for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!Report class methodsFor: 'instance creation' stamp: 'ijgt 5/31/2021 16:39:22' prior: 50872981!
for: anAccount
	
	^self new initializeFor: anAccount ; report! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:39:50'!
report

! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:39:51' prior: 50873025!
report

	! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:39:53' prior: 50873028!
report

	! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:40:45' prior: 50873031!
report

	^ 'Balance = 0'! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:41:40' prior: 50873012!
test01

	| accountReport |
	accountReport := Report for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:43:04' prior: 50873034!
report

	|aReport|
	aReport := OrderedCollection new.
	aReport add: 'Balance = 0'.
	
	^ aReport! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:43:09'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:44:09'!
test02

	| accountReport |
	accountReport := Report for: (ReceptiveAccount new).
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:47:58' prior: 50873055!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 1.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:48:13' prior: 50873064!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 1.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:48:20' prior: 50873077!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 16:48:23'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 16:48:23'!
FAILURE!
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:52:40' prior: 50873047!
report

	|aReport|
	aReport := OrderedCollection new.
	account transactions = 0 ifFalse: [aReport add: 'Deposit for 100.'].
	aReport add: 'Balance = ', account balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 16:52:44'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:52:47'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 16:52:47'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:52:47'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:52:52'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:52:52'!
FAILURE!
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:53:20' prior: 50873108!
report

	|aReport|
	aReport := OrderedCollection new.
	account transactions isEmpty ifFalse: [aReport add: 'Deposit for 100.'].
	aReport add: 'Balance = ', account balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:53:24'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 16:53:26'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:41:18'!
summary

	! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:41:56' prior: 50873145!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions isEmpty ifFalse: [aReport add: 'Deposit for 100.'].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:42:11' prior: 50873131!
report

	^ account summary! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 21:42:15'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:42:16'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:42:52'!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:43:39' prior: 50873166!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:43:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:45:49' prior: 50873149!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		aReport add: 'Deposit for 100.'
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:46:26' prior: 50873179!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 2) equals: ('Deposit for 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 3.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:47:15' prior: 50873198!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		aReport add: 'Deposit for ', transaction amount asString.
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:48:00' prior: 50873224!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		aReport add: 'Deposit for ', transaction value asString.
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:48:19'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:48:19'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:48:50' prior: 50873207!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100').
	self assert: (accountReport at: 2) equals: ('Deposit for 50').
	self assert: (accountReport at: 3) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:48:53'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:49:00' prior: 50873249!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100').
	self assert: (accountReport at: 2) equals: ('Deposit for 50').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:49:01'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 21:49:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:49:01'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:49:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:49:01'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:49:11'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:49:23' prior: 50873090!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 21:49:28'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:49:28'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:49:28'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:49:57'!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100').
	self assert: (accountReport at: 2) equals: ('Withdraw for 50').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:50:02'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:50:02'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:51:31' prior: 50873234!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: #Deposit) ifTrue: [aReport add: 'Deposit for ', transaction value asString].
		(transaction isKindOf: #Withdraw) ifTrue: [aReport add: 'Withdraw for ', transaction value asString].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:51:37'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:51:37'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:51:58'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:51:58'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:52:16'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:52:57' prior: 50873339!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [aReport add: 'Deposit for ', transaction value asString].
		(transaction isKindOf: Withdraw) ifTrue: [aReport add: 'Withdraw for ', transaction value asString].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:53:03'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 21:53:05'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:53:05'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:53:05'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:53:05'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:57:48'!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100').
	self assert: (accountReport at: 3) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 3.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:57:57' prior: 50873390!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100').
	self assert: (accountReport at: 3) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:58:04' prior: 50873406!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test05 stamp: 'ijgt 5/31/2021 21:58:09'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:58:53' prior: 50873365!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [aReport add: 'Dep�sito por ', transaction value asString].
		(transaction isKindOf: Withdraw) ifTrue: [aReport add: 'Extracci�n por ', transaction value asString].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:59:27' prior: 50873298!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 21:59:31'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:59:32'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:59:49' prior: 50873268!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100').
	self assert: (accountReport at: 2) equals: ('Dep�sito por 50').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:59:52'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 22:00:13' prior: 50873318!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100').
	self assert: (accountReport at: 2) equals: ('Extracci�n por 50').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 22:00:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 22:00:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 22:00:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 22:00:20'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 5/31/2021 22:00:20'!
FAILURE!

!testRun: #ReportTest #test05 stamp: 'ijgt 5/31/2021 22:00:20'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 22:00:26'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 22:00:27'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 22:00:28'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 22:00:29'!
PASSED!

----QUIT----(31 May 2021 22:05:23) CuisUniversity-4532.image priorSource: 17315738!

----STARTUP---- (1 June 2021 15:46:31) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 15:50:21'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 15:50:22'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 15:50:24'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 15:50:25'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 15:50:26'!
FAILURE!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 15:50:26'!
FAILURE!
!Transfer methodsFor: 'initialize' stamp: 'ijgt 6/1/2021 15:54:11' prior: 50872817!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	self assertTransferIsValidFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount.
	withdrawLeg := aReceptiveAccount withdrawTransfer: self.
	depositLeg := aSecondReceptiveAccount depositTransfer: self.
	value := anAmount.
	
	TransferWithdrawLeg register: anAmount on: aReceptiveAccount.
	TransferDepositLeg register: anAmount on: aSecondReceptiveAccount.! !
!TransferLegs class methodsFor: 'creation' stamp: 'ijgt 6/1/2021 15:54:56'!
register: anAmount on: anAccount! !
!TransferLegs class methodsFor: 'creation' stamp: 'ijgt 6/1/2021 16:00:36' prior: 50873569!
register: anAmount on: anAccount

	| transaction |
	
	transaction := self for: anAmount.
	anAccount register: transaction.
	
	^ transaction! !

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:01:10'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:01:11'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:01:11'!
ERROR!
!TransferDepositLeg class methodsFor: 'nil' stamp: 'ijgt 6/1/2021 16:04:24'!
for: aValue

	^ self new initializeFor: aValue ! !
!TransferWithdrawLeg class methodsFor: 'no messages' stamp: 'ijgt 6/1/2021 16:04:38'!
for: aValue

	^ self new initializeFor: aValue ! !
!Transfer methodsFor: 'value' stamp: 'ijgt 6/1/2021 16:08:57' overrides: 16881508!
value

	^ value! !
!TransferDepositLeg methodsFor: 'testing' stamp: 'ijgt 6/1/2021 16:09:25'!
affectBalance: aBalance

	^aBalance + transfer value! !
!TransferLegs methodsFor: 'affectBalance' stamp: 'ijgt 6/1/2021 16:09:57'!
affectBalance: aBalance

	self subclassResponsibility! !
!TransferWithdrawLeg methodsFor: 'affectBalance' stamp: 'ijgt 6/1/2021 16:10:23' overrides: 50873605!
affectBalance: aBalance

	^aBalance + transfer value ! !

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:10:43'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:10:43'!
ERROR!
!TransferLegs class methodsFor: 'creation' stamp: 'ijgt 6/1/2021 16:12:59'!
forTransfer: aTransfer 

	^ self new initializeForTransfer: aTransfer! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 16:12:59' prior: 50872633!
withdrawTransfer: aTransfer

	^ (TransferWithdrawLeg forTransfer: aTransfer ).! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 16:12:59' prior: 50872627!
depositTransfer: aTransfer

	^ (TransferDepositLeg forTransfer: aTransfer ).! !

!methodRemoval: TransferLegs class #forTransfer:withAccount: stamp: 'ijgt 6/1/2021 16:12:59'!
forTransfer: aTransfer withAccount: anAccount

	^ self new initializeForTransfer: aTransfer!
!TransferWithdrawLeg methodsFor: 'affectBalance' stamp: 'ijgt 6/1/2021 16:17:25' prior: 50873610 overrides: 50873605!
affectBalance: aBalance

	^aBalance - transfer value ! !

!methodRemoval: TransferDepositLeg class #for: stamp: 'ijgt 6/1/2021 16:17:37'!
for: aValue

	^ self new initializeFor: aValue !

!methodRemoval: TransferWithdrawLeg class #for: stamp: 'ijgt 6/1/2021 16:17:51'!
for: aValue

	^ self new initializeFor: aValue !
!Transfer methodsFor: 'initialize' stamp: 'ijgt 6/1/2021 16:25:33' prior: 50873552!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	self assertTransferIsValidFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount.
	withdrawLeg := aReceptiveAccount withdrawTransfer: self.
	depositLeg := aSecondReceptiveAccount depositTransfer: self.
	value := anAmount.
	
	aReceptiveAccount register: (TransferWithdrawLeg forTransfer: self).! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'ijgt 6/1/2021 16:30:15' prior: 50873631!
depositTransfer: aTransfer
	
	|transferLeg|
	
	transferLeg := TransferDepositLeg forTransfer: aTransfer.
	self register: transferLeg.
	^ transferLeg.! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'ijgt 6/1/2021 16:30:48' prior: 50873625!
withdrawTransfer: aTransfer

	|transferLeg|
	
	transferLeg := TransferWithdrawLeg forTransfer: aTransfer.
	self register: transferLeg.
	^ transferLeg.! !
!Transfer methodsFor: 'initialize' stamp: 'ijgt 6/1/2021 16:31:14' prior: 50873657!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	self assertTransferIsValidFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount.
	withdrawLeg := aReceptiveAccount withdrawTransfer: self.
	depositLeg := aSecondReceptiveAccount depositTransfer: self.
	value := anAmount.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:33:44' prior: 50873441!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [aReport add: 'Dep�sito por ', transaction value asString].
		(transaction isKindOf: Withdraw) ifTrue: [aReport add: 'Extracci�n por ', transaction value asString].
		(transaction isKindOf: TransferWithdrawLeg) ifTrue: [aReport add: 'Salida por transferencia de ', transaction value asString].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!TransferLegs methodsFor: 'value' stamp: 'ijgt 6/1/2021 16:34:57' overrides: 16881508!
value

	^ transfer value! !

!methodRemoval: TransferLegs class #register:on: stamp: 'ijgt 6/1/2021 16:35:53'!
register: anAmount on: anAccount

	| transaction |
	
	transaction := self for: anAmount.
	anAccount register: transaction.
	
	^ transaction!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:36:07'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 16:36:10'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 16:36:10'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 16:36:10'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:36:10'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:36:10'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:37:45'!
test06

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:38:11' prior: 50873845!
test06

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anotherAccount).
	self assert: (accountReport at: 1) equals: ('Entrada por transferencia de 100').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:38:20'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:38:58' prior: 50873702!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [aReport add: 'Dep�sito por ', transaction value asString].
		(transaction isKindOf: Withdraw) ifTrue: [aReport add: 'Extracci�n por ', transaction value asString].
		(transaction isKindOf: TransferWithdrawLeg) ifTrue: [aReport add: 'Salida por transferencia de ', transaction value asString].
		(transaction isKindOf: TransferDepositLeg) ifTrue: [aReport add: 'Entrada por transferencia de ', transaction value asString].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:39:06'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:42:22'!
test07

	| accountReport |
	accountReport := Report for: Portfolio new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:42:29'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:45:18'!
summary

	! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:45:37' prior: 50873928!
summary

	^ 'Balance = 0'! !

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:45:48'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:45:48'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:46:59' prior: 50873931!
summary

	|aReport|
	aReport := OrderedCollection new.
	aReport add: 'Balance = 0'.
	
	^ aReport! !

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:47:05'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:50:21'!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio new.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Dep�sito por 100').
	self assert: (portfolioReport at: 2) equals: ('Extracci�n por 50').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 3.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:50:58' prior: 50873947!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Dep�sito por 100').
	self assert: (portfolioReport at: 2) equals: ('Extracci�n por 50').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 3.! !

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:50:59'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:55:40' prior: 50873939!
summary

	|aReport|
	aReport := OrderedCollection new.
	accounts do: [:account | aReport addAll: account summary].
	aReport add: 'Balance =', self balance asString
	
	^ aReport! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:55:42' prior: 50873986!
summary

	|aReport|
	aReport := OrderedCollection new.
	accounts do: [:account | aReport addAll: account summary].
	aReport add: 'Balance =', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:55:49'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:55:49'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:56:15' prior: 50873965!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Dep�sito por 100').
	self assert: (portfolioReport at: 2) equals: ('Extracci�n por 50').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.! !

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:56:17'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:56:17'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:57:02'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:57:02'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:57:29' prior: 50873995!
summary

	|aReport|
	aReport := OrderedCollection new.
	accounts do: [:account | aReport addAll: account summary].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:57:37'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:57:39'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:58:07' prior: 50874008!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Dep�sito por 100').
	self assert: (portfolioReport at: 2) equals: ('Extracci�n por 50').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.! !

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!
!Account methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:58:42'!
summary
	
	self subclassResponsibility! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransferLegs category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 16:59:32'!
AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

TransferLegs class
	instanceVariableNames: ''!

!classDefinition: 'TransferLegs class' category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:03:33'!
TransferLegs class
	instanceVariableNames: ''!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:07:41' prior: 50873880 overrides: 50874109!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [aReport add: 'Dep�sito por ', transaction value asString, '.'].
		(transaction isKindOf: Withdraw) ifTrue: [aReport add: 'Extracci�n por ', transaction value asString,'.'].
		(transaction isKindOf: TransferWithdrawLeg) ifTrue: [aReport add: 'Salida por transferencia de ', transaction value asString, '.'].
		(transaction isKindOf: TransferDepositLeg) ifTrue: [aReport add: 'Entrada por transferencia de ', transaction value asString, '.'].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:07:55'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:07:55'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:00' prior: 50873456!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:08:01'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:08:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:08:01'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:08:01'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:08:01'!
FAILURE!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:08:01'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:08:01'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:08:01'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:08:01'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:15' prior: 50873474!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Dep�sito por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 150.').
	self assert: (accountReport size) equals: 3.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:23' prior: 50873493!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Extracci�n por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 50.').
	self assert: (accountReport size) equals: 3.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:29' prior: 50873422!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:34' prior: 50873861!
test06

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anotherAccount).
	self assert: (accountReport at: 1) equals: ('Entrada por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:47' prior: 50874069!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (portfolioReport at: 2) equals: ('Extracci�n por 50.').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50.').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50.').
	self assert: (portfolioReport size) equals: 4.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:08:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:08:50'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:08:50'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:08:50'!
FAILURE!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:08:50'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:08:50'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:08:50'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:08:50'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:09:09'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:09:24' prior: 50874431!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Dep�sito por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:09:25'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:09:27'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:09:34' prior: 50874448!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Extracci�n por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:09:36'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:09:38'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:09:46' prior: 50874498!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (portfolioReport at: 2) equals: ('Extracci�n por 50.').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.! !

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:09:51'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:13:49' prior: 50874369 overrides: 50874109!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		aReport add: transaction asStringForSummary.
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!AccountTransaction methodsFor: 'summary' stamp: 'ijgt 6/1/2021 17:14:10'!
asStringForSummary

	self subclassResponsibility! !
!Deposit methodsFor: 'balance' stamp: 'ijgt 6/1/2021 17:15:30' overrides: 50874614!
asStringForSummary

	^ 'Dep�sito por ', value asString, '.'! !
!TransferLegs methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:16:22' overrides: 50874614!
asStringForSummary

	self subclassResponsibility! !
!Withdraw methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:17:44' overrides: 50874614!
asStringForSummary

	^ 'Extracci�n por ', value asString,'.'! !
!TransferDepositLeg methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:18:37' overrides: 50874624!
asStringForSummary

	^ 'Entrada por transferencia de ', transfer value asString, '.'! !
!TransferWithdrawLeg methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:19:21' overrides: 50874624!
asStringForSummary

	^ 'Salida por transferencia de ', transfer value asString, '.'! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:19:59' prior: 50874605 overrides: 50874109!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction| aReport add: transaction asStringForSummary].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:28:11' prior: 50873038!
test01

	! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 5/31/2021 16:41:40' prior: 50874675!
test01

	| accountReport |
	accountReport := Report for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:30:27'!
test09

	! !

!classRenamed: #Report as: #Summary stamp: 'ijgt 6/1/2021 17:32:52'!
Smalltalk renameClassNamed: #Report as: #Summary!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874539!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Dep�sito por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874465!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874397!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874481!
test06

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anotherAccount).
	self assert: (accountReport at: 1) equals: ('Entrada por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874560!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Extracci�n por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874581!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Summary for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (portfolioReport at: 2) equals: ('Extracci�n por 50.').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874679!
test01

	| accountReport |
	accountReport := Summary for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50873918!
test07

	| accountReport |
	accountReport := Summary for: Portfolio new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/1/2021 17:33:06'!
PASSED!

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Report category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:33:28'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Report category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:33:48'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Report subclass: #Summary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Summary category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:34:04'!
Report subclass: #Summary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Report methodsFor: 'no messages' stamp: 'ijgt 6/1/2021 17:35:06'!
report

	self subclassResponsibility! !

!classDefinition: #NetTransfer category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:39:19'!
Report subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:38:57' prior: 50874688!
test09

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')! !
!Report class methodsFor: 'no messages' stamp: 'ijgt 6/1/2021 17:40:43'!
for: anAccount
	
	^self new initializeFor: anAccount ; report! !

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Report subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Summary category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:41:13'!
Report subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Report category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:41:20'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!methodRemoval: Summary class #for: stamp: 'ijgt 6/1/2021 17:41:47'!
for: anAccount
	
	^self new initializeFor: anAccount ; report!
!Report methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:42:40'!
initializeFor: anAccount 
	
	account := anAccount.! !

!methodRemoval: Summary #initializeFor: stamp: 'ijgt 6/1/2021 17:42:59'!
initializeFor: anAccount 
	
	account := anAccount.!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!
!NetTransfer methodsFor: 'no messages' stamp: 'ijgt 6/1/2021 17:43:43' overrides: 50874869!
report

	! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:43:59' prior: 50874950 overrides: 50874869!
report

	^ 'El neto de transferencias es: 0'! !

!testRun: #ReportTest #test09 stamp: 'ijgt 6/1/2021 17:44:10'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:45:38'!
test10

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 50')! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:46:02' prior: 50874962!
test10

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	
	self assert: accountReport equals: ('El neto de transferencias es: 50')! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:47:13' prior: 50874970!
test10

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anotherAccount.
	self assert: accountReport equals: ('El neto de transferencias es: 50')! !

!testRun: #ReportTest #test10 stamp: 'ijgt 6/1/2021 17:47:27'!
FAILURE!
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:50:28' prior: 50874955 overrides: 50874869!
report

	^ account netTransfer! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:54:58'!
netTransfer

	|balanceTransfer|
	balanceTransfer := transactions sum: [:transaction | transaction valueAsTransfer] ifEmpty: [0].
	^ 'El neto de transferencias es: ', balanceTransfer asString.! !
!AccountTransaction methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:55:27'!
valueAsTransfer

	self subclassResponsibility! !
!Deposit methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:57:35' overrides: 50875007!
valueAsTransfer

	! !
!Deposit methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:57:48' prior: 50875012 overrides: 50875007!
valueAsTransfer

	^ 0! !
!Withdraw methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:58:15' overrides: 50875007!
valueAsTransfer

	^ 0! !
!TransferLegs methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:59:21' overrides: 50875007!
valueAsTransfer

	self subclassResponsibility ! !
!TransferDepositLeg methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:59:54' overrides: 50875024!
valueAsTransfer

	^ transfer value! !
!TransferWithdrawLeg methodsFor: 'report' stamp: 'ijgt 6/1/2021 18:00:28' overrides: 50875024!
valueAsTransfer

	^ -1*(transfer value)! !

!testRun: #ReportTest #test09 stamp: 'ijgt 6/1/2021 18:00:50'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/1/2021 18:00:52'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/1/2021 18:01:05'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 18:01:54'!
test11

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anAccount.
	self assert: accountReport equals: ('El neto de transferencias es: -50')! !

!testRun: #ReportTest #test11 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

----QUIT----(1 June 2021 18:07:10) CuisUniversity-4532.image priorSource: 17340206!

----STARTUP---- (2 June 2021 18:02:09) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!

!TransferLegs methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:50'!
asStringForSummary: aSummary

	self subclassResponsibility! !
!TransferDepositLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:51' overrides: 50875233!
asStringForSummary: aSummary

	^ 'Entrada por transferencia de ', transfer value asString, '.'! !
!Deposit methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary: aSummary

	^ 'Dep�sito por ', value asString, '.'! !
!TransferWithdrawLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:51' overrides: 50875233!
asStringForSummary: aSummary

	^ 'Salida por transferencia de ', transfer value asString, '.'! !
!Withdraw methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary: aSummary

	^ 'Extracci�n por ', value asString,'.'! !
!AccountTransaction methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary: aSummary

	self subclassResponsibility! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 18:19:51' prior: 50874665 overrides: 50874109!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction| aReport add: transaction asStringForSummary: aSummary].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!methodRemoval: TransferLegs #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	self subclassResponsibility!

!methodRemoval: TransferDepositLeg #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	^ 'Entrada por transferencia de ', transfer value asString, '.'!

!methodRemoval: Deposit #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	^ 'Dep�sito por ', value asString, '.'!

!methodRemoval: TransferWithdrawLeg #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	^ 'Salida por transferencia de ', transfer value asString, '.'!

!methodRemoval: Withdraw #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	^ 'Extracci�n por ', value asString,'.'!

!methodRemoval: AccountTransaction #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	self subclassResponsibility!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:20:58' prior: 50875267 overrides: 50874109!
summary

	|aSummary|
	aSummary := OrderedCollection new.
	transactions do: [:transaction| aSummary add: (transaction asStringForSummary: aSummary)].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!Deposit methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:21:48' prior: 50875244 overrides: 50875261!
asStringForSummary: aSummary

	^ aSummary reportDeposit: self! !
!Summary methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:22:33'!
reportDeposit: aDeposit

	^ 'Dep�sito por ', aDeposit value asString, '.'! !
!Summary methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:23:09'!
reportWithdraw: aWithdraw

	^ 'Extracci�n por ', aWithdraw value asString, '.'! !
!Summary methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:24:30'!
reportTransferDeposit: aTransfer

	^ 'Entrada por transferencia de ', aTransfer value asString, '.'! !
!Summary methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:24:49'!
reportTransferWithdraw: aTransfer

	^ 'Salida por transferencia de ', aTransfer value asString, '.'! !
!Withdraw methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:25:28' prior: 50875256 overrides: 50875261!
asStringForSummary: aSummary

	^ aSummary reportWithdraw: self! !
!TransferDepositLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:26:04' prior: 50875238 overrides: 50875233!
asStringForSummary: aSummary

	^ aSummary reportTransferDeposit: self! !
!TransferWithdrawLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:26:32' prior: 50875250 overrides: 50875233!
asStringForSummary: aSummary

	^ aSummary reportTransferWithdraw: self! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:26:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:26:50'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:26:54'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:32:11' prior: 50874056 overrides: 50874109!
summary

	|aReport|
	aReport := OrderedCollection new.
	accounts do: [:account | aReport addAll: account summary].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:32:29' prior: 50875381 overrides: 50874109!
summary

	|aSummary|
	aSummary := OrderedCollection new.
	accounts do: [:account | aSummary addAll: account summary].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:33:04'!
summary: aReport

	|aSummary|
	aSummary := OrderedCollection new.
	transactions do: [:transaction| aSummary add: (transaction asStringForSummary: aSummary)].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:33:04'!
summary: aReport

	|aSummary|
	aSummary := OrderedCollection new.
	accounts do: [:account | aSummary addAll: account summary].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!Account methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:33:04'!
summary: aReport
	
	self subclassResponsibility! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 18:33:04' prior: 50875390 overrides: 50874109!
summary

	|aSummary|
	aSummary := OrderedCollection new.
	accounts do: [:account | aSummary addAll: account summary: nil].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!Summary methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 18:33:04' prior: 50873158 overrides: 50874869!
report

	^ account summary: nil! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 18:33:04' prior: 50875409 overrides: 50875418!
summary: aReport

	|aSummary|
	aSummary := OrderedCollection new.
	accounts do: [:account | aSummary addAll: account summary: nil].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !

!methodRemoval: ReceptiveAccount #summary stamp: 'ijgt 6/2/2021 18:33:04'!
summary

	|aSummary|
	aSummary := OrderedCollection new.
	transactions do: [:transaction| aSummary add: (transaction asStringForSummary: aSummary)].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary!

!methodRemoval: Portfolio #summary stamp: 'ijgt 6/2/2021 18:33:04'!
summary

	|aSummary|
	aSummary := OrderedCollection new.
	accounts do: [:account | aSummary addAll: account summary: nil].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary!

!methodRemoval: Account #summary stamp: 'ijgt 6/2/2021 18:33:04'!
summary
	
	self subclassResponsibility!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:33:42' prior: 50875399 overrides: 50875418!
summary: aSummary

	transactions do: [:transaction| aSummary add: (transaction asStringForSummary: aSummary)].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:35:07' prior: 50875470 overrides: 50875418!
summary: aSummary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction| aReport add: (transaction asStringForSummary: aSummary)].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:35:54'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:35:54'!
ERROR!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:35:54'!
ERROR!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:35:54'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:35:54'!
ERROR!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:35:55'!
ERROR!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:35:55'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:35:55'!
ERROR!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:35:58'!
ERROR!
!Summary methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:36:25' prior: 50875434 overrides: 50874869!
report

	^ account summary: self! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:36:40'!
ERROR!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:36:40'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:38:14' prior: 50875439 overrides: 50875418!
summary: aSummary

	|aReport|
	aReport := OrderedCollection new.
	accounts do: [:account | aReport addAll: (account summary: aSummary)].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:56:25'!
netTransfer: aNetTransfer

	|balanceTransfer|
	balanceTransfer := transactions sum: [:transaction | transaction valueAsTransfer] ifEmpty: [0].
	^ 'El neto de transferencias es: ', balanceTransfer asString.! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 18:56:25' prior: 50874994 overrides: 50874869!
report

	^ account netTransfer: nil! !

!methodRemoval: ReceptiveAccount #netTransfer stamp: 'ijgt 6/2/2021 18:56:25'!
netTransfer

	|balanceTransfer|
	balanceTransfer := transactions sum: [:transaction | transaction valueAsTransfer] ifEmpty: [0].
	^ 'El neto de transferencias es: ', balanceTransfer asString.!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:56:54' prior: 50875737!
netTransfer: aNetTransfer

	|balanceTransfer|
	balanceTransfer := transactions sum: [:transaction | transaction valueAsTransfer: aNetTransfer] ifEmpty: [0].
	^ 'El neto de transferencias es: ', balanceTransfer asString.! !
!Withdraw methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer: aNetTransfer

	^ 0! !
!TransferLegs methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer: aNetTransfer

	self subclassResponsibility ! !
!TransferWithdrawLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28' overrides: 50875774!
valueAsTransfer: aNetTransfer

	^ -1*(transfer value)! !
!AccountTransaction methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer: aNetTransfer

	self subclassResponsibility! !
!Deposit methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28' overrides: 50875784!
valueAsTransfer: aNetTransfer

	^ 0! !
!TransferDepositLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28' overrides: 50875774!
valueAsTransfer: aNetTransfer

	^ transfer value! !

!methodRemoval: Withdraw #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	^ 0!

!methodRemoval: TransferLegs #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	self subclassResponsibility !

!methodRemoval: TransferWithdrawLeg #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	^ -1*(transfer value)!

!methodRemoval: AccountTransaction #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	self subclassResponsibility!

!methodRemoval: Deposit #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	^ 0!

!methodRemoval: TransferDepositLeg #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	^ transfer value!
!Deposit methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:59:38' prior: 50875789 overrides: 50875784!
valueAsTransfer: aNetTransfer

	^ aNetTransfer netTransferValueForDeposit! !
!Withdraw methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:00:02' prior: 50875770 overrides: 50875784!
valueAsTransfer: aNetTransfer

	^ aNetTransfer netTransferValueForWithdraw! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:00:22' prior: 50875748 overrides: 50874869!
report

	^ account netTransfer: self! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:00:36'!
netTransferValueForDeposit

	^ 0! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:00:43'!
netTransferValueForWithdraw

	^ 0! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:01:46'!
netTransferValueForTransferDeposit: aTransferDepositLeg

	^ 0! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:01:57'!
netTransferValueForTransferWithdraw: aTransferWithdrawLeg

	^ 0! !
!TransferDepositLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:03:10' prior: 50875794 overrides: 50875774!
valueAsTransfer: aNetTransfer

	^ aNetTransfer netTransferValueForTransferDeposit: transfer! !
!TransferWithdrawLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:03:44' prior: 50875779 overrides: 50875774!
valueAsTransfer: aNetTransfer

	^ aNetTransfer netTransferValueForTransferWithdraw: transfer! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:04:24' prior: 50875850!
netTransferValueForTransferWithdraw: aTransferWithdrawLeg

	^ (-1)*aTransferWithdrawLeg value! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:05:37' prior: 50875869!
netTransferValueForTransferWithdraw: aTransfer

	^ (-1)*aTransfer value! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:05:44' prior: 50875845!
netTransferValueForTransferDeposit: aTransfer

	^ 0! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:05:51' prior: 50875880!
netTransferValueForTransferDeposit: aTransfer

	^ aTransfer value! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:06:00'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:06:00'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:06:00'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:06:02'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:06:02'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:06:02'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:08:59'!
test12

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')! !

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:09:05'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 19:09:29'!
netTransfer: aNetTransfer 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:09:57' prior: 50876064!
netTransfer: aNetTransfer

	^ ''! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:10:29' prior: 50876069!
netTransfer: aNetTransfer

	^ 'El neto de transferencias es: -50'! !

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:10:41'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:10:41'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:10:41'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:10:41'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:10:53'!
test13

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:11:08' prior: 50876087!
test13

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 50')! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:11:18' prior: 50876102!
test13

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 50')! !

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 19:12:39'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:14:40' prior: 50876073!
netTransfer: aNetTransfer

	! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:10:29' prior: 50876134!
netTransfer: aNetTransfer

	^ 'El neto de transferencias es: -50'! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:21:15' prior: 50876138!
netTransfer: aNetTransfer

	|balanceTransfer|
	balanceTransfer := accounts sum: [:account | account netTransferValue: aNetTransfer] ifEmpty: [0].
	^ 'El neto de transferencias es: ', balanceTransfer asString.! !
!Account methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:21:51'!
netTransfer: aNetTransfer

	self subclassResponsibility ! !
!Account methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:22:03'!
netTransferValue: aNetTransfer

	self subclassResponsibility ! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:23:07' overrides: 50876156!
netTransferValue: aNetTransfer

	^ accounts sum: [:account | account netTransferValue: aNetTransfer] ifEmpty: [0].
! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:23:38' overrides: 50876156!
netTransferValue: aNetTransfer

	^ transactions sum: [:transaction | transaction valueAsTransfer: aNetTransfer] ifEmpty: [0].! !

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:24:05'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:24:05'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:24:05'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:24:05'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 19:24:05'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:24:56'!
test14

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 0')! !

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:26:06' prior: 50875761 overrides: 50876152!
netTransfer: aNetTransfer

	^ 'El neto de transferencias es: ', (self netTransferValue: aNetTransfer) asString.! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:26:33' prior: 50876143 overrides: 50876152!
netTransfer: aNetTransfer

	^ 'El neto de transferencias es: ', self netTransferValue: aNetTransfer asString.! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:26:43' prior: 50876243 overrides: 50876152!
netTransfer: aNetTransfer

	^ 'El neto de transferencias es: ', (self netTransferValue: aNetTransfer) asString.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:32:04'!
test015

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:32:18'!
test15

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')! !

!methodRemoval: ReportTest #test015 stamp: 'ijgt 6/2/2021 19:32:18'!
test015

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')!

!classDefinition: #PortfolioStructure category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 19:39:39'!
Report subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReportTest methodsFor: 'tests bonus' stamp: 'ijgt 6/2/2021 19:39:21' prior: 50876396!
test15

	| anAccount aPortfolio|
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	self assert: (PortfolioStructure for: aPortfolio) equals: ('El neto de transferencias es: 0')! !
!ReportTest methodsFor: 'tests bonus' stamp: 'ijgt 6/2/2021 19:42:29' prior: 50876419!
test15

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 19:47:46'!
named: aName with: anAccount

	^self new initializeWithName: aName;
		add: anAccount ;
		yourself
	! !

!classDefinition: #Portfolio category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 19:48:43'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Portfolio methodsFor: 'initialization' stamp: 'ijgt 6/2/2021 19:48:37'!
initializeWithName: aName

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := aName.! !
!Portfolio methodsFor: 'initialization' stamp: 'ijgt 6/2/2021 19:49:37' prior: 50871253 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := ''.! !
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'ijgt 6/2/2021 19:51:12'!
named: aName

	^ self new initializeWithName: aName! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 19:52:56'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'ijgt 6/2/2021 19:52:54'!
initializeWithName: aName

	super initialize.
	transactions := OrderedCollection new.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'ijgt 6/2/2021 19:53:16' prior: 50871368 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	name := ''.! !
!PortfolioStructure methodsFor: 'no messages' stamp: 'ijgt 6/2/2021 19:54:13' overrides: 50874869!
report

	! !
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:54:31' prior: 50876499 overrides: 50874869!
report

	! !
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:54:53' prior: 50876503 overrides: 50874869!
report

	^ String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta'
  	].! !

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 19:54:57'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!
!ReportTest methodsFor: 'tests bonus' stamp: 'ijgt 6/2/2021 19:59:52'!
test16

	| anAccount anotherAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 19:59:56'!
FAILURE!
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:05:06'!
reportReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString. 
  		(Summary for: aReceptiveAccount) do: [:aLine | str 
			nextPutAll: String tab,aLine,String newLineString.
		]. 
	].
 	^ portfolioStructureString allButLast.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:05:53'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:05:53'!
FAILURE!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:05:53'!
FAILURE!
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:17:38'!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

 	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	].
 	^portfolioStructureString allButLast .! !
!Account methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:18:37'!
portfolioStructureReport: aPortfolioStructureReport! !
!Account methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:18:46' prior: 50876643!
portfolioStructureReport: aPortfolioStructureReport

	self subclassResponsibility! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:19:45' overrides: 50876648!
portfolioStructureReport: aPortfolioStrutureReport

	^ aPortfolioStrutureReport reportPortfolio: self withAccounts: accounts! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:20:17' overrides: 50876648!
portfolioStructureReport: aPortfolioStrutureReport

	^ aPortfolioStrutureReport reportReceptiveAccount: self! !
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:21:45' prior: 50876507 overrides: 50874869!
report

	^ account portfolioStructureReport: self! !

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:23:54'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:23:54'!
FAILURE!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:24:01'!
FAILURE!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:24:01'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:24:15'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:24:15'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:26:05'!
FAILURE!

(PortfolioStructure for: aPortfolio)!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 20:28:42'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Portfolio category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 20:28:47'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Account category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 20:28:53'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Account methodsFor: 'testing' stamp: 'ijgt 6/2/2021 20:29:05' overrides: 16882612!
name

	^ name! !

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:29:15'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:29:15'!
FAILURE!

(PortfolioStructure for: aPortfolio)!

(PortfolioStructure for: aPortfolio)!
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:34:57' prior: 50876575!
reportReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
	].
 	^ portfolioStructureString allButLast.! !

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:35:05'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:35:07'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!
!ReportTest methodsFor: 'tests bonus' stamp: 'ijgt 6/2/2021 20:40:49'!
test17

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests bonus' stamp: 'ijgt 6/2/2021 20:41:18' prior: 50876954!
test17

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test17 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test17 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:46:24'!
test01summaryEmptyAccount

	| accountReport |
	accountReport := Summary for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !

!methodRemoval: ReportTest #test01 stamp: 'ijgt 6/2/2021 20:46:24'!
test01

	| accountReport |
	accountReport := Summary for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:46:43'!
PASSED!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:47:24'!
test02summaryAccountWithDeposit

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!methodRemoval: ReportTest #test02 stamp: 'ijgt 6/2/2021 20:47:24'!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:50:03'!
test03summaryTwoDeposits

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Dep�sito por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.! !

!methodRemoval: ReportTest #test03 stamp: 'ijgt 6/2/2021 20:50:03'!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Dep�sito por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:50:25'!
test04summaryDepositAndWithdraw

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Extracci�n por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.! !

!methodRemoval: ReportTest #test04 stamp: 'ijgt 6/2/2021 20:50:25'!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (accountReport at: 2) equals: ('Extracci�n por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:50:49'!
test05summaryTransferWithdraw

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !

!methodRemoval: ReportTest #test05 stamp: 'ijgt 6/2/2021 20:50:49'!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:51:08'!
test06summaryTransferDeposit

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anotherAccount).
	self assert: (accountReport at: 1) equals: ('Entrada por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!methodRemoval: ReportTest #test06 stamp: 'ijgt 6/2/2021 20:51:08'!
test06

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anotherAccount).
	self assert: (accountReport at: 1) equals: ('Entrada por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:53:14'!
test07summaryPortfolioEmpty

	| accountReport |
	accountReport := Summary for: Portfolio new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !

!methodRemoval: ReportTest #test07 stamp: 'ijgt 6/2/2021 20:53:14'!
test07

	| accountReport |
	accountReport := Summary for: Portfolio new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:53:40'!
test08summaryPortfolioFull

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Summary for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (portfolioReport at: 2) equals: ('Extracci�n por 50.').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.! !

!methodRemoval: ReportTest #test08 stamp: 'ijgt 6/2/2021 20:53:40'!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Summary for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Dep�sito por 100.').
	self assert: (portfolioReport at: 2) equals: ('Extracci�n por 50.').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:54:08'!
test09netTransferAccountEmpty

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')! !

!methodRemoval: ReportTest #test09 stamp: 'ijgt 6/2/2021 20:54:08'!
test09

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:55:03'!
test10netTransferAccountWithTransfers

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anotherAccount.
	self assert: accountReport equals: ('El neto de transferencias es: 50')! !

!methodRemoval: ReportTest #test10 stamp: 'ijgt 6/2/2021 20:55:03'!
test10

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anotherAccount.
	self assert: accountReport equals: ('El neto de transferencias es: 50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:55:45'!
test10netTransferAccountWithTransferDeposit

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anotherAccount.
	self assert: accountReport equals: ('El neto de transferencias es: 50')! !

!methodRemoval: ReportTest #test10netTransferAccountWithTransfers stamp: 'ijgt 6/2/2021 20:55:45'!
test10netTransferAccountWithTransfers

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anotherAccount.
	self assert: accountReport equals: ('El neto de transferencias es: 50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:55:58'!
test11netTransferAccountWithTransferWithdraw

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anAccount.
	self assert: accountReport equals: ('El neto de transferencias es: -50')! !

!methodRemoval: ReportTest #test11 stamp: 'ijgt 6/2/2021 20:55:58'!
test11

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anAccount.
	self assert: accountReport equals: ('El neto de transferencias es: -50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:59:02'!
test12netTransfer

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')! !

!methodRemoval: ReportTest #test12 stamp: 'ijgt 6/2/2021 20:59:02'!
test12

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:59:40'!
test12netTransferPortfolioOneTransferAccount

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')! !

!methodRemoval: ReportTest #test12netTransfer stamp: 'ijgt 6/2/2021 20:59:40'!
test12netTransfer

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 21:00:08'!
test12netTransferPortfolioWithTransferWithdraw

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')! !

!methodRemoval: ReportTest #test12netTransferPortfolioOneTransferAccount stamp: 'ijgt 6/2/2021 21:00:08'!
test12netTransferPortfolioOneTransferAccount

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 21:00:34'!
test13netTransferPortfolioWithTransferWithdraw

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 50')! !

!methodRemoval: ReportTest #test13 stamp: 'ijgt 6/2/2021 21:00:34'!
test13

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 21:01:59'!
test14netTransferPortfolioTransferBetweenAccounts

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 0')! !

!methodRemoval: ReportTest #test14 stamp: 'ijgt 6/2/2021 21:01:59'!
test14

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 0')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 21:02:15'!
test14netTransferPortfolioTransferBetweenChildren

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 0')! !

!methodRemoval: ReportTest #test14netTransferPortfolioTransferBetweenAccounts stamp: 'ijgt 6/2/2021 21:02:15'!
test14netTransferPortfolioTransferBetweenAccounts

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 0')!
!ReportTest methodsFor: 'tests portfolioStructure' stamp: 'ijgt 6/2/2021 21:03:26'!
test15portfolioStructureOneAccount

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !

!methodRemoval: ReportTest #test15 stamp: 'ijgt 6/2/2021 21:03:26'!
test15

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString!
!ReportTest methodsFor: 'tests portfolioStructure' stamp: 'ijgt 6/2/2021 21:03:45'!
test16portfolioStructureTwoAccounts

	| anAccount anotherAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !

!methodRemoval: ReportTest #test16 stamp: 'ijgt 6/2/2021 21:03:46'!
test16

	| anAccount anotherAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString!
!ReportTest methodsFor: 'tests portfolioStructure' stamp: 'ijgt 6/2/2021 21:04:17'!
test17portfolioStructureStackedPortfolio

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!methodRemoval: ReportTest #test17 stamp: 'ijgt 6/2/2021 21:04:17'!
test17

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

----QUIT----(2 June 2021 21:07:19) CuisUniversity-4532.image priorSource: 17394458!

----STARTUP---- (3 June 2021 15:36:12) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


Report subclass: #TransactionsStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransactionsStructure category: 'Portfolio-18' stamp: 'ijgt 6/3/2021 15:46:16'!
Report subclass: #TransactionsStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReportTest methodsFor: 'tests portfolioStructure' stamp: 'ijgt 6/3/2021 15:47:14'!
test18

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 15:49:23' prior: 50877869!
test18

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 15:49:26'!
ERROR!
!TransactionsStructure methodsFor: 'no messages' stamp: 'ijgt 6/3/2021 15:50:42'!
reportWithReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
	].
 	^ portfolioStructureString allButLast.! !
!TransactionsStructure methodsFor: 'as yet unclassified' stamp: 'ijgt 6/3/2021 15:51:20'!
reportReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
	].
 	^ portfolioStructureString allButLast.! !

!methodRemoval: TransactionsStructure #reportWithReceptiveAccount: stamp: 'ijgt 6/3/2021 15:51:20'!
reportWithReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
	].
 	^ portfolioStructureString allButLast.!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:52:07' overrides: 50874869!
report

	^ self reportReceptiveAccount: account! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:53:22' prior: 50877940 overrides: 50874869!
report

	^ self reportPortfolio: account! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:54:10' prior: 50877946 overrides: 50874869!
report

	^ account! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:54:35' prior: 50877951 overrides: 50874869!
report

	^ account transactionsStructureReport: self! !
!Account methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:55:10'!
transactionsStructureReport: aTransactionsStructureReport

	self subclassResponsibility! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:56:08' overrides: 50877960!
transactionsStructureReport: aTransactionsStrutureReport

	^ aTransactionsStrutureReport reportPortfolio: self withAccounts: accounts! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:56:29' overrides: 50877960!
transactionsStructureReport: aTransactionsStrutureReport

	^ aTransactionsStrutureReport reportReceptiveAccount: self! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:57:25'!
reportPortfolio: aPortfolio withAccounts: accounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | | aReceptiveAccount | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
	].
 	^ portfolioStructureString allButLast.! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:58:05' prior: 50877981!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	].
 	^portfolioStructureString allButLast .! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 15:58:14'!
FAILURE!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 15:58:14'!
FAILURE!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:59:47' prior: 50877918!
reportReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
		(Summary with: aReceptiveAccount) do: [:aLine | str nextPutAll: String tab,aLine,String newLineString.]. 
	].
 	^ portfolioStructureString allButLast.! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 15:59:58'!
ERROR!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 15:59:58'!
ERROR!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:00:37' prior: 50878014!
reportReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
		(Summary for: aReceptiveAccount) do: [:aLine | str 
			nextPutAll: String tab,aLine,String newLineString.
		]. 
	].
 	^ portfolioStructureString allButLast.! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:00:45'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:00:53'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:00:53'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:00:53'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:01:27'!
test19

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:02:06' prior: 50878103!
test19

	! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:04:58' prior: 50878123!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 0', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta';
		nextPutAll: String tab, String tab,String tab,'Balance = 0', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 0', String newLineString ;
		nextPutAll: String tab, 'Balance = 0', String newLineString.
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:06:02' prior: 50878127!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta';
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:06:22' prior: 50877886!
test18

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0';
		nextPutAll: String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:08:43' prior: 50877993!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
		str nextPutAll: aPortfolio balance asString
  	].
 	^portfolioStructureString allButLast .! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:10:40' prior: 50878229!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
		str nextPutAll: 'Balance = ', aPortfolio balance asString
  	].
 	^portfolioStructureString allButLast .! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:10:50'!
FAILURE!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:10:50'!
FAILURE!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:11:58' prior: 50878247!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
		str allButLast.
		str nextPutAll: 'Balance = ', aPortfolio balance asString
  	].
 	^portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:12:03'!
ERROR!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:12:03'!
ERROR!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:13:50' prior: 50878270!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].

  	].
	portfolioStructureString allButLast.
	portfolioStructureString add: 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:13:56'!
ERROR!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:13:56'!
ERROR!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:14:26' prior: 50878293!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].

  	].
	portfolioStructureString allButLast.
	portfolioStructureString nextPutAll: 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:14:32'!
ERROR!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:14:32'!
ERROR!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:16:32' prior: 50878317!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].

  	].
	portfolioStructureString allButLast.
	portfolioStructureString := portfolioStructureString, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:16:40'!
FAILURE!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:16:40'!
FAILURE!

TransactionsStructure for: aPortfolio!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:17:35' prior: 50878342!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].

  	].
	portfolioStructureString allButLast.
	portfolioStructureString := portfolioStructureString, String tab, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:17:42'!
FAILURE!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:17:42'!
FAILURE!

TransactionsStructure for: aPortfolio!

portfolioStructureString!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:18:56' prior: 50878208!
test18

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0', String newLineString;
		nextPutAll: String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:18:58'!
PASSED!

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:19:02'!
FAILURE!

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:19:02'!
FAILURE!

PortfolioStructure for: aSecondPortfolio!

portfolioStructureString!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:20:03' prior: 50878166!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:20:11' prior: 50878428!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:20:13'!
FAILURE!

TransactionsStructure for: aSecondPortfolio!

portfolioStructureString!

TransactionsStructure for: aSecondPortfolio!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:21:55' prior: 50878470!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Deposito por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:22:34' prior: 50878518!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Deposito por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada de transferencia por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:22:59' prior: 50878563!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Deposito por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada de transferencia por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:23:05'!
FAILURE!

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:23:05'!
FAILURE!

portfolioStructureString!

TransactionsStructure for: aSecondPortfolio!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:24:28' prior: 50878611!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Dep�sito por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:24:29'!
FAILURE!

portfolioStructureString!

TransactionsStructure for: aSecondPortfolio!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:25:30' prior: 50878670!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Dep�sito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:25:31'!
FAILURE!

portfolioStructureString!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:26:09' prior: 50878726!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Dep�sito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100'.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:26:10'!
PASSED!

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:26:12'!
PASSED!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:26:53' prior: 50878781!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Dep�sito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100'.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:26:54'!
ERROR!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:27:10' prior: 50878837!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Dep�sito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100'.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:27:14'!
PASSED!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:27:58'!
test18transactionsStructureEmptyPortfolio

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0', String newLineString;
		nextPutAll: String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString! !

!methodRemoval: ReportTest #test18 stamp: 'ijgt 6/3/2021 16:27:58'!
test18

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0', String newLineString;
		nextPutAll: String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:28:20'!
test19transactionsStructureStackedPortfolio

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Dep�sito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100'.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!methodRemoval: ReportTest #test19 stamp: 'ijgt 6/3/2021 16:28:20'!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Dep�sito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100'.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

Report subclass: #Structure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Structure category: 'Portfolio-18' stamp: 'ijgt 6/3/2021 16:29:50'!
Report subclass: #Structure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Structure subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #PortfolioStructure category: 'Portfolio-18' stamp: 'ijgt 6/3/2021 16:30:00'!
Structure subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classRenamed: #Structure as: #StructureReport stamp: 'ijgt 6/3/2021 16:30:26'!
Smalltalk renameClassNamed: #Structure as: #StructureReport!

StructureReport subclass: #TransactionsStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransactionsStructure category: 'Portfolio-18' stamp: 'ijgt 6/3/2021 16:30:33'!
StructureReport subclass: #TransactionsStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!StructureReport methodsFor: 'no messages' stamp: 'ijgt 6/3/2021 16:30:53' overrides: 50874869!
report

	^ account portfolioStructureReport: self! !

!methodRemoval: PortfolioStructure #report stamp: 'ijgt 6/3/2021 16:31:08'!
report

	^ account portfolioStructureReport: self!

!methodRemoval: TransactionsStructure #report stamp: 'ijgt 6/3/2021 16:31:15'!
report

	^ account transactionsStructureReport: self!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:33:37'!
m1: aPortfolio m2: portfolioAccounts

	^ String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	]! !
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:33:37' prior: 50876627!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

 	|portfolioStructureString|
 	portfolioStructureString := self m1: aPortfolio m2: portfolioAccounts.
 	^portfolioStructureString allButLast .! !
!StructureReport methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:34:06'!
m1: aPortfolio m2: portfolioAccounts

	^ String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	]! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:34:30' prior: 50878369!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := self m1: aPortfolio m2: portfolioAccounts.
	portfolioStructureString allButLast.
	portfolioStructureString := portfolioStructureString, String tab, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!methodRemoval: PortfolioStructure #m1:m2: stamp: 'ijgt 6/3/2021 16:34:47'!
m1: aPortfolio m2: portfolioAccounts

	^ String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	]!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!
!StructureReport methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:37:05'!
portfolioStructureAsString: aPortfolio withAccounts: portfolioAccounts

	^ String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	]! !

!methodRemoval: StructureReport #m1:m2: stamp: 'ijgt 6/3/2021 16:37:05'!
m1: aPortfolio m2: portfolioAccounts

	^ String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	]!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:37:10'!
ERROR!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:37:10'!
ERROR!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:37:10'!
ERROR!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:37:10'!
ERROR!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:37:10'!
ERROR!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:37:29'!
ERROR!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:37:29'!
ERROR!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:37:29'!
ERROR!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:37:29'!
ERROR!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:37:29'!
ERROR!
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:38:18' prior: 50879494!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

 	|portfolioStructureString|
 	portfolioStructureString := self portfolioStructureAsString: aPortfolio withAccounts: portfolioAccounts.
 	^portfolioStructureString allButLast .! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:38:46' prior: 50879516!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := self portfolioStructureAsString: aPortfolio withAccounts: portfolioAccounts.
	portfolioStructureString allButLast.
	portfolioStructureString := portfolioStructureString, String tab, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:39:45' prior: 50879819!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := (self portfolioStructureAsString: aPortfolio withAccounts: portfolioAccounts) allButLast.
	portfolioStructureString := portfolioStructureString, String tab, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:39:46'!
FAILURE!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:39:46'!
FAILURE!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:39:53'!
FAILURE!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:39:53'!
FAILURE!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:38:46' prior: 50879894!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := self portfolioStructureAsString: aPortfolio withAccounts: portfolioAccounts.
	portfolioStructureString allButLast.
	portfolioStructureString := portfolioStructureString, String tab, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!