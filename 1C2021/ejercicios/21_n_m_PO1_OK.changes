
----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/isw1/17-Portfolio 1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 20:17:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 20:17:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 20:17:51'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 20:17:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 20:17:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 20:17:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 20:17:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 20:17:51'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 20:18:13'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 20:18:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 20:26:29' prior: 50875360!
balance
 	| deposits withdraws |
	"^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]"
	deposits := (transactions select: [:aTransaction |  aTransaction class = Deposit]) sum: [ :aTransaction | 
		aTransaction value 
	] ifEmpty: [ 0 ].

	withdraws := (transactions select: [:aTransaction |  aTransaction class = Withdraw]) sum: [ :aTransaction | 
		aTransaction value 
	] ifEmpty: [ 0 ].

	^ deposits - withdraws! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 20:26:32'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 20:27:44'!
sumTransactionsOfType: anAccountTransactionClass
	
	^(transactions select: [:aTransaction |  aTransaction class = anAccountTransactionClass]) sum: [ :aTransaction | 
		aTransaction value 
	] ifEmpty: [ 0 ].

! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 20:28:20' prior: 50875412!
balance
 	
	| deposits withdraws |

	deposits := self sumTransactionsOfType: Deposit.
	withdraws := self sumTransactionsOfType: Withdraw.

	^ deposits - withdraws! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 20:28:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 20:28:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 20:28:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 20:28:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 20:28:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 20:28:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 20:28:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 20:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 20:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 20:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 20:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 20:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 20:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 20:28:31'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 20:29:30' prior: 50875442!
balance
 	
	| deposits withdraws |

	deposits   := self sumTransactionsOfType: Deposit.
	withdraws := self sumTransactionsOfType: Withdraw.

	^ deposits - withdraws! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/17/2021 20:30:38'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/17/2021 20:32:40'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'jn 5/17/2021 20:32:21'!
test01createEmptyPortfolio
	
	| portfolio |
	portfolio := Portfolio new.
	
! !

Object subclass: #Portfolio
	instanceVariableNames: 'portfolios accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/17/2021 20:34:56'!
Object subclass: #Portfolio
	instanceVariableNames: 'portfolios accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:36:52' prior: 50875530!
test01createEmptyPortfolio
	
	| portfolio |
	portfolio := Portfolio new.
	
	self assert: (portfolio isEmpty).! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:36:58'!
ERROR!

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:36:58'!
ERROR!
!Portfolio methodsFor: 'no messages' stamp: 'jn 5/17/2021 20:37:39'!
isEmpty

	portfolios isEmpty and: accounts isEmpty ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:37:44' prior: 50875561!
isEmpty

	^ portfolios isEmpty and: accounts isEmpty ! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:37:47'!
ERROR!

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:37:47'!
ERROR!
!Portfolio class methodsFor: 'no messages' stamp: 'jn 5/17/2021 20:38:38' overrides: 16783533!
new
	self initialize.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35'!
newEmptyPortfolio
	self initialize.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875160!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount newEmptyPortfolio.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875167!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  newEmptyPortfolio.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875186!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount newEmptyPortfolio.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!Deposit class methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875294!
for: aValue

	^ self newEmptyPortfolio initializeFor: aValue ! !
!Withdraw class methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875328!
for: aValue

	^ self newEmptyPortfolio initializeFor: aValue ! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875209!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount newEmptyPortfolio.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875549!
test01createEmptyPortfolio
	
	| portfolio |
	portfolio := Portfolio newEmptyPortfolio.
	
	self assert: (portfolio isEmpty).! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875221!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount newEmptyPortfolio.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875176!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount newEmptyPortfolio.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875346 overrides: 16896425!
initialize

	transactions := OrderedCollection newEmptyPortfolio.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:35' prior: 50875196!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount newEmptyPortfolio.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !

!methodRemoval: Portfolio class #new stamp: 'jn 5/17/2021 20:39:35'!
new
	self initialize.!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:39:45' prior: 50875581!
newEmptyPortfolio

	^ self new initialize.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:40:11' overrides: 16896425!
initialize
	
	portfolios := Set new.
	accounts := Set new.! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:40:18'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:41:30'!
test01addAccountToPortfolio
	
	| portfolio |
	portfolio := Portfolio newEmptyPortfolio.
	
	self assert: (portfolio isEmpty).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:41:40'!
test02addAccountToPortfolio
	
	| portfolio |
	portfolio := Portfolio newEmptyPortfolio.
	
	self assert: (portfolio isEmpty).! !

!methodRemoval: PortfolioTest #test01addAccountToPortfolio stamp: 'jn 5/17/2021 20:41:40'!
test01addAccountToPortfolio
	
	| portfolio |
	portfolio := Portfolio newEmptyPortfolio.
	
	self assert: (portfolio isEmpty).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:44:21' prior: 50875716!
test02addAccountToPortfolio
	
	| portfolio account |
	portfolio := Portfolio newEmptyPortfolio.
	account := ReceptiveAccount new.
	
	portfolio addAccount: account.
	
	self assert: (portfolio numberOfAccounts = 1).! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'jn 5/17/2021 20:44:42' prior: 50875586!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'jn 5/17/2021 20:44:46' prior: 50875595!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'jn 5/17/2021 20:44:49' prior: 50875661!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'jn 5/17/2021 20:44:52' prior: 50875605!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'jn 5/17/2021 20:44:56' prior: 50875679!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'jn 5/17/2021 20:44:59' prior: 50875628!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'jn 5/17/2021 20:45:03' prior: 50875649!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:45:06'!
ERROR!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:45:06'!
ERROR!

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:45:22'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:45:22'!
ERROR!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:45:22'!
ERROR!
!Deposit class methodsFor: 'instance creation' stamp: 'jn 5/17/2021 20:46:01' prior: 50875616!
for: aValue

	^ self new initializeFor: aValue ! !
!Withdraw class methodsFor: 'instance creation' stamp: 'jn 5/17/2021 20:46:06' prior: 50875622!
for: aValue

	^ self new initializeFor: aValue ! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'jn 5/17/2021 20:46:22' prior: 50875673 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:46:33'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:46:33'!
ERROR!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:46:33'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:47:01'!
addAccount: anAccount

	accounts add: anAccount.	! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:47:04'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:47:04'!
ERROR!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:47:04'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:47:23'!
numberOfAccounts

	^ accounts size.! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:47:24'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:47:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:48:38'!
test03addEmptyPortfolioToPortfolio
	
	| portfolio emptyPortfolio |
	portfolio := Portfolio newEmptyPortfolio.
	emptyPortfolio := Portfolio newEmptyPortfolio.

	portfolio addPortfolio: emptyPortfolio.
	
	self assert: (portfolio numberOfPortfolios = 1).! !

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 20:48:43'!
ERROR!

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 20:48:43'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:49:04'!
addPortfolio: aPortfolio

	portfolios add: aPortfolio.	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:49:12'!
numberOfPortfolios

	^ portfolios size.! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:49:15'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:49:15'!
PASSED!

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 20:49:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:52:14'!
test04addDuplicatedAccountsToPortfolioAddsOnlyOne
	
	| portfolio account |
	portfolio := Portfolio newEmptyPortfolio.
	account := ReceptiveAccount new.

	portfolio addAccount: account.
	portfolio addAccount: account.

	self assert: (portfolio numberOfAccounts = 1).
	self assert: (portfolio hasAccount: account).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:52:34' prior: 50875875!
test03addEmptyPortfolioToPortfolio
	
	| portfolio emptyPortfolio |
	portfolio := Portfolio newEmptyPortfolio.
	emptyPortfolio := Portfolio newEmptyPortfolio.

	portfolio addPortfolio: emptyPortfolio.
	
	self assert: (portfolio numberOfPortfolios = 1).
	self assert: (portfolio hasPortfolio: portfolio).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:52:46' prior: 50875730!
test02addAccountToPortfolio
	
	| portfolio account |
	portfolio := Portfolio newEmptyPortfolio.
	account := ReceptiveAccount new.
	
	portfolio addAccount: account.
	
	self assert: (portfolio numberOfAccounts = 1).
	self assert: (portfolio hasAccount: account).! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:52:55'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:52:55'!
ERROR!

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 20:52:55'!
ERROR!

!testRun: #PortfolioTest #test04addDuplicatedAccountsToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 20:52:55'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:53:52'!
hasPortfolio: aPortfolio

	^ portfolios includes: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:54:08'!
hasAccount: anAccount

	^ accounts includes: anAccount.! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:54:11'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:54:11'!
PASSED!

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 20:54:11'!
FAILURE!

!testRun: #PortfolioTest #test04addDuplicatedAccountsToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 20:54:11'!
PASSED!

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 20:54:11'!
FAILURE!

portfolios includes: 's'!

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 20:56:44'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:57:23' prior: 50875923!
test03addEmptyPortfolioToPortfolio
	
	| portfolio emptyPortfolio |
	portfolio := Portfolio newEmptyPortfolio.
	emptyPortfolio := Portfolio newEmptyPortfolio.

	portfolio addPortfolio: emptyPortfolio.
	
	self assert: (portfolio numberOfPortfolios = 1).
	self assert: (portfolio hasPortfolio: emptyPortfolio).! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:57:25'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:57:25'!
PASSED!

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 20:57:25'!
PASSED!

!testRun: #PortfolioTest #test04addDuplicatedAccountsToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 20:57:25'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:59:26'!
test04addDuplicatedPortfoliosToPortfolioAddsOnlyOne
	
	| portfolio anotherPortfolio  |
	portfolio := Portfolio newEmptyPortfolio.
	anotherPortfolio := Portfolio newEmptyPortfolio.

	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: anotherPortfolio.

	self assert: (portfolio numberOfPortfolios = 1).
	self assert: (portfolio hasPortfolio: portfolio ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 20:59:35'!
test05addDuplicatedPortfoliosToPortfolioAddsOnlyOne
	
	| portfolio anotherPortfolio  |
	portfolio := Portfolio newEmptyPortfolio.
	anotherPortfolio := Portfolio newEmptyPortfolio.

	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: anotherPortfolio.

	self assert: (portfolio numberOfPortfolios = 1).
	self assert: (portfolio hasPortfolio: portfolio ).! !

!methodRemoval: PortfolioTest #test04addDuplicatedPortfoliosToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 20:59:35'!
test04addDuplicatedPortfoliosToPortfolioAddsOnlyOne
	
	| portfolio anotherPortfolio  |
	portfolio := Portfolio newEmptyPortfolio.
	anotherPortfolio := Portfolio newEmptyPortfolio.

	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: anotherPortfolio.

	self assert: (portfolio numberOfPortfolios = 1).
	self assert: (portfolio hasPortfolio: portfolio ).!

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 20:59:37'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 20:59:37'!
PASSED!

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 20:59:37'!
PASSED!

!testRun: #PortfolioTest #test04addDuplicatedAccountsToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 20:59:37'!
PASSED!

!testRun: #PortfolioTest #test05addDuplicatedPortfoliosToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 20:59:37'!
FAILURE!

!testRun: #PortfolioTest #test05addDuplicatedPortfoliosToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 20:59:37'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/17/2021 21:00:02' prior: 50876030!
test05addDuplicatedPortfoliosToPortfolioAddsOnlyOne
	
	| portfolio anotherPortfolio  |
	portfolio := Portfolio newEmptyPortfolio.
	anotherPortfolio := Portfolio newEmptyPortfolio.

	portfolio addPortfolio: anotherPortfolio.
	portfolio addPortfolio: anotherPortfolio.

	self assert: (portfolio numberOfPortfolios = 1).
	self assert: (portfolio hasPortfolio: anotherPortfolio ).! !

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 21:00:04'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 21:00:04'!
PASSED!

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 21:00:04'!
PASSED!

!testRun: #PortfolioTest #test04addDuplicatedAccountsToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 21:00:04'!
PASSED!

!testRun: #PortfolioTest #test05addDuplicatedPortfoliosToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 21:00:04'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 21:04:28' prior: 50875432!
sumTransactionsOfType: anAccountTransactionClass
	
	^(transactions select: [:aTransaction |  aTransaction class = anAccountTransactionClass]) 
		sum: [ :aTransaction | 
			aTransaction value 
		] ifEmpty: [ 0 ].

! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:04:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:04:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:04:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:04:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:04:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:04:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:04:30'!
PASSED!

!testRun: #PortfolioTest #test01createEmptyPortfolio stamp: 'jn 5/17/2021 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test02addAccountToPortfolio stamp: 'jn 5/17/2021 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test03addEmptyPortfolioToPortfolio stamp: 'jn 5/17/2021 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test04addDuplicatedAccountsToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test05addDuplicatedPortfoliosToPortfolioAddsOnlyOne stamp: 'jn 5/17/2021 21:04:32'!
PASSED!

----STARTUP---- (17 May 2021 21:43:08) as /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/CuisUniversity-4532.image!


----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/isw1/17-Portfolio 1/Portfolio-Ejercicio.st----!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 21:44:58' prior: 50875360!
balance
	| totalBalance |
	totalBalance := 0.
	^transactions sum: [ :aTransaction | aTransaction addToBalance: totalBalance ] ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'value' stamp: 'jn 5/17/2021 21:45:23'!
addToBalance: aBalance

	^ aBalance - value! !
!Deposit methodsFor: 'value' stamp: 'jn 5/17/2021 21:45:30'!
addToBalance: aBalance

	^ aBalance - value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:45:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:45:33'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:45:33'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:45:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:45:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:45:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:45:33'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 21:48:51' prior: 50875374!
balance
	
	^ transactions inject: 0 into: [:totalBalance :aTransaction | aTransaction addToBalance: totalBalance ].
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:48:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:48:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:48:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:48:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:48:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:48:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:48:52'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 21:49:09' prior: 50875416!
balance
	
	^ transactions inject: 0 into: [:aTransaction :totalBalance | aTransaction addToBalance: totalBalance ].
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:49:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:49:11'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:49:11'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:49:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:49:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:49:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:49:11'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 21:49:55' prior: 50875449!
balance
	
	^ transactions inject: 0 into: [:totalBalance :aTransaction | totalBalance + aTransaction addToBalance: totalBalance ].
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:49:57'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:49:57'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:50:05'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:50:05'!
ERROR!
!Deposit methodsFor: 'value' stamp: 'jn 5/17/2021 21:50:40' prior: 50875385!
addToBalance: aBalance

	^ aBalance + value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:50:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:50:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:50:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:50:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:50:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:50:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:50:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:50:49'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:50:49'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 21:51:19' prior: 50875482!
balance
	
	^ transactions inject: 0 into: [:aTransaction :totalBalance | totalBalance + aTransaction addToBalance: totalBalance ].
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:51:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:51:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:51:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:51:27'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:51:27'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 21:53:14' prior: 50875561!
balance
	| totalBalance |
	totalBalance := 0.
	^ transactions do: [:aTransaction |  aTransaction addToBalance: totalBalance ].
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:53:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:53:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:53:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:53:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:53:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:53:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:53:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:53:25'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:53:25'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 21:54:55' prior: 50875602!
balance
	| totalBalance |
	totalBalance := 0.
	^ transactions do: [:aTransaction |  totalBalance := aTransaction addToBalance: totalBalance ].
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:54:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:54:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:54:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:54:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:54:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:54:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:54:57'!
PASSED!
!AccountTransaction methodsFor: 'value' stamp: 'jn 5/17/2021 21:55:54'!
addToBalance: aBalance 

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 21:56:59' prior: 50875644!
balance
	| totalBalance |
	totalBalance := 0.
	transactions do: [:aTransaction |  totalBalance := aTransaction addToBalance: totalBalance ].
	^totalBalance.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:57:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:57:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:57:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:57:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:57:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:57:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:57:01'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/17/2021 21:57:24' prior: 50875683!
balance
	| totalBalance |
	totalBalance := 0.
	transactions do: [:aTransaction |  totalBalance := aTransaction addToBalance: totalBalance ].
	
	^totalBalance.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/17/2021 21:57:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:57:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/17/2021 21:57:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/17/2021 21:57:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/17/2021 21:57:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/17/2021 21:57:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/17/2021 21:57:26'!
PASSED!

----QUIT----(18 May 2021 09:49:07) CuisUniversity-4532.image priorSource: 16979531!

----STARTUP---- (18 May 2021 23:24:50) as /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/CuisUniversity-4532.image!


----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/ISW1-2021-1C-1erParcial.st----!

----STARTUP---- (20 May 2021 20:11:19) as /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/CuisUniversity-4532.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/20/2021 20:12:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/20/2021 20:12:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/20/2021 20:12:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/20/2021 20:12:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/20/2021 20:12:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/20/2021 20:12:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/20/2021 20:12:07'!
PASSED!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/20/2021 20:13:02'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/20/2021 20:13:15'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'jn 5/20/2021 20:17:18'!
test01createAnEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio numberOfAccounts equals: 0.
	! !
!Portfolio methodsFor: 'no messages' stamp: 'jn 5/20/2021 20:17:32'!
numberOfAccounts

	^0.! !

!testRun: #PortfolioTest #test01createAnEmptyPortfolio stamp: 'jn 5/20/2021 20:17:36'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:18:46'!
test01createAPortfolioWithoutAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio numberOfAccounts equals: 0.
	! !

!methodRemoval: PortfolioTest #test01createAnEmptyPortfolio stamp: 'jn 5/20/2021 20:18:51'!
test01createAnEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio numberOfAccounts equals: 0.
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:19:47'!
test02addAccountsToPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount
	portfolio addAccount: account.
	
	self assert: portfolio numberOfAccounts equals: 0.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:21:13' prior: 50875837!
test02addAccountsToPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio addAccount: account.
	
	self assert: portfolio numberOfAccounts equals: 1.
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:22:07' overrides: 16896425!
initialize

	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/20/2021 20:22:41'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:22:31' prior: 50875857 overrides: 16896425!
initialize

	accounts := 1.! !

Object subclass: #NameOfSubclass
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #NameOfSubclass category: 'Portfolio-Ejercicio' stamp: 'jn 5/20/2021 20:22:50'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:22:53'!
ERROR!

!testRun: #PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:22:53'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:23:59' prior: 50875869 overrides: 16896425!
initialize

	accounts := Set new.! !

!testRun: #PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:24:09'!
ERROR!

!testRun: #PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:24:09'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:24:43'!
addAccount: anAccount

	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01createAPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:24:49'!
PASSED!

!testRun: #PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:24:49'!
FAILURE!

!testRun: #PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:24:49'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:25:12' prior: 50875815!
numberOfAccounts

	^ accounts size.! !

!testRun: #PortfolioTest #test01createAPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:25:15'!
PASSED!

!testRun: #PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:25:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:28:11'!
test03failAddNotAccountToPortfolio

	| portfolio notAccount |
	
	portfolio := Portfolio new.
	notAccount	 := 'not account'.
	
	portfolio addAccount: notAccount.
	
	self assert: portfolio numberOfAccounts equals: 0.
	
	! !

!testRun: #PortfolioTest #test01createAPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:28:24'!
PASSED!

!testRun: #PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:28:24'!
PASSED!

!testRun: #PortfolioTest #test03failAddNotAccountToPortfolio stamp: 'jn 5/20/2021 20:28:25'!
FAILURE!

!testRun: #PortfolioTest #test03failAddNotAccountToPortfolio stamp: 'jn 5/20/2021 20:28:25'!
FAILURE!

!testRun: #PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:28:33'!
PASSED!

!testRun: #PortfolioTest #test03failAddNotAccountToPortfolio stamp: 'jn 5/20/2021 20:28:35'!
FAILURE!

!testRun: #PortfolioTest #test03failAddNotAccountToPortfolio stamp: 'jn 5/20/2021 20:28:35'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:29:02' prior: 50875902!
addAccount: anAccount

	anAccount addTo: self.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jn 5/20/2021 20:29:38'!
addTo: aPortfolio 

	aPortfolio addAccount: self! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:31:54' prior: 50875927!
test03failAddNotAccountToPortfolio

	| portfolio notAccount |
	
	portfolio := Portfolio new.
	notAccount	 := 'not account'.
	
	portfolio add: notAccount.
	
	self assert: portfolio numberOfAccounts equals: 0.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:31:58' prior: 50875847!
test02addAccountsToPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio add: account.
	
	self assert: portfolio numberOfAccounts equals: 1.
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:32:17'!
add: anAccount

	anAccount addTo: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:32:28' prior: 50875959!
addAccount: anAccount

	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01createAPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:32:32'!
PASSED!

!testRun: #PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:32:32'!
PASSED!

!testRun: #PortfolioTest #test03failAddNotAccountToPortfolio stamp: 'jn 5/20/2021 20:32:32'!
ERROR!

!testRun: #PortfolioTest #test03failAddNotAccountToPortfolio stamp: 'jn 5/20/2021 20:32:32'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:34:18' prior: 50875968!
test03failAddNotAccountToPortfolio

	| portfolio notAccount |
	
	portfolio := Portfolio new.
	notAccount	 := 'not account'.
	
	
	self should: [	portfolio add: notAccount. ] 
		raise: Error
		description: [:anError | anError description equals: MessageNotUnderstood ]
	
	! !

!testRun: #PortfolioTest #test03failAddNotAccountToPortfolio stamp: 'jn 5/20/2021 20:34:49'!
PASSED!

!methodRemoval: PortfolioTest #test03failAddNotAccountToPortfolio stamp: 'jn 5/20/2021 20:41:29'!
test03failAddNotAccountToPortfolio

	| portfolio notAccount |
	
	portfolio := Portfolio new.
	notAccount	 := 'not account'.
	
	
	self should: [	portfolio add: notAccount. ] 
		raise: Error
		description: [:anError | anError description equals: MessageNotUnderstood ]
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:42:50'!
test02balanceInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	portfolio add: account.
	
	self assert: portfolio numberOfAccounts equals: 1.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:43:01' prior: 50876036!
test02balanceInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	portfolio add: account.
	portfolio add: anotherAccount.

	self assert: portfolio numberOfAccounts equals: 1.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:44:39' prior: 50876048!
test02balanceInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account balance + anotherAccount balance) equals: portfolio balance.
	
	! !

!methodRemoval: PortfolioTest #test02addAccountsToPortfolio stamp: 'jn 5/20/2021 20:44:43'!
test02addAccountsToPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio add: account.
	
	self assert: portfolio numberOfAccounts equals: 1.
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:45:49' prior: 50875822!
test01createAPortfolioWithoutAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.
	self assert: portfolio transactions equals: OrderedCollection new.

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:47:11'!
test01balanceOfPortfolioWithoutAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:47:34'!
test02transactionsOfPortfolioWithoutAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions equals: OrderedCollection new.

	! !

!methodRemoval: PortfolioTest #test01createAPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:47:40'!
test01createAPortfolioWithoutAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.
	self assert: portfolio transactions equals: OrderedCollection new.

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:47:49'!
test03balanceInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account balance + anotherAccount balance) equals: portfolio balance.
	
	! !

!methodRemoval: PortfolioTest #test02balanceInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:47:49'!
test02balanceInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account balance + anotherAccount balance) equals: portfolio balance.
	
	!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:47:51'!
ERROR!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:47:51'!
ERROR!

!methodRemoval: Portfolio #add: stamp: 'jn 5/20/2021 20:48:03'!
add: anAccount

	anAccount addTo: self.!

!methodRemoval: Portfolio #addAccount: stamp: 'jn 5/20/2021 20:48:07'!
addAccount: anAccount

	accounts add: anAccount.!

!methodRemoval: Portfolio #numberOfAccounts stamp: 'jn 5/20/2021 20:48:10'!
numberOfAccounts

	^ accounts size.!

!methodRemoval: ReceptiveAccount #addTo: stamp: 'jn 5/20/2021 20:48:15'!
addTo: aPortfolio 

	aPortfolio addAccount: self!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:48:21'!
ERROR!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:48:21'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'jn 5/20/2021 20:48:37'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'jn 5/20/2021 20:48:44' prior: 50876184!
balance
	^0.! !

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:48:56'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:49:03'!
ERROR!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:49:03'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/20/2021 20:49:13'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/20/2021 20:49:22' prior: 50876201!
transactions
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:49:26'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/20/2021 20:49:28'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:49:39'!
ERROR!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:49:39'!
ERROR!
!Portfolio methodsFor: 'add' stamp: 'jn 5/20/2021 20:49:56'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'add' stamp: 'jn 5/20/2021 20:50:17' prior: 50876223!
add: aReceptiveAccount 

	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:50:19'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'jn 5/20/2021 20:51:21' prior: 50876188!
balance

	^ accounts sum: [:account | account balance ] ifEmpty: [0].! !

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:51:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:53:41'!
test03transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account transactions addAll: anotherAccount transactions) equals: portfolio balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:55:10' prior: 50876245!
test03transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account transactions addAll: anotherAccount transactions) equals: portfolio transactions.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:55:15'!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account transactions addAll: anotherAccount transactions) equals: portfolio transactions.
	
	! !

!methodRemoval: PortfolioTest #test03transactionsInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:55:19'!
test03transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account transactions addAll: anotherAccount transactions) equals: portfolio transactions.
	
	!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:55:21'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:55:21'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/20/2021 20:57:17' prior: 50876206!
transactions
	| transactions |
	transactions := OrderedCollection new.
	accounts do: [:account | transactions addAll: account transactions].

	^transactions.! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:57:20'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:57:20'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:57:52' prior: 50876281!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account transactions addAll: (anotherAccount transactions)) equals: portfolio transactions.
	
	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:57:53'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:57:53'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/20/2021 20:58:32' prior: 50876341!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount a |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
	a := (account transactions addAll: (anotherAccount transactions)).
	self assert: a equals: portfolio transactions.
	
	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:58:35'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/20/2021 20:58:35'!
FAILURE!

#(1 2 3 4) addAll: #(5 6 7)!

OrderedCollection new addAll: #(5 6 7)!

OrderedCollection!

OrderedCollection!

----QUIT----(20 May 2021 21:02:42) CuisUniversity-4532.image priorSource: 17411243!

----STARTUP---- (22 May 2021 00:17:00) as /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/CuisUniversity-4532.image!


Transcript space!

Parser!

Object subclass: #Lint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Lint'!

!classDefinition: #Lint category: 'Lint' stamp: 'jn 5/22/2021 00:26:40'!
Object subclass: #Lint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Lint'!
!Lint methodsFor: 'no messages' stamp: 'jn 5/22/2021 00:27:23'!
parse: aMethod
! !

Lint new!

Portfolio methodsSelect: #balance.!

Portfolio methodsInCategory: 'balance'.!

Portfolio methodsSelect: #balance!

Portfolio methodsSelect: '#balance'!

Portfolio methodsSelect: 'balance'!

Portfolio sourceCodeAt: #balance.!

Lint new parse: (Portfolio sourceCodeAt: #balance).!

Portfolio sourceCodeAt: #balance. 
!
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:11:04' prior: 50876412!
parse: aMethod
	|new|
	new := ''.
	aMethod do: [:achar | 
		achar = '[' ifTrue: [ new, '[', Transcript space ].
		achar = ']' ifTrue: [ new, Transcript space, '[' ].
	 ].
	^new.! !

Lint new parse: (Portfolio sourceCodeAt: #balance). !

Lint new parse: (Portfolio sourceCodeAt: #balance).  '' !
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:13:13' prior: 50876426!
parse: aMethod
	|new|
	new := ''.
	aMethod do: [:achar | 
		achar = '[' ifTrue: [ new, '[', Transcript space ].
		achar = ']' ifTrue: [ new, Transcript space, '[' ] 
		ifFalse: [ new, achar].
	 ].
	^new.! !
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:14:35' prior: 50876438!
parse: aMethod
	|new|
	new := ''.
	aMethod do: [:achar | 
		achar = '.' ifTrue: [ new, '.', Transcript newLine, Transcript tab ].
		achar = '[' ifTrue: [ new, '[', Transcript space ].
		achar = ']' ifTrue: [ new, Transcript space, '[' ] 
		ifFalse: [ new, achar].
	 ].
	^new.! !

Lint new parse: (Portfolio sourceCodeAt: #balance).!
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:16:05' prior: 50876448!
parse: aMethod
	|new|
	new := ''.
	aMethod do: [:achar | 
		achar = '.' ifTrue: [ new, '.', Transcript newLine asString, Transcript tab asString].
		achar = '[' ifTrue: [ new, '[', Transcript space asString ].
		achar = ']' ifTrue: [ new, Transcript space asString, '[' ] 
		ifFalse: [ new, achar].
	 ].
	^new.! !
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:16:14' prior: 50876462!
parse: aMethod
	|new|
	new := ''.
	aMethod do: [:achar | 
		achar = '.' ifTrue: [ new, '.', Transcript newLine, Transcript tab].
		achar = '[' ifTrue: [ new, '[', Transcript space ].
		achar = ']' ifTrue: [ new, Transcript space, '[' ] 
		ifFalse: [ new, achar asString].
	 ].
	^new.! !

Lint new parse: (Portfolio sourceCodeAt: #balance).!
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:16:39' prior: 50876475!
parse: aMethod
	|new|
	new := ''.
	aMethod do: [:achar | 
		achar = '.' ifTrue: [ new, '.', Transcript newLine, Transcript tab].
		achar = '[' ifTrue: [ new, '[', Transcript space ].
		achar = ']' ifTrue: [ new, Transcript space, ']' ] 
		ifFalse: [ new, achar asString].
	 ].
	^new.! !

Lint new parse: (Portfolio sourceCodeAt: #balance).!
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:20:48' prior: 50876489!
parse: aMethod
	|new|
	new := ''.
	aMethod do: [:achar | 
		achar = $. ifTrue: [ new, '.', Transcript newLine, Transcript tab].
		achar = $[ ifTrue: [ new, '[', Transcript space ].
		achar = $] ifTrue: [ new, Transcript space, ']' ] 
		ifFalse: [ new, achar asString].
	 ].
	^new.! !

balance!

Lint new parse: (Portfolio sourceCodeAt: #balance).!

Lint new parse: (Portfolio sourceCodeAt: #balance).!
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:22:02' prior: 50876503!
parse: aMethod
	|new|
	new := ''.
	aMethod do: [:achar | 
		achar = $. ifTrue: [ new, '.', Transcript newLine asString, Transcript tab asString].
		achar = $[ ifTrue: [ new, '[', Transcript space asString].
		achar = $] ifTrue: [ new, Transcript space asString, ']' ] 
		ifFalse: [ new, achar asString].
	 ].
	^new.! !

Lint new parse: (Portfolio sourceCodeAt: #balance).!

x _ String streamContents: [:str |		"using a stream to form a string"
	str 											"more efficient than concatenation"
		nextPutAll: 'This string';
		nextPutAll: ' is formed today, ';
		nextPutAll: Date today asString;
		nextPutAll: ', without using concatenation.'].!
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:30:12' prior: 50876519!
parse: aMethod
	|new|
	new := ''.
	aMethod do: [:achar | 
		achar = $. ifTrue: [ new, '.', Transcript newLine asString, Transcript tab asString].
		achar = $[ ifTrue: [ new, '[', Transcript space asString].
		achar = $] ifTrue: [ new, Transcript space asString, ']' ] 
		ifFalse: [ new, achar asString].
	 ].
	^new.
	
	! !

Lint new parse: '.......'!
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:30:47' prior: 50876542!
parse: aMethod
	|new|
	new := 'asd'.
	aMethod do: [:achar | 
		achar = $. ifTrue: [ new, '.', Transcript newLine asString, Transcript tab asString].
		achar = $[ ifTrue: [ new, '[', Transcript space asString].
		achar = $] ifTrue: [ new, Transcript space asString, ']' ] 
		ifFalse: [ new, achar asString].
	 ].
	^new.
	
	! !

Lint new parse: '.......'!
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:31:52' prior: 50876556!
parse: aMethod
	|new|
	new := 'asd'.
	aMethod do: [:achar | 
		achar = $. ifTrue: [ new, '.', Transcript newLine asString, Transcript tab asString].
		achar = $[ ifTrue: [ new, '[', Transcript space asString].
		achar = $] ifTrue: [ new, Transcript space asString, ']' ] 
		"ifFalse: [ new, achar asString]."
	 ].
	^new.
	
	! !

Lint new parse: '.......' !
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:32:15' prior: 50876570!
parse: aMethod
	|nnn|
	nnn := 'asd'.
	aMethod do: [:achar | 
		achar = $. ifTrue: [ nnn, '.', Transcript newLine asString, Transcript tab asString].
		achar = $[ ifTrue: [ nnn, '[', Transcript space asString].
		achar = $] ifTrue: [ nnn, Transcript space asString, ']' ] 
		"ifFalse: [ new, achar asString]."
	 ].
	^nnn.
	
	! !

Lint new parse: '.......' !
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:32:23' prior: 50876584!
parse: aMethod
	|nnn|
	nnn := ''.
	aMethod do: [:achar | 
		achar = $. ifTrue: [ nnn, '.', Transcript newLine asString, Transcript tab asString].
		achar = $[ ifTrue: [ nnn, '[', Transcript space asString].
		achar = $] ifTrue: [ nnn, Transcript space asString, ']' ] 
		"ifFalse: [ new, achar asString]."
	 ].
	^nnn.
	
	! !
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:32:38' prior: 50876598!
parse: aMethod
	|nnn|
	nnn := String new.
	aMethod do: [:achar | 
		achar = $. ifTrue: [ nnn, '.', Transcript newLine asString, Transcript tab asString].
		achar = $[ ifTrue: [ nnn, '[', Transcript space asString].
		achar = $] ifTrue: [ nnn, Transcript space asString, ']' ] 
		"ifFalse: [ new, achar asString]."
	 ].
	^nnn.
	
	! !

Lint new parse: '.......'  !
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:33:22' prior: 50876611!
parse: aMethod
	|nnn|
	nnn := String new.
	aMethod do: [:achar | 
		achar = $. ifTrue: [ nnn, '.'].
		achar = $[ ifTrue: [ nnn, '['].
		achar = $] ifTrue: [ nnn,  ']' ] 
		"achar = $. ifTrue: [ nnn, '.', Transcript newLine asString, Transcript tab asString].
		achar = $[ ifTrue: [ nnn, '[', Transcript space asString].
		achar = $] ifTrue: [ nnn, Transcript space asString, ']' ] 
		ifFalse: [ new, achar asString]."
	 ].
	^nnn.
	
	! !

Lint new parse: '.......'!
!Lint methodsFor: 'as yet unclassified' stamp: 'jn 5/22/2021 01:35:20' prior: 50876626!
parse: aMethod
	|nnn|
	nnn := String new.
	aMethod do: [:achar | 
		achar = $. ifTrue: [ nnn, $. asString].
		achar = $[ ifTrue: [ nnn, '['].
		achar = $] ifTrue: [ nnn,  ']' ] 
		"achar = $. ifTrue: [ nnn, '.', Transcript newLine asString, Transcript tab asString].
		achar = $[ ifTrue: [ nnn, '[', Transcript space asString].
		achar = $] ifTrue: [ nnn, Transcript space asString, ']' ] 
		ifFalse: [ new, achar asString]."
	 ].
	^nnn.
	
	! !

Lint new parse: '.......'!

----QUIT----(22 May 2021 01:37:19) CuisUniversity-4532.image priorSource: 17431839!

----STARTUP---- (23 May 2021 16:36:31) as /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/CuisUniversity-4532.image!


!classRemoval: #Lint stamp: 'jn 5/23/2021 16:36:44'!
Object subclass: #Lint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Lint'!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:36:49'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:36:49'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:36:49'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:36:49'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:36:49'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/23/2021 16:36:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/23/2021 16:36:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/23/2021 16:36:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/23/2021 16:36:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/23/2021 16:36:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/23/2021 16:36:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/23/2021 16:36:53'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:36:58'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:37:00'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:37:02'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:37:05'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:37:05'!
FAILURE!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:37:33'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:37:36'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:37:40'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:37:40'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 16:40:56' prior: 50876367!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount a |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
	a := account transactions.
	a addAll: (anotherAccount transactions).
	self assert: a equals: portfolio transactions.
	
	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:40:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 16:41:33' prior: 50876749!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount allTransactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
	allTransactions := account transactions.
	allTransactions addAll: (anotherAccount transactions).
	self assert: allTransactions equals: portfolio transactions.
	
	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:41:36'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 16:42:13' prior: 50876772!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount allTransactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
	
	allTransactions := account transactions.
	allTransactions addAll: (anotherAccount transactions).
	
	self assert: allTransactions equals: portfolio transactions.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 16:43:32' prior: 50876796!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount allTransactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
	
	allTransactions := anotherAccount transactions.
	allTransactions addAll: (account transactions).
	
	self assert: allTransactions equals: portfolio transactions.
	
	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:43:34'!
PASSED!

a:= OrderedCollection new.!

a addAll: #(1 2 3)!

a equals: #(3 2 1)!

self assert: a equals: #(3 2 1)!

a assert: a equals: #(3 2 1)!

(TestCase new) assert: a equals: #(3 2 1)!

b:= OrderedCollection new.!

b addAll: #(3 2 1)!

(TestCase new) assert: a equals: b!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 16:47:56' prior: 50876817!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount allTransactions b |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
	
	allTransactions := anotherAccount transactions.
	allTransactions addAll: (account transactions).
	b:=portfolio transactions.
	self assert: allTransactions equals: b.
	
	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:48:21'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:48:51'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:11'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:16'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:49:43'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:49:43'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:43'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:44'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:44'!
FAILURE!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:49:49'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:49:49'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:49'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:49'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:49:50'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:49:50'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:50'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:50'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:49:50'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:50:03'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:50:03'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:50:06'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:50:06'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:50:08'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:50:08'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:50:13'!
FAILURE!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:50:13'!
FAILURE!

b asSortedCollection.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 16:52:09' prior: 50876850!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount allTransactions b |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
	
	allTransactions := anotherAccount transactions.
	allTransactions addAll: (account transactions).
	b:=portfolio transactions.
	self assert: allTransactions asSortedCollection equals: b asSortedCollection.
	
	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:52:12'!
ERROR!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:52:12'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 16:53:04' prior: 50876994!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount allTransactions b |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
	
	allTransactions := anotherAccount transactions.
	allTransactions addAll: (account transactions).
	allTransactions := allTransactions asSortedCollection.
	b:=portfolio transactions.
	self assert: allTransactions equals: b.
	
	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:53:07'!
ERROR!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:53:07'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 16:57:13' prior: 50877023!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount sizeAccountsTransaction |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
	
	sizeAccountsTransaction := account transactions size + anotherAccount transactions size.
	self assert: sizeAccountsTransaction equals: portfolio transactions size.
	
	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:57:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 16:59:31' prior: 50877053!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount sizeAccountsTransaction |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
	
	sizeAccountsTransaction := account transactions size + anotherAccount transactions size.
	self assert: sizeAccountsTransaction equals: portfolio transactions size.
	
	self assert: (portfolio transactions allSatisfy: [:transaction | 
		(account transactions includes: transaction) or:
		(anotherAccount transactions includes: transaction)
		])
	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:32'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:37'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:37'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:37'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:37'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:38'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:38'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:38'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:38'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:39'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:39'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:39'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:39'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:41'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:41'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:41'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:41'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:42'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:42'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:42'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:42'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:42'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 16:59:42'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:42'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 16:59:42'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:02:59' prior: 50877078!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio transactions allSatisfy: [:transaction | 
		(account transactions includes: transaction) or:
		(anotherAccount transactions includes: transaction)
		]).
	
	self assert: (account transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		]).
	
	self assert: (anotherAccount transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		])

	! !

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 17:03:05'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 17:03:06'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 17:03:07'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 17:03:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:05:45'!
test05portfolioHasRegisterTransactionWithManyAccounts

	| portfolio account anotherAccount transaction |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	transaction := Deposit register: 30 on: anotherAccount.
		
	self assert: portfolio hasRegister: transaction.

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:06:37' prior: 50877250!
test05portfolioHasRegisterTransactionWithManyAccounts

	| portfolio account anotherAccount transaction |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	transaction := Deposit register: 30 on: anotherAccount.
		
	self assert: portfolio hasRegistered: transaction.

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:06:47' prior: 50877268!
test05portfolioHasRegisterTransactionWithManyAccounts

	| portfolio account anotherAccount transaction |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	transaction := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: transaction).

	! !

!testRun: #PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:06:51'!
ERROR!

!testRun: #PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:06:51'!
ERROR!
!Portfolio methodsFor: 'hasRegistered' stamp: 'jn 5/23/2021 17:07:03'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'hasRegistered' stamp: 'jn 5/23/2021 17:07:25' prior: 50877311!
hasRegistered: aTransaction 
	
	true.! !

!testRun: #PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:07:27'!
ERROR!

!testRun: #PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:07:31'!
ERROR!

!testRun: #PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:07:31'!
ERROR!
!Portfolio methodsFor: 'hasRegistered' stamp: 'jn 5/23/2021 17:07:42' prior: 50877316!
hasRegistered: aTransaction 
	
	^true.! !

!testRun: #PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:07:46'!
PASSED!

!testRun: #PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:10:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:11:32' prior: 50877286!
test05portfolioHasRegisterTransactionWithManyAccounts

	| portfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	! !

!testRun: #PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:11:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:12:11'!
test06portfolioHasNotRegisterTransactionWithManyAccounts

	| portfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:13:03' prior: 50877370!
test06portfolioHasNotRegisterTransactionWithManyAccounts

	| deposit withdraw portfolio |
	
	portfolio := Portfolio new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered:withdraw).

	! !

!testRun: #PortfolioTest #test06portfolioHasNotRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:13:06'!
FAILURE!

!testRun: #PortfolioTest #test06portfolioHasNotRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:13:06'!
FAILURE!
!Portfolio methodsFor: 'hasRegistered' stamp: 'jn 5/23/2021 17:13:23' prior: 50877332!
hasRegistered: aTransaction 
	
	^ self transactions includes: aTransaction.! !

!testRun: #PortfolioTest #test06portfolioHasNotRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:13:26'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 17:13:29'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 17:13:29'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 17:13:29'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 17:13:29'!
PASSED!

!testRun: #PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:13:29'!
PASSED!

!testRun: #PortfolioTest #test06portfolioHasNotRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:13:29'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 17:13:31'!
PASSED!

!testRun: #PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 17:13:31'!
PASSED!

!testRun: #PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 17:13:31'!
PASSED!

!testRun: #PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 17:13:31'!
PASSED!

!testRun: #PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:13:31'!
PASSED!

!testRun: #PortfolioTest #test06portfolioHasNotRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:13:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:15:52'!
test01portfolioHasZeroBalanceWhenCreated

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.

	! !

!methodRemoval: PortfolioTest #test01balanceOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 17:15:52'!
test01balanceOfPortfolioWithoutAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:17:31'!
test02portfolioHasNoneTransactionsWhenCreated

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions equals: OrderedCollection new.

	! !

!methodRemoval: PortfolioTest #test02transactionsOfPortfolioWithoutAccounts stamp: 'jn 5/23/2021 17:17:31'!
test02transactionsOfPortfolioWithoutAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions equals: OrderedCollection new.

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:18:46'!
test03portfolioHasBalanceEqualsToSumOfAccountsBalance

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account balance + anotherAccount balance) equals: portfolio balance.
	
	! !

!methodRemoval: PortfolioTest #test03balanceInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 17:18:46'!
test03balanceInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account balance + anotherAccount balance) equals: portfolio balance.
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:19:27'!
test04portfolioKnowsRegisteredTransactionsOfAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio transactions allSatisfy: [:transaction | 
		(account transactions includes: transaction) or:
		(anotherAccount transactions includes: transaction)
		]).
	
	self assert: (account transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		]).
	
	self assert: (anotherAccount transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		])

	! !

!methodRemoval: PortfolioTest #test04transactionsInPortfolioWithManyAccounts stamp: 'jn 5/23/2021 17:19:27'!
test04transactionsInPortfolioWithManyAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio transactions allSatisfy: [:transaction | 
		(account transactions includes: transaction) or:
		(anotherAccount transactions includes: transaction)
		]).
	
	self assert: (account transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		]).
	
	self assert: (anotherAccount transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		])

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:21:02'!
test04portfolioTransactionsEqualsToAllAccountsTransactions

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio transactions allSatisfy: [:transaction | 
		(account transactions includes: transaction) or:
		(anotherAccount transactions includes: transaction)
		]).
	
	self assert: (account transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		]).
	
	self assert: (anotherAccount transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		])

	! !

!methodRemoval: PortfolioTest #test04portfolioKnowsRegisteredTransactionsOfAccounts stamp: 'jn 5/23/2021 17:21:02'!
test04portfolioKnowsRegisteredTransactionsOfAccounts

	| portfolio account anotherAccount |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio transactions allSatisfy: [:transaction | 
		(account transactions includes: transaction) or:
		(anotherAccount transactions includes: transaction)
		]).
	
	self assert: (account transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		]).
	
	self assert: (anotherAccount transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		])

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:22:41'!
test05portfolioKnowsRegisteredTransactionsOfAccounts

	| portfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	! !

!methodRemoval: PortfolioTest #test05portfolioHasRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:22:41'!
test05portfolioHasRegisterTransactionWithManyAccounts

	| portfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:23:53'!
test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts

	| deposit withdraw portfolio |
	
	portfolio := Portfolio new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered:withdraw).

	! !

!methodRemoval: PortfolioTest #test06portfolioHasNotRegisterTransactionWithManyAccounts stamp: 'jn 5/23/2021 17:23:53'!
test06portfolioHasNotRegisterTransactionWithManyAccounts

	| deposit withdraw portfolio |
	
	portfolio := Portfolio new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered:withdraw).

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:24:15'!
test05portfolioKnowsRegisteredTransactionsInAccounts

	| portfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	! !

!methodRemoval: PortfolioTest #test05portfolioKnowsRegisteredTransactionsOfAccounts stamp: 'jn 5/23/2021 17:24:15'!
test05portfolioKnowsRegisteredTransactionsOfAccounts

	| portfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 17:24:54'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 17:24:54'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 17:24:54'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 17:24:54'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 17:24:54'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 17:24:54'!
PASSED!

----SNAPSHOT----(23 May 2021 17:29:45) CuisUniversity-4532.image priorSource: 17440344!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:34:42'!
test07portfolioOnlyAcceptsValidReceptiveAccounts

	| deposit withdraw portfolio |
	
	portfolio := Portfolio new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered:withdraw).

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:38:03' prior: 50877784!
test07portfolioOnlyAcceptsValidReceptiveAccounts

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid account' ] 
		raise: Error
		description: [:error | error description equals: MessageNotUnderstood class]
	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:40:20' prior: 50877796!
test07portfolioOnlyAcceptsValidReceptiveAccounts

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid account' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error equals: MessageNotUnderstood ] 	

	! !

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:40:21'!
FAILURE!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:40:21'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'jn 5/23/2021 17:43:06' prior: 50876228!
add: aReceptiveAccount 
	
	aReceptiveAccount addToPortfolio: self.
	"accounts add: aReceptiveAccount."! !
!ReceptiveAccount methodsFor: 'private' stamp: 'jn 5/23/2021 17:44:09'!
addToPortfolio: aPortfolio

	aPortfolio addAccount: self! !
!Portfolio methodsFor: 'add' stamp: 'jn 5/23/2021 17:44:22'!
addAccount: aReceptiveAccount 
	
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:44:37'!
FAILURE!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:44:37'!
FAILURE!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 17:44:46'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 17:44:46'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 17:44:46'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 17:44:46'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 17:44:46'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 17:44:46'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:44:46'!
FAILURE!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:44:46'!
FAILURE!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 17:44:51'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 17:44:53'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 17:44:54'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 17:44:56'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 17:44:57'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 17:44:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:45:22' prior: 50877807!
test07portfolioOnlyAcceptsValidReceptiveAccounts

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid account' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error equals: MessageNotUnderstood new message] 	

	! !

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:45:26'!
FAILURE!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:45:26'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:45:55' prior: 50877900!
test07portfolioOnlyAcceptsValidReceptiveAccounts

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid account' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error messageText equals: MessageNotUnderstood new messageText ] 	

	! !

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:45:57'!
FAILURE!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:45:57'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:46:53' prior: 50877919!
test07portfolioOnlyAcceptsValidReceptiveAccounts

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid account' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:46:56'!
PASSED!
!Portfolio methodsFor: 'add' stamp: 'jn 5/23/2021 17:47:32' prior: 50877825!
add: aReceptiveAccount 
	
	aReceptiveAccount addToPortfolio: self.
! !

set := Set new!

set add: 1!

set add: 1!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 17:52:18' prior: 50877835!
addAccount: aReceptiveAccount 
	(accounts includes: aReceptiveAccount) 
		ifTrue: [ self receptiveAccountAlreadyExist. ] 
		ifFalse: [ accounts add: aReceptiveAccount. ]! !
!Portfolio methodsFor: 'errors' stamp: 'jn 5/23/2021 17:53:44'!
receptiveAccountAlreadyExist
	
	^self error: 'Receptive account already exists in portfolio.'! !
!Portfolio methodsFor: 'errors' stamp: 'jn 5/23/2021 17:54:15' prior: 50877969!
receptiveAccountAlreadyExist
	
	^self error: self class receptiveAccountAlreadyExistDescription.! !
!Portfolio class methodsFor: 'no messages' stamp: 'jn 5/23/2021 17:54:49'!
receptiveAccountAlreadyExistsDescription 
	
	^'Receptive account already exists in portfolio.'.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:55:40' prior: 50877981!
receptiveAccountAlreadyExistsDescription 
	
	^'Receptive account already exists in portfolio.'.! !
!Portfolio methodsFor: 'errors' stamp: 'jn 5/23/2021 17:55:52' prior: 50877975!
receptiveAccountAlreadyExist
	
	^self error: self class receptiveAccountAlreadyExistsDescription.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:57:01'!
test08portolioDoesNotAcceptsDuplicatedAccounts

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid account' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:58:08' prior: 50878000!
test08portolioDoesNotAcceptsDuplicatedAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.

	portfolio add: account.
	
	self should: [ portfolio add: account ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error messageText equals: Portfolio class  ] 	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 17:58:34' prior: 50878012!
test08portolioDoesNotAcceptsDuplicatedAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.

	portfolio add: account.
	
	self should: [ portfolio add: account ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio receptiveAccountAlreadyExistsDescription  ] 	

	! !

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 17:59:30'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 17:59:30'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 17:59:30'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 17:59:30'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 17:59:30'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 17:59:30'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 17:59:30'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 17:59:30'!
PASSED!
!Portfolio methodsFor: 'errors' stamp: 'jn 5/23/2021 18:00:28' prior: 50877994!
receptiveAccountAlreadyExist
	
	^ self error: self class receptiveAccountAlreadyExistsDescription.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:12:54'!
test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts

	| portfolio childPortfolio account |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.

	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: portfolio balance equals: account balance.	
		

	! !
!Portfolio methodsFor: 'add' stamp: 'jn 5/23/2021 18:14:34' prior: 50877954!
add: aReceptiveAccount 
	
	aReceptiveAccount addToPortfolio: self.
! !

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:14:44'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:14:44'!
ERROR!
!Portfolio methodsFor: 'add' stamp: 'jn 5/23/2021 18:15:01' prior: 50878091!
add: aReceptiveAccountOrAPortfolio 
	
	aReceptiveAccountOrAPortfolio addToPortfolio: self.
! !
!Portfolio methodsFor: 'add' stamp: 'jn 5/23/2021 18:15:30'!
addToPortfolio: aPortfolio 
	
	aPortfolio addPortfolio: self.
! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/23/2021 18:16:01'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 18:15:58'!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio.! !

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:16:09'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:16:09'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/23/2021 18:16:29' prior: 50875892 overrides: 16896425!
initialize

	accounts := Set new.
	portfolios := Set new.! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 18:16:33'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 18:16:33'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 18:16:33'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 18:16:33'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 18:16:33'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 18:16:33'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 18:16:33'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 18:16:33'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:16:33'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:18:24' prior: 50878078!
test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts

	| portfolio childPortfolio account |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: portfolio balance equals: account balance.	
		

	! !

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:18:27'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:18:27'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'jn 5/23/2021 18:19:25' prior: 50876236!
balance

	^ (accounts sum: [:account | account balance ] ifEmpty: [0]) + 
	   (portfolios do: [:portfolio | portfolio balance ]).! !

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:19:29'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:19:29'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:19:41'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:19:41'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'jn 5/23/2021 18:20:22' prior: 50878198!
balance

	^ (accounts sum: [:account | account balance ] ifEmpty: [0]) + 
	   (portfolios sum: [:portfolio | portfolio balance ] ifEmpty: [0]).! !

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:20:26'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:21:06'!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio account |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: portfolio balance equals: account balance.	
		

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:21:26' prior: 50878234!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio account |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: portfolio transactions equals: account transactions.	
		

	! !

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:21:28'!
FAILURE!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:21:28'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/23/2021 18:22:01' prior: 50876325!
transactions
	| transactions |
	transactions := OrderedCollection new.
	accounts do: [:account | transactions addAll: account transactions].
	portfolios do: [:portfolio | transactions addAll: portfolio transactions].

	^transactions.! !

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:22:05'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:23:00' prior: 50878250!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio account |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: (portfolio transactions allSatisfy: [:transaction | 
		(account transactions includes: transaction) ]).
	
	self assert: (account transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		]).
		

	! !

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:23:02'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:23:04'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:23:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:23:28' prior: 50878290!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio account |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: (portfolio transactions allSatisfy: [:transaction | 
		(account transactions includes: transaction) ]).
	
	self assert: (account transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		]).
	
	self assert: (childPortfolio transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction)
		]).
		
		

	! !

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:23:29'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:26:10' prior: 50878325!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio account |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: (portfolio transactions allSatisfy: [:transaction | 
		(account transactions includes: transaction) ]).
	
	self assert: (account transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction) ]).
	
	self assert: (childPortfolio transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction) ]).
		
		

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:27:14' prior: 50878174!
test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts

	| portfolio childPortfolio account anotherAccount|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 90 on: anotherAccount.

	childPortfolio add: account.
	portfolio add: childPortfolio.
	portfolio add: anotherAccount.
	
	self assert: portfolio balance equals: (account balance + anotherAccount balance).	
		

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:29:06' prior: 50878356!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio account anotherAccount |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 90 on: anotherAccount.

	childPortfolio add: account.
	portfolio add: childPortfolio.
	portfolio add: anotherAccount.
	
	self assert: (portfolio transactions allSatisfy: [:transaction | 
		(childPortfolio transactions includes: transaction) or:
		(anotherAccount transactions includes: transaction)
		]).
	
	self assert: (account transactions allSatisfy: [:transaction | 
		(childPortfolio transactions includes: transaction) ]).
	
	self assert: (anotherAccount transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction) ]).
		
	self assert: (childPortfolio transactions allSatisfy: [:transaction | 
		(portfolio transactions includes: transaction) ]).
		

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 18:29:10'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 18:29:10'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 18:29:10'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 18:29:10'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 18:29:10'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 18:29:10'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 18:29:10'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 18:29:10'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:29:10'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:29:10'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:29:49'!
test11portfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts

	| portfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:31:01' prior: 50878477!
test11portfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts

	| portfolio anotherPortfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherPortfolio.
	anotherPortfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	! !

!testRun: #PortfolioTest #test11portfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:31:04'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:32:17'!
test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts

	| portfolio anotherPortfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherPortfolio.
	anotherPortfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	! !

!methodRemoval: PortfolioTest #test11portfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 18:32:17'!
test11portfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts

	| portfolio anotherPortfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherPortfolio.
	anotherPortfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:33:28'!
test11portfolioOnlyAcceptsValidPortfolios

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid portfolio' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 18:33:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:34:30'!
test11DELETEportfolioOnlyAcceptsValidPortfolios

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid portfolio' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !

!methodRemoval: PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 18:34:30'!
test11portfolioOnlyAcceptsValidPortfolios

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid portfolio' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:35:06'!
test11portolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.

	portfolio add: account.
	
	self should: [ portfolio add: account ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio receptiveAccountAlreadyExistsDescription  ] 	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:36:15' prior: 50878616!
test11portolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.
	
	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ] 	

	! !

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:36:25'!
FAILURE!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:36:25'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 18:36:59' prior: 50878121!
addPortfolio: aPortfolio 
	(accounts includes: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ portfolios add: aPortfolio. ]
! !
!Portfolio methodsFor: 'errors' stamp: 'jn 5/23/2021 18:37:14'!
portfolioAlreadyExist
	
	^ self error: self class portfolioAlreadyExistsDescription.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:37:24'!
portfolioAlreadyExistsDescription 
	
	^'Portfolio already exists in portfolio.'.! !

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:37:29'!
FAILURE!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:37:29'!
FAILURE!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:37:41'!
FAILURE!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:37:41'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:38:14' prior: 50878631!
test11portolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.
		portfolio add: anotherPortfolio.

	"self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ] 	"

	! !

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:38:16'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:38:20'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 18:38:45' prior: 50878653!
addPortfolio: aPortfolio 
	(portfolios includes: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ portfolios add: aPortfolio. ]
! !

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:38:49'!
ERROR!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:38:49'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:38:57' prior: 50878687!
test11portolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ] 

	! !

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 18:38:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:40:36'!
test12dummy

	| portfolio anotherPortfolio anotherPortfolio2 |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anotherPortfolio2 := Portfolio new.

	portfolio add: anotherPortfolio2.
	anotherPortfolio add: anotherPortfolio2.
	portfolio add: anotherPortfolio.

	
	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 18:40:38'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 18:41:12' prior: 50878743!
test12dummy

	| portfolio anotherPortfolio anotherPortfolio2 |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anotherPortfolio2 := Portfolio new.

	portfolio add: anotherPortfolio2.
	anotherPortfolio add: anotherPortfolio2.

	self should: [ 	portfolio add: anotherPortfolio. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ] 

	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 18:41:15'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 18:41:15'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 18:59:14'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 18:59:14'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/23/2021 18:59:49'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/23/2021 18:59:57' prior: 50878135 overrides: 16896425!
initialize

	accounts := Set new.
	portfolios := Set new.
	parents := Set new.! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:00:53' prior: 50878710!
addPortfolio: aPortfolio 
	(portfolios includes: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:01:22'!
addParent: aPortfolio 
	
	parents add: aPortfolio.
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:01:30' prior: 50878813!
addParent: aParentPortfolio 
	
	parents add: aParentPortfolio.
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:03:23' prior: 50878805!
addPortfolio: aPortfolio 
	(portfolios parentsIncludesAny: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:06:04'!
parentsIncludesAny: aPortfolio 
	parents empty 
		ifTrue: ["dfs"]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio parentsIncludesAny: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:07:36' prior: 50878832!
parentsIncludesAny: aPortfolio 
	parents empty 
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio parentsIncludesAny: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:10:37'!
childrensIncludesAny: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ self portfolioAlreadyExist ] 
		ifFalse: [
			portfolios do: [:portfolio | portfolio childrensIncludesAny: aPortfolio ]
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:16:02'!
includes: aPortfolio 
	
	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [
			]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:17:01' prior: 50878823!
addPortfolio: aPortfolio 
	(self parentsIncludesAny: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:18:46' prior: 50878849!
childrensIncludesAny: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ ^true ] 
		ifFalse: [
			portfolios do: [:portfolio | portfolio childrensIncludesAny: aPortfolio ]
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:20:40' prior: 50878858!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [
			portfolios do: [:portfolio | portfolio includes: aPortfolio ]
			]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:31:02'!
findRoots: aPortfolio 
	parents empty 
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio parentsIncludesAny: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 19:31:02' prior: 50878864!
addPortfolio: aPortfolio 
	(self findRoots: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 19:31:02' prior: 50878889!
findRoots: aPortfolio 
	parents empty 
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio parentsIncludesAny: aPortfolio ] 
		]
! !

!methodRemoval: Portfolio #parentsIncludesAny: stamp: 'jn 5/23/2021 19:31:02'!
parentsIncludesAny: aPortfolio 
	parents empty 
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio parentsIncludesAny: aPortfolio ] 
		]
!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:31:13' prior: 50878908!
findRoots: aPortfolio 
	parents empty 
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio findRoots: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:33:46' prior: 50878899!
addPortfolio: aPortfolio 
	(self validateNoDuplicates: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:34:50'!
validateNoDuplicates: aPortfolio
	
	self findDuplicatesFromRoots: aPortfolio.! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:35:09'!
findDuplicatesFromRoots: aPortfolio 
	parents empty 
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio findRoots: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 19:35:09' prior: 50878949!
findDuplicatesFromRoots: aPortfolio 
	parents empty 
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio findRoots: aPortfolio ] 
		]
! !

!methodRemoval: Portfolio #findRoots: stamp: 'jn 5/23/2021 19:35:09'!
findRoots: aPortfolio 
	parents empty 
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio findRoots: aPortfolio ] 
		]
!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:35:14' prior: 50878959!
findDuplicatesFromRoots: aPortfolio 
	parents empty 
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio findDuplicatesFromRoots: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:35:25' prior: 50878935!
addPortfolio: aPortfolio 
	(self validateNoDuplicates: aPortfolio) 
		"ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]"
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:36:11' prior: 50878977!
findDuplicatesFromRoots: aPortfolio 
	parents empty 
		"Si no tiene raices hacemos DFS"
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			parents do: [ :aParentPortfolio | aParentPortfolio findDuplicatesFromRoots: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:36:57' prior: 50878996!
findDuplicatesFromRoots: aPortfolio 
	parents empty 
		"Si es raiz hacemos DFS buscando repetidos"
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents do: [ :aParentPortfolio | aParentPortfolio findDuplicatesFromRoots: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:37:47' prior: 50879007!
findDuplicatesFromRoots: aPortfolio 
	parents empty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con aPortfolio"
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents do: [ :aParentPortfolio | aParentPortfolio findDuplicatesFromRoots: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:37:58' prior: 50879020!
findDuplicatesFromRoots: aPortfolio 
	parents empty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents do: [ :aParentPortfolio | aParentPortfolio findDuplicatesFromRoots: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:52:09'!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents empty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents do: [ :aParentPortfolio | aParentPortfolio findDuplicatesFromRoots: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 19:52:09' prior: 50878944!
validateNoDuplicates: aPortfolio
	
	self findRootsAndCheckDuplicatesWith: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 19:52:09' prior: 50879048!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents empty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents do: [ :aParentPortfolio | aParentPortfolio findDuplicatesFromRoots: aPortfolio ] 
		]
! !

!methodRemoval: Portfolio #findDuplicatesFromRoots: stamp: 'jn 5/23/2021 19:52:09'!
findDuplicatesFromRoots: aPortfolio 
	parents empty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents do: [ :aParentPortfolio | aParentPortfolio findDuplicatesFromRoots: aPortfolio ] 
		]
!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:52:37' prior: 50879069!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents empty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ self childrensIncludesAny: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents do: [ :aParentPortfolio | aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:53:14'!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ ^true ] 
		ifFalse: [
			portfolios do: [:portfolio | portfolio childrensIncludesAny: aPortfolio ]
		]
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 19:53:14' prior: 50879098!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents empty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents do: [ :aParentPortfolio | aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 19:53:14' prior: 50879112!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ ^true ] 
		ifFalse: [
			portfolios do: [:portfolio | portfolio childrensIncludesAny: aPortfolio ]
		]
! !

!methodRemoval: Portfolio #childrensIncludesAny: stamp: 'jn 5/23/2021 19:53:14'!
childrensIncludesAny: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ ^true ] 
		ifFalse: [
			portfolios do: [:portfolio | portfolio childrensIncludesAny: aPortfolio ]
		]
!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:53:18' prior: 50879136!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ ^true ] 
		ifFalse: [
			portfolios do: [:portfolio | portfolio checkDuplicatesWith: aPortfolio ]
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:56:11' prior: 50879153!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ ^true ] 
		ifFalse: [
			portfolios do: [:portfolio | portfolio checkDuplicatesWith: aPortfolio ]
		]
	
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:57:31' prior: 50879162!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ ^true ] 
		ifFalse: [
			portfolios do: [:portfolio | portfolio checkDuplicatesWith: aPortfolio ]
		]
	
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 19:59:29' prior: 50879171!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ ^true ] 
		ifFalse: [ | hasDuplicates |
			hasDuplicates := false.
			portfolios do: [:portfolio | 
				hasDuplicates := hasDuplicates or: (portfolio checkDuplicatesWith: aPortfolio) ]. 
			^hasDuplicates.
		]
	
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:01:35' prior: 50878882!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [
			| hasDuplicates |
			hasDuplicates := false.
			portfolios do: [:portfolio | hasDuplicates := hasDuplicates or: (portfolio includes: aPortfolio) ].
			^hasDuplicates.
			]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:01:38' prior: 50879192!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [
			| hasDuplicates |
			hasDuplicates := false.
			portfolios do: [:portfolio | hasDuplicates := hasDuplicates or: (portfolio includes: aPortfolio) ].
			^hasDuplicates.
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:02:19' prior: 50879121!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents empty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents do: [ :aParentPortfolio | aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio ] 
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:02:31' prior: 50879063!
validateNoDuplicates: aPortfolio
	
	^ self findRootsAndCheckDuplicatesWith: aPortfolio.! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:02:44' prior: 50878987!
addPortfolio: aPortfolio 
	(self validateNoDuplicates: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:02:48'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:02:48'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:03:18' prior: 50879214!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents do: [ :aParentPortfolio | aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio ] 
		]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:03:21'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:03:25'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 20:04:11' prior: 50878758!
test12dummy

	| portfolio anotherPortfolio anotherPortfolio2 |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anotherPortfolio2 := Portfolio new.

	portfolio add: anotherPortfolio2.
	anotherPortfolio add: anotherPortfolio2.
	portfolio add: anotherPortfolio.
	self should: [ 	portfolio add: anotherPortfolio. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ] 

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 20:07:56' prior: 50879319!
test12dummy

	| p1 p2 p3 p4 p5 p6 p7 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p6 := Portfolio new.
	p7 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	"self should: [ 	portfolio add: anotherPortfolio. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ] "

	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:08:05'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:08:05'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 20:08:17' prior: 50879337!
test12dummy

	| p1 p2 p3 p4 p5 p6 p7 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p6 := Portfolio new.
	p7 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	self assert: true.
	"self should: [ 	portfolio add: anotherPortfolio. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ] "

	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:08:27'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:08:27'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:08:35'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:08:35'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:09:39' prior: 50879249!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			|hasDuplicates|
			hasDuplicates := false.
			parents do: [ :aParentPortfolio | hasDuplicates := hasDuplicates or: (aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio) ] .
			^hasDuplicates
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:09:52' prior: 50879386!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			|hasDuplicates|
			hasDuplicates := false.
			parents do: [ :aParentPortfolio | 
				hasDuplicates := hasDuplicates or: 
				(aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio) ] .
			^hasDuplicates
		]
! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:09:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 20:11:00' prior: 50879359!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	self assert: true.
	"self should: [ 	portfolio add: anotherPortfolio. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ] "

	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:11:05'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 20:11:15' prior: 50879425!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	
	self assert: true.
	"self should: [ 	portfolio add: anotherPortfolio. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ] "

	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:11:17'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 20:11:26' prior: 50879446!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	
	p4 add: p7.
	
	self assert: true.
	"self should: [ 	portfolio add: anotherPortfolio. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ] "

	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:11:28'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:11:28'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 20:12:06' prior: 50879468!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	
	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ]

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:12:10'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/23/2021 20:19:29'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents accandport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/23/2021 20:19:28' prior: 50878799 overrides: 16896425!
initialize

	accounts := Set new.
	portfolios := Set new.
	parents := Set new.
	accandport := Set new.! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:19:41' prior: 50877961!
addAccount: aReceptiveAccount 
	(accandport includes: aReceptiveAccount) 
		ifTrue: [ self receptiveAccountAlreadyExist. ] 
		ifFalse: [ accandport add: aReceptiveAccount. ]! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:19:44' prior: 50879235!
addPortfolio: aPortfolio 
	(self validateNoDuplicates: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			accandport add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:19:53'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:19:53'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:19:53'!
FAILURE!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:19:53'!
FAILURE!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:19:53'!
FAILURE!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:19:53'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:19:53'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:19:53'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:19:53'!
FAILURE!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:19:53'!
FAILURE!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:19:53'!
FAILURE!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:19:53'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:19:53'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:19:53'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'jn 5/23/2021 20:20:14' prior: 50878222!
balance

	^ (accandport sum: [:account | account balance ] ifEmpty: [0]).! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 20:20:24' prior: 50879180!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ ^true ] 
		ifFalse: [ | hasDuplicates |
			hasDuplicates := false.
			accandport do: [:portfolio | 
				hasDuplicates := hasDuplicates or: (portfolio checkDuplicatesWith: aPortfolio) ]. 
			^hasDuplicates.
		]
	
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 20:20:58' prior: 50879203!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [
			| hasDuplicates |
			hasDuplicates := false.
			accandport do: [:portfolio | hasDuplicates := hasDuplicates or: (portfolio includes: aPortfolio) ].
			^hasDuplicates.
		]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:21:12'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:21:12'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:21:12'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:21:12'!
FAILURE!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:21:12'!
FAILURE!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:21:12'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:21:12'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:21:12'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:21:12'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:21:12'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:21:12'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:21:12'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:21:12'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:21:12'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:21:39'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:21:39'!
ERROR!
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 20:23:18' prior: 50879666!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [
			| hasDuplicates |
			hasDuplicates := false.
			accandport do: [:portfolio | hasDuplicates := hasDuplicates or: (aPortfolio includes: portfolio) ].
			^hasDuplicates.
		]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:23:21'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:23:21'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:23:21'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:23:21'!
FAILURE!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:23:21'!
FAILURE!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:23:21'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:23:21'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:23:21'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:23:21'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:23:21'!
FAILURE!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:23:21'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:23:21'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:23:21'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:23:21'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/23/2021 20:24:15' prior: 50878275!
transactions
	| transactions |
	transactions := OrderedCollection new.
	accandport do: [:account | transactions addAll: account transactions].
	accandport do: [:portfolio | transactions addAll: portfolio transactions].

	^transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/23/2021 20:24:29' prior: 50879801!
transactions
	| transactions |
	transactions := OrderedCollection new.
	accandport do: [:account | transactions addAll: account transactions].

	^transactions.! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:24:32'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:24:32'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:24:32'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 20:25:35' prior: 50879577!
addAccount: aReceptiveAccount 
	(self validateNoDuplicates: aReceptiveAccount) 
		ifTrue: [ self receptiveAccountAlreadyExist. ] 
		ifFalse: [ accandport add: aReceptiveAccount. ]! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:25:38'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:25:38'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:25:38'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:25:38'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:25:38'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:25:38'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:25:38'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:25:38'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:25:38'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:25:38'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:25:38'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:25:38'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:25:38'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:25:38'!
PASSED!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:25:49'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:25:49'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:25:49'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:25:49'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:25:49'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:25:49'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:25:49'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:25:49'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:25:49'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:25:49'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:25:49'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:25:49'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:25:49'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:25:49'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:25:59'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:25:59'!
ERROR!
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 20:27:14' prior: 50879653!
checkDuplicatesWith: aPortfolio 
	
	(self includes: aPortfolio ) 
		ifTrue: [ ^true ] 
		ifFalse: [ | hasDuplicates |
			hasDuplicates := false.
			accandport do: [:portfolio | 
				hasDuplicates := hasDuplicates or: (portfolio checkDuplicatesWith: aPortfolio) ]. 
			^hasDuplicates.
		]
	
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:27:18'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:27:18'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:27:18'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:27:18'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:27:18'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:27:18'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:27:18'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:27:18'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:27:18'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:27:18'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:27:18'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:27:18'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:27:18'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:27:18'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:27:24'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:27:24'!
ERROR!
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 20:27:53' prior: 50879996!
checkDuplicatesWith: aPortfolio 
	
	(self includes: aPortfolio ) 
		ifTrue: [ ^true ] 
		ifFalse: [ | hasDuplicates |
			hasDuplicates := false.
			accandport do: [:portfolio | 
				hasDuplicates := hasDuplicates or: (aPortfolio checkDuplicatesWith: portfolio) ]. 
			^hasDuplicates.
		]
	
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:27:55'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:27:55'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:27:55'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:27:55'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:27:55'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:27:55'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:27:55'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:27:55'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:27:55'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:27:55'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:27:55'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:27:55'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:27:55'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:27:55'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:27:59'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:27:59'!
ERROR!
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 20:48:04' prior: 50879738!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [
			| hasDuplicates |
			hasDuplicates := false.
			accandport do: [:portfolio | hasDuplicates := hasDuplicates or: (portfolio includes: aPortfolio) ].
			^hasDuplicates.
		]
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jn 5/23/2021 20:49:53'!
includes: aPOtfolio 

^false! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:49:55'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:49:55'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:49:55'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:49:55'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:49:55'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:49:55'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:49:55'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:49:55'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:49:55'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:49:55'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:49:55'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:49:55'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:49:55'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:49:55'!
PASSED!
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 20:52:25' prior: 50880068!
checkDuplicatesWith: aPortfolio 
	
	(self includes: aPortfolio ) 
		ifTrue: [ ^true ] 
		ifFalse: [ | hasDuplicates |
			hasDuplicates := false.
			accandport do: [:portfolio | 
				hasDuplicates := hasDuplicates or: (portfolio checkDuplicatesWith: aPortfolio) ]. 
			^hasDuplicates.
		]
	
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jn 5/23/2021 20:52:50'!
checkDuplicatesWith: aPortfolio 
	
	^(self includes: aPortfolio ) 
		
	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:52:53'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:52:53'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:52:53'!
FAILURE!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:53:04'!
FAILURE!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:53:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jn 5/23/2021 20:55:45' prior: 50880151!
includes: aPOtfolio 

	^ self = aPOtfolio ! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:55:52'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:55:52'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:55:52'!
FAILURE!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:55:57'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:55:57'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:55:57'!
FAILURE!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 20:56:04'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 20:56:05'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 20:56:06'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 20:56:07'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:56:08'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 20:56:09'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 20:56:10'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 20:56:11'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:56:12'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:56:13'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 20:56:15'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 20:56:16'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 20:56:17'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:56:19'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:56:19'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:56:46'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:56:46'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:58:15'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 20:58:34' prior: 50879492!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	p4 add: p7.
	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ]

	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:58:36'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 20:58:43'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 21:06:31' prior: 50880460!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	p4 add: p7.
	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ]

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 22:58:56'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 22:58:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 22:59:07' prior: 50880483!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ]

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 22:59:09'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 22:59:09'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 22:59:09'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 23:00:22' prior: 50880553!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	p4 add: p7.
	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ]

	! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:05:55' prior: 50878818!
addParent: aParentPortfolio 
	
	parents addAll: aParentPortfolio.
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:06:09' prior: 50879586!
addPortfolio: aPortfolio 
	(self validateNoDuplicates: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			accandport add: aPortfolio. 
			aPortfolio addParent: parents.
		]
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:07:26' prior: 50879229!
validateNoDuplicates: aPortfolio
	
	^ parents allSatisfy: [:aRoot | aRoot checkDuplicatesWith: aPortfolio].
	"^ self findRootsAndCheckDuplicatesWith: aPortfolio."! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:07:28'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:07:28'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:07:28'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:07:28'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:07:28'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:07:28'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:07:28'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:07:28'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:07:28'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:07:28'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:07:28'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:07:28'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:07:28'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:07:28'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:08:18' prior: 50880648!
addPortfolio: aPortfolio 
	(self validateNoDuplicates: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			accandport add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:08:23' prior: 50880643!
addParent: aParentPortfolio 
	
	parents add: aParentPortfolio.
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:08:44' prior: 50880658!
validateNoDuplicates: aPortfolio
	
	^ self findRootsAndCheckDuplicatesWith: aPortfolio.! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/23/2021 23:10:29'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/23/2021 23:10:36' prior: 50879571 overrides: 16896425!
initialize

	accounts := Set new.
	portfolios := Set new.
	parents := Set new.
! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/23/2021 23:11:06'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents accandport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:11:04' prior: 50880718!
addPortfolio: aPortfolio 
	(self validateNoDuplicates: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			accandport add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/23/2021 23:11:17' prior: 50880753 overrides: 16896425!
initialize

	accounts := Set new.
	portfolios := Set new.
	parents := Set new.
	accandport := Set new.! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:11:20'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:11:20'!
PASSED!
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:12:11' prior: 50879404!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents allSatisfy: [ :aParentPortfolio | (aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio) ] .
		]
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:16:18' prior: 50880207!
checkDuplicatesWith: aPortfolio 
	
	(self includes: aPortfolio ) 
		ifTrue: [ ^true ] 
		ifFalse: [ accandport allSatisfy: [:portfolio |  (portfolio checkDuplicatesWith: aPortfolio) ]]
	
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:16:49' prior: 50880852!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self ) 
		ifTrue: [ ^true ] 
		ifFalse: [ accandport allSatisfy: [:portfolio |  (portfolio checkDuplicatesWith: aPortfolio) ]]
	
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:18:46' prior: 50880140!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [ accandport allSatisfy: [:portfolio | (self includes: portfolio) ]]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:18:48'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:18:48'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:18:48'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:18:48'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:18:48'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:18:48'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:18:48'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:18:48'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:18:48'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:18:48'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:18:48'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:18:48'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:18:48'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:18:48'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 23:18:57' prior: 50880625!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ]

	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:18:59'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:18:59'!
ERROR!
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:19:31' prior: 50880870!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [^accandport allSatisfy: [:portfolio | (self includes: portfolio) ]]
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:19:37' prior: 50880836!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			^parents allSatisfy: [ :aParentPortfolio | (aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio) ] .
		]
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:19:42' prior: 50880861!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self ) 
		ifTrue: [ ^true ] 
		ifFalse: [ ^accandport allSatisfy: [:portfolio |  (portfolio checkDuplicatesWith: aPortfolio) ]]
	
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:19:44'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:19:44'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:19:44'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:19:44'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:19:44'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:19:44'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:19:44'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:19:44'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:19:44'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:19:44'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:19:44'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:19:44'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:19:44'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:19:44'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:19:49'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:19:49'!
ERROR!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:19:55'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:19:57'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:19:58'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:19:58'!
ERROR!
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:20:46' prior: 50880953!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [^accandport allSatisfy: [:portfolio | (self includes: portfolio) not ]]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:20:55'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:20:55'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:20:55'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:20:55'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:20:55'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:20:55'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:20:55'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:20:55'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:20:55'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:20:55'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:20:55'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:20:55'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:20:55'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:20:55'!
ERROR!
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:21:04' prior: 50880977!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self ) 
		ifTrue: [ ^true ] 
		ifFalse: [ ^accandport allSatisfy: [:portfolio |  (portfolio checkDuplicatesWith: aPortfolio) not ]]
	
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:21:52' prior: 50881117!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self ) 
		ifTrue: [ ^true ] 
		ifFalse: [ ^accandport allSatisfy: [:portfolio |  (portfolio checkDuplicatesWith: aPortfolio) ] not]
	
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:21:58' prior: 50880961!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			^parents allSatisfy: [ :aParentPortfolio | (aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio) ] not .
		]
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:22:02' prior: 50881057!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [^accandport allSatisfy: [:portfolio | (self includes: portfolio) ] not]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:22:05'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:22:05'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:22:05'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:22:05'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:22:05'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:22:05'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:22:05'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:22:05'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:22:05'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:22:05'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:22:05'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:22:05'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:22:05'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:22:05'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:22:51' prior: 50880767!
addPortfolio: aPortfolio 
	(self validateNoDuplicates: aPortfolio) 
		ifFalse: [ self portfolioAlreadyExist. ] 
		ifTrue: [ 
			accandport add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:22:59' prior: 50879876!
addAccount: aReceptiveAccount 
	(self validateNoDuplicates: aReceptiveAccount) 
		ifFalse: [ self receptiveAccountAlreadyExist. ] 
		ifTrue: [ accandport add: aReceptiveAccount. ]! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:24:11' prior: 50881137!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			^parents allSatisfy: [ :aParentPortfolio | 
				aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio ]
			]
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:24:46' prior: 50881127!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self ) 
		ifTrue: [ ^false ] 
		ifFalse: [ ^accandport allSatisfy: [:portfolio |  (portfolio checkDuplicatesWith: aPortfolio) not ]]
	
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:25:16' prior: 50881153!
includes: aPortfolio 

	self = aPortfolio 
		ifTrue: [^true]
		ifFalse: [^accandport allSatisfy: [:portfolio | (self includes: portfolio) not]]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:25:25'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:25:25'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:25:25'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:25:25'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:25:25'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:25:25'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:25:25'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:25:25'!
PASSED!

p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:27:48' prior: 50881212!
addPortfolio: aPortfolio 
	"(self validateNoDuplicates: aPortfolio) 
		ifFalse: [ self portfolioAlreadyExist. ] 
		ifTrue: [ "
			accandport add: aPortfolio. 
			aPortfolio addParent: self.
		"]"
! !

	p1 add: p2.!

	p2 add: p3.!

	p2 add: p4.!

	p1 includes: p4!

	p1 includes: p4!

	p1 includes: p4!

----STARTUP---- (23 May 2021 23:32:48) as /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/CuisUniversity-4532.image!


!classRemoval: #ReceptiveAccount stamp: 'jn 5/23/2021 23:33:28'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'jn 5/23/2021 23:33:28'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #NameOfSubclass stamp: 'jn 5/23/2021 23:33:29'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'jn 5/23/2021 23:33:29'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'jn 5/23/2021 23:33:30'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'jn 5/23/2021 23:33:30'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'jn 5/23/2021 23:33:30'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'jn 5/23/2021 23:33:31'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/Portfolio-Ejercicio2.st----!

!classRemoval: #ReceptiveAccount stamp: 'jn 5/23/2021 23:35:20'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'jn 5/23/2021 23:35:20'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents accandport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #NameOfSubclass stamp: 'jn 5/23/2021 23:35:21'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'jn 5/23/2021 23:35:21'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'jn 5/23/2021 23:35:22'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'jn 5/23/2021 23:35:22'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'jn 5/23/2021 23:35:23'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'jn 5/23/2021 23:35:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:35:33'!
PASSED!

p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.
!

p1 add: p2.
	p2 add: p3.
	p2 add: p4.!

	p1 includes: p4!

	p1 includes: p5  !

	p1 includes: p2!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/23/2021 23:37:02'!
test13dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	
	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio portfolioAlreadyExistsDescription  ]

	! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:39:29' prior: 50879119!
addAccount: aReceptiveAccount 
	(self validateNoDuplicatesAccounts: aReceptiveAccount) 
		ifTrue: [ self receptiveAccountAlreadyExist. ] 
		ifFalse: [ 
			accounts add: aReceptiveAccount. 
		]! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:40:11'!
validateNoDuplicatesAccount: anAccount
	
	^ self findRootsAndCheckDuplicatesWithAccount: anAccount.! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:41:03'!
findRootsAndCheckDuplicatesWithAccount: anAccount 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: anAccount ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			|hasDuplicates|
			hasDuplicates := false.
			parents do: [ :aParentPortfolio | 
				hasDuplicates := hasDuplicates or: 
				(aParentPortfolio findRootsAndCheckDuplicatesWith: anAccount) ] .
			^hasDuplicates
		]
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/23/2021 23:41:56' prior: 50879085!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents allSatisfy: [ :aParentPortfolio | 
				(aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio) not ] .
		]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:42:09'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:42:09'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:42:09'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:42:09'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:42:09'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:42:09'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:42:09'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:42:09'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:42:09'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:42:09'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:42:09'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:42:09'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:42:09'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:42:09'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/23/2021 23:42:09'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:42:27' prior: 50879132!
addPortfolio: aPortfolio 
	(self validateNoDuplicates: aPortfolio) 
		ifFalse: [ self portfolioAlreadyExist. ] 
		ifTrue: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:42:28'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:42:28'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:42:28'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:42:28'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:42:28'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/23/2021 23:42:28'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/23/2021 23:49:07' prior: 50879052!
transactions
	| transactions |
	transactions := OrderedCollection new.
	accounts do: [:account | transactions addAll: account transactions].
	portfolios do: [:portfolio | transactions addAll: portfolio transactions].

	^transactions copy.! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:49:10'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:49:10'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:49:10'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:49:10'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:49:10'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:49:10'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:49:10'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:49:10'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:49:10'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:49:10'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:49:10'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:49:10'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:49:10'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:49:10'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/23/2021 23:49:10'!
ERROR!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:49:47'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:49:50'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:49:50'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:50:46' prior: 50879302!
addAccount: aReceptiveAccount 
	(accounts includes: aReceptiveAccount) 
		ifTrue: [ self receptiveAccountAlreadyExist. ] 
		ifFalse: [ 
			accounts add: aReceptiveAccount. 
		]! !

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:50:51'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:50:55'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:50:55'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/23/2021 23:51:24' prior: 50879406!
addPortfolio: aPortfolio 
	"(self validateNoDuplicates: aPortfolio) 
		ifFalse: [ self portfolioAlreadyExist. ] 
		ifTrue: [ "
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		"]"
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/23/2021 23:51:27'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/23/2021 23:51:27'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/23/2021 23:51:27'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/23/2021 23:51:27'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 00:03:35' prior: 50879567!
addPortfolio: aPortfolio 
	(portfolios includes: aPortfolio) 
		ifFalse: [ self portfolioAlreadyExist. ] 
		ifTrue: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 00:04:01'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 00:04:01'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:04:01'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:04:01'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:04:01'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:04:01'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 00:04:01'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 00:04:01'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:04:01'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:04:01'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:04:01'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 00:04:01'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 00:04:01'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 00:04:01'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 00:04:01'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:04:07'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:04:07'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 00:04:41' prior: 50879631!
addPortfolio: aPortfolio 
	(portfolios includes: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 00:04:44'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 00:04:44'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 00:04:44'!
FAILURE!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:09:59'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:10:03'!
PASSED!

	a := OrderedCollection new!

	a := #(1 2 3 #(4 5))!

	a collect: [:b | b]!

portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 90 on: anotherAccount.

	childPortfolio add: account.
	portfolio add: childPortfolio.
	portfolio add: anotherAccount.!

	portfolio transactions!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 00:17:17' prior: 50878713!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio account anotherAccount aDeposit aWithdraw anotherDeposit |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
	
	anotherAccount := ReceptiveAccount new.
	anotherDeposit := Deposit register: 90 on: anotherAccount.

	childPortfolio add: account.
	portfolio add: childPortfolio.
	portfolio add: anotherAccount.
	
	self assert: portfolio transactions size equals: 3.
	self assert: portfolio transactions includes: aDeposit.
	self assert: portfolio transactions includes: aWithdraw.
	self assert: portfolio transactions includes: anotherDeposit.
		

	! !

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:17:44'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 00:18:20' prior: 50878604!
test04portfolioTransactionsEqualsToAllAccountsTransactions

	| portfolio account anotherAccount aDeposit aWithdraw anotherDeposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	anotherDeposit := Deposit register: 30 on: anotherAccount.
		
	self assert: portfolio transactions size equals: 3.
	self assert: portfolio transactions includes: aDeposit.
	self assert: portfolio transactions includes: aWithdraw.
	self assert: portfolio transactions includes: anotherDeposit.
	! !

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:18:26'!
PASSED!

Object subclass: #Balance
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Balance category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 00:27:25'!
Object subclass: #Balance
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Balance subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 00:27:32'!
Balance subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Balance subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 00:27:37'!
Balance subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Balance methodsFor: 'no messages' stamp: 'jn 5/24/2021 00:28:06'!
transactions

	self subclassResponsibility ! !
!Balance methodsFor: 'transactions' stamp: 'jn 5/24/2021 00:28:29'!
balance

	self subclassResponsibility ! !
!Balance methodsFor: 'transactions' stamp: 'jn 5/24/2021 00:28:58'!
hasRegistered: anAccountTransaction

	self subclassResponsibility ! !
!Balance methodsFor: 'transactions' stamp: 'jn 5/24/2021 00:29:15' prior: 50879895!
hasRegistered: aTransaction

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 00:32:06'!
Balance subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents balances'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 00:32:03'!
addBalance: aBalance 
	(balances includes: aBalance) 
		ifTrue: [ self receptiveAccountAlreadyExist. ] 
		ifFalse: [ 
			balances add: aBalance. 
		]! !
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/24/2021 00:32:38' prior: 50879040 overrides: 16896425!
initialize
	
	balances := Set new.	
	parents := Set new.
! !

!classRenamed: #Balance as: #FinancialAccounting stamp: 'jn 5/24/2021 00:36:45'!
Smalltalk renameClassNamed: #Balance as: #FinancialAccounting!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 00:37:10'!
FinancialAccounting subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents balances accountings'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/24/2021 00:37:05' prior: 50879922 overrides: 16896425!
initialize
	
	accountings := Set new.	
	parents := Set new.
! !

FinancialAccounting subclass: #Portfolio
	instanceVariableNames: 'parents accountings'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 00:38:00'!
FinancialAccounting subclass: #Portfolio
	instanceVariableNames: 'parents accountings'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'balance' stamp: 'jn 5/24/2021 00:38:24' prior: 50879045 overrides: 50879891!
balance

	^ accountings sum: [:accounting | accounting balance ] ifEmpty: [0].! !
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/24/2021 00:38:48' prior: 50879470 overrides: 50879887!
transactions
	| transactions |
	transactions := OrderedCollection new.
	accountings do: [:accounting | transactions addAll: accounting transactions].
	^transactions copy.! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 00:39:17'!
addAccounting: anAccounting 
	(accountings includes: anAccounting) 
		ifTrue: [ self receptiveAccountAlreadyExist. ] 
		ifFalse: [ 
			accountings add: anAccounting. 
		]! !

!methodRemoval: Portfolio #addBalance: stamp: 'jn 5/24/2021 00:39:23'!
addBalance: aBalance 
	(balances includes: aBalance) 
		ifTrue: [ self receptiveAccountAlreadyExist. ] 
		ifFalse: [ 
			balances add: aBalance. 
		]!
!ReceptiveAccount methodsFor: 'private' stamp: 'jn 5/24/2021 00:39:46' prior: 50879217!
addToPortfolio: aPortfolio

	aPortfolio addAccounting: self! !
!Portfolio methodsFor: 'add' stamp: 'jn 5/24/2021 00:39:55' prior: 50879146!
addToPortfolio: aPortfolio 
	
	aPortfolio addAccounting: self.
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 00:40:00'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 00:40:00'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 00:40:00'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 00:40:00'!
FAILURE!
!FinancialAccounting methodsFor: 'initialization' stamp: 'jn 5/24/2021 00:40:40' overrides: 16896425!
initialize
	
	self subclassResponsibility ! !

!methodRemoval: Portfolio #addToPortfolio: stamp: 'jn 5/24/2021 00:41:30'!
addToPortfolio: aPortfolio 
	
	aPortfolio addAccounting: self.
!
!FinancialAccounting methodsFor: 'initialization' stamp: 'jn 5/24/2021 00:41:57'!
addToPortfolio: aPortfolio

	aPortfolio addAccounting: self! !

!methodRemoval: ReceptiveAccount #addToPortfolio: stamp: 'jn 5/24/2021 00:42:21'!
addToPortfolio: aPortfolio

	aPortfolio addAccounting: self!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 00:42:40'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 00:42:40'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 00:42:40'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 00:42:40'!
FAILURE!

!methodRemoval: Portfolio #addAccount: stamp: 'jn 5/24/2021 00:47:03'!
addAccount: aReceptiveAccount 
	(accounts includes: aReceptiveAccount) 
		ifTrue: [ self receptiveAccountAlreadyExist. ] 
		ifFalse: [ 
			accounts add: aReceptiveAccount. 
		]!

!methodRemoval: Portfolio #addPortfolio: stamp: 'jn 5/24/2021 00:47:08'!
addPortfolio: aPortfolio 
	(portfolios includes: aPortfolio) 
		ifTrue: [ self portfolioAlreadyExist. ] 
		ifFalse: [ 
			portfolios add: aPortfolio. 
			aPortfolio addParent: self.
		]
!
!Portfolio methodsFor: 'add' stamp: 'jn 5/24/2021 00:47:29' prior: 50879141!
add: anAccounting 
	
	anAccounting addToPortfolio: self.
! !

!classRemoval: #NameOfSubclass stamp: 'jn 5/24/2021 00:48:25'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialAccounting methodsFor: 'private' stamp: 'jn 5/24/2021 00:50:29' prior: 50880064!
addToPortfolio: aPortfolio

	(aPortfolio addAccounting: self)
		on: Error
		do: [^ self error: self subclass duplicatedErrorDescription ]! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 00:51:25'!
AccountingAlreadyExistsDescription 
	
	^'Portfolio already exists in portfolio.'.! !

!methodRemoval: Portfolio class #portfolioAlreadyExistsDescription stamp: 'jn 5/24/2021 00:51:31'!
portfolioAlreadyExistsDescription 
	
	^'Portfolio already exists in portfolio.'.!

!methodRemoval: Portfolio class #receptiveAccountAlreadyExistsDescription stamp: 'jn 5/24/2021 00:51:41'!
receptiveAccountAlreadyExistsDescription 
	
	^'Receptive account already exists in portfolio.'.!
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'jn 5/24/2021 00:51:56'!
AccountingAlreadyExistsDescription 
	
	^'Receptive account already exists in portfolio.'.! !

!methodRemoval: Portfolio #portfolioAlreadyExist stamp: 'jn 5/24/2021 00:52:17'!
portfolioAlreadyExist
	
	^ self error: self class portfolioAlreadyExistsDescription.!

!methodRemoval: Portfolio #receptiveAccountAlreadyExist stamp: 'jn 5/24/2021 00:52:17'!
receptiveAccountAlreadyExist
	
	^ self error: self class receptiveAccountAlreadyExistsDescription.!
!FinancialAccounting methodsFor: 'private' stamp: 'jn 5/24/2021 00:53:09' prior: 50880156!
addToPortfolio: aPortfolio

	(aPortfolio addAccounting: self)
		on: Error
		do: [^ self error: self class duplicatedErrorDescription ]
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 00:53:28' prior: 50878785!
test11portolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio AccountingAlreadyExistsDescription  ] 

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 00:53:46' prior: 50878678!
test08portolioDoesNotAcceptsDuplicatedAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.

	portfolio add: account.
	
	self should: [ portfolio add: account ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio AccountingAlreadyExistsDescription  ] 	

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 00:53:48'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 00:53:48'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:53:48'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:53:48'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:53:48'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:53:48'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 00:53:48'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 00:53:48'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:53:48'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:53:48'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:53:48'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 00:53:48'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 00:53:48'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 00:53:48'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 00:53:48'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:53:54'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:53:54'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 00:54:31' prior: 50879974!
addAccounting: anAccounting 
	(accountings includes: anAccounting) 
		ifTrue: [ Error ] 
		ifFalse: [ 
			accountings add: anAccounting. 
		]! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 00:54:36'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 00:54:36'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:54:36'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:54:36'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:54:36'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:54:36'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 00:54:36'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 00:54:36'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:54:36'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:54:36'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:54:36'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 00:54:36'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 00:54:36'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 00:54:36'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 00:54:36'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 00:55:18' prior: 50880297!
addAccounting: anAccounting 
	(accountings includes: anAccounting) 
		ifTrue: [ ^ Error ] 
		ifFalse: [ 
			accountings add: anAccounting. 
		]! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 00:55:33'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 00:55:33'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:55:33'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:55:33'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:55:33'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:55:33'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 00:55:33'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 00:55:33'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:55:33'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:55:33'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:55:33'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 00:55:33'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 00:55:33'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 00:55:33'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 00:55:33'!
ERROR!

!methodRemoval: ReceptiveAccount class #AccountingAlreadyExistsDescription stamp: 'jn 5/24/2021 00:56:21'!
AccountingAlreadyExistsDescription 
	
	^'Receptive account already exists in portfolio.'.!
!FinancialAccounting methodsFor: 'private' stamp: 'jn 5/24/2021 00:56:39' prior: 50880198!
addToPortfolio: aPortfolio

	aPortfolio addAccounting: self
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 00:57:04' prior: 50880359!
addAccounting: anAccounting 
	(accountings includes: anAccounting) 
		ifTrue: [ self accountingAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			accountings add: anAccounting. 
		]! !
!Portfolio methodsFor: 'error' stamp: 'jn 5/24/2021 00:57:48'!
accountingAlreadyExistsInPortfolio

	self error: self class accountingAlreadyExistsDescription ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 00:58:00'!
accountingAlreadyExistsDescription 
	
	^'Portfolio already exists in portfolio.'.! !

!methodRemoval: Portfolio class #AccountingAlreadyExistsDescription stamp: 'jn 5/24/2021 00:58:05'!
AccountingAlreadyExistsDescription 
	
	^'Portfolio already exists in portfolio.'.!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 00:58:07'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 00:58:07'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 00:58:07'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 00:58:07'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 00:58:07'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 00:58:20' prior: 50880221!
test08portolioDoesNotAcceptsDuplicatedAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.

	portfolio add: account.
	
	self should: [ portfolio add: account ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ] 	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 00:58:24' prior: 50880206!
test11portolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ] 

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 00:58:26'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 00:58:26'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 00:58:26'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 01:01:06' prior: 50878800!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	
	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 01:01:08'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 01:01:08'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 01:01:18' prior: 50879285!
test13dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	
	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 01:03:11' prior: 50880432!
addAccounting: anAccounting 
	(self hasDuplicates: anAccounting) 
		ifTrue: [ self accountingAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			accountings add: anAccounting. 
		]! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 01:10:45' prior: 50880636!
addAccounting: anAccounting 
	
	(self hasDuplicates: anAccounting) 
		ifTrue: [ self accountingAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			accountings add: anAccounting. 
		]! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 01:11:05' prior: 50880645!
addAccounting: anAccounting 
	
	(self hasDuplicatesWith: anAccounting) 
		ifTrue: [ self accountingAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			accountings add: anAccounting. 
		]! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/24/2021 01:11:55'!
hasDuplicatesWith: anAccounting
	
	^ self findDuplicatesFromRootsWith: anAccounting.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 01:16:32'!
FinancialAccounting subclass: #Portfolio
	instanceVariableNames: 'parents accountings roots'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/24/2021 01:16:31' prior: 50879941 overrides: 50880055!
initialize
	
	accountings := Set new.	
	parents := Set new.
	roots := Set new.
! !
!FinancialAccounting methodsFor: 'private' stamp: 'jn 5/24/2021 01:20:06' prior: 50880427!
addToPortfolio: aPortfolio

	aPortfolio addAccounting: self
	self addRootsFrom: aPortfolio. 
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 01:20:34'!
addRoots: aParentPortfolio 
	
	parents add: aParentPortfolio.
! !
!FinancialAccounting methodsFor: 'private' stamp: 'jn 5/24/2021 01:21:49' prior: 50880684!
addToPortfolio: aPortfolio

	aPortfolio addAccounting: self.
	
	aPortfolio addRootsTo: self. 
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 01:22:45'!
addRootsTo: aChildPortfolio 
	
	aChildPortfolio addRoots: roots.
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 01:23:12' prior: 50880690!
addRoots: aPortfolioRoots 
	
	roots addAll: aPortfolioRoots.
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:25:16' prior: 50880663!
hasDuplicatesWith: anAccounting
	
	roots anySatisfy: [:aRootPortfolio | anAccounting includes: aRootPortfolio ].
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:27:33' prior: 50880711!
hasDuplicatesWith: anAccounting
	
	roots anySatisfy: [:aPortfolio | anAccounting includes: aPortfolio ].
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:27:47' prior: 50880718!
hasDuplicatesWith: anAccounting
	
	^ roots anySatisfy: [:aPortfolio | anAccounting includes: aPortfolio ].
! !

	a:= Set new.!

	a anySatisfy: [:a | a = 0]!

	a anySatisfy: [:a | a = 0 not]!

	a anySatisfy: [:a | (a = 0) not] false !

	a anySatisfy: [:a | (a = 0) not] !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:29:39' prior: 50880725!
hasDuplicatesWith: anAccounting
	
	^ roots anySatisfy: [:aPortfolio | anAccounting includes: aPortfolio ].
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:30:40' prior: 50879103!
includes: anAccounting
	
	^ accountings anySatisfy: [:accounting | accounting includes: anAccounting ].
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:33:34' prior: 50880744!
includes: anAccounting
	(self = anAccounting)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ accountings anySatisfy: [:accounting | accounting includes: anAccounting ]].
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:35:26' prior: 50880737!
hasDuplicatesWith: anAccounting
	
	^ roots anySatisfy: [ :aPortfolio | anAccounting includes: aPortfolio ].
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 01:43:52' prior: 50880706!
addRoots: aPortfolioRoots 
	
	roots addAll: aPortfolioRoots.
	accountings do: [ :accounting | accounting addRoots: aPortfolioRoots ].
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jn 5/24/2021 01:44:03'!
addRoots: aPortfolioRoots 

! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 01:44:06'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 01:44:06'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 01:44:06'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 01:44:06'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 01:44:06'!
FAILURE!
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:48:23'!
hasAnyDuplicatedWith: anAccounting
	
	^ roots anySatisfy: [ :aPortfolio | anAccounting includes: aPortfolio ].
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 01:48:33' prior: 50880654!
addAccounting: anAccounting 
	
	(self hasAnyDuplicatedWith: anAccounting) 
		ifTrue: [ self accountingAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			accountings add: anAccounting. 
		]! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:48:47' prior: 50880758!
hasDuplicatesWith: anAccounting
	
	^ roots anySatisfy: [ :aPortfolio | anAccounting hasDuplicatesWith: aPortfolio ].
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:49:01' prior: 50880830!
hasAnyDuplicatedWith: anAccounting
	
	^ roots anySatisfy: [ :aPortfolio | anAccounting hasDuplicatesWith: aPortfolio ].
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:49:55' prior: 50880846!
hasDuplicatesWith: anAccounting
	(self = anAccounting)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ accountings anySatisfy: [:accounting | accounting includes: anAccounting ]].! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:50:47' prior: 50880860!
hasDuplicatesWith: anAccounting
	(self includes: anAccounting)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ accountings anySatisfy: [:accounting | accounting includes: anAccounting ]].! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:51:37' prior: 50880868!
hasDuplicatesWith: aPortfolio
	(self includes: aPortfolio)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ accountings anySatisfy: [:accounting | accounting includes: aPortfolio ]].! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:52:19' prior: 50880853!
hasAnyDuplicatedWith: anAccounting
	
	^ roots anySatisfy: [ :aPortfolio | aPortfolio hasDuplicatesWith: anAccounting ].
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 01:53:28' prior: 50880877!
hasDuplicatesWith: anAccounting
	(anAccounting includes: self)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ accountings anySatisfy: [:accounting | accounting hasDuplicatesWith: anAccounting ]].! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 01:53:30'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 01:53:30'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 01:53:30'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 01:53:30'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 01:53:30'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 01:53:38'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 01:53:38'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/24/2021 01:54:59' prior: 50880678 overrides: 50880055!
initialize
	
	accountings := Set new.	
	parents := Set new.
	roots := Set new add: self.
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 01:55:01'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 01:55:01'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:55:01'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 01:55:01'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:55:01'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:55:01'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 01:55:01'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 01:55:01'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:55:01'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:55:01'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:55:01'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 01:55:01'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 01:55:01'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 01:55:01'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 01:55:01'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/24/2021 01:55:21' prior: 50880961 overrides: 50880055!
initialize
	
	accountings := Set new.	
	parents := Set new.
	roots := (Set new) add: self.
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 01:55:23'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 01:55:23'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:55:23'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 01:55:23'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:55:23'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:55:23'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 01:55:23'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 01:55:23'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:55:23'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:55:23'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:55:23'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 01:55:23'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 01:55:23'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 01:55:23'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 01:55:23'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:55:28'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:55:28'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:56:37'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:57:31'!
ERROR!

FinancialAccounting subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions roots'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 01:57:46'!
FinancialAccounting subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions roots'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'jn 5/24/2021 01:57:56' prior: 50879190 overrides: 50880055!
initialize

	transactions := OrderedCollection new.
	roots := Set new.! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 01:57:58'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 01:57:58'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:57:58'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 01:57:58'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:57:58'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:57:58'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 01:57:58'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 01:57:59'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:57:59'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:57:59'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:57:59'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 01:57:59'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 01:57:59'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 01:57:59'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 01:57:59'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:58:02'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:58:02'!
ERROR!

	a add: 1!

	a add: 2!

	a!

	a anySatisfy: [:a | (a = 2) ]  !

	a anySatisfy: [:a | (a = 3) ]   !
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/24/2021 01:59:52' prior: 50881022 overrides: 50880055!
initialize
	
	accountings := Set new.	
	parents := Set new.
	roots := (Set new add: self).
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 01:59:59'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 01:59:59'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 01:59:59'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 01:59:59'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:59:59'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 01:59:59'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 01:59:59'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 01:59:59'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:59:59'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:59:59'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 01:59:59'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 01:59:59'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 01:59:59'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 01:59:59'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 01:59:59'!
ERROR!

	b := Portfolio new!

	b!

	b addRoots: (Set new add: 9)!
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/24/2021 02:02:31' prior: 50881183 overrides: 50880055!
initialize
	
	accountings := Set new.	
	parents := Set new.
	roots := Set new.
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:02:37'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:02:37'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:02:37'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:02:37'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:02:37'!
FAILURE!
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 02:04:11' prior: 50880885!
hasAnyDuplicatedWith: anAccounting
	roots isEmpty 
		ifTrue: [ ^ anAccounting includes: self ]
		ifFalse:[ ^ roots anySatisfy: [ :aPortfolio | aPortfolio hasDuplicatesWith: anAccounting ]]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:04:12'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:04:12'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:04:12'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:04:12'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:04:12'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:04:12'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:04:12'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:04:12'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:04:12'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:04:13'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:04:13'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:04:13'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:04:13'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:04:13'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:04:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'jn 5/24/2021 02:04:22' prior: 50881112 overrides: 50880055!
initialize

	transactions := OrderedCollection new.
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:04:27'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:04:27'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:04:27'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:04:27'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:04:27'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:04:27'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:04:27'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:04:27'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:04:27'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:04:27'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:04:27'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:04:27'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:04:27'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:04:27'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:04:27'!
FAILURE!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:04:31'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:04:31'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/24/2021 02:06:27'!
includes: anAccounting
	
	^self = anAccounting
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:06:31'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:06:31'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:06:31'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:06:31'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:06:31'!
FAILURE!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:06:38'!
FAILURE!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:06:38'!
FAILURE!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:07:45'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:07:45'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:07:45'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:07:45'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:07:45'!
FAILURE!
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 02:11:08' prior: 50881306!
hasAnyDuplicatedWith: anAccounting
	roots isEmpty 
		ifTrue: [ ^ self hasDuplicatesWith: anAccounting ]
		ifFalse:[ ^ roots anySatisfy: [ :aPortfolio | aPortfolio hasDuplicatesWith: anAccounting ]]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:11:10'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:11:10'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:11:10'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:11:10'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:11:10'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:11:10'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:11:10'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:11:10'!
FAILURE!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:11:10'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:11:10'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:11:10'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:11:10'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:11:10'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:11:10'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:11:10'!
FAILURE!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:11:14'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:11:14'!
ERROR!
!ReceptiveAccount methodsFor: 'duplicated' stamp: 'jn 5/24/2021 02:13:00'!
hasDuplicatesWith: anAccounting
	^(anAccounting includes: self)
		! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:13:02'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:13:02'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:13:02'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:13:17'!
FAILURE!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:13:17'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:13:21'!
FAILURE!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:13:21'!
FAILURE!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:13:26'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:15:36' prior: 50880596!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
		p4 add: p7.
	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	! !

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:15:38'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 02:25:13' prior: 50880701!
addRootsTo: aChildPortfolio 
	roots isEmpty
		ifTrue: [aChildPortfolio addRoots: self]
		ifFalse:[aChildPortfolio addRoots: roots.]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:25:14'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:25:14'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:25:15'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:25:15'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:25:15'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:25:15'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:25:15'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:25:15'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:25:15'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:25:15'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:25:15'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:25:15'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:25:15'!
ERROR!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:25:15'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:25:15'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:25:21'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:25:21'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 02:25:43' prior: 50881723!
addRootsTo: aChildPortfolio 
	roots isEmpty
		ifTrue: [aChildPortfolio addRoot: self]
		ifFalse:[aChildPortfolio addRoots: roots.]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 02:26:03'!
addRoot: aPortfolioRoots 
	
	roots add: aPortfolioRoots.
	accountings do: [ :accounting | accounting addRoot: aPortfolioRoots ].
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:26:08'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:26:08'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:26:08'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:26:08'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:26:08'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:26:08'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:26:08'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:26:08'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:26:08'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:26:08'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:26:08'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:26:08'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:26:08'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:26:08'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:26:08'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:26:12'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:26:12'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jn 5/24/2021 02:26:22'!
addRoot: aPortfolioRoots 

! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:26:25'!
ERROR!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:26:25'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:26:25'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:26:34' prior: 50881703!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:26:37'!
PASSED!

!methodRemoval: Portfolio #checkDuplicatesWith: stamp: 'jn 5/24/2021 02:27:53'!
checkDuplicatesWith: aPortfolio 
	
	(aPortfolio includes: self) 
		ifTrue: [ ^true ] 
		ifFalse: [ | hasDuplicates |
			hasDuplicates := false.
			portfolios do: [:portfolio | 
				hasDuplicates := hasDuplicates or: (portfolio checkDuplicatesWith: aPortfolio) ]. 
			^hasDuplicates.
		]
	
!

!methodRemoval: Portfolio #findRootsAndCheckDuplicatesWith: stamp: 'jn 5/24/2021 02:27:53'!
findRootsAndCheckDuplicatesWith: aPortfolio 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: aPortfolio ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			parents allSatisfy: [ :aParentPortfolio | 
				(aParentPortfolio findRootsAndCheckDuplicatesWith: aPortfolio) not ] .
		]
!

!methodRemoval: Portfolio #findRootsAndCheckDuplicatesWithAccount: stamp: 'jn 5/24/2021 02:27:53'!
findRootsAndCheckDuplicatesWithAccount: anAccount 
	parents isEmpty 
		"Si es raiz chequeamos que el arbol self no tenga repetidos con arbol aPortfolio"
		ifTrue: [ ^ self checkDuplicatesWith: anAccount ]
		ifFalse: [
			"Tiene nodos padre entonces seguimos subiendo en el arbol"
			|hasDuplicates|
			hasDuplicates := false.
			parents do: [ :aParentPortfolio | 
				hasDuplicates := hasDuplicates or: 
				(aParentPortfolio findRootsAndCheckDuplicatesWith: anAccount) ] .
			^hasDuplicates
		]
!

!methodRemoval: Portfolio #validateNoDuplicates: stamp: 'jn 5/24/2021 02:27:53'!
validateNoDuplicates: aPortfolio
	
	^ self findRootsAndCheckDuplicatesWith: aPortfolio.!

!methodRemoval: Portfolio #validateNoDuplicatesAccount: stamp: 'jn 5/24/2021 02:27:53'!
validateNoDuplicatesAccount: anAccount
	
	^ self findRootsAndCheckDuplicatesWithAccount: anAccount.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:42:05' prior: 50880619!
test13dummy

	| p1 p2 p3 p4 p5 p7 p10 aDeposit aWithdraw account anotherAccount |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
		
	p3 add: account.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	
	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:43:33' prior: 50882059!
test13dummy

	| p1 p2 p3 p4 p5 p7 p10 aDeposit aWithdraw account anotherAccount |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
		
	p3 add: account.
	p4 add: anotherAccount.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	
	self should: [ 		p1 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	! !

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:43:45'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:45:12'!
test12porfolioDoesNotAcceptsDuplicatedPortfoliosRecursively

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:45:30'!
test11portfolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ] 

	! !

!methodRemoval: PortfolioTest #test11portolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:45:30'!
test11portolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ] 

	!

!methodRemoval: PortfolioTest #test12dummy stamp: 'jn 5/24/2021 02:45:37'!
test12dummy

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:47:10'!
test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	! !

!methodRemoval: PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedPortfoliosRecursively stamp: 'jn 5/24/2021 02:47:10'!
test12porfolioDoesNotAcceptsDuplicatedPortfoliosRecursively

	| p1 p2 p3 p4 p5 p7 p10 |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:47:30' prior: 50882178!
test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| p1 p2 p3 p4 p5 p7 p10 aDeposit aWithdraw account anotherAccount |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
		
	p3 add: account.
	p4 add: anotherAccount.
	
	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:48:01' prior: 50882217!
test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| p1 p2 p3 p4 p5 p7 p10 aDeposit aWithdraw account anotherAccount |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
		
	p3 add: account.
	p4 add: anotherAccount.
	
	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ].
	
	self should: [ 		p1 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]


	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:48:22' prior: 50882245!
test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| p1 p2 p3 p4 p5 p7 p10 account anotherAccount |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	p3 add: account.
	p4 add: anotherAccount.
	
	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ].
	
	self should: [ 		p1 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]


	! !

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 02:48:25'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 02:48:29'!
PASSED!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:48:32'!
PASSED!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:48:34'!
PASSED!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:48:38'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 02:49:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 02:49:25' prior: 50882278!
test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| p1 p2 p3 p4 p5 p7 p10 account anotherAccount |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	p3 add: account.
	p4 add: anotherAccount.
	
	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ].
	
	self should: [ 		p2 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]


	! !

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 02:49:27'!
PASSED!

!methodRemoval: PortfolioTest #test13dummy stamp: 'jn 5/24/2021 02:50:13'!
test13dummy

	| p1 p2 p3 p4 p5 p7 p10 aDeposit aWithdraw account anotherAccount |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
		
	p3 add: account.
	p4 add: anotherAccount.

	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.
	
	self should: [ 		p1 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio accountingAlreadyExistsDescription  ]

	!

----QUIT----(24 May 2021 02:50:35) CuisUniversity-4532.image priorSource: 17476175!

----STARTUP---- (24 May 2021 14:22:45) as /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/CuisUniversity-4532.image!


!classRenamed: #FinancialAccounting as: #FinancialAccount stamp: 'jn 5/24/2021 14:34:24'!
Smalltalk renameClassNamed: #FinancialAccounting as: #FinancialAccount!

FinancialAccount subclass: #Portfolio
	instanceVariableNames: 'parents financialAccounts roots'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 14:34:59'!
FinancialAccount subclass: #Portfolio
	instanceVariableNames: 'parents financialAccounts roots'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 14:35:13' prior: 50880837!
addAccounting: anAccounting 
	
	(self hasAnyDuplicatedWith: anAccounting) 
		ifTrue: [ self accountingAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			financialAccounts add: anAccounting. 
		]! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 14:35:19' prior: 50881800!
addRoot: aPortfolioRoots 
	
	roots add: aPortfolioRoots.
	financialAccounts do: [ :accounting | accounting addRoot: aPortfolioRoots ].
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 14:35:23' prior: 50880765!
addRoots: aPortfolioRoots 
	
	roots addAll: aPortfolioRoots.
	financialAccounts do: [ :accounting | accounting addRoots: aPortfolioRoots ].
! !
!Portfolio methodsFor: 'balance' stamp: 'jn 5/24/2021 14:35:32' prior: 50879960 overrides: 50879891!
balance

	^ financialAccounts sum: [:accounting | accounting balance ] ifEmpty: [0].! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 14:35:38' prior: 50880892!
hasDuplicatesWith: anAccounting
	(anAccounting includes: self)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [:accounting | accounting hasDuplicatesWith: anAccounting ]].! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 14:35:46' prior: 50880750!
includes: anAccounting
	(self = anAccounting)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [:accounting | accounting includes: anAccounting ]].
! !
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/24/2021 14:35:53' prior: 50881246 overrides: 50880055!
initialize
	
	financialAccounts := Set new.	
	parents := Set new.
	roots := Set new.
! !
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/24/2021 14:36:00' prior: 50879966 overrides: 50879887!
transactions
	| transactions |
	transactions := OrderedCollection new.
	financialAccounts do: [:accounting | transactions addAll: accounting transactions].
	^transactions copy.! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 14:36:03'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 14:36:03'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 15:05:56' prior: 50882576!
addAccounting: anAccounting 
	
	(self hasAnyDuplicatedWith: anAccounting) 
		ifTrue: [ self accountingAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			financialAccounts add: anAccounting. 
			self addRootsTo: anAccounting.
		]
	! !
!FinancialAccount methodsFor: 'private' stamp: 'jn 5/24/2021 15:06:03' prior: 50880695!
addToPortfolio: aPortfolio

	aPortfolio addAccounting: self.! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:06:06'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:06:06'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 15:07:47'!
addFinancialAccount: anAccounting 
	
	(self hasAnyDuplicatedWith: anAccounting) 
		ifTrue: [ self accountingAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			financialAccounts add: anAccounting. 
			self addRootsTo: anAccounting.
		]
	! !
!FinancialAccount methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 15:07:47' prior: 50882703!
addToPortfolio: aPortfolio

	aPortfolio addFinancialAccount: self.! !

!methodRemoval: Portfolio #addAccounting: stamp: 'jn 5/24/2021 15:07:47'!
addAccounting: anAccounting 
	
	(self hasAnyDuplicatedWith: anAccounting) 
		ifTrue: [ self accountingAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			financialAccounts add: anAccounting. 
			self addRootsTo: anAccounting.
		]
	!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 15:08:11'!
financialAccountAlreadyExistsDescription 
	
	^'Portfolio already exists in portfolio.'.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 15:08:11' prior: 50882490!
test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| p1 p2 p3 p4 p5 p7 p10 account anotherAccount |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	p3 add: account.
	p4 add: anotherAccount.
	
	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ].
	
	self should: [ 		p2 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ]


	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 15:08:11' prior: 50880512!
test08portolioDoesNotAcceptsDuplicatedAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.

	portfolio add: account.
	
	self should: [ portfolio add: account ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 15:08:11' prior: 50882131!
test11portfolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 15:08:12' prior: 50880440!
accountingAlreadyExistsInPortfolio

	self error: self class financialAccountAlreadyExistsDescription ! !

!methodRemoval: Portfolio class #accountingAlreadyExistsDescription stamp: 'jn 5/24/2021 15:08:12'!
accountingAlreadyExistsDescription 
	
	^'Portfolio already exists in portfolio.'.!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:08:14'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:08:14'!
PASSED!
!Portfolio methodsFor: 'error' stamp: 'jn 5/24/2021 15:08:52'!
financialAccountAlreadyExistsInPortfolio

	self error: self class financialAccountAlreadyExistsDescription ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 15:08:52' prior: 50882761!
addFinancialAccount: anAccounting 
	
	(self hasAnyDuplicatedWith: anAccounting) 
		ifTrue: [ self financialAccountAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			financialAccounts add: anAccounting. 
			self addRootsTo: anAccounting.
		]
	! !

!methodRemoval: Portfolio #accountingAlreadyExistsInPortfolio stamp: 'jn 5/24/2021 15:08:52'!
accountingAlreadyExistsInPortfolio

	self error: self class financialAccountAlreadyExistsDescription !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 15:10:36' prior: 50882927!
addFinancialAccount: anAccounting 
	
	(self hasAnyDuplicatedWith: anAccounting) 
		ifTrue: [ self financialAccountAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			financialAccounts add: anAccounting. 
			self addRootsTo: anAccounting.
		]
! !
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 15:11:54' prior: 50882944!
addFinancialAccount: aFinancialAccount 
	
	(self hasAnyDuplicatedWith: aFinancialAccount) 
		ifTrue: [ self financialAccountAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			financialAccounts add: aFinancialAccount. 
			self addRootsTo: aFinancialAccount.
		]
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:12:25' prior: 50881558!
hasAnyDuplicatedWith: aFinancialAccount
	roots isEmpty 
		ifTrue: [ ^ self hasDuplicatesWith: aFinancialAccount ]
		ifFalse:[ ^ roots anySatisfy: [ :aPortfolio | aPortfolio hasDuplicatesWith: aFinancialAccount ]]
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:13:14' prior: 50882965!
hasAnyDuplicatedWith: aFinancialAccount
	parents isEmpty 
		ifTrue: [ ^ self hasDuplicatesWith: aFinancialAccount ]
		ifFalse:[ ^ parents anySatisfy: [ :aPortfolio | aPortfolio hasAnyDuplicatedWith: aFinancialAccount ]]
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:13:42' prior: 50882606!
hasDuplicatesWith: aFinancialAccount
	(aFinancialAccount includes: self)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [:accounting | accounting hasDuplicatesWith: aFinancialAccount ]].! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:14:57' prior: 50882985!
hasDuplicatesWith: aFinancialAccount
	(aFinancialAccount relatedWith: self)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [:accounting | accounting hasDuplicatesWith: aFinancialAccount ]].! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:15:38'!
relatedWith: anAccounting
	(self = anAccounting)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [:accounting | accounting includes: anAccounting ]].
! !

!methodRemoval: Portfolio #includes: stamp: 'jn 5/24/2021 15:15:43'!
includes: anAccounting
	(self = anAccounting)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [:accounting | accounting includes: anAccounting ]].
!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 15:16:33' prior: 50882954!
addFinancialAccount: aFinancialAccountToAdd
	
	(self hasAnyDuplicatedWith: aFinancialAccountToAdd) 
		ifTrue: [ self financialAccountAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			financialAccounts add: aFinancialAccountToAdd. 
			self addRootsTo: aFinancialAccountToAdd.
		]
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:16:49' prior: 50882975!
hasAnyDuplicatedWith: aFinancialAccountToAdd
	parents isEmpty 
		ifTrue: [ ^ self hasDuplicatesWith: aFinancialAccountToAdd ]
		ifFalse:[ ^ parents anySatisfy: [ :aPortfolio | aPortfolio hasAnyDuplicatedWith: aFinancialAccountToAdd ]]
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:17:21' prior: 50882995!
hasDuplicatesWith: aFinancialAccountToAdd
	(aFinancialAccountToAdd relatedWith: self)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [ 
				:aFinancialAccount | aFinancialAccount hasDuplicatesWith: aFinancialAccountToAdd ]].! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:17:35' prior: 50883004!
relatedWith: aFinancialAccount
	(self = aFinancialAccount)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [:accounting | accounting includes: aFinancialAccount ]].
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:18:41' prior: 50883054!
relatedWith: aFinancialAccount
	(self = aFinancialAccount)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [ :aFinancialAccountToAdd | 
				aFinancialAccountToAdd includes: aFinancialAccount ]].
! !
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:18:47' prior: 50883043!
hasDuplicatesWith: aFinancialAccountToAdd
	(aFinancialAccountToAdd relatedWith: self)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [ :aFinancialAccount | 
				aFinancialAccount hasDuplicatesWith: aFinancialAccountToAdd ]].! !
!ReceptiveAccount methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:19:13'!
relatedWith: aFinancialAccount
	
	^ self = aFinancialAccount
! !

!methodRemoval: ReceptiveAccount #includes: stamp: 'jn 5/24/2021 15:19:20'!
includes: anAccounting
	
	^self = anAccounting
!
!ReceptiveAccount methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:19:39' prior: 50881629!
hasDuplicatesWith: aFinancialAccount

	^ aFinancialAccount relatedWith: self
		! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:19:41'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:19:41'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:19:41'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:19:41'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'jn 5/24/2021 15:20:10' prior: 50883020!
addFinancialAccount: aFinancialAccountToAdd
	
	(self hasAnyDuplicatedWith: aFinancialAccountToAdd) 
		ifTrue: [ self financialAccountAlreadyExistsInPortfolio ] 
		ifFalse: [ 
			financialAccounts add: aFinancialAccountToAdd. 
			aFinancialAccountToAdd addParent: self.
		]
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:20:21'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:20:21'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:20:21'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:20:21'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:20:21'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:20:21'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:20:21'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:20:21'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:21'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:21'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:21'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:20:21'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:20:21'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:20:21'!
ERROR!
!ReceptiveAccount methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:20:43'!
addParent: aParentPortfolio

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:45'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:45'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:20:45'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:20:45'!
ERROR!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:20:53'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:20:53'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:20:53'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:20:53'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:20:53'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:20:53'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:20:54'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:20:54'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:54'!
ERROR!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:54'!
ERROR!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:54'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:20:54'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:20:54'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:20:54'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:59'!
ERROR!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:20:59'!
ERROR!
!Portfolio methodsFor: 'duplicated' stamp: 'jn 5/24/2021 15:21:17' prior: 50883063!
relatedWith: aFinancialAccount
	(self = aFinancialAccount)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [ :aFinancialAccountToAdd | 
				aFinancialAccountToAdd relatedWith: aFinancialAccount ]].
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:21:20'!
PASSED!

!methodRemoval: ReceptiveAccount #addRoot: stamp: 'jn 5/24/2021 15:21:34'!
addRoot: aPortfolioRoots 

!

!methodRemoval: ReceptiveAccount #addRoots: stamp: 'jn 5/24/2021 15:21:39'!
addRoots: aPortfolioRoots 

!

!methodRemoval: Portfolio #addRootsTo: stamp: 'jn 5/24/2021 15:22:21'!
addRootsTo: aChildPortfolio 
	roots isEmpty
		ifTrue: [aChildPortfolio addRoot: self]
		ifFalse:[aChildPortfolio addRoots: roots.]
!

!methodRemoval: Portfolio #addRoots: stamp: 'jn 5/24/2021 15:22:25'!
addRoots: aPortfolioRoots 
	
	roots addAll: aPortfolioRoots.
	financialAccounts do: [ :accounting | accounting addRoots: aPortfolioRoots ].
!

!methodRemoval: Portfolio #addRoot: stamp: 'jn 5/24/2021 15:22:28'!
addRoot: aPortfolioRoots 
	
	roots add: aPortfolioRoots.
	financialAccounts do: [ :accounting | accounting addRoot: aPortfolioRoots ].
!

FinancialAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 15:22:57'!
FinancialAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialAccount subclass: #Portfolio
	instanceVariableNames: 'parents financialAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 15:23:06'!
FinancialAccount subclass: #Portfolio
	instanceVariableNames: 'parents financialAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'jn 5/24/2021 15:23:13' prior: 50882624 overrides: 50880055!
initialize
	
	financialAccounts := Set new.	
	parents := Set new.
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:23:15'!
PASSED!

!testRun: #PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:23:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 15:24:20'!
test11portfolioOnlyAcceptsValidPortfolios

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid portfolio' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !

!methodRemoval: PortfolioTest #test11DELETEportfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:24:20'!
test11DELETEportfolioOnlyAcceptsValidPortfolios

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [ portfolio add: 'invalid portfolio' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 15:24:31'!
test12portfolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 

	! !

!methodRemoval: PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:24:31'!
test11portfolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 

	!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 15:24:44'!
test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| p1 p2 p3 p4 p5 p7 p10 account anotherAccount |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	p3 add: account.
	p4 add: anotherAccount.
	
	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ].
	
	self should: [ 		p2 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ]


	! !

!methodRemoval: PortfolioTest #test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:24:44'!
test12porfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| p1 p2 p3 p4 p5 p7 p10 account anotherAccount |
	
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	p5 := Portfolio new.
	p7 := Portfolio new.
	p10 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	p3 add: account.
	p4 add: anotherAccount.
	
	p1 add: p2.
	p2 add: p3.
	p2 add: p4.
	
	p7 add: p3.
	p7 add: p5.
	
	p10 add: p4.

	self should: [ 	p4 add: p7. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ].
	
	self should: [ 		p2 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ]


	!

!methodRemoval: PortfolioTest #test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:24:55'!
test11DELETEportfolioKnowsRegisteredTransactionsInPortfoliosAndAccounts

	| portfolio anotherPortfolio account anotherAccount deposit1 deposit2 withdraw |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherPortfolio.
	anotherPortfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:24:58'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:24:58'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 15:27:32' prior: 50883563!
test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| portfolio1 portfolio2 portfolio3 portfolio4 account anotherAccount |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio2 add: account.
	portfolio4 add: anotherAccount.
	
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio3 add: portfolio2.

	self should: [ 	portfolio1 add: portfolio3. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ].
	
	self should: [ 		portfolio3 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ]


	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:27:36'!
PASSED!

!methodRemoval: Portfolio #hasRegistered: stamp: 'jn 5/24/2021 15:32:09'!
hasRegistered: aTransaction 
	
	^ self transactions includes: aTransaction.!
!Portfolio methodsFor: 'testing' stamp: 'jn 5/24/2021 15:33:48' overrides: 50879900!
hasRegistered: aTransaction

	^ self transactions includes: aTransaction 
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:33:51'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:33:51'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/24/2021 15:36:25' prior: 50882631 overrides: 50879887!
transactions
	"| transactions |
	transactions := OrderedCollection new.
	financialAccounts do: [:accounting | transactions addAll: accounting transactions].
	^transactions copy."
	
	^ financialAccounts inject: OrderedCollection new into: [:aFinancialAccount :transactions |
		transactions addAll: aFinancialAccount transactions 
		] ! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:36:27'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:36:27'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:36:27'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:36:27'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:36:27'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:36:27'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:36:27'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:36:27'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:36:27'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:36:27'!
ERROR!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:36:27'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:36:27'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:36:27'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/24/2021 15:36:42' prior: 50883845 overrides: 50879887!
transactions
	"| transactions |
	transactions := OrderedCollection new.
	financialAccounts do: [:accounting | transactions addAll: accounting transactions].
	^transactions copy."
	
	^ financialAccounts inject: OrderedCollection new into: [ :transactions :aFinancialAccount |
		transactions addAll: aFinancialAccount transactions 
		] ! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:36:44'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:36:44'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:36:44'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:36:44'!
FAILURE!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:36:44'!
FAILURE!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:36:44'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:36:44'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:36:44'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:36:44'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:36:44'!
FAILURE!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:36:44'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:36:44'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:36:44'!
PASSED!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:37:16'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:37:16'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:37:16'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:37:16'!
FAILURE!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:37:16'!
FAILURE!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:37:16'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:37:16'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:37:16'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:37:16'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:37:16'!
FAILURE!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:37:16'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:37:16'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:37:16'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:37:19'!
FAILURE!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:37:19'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 15:39:43' prior: 50879821!
test04portfolioTransactionsEqualsToAllAccountsTransactions

	| portfolio account anotherAccount aDeposit aWithdraw anotherDeposit transactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	anotherDeposit := Deposit register: 30 on: anotherAccount.
	transactions:= portfolio transactions.
	self assert: transactions size equals: 3.
	self assert: transactions includes: aDeposit.
	self assert: transactions includes: aWithdraw.
	self assert: transactions includes: anotherDeposit.
	! !
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/24/2021 15:41:19' prior: 50883908 overrides: 50879887!
transactions
	"| transactions |
	transactions := OrderedCollection new.
	financialAccounts do: [:accounting | transactions addAll: accounting transactions].
	^transactions copy."
	
	^ financialAccounts collect: [ :aFinancialAccount | aFinancialAccount transactions 
		] ! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:41:22'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:41:22'!
FAILURE!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:41:22'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:41:22'!
FAILURE!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:41:22'!
FAILURE!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:41:22'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:41:22'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:41:22'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:41:22'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:41:22'!
FAILURE!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:41:22'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:41:22'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:41:22'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/24/2021 15:46:31' prior: 50884054 overrides: 50879887!
transactions
	"| transactions |
	transactions := OrderedCollection new.
	financialAccounts do: [:accounting | transactions addAll: accounting transactions].
	^transactions copy."
	
	^ (financialAccounts collect: [ :aFinancialAccount | aFinancialAccount transactions 
		] flatten).
	
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:46:32'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:46:32'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:46:32'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:46:32'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:46:32'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:46:32'!
ERROR!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:46:32'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:46:32'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:46:32'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:46:33'!
ERROR!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:46:33'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:46:33'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:46:33'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:46:40'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/24/2021 15:47:04' prior: 50884116 overrides: 50879887!
transactions
	"| transactions |
	transactions := OrderedCollection new.
	financialAccounts do: [:accounting | transactions addAll: accounting transactions].
	^transactions copy."
	
	^ (financialAccounts collect: [ :aFinancialAccount | aFinancialAccount transactions 
		]) flatten.
	
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:47:06'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:47:06'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:47:06'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:47:06'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:47:06'!
ERROR!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:47:06'!
ERROR!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:47:06'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:47:06'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:47:06'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:47:06'!
ERROR!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:47:06'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:47:06'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:47:06'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:47:16'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/24/2021 15:48:05' prior: 50884182 overrides: 50879887!
transactions
	"| transactions |
	transactions := OrderedCollection new.
	financialAccounts do: [:accounting | transactions addAll: accounting transactions].
	^transactions copy."
	
	^ (financialAccounts collect: [ :aFinancialAccount | aFinancialAccount transactions 
		]) asOrderedCollection flatten.
	
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:48:07'!
PASSED!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:48:31'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/24/2021 15:48:58' prior: 50884248 overrides: 50879887!
transactions
	
	^ (financialAccounts collect: [ :aFinancialAccount | aFinancialAccount transactions ]) asOrderedCollection flatten.
	
! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/24/2021 15:49:26' prior: 50883336!
relatedWith: aFinancialAccount

	(self = aFinancialAccount)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [ :aFinancialAccountToAdd | 
				aFinancialAccountToAdd relatedWith: aFinancialAccount ]].
! !
!Portfolio methodsFor: 'add' stamp: 'jn 5/24/2021 15:49:36' prior: 50880144!
add: aFinancialAccount 
	
	aFinancialAccount addToPortfolio: self.
! !
!Portfolio methodsFor: 'balance' stamp: 'jn 5/24/2021 15:49:46' prior: 50882600 overrides: 50879891!
balance

	^ financialAccounts sum: [:aFinancialAccount | aFinancialAccount balance ] ifEmpty: [0].! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/24/2021 15:49:55' prior: 50883073!
hasDuplicatesWith: aFinancialAccountToAdd

	(aFinancialAccountToAdd relatedWith: self)
		ifTrue: [ ^ true ]
		ifFalse:[ ^ financialAccounts anySatisfy: [ :aFinancialAccount | 
				aFinancialAccount hasDuplicatesWith: aFinancialAccountToAdd ]].! !
!Portfolio methodsFor: 'duplicated - private' stamp: 'jn 5/24/2021 15:50:02' prior: 50883032!
hasAnyDuplicatedWith: aFinancialAccountToAdd

	parents isEmpty 
		ifTrue: [ ^ self hasDuplicatesWith: aFinancialAccountToAdd ]
		ifFalse:[ ^ parents anySatisfy: [ :aPortfolio | aPortfolio hasAnyDuplicatedWith: aFinancialAccountToAdd ]]
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/24/2021 15:52:46' prior: 50879204 overrides: 50879891!
balance

	| totalBalance |
	totalBalance := 0.
	transactions do: [:aTransaction |  totalBalance := aTransaction addToBalance: totalBalance ].
	
	^totalBalance.
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/24/2021 15:57:25' prior: 50884413 overrides: 50879891!
balance

	"| totalBalance |
	totalBalance := 0.
	transactions do: [:aTransaction |  totalBalance := aTransaction addToBalance: totalBalance ]."
		^ transactions inject: 0 into: [:a :c | c addToBalance: a]

	"^totalBalance."


! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:57:27'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:57:27'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jn 5/24/2021 15:58:13' prior: 50884422 overrides: 50879891!
balance

	^ transactions inject: 0 into: [ :totalBalance :aTransaction | aTransaction addToBalance: totalBalance]



! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:58:15'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:58:15'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'jn 5/24/2021 15:58:52' prior: 50884360 overrides: 50879887!
transactions
	
	^ (financialAccounts collect: [ :aFinancialAccount | aFinancialAccount transactions ]) asOrderedCollection flatten copy.
	
! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 15:58:54'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 15:58:54'!
PASSED!
!ReceptiveAccount methodsFor: 'duplicated - private' stamp: 'jn 5/24/2021 16:00:19' prior: 50883217!
addParent: aParentPortfolio

	" Este mensaje esta para que ReceptiveAccount sea polimorfico con Portfolio y asi evitar ifs a la hora 
	 de agregar parents a los portfolios. "! !
!FinancialAccount methodsFor: 'transactions' stamp: 'jn 5/24/2021 16:02:44'!
relatedWith: aFinancialAccount

	self subclassResponsibility ! !
!FinancialAccount methodsFor: 'transactions' stamp: 'jn 5/24/2021 16:02:55'!
hasDuplicatedWith: aFinancialAccount

	self subclassResponsibility ! !
!FinancialAccount methodsFor: 'duplicated - private' stamp: 'jn 5/24/2021 16:03:30'!
addParent: aFinancialAccount

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:03:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 5/24/2021 16:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 5/24/2021 16:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 5/24/2021 16:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 5/24/2021 16:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 5/24/2021 16:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 5/24/2021 16:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 5/24/2021 16:03:57'!
PASSED!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 16:09:18'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolioo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:09:17' overrides: 16927572!
setUp

	portfolioo := Portfolio new.
	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:09:30' prior: 50878571!
test01portfolioHasZeroBalanceWhenCreated
	
	self assert: portfolioo balance equals: 0.

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:09:37' prior: 50878578!
test02portfolioHasNoneTransactionsWhenCreated

	self assert: portfolioo transactions equals: OrderedCollection new.

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 16:09:40'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 16:09:40'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:09:40'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 16:09:40'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:09:40'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:09:40'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 16:09:40'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 16:09:40'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:09:41'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:09:41'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 16:09:41'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:09:41'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:09:41'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:10:16' prior: 50878586!
test03portfolioHasBalanceEqualsToSumOfAccountsBalance

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolioo add: account.
	portfolioo add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account balance + anotherAccount balance) equals: portfolioo balance.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:10:29' prior: 50884028!
test04portfolioTransactionsEqualsToAllAccountsTransactions

	| account anotherAccount aDeposit aWithdraw anotherDeposit transactions |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
		
	portfolioo add: account.
	portfolioo add: anotherAccount.
	
	anotherDeposit := Deposit register: 30 on: anotherAccount.
	transactions:= portfolioo transactions.
	self assert: transactions size equals: 3.
	self assert: transactions includes: aDeposit.
	self assert: transactions includes: aWithdraw.
	self assert: transactions includes: anotherDeposit.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:10:40' prior: 50878633!
test05portfolioKnowsRegisteredTransactionsInAccounts

	| account anotherAccount deposit1 deposit2 withdraw |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolioo add: account.
	portfolioo add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolioo hasRegistered: deposit1).
	self assert: (portfolioo hasRegistered: deposit2).
	self assert: (portfolioo hasRegistered: withdraw).

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:11:04' prior: 50878655!
test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts

	| deposit withdraw |
	
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolioo hasRegistered: deposit).
	self deny: (portfolioo hasRegistered:withdraw).

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:11:14' prior: 50878667!
test07portfolioOnlyAcceptsValidReceptiveAccounts

	self should: [ portfolioo add: 'invalid account' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:11:25' prior: 50882825!
test08portolioDoesNotAcceptsDuplicatedAccounts

	|  account |
	
	account := ReceptiveAccount new.

	portfolioo add: account.
	
	self should: [ portfolioo add: account ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:11:33' prior: 50878692!
test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts

	| childPortfolio account anotherAccount|
	
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 90 on: anotherAccount.

	childPortfolio add: account.
	portfolioo add: childPortfolio.
	portfolioo add: anotherAccount.
	
	self assert: portfolioo balance equals: (account balance + anotherAccount balance).	
		

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:11:44' prior: 50879788!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| childPortfolio account anotherAccount aDeposit aWithdraw anotherDeposit |
	
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
	
	anotherAccount := ReceptiveAccount new.
	anotherDeposit := Deposit register: 90 on: anotherAccount.

	childPortfolio add: account.
	portfolioo add: childPortfolio.
	portfolioo add: anotherAccount.
	
	self assert: portfolioo transactions size equals: 3.
	self assert: portfolioo transactions includes: aDeposit.
	self assert: portfolioo transactions includes: aWithdraw.
	self assert: portfolioo transactions includes: anotherDeposit.
		

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:11:56' prior: 50883511!
test11portfolioOnlyAcceptsValidPortfolios

	self should: [ portfolioo add: 'invalid portfolio' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:12:05' prior: 50883533!
test12portfolioDoesNotAcceptsDuplicatedPortfolios

	| anotherPortfolio |
	
	anotherPortfolio := Portfolio new.

	portfolioo add: anotherPortfolio.

	self should: [ portfolioo add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:12:39' prior: 50883703!
test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| portfolio2 portfolio3 portfolio4 account anotherAccount |
	
	portfolioo := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio2 add: account.
	portfolio4 add: anotherAccount.
	
	portfolioo add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio3 add: portfolio2.

	self should: [ 	portfolioo add: portfolio3. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ].
	
	self should: [ 		portfolio3 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ]


	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:12:42'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:12:42'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:12:50' prior: 50884935!
test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| portfolio2 portfolio3 portfolio4 account anotherAccount |
	
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio2 add: account.
	portfolio4 add: anotherAccount.
	
	portfolioo add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio3 add: portfolio2.

	self should: [ 	portfolioo add: portfolio3. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ].
	
	self should: [ 		portfolio3 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ]


	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:12:52'!
PASSED!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 16:13:26'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50884884!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| childPortfolio account anotherAccount aDeposit aWithdraw anotherDeposit |
	
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
	
	anotherAccount := ReceptiveAccount new.
	anotherDeposit := Deposit register: 90 on: anotherAccount.

	childPortfolio add: account.
	portfolio add: childPortfolio.
	portfolio add: anotherAccount.
	
	self assert: portfolio transactions size equals: 3.
	self assert: portfolio transactions includes: aDeposit.
	self assert: portfolio transactions includes: aWithdraw.
	self assert: portfolio transactions includes: anotherDeposit.
		

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50884830!
test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts

	| deposit withdraw |
	
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered:withdraw).

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50884706!
test01portfolioHasZeroBalanceWhenCreated
	
	self assert: portfolio balance equals: 0.

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50884785!
test04portfolioTransactionsEqualsToAllAccountsTransactions

	| account anotherAccount aDeposit aWithdraw anotherDeposit transactions |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	aDeposit := Deposit register: 100 on: account.
	aWithdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	anotherDeposit := Deposit register: 30 on: anotherAccount.
	transactions:= portfolio transactions.
	self assert: transactions size equals: 3.
	self assert: transactions includes: aDeposit.
	self assert: transactions includes: aWithdraw.
	self assert: transactions includes: anotherDeposit.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50884702 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50885017!
test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| portfolio2 portfolio3 portfolio4 account anotherAccount |
	
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.

	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio2 add: account.
	portfolio4 add: anotherAccount.
	
	portfolio add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio3 add: portfolio2.

	self should: [ 	portfolio add: portfolio3. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ].
	
	self should: [ 		portfolio3 add: anotherAccount ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ]


	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50884841!
test07portfolioOnlyAcceptsValidReceptiveAccounts

	self should: [ portfolio add: 'invalid account' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50884921!
test12portfolioDoesNotAcceptsDuplicatedPortfolios

	| anotherPortfolio |
	
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50884864!
test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts

	| childPortfolio account anotherAccount|
	
	childPortfolio := Portfolio new.

	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 90 on: anotherAccount.

	childPortfolio add: account.
	portfolio add: childPortfolio.
	portfolio add: anotherAccount.
	
	self assert: portfolio balance equals: (account balance + anotherAccount balance).	
		

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50884768!
test03portfolioHasBalanceEqualsToSumOfAccountsBalance

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	Deposit register: 30 on: anotherAccount.

	self assert: (account balance + anotherAccount balance) equals: portfolio balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:26' prior: 50884851!
test08portolioDoesNotAcceptsDuplicatedAccounts

	|  account |
	
	account := ReceptiveAccount new.

	portfolio add: account.
	
	self should: [ portfolio add: account ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:27' prior: 50884809!
test05portfolioKnowsRegisteredTransactionsInAccounts

	| account anotherAccount deposit1 deposit2 withdraw |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit1 := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:27' prior: 50884911!
test11portfolioOnlyAcceptsValidPortfolios

	self should: [ portfolio add: 'invalid portfolio' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 16:13:27' prior: 50884712!
test02portfolioHasNoneTransactionsWhenCreated

	self assert: portfolio transactions equals: OrderedCollection new.

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:13:49'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:13:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:24:57' prior: 50885286!
test05portfolioKnowsRegisteredTransactionsInAccounts

	| account anotherAccount deposit deposit2 withdraw |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	deposit2 := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:25:30' prior: 50885373!
test05portfolioKnowsRegisteredTransactionsInAccounts

	| account anotherAccount deposit anotherDeposit withdraw |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	portfolio add: account.
	portfolio add: anotherAccount.
	
	anotherDeposit := Deposit register: 30 on: anotherAccount.
		
	self assert: (portfolio hasRegistered: deposit).
	self assert: (portfolio hasRegistered: anotherDeposit).
	self assert: (portfolio hasRegistered: withdraw).

	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 16:39:54'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio accountWithDepositAndWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 16:39:56'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio accountWithDepositAndWithdraw accountWithDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:39:53' prior: 50885175 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	
	accountWithDepositAndWithdraw := ReceptiveAccount new.
	
	Deposit register: 100 on: accountWithDepositAndWithdraw.
	Withdraw register: 50 on: accountWithDepositAndWithdraw.
	
	accountWithDeposit := ReceptiveAccount new.
	Deposit register: 30 on: accountWithDeposit.

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:40:17' prior: 50885256!
test03portfolioHasBalanceEqualsToSumOfAccountsBalance
	
	portfolio := Portfolio new.

	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: accountWithDeposit.
	

	self assert: (accountWithDepositAndWithdraw balance + accountWithDeposit balance) equals: portfolio balance.
	
	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 16:41:21'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio accountWithDepositAndWithdraw accountWithDeposit account2WithDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:41:19' prior: 50885434 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	
	accountWithDepositAndWithdraw := ReceptiveAccount new.
	
	Deposit register: 100 on: accountWithDepositAndWithdraw.
	Withdraw register: 50 on: accountWithDepositAndWithdraw.
	
	account2WithDeposit := ReceptiveAccount new.
	Deposit register: 30 on: account2WithDeposit.

	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 16:41:45'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio accountWithDepositAndWithdraw accountWithDeposit account2WithDeposit accountDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 16:41:47'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio accountWithDepositAndWithdraw accountWithDeposit account2WithDeposit accountDeposit accountWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 16:41:48'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio accountWithDepositAndWithdraw accountWithDeposit account2WithDeposit accountDeposit accountWithdraw account2Deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:41:43' prior: 50885470 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	
	accountWithDepositAndWithdraw := ReceptiveAccount new.
	
	accountDeposit := Deposit register: 100 on: accountWithDepositAndWithdraw.
	accountWithdraw := Withdraw register: 50 on: accountWithDepositAndWithdraw.
	
	account2WithDeposit := ReceptiveAccount new.
	account2Deposit := Deposit register: 30 on: account2WithDeposit.

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:43:22' prior: 50885150!
test04portfolioTransactionsEqualsToAllAccountsTransactions

	| transactions |
		
	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: account2WithDeposit.
	
	transactions:= portfolio transactions.
	
	self assert: transactions size equals: 3.
	self assert: transactions includes: accountDeposit.
	self assert: transactions includes: accountWithdraw.
	self assert: transactions includes: account2Deposit.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:44:22' prior: 50885394!
test05portfolioKnowsRegisteredTransactionsInAccounts
	
	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: account2WithDeposit.
		
	self assert: (portfolio hasRegistered: accountDeposit).
	self assert: (portfolio hasRegistered: accountWithdraw).
	self assert: (portfolio hasRegistered: account2Deposit).

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:45:29' prior: 50885133!
test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts
		
	self deny: (portfolio hasRegistered: accountDeposit).
	self deny: (portfolio hasRegistered: accountWithdraw).
	self deny: (portfolio hasRegistered: account2Deposit).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:46:13' prior: 50885516 overrides: 16927572!
setUp
	
	accountWithDepositAndWithdraw := ReceptiveAccount new.
	
	accountDeposit := Deposit register: 100 on: accountWithDepositAndWithdraw.
	accountWithdraw := Withdraw register: 50 on: accountWithDepositAndWithdraw.
	
	account2WithDeposit := ReceptiveAccount new.
	account2Deposit := Deposit register: 30 on: account2WithDeposit.

	! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ' accountWithDepositAndWithdraw accountWithDeposit account2WithDeposit accountDeposit accountWithdraw account2Deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 16:46:20'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'accountWithDepositAndWithdraw accountWithDeposit account2WithDeposit accountDeposit accountWithdraw account2Deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:46:23' prior: 50885144!
test01portfolioHasZeroBalanceWhenCreated
	
	| portfolio |
	
	portfolio := Portfolio new.

	self assert: portfolio balance equals: 0.

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:46:33' prior: 50885317!
test02portfolioHasNoneTransactionsWhenCreated

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions equals: OrderedCollection new.

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:46:39' prior: 50885447!
test03portfolioHasBalanceEqualsToSumOfAccountsBalance
	
	| portfolio |
	
	portfolio := Portfolio new.

	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: accountWithDeposit.
	

	self assert: (accountWithDepositAndWithdraw balance + accountWithDeposit balance) equals: portfolio balance.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:46:57' prior: 50885531!
test04portfolioTransactionsEqualsToAllAccountsTransactions

	| portfolio transactions |
	
	portfolio := Portfolio new.
		
	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: account2WithDeposit.
	
	transactions:= portfolio transactions.
	
	self assert: transactions size equals: 3.
	self assert: transactions includes: accountDeposit.
	self assert: transactions includes: accountWithdraw.
	self assert: transactions includes: account2Deposit.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:47:05' prior: 50885547!
test05portfolioKnowsRegisteredTransactionsInAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: account2WithDeposit.
		
	self assert: (portfolio hasRegistered: accountDeposit).
	self assert: (portfolio hasRegistered: accountWithdraw).
	self assert: (portfolio hasRegistered: account2Deposit).

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:47:12' prior: 50885560!
test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self deny: (portfolio hasRegistered: accountDeposit).
	self deny: (portfolio hasRegistered: accountWithdraw).
	self deny: (portfolio hasRegistered: account2Deposit).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:47:19' prior: 50885212!
test07portfolioOnlyAcceptsValidReceptiveAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self should: [ portfolio add: 'invalid account' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:47:46' prior: 50885273!
test08portolioDoesNotAcceptsDuplicatedAccounts

	| portfolio |
	
	portfolio := Portfolio new.

	portfolio add: accountWithDepositAndWithdraw.
	
	self should: [ portfolio add: accountWithDepositAndWithdraw ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:49:15' prior: 50885236!
test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts

	| portfolio childPortfolio |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	childPortfolio add: accountWithDepositAndWithdraw .
	portfolio add: childPortfolio.
	portfolio add: account2WithDeposit.
	
	self assert: portfolio balance equals: (accountWithDepositAndWithdraw balance + account2WithDeposit balance).	
		

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:49:24'!
ERROR!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:49:24'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:49:24'!
ERROR!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 16:49:25'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:49:25'!
ERROR!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:49:25'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:49:38'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:49:38'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:50:49'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:50:49'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:51:05' prior: 50885619!
test03portfolioHasBalanceEqualsToSumOfAccountsBalance
	
	| portfolio |
	
	portfolio := Portfolio new.

	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: account2WithDeposit.
	

	self assert: (accountWithDepositAndWithdraw balance + accountWithDeposit balance) equals: portfolio balance.
	
	! !

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:51:07'!
ERROR!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:51:07'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:51:15' prior: 50885781!
test03portfolioHasBalanceEqualsToSumOfAccountsBalance
	
	| portfolio |
	
	portfolio := Portfolio new.

	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: account2WithDeposit.
	

	self assert: (accountWithDepositAndWithdraw balance + account2WithDeposit balance) equals: portfolio balance.
	
	! !

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:51:17'!
PASSED!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 16:51:20'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 16:51:20'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:51:20'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 16:51:20'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:51:20'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:51:20'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 16:51:20'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 16:51:20'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:51:20'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:51:20'!
ERROR!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 16:51:20'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:51:20'!
ERROR!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:51:20'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:52:42' prior: 50885106!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio |	
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	childPortfolio add: accountWithDepositAndWithdraw .
	portfolio add: childPortfolio.
	portfolio add: account2WithDeposit .
	
	self assert: portfolio transactions size equals: 3.
	self assert: portfolio transactions includes: accountDeposit .
	self assert: portfolio transactions includes: accountWithdraw .
	self assert: portfolio transactions includes: account2Deposit .
		

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:53:04' prior: 50885307!
test11portfolioOnlyAcceptsValidPortfolios

	| portfolio |	
	
	portfolio := Portfolio new.
	
	self should: [ portfolio add: 'invalid portfolio' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:53:19' prior: 50885222!
test12portfolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:54:04' prior: 50885180!
test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| portfolio portfolio2 portfolio3 portfolio4 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	portfolio2 add: accountWithDepositAndWithdraw.
	portfolio4 add: account2WithDeposit.
	
	portfolio add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio3 add: portfolio2.

	self should: [ 	portfolio add: portfolio3. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ].
	
	self should: [ 		portfolio3 add: account2WithDeposit ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ]


	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:54:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:54:30' prior: 50885571 overrides: 16927572!
setUp
	
	accountWithDepositAndWithdraw := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: accountWithDepositAndWithdraw.
	accountWithdraw := Withdraw register: 50 on: accountWithDepositAndWithdraw.
	
	account2WithDeposit := ReceptiveAccount new.
	account2Deposit := Deposit register: 30 on: account2WithDeposit.

	! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'accountWithDepositAndWithdraw account2WithDeposit accountDeposit accountWithdraw account2Deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 16:54:47'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'accountWithDepositAndWithdraw account2WithDeposit accountDeposit accountWithdraw account2Deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:54:50'!
PASSED!

!testRun: #PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:54:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:55:05' prior: 50885801!
test03portfolioHasBalanceEqualsToSumOfAccountsBalance
	
	| portfolio |
	
	portfolio := Portfolio new.

	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: account2WithDeposit.
	
	self assert: (accountWithDepositAndWithdraw balance + account2WithDeposit balance) equals: portfolio balance.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:55:10' prior: 50885632!
test04portfolioTransactionsEqualsToAllAccountsTransactions

	| portfolio transactions |
	
	portfolio := Portfolio new.
		
	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: account2WithDeposit.
	
	transactions := portfolio transactions.
	
	self assert: transactions size equals: 3.
	self assert: transactions includes: accountDeposit.
	self assert: transactions includes: accountWithdraw.
	self assert: transactions includes: account2Deposit.
	! !

!methodRemoval: PortfolioTest #test11portfolioOnlyAcceptsValidPortfolios stamp: 'jn 5/24/2021 16:56:40'!
test11portfolioOnlyAcceptsValidPortfolios

	| portfolio |	
	
	portfolio := Portfolio new.
	
	self should: [ portfolio add: 'invalid portfolio' ] 
		raise: Error
		withExceptionDo: [ :error | self assert: error class equals: MessageNotUnderstood ] 	

	!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:56:49'!
test11portfolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 

	! !

!methodRemoval: PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:56:49'!
test12portfolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	portfolio add: anotherPortfolio.

	self should: [ portfolio add: anotherPortfolio ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 

	!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:56:56'!
test12portfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| portfolio portfolio2 portfolio3 portfolio4 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	portfolio2 add: accountWithDepositAndWithdraw.
	portfolio4 add: account2WithDeposit.
	
	portfolio add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio3 add: portfolio2.

	self should: [ 	portfolio add: portfolio3. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ].
	
	self should: [ 		portfolio3 add: account2WithDeposit ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ]


	! !

!methodRemoval: PortfolioTest #test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:56:56'!
test13portfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| portfolio portfolio2 portfolio3 portfolio4 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	portfolio2 add: accountWithDepositAndWithdraw.
	portfolio4 add: account2WithDeposit.
	
	portfolio add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio3 add: portfolio2.

	self should: [ 	portfolio add: portfolio3. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ].
	
	self should: [ 		portfolio3 add: account2WithDeposit ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ]


	!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:59:15'!
assertSumOfBalancesOfAccountsEqualstToBalanceOf: portfolio
	
	self assert: (accountWithDepositAndWithdraw balance + account2WithDeposit balance) equals: portfolio balance.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:59:39' prior: 50886072!
test03portfolioHasBalanceEqualsToSumOfAccountsBalance
	
	| portfolio |
	
	portfolio := Portfolio new.

	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: account2WithDeposit.
	
	self assertSumOfBalancesOfAccountsEqualstToBalanceOf: portfolio.
	
	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 16:59:40'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 16:59:40'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 16:59:52' prior: 50885701!
test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts

	| portfolio childPortfolio |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	childPortfolio add: accountWithDepositAndWithdraw .
	portfolio add: childPortfolio.
	portfolio add: account2WithDeposit.
	
	self assertSumOfBalancesOfAccountsEqualstToBalanceOf: portfolio.
		

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:01:59' prior: 50885867!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio transactions |	
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	childPortfolio add: accountWithDepositAndWithdraw .
	portfolio add: childPortfolio.
	portfolio add: account2WithDeposit .
	
	transactions := portfolio transactions.

	self assert: transactions size equals: 3.
	self assert: transactions includes: accountDeposit .
	self assert: transactions includes: accountWithdraw .
	self assert: transactions includes: account2Deposit .
		

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:03:13'!
assertTransactionsOf: portfolio
	
	| transactions |
	transactions := portfolio transactions.
	
	self assert: transactions size equals: 3.
	self assert: transactions includes: accountDeposit.
	self assert: transactions includes: accountWithdraw.
	self assert: transactions includes: account2Deposit.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:03:25' prior: 50886280!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio transactions |	
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	childPortfolio add: accountWithDepositAndWithdraw .
	portfolio add: childPortfolio.
	portfolio add: account2WithDeposit .
	
	transactions := portfolio transactions.

	self assertTransactionsOf: portfolio.

		

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:03:36' prior: 50886313!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio |	
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	childPortfolio add: accountWithDepositAndWithdraw .
	portfolio add: childPortfolio.
	portfolio add: account2WithDeposit .
	
	self assertTransactionsOf: portfolio.

		

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 17:03:40'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 17:03:40'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 17:03:40'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 17:03:40'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:03:40'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:03:40'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 17:03:40'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 17:03:40'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:03:40'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:03:41'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 17:03:41'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 17:03:41'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:03:53' prior: 50886085!
test04portfolioTransactionsEqualsToAllAccountsTransactions

	| portfolio |
	
	portfolio := Portfolio new.
		
	portfolio add: accountWithDepositAndWithdraw.
	portfolio add: account2WithDeposit.
	
	self assertTransactionsOf: portfolio.

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 17:03:57'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 17:03:57'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:06:59' prior: 50886113!
test11portfolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	self assertDuplicatedAdd: [	portfolio add: anotherPortfolio.
].
	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:07:04' prior: 50885687!
test08portolioDoesNotAcceptsDuplicatedAccounts

	| portfolio |
	
	portfolio := Portfolio new.

	self assertDuplicatedAdd: [	portfolio add: accountWithDepositAndWithdraw.
].
	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:07:38'!
assertDuplicatedAdd: anAddClosure
	
	anAddClosure value.

	self should: [ 	anAddClosure value. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 
	

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 17:07:58'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 17:07:58'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:10:24'!
addAndAssertDuplicatedAdd: anAddClosure
	
	anAddClosure value.

	self should: [ 	anAddClosure value. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 
	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:10:24' prior: 50886455!
test08portolioDoesNotAcceptsDuplicatedAccounts

	| portfolio |
	
	portfolio := Portfolio new.

	self addAndAssertDuplicatedAdd: [	portfolio add: accountWithDepositAndWithdraw.
].
	

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:10:24' prior: 50886445!
test11portfolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	self addAndAssertDuplicatedAdd: [	portfolio add: anotherPortfolio.
].
	

	! !

!methodRemoval: PortfolioTest #assertDuplicatedAdd: stamp: 'jn 5/24/2021 17:10:24'!
assertDuplicatedAdd: anAddClosure
	
	anAddClosure value.

	self should: [ 	anAddClosure value. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 
	

	!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:11:04' prior: 50886519!
addAndAssertDuplicatedAdd: anAddClosure
	
	anAddClosure value.
	
	self assertDuplicatedAdd: anAddClosure.

	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:11:15'!
assertDuplicatedAdd: anAddClosure
	
	self should: [ 	anAddClosure value. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Portfolio financialAccountAlreadyExistsDescription  ] 

	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:11:48' prior: 50886143!
test12portfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| portfolio portfolio2 portfolio3 portfolio4 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	portfolio2 add: accountWithDepositAndWithdraw.
	portfolio4 add: account2WithDeposit.
	
	portfolio add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio3 add: portfolio2.

	self assertDuplicatedAdd: [ 	portfolio add: portfolio3. ].
	self assertDuplicatedAdd: [ 		portfolio3 add: account2WithDeposit ].
		


	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 17:11:50'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 17:11:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:13:56'!
addTwoAccountsTo: aPortfolio

	aPortfolio add: accountWithDepositAndWithdraw.
	aPortfolio add: account2WithDeposit.
	
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:14:12' prior: 50886209!
test03portfolioHasBalanceEqualsToSumOfAccountsBalance
	
	| portfolio |
	
	portfolio := Portfolio new.

	self addTwoAccountsTo: portfolio.

	self assertSumOfBalancesOfAccountsEqualstToBalanceOf: portfolio.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:14:18' prior: 50886389!
test04portfolioTransactionsEqualsToAllAccountsTransactions

	| portfolio |
	
	portfolio := Portfolio new.
		
	self addTwoAccountsTo: portfolio.
	
	self assertTransactionsOf: portfolio.

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:14:24' prior: 50885649!
test05portfolioKnowsRegisteredTransactionsInAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self addTwoAccountsTo: portfolio.
		
	self assert: (portfolio hasRegistered: accountDeposit).
	self assert: (portfolio hasRegistered: accountWithdraw).
	self assert: (portfolio hasRegistered: account2Deposit).

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:15:47'!
addAccountTo: aChildPortfolio andAnotherAccountTo: aPortfolio

	aChildPortfolio add: accountWithDepositAndWithdraw .
	aPortfolio add: aChildPortfolio.
	aPortfolio add: account2WithDeposit.
	
		

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:16:08' prior: 50886266!
test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts

	| portfolio childPortfolio |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	self addAccountTo: childPortfolio andAnotherAccountTo: portfolio.
	
	self assertSumOfBalancesOfAccountsEqualstToBalanceOf: portfolio.
		

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:16:18' prior: 50886329!
test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts

	| portfolio childPortfolio |	
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.

	self addAccountTo: childPortfolio andAnotherAccountTo: portfolio.
	
	self assertTransactionsOf: portfolio.

		

	! !

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:16:26'!
PASSED!

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 17:16:29'!
PASSED!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 17:16:56'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'accountWithDepositAndWithdraw anotherAccountWithDeposit accountDeposit accountWithdraw account2Deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:16:56' prior: 50886641!
addTwoAccountsTo: aPortfolio

	aPortfolio add: accountWithDepositAndWithdraw.
	aPortfolio add: anotherAccountWithDeposit.
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:16:56' prior: 50885991 overrides: 16927572!
setUp
	
	accountWithDepositAndWithdraw := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: accountWithDepositAndWithdraw.
	accountWithdraw := Withdraw register: 50 on: accountWithDepositAndWithdraw.
	
	anotherAccountWithDeposit := ReceptiveAccount new.
	account2Deposit := Deposit register: 30 on: anotherAccountWithDeposit.

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:16:56' prior: 50886680!
addAccountTo: aChildPortfolio andAnotherAccountTo: aPortfolio

	aChildPortfolio add: accountWithDepositAndWithdraw .
	aPortfolio add: aChildPortfolio.
	aPortfolio add: anotherAccountWithDeposit.
	
		

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:16:56' prior: 50886576!
test12portfolioDoesNotAcceptsDuplicatedAccountingsRecursively

	| portfolio portfolio2 portfolio3 portfolio4 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	portfolio2 add: accountWithDepositAndWithdraw.
	portfolio4 add: anotherAccountWithDeposit.
	
	portfolio add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio3 add: portfolio2.

	self assertDuplicatedAdd: [ 	portfolio add: portfolio3. ].
	self assertDuplicatedAdd: [ 		portfolio3 add: anotherAccountWithDeposit ].
		


	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:16:56' prior: 50886200!
assertSumOfBalancesOfAccountsEqualstToBalanceOf: portfolio
	
	self assert: (accountWithDepositAndWithdraw balance + anotherAccountWithDeposit balance) equals: portfolio balance.
	
	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jn 5/24/2021 17:17:08'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'accountWithDepositAndWithdraw anotherAccountWithDeposit accountDeposit accountWithdraw anotherAccountDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:17:08' prior: 50885664!
test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self deny: (portfolio hasRegistered: accountDeposit).
	self deny: (portfolio hasRegistered: accountWithdraw).
	self deny: (portfolio hasRegistered: anotherAccountDeposit).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:17:08' prior: 50886783 overrides: 16927572!
setUp
	
	accountWithDepositAndWithdraw := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: accountWithDepositAndWithdraw.
	accountWithdraw := Withdraw register: 50 on: accountWithDepositAndWithdraw.
	
	anotherAccountWithDeposit := ReceptiveAccount new.
	anotherAccountDeposit := Deposit register: 30 on: anotherAccountWithDeposit.

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:17:08' prior: 50886300!
assertTransactionsOf: portfolio
	
	| transactions |
	transactions := portfolio transactions.
	
	self assert: transactions size equals: 3.
	self assert: transactions includes: accountDeposit.
	self assert: transactions includes: accountWithdraw.
	self assert: transactions includes: anotherAccountDeposit.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jn 5/24/2021 17:17:08' prior: 50886667!
test05portfolioKnowsRegisteredTransactionsInAccounts

	| portfolio |
	
	portfolio := Portfolio new.
	
	self addTwoAccountsTo: portfolio.
		
	self assert: (portfolio hasRegistered: accountDeposit).
	self assert: (portfolio hasRegistered: accountWithdraw).
	self assert: (portfolio hasRegistered: anotherAccountDeposit).

	! !

!testRun: #PortfolioTest #test01portfolioHasZeroBalanceWhenCreated stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test02portfolioHasNoneTransactionsWhenCreated stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test03portfolioHasBalanceEqualsToSumOfAccountsBalance stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test04portfolioTransactionsEqualsToAllAccountsTransactions stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test06portfolioDoesNotKnowNotRegisteredTransactionsInAccounts stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test07portfolioOnlyAcceptsValidReceptiveAccounts stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test08portolioDoesNotAcceptsDuplicatedAccounts stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test09portfolioHasBalanceEqualsToBalancesOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test10portfolioTransactionsEqualsToTransactionsOfPortfoliosAndAccounts stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test11portfolioDoesNotAcceptsDuplicatedPortfolios stamp: 'jn 5/24/2021 17:17:10'!
PASSED!

!testRun: #PortfolioTest #test12portfolioDoesNotAcceptsDuplicatedAccountingsRecursively stamp: 'jn 5/24/2021 17:17:10'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:18:03' prior: 50886539!
test11portfolioDoesNotAcceptsDuplicatedPortfolios

	| portfolio anotherPortfolio |
	
	portfolio := Portfolio new.
	anotherPortfolio := Portfolio new.

	self addAndAssertDuplicatedAdd: [	 portfolio add: anotherPortfolio. ].
	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'jn 5/24/2021 17:18:18' prior: 50886530!
test08portolioDoesNotAcceptsDuplicatedAccounts

	| portfolio |
	
	portfolio := Portfolio new.

	self addAndAssertDuplicatedAdd: [	 portfolio add: accountWithDepositAndWithdraw. ].
	

	! !

Portfolio methodsInCategory: #balance!

Portfolio methodsInCategory: #balance sourceCode !

(Portfolio methodsInCategory: #balance) sourceCode !

((Portfolio methodsInCategory: #balance) at:0) sourceCode !

((Portfolio methodsInCategory: #balance) at:1) sourceCode !

Portfolio methodDict!

Portfolio methodDict: #balance!

Portfolio methodDict: #balance sourceCode!

(Portfolio methodDict: #balance) sourceCode!

(Portfolio methodDict: #balance)!

(Portfolio methodsSelect: #balance)!

(Portfolio methods)!

(Portfolio methods) sourceCode !