----STARTUP---- (19 May 2021 15:47:24) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!


----End fileIn of C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\RepoDocenetes\2021-1c\17-Portfolio 1\Portfolio-Ejercicio.st----!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 15:56:16' prior: 50907419!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 15:56:19' prior: 50907427!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 15:56:23' prior: 50907436!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 15:56:26' prior: 50907446!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 15:56:28' prior: 50907456!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 15:56:30' prior: 50907469!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 15:56:34' prior: 50907481!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ciro 5/19/2021 15:56:38' prior: 50907622!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ciro 5/19/2021 15:56:44' prior: 50907628!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ciro 5/19/2021 15:56:50' prior: 50907613!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ciro 5/19/2021 15:56:54' prior: 50907618!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'Ciro 5/19/2021 15:56:58' prior: 50907608 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!Withdraw methodsFor: 'initialization' stamp: 'Ciro 5/19/2021 15:57:02' prior: 50907573!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'Ciro 5/19/2021 15:57:08' prior: 50907578 overrides: 50907506!
value

	^ value! !
!Deposit methodsFor: 'value' stamp: 'Ciro 5/19/2021 15:57:14' prior: 50907544 overrides: 50907506!
value

	^ value! !
!Deposit methodsFor: 'initialization' stamp: 'Ciro 5/19/2021 15:57:17' prior: 50907539!
initializeFor: aValue

	value := aValue ! !
!AccountTransaction methodsFor: 'value' stamp: 'Ciro 5/19/2021 15:57:22' prior: 50907506 overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'Ciro 5/19/2021 15:57:25' prior: 50907519!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!Deposit class methodsFor: 'instance creation' stamp: 'Ciro 5/19/2021 15:57:30' prior: 50907556!
for: aValue

	^ self new initializeFor: aValue ! !
!Withdraw class methodsFor: 'instance creation' stamp: 'Ciro 5/19/2021 15:57:33' prior: 50907590!
for: aValue

	^ self new initializeFor: aValue ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:08:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:08:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:08:14'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ciro 5/19/2021 16:08:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 16:08:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ciro 5/19/2021 16:08:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ciro 5/19/2021 16:08:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:08:14'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:08:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:08:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ciro 5/19/2021 16:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 16:09:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ciro 5/19/2021 16:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:10:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ciro 5/19/2021 16:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 16:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ciro 5/19/2021 16:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ciro 5/19/2021 16:10:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:10:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ciro 5/19/2021 16:10:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ciro 5/19/2021 16:10:34'!
PASSED!

----End fileIn of C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\Packages\TerseGuide.pck.st----!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ciro 5/19/2021 16:23:21' prior: 50907712!
balance

	^transactions
		inject: 0
		into: [:actualBalance :transaction | transaction modifyBalance: actualBalance]! !
!AccountTransaction methodsFor: 'value' stamp: 'Ciro 5/19/2021 16:23:51'!
modifyBalance: aBalance

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'value' stamp: 'Ciro 5/19/2021 16:24:13' prior: 50910801!
modifyBalance: actualBalance

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'Ciro 5/19/2021 16:24:52' overrides: 50910806!
modifyBalance: actualBalance

	^ actualBalance + value! !
!Withdraw methodsFor: 'value' stamp: 'Ciro 5/19/2021 16:25:02' overrides: 50910806!
modifyBalance: actualBalance

	^ actualBalance - value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ciro 5/19/2021 16:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 16:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ciro 5/19/2021 16:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ciro 5/19/2021 16:25:14'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'Ciro 5/19/2021 16:27:16'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ciro 5/19/2021 16:29:06'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'Ciro 5/19/2021 16:28:48'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:29:09'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:29:24'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:29:32' prior: 50910877!
balance
	
	^0! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:29:37'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:29:37'!
PASSED!

!methodRemoval: PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:29:55'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
!
!PortfolioTest methodsFor: 'no messages' stamp: 'Ciro 5/19/2021 16:30:29'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:30:30'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:30:30'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:38:02'!
test02AddNewReceptiveAccount

	| portfolio receptiveAccount |
	
	portfolio _ Portfolio new.
	receptiveAccount _ ReceptiveAccount new.
	portfolio addAccount: receptiveAccount.

	self assert: 0 equals: portfolio balance.
	self assert: (portfolio hasAccount: receptiveAccount).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:39:41' prior: 50910914!
test02AddNewReceptiveAccount

	| portfolio receptiveAccount |
	
	portfolio _ Portfolio new.
	receptiveAccount _ ReceptiveAccount new.
	portfolio addAccount: receptiveAccount.

	self assert: 0 equals: portfolio balance.
	self assert: (portfolio hasAccount: receptiveAccount).
	self assert: 1 equals: portfolio accounts size.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:39:47'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:39:57'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ciro 5/19/2021 16:40:28'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:40:21' prior: 50910942!
addAccount: aReceptiveAccount 

	^ accounts add: aReceptiveAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:40:36' prior: 50910955!
addAccount: aReceptiveAccount 

	accounts add: aReceptiveAccount! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:40:38'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:41:21' overrides: 16896425!
initialize

	accounts _ OrderedCollection new.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:41:37' prior: 50910900!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:41:45'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:41:52'!
hasAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:42:15' prior: 50910985!
hasAccount: aReceptiveAccount 
	
	^ accounts includes: aReceptiveAccount! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:42:18'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:42:26'!
accounts
	self shouldBeImplemented.
	^accounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:42:32' prior: 50910998!
accounts
	
	^ accounts copy! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:42:34'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:42:34'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:42:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:43:51'!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:44:04' prior: 50911016!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:44:23'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:45:17' prior: 50910882!
balance
	
	^ accounts sum:[ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !

!testRun: #PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:45:44'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:45:44'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:45:44'!
PASSED!

!testRun: #PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:45:44'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:46:43' prior: 50911027!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
	self assert: (portfolio hasAccount: account).
	self assert: 1 equals: portfolio accounts size.
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:47:45' prior: 50911062!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio deposit |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
	self assert: (portfolio hasAccount: account).
	self assert: 1 equals: portfolio accounts size.
	self assert: (portfolio hasRegistered: deposit).
! !

!testRun: #PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:47:52'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:47:58'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:48:16' prior: 50911096!
hasRegistered: aTransaction

	^ true! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:48:25' prior: 50911101!
hasRegistered: anAccountTransaction

	^ true! !

!testRun: #PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:48:35'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:48:35'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:48:35'!
PASSED!

!testRun: #PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:48:35'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:49:19' prior: 50911076!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio deposit |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
	self assert: (portfolio hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:49:38' prior: 50911125!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio deposit |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
	self assert: (portfolio hasAccount: account).
	self assert: 1 equals: portfolio accounts size.
	self assert: (portfolio hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:49:40' prior: 50911138!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio deposit |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
	self assert: (portfolio hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:52:15' prior: 50911154!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:52:24' prior: 50911167!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:52:29' prior: 50911182!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:52:34' prior: 50911197!
test03DepositIncreasesBalanceOnTransactionValue

	| portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).
! !

!testRun: #PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:52:36'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 16:54:46' prior: 50911106!
hasRegistered: anAccountTransaction

	^ accounts anySatisfy: [ :anAccount | anAccount hasRegistered: anAccountTransaction ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:55:00'!
test04DepositIncreasesBalanceOnTransactionValue

	| portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:49:38' prior: 50911210!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio deposit |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
	self assert: (portfolio hasAccount: account).
	self assert: 1 equals: portfolio accounts size.
	self assert: (portfolio hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:55:19' prior: 50911247!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio deposit |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
	self assert: (portfolio hasRegistered: deposit).
! !

!testRun: #PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:55:20'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:55:20'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:55:20'!
PASSED!

!testRun: #PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:55:20'!
PASSED!

!testRun: #PortfolioTest #test04DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:55:20'!
PASSED!

!testRun: #PortfolioTest #test04DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:55:23'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:55:23'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:55:23'!
PASSED!

!testRun: #PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:55:23'!
PASSED!

!testRun: #PortfolioTest #test04DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:55:23'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:56:06'!
test03PortfolioKnowsRegisteredTransactions 

	| account portfolio deposit |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
	self assert: (portfolio hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:56:16'!
test04PortfolioNotKnowsRegisteredTransactions 

	| portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 16:56:28'!
test04PortfolioDoNotKnowsRegisteredTransactions 

	| portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).
! !

!methodRemoval: PortfolioTest #test04PortfolioNotKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 16:56:31'!
test04PortfolioNotKnowsRegisteredTransactions 

	| portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).
!

!methodRemoval: PortfolioTest #test04DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:56:36'!
test04DepositIncreasesBalanceOnTransactionValue

	| portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).
!

!methodRemoval: PortfolioTest #test03DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/19/2021 16:56:39'!
test03DepositIncreasesBalanceOnTransactionValue

	| account portfolio deposit |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
	self assert: (portfolio hasRegistered: deposit).
!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 16:56:41'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 16:56:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 16:56:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 16:56:42'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 17:00:32'!
test05Prueba

	| account1 account2 portfolio deposit1 deposit2 withdraw |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 200 on: account2.
	withdraw _ Withdraw register: 50 on: account2.
		
	self assert: 250 equals: portfolio balance.
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).
! !

!testRun: #PortfolioTest #test05Prueba stamp: 'Ciro 5/19/2021 17:00:33'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 17:00:33'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 17:00:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 17:00:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 17:00:33'!
PASSED!

!testRun: #PortfolioTest #test05Prueba stamp: 'Ciro 5/19/2021 17:00:33'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 17:04:38'!
test05AddMultipleTransactions

	| portfolio account1 account2 deposit1 deposit2 withdraw |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: account1. 
	deposit2 _ Deposit register: 200 on: account2.
	withdraw _ Withdraw register: 50 on: account2.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 17:06:07' prior: 50911442!
test05AddMultipleTransactions

	| portfolio account1 account2 deposit1 deposit2 withdraw |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: account1. 
	deposit2 _ Deposit register: 200 on: account2.
	withdraw _ Withdraw register: 50 on: account2.
	
	self assert: 3 equals: portfolio transactions size.
	self assert: (portfolio transactions includes: deposit1).
	self assert: (portfolio transactions includes: deposit2).
	self assert: (portfolio transactions includes: withdraw).! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/19/2021 17:06:10'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 17:06:17'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 17:09:32' prior: 50911480!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.

	^ accounts
		inject: transactions
		into: [ :actualTransactions :anAccount | transactions addAll: anAccount transactions ]! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/19/2021 17:09:34'!
FAILURE!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/19/2021 17:10:08'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/19/2021 17:10:53' prior: 50911456!
test05AddMultipleTransactions

	| portfolio account1 account2 deposit1 deposit2 withdraw |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	deposit1 _ Deposit register: 100 on: account1. 
	deposit2 _ Deposit register: 200 on: account2.
	withdraw _ Withdraw register: 50 on: account2.
	
	self assert: 3 equals: portfolio transactions size.
	self assert: (portfolio transactions includes: deposit1).
	self assert: (portfolio transactions includes: deposit2).
	self assert: (portfolio transactions includes: withdraw).! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/19/2021 17:10:54'!
FAILURE!

!methodRemoval: PortfolioTest #test05Prueba stamp: 'Ciro 5/19/2021 17:11:33'!
test05Prueba

	| account1 account2 portfolio deposit1 deposit2 withdraw |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 200 on: account2.
	withdraw _ Withdraw register: 50 on: account2.
		
	self assert: 250 equals: portfolio balance.
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).
!

portfolio transactions!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/19/2021 17:15:21'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 17:15:47' prior: 50911485!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.

	accounts
		inject: transactions
		into: [ :actualTransactions :anAccount | ^ transactions addAll: anAccount transactions ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 17:15:51' prior: 50911552!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.

	^ accounts
		inject: transactions
		into: [ :actualTransactions :anAccount | ^ transactions addAll: anAccount transactions ]! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/19/2021 17:15:55'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 17:16:03' prior: 50911562!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.

	^ accounts
		inject: transactions
		into: [ :actualTransactions :anAccount | transactions addAll: anAccount transactions ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/19/2021 17:16:40' prior: 50911575!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.

	accounts
		inject: transactions
		into: [ :actualTransactions :anAccount | transactions addAll: anAccount transactions ].
		
	^ transactions! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/19/2021 17:16:45'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/19/2021 17:16:45'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/19/2021 17:16:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 17:16:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/19/2021 17:16:45'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/19/2021 17:16:45'!
PASSED!

----QUIT----(19 May 2021 17:17:04) CuisUniversity-4532.image priorSource: 18423938!

----STARTUP---- (20 May 2021 20:11:35) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:16:18'!
test06AddPortfolioToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	
	self assert: 1 equals: portfolio1 portfolios size.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 20:16:58'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:17:04'!
addPortfolio: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ciro 5/20/2021 20:17:47'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:17:43' prior: 50911634!
addPortfolio: aPortfolio 

	portfolios add: aPortfolio.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 20:17:51'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:18:07' prior: 50910970 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	portfolios _ OrderedCollection  new.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 20:18:11'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:18:17'!
portfolios
	self shouldBeImplemented.
	^portfolios! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:18:23' prior: 50911665!
portfolios
	
	^ portfolios copy! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 20:18:24'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/20/2021 20:18:24'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/20/2021 20:18:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/20/2021 20:18:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/20/2021 20:18:24'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/20/2021 20:18:24'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 20:18:24'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:21:21'!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	account4 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	portfolio2 addAccount: account3.
	portfolio2 addAccount: account4.
	portfolio1 addPortfolio: portfolio2.
	
	self assert: 1 equals: portfolio1 portfolios size.
	self assert: 4 equals: portfolio1 accounts size.
	self assert: 2 equals: portfolio2 portfolios size.
	self assert: 0 equals: portfolio2 accounts size.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:21:30' prior: 50911697!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	account4 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	portfolio2 addAccount: account3.
	portfolio2 addAccount: account4.
	portfolio1 addPortfolio: portfolio2.
	
	self assert: 1 equals: portfolio1 portfolios size.
	self assert: 4 equals: portfolio1 accounts size.
	self assert: 0 equals: portfolio2 portfolios size.
	self assert: 2 equals: portfolio2 accounts size.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:23:00' prior: 50911722!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	account4 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	portfolio2 addAccount: account3.
	portfolio2 addAccount: account4.
	portfolio1 addPortfolio: portfolio2.
	
	self assert: 1 equals: portfolio1 portfolios size.
	self assert: 4 equals: portfolio1 accounts size.
	self assert: 0 equals: portfolio2 portfolios size.
	self assert: 2 equals: portfolio2 accounts size.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:23:07' prior: 50911621!
test06AddPortfolioToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	
	self assert: 1 equals: portfolio1 portfolios size.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:23:28' prior: 50911772!
test06AddPortfolioToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	
	self assert: 1 equals: portfolio1 portfolios size.
	self assert: (portfolio1 hasPortfolio: portfolio2).! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 20:23:36'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:23:42'!
hasPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:23:57' prior: 50911796!
hasPortfolio: aPortfolio 

	^ portfolios includes: aPortfolio! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 20:23:58'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/20/2021 20:23:58'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/20/2021 20:23:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/20/2021 20:23:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/20/2021 20:23:58'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/20/2021 20:23:58'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 20:23:58'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/20/2021 20:23:58'!
FAILURE!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/20/2021 20:23:58'!
FAILURE!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 20:24:05'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:24:33' prior: 50910926!
test02AddNewReceptiveAccount

	| portfolio receptiveAccount |
	
	portfolio _ Portfolio new.
	receptiveAccount _ ReceptiveAccount new.
	portfolio addAccount: receptiveAccount.

	self assert: 0 equals: portfolio balance.
	self assert: (portfolio hasAccount: receptiveAccount).
	self assert: 1 equals: portfolio accounts size.! !

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/20/2021 20:24:45'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:25:21' prior: 50911647!
addPortfolio: aPortfolio 

	portfolios add: aPortfolio.
	accounts addAll: aPortfolio accounts.! !

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/20/2021 20:25:29'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:26:41' prior: 50911858!
addPortfolio: aPortfolio 

	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:27:00' prior: 50911003!
accounts
	
	| allAccounts |
	
	accounts copy! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:32:16' prior: 50911873!
accounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection  new.
	
	allAccounts addAll: accounts copy.
	
	portfolios do: [ :aPortfolio | allAccounts addAll: aPortfolio accounts ]
		
	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:32:27' prior: 50911878!
accounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection  new.
	
	allAccounts addAll: accounts copy.
	
	portfolios do: [ :aPortfolio | allAccounts addAll: aPortfolio accounts ].
	
	^ allAccounts
		
	
! !

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/20/2021 20:32:33'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/20/2021 20:32:33'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/20/2021 20:32:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/20/2021 20:32:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/20/2021 20:32:33'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/20/2021 20:32:33'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 20:32:33'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/20/2021 20:32:33'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:41:22'!
test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 deposit1 deposit2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio1 addPortfolio: portfolio2.
	
	self assert: 1 equals: portfolio1 portfolios size.
	self assert: 4 equals: portfolio1 accounts size.
	self assert: 0 equals: portfolio2 portfolios size.
	self assert: 2 equals: portfolio2 accounts size.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:42:48' prior: 50911924!
test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 deposit1 deposit2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio1 addPortfolio: portfolio2.
	
	self assert: 200 equals: portfolio1 balance.
	self assert: 100 equals: portfolio2 balance.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit2).! !

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/20/2021 20:42:50'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:43:55' prior: 50911042!
balance
	
	| allAccounts |
	
	allAccounts _ self accounts.
	
	^ allAccounts sum:[ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:44:00' prior: 50911227!
hasRegistered: anAccountTransaction

	| allAccounts |
	
	allAccounts _ self accounts.
	
	^ allAccounts anySatisfy: [ :anAccount | anAccount hasRegistered: anAccountTransaction ]! !

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/20/2021 20:44:08'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:45:50'!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account2.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self assert: 2 equals: portfolio1 accounts size.
	self assert: 1 equals: portfolio2 accounts size.
	self assert: 1 equals: portfolio3 accounts size.! !

----End fileIn of C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\Repo\isw1\16-MarsRover\MarsRover-Exercise.st----!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:52:46' prior: 50911999!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account2.
	portfolio1 addPortfolio: portfolio2.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 2 equals: portfolio1 accounts size.
			self assert: 1 equals: portfolio2 accounts size.
			self assert: 1 equals: portfolio3 accounts size.].
	
	self assert: 2 equals: portfolio1 accounts size.
	self assert: 1 equals: portfolio2 accounts size.
	self assert: 1 equals: portfolio3 accounts size.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:52:51' prior: 50912442!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account2.
	portfolio1 addPortfolio: portfolio2.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 2 equals: portfolio1 accounts size.
			self assert: 1 equals: portfolio2 accounts size.
			self assert: 1 equals: portfolio3 accounts size.]! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/20/2021 20:53:23'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 20:54:07'!
invalidPortfolioAddedErrorDescription

	^ 'invalid portfolio added'! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/20/2021 20:54:15'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/20/2021 20:55:48' prior: 50912473!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	account3 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account3.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio4 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 3 equals: portfolio1 accounts size.
			self assert: 2 equals: portfolio1 portfolios size.
			self assert: 1 equals: portfolio2 accounts size.
			self assert: 1 equals: portfolio3 accounts size.
			self assert: 1 equals: portfolio4 accounts size.]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 21:00:42' prior: 50911868!
addPortfolio: aPortfolio

	| aux |

	aux _ aPortfolio containsAnyAccountFrom: accounts do: [ :anAccount | self hasAccount: anAccount ]

	portfolios add: aPortfolio.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/20/2021 21:00:43'!
ERROR!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/20/2021 21:00:43'!
ERROR!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/20/2021 21:00:43'!
ERROR!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/20/2021 21:00:43'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ciro 5/20/2021 21:00:43'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 21:01:26' prior: 50912545!
addPortfolio: aPortfolio

	

	(aPortfolio containsAnyAccountFrom: self accounts) ifTrue: [self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 21:01:34' prior: 50912611!
addPortfolio: aPortfolio

	(aPortfolio containsAnyAccountFrom: self accounts) ifTrue: [self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 21:02:03' prior: 50912620!
addPortfolio: aPortfolio

	(aPortfolio containsAnyAccountFrom: self accounts) ifTrue: [self error: self invalidCommandErrorDescription].

	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 21:02:12' prior: 50912629!
addPortfolio: aPortfolio

	(aPortfolio containsAnyAccountFrom: self accounts) ifTrue: [self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 21:02:14' prior: 50912638!
addPortfolio: aPortfolio

	(aPortfolio containsAnyAccountFrom: self accounts) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/20/2021 21:03:57'!
containsAnyAccountFrom: actualAccounts! !

----QUIT----(20 May 2021 21:04:16) CuisUniversity-4532.image priorSource: 18558840!

----STARTUP---- (23 May 2021 18:17:06) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!

!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 18:26:28' prior: 50912647!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 18:26:59' prior: 50912656!
containsAnyAccountFrom: aPortfolio

	self accounts == aPortfolio accounts ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 18:38:39' prior: 50912677!
containsAnyAccountFrom: aPortfolio

	^ self accounts anySatisfy: [ :anAccount | aPortfolio accounts includes: anAccount ].! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 18:38:47'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 18:39:10'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 18:39:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 18:39:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 18:39:10'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 18:39:10'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 18:39:10'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 18:39:10'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 18:39:10'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 18:39:10'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 18:43:42'!
test10NoDuplicatedPortfolios

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	
	self should: [ 	portfolio2 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 2 equals: portfolio1 portfolios size.
			self assert: 0 equals: portfolio2 portfolios size.]! !

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 18:43:47'!
FAILURE!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 18:43:47'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 18:43:54' prior: 50912724!
test10NoDuplicatedPortfolios

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	
	self should: [ 	portfolio2 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 1 equals: portfolio1 portfolios size.
			self assert: 0 equals: portfolio2 portfolios size.]! !

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 18:43:56'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 18:46:33' prior: 50910961!
addAccount: aReceptiveAccount 

	(self accounts includes: aReceptiveAccount ) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	accounts add: aReceptiveAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 18:48:41' prior: 50911670!
portfolios

	| allPortfolios |
	
	allPortfolios _ OrderedCollection  new.
	
	allPortfolios addAll: portfolios copy.
	
	portfolios do: [ :aPortfolio | allPortfolios addAll: aPortfolio portfolios ].
	
	^ allPortfolios! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 18:48:45'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 18:48:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 18:48:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 18:48:45'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 18:48:45'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 18:48:45'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 18:48:45'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 18:48:45'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 18:48:45'!
PASSED!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 18:48:45'!
FAILURE!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 18:48:45'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 18:49:24' prior: 50912668!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	(self containsAnyPotfolioFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 18:49:43'!
containsAnyPotfolioFrom: aPortfolio

	^ self accounts anySatisfy: [ :anAccount | aPortfolio portfolios includes: anAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 18:49:48' prior: 50912837!
containsAnyPotfolioFrom: aPortfolio

	^ self portfolios anySatisfy: [ :anAccount | aPortfolio portfolios includes: anAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 18:50:20' prior: 50912844!
containsAnyPotfolioFrom: aPortfolio

	^ self portfolios anySatisfy: [ :anotherPortfolio | aPortfolio portfolios includes: anotherPortfolio ].! !

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 18:50:26'!
FAILURE!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 18:50:26'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 18:51:52'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 18:51:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 18:51:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 18:51:52'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 18:51:52'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 18:51:52'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 18:51:52'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 18:51:52'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 18:51:52'!
PASSED!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 18:51:52'!
FAILURE!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 18:51:52'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ciro 5/23/2021 18:54:46'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:02:03' prior: 50912825!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio withParent: self.! !

!methodRemoval: Portfolio #containsAnyPotfolioFrom: stamp: 'Ciro 5/23/2021 19:02:09'!
containsAnyPotfolioFrom: aPortfolio

	^ self portfolios anySatisfy: [ :anotherPortfolio | aPortfolio portfolios includes: anotherPortfolio ].!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:02:27' prior: 50912917!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios addPortfolio: aPortfolio withParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:03:13'!
addPortfolio: aPortfolio withParent: aFatherPortfolio

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:04:21' prior: 50912933!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.
	
	aPortfolio addParent: self.! !

!methodRemoval: Portfolio #addPortfolio:withParent: stamp: 'Ciro 5/23/2021 19:04:31'!
addPortfolio: aPortfolio withParent: aFatherPortfolio

	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:04:54'!
addParent: aPortfolio

	parents add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:04:59' prior: 50912961!
addParent: aPortfolio

	parents add: aPortfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:05:10' prior: 50911656 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	portfolios _ OrderedCollection  new.
	parents _ OrderedCollection  new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:05:44' prior: 50912947!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.
	
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:07:27' prior: 50912979!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(aPortfolio containsAFatherPortfolio: self) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.
	
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:07:45'!
containsAFatherPortfolio: aPortfolio

	^ self parents anySatisfy: [ :anAccount | aPortfolio accounts includes: anAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:09:52' prior: 50912778!
portfolios

	| allParents |
	
	allParents _ OrderedCollection  new.
	
	allParents addAll: parents copy.
	
	parents do: [ :aPortfolio | allParents addAll: aPortfolio parents ].
	
	^ allParents! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:10:01'!
parents

	| allParents |
	
	allParents _ OrderedCollection  new.
	
	allParents addAll: parents copy.
	
	parents do: [ :aPortfolio | allParents addAll: aPortfolio parents ].
	
	^ allParents! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 18:48:41' prior: 50913009!
portfolios

	| allPortfolios |
	
	allPortfolios _ OrderedCollection  new.
	
	allPortfolios addAll: portfolios copy.
	
	portfolios do: [ :aPortfolio | allPortfolios addAll: aPortfolio portfolios ].
	
	^ allPortfolios! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:10:33' prior: 50913002!
containsAFatherPortfolio: aPortfolio

	^ self parents anySatisfy: [ :anAccount | aPortfolio parents includes: anAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:10:52' prior: 50913037!
containsAFatherPortfolio: aPortfolio

	^ self parents anySatisfy: [ :anotherPortfolio | aPortfolio parents includes: anotherPortfolio ].! !

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 19:11:01'!
FAILURE!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 19:11:01'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 19:11:12'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 19:11:19'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 19:11:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:11:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:11:19'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 19:11:19'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 19:11:19'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:11:19'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:11:19'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 19:11:19'!
PASSED!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 19:11:19'!
FAILURE!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 19:11:19'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:13:15' prior: 50912989!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsAFatherPortfolio: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.
	
	aPortfolio addParent: self.! !

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 19:13:44'!
FAILURE!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 19:13:44'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:14:55' prior: 50913044!
containsAFatherPortfolio: aPortfolio

	^ self parents anySatisfy: [ :anotherPortfolio | aPortfolio portfolios includes: anotherPortfolio ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:15:52' prior: 50913119!
containsAFatherPortfolio: aPortfolio

	^ self parents anySatisfy: [ :anotherPortfolio | aPortfolio portfolios includes: self ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:16:44' prior: 50913127!
containsAFatherPortfolio: aPortfolio

	^ self parents anySatisfy: [ :anotherPortfolio | aPortfolio = anotherPortfolio ].! !

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 19:16:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 19:16:54'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 19:16:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:16:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:16:54'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 19:16:54'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 19:16:54'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:16:54'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:16:54'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 19:16:54'!
PASSED!

!testRun: #PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 19:16:54'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:17:40'!
test11

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.]! !

!testRun: #PortfolioTest #test11 stamp: 'Ciro 5/23/2021 19:17:42'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'Ciro 5/23/2021 19:17:42'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:17:52' prior: 50913179!
test11

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio3 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.]! !

!testRun: #PortfolioTest #test11 stamp: 'Ciro 5/23/2021 19:17:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:18:00' prior: 50913200!
test11

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:18:43'!
test10CanNotAddaParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	
	self should: [ 	portfolio2 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 1 equals: portfolio1 portfolios size.
			self assert: 0 equals: portfolio2 portfolios size.]! !

!methodRemoval: PortfolioTest #test10NoDuplicatedPortfolios stamp: 'Ciro 5/23/2021 19:18:48'!
test10NoDuplicatedPortfolios

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	
	self should: [ 	portfolio2 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 1 equals: portfolio1 portfolios size.
			self assert: 0 equals: portfolio2 portfolios size.]!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:20:10'!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:20:47' prior: 50913099!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsAFatherPortfolio: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	(self containsAPortfolioFromChildrens: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.
	
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:21:40'!
containsAPortfolioFromChildrens: aPortfolio

	^ self portfolios anySatisfy: [ :anotherPortfolio | aPortfolio = anotherPortfolio ].! !

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 19:21:47'!
PASSED!

!methodRemoval: PortfolioTest #test11 stamp: 'Ciro 5/23/2021 19:21:51'!
test11

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.]!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddaParent stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 19:21:53'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:22:57'!
test10CanNotAddAParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	
	self should: [ 	portfolio2 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 1 equals: portfolio1 portfolios size.
			self assert: 0 equals: portfolio2 portfolios size.]! !

!methodRemoval: PortfolioTest #test10CanNotAddaParent stamp: 'Ciro 5/23/2021 19:23:01'!
test10CanNotAddaParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	
	self should: [ 	portfolio2 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 1 equals: portfolio1 portfolios size.
			self assert: 0 equals: portfolio2 portfolios size.]!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:24:01' prior: 50913269!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 1 equals: portfolio1 portfolios size.
			self assert: 1 equals: portfolio2 portfolios size.
			self assert: 0 equals: portfolio3 portfolios size.
			self assert: 0 equals: portfolio1 parents size.
			self assert: 1 equals: portfolio2 parents size.
			self assert: 1 equals: portfolio3 parents size.]! !

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 19:24:05'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 19:24:05'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:24:10' prior: 50913402!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 1 equals: portfolio1 portfolios size.
			self assert: 1 equals: portfolio2 portfolios size.
			self assert: 0 equals: portfolio3 portfolios size.
			self assert: 0 equals: portfolio1 parents size.
			self assert: 1 equals: portfolio2 parents size.
			self assert: 2 equals: portfolio3 parents size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:24:15' prior: 50913437!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 2 equals: portfolio1 portfolios size.
			self assert: 1 equals: portfolio2 portfolios size.
			self assert: 0 equals: portfolio3 portfolios size.
			self assert: 0 equals: portfolio1 parents size.
			self assert: 1 equals: portfolio2 parents size.
			self assert: 2 equals: portfolio3 parents size.]! !

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 19:24:19'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:24:48' prior: 50913464!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 2 equals: portfolio1 portfolios size.
			self assert: 1 equals: portfolio2 portfolios size.
			self assert: 0 equals: portfolio3 portfolios size.]! !

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 19:24:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:26:24'!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	deposit3 _ Withdraw register: 100 on: account1.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.
			self assert: 2 equals: portfolio1 portfolios size.
			self assert: 1 equals: portfolio2 portfolios size.
			self assert: 0 equals: portfolio3 portfolios size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:28:06' prior: 50913521!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	deposit3 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self assert: 2 equals: portfolio1 portfolios size.
	self assert: 1 equals: portfolio2 portfolios size.
	self assert: 0 equals: portfolio3 portfolios size.
	self assert: 3 equals: portfolio1 accounts size.
	self assert: 2 equals: portfolio2 portfolios size.
	self assert: 1 equals: portfolio3 portfolios size.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 19:28:13'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:28:37' prior: 50913553!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	deposit3 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self assert: 2 equals: portfolio1 portfolios size.
	self assert: 1 equals: portfolio2 portfolios size.
	self assert: 0 equals: portfolio3 portfolios size.
	self assert: 3 equals: portfolio1 accounts size.
	self assert: 2 equals: portfolio2 accounts size.
	self assert: 1 equals: portfolio3 accounts size.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 19:28:42'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:29:44' prior: 50913594!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self assert: 2 equals: portfolio1 portfolios size.
	self assert: 1 equals: portfolio2 portfolios size.
	self assert: 0 equals: portfolio3 portfolios size.
	self assert: 3 equals: portfolio1 accounts size.
	self assert: 2 equals: portfolio2 accounts size.
	self assert: 1 equals: portfolio3 accounts size.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: (portfolio1 transactions includes: deposit1).
	self assert: (portfolio1 transactions includes: deposit2).
	self assert: (portfolio1 transactions includes: deposit3).
	self assert: (portfolio1 transactions includes: withdraw1).
	self assert: (portfolio2 transactions includes: deposit2).
	self assert: (portfolio2 transactions includes: deposit3).
	self assert: (portfolio3 transactions includes: deposit3).! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 19:29:45'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:30:18' prior: 50913674!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self assert: 2 equals: portfolio1 portfolios size.
	self assert: 1 equals: portfolio2 portfolios size.
	self assert: 0 equals: portfolio3 portfolios size.
	self assert: 3 equals: portfolio1 accounts size.
	self assert: 2 equals: portfolio2 accounts size.
	self assert: 1 equals: portfolio3 accounts size.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: (portfolio1 transactions includes: deposit1).
	self assert: (portfolio1 transactions includes: deposit2).
	self assert: (portfolio1 transactions includes: deposit3).
	self assert: (portfolio1 transactions includes: withdraw1).! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 19:30:19'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:30:26' prior: 50913728!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self assert: 2 equals: portfolio1 portfolios size.
	self assert: 1 equals: portfolio2 portfolios size.
	self assert: 0 equals: portfolio3 portfolios size.
	self assert: 3 equals: portfolio1 accounts size.
	self assert: 2 equals: portfolio2 accounts size.
	self assert: 1 equals: portfolio3 accounts size.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: (portfolio1 transactions includes: deposit1).
	self assert: (portfolio1 transactions includes: deposit2).
	self assert: (portfolio1 transactions includes: deposit3).
	self assert: (portfolio1 transactions includes: withdraw1).
	self assert: (portfolio2 transactions includes: deposit2).
	self assert: (portfolio2 transactions includes: deposit3).
	self assert: (portfolio3 transactions includes: deposit3).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:30:54' prior: 50911585!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.

	self accounts
		inject: transactions
		into: [ :actualTransactions :anAccount | transactions addAll: anAccount transactions ].
		
	^ transactions! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 19:31:00'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:35:21'!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	portfolio4 addPortfolio: portfolio3.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:35:47' prior: 50913840!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	portfolio4 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio4. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 19:35:49'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 19:35:49'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:36:22' prior: 50913852!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	portfolio4 addPortfolio: portfolio3.
	! !

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 19:36:22'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 19:36:23'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:36:25' prior: 50913875!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	portfolio4 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio4. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:36:39' prior: 50913932!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	portfolio4 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio4. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:43:32' prior: 50913287!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsAFatherPortfolio: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	(self containsAPortfolioFromChildrens: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsChildrensPortfoliosFromAPortfolio: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.
	
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 19:44:16'!
containsChildrensPortfoliosFromAPortfolio: aPortfolio

	^ self portfolios anySatisfy: [ :anotherPortfolio | aPortfolio portfolios includes: anotherPortfolio ].! !

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 19:44:22'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:44:46'!
test14

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	portfolio4 addPortfolio: portfolio3.
	
	self should: [ 	portfolio4 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio4 invalidPortfolioAddedErrorDescription]! !

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/23/2021 19:44:48'!
PASSED!

!methodRemoval: PortfolioTest #test14 stamp: 'Ciro 5/23/2021 19:44:52'!
test14

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	portfolio4 addPortfolio: portfolio3.
	
	self should: [ 	portfolio4 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio4 invalidPortfolioAddedErrorDescription]!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 19:45:05'!
PASSED!

Object subclass: #Accounts
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Accounts category: 'Portfolio-Ejercicio' stamp: 'Ciro 5/23/2021 19:45:40'!
Object subclass: #Accounts
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #Accounts as: #Account stamp: 'Ciro 5/23/2021 19:46:03'!
Smalltalk renameClassNamed: #Accounts as: #Account!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ciro 5/23/2021 19:46:24'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'Ciro 5/23/2021 19:46:30'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:00:50' prior: 50913776!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self assert: 2 equals: portfolio1 portfolios size.
	self assert: 1 equals: portfolio2 portfolios size.
	self assert: 0 equals: portfolio3 portfolios size.
	self assert: 3 equals: portfolio1 accounts size.
	self assert: 2 equals: portfolio2 accounts size.
	self assert: 1 equals: portfolio3 accounts size.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered: deposit3).
	self assert: (portfolio1 hasRegistered: withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit3).
	self assert: (portfolio3 hasRegistered: deposit3).! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 20:00:52'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:03:08' prior: 50910975!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
	self assert: portfolio transactions isEmpty! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 20:03:11'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:05:19'!
test14

	| portfolio1 |
	
	portfolio1 _ Portfolio new.
	
	self should: [ 	portfolio1 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription.]! !

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/23/2021 20:05:20'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:05:47' prior: 50913969!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsAFatherPortfolio: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	(self containsAPortfolioFromChildrens: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsChildrensPortfoliosFromAPortfolio: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self aPortfolio = self) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.
	
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:05:57' prior: 50914242!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsAFatherPortfolio: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	(self containsAPortfolioFromChildrens: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsChildrensPortfoliosFromAPortfolio: aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self = aPortfolio) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	portfolios add: aPortfolio.
	
	aPortfolio addParent: self.! !

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/23/2021 20:06:02'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/23/2021 20:06:06'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:07:50'!
test15

	| portfolio1 portfolio2 account1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account1.
	
	self should: [ 	portfolio2 addPortfolio: account1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:07:53' prior: 50914336!
test15

	| portfolio1 portfolio2 account1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account1.
	
	self should: [ 	portfolio2 addPortfolio: account1 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:07:55'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:07:55'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:08:04' prior: 50914352!
test15

	| portfolio1 portfolio2 account1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account1.
	
	self should: [ 	portfolio2 addAccount: account1 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:08:07'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:08:07'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:08:25' prior: 50914373!
test15

	| portfolio1 portfolio2 account1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account1.
	
	self should: [ 	portfolio2 addAccount: account1 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidPortfolioAddedErrorDescription]! !

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:08:27'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:08:27'!
FAILURE!

!methodRemoval: PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:09:03'!
test15

	| portfolio1 portfolio2 account1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account1.
	
	self should: [ 	portfolio2 addAccount: account1 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidPortfolioAddedErrorDescription]!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:21:34'!
test15

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio5 _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.
	portfolio4 addPortfolio: portfolio1.
	portfolio5 addPortfolio: portfolio4.
	portfolio4 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	portfolio1 addAccount: account ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:21:35'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:22:05' prior: 50914429!
test15

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio5 _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.
	portfolio4 addPortfolio: portfolio1.
	portfolio5 addPortfolio: portfolio4.
	portfolio4 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	portfolio1 addAccount: account ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:22:23'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:22:56'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:24:47' prior: 50914455!
test15

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio5 _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.
	portfolio4 addPortfolio: portfolio1.
	portfolio5 addPortfolio: portfolio4.
	portfolio3 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	portfolio1 addAccount: account ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:24:49'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:24:49'!
FAILURE!

!methodRemoval: PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:27:03'!
test15

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio5 _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio2 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.
	portfolio4 addPortfolio: portfolio1.
	portfolio5 addPortfolio: portfolio4.
	portfolio3 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	portfolio1 addAccount: account ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/23/2021 20:27:07'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:31:37' prior: 50913950!
test13

	| portfolio1 portfolio2 portfolio3 account|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account.
	portfolio3 addAccount: account.
	
	self should: [ 	portfolio2 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:31:39' prior: 50914581!
test13

	| portfolio1 portfolio2 portfolio3 account|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account.
	portfolio3 addAccount: account.
	
	self should: [ 	portfolio2 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidPortfolioAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:31:53'!
test15

	| portfolio1 portfolio2 portfolio3 account|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account.
	portfolio3 addAccount: account.
	
	self should: [ 	portfolio2 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidPortfolioAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:31:37' prior: 50914599!
test13

	| portfolio1 portfolio2 portfolio3 account|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account.
	portfolio3 addAccount: account.
	
	self should: [ 	portfolio2 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:31:37' prior: 50914635!
test13

	| portfolio1 portfolio2 portfolio3 account|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account.
	portfolio3 addAccount: account.
	
	self should: [ 	portfolio2 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 19:36:39' prior: 50914653!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	portfolio4 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio4. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidPortfolioAddedErrorDescription]! !

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 20:32:25'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:32:41'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:32:41'!
FAILURE!

!methodRemoval: PortfolioTest #test15 stamp: 'Ciro 5/23/2021 20:33:20'!
test15

	| portfolio1 portfolio2 portfolio3 account|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addAccount: account.
	portfolio3 addAccount: account.
	
	self should: [ 	portfolio2 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidPortfolioAddedErrorDescription]!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/23/2021 20:33:22'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/23/2021 20:33:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 20:33:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/23/2021 20:33:22'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/23/2021 20:33:22'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/23/2021 20:33:22'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 20:33:22'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/23/2021 20:33:22'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/23/2021 20:33:22'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/23/2021 20:33:22'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/23/2021 20:33:23'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/23/2021 20:33:23'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/23/2021 20:33:23'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/23/2021 20:33:23'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:39:54'!
add: anAccount 

	self canAdd: anAccount.

	accounts add: anAccount.
	anAccount add: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:40:09' prior: 50914758!
add: anAccount 

	self canAdd: anAccount.

	accounts add: anAccount.
	anAccount add: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:40:19' prior: 50914764!
add: anAccount 

	self canAdd: anAccount.

	accounts add: anAccount.
	anAccount addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:42:29' prior: 50914770!
add: anAccount 

	self assertCanAdd: anAccount.

	accounts add: anAccount.
	anAccount addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:42:46'!
assertCanAdd: anAccount 

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:43:10' prior: 50914783!
assertCanAdd: anAccount 

	(self containsAnyAccountFrom: anAccount) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsAFatherPortfolio: anAccount) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	(self containsAPortfolioFromChildrens: anAccount) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsChildrensPortfoliosFromAPortfolio: anAccount) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self = anAccount) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:43:22' prior: 50914787!
assertCanAdd: anAccount 

	(self containsAnyAccountFrom: anAccount) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsAFatherPortfolio: anAccount) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].

	(self containsAPortfolioFromChildrens: anAccount) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self containsChildrensPortfoliosFromAPortfolio: anAccount) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self = anAccount) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].
	
	(self accounts includes: anAccount ) ifTrue: [ self error: self invalidPortfolioAddedErrorDescription ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:44:52'!
invalidAccfountAddedErrorDescription

	^ 'invalid portfolio added'! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:44:54' prior: 50914834!
invalidAccfountAddedErrorDescription

	^ 'invalid account added'! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:44:56' prior: 50914840!
invalidAccfountAddedErrorDescription

	^ 'Invalid account added'! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:45:01'!
invalidAccountAddedErrorDescription

	^ 'Invalid account added'! !

!methodRemoval: Portfolio #invalidAccfountAddedErrorDescription stamp: 'Ciro 5/23/2021 20:45:04'!
invalidAccfountAddedErrorDescription

	^ 'Invalid account added'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:45:15' prior: 50914809!
assertCanAdd: anAccount 

	(self containsAnyAccountFrom: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self containsAFatherPortfolio: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	(self containsAPortfolioFromChildrens: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self containsChildrensPortfoliosFromAPortfolio: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self accounts includes: anAccount ) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:45:22' prior: 50914266!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self containsAFatherPortfolio: aPortfolio) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	(self containsAPortfolioFromChildrens: aPortfolio) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self containsChildrensPortfoliosFromAPortfolio: aPortfolio) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self = aPortfolio) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	portfolios add: aPortfolio.
	
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:45:26' prior: 50912769!
addAccount: aReceptiveAccount 

	(self accounts includes: aReceptiveAccount ) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	accounts add: aReceptiveAccount! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:45:45' prior: 50912510!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	account3 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account3.
	portfolio1 addPortfolio: portfolio2.
	portfolio1 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio4 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 3 equals: portfolio1 accounts size.
			self assert: 2 equals: portfolio1 portfolios size.
			self assert: 1 equals: portfolio2 accounts size.
			self assert: 1 equals: portfolio3 accounts size.
			self assert: 1 equals: portfolio4 accounts size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:45:48' prior: 50913367!
test10CanNotAddAParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	
	self should: [ 	portfolio2 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 1 equals: portfolio1 portfolios size.
			self assert: 0 equals: portfolio2 portfolios size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:45:52' prior: 50913495!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 2 equals: portfolio1 portfolios size.
			self assert: 1 equals: portfolio2 portfolios size.
			self assert: 0 equals: portfolio3 portfolios size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:45:57' prior: 50914671!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	portfolio4 addPortfolio: portfolio3.
	
	self should: [ 	portfolio1 addPortfolio: portfolio4. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:46:00' prior: 50914228!
test14

	| portfolio1 |
	
	portfolio1 _ Portfolio new.
	
	self should: [ 	portfolio1 addPortfolio: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]! !

!methodRemoval: Portfolio #invalidPortfolioAddedErrorDescription stamp: 'Ciro 5/23/2021 20:46:06'!
invalidPortfolioAddedErrorDescription

	^ 'invalid portfolio added'!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:48:24' prior: 50911840!
test02AddNewReceptiveAccount

	| portfolio receptiveAccount |
	
	portfolio _ Portfolio new.
	receptiveAccount _ ReceptiveAccount new.
	portfolio addAccount: receptiveAccount.

	self assert: 0 equals: portfolio balance.
	self assert: (portfolio hasAccount: receptiveAccount).
	self assert: 1 equals: portfolio accounts size.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:48:40' prior: 50914911!
addAccount: anAccount

	self assertCanAdd: anAccount.

	accounts add: anAccount.
	anAccount addParent: self.! !

!methodRemoval: Portfolio #add: stamp: 'Ciro 5/23/2021 20:48:52'!
add: anAccount 

	self assertCanAdd: anAccount.

	accounts add: anAccount.
	anAccount addParent: self.!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:49:25' prior: 50911782!
test06AddPortfolioToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self assert: 1 equals: portfolio1 portfolios size.
	self assert: (portfolio1 hasPortfolio: portfolio2).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:49:30' prior: 50911747!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	account4 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	portfolio2 addAccount: account3.
	portfolio2 addAccount: account4.
	portfolio1 addAccount: portfolio2.
	
	self assert: 1 equals: portfolio1 portfolios size.
	self assert: 4 equals: portfolio1 accounts size.
	self assert: 0 equals: portfolio2 portfolios size.
	self assert: 2 equals: portfolio2 accounts size.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:49:35' prior: 50911948!
test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 deposit1 deposit2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio1 addAccount: portfolio2.
	
	self assert: 200 equals: portfolio1 balance.
	self assert: 100 equals: portfolio2 balance.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit2).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:49:42' prior: 50914920!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	account3 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio1 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio4 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 3 equals: portfolio1 accounts size.
			self assert: 2 equals: portfolio1 portfolios size.
			self assert: 1 equals: portfolio2 accounts size.
			self assert: 1 equals: portfolio3 accounts size.
			self assert: 1 equals: portfolio4 accounts size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:49:46' prior: 50914954!
test10CanNotAddAParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio2 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 1 equals: portfolio1 portfolios size.
			self assert: 0 equals: portfolio2 portfolios size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:49:52' prior: 50914971!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 2 equals: portfolio1 portfolios size.
			self assert: 1 equals: portfolio2 portfolios size.
			self assert: 0 equals: portfolio3 portfolios size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:49:58' prior: 50914122!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self assert: 2 equals: portfolio1 portfolios size.
	self assert: 1 equals: portfolio2 portfolios size.
	self assert: 0 equals: portfolio3 portfolios size.
	self assert: 3 equals: portfolio1 accounts size.
	self assert: 2 equals: portfolio2 accounts size.
	self assert: 1 equals: portfolio3 accounts size.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered: deposit3).
	self assert: (portfolio1 hasRegistered: withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit3).
	self assert: (portfolio3 hasRegistered: deposit3).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:50:06' prior: 50914993!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	portfolio4 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio4. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:50:11' prior: 50915011!
test14

	| portfolio1 |
	
	portfolio1 _ Portfolio new.
	
	self should: [ 	portfolio1 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]! !

!methodRemoval: Portfolio #addPortfolio: stamp: 'Ciro 5/23/2021 20:50:53'!
addPortfolio: aPortfolio

	(self containsAnyAccountFrom: aPortfolio) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self containsAFatherPortfolio: aPortfolio) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	(self containsAPortfolioFromChildrens: aPortfolio) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self containsChildrensPortfoliosFromAPortfolio: aPortfolio) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self = aPortfolio) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	portfolios add: aPortfolio.
	
	aPortfolio addParent: self.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:51:23' prior: 50911887!
accounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection  new.
	
	allAccounts addAll: accounts copy.
	
	portfolios do: [ :anAccount | allAccounts addAll: anAccount accounts ].
	
	^ allAccounts
		
	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:51:42' prior: 50915289!
accounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection  new.
	
	allAccounts addAll: accounts copy.
	
	accounts do: [ :anAccount | allAccounts addAll: anAccount accounts ].
	
	^ allAccounts
		
	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:53:17' prior: 50913304!
containsAPortfolioFromChildrens: aPortfolio

	^ self accounts anySatisfy: [ :anotherPortfolio | aPortfolio = anotherPortfolio ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:53:27' prior: 50913990!
containsChildrensPortfoliosFromAPortfolio: aPortfolio

	^ self accounts anySatisfy: [ :anotherPortfolio | aPortfolio accounts includes: anotherPortfolio ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:53:36' prior: 50911801!
hasPortfolio: aPortfolio 

	^ accounts includes: aPortfolio! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:54:51' prior: 50915053!
test06AddPortfolioToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self assert: 1 equals: portfolio1 accounts size.
	self assert: (portfolio1 hasPortfolio: portfolio2).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:54:55' prior: 50915064!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	account4 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	portfolio2 addAccount: account3.
	portfolio2 addAccount: account4.
	portfolio1 addAccount: portfolio2.
	
	self assert: 1 equals: portfolio1 accounts size.
	self assert: 4 equals: portfolio1 accounts size.
	self assert: 0 equals: portfolio2 accounts size.
	self assert: 2 equals: portfolio2 accounts size.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:55:03' prior: 50915114!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	account3 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio1 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio4 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 3 equals: portfolio1 accounts size.
			self assert: 2 equals: portfolio1 accounts size.
			self assert: 1 equals: portfolio2 accounts size.
			self assert: 1 equals: portfolio3 accounts size.
			self assert: 1 equals: portfolio4 accounts size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:55:08' prior: 50915148!
test10CanNotAddAParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio2 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 1 equals: portfolio1 accounts size.
			self assert: 0 equals: portfolio2 accounts size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:55:14' prior: 50915165!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 2 equals: portfolio1 accounts size.
			self assert: 1 equals: portfolio2 accounts size.
			self assert: 0 equals: portfolio3 accounts size.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:55:19' prior: 50915187!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self assert: 2 equals: portfolio1 accounts size.
	self assert: 1 equals: portfolio2 accounts size.
	self assert: 0 equals: portfolio3 accounts size.
	self assert: 3 equals: portfolio1 accounts size.
	self assert: 2 equals: portfolio2 accounts size.
	self assert: 1 equals: portfolio3 accounts size.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered: deposit3).
	self assert: (portfolio1 hasRegistered: withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit3).
	self assert: (portfolio3 hasRegistered: deposit3).! !

!methodRemoval: Portfolio #portfolios stamp: 'Ciro 5/23/2021 20:55:28'!
portfolios

	| allPortfolios |
	
	allPortfolios _ OrderedCollection  new.
	
	allPortfolios addAll: portfolios copy.
	
	portfolios do: [ :aPortfolio | allPortfolios addAll: aPortfolio portfolios ].
	
	^ allPortfolios!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/23/2021 20:55:50' prior: 50915330!
test06AddPortfolioToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self assert: 1 equals: portfolio1 accounts size.
	self assert: (portfolio1 hasAccount: portfolio2).! !

!methodRemoval: Portfolio #hasPortfolio: stamp: 'Ciro 5/23/2021 20:55:56'!
hasPortfolio: aPortfolio 

	^ accounts includes: aPortfolio!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:56:05' prior: 50910990!
hasAccount: anAccount
	
	^ accounts includes: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 20:56:13' prior: 50912972 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	parents _ OrderedCollection  new.! !

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'Ciro 5/23/2021 20:56:23'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:00:47' prior: 50911978!
balance
	
	^ accounts sum:[ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:08:43'!
accountsSize
	
	^ accounts size
		
	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:12:58' prior: 50914862!
assertCanAdd: anAccount 

	(self childrenContains: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self parentsContains: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:13:59'!
childrenContains: anAccount

	^ accounts anySatisfy: [ :anotherAccount | anAccount = anotherAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:14:11'!
parentsContains: anAccount

	^ parents anySatisfy: [ :anotherAccount | anAccount = anotherAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:15:36' prior: 50915548!
assertCanAdd: anAccount 

	(self childrenContains: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self parentsContains: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:17:01' prior: 50915571!
assertCanAdd: anAccount 

	(self childrenContains: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self parentsContains: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].
	
	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:17:34' prior: 50915558!
childrenContains: anAccount

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	^ accounts anySatisfy: [ :anotherAccount | anAccount childrenContains: anotherAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:17:41' prior: 50915599!
childrenContains: anAccount

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	^ accounts anySatisfy: [ :anotherAccount | anAccount childrenContains: anotherAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:18:51' prior: 50915609!
childrenContains: anAccount

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	^ accounts anySatisfy: [ :anotherAccount | anotherAccount childrenContains: anAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:19:21' prior: 50915619!
childrenContains: anAccount

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	accounts do: [ :anotherAccount | anotherAccount childrenContains: anAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:19:50' prior: 50915564!
parentsContains: anAccount

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	parents do: [ :anotherAccount | anotherAccount parentsContains: anAccount ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:20:14' prior: 50915585!
assertCanAdd: anAccount 

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	(self childrenContains: anAccount).
	
	(self parentsContains: anAccount)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:20:20' prior: 50915629!
childrenContains: anAccount

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	accounts do: [ :anotherAccount | anotherAccount childrenContains: anAccount ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/23/2021 21:20:24' prior: 50915639!
parentsContains: anAccount

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	parents do: [ :anotherAccount | anotherAccount parentsContains: anAccount ]! !

----QUIT----(23 May 2021 21:27:15) CuisUniversity-4532.image priorSource: 18592297!

----STARTUP---- (24 May 2021 15:36:52) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!

!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 15:38:14' prior: 50915649!
assertCanAdd: anAccount 

	self checkFromRoot: anAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 15:38:18' prior: 50915685!
assertCanAdd: anAccount 

	self checkFromRoot: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 15:47:52'!
checkFromRoot: anAccount 

	self roots anySatisfy: [ :aRoot | aRoot contains: anAccount ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 15:48:25' prior: 50915690!
assertCanAdd: anAccount 

	(self checkFromRoot: anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 15:51:37'!
roots

	| allRoots |
	
	allRoots _ OrderedCollection new.

	self addRoots: allRoots.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 15:53:13'!
addRoots: aSequenceOfRoots

	(self parents isEmpty) ifTrue: [ aSequenceOfRoots add: self ].
	self parents do: [ :aParent | aParent addRoots: aSequenceOfRoots ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 15:53:47' prior: 50915708!
roots

	| allRoots |
	
	allRoots _ OrderedCollection new.

	^ self addRoots: allRoots.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 15:53:54' prior: 50915723!
roots

	| allRoots |
	
	allRoots _ OrderedCollection new.

	self addRoots: allRoots.
	
	^ allRoots.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 15:56:57'!
contains: anAccount 

	(self = anAccount ) ifTrue: [^ true].

	self accounts anySatisfy: [ :anotherAccount | anotherAccount includes: anAccount ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 15:57:18' prior: 50915735!
contains: anAccount 

	(self = anAccount ) ifTrue: [^ true].

	self accounts do: [ :anotherAccount | anotherAccount contains: anAccount ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 15:57:38'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 15:58:25'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 15:58:25'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:03:17'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:03:32'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:08:26' prior: 50915714!
addRoots: aSequenceOfRoots

	(parents isEmpty) ifTrue: [ aSequenceOfRoots add: self ].
	parents do: [ :aParent | aParent addRoots: aSequenceOfRoots ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:09:09' prior: 50915767!
addRoots: aSequenceOfRoots

 	parents ifEmpty: [ aSequenceOfRoots add: self ].
	parents do: [ :aParent | aParent addRoots: aSequenceOfRoots ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:09:52' prior: 50915775!
addRoots: aSequenceOfRoots

 	parents ifEmpty: [ aSequenceOfRoots add: self ]
		ifNotEmpty: [ parents do: [ :aParent | aParent addRoots: aSequenceOfRoots ]]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:12:47' prior: 50915743!
contains: anAccount 

	accounts anySatisfy: [ :anotherAccount | anotherAccount contains: anAccount ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:13:46' prior: 50915791!
contains: anAccount 

	( accounts includes: anAccount ) ifTrue: [^ true]
		ifFalse: [ accounts anySatisfy: [ :anotherAccount | anotherAccount contains: anAccount ]]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:14:00' prior: 50915798!
contains: anAccount 

	( accounts includes: anAccount ) ifTrue: [^ true]
		ifFalse: [ ^ accounts anySatisfy: [ :anotherAccount | anotherAccount contains: anAccount ]]! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:14:04'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:14:04'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:16:22' prior: 50915807!
contains: anAccount 

	self = anAccount or: [ accounts anySatisfy: [ :anotherAccount | anotherAccount contains: anAccount ]]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:16:28' prior: 50915823!
contains: anAccount 

	^ self = anAccount or: [ accounts anySatisfy: [ :anotherAccount | anotherAccount contains: anAccount ]]! !
!Account methodsFor: 'no messages' stamp: 'Ciro 5/24/2021 16:16:55'!
contains: anAccount

	^ self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:17:06' prior: 50915837!
contains: anAccount

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ciro 5/24/2021 16:17:18' overrides: 50915842!
contains: anAccount

	^ self = anAccount ! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:17:26'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:17:26'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:18:38' prior: 50915830 overrides: 50915842!
contains: anAccount 

	^ self = anAccount or: [ accounts anySatisfy: [ :anotherAccount | ( anotherAccount contains: anAccount )
			or: [ anAccount contains: anotherAccount] ]]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:18:39' prior: 50915859 overrides: 50915842!
contains: anAccount 

	^ self = anAccount or: [ accounts anySatisfy: [ :anotherAccount | ( anotherAccount contains: anAccount )
			or: [ anAccount contains: anotherAccount ] ]]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:18:41' prior: 50915869 overrides: 50915842!
contains: anAccount 

	^ self = anAccount or: [ accounts anySatisfy: [ :anotherAccount | ( anotherAccount contains: anAccount )
			or: [ anAccount contains: anotherAccount ]]]! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:18:53'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:18:53'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:19:52'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:19:57'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:19:57'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:21:04'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:21:04'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:21:16'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:22:15' prior: 50915879 overrides: 50915842!
contains: anAccount 

	^ self = anAccount or: [ accounts anySatisfy: [ :anotherAccount | anotherAccount contains: anAccount]]! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:22:24'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:22:24'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 16:23:47'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:25:47' prior: 50915913 overrides: 50915842!
contains: anAccount 

	^ self = anAccount or: [ accounts anySatisfy: [ :anotherAccount | (anotherAccount contains: anAccount)]]! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:25:57'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:25:57'!
ERROR!

self = anAccount!

[ accounts anySatisfy: [ :anotherAccount | (anotherAccount contains: anAccount)]]!

accounts anySatisfy: [ :anotherAccount | (anotherAccount contains: anAccount)]!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:29:24' prior: 50915695!
checkFromRoot: anAccount 

	^ self roots anySatisfy: [ :aRoot | aRoot contains: anAccount ]! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:29:30'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:29:30'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:29:48' prior: 50912966!
addParent: anAccount

	parents add: anAccount! !
!Account methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:30:13'!
addParent: anAccount

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Ciro 5/24/2021 16:30:21' overrides: 50915966!
addParent: anAccount! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:30:26'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:30:26'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:31:26'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:31:26'!
ERROR!
!Account methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:33:02'!
accounts
	
	self subclassResponsibility 
		! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ciro 5/24/2021 16:33:11' overrides: 50915987!
accounts
! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:33:21'!
ERROR!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:33:21'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:34:29'!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection  new.
	
	allAccounts addAll: accounts copy.
	
	accounts do: [ :anAccount | allAccounts addAll: anAccount accounts ].
	
	^ allAccounts
		
	
! !

!methodRemoval: Portfolio #allAccounts stamp: 'Ciro 5/24/2021 16:35:22'!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection  new.
	
	allAccounts addAll: accounts copy.
	
	accounts do: [ :anAccount | allAccounts addAll: anAccount accounts ].
	
	^ allAccounts
		
	
!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 16:35:37' prior: 50915027!
test02AddNewReceptiveAccount

	| portfolio receptiveAccount |
	
	portfolio _ Portfolio new.
	receptiveAccount _ ReceptiveAccount new.
	portfolio addAccount: receptiveAccount.

	self assert: 0 equals: portfolio balance.
	self assert: (portfolio hasAccount: receptiveAccount).
	self assert: 1 equals: portfolio accountsSize.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:35:39'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 16:36:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:36:11'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:36:11'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:37:24' prior: 50915299 overrides: 50915987!
accounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection  new.
	
	allAccounts addAll: accounts copy.
	
	accounts do: [ :anAccount | allAccounts addAll: anAccount accounts ].
	
	^ allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:38:14' prior: 50916047 overrides: 50915987!
accounts
	
	^ accounts copy! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:39:38'!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection new.
	
	allAccounts addAll: self accounts.
	
	self accounts do: [ :anAccount | allAccounts addAll: anAccount accounts ].
	
	^ allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:39:50' prior: 50911986!
hasRegistered: anAccountTransaction

	| allAccounts |
	
	allAccounts _ self allAccounts.
	
	^ allAccounts anySatisfy: [ :anAccount | anAccount hasRegistered: anAccountTransaction ]! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:40:30'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:40:30'!
ERROR!
!Account methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:41:20'!
hasRegistered: aTransaction

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:42:10'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:42:10'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ciro 5/24/2021 16:44:12' prior: 50915992 overrides: 50915987!
accounts

	^ self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:46:42' prior: 50916061!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection new.
	
	allAccounts addAll: self accounts.
	
	self accounts do: [ :anAccount | allAccounts addChildren: anAccount ].
	
	^ allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:46:49' prior: 50916104!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection new.
	
	allAccounts addAll: self accounts.
	
	accounts do: [ :anAccount | allAccounts addChildren: anAccount ].
	
	^ allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:46:55' prior: 50916114!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection new.
	
	allAccounts addAll: accounts.
	
	accounts do: [ :anAccount | allAccounts addChildren: anAccount ].
	
	^ allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:47:01' prior: 50916124!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection new.
	
	allAccounts addAll: self accounts.
	
	accounts do: [ :anAccount | allAccounts addChildren: anAccount ].
	
	^ allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:47:25' prior: 50916133!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection new.
	
	allAccounts addAll: self accounts.
	
	accounts do: [ :anAccount | anAccount addChildren: allAccounts ].
	
	^ allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:48:06'!
addChildren: aSequenceOfAccounts
	
	aSequenceOfAccounts addAll: self accounts.
	
	accounts do: [ :anAccount | anAccount addChildren: aSequenceOfAccounts ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:48:30'!
addChildrenTo: aSequenceOfAccounts
	
	aSequenceOfAccounts addAll: self accounts.
	
	accounts do: [ :anAccount | anAccount addChildren: aSequenceOfAccounts ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:48:39' prior: 50916143!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection new.
	
	allAccounts addAll: self accounts.
	
	accounts do: [ :anAccount | anAccount addChildrenTo: allAccounts ].
	
	^ allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:48:49' prior: 50916160!
addChildrenTo: aSequenceOfAccounts
	
	aSequenceOfAccounts addAll: self accounts.
	
	accounts do: [ :anAccount | anAccount addChildrenTo: aSequenceOfAccounts ]! !

!methodRemoval: Portfolio #addChildren: stamp: 'Ciro 5/24/2021 16:48:56'!
addChildren: aSequenceOfAccounts
	
	aSequenceOfAccounts addAll: self accounts.
	
	accounts do: [ :anAccount | anAccount addChildren: aSequenceOfAccounts ]!
!Account methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:49:12'!
addChildrenTo: aSequenceOfAccounts

	self subclassResponsibility! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ciro 5/24/2021 16:49:21' overrides: 50916193!
addChildrenTo: aSequenceOfAccounts
	
	^ self! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ciro 5/24/2021 16:49:57' prior: 50916199 overrides: 50916193!
addChildrenTo: aSequenceOfAccounts
	
	^ aSequenceOfAccounts add: self! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ciro 5/24/2021 16:50:01' prior: 50916204 overrides: 50916193!
addChildrenTo: aSequenceOfAccounts
	
	aSequenceOfAccounts add: self! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:50:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:50:12'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 16:50:22'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:50:35' prior: 50913828!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.

	self allAccounts 
		inject: transactions
		into: [ :actualTransactions :anAccount | transactions addAll: anAccount transactions ].
		
	^ transactions! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 16:50:54'!
FAILURE!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 16:50:54'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:51:42' prior: 50916168!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection new.
	
	accounts do: [ :anAccount | anAccount addChildrenTo: allAccounts ].
	
	^ allAccounts! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:51:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:51:50'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 16:51:53'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 16:51:58'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 16:52:14' prior: 50915341!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	account4 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	portfolio2 addAccount: account3.
	portfolio2 addAccount: account4.
	portfolio1 addAccount: portfolio2.
	
	self assert: 1 equals: portfolio1 allAccounts size.
	self assert: 4 equals: portfolio1 allAccounts size.
	self assert: 0 equals: portfolio2 allAccounts size.
	self assert: 2 equals: portfolio2 allAccounts size.! !

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:52:16'!
FAILURE!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:52:16'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 16:52:54' prior: 50916265!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	account4 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	portfolio2 addAccount: account3.
	portfolio2 addAccount: account4.
	portfolio1 addAccount: portfolio2.
	
	self assert: 6 equals: portfolio1 allAccounts size.
	self assert: 2 equals: portfolio2 allAccounts size.! !

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:52:57'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 16:53:58' prior: 50916298!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	account4 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	portfolio2 addAccount: account3.
	portfolio2 addAccount: account4.
	portfolio1 addAccount: portfolio2.
	
	self assert: 6 equals: portfolio1 allAccounts size.
	self assert: 2 equals: portfolio2 allAccounts size.
	self assert: (portfolio1 hasAccount: account1).
	self assert: (portfolio1 hasAccount: account2).
	self assert: (portfolio1 hasAccount: account3).
	self assert: (portfolio1 hasAccount: account4).
	self assert: (portfolio1 hasAccount: portfolio2).
	self assert: (portfolio2 hasAccount: account3).
	self assert: (portfolio2 hasAccount: account4).! !

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:54:00'!
FAILURE!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:54:00'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:54:23' prior: 50915513!
hasAccount: anAccount
	
	^ self allAccounts includes: anAccount! !

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:54:48'!
FAILURE!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:54:48'!
FAILURE!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:55:44'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:56:41' prior: 50916178 overrides: 50916193!
addChildrenTo: aSequenceOfAccounts
	
	aSequenceOfAccounts add: self.
	
	accounts do: [ :anAccount | anAccount addChildrenTo: aSequenceOfAccounts ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 16:56:49'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 16:56:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:56:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 16:56:58'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 16:57:00'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:57:01'!
FAILURE!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:57:01'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 16:57:10' prior: 50916324!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	account4 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	portfolio2 addAccount: account3.
	portfolio2 addAccount: account4.
	portfolio1 addAccount: portfolio2.
	
	self assert: 5 equals: portfolio1 allAccounts size.
	self assert: 2 equals: portfolio2 allAccounts size.
	self assert: (portfolio1 hasAccount: account1).
	self assert: (portfolio1 hasAccount: account2).
	self assert: (portfolio1 hasAccount: account3).
	self assert: (portfolio1 hasAccount: account4).
	self assert: (portfolio1 hasAccount: portfolio2).
	self assert: (portfolio2 hasAccount: account3).
	self assert: (portfolio2 hasAccount: account4).! !

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:57:12'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 16:57:16'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 16:57:18'!
FAILURE!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 16:57:18'!
FAILURE!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 16:58:07'!
FAILURE!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 16:58:07'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 16:59:48' prior: 50915366!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	account3 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio1 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio4 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 5 equals: portfolio1 allAccounts size.
			self assert: 1 equals: portfolio2 allAccounts size.
			self assert: 1 equals: portfolio3 allAccounts size.
			self assert: 1 equals: portfolio4 allAccounts size.]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:00:04' prior: 50915658!
childrenContains: anAccount

	(self = anAccount) ifTrue: [ ^ self error: self invalidAccountAddedErrorDescription ].

	accounts do: [ :anotherAccount | anotherAccount childrenContains: anAccount ]! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:00:09'!
FAILURE!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:00:09'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:00:16' prior: 50916505!
childrenContains: anAccount

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	accounts do: [ :anotherAccount | anotherAccount childrenContains: anAccount ]! !

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:00:52'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:00:52'!
FAILURE!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:00:56'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:01:01'!
FAILURE!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:01:01'!
FAILURE!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:01:25'!
FAILURE!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:01:51'!
FAILURE!

self = anAccount!

accounts anySatisfy: [ :anotherAccount | (anotherAccount contains: anAccount)]!

accounts anySatisfy: [ :anotherAccount | (anotherAccount contains: anAccount)]!

accounts anySatisfy: [ :anotherAccount | (anotherAccount contains: anAccount)]!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:05:29' prior: 50915931 overrides: 50915842!
contains: anAccount 

	^ self = anAccount or: [ accounts anySatisfy: [ :anotherAccount | (anotherAccount contains: anAccount) 
			or: [anAccount contains: anotherAccount]]]! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:05:38'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:05:57'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:06:00'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:06:00'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:06:13' prior: 50915400!
test10CanNotAddAParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio2 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 2 equals: portfolio1 allAccounts size.
			self assert: 0 equals: portfolio2 allAccounts size.]! !

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:06:16'!
FAILURE!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:06:16'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:06:23' prior: 50916584!
test10CanNotAddAParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio2 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 1 equals: portfolio1 allAccounts size.
			self assert: 0 equals: portfolio2 allAccounts size.]! !

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:06:25'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:06:35' prior: 50915417!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 2 equals: portfolio1 allAccounts size.
			self assert: 1 equals: portfolio2 allAccounts size.
			self assert: 0 equals: portfolio3 allAccounts size.]! !

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:06:52'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:07:52' prior: 50915439!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self assert: 5 equals: portfolio1 allAccounts size.
	self assert: 3 equals: portfolio2 allAccounts size.
	self assert: 1 equals: portfolio3 allAccounts size.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered: deposit3).
	self assert: (portfolio1 hasRegistered: withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit3).
	self assert: (portfolio3 hasRegistered: deposit3).! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:07:53'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:08:05'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:08:13'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:08:17'!
PASSED!

!methodRemoval: Portfolio #parentsContains: stamp: 'Ciro 5/24/2021 17:09:17'!
parentsContains: anAccount

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	parents do: [ :anotherAccount | anotherAccount parentsContains: anAccount ]!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:09:20'!
PASSED!

!methodRemoval: Portfolio #containsChildrensPortfoliosFromAPortfolio: stamp: 'Ciro 5/24/2021 17:09:32'!
containsChildrensPortfoliosFromAPortfolio: aPortfolio

	^ self accounts anySatisfy: [ :anotherPortfolio | aPortfolio accounts includes: anotherPortfolio ].!

!methodRemoval: Portfolio #containsAnyAccountFrom: stamp: 'Ciro 5/24/2021 17:09:36'!
containsAnyAccountFrom: aPortfolio

	^ self accounts anySatisfy: [ :anAccount | aPortfolio accounts includes: anAccount ].!

!methodRemoval: Portfolio #containsAPortfolioFromChildrens: stamp: 'Ciro 5/24/2021 17:09:39'!
containsAPortfolioFromChildrens: aPortfolio

	^ self accounts anySatisfy: [ :anotherPortfolio | aPortfolio = anotherPortfolio ].!

!methodRemoval: Portfolio #containsAFatherPortfolio: stamp: 'Ciro 5/24/2021 17:09:42'!
containsAFatherPortfolio: aPortfolio

	^ self parents anySatisfy: [ :anotherPortfolio | aPortfolio = anotherPortfolio ].!

!methodRemoval: Portfolio #childrenContains: stamp: 'Ciro 5/24/2021 17:09:51'!
childrenContains: anAccount

	(self = anAccount) ifTrue: [ self error: self invalidAccountAddedErrorDescription ].

	accounts do: [ :anotherAccount | anotherAccount childrenContains: anAccount ]!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:09:54'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:10:36' prior: 50916019!
test02AddNewReceptiveAccount

	| portfolio receptiveAccount |
	
	portfolio _ Portfolio new.
	receptiveAccount _ ReceptiveAccount new.
	portfolio addAccount: receptiveAccount.

	self assert: 0 equals: portfolio balance.
	self assert: (portfolio hasAccount: receptiveAccount).
	self assert: 1 equals: portfolio allAccounts size.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:10:38'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:10:39'!
PASSED!

!methodRemoval: Portfolio #accountsSize stamp: 'Ciro 5/24/2021 17:10:46'!
accountsSize
	
	^ accounts size
		
	
!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:10:59' prior: 50916383 overrides: 50916193!
addChildrenTo: aSequenceOfAccounts
	
	aSequenceOfAccounts add: self copy.
	
	accounts do: [ :anAccount | anAccount addChildrenTo: aSequenceOfAccounts ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ciro 5/24/2021 17:11:06' prior: 50916210 overrides: 50916193!
addChildrenTo: aSequenceOfAccounts
	
	aSequenceOfAccounts add: self copy! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:11:09'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:11:09'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:11:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:11:09'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:11:09'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:11:09'!
FAILURE!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:11:09'!
FAILURE!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:11:09'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:11:09'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:11:09'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:11:10'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:11:10'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:11:10'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:11:10'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:11:21'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:11:21'!
FAILURE!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:11:21'!
FAILURE!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:11:21'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:11:44' prior: 50915497!
test06AddPortfolioToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self assert: 1 equals: portfolio1 allAccounts size.
	self assert: (portfolio1 hasAccount: portfolio2).! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:11:45'!
FAILURE!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:11:45'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:12:11' prior: 50916947 overrides: 50916193!
addChildrenTo: aSequenceOfAccounts
	
	aSequenceOfAccounts add: self.
	
	accounts do: [ :anAccount | anAccount addChildrenTo: aSequenceOfAccounts ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ciro 5/24/2021 17:12:20' prior: 50916956 overrides: 50916193!
addChildrenTo: aSequenceOfAccounts
	
	aSequenceOfAccounts add: self! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:12:23'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:13:29' prior: 50916365!
hasAccount: anAccount
	
	^ self allAccounts includes: anAccount! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:14:04' prior: 50916884!
test02AddNewReceptiveAccount

	| portfolio receptiveAccount |
	
	portfolio _ Portfolio new.
	receptiveAccount _ ReceptiveAccount new.
	portfolio addAccount: receptiveAccount.

	self assert: 0 equals: portfolio balance.
	self assert: (portfolio hasAccount: receptiveAccount).
	self assert: 1 equals: portfolio allAccountsSize.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:14:43' prior: 50916243!
allAccounts
	
	^ self allAccounts copy! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:14:46' prior: 50917148!
allAccounts
	
	^ self allAccounts size! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:15:30'!
allAccountsSize
	
	^ self allAccounts size! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:14:43' prior: 50917153!
allAccounts
	
	^ self allAccounts copy! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:14:43' prior: 50917162!
allAccounts
	
	^ self allAccounts copy! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 16:51:42' prior: 50917167!
allAccounts
	
	| allAccounts |
	
	allAccounts _ OrderedCollection new.
	
	accounts do: [ :anAccount | anAccount addChildrenTo: allAccounts ].
	
	^ allAccounts! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:15:58'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:16:32' prior: 50917051!
test06AddPortfolioToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self assert: 1 equals: portfolio1 allAccountsSize.
	self assert: (portfolio1 hasAccount: portfolio2).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:16:36' prior: 50916419!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	account3 _ ReceptiveAccount new.
	account4 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	portfolio2 addAccount: account3.
	portfolio2 addAccount: account4.
	portfolio1 addAccount: portfolio2.
	
	self assert: 5 equals: portfolio1 allAccountsSize.
	self assert: 2 equals: portfolio2 allAccountsSize.
	self assert: (portfolio1 hasAccount: account1).
	self assert: (portfolio1 hasAccount: account2).
	self assert: (portfolio1 hasAccount: account3).
	self assert: (portfolio1 hasAccount: account4).
	self assert: (portfolio1 hasAccount: portfolio2).
	self assert: (portfolio2 hasAccount: account3).
	self assert: (portfolio2 hasAccount: account4).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:16:47' prior: 50916472!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	account3 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio4 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio1 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio4 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 5 equals: portfolio1 allAccountsSize.
			self assert: 1 equals: portfolio2 allAccountsSize.
			self assert: 1 equals: portfolio3 allAccountsSize.
			self assert: 1 equals: portfolio4 allAccountsSize.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:16:54' prior: 50916607!
test10CanNotAddAParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio2 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 1 equals: portfolio1 allAccountsSize.
			self assert: 0 equals: portfolio2 allAccountsSize.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:17:02' prior: 50916627!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 2 equals: portfolio1 allAccountsSize.
			self assert: 1 equals: portfolio2 allAccountsSize.
			self assert: 0 equals: portfolio3 allAccountsSize.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:17:08' prior: 50916653!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self assert: 5 equals: portfolio1 allAccountsSize.
	self assert: 3 equals: portfolio2 allAccountsSize.
	self assert: 1 equals: portfolio3 allAccountsSize.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered: deposit3).
	self assert: (portfolio1 hasRegistered: withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit3).
	self assert: (portfolio3 hasRegistered: deposit3).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:17:16'!
PASSED!
!Account methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:18:36'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:19:09'!
transactions

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:19:13'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:19:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:19:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:19:13'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:19:13'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:19:13'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:19:13'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:19:13'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:19:14'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:19:14'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:19:14'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:19:14'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:19:14'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:19:14'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:20:17'!
test15

	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	
	self should: [ 	portfolio1 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:20:51' prior: 50917483!
test15

	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio1 addAccount: portfolio2.
	portfolio1 addAccount: account.
	
	self should: [ 	portfolio2 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]! !

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:20:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:20:59' prior: 50917497!
test15

	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio1 addAccount: portfolio2.
	portfolio1 addAccount: account.
	
	self should: [ 	portfolio2 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidAccountAddedErrorDescription.]! !

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:21:02'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:22:00'!
test16

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	portfolio5 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio2 addAccount: portfolio1.
	portfolio3 addAccount: portfolio2.
	portfolio4 addAccount: portfolio1.
	portfolio5 addAccount: portfolio4.
	portfolio3 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	portfolio1 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]! !

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:22:02'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:22:35'!
test17

	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio1 addAccount: portfolio2.
	portfolio3 addAccount: portfolio2.
	portfolio1 addAccount: account.
	portfolio3 addAccount: account.
	
	self should: [ 	portfolio2 addAccount: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:22:38' prior: 50917559!
test17

	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio1 addAccount: portfolio2.
	portfolio3 addAccount: portfolio2.
	portfolio1 addAccount: account.
	portfolio3 addAccount: account.
	
	self should: [ 	portfolio2 addAccount: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidAccountAddedErrorDescription.]! !
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:22:39'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (14 to: 21)
		declaredAt: (14 to: 21))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{23 to: 26. 62 to: 69}.! !
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	([
	(self coverAll:
		{76 to: 79}) allAccounts ] valueCoveringAll:
		{81 to: 91})
		inject:
			(transactions
				cover: (104 to: 115)
				declaredAt: (18 to: 29))
		into: [ :actualTransactions :anAccount |
			[
			(transactions
				cover: (160 to: 171)
				declaredAt: (18 to: 29)) addAll:
				([
				(anAccount
					cover: (181 to: 189)
					declaredAt: (148 to: 156)) transactions ] valueCoveringAll:
					{191 to: 202}) ] valueCoveringAll:
				{173 to: 179} ]] valueCoveringAll:
		{96 to: 102. 119 to: 123}.
	^ transactions
		cover: (213 to: 224)
		declaredAt: (18 to: 29).! !
!Behavior method!
allAccounts
	| allAccounts |
	(allAccounts _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(accounts
		cover: (75 to: 82)
		declaredAt: (75 to: 82)) do: [ :anAccount |
		[
		(anAccount
			cover: (103 to: 111)
			declaredAt: (91 to: 99)) addChildrenTo:
			(allAccounts
				cover: (128 to: 138)
				declaredAt: (18 to: 28)) ] valueCoveringAll:
			{113 to: 126} ]] valueCoveringAll:
		{84 to: 86}.
	^ allAccounts
		cover: (148 to: 158)
		declaredAt: (18 to: 28).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:22:50'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !
!Behavior method!
hasAccount: anAccount
	^ [
	([
	(self coverAll:
		{28 to: 31}) allAccounts ] valueCoveringAll:
		{33 to: 43}) includes:
		(anAccount
			cover: (55 to: 63)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{45 to: 53}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.! !
!Behavior method!
allAccountsSize
	^ [
	([
	(self coverAll:
		{22 to: 25}) allAccounts ] valueCoveringAll:
		{27 to: 37}) size ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !
!Behavior method!
hasRegistered: anAccountTransaction
	| allAccounts |
	(allAccounts _ [
	(self coverAll:
		{72 to: 75}) allAccounts ] valueCoveringAll:
		{77 to: 87})
		cover: (58 to: 68)
		declaredAt: (41 to: 51).
	^ [
	(allAccounts
		cover: (95 to: 105)
		declaredAt: (41 to: 51)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (134 to: 142)
			declaredAt: (122 to: 130)) hasRegistered:
			(anAccountTransaction
				cover: (159 to: 178)
				declaredAt: (16 to: 35)) ] valueCoveringAll:
			{144 to: 157} ]] valueCoveringAll:
		{107 to: 117}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.
	[
	(accounts
		cover: (73 to: 80)
		declaredAt: (73 to: 80)) do: [ :anAccount |
		[
		(anAccount
			cover: (101 to: 109)
			declaredAt: (89 to: 97)) addChildrenTo:
			(aSequenceOfAccounts
				cover: (126 to: 144)
				declaredAt: (16 to: 34)) ] valueCoveringAll:
			{111 to: 124} ]] valueCoveringAll:
		{82 to: 84}.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) -
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:22:51'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (14 to: 21)
		declaredAt: (14 to: 21))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{23 to: 26. 62 to: 69}.! !
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	([
	(self coverAll:
		{76 to: 79}) allAccounts ] valueCoveringAll:
		{81 to: 91})
		inject:
			(transactions
				cover: (104 to: 115)
				declaredAt: (18 to: 29))
		into: [ :actualTransactions :anAccount |
			[
			(transactions
				cover: (160 to: 171)
				declaredAt: (18 to: 29)) addAll:
				([
				(anAccount
					cover: (181 to: 189)
					declaredAt: (148 to: 156)) transactions ] valueCoveringAll:
					{191 to: 202}) ] valueCoveringAll:
				{173 to: 179} ]] valueCoveringAll:
		{96 to: 102. 119 to: 123}.
	^ transactions
		cover: (213 to: 224)
		declaredAt: (18 to: 29).! !
!Behavior method!
allAccounts
	| allAccounts |
	(allAccounts _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(accounts
		cover: (75 to: 82)
		declaredAt: (75 to: 82)) do: [ :anAccount |
		[
		(anAccount
			cover: (103 to: 111)
			declaredAt: (91 to: 99)) addChildrenTo:
			(allAccounts
				cover: (128 to: 138)
				declaredAt: (18 to: 28)) ] valueCoveringAll:
			{113 to: 126} ]] valueCoveringAll:
		{84 to: 86}.
	^ allAccounts
		cover: (148 to: 158)
		declaredAt: (18 to: 28).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !
!Behavior method!
hasAccount: anAccount
	^ [
	([
	(self coverAll:
		{28 to: 31}) allAccounts ] valueCoveringAll:
		{33 to: 43}) includes:
		(anAccount
			cover: (55 to: 63)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{45 to: 53}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.! !
!Behavior method!
allAccountsSize
	^ [
	([
	(self coverAll:
		{22 to: 25}) allAccounts ] valueCoveringAll:
		{27 to: 37}) size ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !
!Behavior method!
hasRegistered: anAccountTransaction
	| allAccounts |
	(allAccounts _ [
	(self coverAll:
		{72 to: 75}) allAccounts ] valueCoveringAll:
		{77 to: 87})
		cover: (58 to: 68)
		declaredAt: (41 to: 51).
	^ [
	(allAccounts
		cover: (95 to: 105)
		declaredAt: (41 to: 51)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (134 to: 142)
			declaredAt: (122 to: 130)) hasRegistered:
			(anAccountTransaction
				cover: (159 to: 178)
				declaredAt: (16 to: 35)) ] valueCoveringAll:
			{144 to: 157} ]] valueCoveringAll:
		{107 to: 117}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.
	[
	(accounts
		cover: (73 to: 80)
		declaredAt: (73 to: 80)) do: [ :anAccount |
		[
		(anAccount
			cover: (101 to: 109)
			declaredAt: (89 to: 97)) addChildrenTo:
			(aSequenceOfAccounts
				cover: (126 to: 144)
				declaredAt: (16 to: 34)) ] valueCoveringAll:
			{111 to: 124} ]] valueCoveringAll:
		{82 to: 84}.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) -
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:23:09'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:23:34'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Ciro 5/24/2021 17:23:34'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) -
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Ciro 5/24/2021 17:23:34'!
PASSED!
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Ciro 5/24/2021 17:23:34'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:23:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Ciro 5/24/2021 17:23:34'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Ciro 5/24/2021 17:23:34'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (14 to: 21)
		declaredAt: (14 to: 21))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{23 to: 26. 62 to: 69}.! !
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	([
	(self coverAll:
		{76 to: 79}) allAccounts ] valueCoveringAll:
		{81 to: 91})
		inject:
			(transactions
				cover: (104 to: 115)
				declaredAt: (18 to: 29))
		into: [ :actualTransactions :anAccount |
			[
			(transactions
				cover: (160 to: 171)
				declaredAt: (18 to: 29)) addAll:
				([
				(anAccount
					cover: (181 to: 189)
					declaredAt: (148 to: 156)) transactions ] valueCoveringAll:
					{191 to: 202}) ] valueCoveringAll:
				{173 to: 179} ]] valueCoveringAll:
		{96 to: 102. 119 to: 123}.
	^ transactions
		cover: (213 to: 224)
		declaredAt: (18 to: 29).! !
!Behavior method!
allAccounts
	| allAccounts |
	(allAccounts _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(accounts
		cover: (75 to: 82)
		declaredAt: (75 to: 82)) do: [ :anAccount |
		[
		(anAccount
			cover: (103 to: 111)
			declaredAt: (91 to: 99)) addChildrenTo:
			(allAccounts
				cover: (128 to: 138)
				declaredAt: (18 to: 28)) ] valueCoveringAll:
			{113 to: 126} ]] valueCoveringAll:
		{84 to: 86}.
	^ allAccounts
		cover: (148 to: 158)
		declaredAt: (18 to: 28).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !
!Behavior method!
hasAccount: anAccount
	^ [
	([
	(self coverAll:
		{28 to: 31}) allAccounts ] valueCoveringAll:
		{33 to: 43}) includes:
		(anAccount
			cover: (55 to: 63)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{45 to: 53}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.! !
!Behavior method!
allAccountsSize
	^ [
	([
	(self coverAll:
		{22 to: 25}) allAccounts ] valueCoveringAll:
		{27 to: 37}) size ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !
!Behavior method!
hasRegistered: anAccountTransaction
	| allAccounts |
	(allAccounts _ [
	(self coverAll:
		{72 to: 75}) allAccounts ] valueCoveringAll:
		{77 to: 87})
		cover: (58 to: 68)
		declaredAt: (41 to: 51).
	^ [
	(allAccounts
		cover: (95 to: 105)
		declaredAt: (41 to: 51)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (134 to: 142)
			declaredAt: (122 to: 130)) hasRegistered:
			(anAccountTransaction
				cover: (159 to: 178)
				declaredAt: (16 to: 35)) ] valueCoveringAll:
			{144 to: 157} ]] valueCoveringAll:
		{107 to: 117}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.
	[
	(accounts
		cover: (73 to: 80)
		declaredAt: (73 to: 80)) do: [ :anAccount |
		[
		(anAccount
			cover: (101 to: 109)
			declaredAt: (89 to: 97)) addChildrenTo:
			(aSequenceOfAccounts
				cover: (126 to: 144)
				declaredAt: (16 to: 34)) ] valueCoveringAll:
			{111 to: 124} ]] valueCoveringAll:
		{82 to: 84}.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) -
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:23:56'!
PASSED!

!methodRemoval: Portfolio #accounts stamp: 'Ciro 5/24/2021 17:25:40'!
accounts
	
	^ accounts copy!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:25:45'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (14 to: 21)
		declaredAt: (14 to: 21))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{23 to: 26. 62 to: 69}.! !
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	([
	(self coverAll:
		{76 to: 79}) allAccounts ] valueCoveringAll:
		{81 to: 91})
		inject:
			(transactions
				cover: (104 to: 115)
				declaredAt: (18 to: 29))
		into: [ :actualTransactions :anAccount |
			[
			(transactions
				cover: (160 to: 171)
				declaredAt: (18 to: 29)) addAll:
				([
				(anAccount
					cover: (181 to: 189)
					declaredAt: (148 to: 156)) transactions ] valueCoveringAll:
					{191 to: 202}) ] valueCoveringAll:
				{173 to: 179} ]] valueCoveringAll:
		{96 to: 102. 119 to: 123}.
	^ transactions
		cover: (213 to: 224)
		declaredAt: (18 to: 29).! !
!Behavior method!
allAccounts
	| allAccounts |
	(allAccounts _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(accounts
		cover: (75 to: 82)
		declaredAt: (75 to: 82)) do: [ :anAccount |
		[
		(anAccount
			cover: (103 to: 111)
			declaredAt: (91 to: 99)) addChildrenTo:
			(allAccounts
				cover: (128 to: 138)
				declaredAt: (18 to: 28)) ] valueCoveringAll:
			{113 to: 126} ]] valueCoveringAll:
		{84 to: 86}.
	^ allAccounts
		cover: (148 to: 158)
		declaredAt: (18 to: 28).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !
!Behavior method!
hasAccount: anAccount
	^ [
	([
	(self coverAll:
		{28 to: 31}) allAccounts ] valueCoveringAll:
		{33 to: 43}) includes:
		(anAccount
			cover: (55 to: 63)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{45 to: 53}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.! !
!Behavior method!
allAccountsSize
	^ [
	([
	(self coverAll:
		{22 to: 25}) allAccounts ] valueCoveringAll:
		{27 to: 37}) size ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !
!Behavior method!
hasRegistered: anAccountTransaction
	| allAccounts |
	(allAccounts _ [
	(self coverAll:
		{72 to: 75}) allAccounts ] valueCoveringAll:
		{77 to: 87})
		cover: (58 to: 68)
		declaredAt: (41 to: 51).
	^ [
	(allAccounts
		cover: (95 to: 105)
		declaredAt: (41 to: 51)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (134 to: 142)
			declaredAt: (122 to: 130)) hasRegistered:
			(anAccountTransaction
				cover: (159 to: 178)
				declaredAt: (16 to: 35)) ] valueCoveringAll:
			{144 to: 157} ]] valueCoveringAll:
		{107 to: 117}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.
	[
	(accounts
		cover: (73 to: 80)
		declaredAt: (73 to: 80)) do: [ :anAccount |
		[
		(anAccount
			cover: (101 to: 109)
			declaredAt: (89 to: 97)) addChildrenTo:
			(aSequenceOfAccounts
				cover: (126 to: 144)
				declaredAt: (16 to: 34)) ] valueCoveringAll:
			{111 to: 124} ]] valueCoveringAll:
		{82 to: 84}.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:25:48'!
PASSED!
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) -
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:25:49'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:25:49'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:25:49'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:25:49'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:25:49'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:25:49'!
PASSED!

!methodRemoval: Portfolio #parents stamp: 'Ciro 5/24/2021 17:26:57'!
parents

	| allParents |
	
	allParents _ OrderedCollection  new.
	
	allParents addAll: parents copy.
	
	parents do: [ :aPortfolio | allParents addAll: aPortfolio parents ].
	
	^ allParents!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:27:00'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (14 to: 21)
		declaredAt: (14 to: 21))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{23 to: 26. 62 to: 69}.! !
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	([
	(self coverAll:
		{76 to: 79}) allAccounts ] valueCoveringAll:
		{81 to: 91})
		inject:
			(transactions
				cover: (104 to: 115)
				declaredAt: (18 to: 29))
		into: [ :actualTransactions :anAccount |
			[
			(transactions
				cover: (160 to: 171)
				declaredAt: (18 to: 29)) addAll:
				([
				(anAccount
					cover: (181 to: 189)
					declaredAt: (148 to: 156)) transactions ] valueCoveringAll:
					{191 to: 202}) ] valueCoveringAll:
				{173 to: 179} ]] valueCoveringAll:
		{96 to: 102. 119 to: 123}.
	^ transactions
		cover: (213 to: 224)
		declaredAt: (18 to: 29).! !
!Behavior method!
allAccounts
	| allAccounts |
	(allAccounts _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(accounts
		cover: (75 to: 82)
		declaredAt: (75 to: 82)) do: [ :anAccount |
		[
		(anAccount
			cover: (103 to: 111)
			declaredAt: (91 to: 99)) addChildrenTo:
			(allAccounts
				cover: (128 to: 138)
				declaredAt: (18 to: 28)) ] valueCoveringAll:
			{113 to: 126} ]] valueCoveringAll:
		{84 to: 86}.
	^ allAccounts
		cover: (148 to: 158)
		declaredAt: (18 to: 28).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !
!Behavior method!
hasAccount: anAccount
	^ [
	([
	(self coverAll:
		{28 to: 31}) allAccounts ] valueCoveringAll:
		{33 to: 43}) includes:
		(anAccount
			cover: (55 to: 63)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{45 to: 53}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.! !
!Behavior method!
allAccountsSize
	^ [
	([
	(self coverAll:
		{22 to: 25}) allAccounts ] valueCoveringAll:
		{27 to: 37}) size ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !
!Behavior method!
hasRegistered: anAccountTransaction
	| allAccounts |
	(allAccounts _ [
	(self coverAll:
		{72 to: 75}) allAccounts ] valueCoveringAll:
		{77 to: 87})
		cover: (58 to: 68)
		declaredAt: (41 to: 51).
	^ [
	(allAccounts
		cover: (95 to: 105)
		declaredAt: (41 to: 51)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (134 to: 142)
			declaredAt: (122 to: 130)) hasRegistered:
			(anAccountTransaction
				cover: (159 to: 178)
				declaredAt: (16 to: 35)) ] valueCoveringAll:
			{144 to: 157} ]] valueCoveringAll:
		{107 to: 117}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.
	[
	(accounts
		cover: (73 to: 80)
		declaredAt: (73 to: 80)) do: [ :anAccount |
		[
		(anAccount
			cover: (101 to: 109)
			declaredAt: (89 to: 97)) addChildrenTo:
			(aSequenceOfAccounts
				cover: (126 to: 144)
				declaredAt: (16 to: 34)) ] valueCoveringAll:
			{111 to: 124} ]] valueCoveringAll:
		{82 to: 84}.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) -
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:27:07'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (14 to: 21)
		declaredAt: (14 to: 21))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{23 to: 26. 62 to: 69}.! !
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	([
	(self coverAll:
		{76 to: 79}) allAccounts ] valueCoveringAll:
		{81 to: 91})
		inject:
			(transactions
				cover: (104 to: 115)
				declaredAt: (18 to: 29))
		into: [ :actualTransactions :anAccount |
			[
			(transactions
				cover: (160 to: 171)
				declaredAt: (18 to: 29)) addAll:
				([
				(anAccount
					cover: (181 to: 189)
					declaredAt: (148 to: 156)) transactions ] valueCoveringAll:
					{191 to: 202}) ] valueCoveringAll:
				{173 to: 179} ]] valueCoveringAll:
		{96 to: 102. 119 to: 123}.
	^ transactions
		cover: (213 to: 224)
		declaredAt: (18 to: 29).! !
!Behavior method!
allAccounts
	| allAccounts |
	(allAccounts _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(accounts
		cover: (75 to: 82)
		declaredAt: (75 to: 82)) do: [ :anAccount |
		[
		(anAccount
			cover: (103 to: 111)
			declaredAt: (91 to: 99)) addChildrenTo:
			(allAccounts
				cover: (128 to: 138)
				declaredAt: (18 to: 28)) ] valueCoveringAll:
			{113 to: 126} ]] valueCoveringAll:
		{84 to: 86}.
	^ allAccounts
		cover: (148 to: 158)
		declaredAt: (18 to: 28).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:27:17'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !
!Behavior method!
hasAccount: anAccount
	^ [
	([
	(self coverAll:
		{28 to: 31}) allAccounts ] valueCoveringAll:
		{33 to: 43}) includes:
		(anAccount
			cover: (55 to: 63)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{45 to: 53}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.! !
!Behavior method!
allAccountsSize
	^ [
	([
	(self coverAll:
		{22 to: 25}) allAccounts ] valueCoveringAll:
		{27 to: 37}) size ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !
!Behavior method!
hasRegistered: anAccountTransaction
	| allAccounts |
	(allAccounts _ [
	(self coverAll:
		{72 to: 75}) allAccounts ] valueCoveringAll:
		{77 to: 87})
		cover: (58 to: 68)
		declaredAt: (41 to: 51).
	^ [
	(allAccounts
		cover: (95 to: 105)
		declaredAt: (41 to: 51)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (134 to: 142)
			declaredAt: (122 to: 130)) hasRegistered:
			(anAccountTransaction
				cover: (159 to: 178)
				declaredAt: (16 to: 35)) ] valueCoveringAll:
			{144 to: 157} ]] valueCoveringAll:
		{107 to: 117}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.
	[
	(accounts
		cover: (73 to: 80)
		declaredAt: (73 to: 80)) do: [ :anAccount |
		[
		(anAccount
			cover: (101 to: 109)
			declaredAt: (89 to: 97)) addChildrenTo:
			(aSequenceOfAccounts
				cover: (126 to: 144)
				declaredAt: (16 to: 34)) ] valueCoveringAll:
			{111 to: 124} ]] valueCoveringAll:
		{82 to: 84}.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) -
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:27:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:29:05' prior: 50911501!
test05AddMultipleTransactions

	| portfolio account1 account2 deposit1 deposit2 withdraw |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	deposit1 _ Deposit register: 100 on: account1. 
	deposit2 _ Deposit register: 200 on: account2.
	withdraw _ Withdraw register: 50 on: account2.
	
	self assert: 3 equals: portfolio transactions size.
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:29:11'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:29:58'!
transactionsSize

	| transactions |
	
	transactions _ OrderedCollection new.

	self allAccounts 
		inject: transactions
		into: [ :actualTransactions :anAccount | transactions addAll: anAccount transactions ].
		
	^ transactions size! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:30:38' prior: 50917341!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self assert: 5 equals: portfolio1 allAccountsSize.
	self assert: 3 equals: portfolio2 allAccountsSize.
	self assert: 1 equals: portfolio3 allAccountsSize.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: 4 equals: portfolio1 transactionsSize.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered: deposit3).
	self assert: (portfolio1 hasRegistered: withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit3).
	self assert: (portfolio3 hasRegistered: deposit3).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:30:47' prior: 50920369!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self assert: 5 equals: portfolio1 allAccountsSize.
	self assert: 3 equals: portfolio2 allAccountsSize.
	self assert: 1 equals: portfolio3 allAccountsSize.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: 4 equals: portfolio1 transactionsSize.
	self assert: 2 equals: portfolio2 transactionsSize.
	self assert: 1 equals: portfolio3 transactionsSize.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered: deposit3).
	self assert: (portfolio1 hasRegistered: withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit3).
	self assert: (portfolio3 hasRegistered: deposit3).! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:30:49'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:30:49'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:32:21' prior: 50916226 overrides: 50917434!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.

	self allAccounts 
		inject: transactions
		into: [ :actualTransactions :anAccount | transactions addAll: anAccount transactions ].
		
	^ transactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:32:55' prior: 50920471 overrides: 50917434!
transactions

	| transactions |
	
	transactions _ OrderedCollection new.
	
	accounts do: [ :anAccount | anAccount addTransactionTo: transactions ].
	
	^ transactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:33:20'!
addTransactionTo: aSequenceOfAccounts
	
	aSequenceOfAccounts add: self.
	
	accounts do: [ :anAccount | anAccount addChildrenTo: aSequenceOfAccounts ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:33:27' prior: 50920490!
addTransactionTo: aSequenceOfAccounts
	
	accounts do: [ :anAccount | anAccount addTransactionTo: aSequenceOfAccounts ]! !
!Account methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:33:50'!
addTransactionTo: aSequenceOfAccounts

	self subclassResponsibility! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ciro 5/24/2021 17:33:59' overrides: 50920505!
addTransactionTo: aSequenceOfAccounts
	
	aSequenceOfAccounts add: self! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'Ciro 5/24/2021 17:34:11' prior: 50920511 overrides: 50920505!
addTransactionTo: aSequenceOfAccounts
	
	aSequenceOfAccounts addAll: self transactions ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:34:33'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:34:33'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:34:33'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:34:57' prior: 50920358!
transactionsSize
		
	^ self transactions size! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:35:01'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:35:34' prior: 50920333!
test05AddMultipleTransactions

	| portfolio account1 account2 deposit1 deposit2 withdraw |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	deposit1 _ Deposit register: 100 on: account1. 
	deposit2 _ Deposit register: 200 on: account2.
	withdraw _ Withdraw register: 50 on: account2.
	
	self assert: 3 equals: portfolio transactionsSize.
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:35:56' prior: 50911311!
test03PortfolioKnowsRegisteredTransactions 

	| account portfolio deposit |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit register: 100 on: account.
		
	self assert: 100 equals: portfolio balance.
	self assert: 1 equals: portfolio transactionsSize.
	self assert: (portfolio hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:36:01' prior: 50911336!
test04PortfolioDoNotKnowsRegisteredTransactions 

	| portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self assert: 2 equals: portfolio transactionsSize.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:36:20' prior: 50915089!
test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 deposit1 deposit2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio1 addAccount: portfolio2.
	
	self assert: 200 equals: portfolio1 balance.
	self assert: 100 equals: portfolio2 balance.
	self assert: 2 equals: portfolio1 transactionsSize.
	self assert: 1 equals: portfolio2 transactionsSize.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit2).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:36:23'!
FAILURE!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:36:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:36:23'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:36:33' prior: 50920671!
test04PortfolioDoNotKnowsRegisteredTransactions 

	| portfolio deposit withdraw|
	
	portfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: portfolio balance.
	self assert: 0 equals: portfolio transactionsSize.
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).
! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:36:35'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:36:38'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Ciro 5/24/2021 17:37:16' prior: 50916071 overrides: 50916087!
hasRegistered: anAccountTransaction

	^ self transactions includes: anAccountTransaction ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:37:19'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (14 to: 21)
		declaredAt: (14 to: 21))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{23 to: 26. 62 to: 69}.! !
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionTo:
			(transactions
				cover: (133 to: 144)
				declaredAt: (18 to: 29)) ] valueCoveringAll:
			{115 to: 131} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (18 to: 29).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !
!Behavior method!
hasAccount: anAccount
	^ [
	([
	(self coverAll:
		{28 to: 31}) allAccounts ] valueCoveringAll:
		{33 to: 43}) includes:
		(anAccount
			cover: (55 to: 63)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{45 to: 53}.! !
!Behavior method!
allAccounts
	| allAccounts |
	(allAccounts _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(accounts
		cover: (75 to: 82)
		declaredAt: (75 to: 82)) do: [ :anAccount |
		[
		(anAccount
			cover: (103 to: 111)
			declaredAt: (91 to: 99)) addChildrenTo:
			(allAccounts
				cover: (128 to: 138)
				declaredAt: (18 to: 28)) ] valueCoveringAll:
			{113 to: 126} ]] valueCoveringAll:
		{84 to: 86}.
	^ allAccounts
		cover: (148 to: 158)
		declaredAt: (18 to: 28).! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.! !
!Behavior method!
allAccountsSize
	^ [
	([
	(self coverAll:
		{22 to: 25}) allAccounts ] valueCoveringAll:
		{27 to: 37}) size ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !
!Behavior method!
transactionsSize
	^ [
	([
	(self coverAll:
		{24 to: 27}) transactions ] valueCoveringAll:
		{29 to: 40}) size ] valueCoveringAll:
		{42 to: 45}.! !
!Behavior method!
addTransactionTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (42 to: 60)
		declaredAt: (19 to: 37)) addAll:
		([
		(self coverAll:
			{70 to: 73}) transactions ] valueCoveringAll:
			{75 to: 86}) ] valueCoveringAll:
		{62 to: 68}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
hasRegistered: anAccountTransaction
	^ [
	([
	(self coverAll:
		{41 to: 44}) transactions ] valueCoveringAll:
		{46 to: 57}) includes:
		(anAccountTransaction
			cover: (69 to: 88)
			declaredAt: (16 to: 35)) ] valueCoveringAll:
		{59 to: 67}.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.
	[
	(accounts
		cover: (73 to: 80)
		declaredAt: (73 to: 80)) do: [ :anAccount |
		[
		(anAccount
			cover: (101 to: 109)
			declaredAt: (89 to: 97)) addChildrenTo:
			(aSequenceOfAccounts
				cover: (126 to: 144)
				declaredAt: (16 to: 34)) ] valueCoveringAll:
			{111 to: 124} ]] valueCoveringAll:
		{82 to: 84}.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!
!Behavior method!
addTransactionTo: aSequenceOfAccounts
	[
	(accounts
		cover: (42 to: 49)
		declaredAt: (42 to: 49)) do: [ :anAccount |
		[
		(anAccount
			cover: (70 to: 78)
			declaredAt: (58 to: 66)) addTransactionTo:
			(aSequenceOfAccounts
				cover: (98 to: 116)
				declaredAt: (19 to: 37)) ] valueCoveringAll:
			{80 to: 96} ]] valueCoveringAll:
		{51 to: 53}.! !

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) -
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:37:30'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:38:06' prior: 50914216!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
	self assert: portfolio transactions isEmpty! !
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (14 to: 21)
		declaredAt: (14 to: 21))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{23 to: 26. 62 to: 69}.! !
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionTo:
			(transactions
				cover: (133 to: 144)
				declaredAt: (18 to: 29)) ] valueCoveringAll:
			{115 to: 131} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (18 to: 29).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !
!Behavior method!
hasAccount: anAccount
	^ [
	([
	(self coverAll:
		{28 to: 31}) allAccounts ] valueCoveringAll:
		{33 to: 43}) includes:
		(anAccount
			cover: (55 to: 63)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{45 to: 53}.! !
!Behavior method!
allAccounts
	| allAccounts |
	(allAccounts _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(accounts
		cover: (75 to: 82)
		declaredAt: (75 to: 82)) do: [ :anAccount |
		[
		(anAccount
			cover: (103 to: 111)
			declaredAt: (91 to: 99)) addChildrenTo:
			(allAccounts
				cover: (128 to: 138)
				declaredAt: (18 to: 28)) ] valueCoveringAll:
			{113 to: 126} ]] valueCoveringAll:
		{84 to: 86}.
	^ allAccounts
		cover: (148 to: 158)
		declaredAt: (18 to: 28).! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.! !
!Behavior method!
allAccountsSize
	^ [
	([
	(self coverAll:
		{22 to: 25}) allAccounts ] valueCoveringAll:
		{27 to: 37}) size ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !
!Behavior method!
transactionsSize
	^ [
	([
	(self coverAll:
		{24 to: 27}) transactions ] valueCoveringAll:
		{29 to: 40}) size ] valueCoveringAll:
		{42 to: 45}.! !
!Behavior method!
addTransactionTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (42 to: 60)
		declaredAt: (19 to: 37)) addAll:
		([
		(self coverAll:
			{70 to: 73}) transactions ] valueCoveringAll:
			{75 to: 86}) ] valueCoveringAll:
		{62 to: 68}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
hasRegistered: anAccountTransaction
	^ [
	([
	(self coverAll:
		{41 to: 44}) transactions ] valueCoveringAll:
		{46 to: 57}) includes:
		(anAccountTransaction
			cover: (69 to: 88)
			declaredAt: (16 to: 35)) ] valueCoveringAll:
		{59 to: 67}.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.
	[
	(accounts
		cover: (73 to: 80)
		declaredAt: (73 to: 80)) do: [ :anAccount |
		[
		(anAccount
			cover: (101 to: 109)
			declaredAt: (89 to: 97)) addChildrenTo:
			(aSequenceOfAccounts
				cover: (126 to: 144)
				declaredAt: (16 to: 34)) ] valueCoveringAll:
			{111 to: 124} ]] valueCoveringAll:
		{82 to: 84}.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!
!Behavior method!
addTransactionTo: aSequenceOfAccounts
	[
	(accounts
		cover: (42 to: 49)
		declaredAt: (42 to: 49)) do: [ :anAccount |
		[
		(anAccount
			cover: (70 to: 78)
			declaredAt: (58 to: 66)) addTransactionTo:
			(aSequenceOfAccounts
				cover: (98 to: 116)
				declaredAt: (19 to: 37)) ] valueCoveringAll:
			{80 to: 96} ]] valueCoveringAll:
		{51 to: 53}.! !

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) -
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:38:16'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:39:06' prior: 50920656!
test03PortfolioKnowsRegisteredTransactions 

	| account portfolio deposit |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount  new.
	portfolio addAccount: account.
	deposit _ Deposit register: 100 on: account.
		
	self assert: (portfolio hasAccount: account).
	self assert: 100 equals: portfolio balance.
	self assert: 1 equals: portfolio transactionsSize.
	self assert: (portfolio hasRegistered: deposit).
! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:39:08'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:39:24' prior: 50920634!
test05AddMultipleTransactions

	| portfolio account1 account2 deposit1 deposit2 withdraw |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	deposit1 _ Deposit register: 100 on: account1. 
	deposit2 _ Deposit register: 200 on: account2.
	withdraw _ Withdraw register: 50 on: account2.
	
	self assert: (portfolio hasAccount: account1).
	self assert: (portfolio hasAccount: account2).
	self assert: 3 equals: portfolio transactionsSize.
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:39:27'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (14 to: 21)
		declaredAt: (14 to: 21))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{23 to: 26. 62 to: 69}.! !
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionTo:
			(transactions
				cover: (133 to: 144)
				declaredAt: (18 to: 29)) ] valueCoveringAll:
			{115 to: 131} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (18 to: 29).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !
!Behavior method!
hasAccount: anAccount
	^ [
	([
	(self coverAll:
		{28 to: 31}) allAccounts ] valueCoveringAll:
		{33 to: 43}) includes:
		(anAccount
			cover: (55 to: 63)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{45 to: 53}.! !
!Behavior method!
allAccounts
	| allAccounts |
	(allAccounts _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(accounts
		cover: (75 to: 82)
		declaredAt: (75 to: 82)) do: [ :anAccount |
		[
		(anAccount
			cover: (103 to: 111)
			declaredAt: (91 to: 99)) addChildrenTo:
			(allAccounts
				cover: (128 to: 138)
				declaredAt: (18 to: 28)) ] valueCoveringAll:
			{113 to: 126} ]] valueCoveringAll:
		{84 to: 86}.
	^ allAccounts
		cover: (148 to: 158)
		declaredAt: (18 to: 28).! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.! !
!Behavior method!
allAccountsSize
	^ [
	([
	(self coverAll:
		{22 to: 25}) allAccounts ] valueCoveringAll:
		{27 to: 37}) size ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !
!Behavior method!
transactionsSize
	^ [
	([
	(self coverAll:
		{24 to: 27}) transactions ] valueCoveringAll:
		{29 to: 40}) size ] valueCoveringAll:
		{42 to: 45}.! !
!Behavior method!
addTransactionTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (42 to: 60)
		declaredAt: (19 to: 37)) addAll:
		([
		(self coverAll:
			{70 to: 73}) transactions ] valueCoveringAll:
			{75 to: 86}) ] valueCoveringAll:
		{62 to: 68}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
hasRegistered: anAccountTransaction
	^ [
	([
	(self coverAll:
		{41 to: 44}) transactions ] valueCoveringAll:
		{46 to: 57}) includes:
		(anAccountTransaction
			cover: (69 to: 88)
			declaredAt: (16 to: 35)) ] valueCoveringAll:
		{59 to: 67}.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.
	[
	(accounts
		cover: (73 to: 80)
		declaredAt: (73 to: 80)) do: [ :anAccount |
		[
		(anAccount
			cover: (101 to: 109)
			declaredAt: (89 to: 97)) addChildrenTo:
			(aSequenceOfAccounts
				cover: (126 to: 144)
				declaredAt: (16 to: 34)) ] valueCoveringAll:
			{111 to: 124} ]] valueCoveringAll:
		{82 to: 84}.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!
!Behavior method!
addTransactionTo: aSequenceOfAccounts
	[
	(accounts
		cover: (42 to: 49)
		declaredAt: (42 to: 49)) do: [ :anAccount |
		[
		(anAccount
			cover: (70 to: 78)
			declaredAt: (58 to: 66)) addTransactionTo:
			(aSequenceOfAccounts
				cover: (98 to: 116)
				declaredAt: (19 to: 37)) ] valueCoveringAll:
			{80 to: 96} ]] valueCoveringAll:
		{51 to: 53}.! !

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) -
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:39:43'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:51:19' prior: 50921295!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
	self assert: 0 equals: portfolio transactionsSize! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:51:22'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:51:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:52:46' prior: 50921720!
test05AddMultipleTransactions

	| portfolio account1 account2 deposit1 deposit2 withdraw |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	deposit1 _ Deposit register: 100 on: account1. 
	deposit2 _ Deposit register: 200 on: account2.
	withdraw _ Withdraw register: 50 on: account2.
	
	self assert: 2 equals: portfolio allAccountsSize.
	self assert: 3 equals: portfolio transactionsSize.
	self assert: (portfolio hasAccount: account1).
	self assert: (portfolio hasAccount: account2).
	self assert: (portfolio hasRegistered: deposit1).
	self assert: (portfolio hasRegistered: deposit2).
	self assert: (portfolio hasRegistered: withdraw).! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:52:48'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:54:07' prior: 50917236!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 account3 account4 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio1 addAccount: portfolio2.
	
	self assert: 3 equals: portfolio1 allAccountsSize.
	self assert: 1 equals: portfolio2 allAccountsSize.
	self assert: (portfolio1 hasAccount: account1).
	self assert: (portfolio1 hasAccount: portfolio2).
	self assert: (portfolio2 hasAccount: account2).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:54:12' prior: 50922238!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| portfolio1 portfolio2 account1 account2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio1 addAccount: portfolio2.
	
	self assert: 3 equals: portfolio1 allAccountsSize.
	self assert: 1 equals: portfolio2 allAccountsSize.
	self assert: (portfolio1 hasAccount: account1).
	self assert: (portfolio1 hasAccount: portfolio2).
	self assert: (portfolio2 hasAccount: account2).! !

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:54:14'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:55:36' prior: 50917269!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 account1 account2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account2.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio1 addAccount: portfolio3 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 3 equals: portfolio1 allAccountsSize.
			self assert: 1 equals: portfolio2 allAccountsSize.
			self assert: 1 equals: portfolio3 allAccountsSize.]! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:55:41'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:56:51' prior: 50922285!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 account1 account2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account2.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio1 addAccount: portfolio3 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 3 equals: portfolio1 allAccountsSize.
			self assert: 1 equals: portfolio2 allAccountsSize.
			self assert: 1 equals: portfolio3 allAccountsSize.
			self assert: (portfolio1 hasAccount: account1).
			self assert: (portfolio1 hasAccount: account2).
			self assert: (portfolio2 hasAccount: account2).
			self assert: (portfolio3 hasAccount: account2).
			self assert: (portfolio1 hasAccount: portfolio2).
			self deny: (portfolio1 hasAccount: portfolio3).]! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:56:54'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:57:20' prior: 50917302!
test10CanNotAddAParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio2 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 1 equals: portfolio1 allAccountsSize.
			self assert: 0 equals: portfolio2 allAccountsSize.
			self assert: (portfolio1 hasAccount: portfolio2).
			self deny: (portfolio2 hasAccount: portfolio1).]! !

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:57:22'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:57:48' prior: 50922353!
test10CanNotAddAParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio2 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: (portfolio1 hasAccount: portfolio2).
			self deny: (portfolio2 hasAccount: portfolio1).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:57:52' prior: 50922314!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 account1 account2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account2.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio1 addAccount: portfolio3 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: (portfolio1 hasAccount: account1).
			self assert: (portfolio1 hasAccount: account2).
			self assert: (portfolio2 hasAccount: account2).
			self assert: (portfolio3 hasAccount: account2).
			self assert: (portfolio1 hasAccount: portfolio2).
			self deny: (portfolio1 hasAccount: portfolio3).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:58:34' prior: 50917319!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: 2 equals: portfolio1 allAccountsSize.
			self assert: 1 equals: portfolio2 allAccountsSize.
			self assert: 0 equals: portfolio3 allAccountsSize.]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Ciro 5/24/2021 17:58:37'!
PASSED!

!methodRemoval: PortfolioTest #test13 stamp: 'Ciro 5/24/2021 17:59:26'!
test13

	| portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	portfolio4 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	portfolio4 addAccount: portfolio3.
	
	self should: [ 	portfolio1 addAccount: portfolio4. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription]!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 17:59:53'!
test13CanNotAddMyself

	| portfolio1 |
	
	portfolio1 _ Portfolio new.
	
	self should: [ 	portfolio1 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]! !

!methodRemoval: PortfolioTest #test14 stamp: 'Ciro 5/24/2021 17:59:59'!
test14

	| portfolio1 |
	
	portfolio1 _ Portfolio new.
	
	self should: [ 	portfolio1 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 18:00:26' prior: 50922515!
test13CanNotAddMyself

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self should: [ 	portfolio addAccount: portfolio. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio invalidAccountAddedErrorDescription.
			self deny: (portfolio hasAccount: portfolio).]! !

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/24/2021 18:00:27'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 18:05:29'!
test14CanNotAddAnAccountFromMyFathersChildren

	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio1 addAccount: portfolio2.
	portfolio1 addAccount: account.
	
	self should: [ 	portfolio2 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidAccountAddedErrorDescription.
			self assert: (portfolio1 hasAccount: account).
			self assert: (portfolio1 hasAccount: portfolio2).
			self deny: (portfolio2 hasAccount: account).]! !

!testRun: #PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/24/2021 18:05:31'!
PASSED!

!methodRemoval: PortfolioTest #test15 stamp: 'Ciro 5/24/2021 18:05:36'!
test15

	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio1 addAccount: portfolio2.
	portfolio1 addAccount: account.
	
	self should: [ 	portfolio2 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidAccountAddedErrorDescription.]!

!methodRemoval: PortfolioTest #test17 stamp: 'Ciro 5/24/2021 18:10:21'!
test17

	| portfolio1 portfolio2 portfolio3 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio1 addAccount: portfolio2.
	portfolio3 addAccount: portfolio2.
	portfolio1 addAccount: account.
	portfolio3 addAccount: account.
	
	self should: [ 	portfolio2 addAccount: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidAccountAddedErrorDescription.]!

!methodRemoval: PortfolioTest #test12 stamp: 'Ciro 5/24/2021 18:10:53'!
test12

	| portfolio1 portfolio2 portfolio3 account1 account2 account3 deposit1 deposit2 deposit3 withdraw1|
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	account1 _ ReceptiveAccount  new.
	account2 _ ReceptiveAccount  new.
	account3 _ ReceptiveAccount  new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2.
	deposit3 _ Deposit register: 100 on: account3.
	withdraw1 _ Withdraw register: 50 on: account1.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self assert: 5 equals: portfolio1 allAccountsSize.
	self assert: 3 equals: portfolio2 allAccountsSize.
	self assert: 1 equals: portfolio3 allAccountsSize.
	self assert: 250 equals: portfolio1 balance.
	self assert: 200 equals: portfolio2 balance.
	self assert: 100 equals: portfolio3 balance.
	self assert: 4 equals: portfolio1 transactionsSize.
	self assert: 2 equals: portfolio2 transactionsSize.
	self assert: 1 equals: portfolio3 transactionsSize.
	self assert: (portfolio1 hasRegistered: deposit1).
	self assert: (portfolio1 hasRegistered: deposit2).
	self assert: (portfolio1 hasRegistered: deposit3).
	self assert: (portfolio1 hasRegistered: withdraw1).
	self assert: (portfolio2 hasRegistered: deposit2).
	self assert: (portfolio2 hasRegistered: deposit3).
	self assert: (portfolio3 hasRegistered: deposit3).!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 18:12:34'!
test15CanNotAddARootsChildrenToAChildren

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	portfolio5 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio2 addAccount: portfolio1.
	portfolio3 addAccount: portfolio2.
	portfolio4 addAccount: portfolio1.
	portfolio5 addAccount: portfolio4.
	portfolio3 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	portfolio1 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]! !

!methodRemoval: PortfolioTest #test16 stamp: 'Ciro 5/24/2021 18:12:38'!
test16

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	portfolio5 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio2 addAccount: portfolio1.
	portfolio3 addAccount: portfolio2.
	portfolio4 addAccount: portfolio1.
	portfolio5 addAccount: portfolio4.
	portfolio3 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	portfolio1 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 18:12:52'!
test12CanNotAddARootsChildrenToAChildren

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	portfolio5 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio2 addAccount: portfolio1.
	portfolio3 addAccount: portfolio2.
	portfolio4 addAccount: portfolio1.
	portfolio5 addAccount: portfolio4.
	portfolio3 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	portfolio1 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]! !

!methodRemoval: PortfolioTest #test15CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/24/2021 18:12:57'!
test15CanNotAddARootsChildrenToAChildren

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	portfolio5 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio2 addAccount: portfolio1.
	portfolio3 addAccount: portfolio2.
	portfolio4 addAccount: portfolio1.
	portfolio5 addAccount: portfolio4.
	portfolio3 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	portfolio1 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.]!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/24/2021 18:12:59'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/24/2021 18:13:42' prior: 50922707!
test12CanNotAddARootsChildrenToAChildren

	| portfolio1 portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	portfolio5 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio2 addAccount: portfolio1.
	portfolio3 addAccount: portfolio2.
	portfolio4 addAccount: portfolio1.
	portfolio5 addAccount: portfolio4.
	portfolio3 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	portfolio1 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: (portfolio3 hasAccount: account).
			self assert: (portfolio5 hasAccount: account).
			self deny: (portfolio1 hasAccount: account).]! !

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/24/2021 18:13:44'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (49 to: 55)
		declaredAt: (49 to: 55).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (14 to: 21)
		declaredAt: (14 to: 21))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{23 to: 26. 62 to: 69}.! !
!Behavior method!
transactionsSize
	^ [
	([
	(self coverAll:
		{24 to: 27}) transactions ] valueCoveringAll:
		{29 to: 40}) size ] valueCoveringAll:
		{42 to: 45}.! !
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) new ] valueCoveringAll:
		{69 to: 71})
		cover: (36 to: 47)
		declaredAt: (18 to: 29).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionTo:
			(transactions
				cover: (133 to: 144)
				declaredAt: (18 to: 29)) ] valueCoveringAll:
			{115 to: 131} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (18 to: 29).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
addAccount: anAccount
	[
	(self coverAll:
		{25 to: 28}) assertCanAdd:
		(anAccount
			cover: (44 to: 52)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{30 to: 42}.
	[
	(accounts
		cover: (57 to: 64)
		declaredAt: (57 to: 64)) add:
		(anAccount
			cover: (71 to: 79)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{66 to: 69}.
	[
	(anAccount
		cover: (83 to: 91)
		declaredAt: (13 to: 21)) addParent:
		(self coverAll:
			{104 to: 107}) ] valueCoveringAll:
		{93 to: 102}.! !
!Behavior method!
assertCanAdd: anAccount
	[
	([
	(self coverAll:
		{29 to: 32}) checkFromRoot:
		(anAccount
			cover: (49 to: 57)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidAccountAddedErrorDescription ] valueCoveringAll:
				{87 to: 121}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 66}.! !
!Behavior method!
checkFromRoot: anAccount
	^ [
	([
	(self coverAll:
		{31 to: 34}) roots ] valueCoveringAll:
		{36 to: 40}) anySatisfy: [ :aRoot |
		[
		(aRoot
			cover: (65 to: 69)
			declaredAt: (57 to: 61)) contains:
			(anAccount
				cover: (81 to: 89)
				declaredAt: (16 to: 24)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{42 to: 52}.! !
!Behavior method!
roots
	| allRoots |
	(allRoots _ [
	(OrderedCollection
		cover: (36 to: 52)
		declaredAt: (36 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (25 to: 32)
		declaredAt: (11 to: 18).
	[
	(self coverAll:
		{61 to: 64}) addRoots:
		(allRoots
			cover: (76 to: 83)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{66 to: 74}.
	^ allRoots
		cover: (91 to: 98)
		declaredAt: (11 to: 18).! !
!Behavior method!
addRoots: aSequenceOfRoots
	[
	(parents
		cover: (31 to: 37)
		declaredAt: (31 to: 37))
		ifEmpty: [
			[
			(aSequenceOfRoots
				cover: (50 to: 65)
				declaredAt: (11 to: 26)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (95 to: 101)
				declaredAt: (31 to: 37)) do: [ :aParent |
				[
				(aParent
					cover: (120 to: 126)
					declaredAt: (110 to: 116)) addRoots:
					(aSequenceOfRoots
						cover: (138 to: 153)
						declaredAt: (11 to: 26)) ] valueCoveringAll:
					{128 to: 136} ]] valueCoveringAll:
				{103 to: 105} ]] valueCoveringAll:
		{39 to: 46. 81 to: 91}.! !
!Behavior method!
contains: anAccount
	^ [
	([
	(self coverAll:
		{26 to: 29}) =
		(anAccount
			cover: (33 to: 41)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{31 to: 31}) or: [
		[
		(accounts
			cover: (49 to: 56)
			declaredAt: (49 to: 56)) anySatisfy: [ :anotherAccount |
			[
			([
			(anotherAccount
				cover: (91 to: 104)
				declaredAt: (73 to: 86)) contains:
				(anAccount
					cover: (116 to: 124)
					declaredAt: (11 to: 19)) ] valueCoveringAll:
				{106 to: 114}) or: [
				[
				(anAccount
					cover: (136 to: 144)
					declaredAt: (11 to: 19)) contains:
					(anotherAccount
						cover: (156 to: 169)
						declaredAt: (73 to: 86)) ] valueCoveringAll:
					{146 to: 154} ]] valueCoveringAll:
				{131 to: 133} ]] valueCoveringAll:
			{58 to: 68} ]] valueCoveringAll:
		{43 to: 45}.! !
!Behavior method!
addParent: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{35 to: 35})
		into: [ :actualBalance :transaction |
			[
			(transaction
				cover: (76 to: 86)
				declaredAt: (62 to: 72)) modifyBalance:
				(actualBalance
					cover: (103 to: 115)
					declaredAt: (47 to: 59)) ] valueCoveringAll:
				{88 to: 101} ]] valueCoveringAll:
		{27 to: 33. 39 to: 43}.! !
!Behavior method!
hasAccount: anAccount
	^ [
	([
	(self coverAll:
		{28 to: 31}) allAccounts ] valueCoveringAll:
		{33 to: 43}) includes:
		(anAccount
			cover: (55 to: 63)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{45 to: 53}.! !
!Behavior method!
allAccounts
	| allAccounts |
	(allAccounts _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(accounts
		cover: (75 to: 82)
		declaredAt: (75 to: 82)) do: [ :anAccount |
		[
		(anAccount
			cover: (103 to: 111)
			declaredAt: (91 to: 99)) addChildrenTo:
			(allAccounts
				cover: (128 to: 138)
				declaredAt: (18 to: 28)) ] valueCoveringAll:
			{113 to: 126} ]] valueCoveringAll:
		{84 to: 86}.
	^ allAccounts
		cover: (148 to: 158)
		declaredAt: (18 to: 28).! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.! !
!Behavior method!
allAccountsSize
	^ [
	([
	(self coverAll:
		{22 to: 25}) allAccounts ] valueCoveringAll:
		{27 to: 37}) size ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
modifyBalance: actualBalance
	^ [
	(actualBalance
		cover: (34 to: 46)
		declaredAt: (16 to: 28)) +
		(value
			cover: (50 to: 54)
			declaredAt: (50 to: 54)) ] valueCoveringAll:
		{48 to: 48}.! !
!Behavior method!
addTransactionTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (42 to: 60)
		declaredAt: (19 to: 37)) addAll:
		([
		(self coverAll:
			{70 to: 73}) transactions ] valueCoveringAll:
			{75 to: 86}) ] valueCoveringAll:
		{62 to: 68}.! !
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
hasRegistered: anAccountTransaction
	^ [
	([
	(self coverAll:
		{41 to: 44}) transactions ] valueCoveringAll:
		{46 to: 57}) includes:
		(anAccountTransaction
			cover: (69 to: 88)
			declaredAt: (16 to: 35)) ] valueCoveringAll:
		{59 to: 67}.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!
!Behavior method!
contains: anAccount
	^ [
	(self coverAll:
		{25 to: 28}) =
		(anAccount
			cover: (32 to: 40)
			declaredAt: (11 to: 19)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!
!Behavior method!
addParent: anAccount
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(anAccount
			cover: (37 to: 45)
			declaredAt: (12 to: 20)) ] valueCoveringAll:
		{32 to: 35}.! !
!Behavior method!
addChildrenTo: aSequenceOfAccounts
	[
	(aSequenceOfAccounts
		cover: (39 to: 57)
		declaredAt: (16 to: 34)) add:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{59 to: 62}.
	[
	(accounts
		cover: (73 to: 80)
		declaredAt: (73 to: 80)) do: [ :anAccount |
		[
		(anAccount
			cover: (101 to: 109)
			declaredAt: (89 to: 97)) addChildrenTo:
			(aSequenceOfAccounts
				cover: (126 to: 144)
				declaredAt: (16 to: 34)) ] valueCoveringAll:
			{111 to: 124} ]] valueCoveringAll:
		{82 to: 84}.! !

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!
!Behavior method!
addTransactionTo: aSequenceOfAccounts
	[
	(accounts
		cover: (42 to: 49)
		declaredAt: (42 to: 49)) do: [ :anAccount |
		[
		(anAccount
			cover: (70 to: 78)
			declaredAt: (58 to: 66)) addTransactionTo:
			(aSequenceOfAccounts
				cover: (98 to: 116)
				declaredAt: (19 to: 37)) ] valueCoveringAll:
			{80 to: 96} ]] valueCoveringAll:
		{51 to: 53}.! !

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!
!Behavior method!
invalidAccountAddedErrorDescription
	^ 'Invalid account added' coverAll:
		{41 to: 63}.! !

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/24/2021 18:13:49'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/24/2021 18:24:43'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/24/2021 18:24:47'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/24/2021 18:24:50'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/24/2021 18:24:53'!
PASSED!

----QUIT----(24 May 2021 18:25:34) CuisUniversity-4532.image priorSource: 18688834!

----STARTUP---- (25 May 2021 16:44:59) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:01:30' prior: 50917134!
test02AddNewReceptiveAccount

	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	portfolio addAccount: account.

	self assert: 0 equals: portfolio balance.
	self assert: (portfolio hasAccount: account).
	self assert: 1 equals: portfolio allAccountsSize.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:01:53' prior: 50923375!
test02AddNewReceptiveAccount

	| portfolio receptiveAccount |
	
	portfolio _ Portfolio new.
	receptiveAccount _ ReceptiveAccount new.
	portfolio addAccount: receptiveAccount.

	self assert: 0 equals: portfolio balance.
	self assert: (portfolio hasAccount: receptiveAccount).
	self assert: 1 equals: portfolio allAccountsSize.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:02:23' prior: 50921700!
test03PortfolioKnowsRegisteredTransactions 

	| simplePortfolio receptiveAccount deposit |
	
	simplePortfolio _ Portfolio new.
	receptiveAccount _ ReceptiveAccount  new.
	simplePortfolio addAccount: receptiveAccount.
	deposit _ Deposit register: 100 on: receptiveAccount.
		
	self assert: (simplePortfolio hasAccount: receptiveAccount).
	self assert: 100 equals: simplePortfolio balance.
	self assert: 1 equals: simplePortfolio transactionsSize.
	self assert: (simplePortfolio hasRegistered: deposit).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:02:32' prior: 50923387!
test02AddNewReceptiveAccount

	| simplePortfolio receptiveAccount |
	
	simplePortfolio _ Portfolio new.
	receptiveAccount _ ReceptiveAccount new.
	simplePortfolio addAccount: receptiveAccount.

	self assert: 0 equals: simplePortfolio balance.
	self assert: (simplePortfolio hasAccount: receptiveAccount).
	self assert: 1 equals: simplePortfolio allAccountsSize.! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:02:37' prior: 50922144!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| simplePortfolio |
	
	simplePortfolio := Portfolio new.

	self assert: 0 equals: simplePortfolio balance.
	self assert: 0 equals: simplePortfolio transactionsSize! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:02:45' prior: 50920770!
test04PortfolioDoNotKnowsRegisteredTransactions 

	| simplePortfolio deposit withdraw|
	
	simplePortfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: simplePortfolio balance.
	self assert: 0 equals: simplePortfolio transactionsSize.
	self deny: (simplePortfolio hasRegistered: deposit).
	self deny: (simplePortfolio hasRegistered: withdraw).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:03:24' prior: 50923434!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| emptyPortfolio |
	
	emptyPortfolio := Portfolio new.

	self assert: 0 equals: emptyPortfolio balance.
	self assert: 0 equals: emptyPortfolio transactionsSize! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:03:33' prior: 50923444!
test04PortfolioDoNotKnowsRegisteredTransactions 

	| emptyPortfolio deposit withdraw|
	
	emptyPortfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: emptyPortfolio balance.
	self assert: 0 equals: emptyPortfolio transactionsSize.
	self deny: (emptyPortfolio hasRegistered: deposit).
	self deny: (emptyPortfolio hasRegistered: withdraw).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:04:02' prior: 50922208!
test05AddMultipleTransactions

	|simplePortfolio account1 account2 deposit1 deposit2 withdraw |
	
	simplePortfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	simplePortfolio addAccount: account1.
	simplePortfolio addAccount: account2.
	deposit1 _ Deposit register: 100 on: account1. 
	deposit2 _ Deposit register: 200 on: account2.
	withdraw _ Withdraw register: 50 on: account2.
	
	self assert: 2 equals: simplePortfolio allAccountsSize.
	self assert: 3 equals: simplePortfolio transactionsSize.
	self assert: (simplePortfolio hasAccount: account1).
	self assert: (simplePortfolio hasAccount: account2).
	self assert: (simplePortfolio hasRegistered: deposit1).
	self assert: (simplePortfolio hasRegistered: deposit2).
	self assert: (simplePortfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:05:20' prior: 50923486!
test05AddMultipleTransactions

	|simplePortfolio aReceptiveAccount anotherReceptiveAccount deposit1 deposit2 withdraw |
	
	simplePortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new.
	simplePortfolio addAccount: aReceptiveAccount.
	simplePortfolio addAccount: anotherReceptiveAccount.
	deposit1 _ Deposit register: 100 on: aReceptiveAccount. 
	deposit2 _ Deposit register: 200 on: anotherReceptiveAccount.
	withdraw _ Withdraw register: 50 on: anotherReceptiveAccount.
	
	self assert: 2 equals: simplePortfolio allAccountsSize.
	self assert: 3 equals: simplePortfolio transactionsSize.
	self assert: (simplePortfolio hasAccount: aReceptiveAccount).
	self assert: (simplePortfolio hasAccount: anotherReceptiveAccount).
	self assert: (simplePortfolio hasRegistered: deposit1).
	self assert: (simplePortfolio hasRegistered: deposit2).
	self assert: (simplePortfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:05:41' prior: 50923515!
test05AddMultipleTransactions

	|simplePortfolio aReceptiveAccount anotherReceptiveAccount aDeposit anotherDeposit withdraw |
	
	simplePortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new.
	simplePortfolio addAccount: aReceptiveAccount.
	simplePortfolio addAccount: anotherReceptiveAccount.
	aDeposit _ Deposit register: 100 on: aReceptiveAccount. 
	anotherDeposit _ Deposit register: 200 on: anotherReceptiveAccount.
	withdraw _ Withdraw register: 50 on: anotherReceptiveAccount.
	
	self assert: 2 equals: simplePortfolio allAccountsSize.
	self assert: 3 equals: simplePortfolio transactionsSize.
	self assert: (simplePortfolio hasAccount: aReceptiveAccount).
	self assert: (simplePortfolio hasAccount: anotherReceptiveAccount).
	self assert: (simplePortfolio hasRegistered: aDeposit).
	self assert: (simplePortfolio hasRegistered: anotherDeposit).
	self assert: (simplePortfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:06:12' prior: 50917225!
test06AddPortfolioToPortfolio

	| simplePortfolio emptyPortfolio |
	
	simplePortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.
	simplePortfolio addAccount: emptyPortfolio.
	
	self assert: 1 equals: simplePortfolio allAccountsSize.
	self assert: (simplePortfolio hasAccount: emptyPortfolio).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/25/2021 17:06:14'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:07:34' prior: 50922260!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| composedPortfolio simplePortfolio aReceptiveAccount anotherReceptiveAccount |
	
	composedPortfolio _ Portfolio new.
	simplePortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new.
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolio addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolio.
	
	self assert: 3 equals: composedPortfolio allAccountsSize.
	self assert: 1 equals: simplePortfolio allAccountsSize.
	self assert: (composedPortfolio hasAccount: aReceptiveAccount).
	self assert: (composedPortfolio hasAccount: simplePortfolio).
	self assert: (simplePortfolio hasAccount: anotherReceptiveAccount).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:08:57' prior: 50920686!
test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts

	| composedPortfolio simplePortfolio account1 account2 deposit1 deposit2 |
	
	composedPortfolio _ Portfolio new.
	simplePortfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: account1.
	deposit2 _ Deposit register: 100 on: account2. 
	composedPortfolio addAccount: account1.
	simplePortfolio addAccount: account2.
	composedPortfolio addAccount: simplePortfolio.
	
	self assert: 200 equals: composedPortfolio balance.
	self assert: 100 equals: simplePortfolio balance.
	self assert: 2 equals: composedPortfolio transactionsSize.
	self assert: 1 equals: simplePortfolio transactionsSize.
	self assert: (composedPortfolio hasRegistered: deposit1).
	self assert: (composedPortfolio hasRegistered: deposit2).
	self assert: (simplePortfolio hasRegistered: deposit2).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:09:11' prior: 50923669!
test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts

	| composedPortfolio simplePortfolio aReceptiveAccount account2 deposit1 deposit2 |
	
	composedPortfolio _ Portfolio new.
	simplePortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: aReceptiveAccount.
	deposit2 _ Deposit register: 100 on: account2. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolio addAccount: account2.
	composedPortfolio addAccount: simplePortfolio.
	
	self assert: 200 equals: composedPortfolio balance.
	self assert: 100 equals: simplePortfolio balance.
	self assert: 2 equals: composedPortfolio transactionsSize.
	self assert: 1 equals: simplePortfolio transactionsSize.
	self assert: (composedPortfolio hasRegistered: deposit1).
	self assert: (composedPortfolio hasRegistered: deposit2).
	self assert: (simplePortfolio hasRegistered: deposit2).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:09:32' prior: 50923701!
test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts

	| composedPortfolio simplePortfolio aReceptiveAccount anotherReceptiveAccount deposit1 deposit2 |
	
	composedPortfolio _ Portfolio new.
	simplePortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: aReceptiveAccount.
	deposit2 _ Deposit register: 100 on: anotherReceptiveAccount. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolio addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolio.
	
	self assert: 200 equals: composedPortfolio balance.
	self assert: 100 equals: simplePortfolio balance.
	self assert: 2 equals: composedPortfolio transactionsSize.
	self assert: 1 equals: simplePortfolio transactionsSize.
	self assert: (composedPortfolio hasRegistered: deposit1).
	self assert: (composedPortfolio hasRegistered: deposit2).
	self assert: (simplePortfolio hasRegistered: deposit2).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/25/2021 17:09:42'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:10:09' prior: 50922393!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 aReceptiveAccount account2  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new. 
	portfolio1 addAccount: aReceptiveAccount.
	portfolio2 addAccount: account2.
	portfolio3 addAccount: account2.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio1 addAccount: portfolio3 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: (portfolio1 hasAccount: aReceptiveAccount).
			self assert: (portfolio1 hasAccount: account2).
			self assert: (portfolio2 hasAccount: account2).
			self assert: (portfolio3 hasAccount: account2).
			self assert: (portfolio1 hasAccount: portfolio2).
			self deny: (portfolio1 hasAccount: portfolio3).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:10:21' prior: 50923816!
test09NoDuplicatedAccounts

	| portfolio1 portfolio2 portfolio3 aReceptiveAccount anotherReceptiveAccount  |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new. 
	portfolio1 addAccount: aReceptiveAccount.
	portfolio2 addAccount: anotherReceptiveAccount.
	portfolio3 addAccount: anotherReceptiveAccount.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio1 addAccount: portfolio3 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: (portfolio1 hasAccount: aReceptiveAccount).
			self assert: (portfolio1 hasAccount: anotherReceptiveAccount).
			self assert: (portfolio2 hasAccount: anotherReceptiveAccount).
			self assert: (portfolio3 hasAccount: anotherReceptiveAccount).
			self assert: (portfolio1 hasAccount: portfolio2).
			self deny: (portfolio1 hasAccount: portfolio3).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:10:50' prior: 50923848!
test09NoDuplicatedAccounts

	| composedPortfolio portfolio2 portfolio3 aReceptiveAccount anotherReceptiveAccount  |
	
	composedPortfolio _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	portfolio2 addAccount: anotherReceptiveAccount.
	portfolio3 addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: portfolio2.
	
	self should: [ 	composedPortfolio addAccount: portfolio3 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: anotherReceptiveAccount).
			self assert: (portfolio2 hasAccount: anotherReceptiveAccount).
			self assert: (portfolio3 hasAccount: anotherReceptiveAccount).
			self assert: (composedPortfolio hasAccount: portfolio2).
			self deny: (composedPortfolio hasAccount: portfolio3).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:11:07' prior: 50923883!
test09NoDuplicatedAccounts

	| composedPortfolio simplePortfolioOnTree portfolio3 aReceptiveAccount anotherReceptiveAccount  |
	
	composedPortfolio _ Portfolio new.
	simplePortfolioOnTree _ Portfolio new.
	portfolio3 _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolioOnTree addAccount: anotherReceptiveAccount.
	portfolio3 addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolioOnTree.
	
	self should: [ 	composedPortfolio addAccount: portfolio3 ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioOnTree hasAccount: anotherReceptiveAccount).
			self assert: (portfolio3 hasAccount: anotherReceptiveAccount).
			self assert: (composedPortfolio hasAccount: simplePortfolioOnTree).
			self deny: (composedPortfolio hasAccount: portfolio3).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:11:28' prior: 50923920!
test09NoDuplicatedAccounts

	| composedPortfolio simplePortfolioOnTree simplePortfolioOutTree aReceptiveAccount anotherReceptiveAccount  |
	
	composedPortfolio _ Portfolio new.
	simplePortfolioOnTree _ Portfolio new.
	simplePortfolioOutTree _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolioOnTree addAccount: anotherReceptiveAccount.
	simplePortfolioOutTree addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolioOnTree.
	
	self should: [ 	composedPortfolio addAccount: simplePortfolioOutTree ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioOnTree hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioOutTree hasAccount: anotherReceptiveAccount).
			self assert: (composedPortfolio hasAccount: simplePortfolioOnTree).
			self deny: (composedPortfolio hasAccount: simplePortfolioOutTree).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:11:45' prior: 50923960!
test09NoDuplicatedAccounts

	| composedPortfolio simplePortfolioOnTree simplePortfolioOutTree aReceptiveAccount anotherReceptiveAccount  |
	
	composedPortfolio _ Portfolio new.
	simplePortfolioOnTree _ Portfolio new.
	simplePortfolioOutTree _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolioOnTree addAccount: anotherReceptiveAccount.
	simplePortfolioOutTree addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolioOnTree.
	
	self should: [ 	composedPortfolio addAccount: simplePortfolioOutTree ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioOnTree hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioOutTree hasAccount: anotherReceptiveAccount).
			self assert: (composedPortfolio hasAccount: simplePortfolioOnTree).
			self deny: (composedPortfolio hasAccount: simplePortfolioOutTree).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:11:49' prior: 50924002!
test09NoDuplicatedAccounts

	| composedPortfolio simplePortfolioInTree simplePortfolioOutTree aReceptiveAccount anotherReceptiveAccount  |
	
	composedPortfolio _ Portfolio new.
	simplePortfolioInTree _ Portfolio new.
	simplePortfolioOutTree _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolioInTree addAccount: anotherReceptiveAccount.
	simplePortfolioOutTree addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolioInTree.
	
	self should: [ 	composedPortfolio addAccount: simplePortfolioOutTree ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioInTree hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioOutTree hasAccount: anotherReceptiveAccount).
			self assert: (composedPortfolio hasAccount: simplePortfolioInTree).
			self deny: (composedPortfolio hasAccount: simplePortfolioOutTree).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:12:37' prior: 50924044!
test09NoDuplicatedAccounts

	| composedPortfolio simplePortfolioInTheTree simplePortfolioOutTree aReceptiveAccount anotherReceptiveAccount  |
	
	composedPortfolio _ Portfolio new.
	simplePortfolioInTheTree _ Portfolio new.
	simplePortfolioOutTree _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolioInTheTree addAccount: anotherReceptiveAccount.
	simplePortfolioOutTree addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolioInTheTree.
	
	self should: [ 	composedPortfolio addAccount: simplePortfolioOutTree ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioInTheTree hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioOutTree hasAccount: anotherReceptiveAccount).
			self assert: (composedPortfolio hasAccount: simplePortfolioInTheTree).
			self deny: (composedPortfolio hasAccount: simplePortfolioOutTree).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:12:42' prior: 50924086!
test09NoDuplicatedAccounts

	| composedPortfolio simplePortfolioInTheTree simplePortfolioOutTheTree aReceptiveAccount anotherReceptiveAccount  |
	
	composedPortfolio _ Portfolio new.
	simplePortfolioInTheTree _ Portfolio new.
	simplePortfolioOutTheTree _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolioInTheTree addAccount: anotherReceptiveAccount.
	simplePortfolioOutTheTree addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolioInTheTree.
	
	self should: [ 	composedPortfolio addAccount: simplePortfolioOutTheTree ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioInTheTree hasAccount: anotherReceptiveAccount).
			self assert: (simplePortfolioOutTheTree hasAccount: anotherReceptiveAccount).
			self assert: (composedPortfolio hasAccount: simplePortfolioInTheTree).
			self deny: (composedPortfolio hasAccount: simplePortfolioOutTheTree).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:13:33' prior: 50924128!
test09NoDuplicatedAccounts

	| composedPortfolio simplePortfolioInTheTree simplePortfolioOutTheTree aReceptiveAccount sharedAccount  |
	
	composedPortfolio _ Portfolio new.
	simplePortfolioInTheTree _ Portfolio new.
	simplePortfolioOutTheTree _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	sharedAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolioInTheTree addAccount: sharedAccount.
	simplePortfolioOutTheTree addAccount: sharedAccount.
	composedPortfolio addAccount: simplePortfolioInTheTree.
	
	self should: [ 	composedPortfolio addAccount: simplePortfolioOutTheTree ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: sharedAccount).
			self assert: (simplePortfolioInTheTree hasAccount: sharedAccount).
			self assert: (simplePortfolioOutTheTree hasAccount: sharedAccount).
			self assert: (composedPortfolio hasAccount: simplePortfolioInTheTree).
			self deny: (composedPortfolio hasAccount: simplePortfolioOutTheTree).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:13:50' prior: 50924171!
test09NoDuplicatedAccounts

	| composedPortfolio simplePortfolioInTheTree simplePortfolioOutTheTree aReceptiveAccount sharedReceptiveAccount  |
	
	composedPortfolio _ Portfolio new.
	simplePortfolioInTheTree _ Portfolio new.
	simplePortfolioOutTheTree _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	sharedReceptiveAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolioInTheTree addAccount: sharedReceptiveAccount.
	simplePortfolioOutTheTree addAccount: sharedReceptiveAccount.
	composedPortfolio addAccount: simplePortfolioInTheTree.
	
	self should: [ 	composedPortfolio addAccount: simplePortfolioOutTheTree ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: sharedReceptiveAccount).
			self assert: (simplePortfolioInTheTree hasAccount: sharedReceptiveAccount).
			self assert: (simplePortfolioOutTheTree hasAccount: sharedReceptiveAccount).
			self assert: (composedPortfolio hasAccount: simplePortfolioInTheTree).
			self deny: (composedPortfolio hasAccount: simplePortfolioOutTheTree).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:14:18' prior: 50922376!
test10CanNotAddAParent

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: portfolio2.
	
	self should: [ 	portfolio2 addAccount: portfolio1. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio1 invalidAccountAddedErrorDescription.
			self assert: (portfolio1 hasAccount: portfolio2).
			self deny: (portfolio2 hasAccount: portfolio1).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:14:29' prior: 50924255!
test10CanNotAddAParent

	| simplePortfolio portfolio2 |
	
	simplePortfolio _ Portfolio new.
	portfolio2 _ Portfolio new.
	simplePortfolio addAccount: portfolio2.
	
	self should: [ 	portfolio2 addAccount: simplePortfolio. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: simplePortfolio invalidAccountAddedErrorDescription.
			self assert: (simplePortfolio hasAccount: portfolio2).
			self deny: (portfolio2 hasAccount: simplePortfolio).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:14:40' prior: 50924272!
test10CanNotAddAParent

	| simplePortfolio emptyPortfolio |
	
	simplePortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.
	simplePortfolio addAccount: emptyPortfolio.
	
	self should: [ 	emptyPortfolio addAccount: simplePortfolio. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: simplePortfolio invalidAccountAddedErrorDescription.
			self assert: (simplePortfolio hasAccount: emptyPortfolio).
			self deny: (emptyPortfolio hasAccount: simplePortfolio).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:15:11' prior: 50922424!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| rootPortfolio portfolio2 portfolio3 |
	
	rootPortfolio _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	rootPortfolio addAccount: portfolio2.
	portfolio2 addAccount: portfolio3.
	
	self should: [ 	rootPortfolio addAccount: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: rootPortfolio invalidAccountAddedErrorDescription.
			self assert: 2 equals: rootPortfolio allAccountsSize.
			self assert: 1 equals: portfolio2 allAccountsSize.
			self assert: 0 equals: portfolio3 allAccountsSize.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:15:26' prior: 50924309!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| rootPortfolio fatherPortfolio portfolio3 |
	
	rootPortfolio _ Portfolio new.
	fatherPortfolio _ Portfolio new.
	portfolio3 _ Portfolio new.
	rootPortfolio addAccount: fatherPortfolio.
	fatherPortfolio addAccount: portfolio3.
	
	self should: [ 	rootPortfolio addAccount: portfolio3. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: rootPortfolio invalidAccountAddedErrorDescription.
			self assert: 2 equals: rootPortfolio allAccountsSize.
			self assert: 1 equals: fatherPortfolio allAccountsSize.
			self assert: 0 equals: portfolio3 allAccountsSize.]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:15:39' prior: 50924332!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| rootPortfolio fatherPortfolio childrenPortfolio |
	
	rootPortfolio _ Portfolio new.
	fatherPortfolio _ Portfolio new.
	childrenPortfolio _ Portfolio new.
	rootPortfolio addAccount: fatherPortfolio.
	fatherPortfolio addAccount: childrenPortfolio.
	
	self should: [ 	rootPortfolio addAccount: childrenPortfolio. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: rootPortfolio invalidAccountAddedErrorDescription.
			self assert: 2 equals: rootPortfolio allAccountsSize.
			self assert: 1 equals: fatherPortfolio allAccountsSize.
			self assert: 0 equals: childrenPortfolio allAccountsSize.]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/25/2021 17:15:52'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:16:51' prior: 50922805!
test12CanNotAddARootsChildrenToAChildren

	| childrenPortfolio portfolio2 portfolio3 portfolio4 portfolio5 account |
	
	childrenPortfolio _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	portfolio5 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	portfolio2 addAccount: childrenPortfolio.
	portfolio3 addAccount: portfolio2.
	portfolio4 addAccount: childrenPortfolio.
	portfolio5 addAccount: portfolio4.
	portfolio3 addAccount: account.
	portfolio5 addAccount: account.
	
	self should: [ 	childrenPortfolio addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: childrenPortfolio invalidAccountAddedErrorDescription.
			self assert: (portfolio3 hasAccount: account).
			self assert: (portfolio5 hasAccount: account).
			self deny: (childrenPortfolio hasAccount: account).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:17:07' prior: 50924428!
test12CanNotAddARootsChildrenToAChildren

	| childrenPortfolio portfolio2 portfolio3 portfolio4 portfolio5 sharedReceptiveAccount |
	
	childrenPortfolio _ Portfolio new.
	portfolio2 _ Portfolio new.	
	portfolio3 _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	portfolio5 _ Portfolio new.	
	sharedReceptiveAccount _ ReceptiveAccount new.	
	portfolio2 addAccount: childrenPortfolio.
	portfolio3 addAccount: portfolio2.
	portfolio4 addAccount: childrenPortfolio.
	portfolio5 addAccount: portfolio4.
	portfolio3 addAccount: sharedReceptiveAccount.
	portfolio5 addAccount: sharedReceptiveAccount.
	
	self should: [ 	childrenPortfolio addAccount: sharedReceptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: childrenPortfolio invalidAccountAddedErrorDescription.
			self assert: (portfolio3 hasAccount: sharedReceptiveAccount).
			self assert: (portfolio5 hasAccount: sharedReceptiveAccount).
			self deny: (childrenPortfolio hasAccount: sharedReceptiveAccount).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:17:30' prior: 50924459!
test12CanNotAddARootsChildrenToAChildren

	| childrenPortfolio portfolio2 aRootPortfolio portfolio4 portfolio5 sharedReceptiveAccount |
	
	childrenPortfolio _ Portfolio new.
	portfolio2 _ Portfolio new.	
	aRootPortfolio _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	portfolio5 _ Portfolio new.	
	sharedReceptiveAccount _ ReceptiveAccount new.	
	portfolio2 addAccount: childrenPortfolio.
	aRootPortfolio addAccount: portfolio2.
	portfolio4 addAccount: childrenPortfolio.
	portfolio5 addAccount: portfolio4.
	aRootPortfolio addAccount: sharedReceptiveAccount.
	portfolio5 addAccount: sharedReceptiveAccount.
	
	self should: [ 	childrenPortfolio addAccount: sharedReceptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: childrenPortfolio invalidAccountAddedErrorDescription.
			self assert: (aRootPortfolio hasAccount: sharedReceptiveAccount).
			self assert: (portfolio5 hasAccount: sharedReceptiveAccount).
			self deny: (childrenPortfolio hasAccount: sharedReceptiveAccount).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:17:37' prior: 50924494!
test12CanNotAddARootsChildrenToAChildren

	| childrenPortfolio portfolio2 aRootPortfolio portfolio4 anotherRootPortfolio sharedReceptiveAccount |
	
	childrenPortfolio _ Portfolio new.
	portfolio2 _ Portfolio new.	
	aRootPortfolio _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	anotherRootPortfolio _ Portfolio new.	
	sharedReceptiveAccount _ ReceptiveAccount new.	
	portfolio2 addAccount: childrenPortfolio.
	aRootPortfolio addAccount: portfolio2.
	portfolio4 addAccount: childrenPortfolio.
	anotherRootPortfolio addAccount: portfolio4.
	aRootPortfolio addAccount: sharedReceptiveAccount.
	anotherRootPortfolio addAccount: sharedReceptiveAccount.
	
	self should: [ 	childrenPortfolio addAccount: sharedReceptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: childrenPortfolio invalidAccountAddedErrorDescription.
			self assert: (aRootPortfolio hasAccount: sharedReceptiveAccount).
			self assert: (anotherRootPortfolio hasAccount: sharedReceptiveAccount).
			self deny: (childrenPortfolio hasAccount: sharedReceptiveAccount).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:17:46' prior: 50924530!
test12CanNotAddARootsChildrenToAChildren

	| childrenPortfolio aFatherPortfolio aRootPortfolio portfolio4 anotherRootPortfolio sharedReceptiveAccount |
	
	childrenPortfolio _ Portfolio new.
	aFatherPortfolio _ Portfolio new.	
	aRootPortfolio _ Portfolio new.	
	portfolio4 _ Portfolio new.	
	anotherRootPortfolio _ Portfolio new.	
	sharedReceptiveAccount _ ReceptiveAccount new.	
	aFatherPortfolio addAccount: childrenPortfolio.
	aRootPortfolio addAccount: aFatherPortfolio.
	portfolio4 addAccount: childrenPortfolio.
	anotherRootPortfolio addAccount: portfolio4.
	aRootPortfolio addAccount: sharedReceptiveAccount.
	anotherRootPortfolio addAccount: sharedReceptiveAccount.
	
	self should: [ 	childrenPortfolio addAccount: sharedReceptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: childrenPortfolio invalidAccountAddedErrorDescription.
			self assert: (aRootPortfolio hasAccount: sharedReceptiveAccount).
			self assert: (anotherRootPortfolio hasAccount: sharedReceptiveAccount).
			self deny: (childrenPortfolio hasAccount: sharedReceptiveAccount).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:17:57' prior: 50924567!
test12CanNotAddARootsChildrenToAChildren

	| childrenPortfolio aFatherPortfolio aRootPortfolio anotherFatherPortfolio anotherRootPortfolio sharedReceptiveAccount |
	
	childrenPortfolio _ Portfolio new.
	aFatherPortfolio _ Portfolio new.	
	aRootPortfolio _ Portfolio new.	
	anotherFatherPortfolio _ Portfolio new.	
	anotherRootPortfolio _ Portfolio new.	
	sharedReceptiveAccount _ ReceptiveAccount new.	
	aFatherPortfolio addAccount: childrenPortfolio.
	aRootPortfolio addAccount: aFatherPortfolio.
	anotherFatherPortfolio addAccount: childrenPortfolio.
	anotherRootPortfolio addAccount: anotherFatherPortfolio.
	aRootPortfolio addAccount: sharedReceptiveAccount.
	anotherRootPortfolio addAccount: sharedReceptiveAccount.
	
	self should: [ 	childrenPortfolio addAccount: sharedReceptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: childrenPortfolio invalidAccountAddedErrorDescription.
			self assert: (aRootPortfolio hasAccount: sharedReceptiveAccount).
			self assert: (anotherRootPortfolio hasAccount: sharedReceptiveAccount).
			self deny: (childrenPortfolio hasAccount: sharedReceptiveAccount).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:19:11' prior: 50922537!
test13CanNotAddMyself

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self should: [ 	portfolio addAccount: portfolio. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio invalidAccountAddedErrorDescription.
			self deny: (portfolio hasAccount: portfolio).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:19:40' prior: 50924644!
test13CanNotAddMyself

	| emptyPortfolio |
	
	emptyPortfolio _ Portfolio new.
	
	self should: [ 	emptyPortfolio addAccount: emptyPortfolio. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: emptyPortfolio invalidAccountAddedErrorDescription.
			self deny: (emptyPortfolio hasAccount: emptyPortfolio).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:20:10' prior: 50922552!
test14CanNotAddAnAccountFromMyFathersChildren

	| composedPortfolio portfolio2 account |
	
	composedPortfolio _ Portfolio new.
	portfolio2 _ Portfolio new.	
	account _ ReceptiveAccount new.	
	composedPortfolio addAccount: portfolio2.
	composedPortfolio addAccount: account.
	
	self should: [ 	portfolio2 addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: portfolio2 invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: account).
			self assert: (composedPortfolio hasAccount: portfolio2).
			self deny: (portfolio2 hasAccount: account).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:20:22' prior: 50924671!
test14CanNotAddAnAccountFromMyFathersChildren

	| composedPortfolio emptyPortfolio account |
	
	composedPortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.	
	account _ ReceptiveAccount new.	
	composedPortfolio addAccount: emptyPortfolio.
	composedPortfolio addAccount: account.
	
	self should: [ 	emptyPortfolio addAccount: account. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: emptyPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: account).
			self assert: (composedPortfolio hasAccount: emptyPortfolio).
			self deny: (emptyPortfolio hasAccount: account).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:20:34' prior: 50924694!
test14CanNotAddAnAccountFromMyFathersChildren

	| composedPortfolio emptyPortfolio receptiveAccount |
	
	composedPortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.	
	receptiveAccount _ ReceptiveAccount new.	
	composedPortfolio addAccount: emptyPortfolio.
	composedPortfolio addAccount: receptiveAccount.
	
	self should: [ 	emptyPortfolio addAccount: receptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: emptyPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: receptiveAccount).
			self assert: (composedPortfolio hasAccount: emptyPortfolio).
			self deny: (emptyPortfolio hasAccount: receptiveAccount).]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/25/2021 17:20:46'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:24:09'!
test14CanNotAddToAChildrenAnAccountThatBelongToTheFathersChildren

	| composedPortfolio emptyPortfolio receptiveAccount |
	
	composedPortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.	
	receptiveAccount _ ReceptiveAccount new.	
	composedPortfolio addAccount: emptyPortfolio.
	composedPortfolio addAccount: receptiveAccount.
	
	self should: [ 	emptyPortfolio addAccount: receptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: emptyPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: receptiveAccount).
			self assert: (composedPortfolio hasAccount: emptyPortfolio).
			self deny: (emptyPortfolio hasAccount: receptiveAccount).]! !

!methodRemoval: PortfolioTest #test14CanNotAddAnAccountFromMyFathersChildren stamp: 'Ciro 5/25/2021 17:24:13'!
test14CanNotAddAnAccountFromMyFathersChildren

	| composedPortfolio emptyPortfolio receptiveAccount |
	
	composedPortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.	
	receptiveAccount _ ReceptiveAccount new.	
	composedPortfolio addAccount: emptyPortfolio.
	composedPortfolio addAccount: receptiveAccount.
	
	self should: [ 	emptyPortfolio addAccount: receptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: emptyPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: receptiveAccount).
			self assert: (composedPortfolio hasAccount: emptyPortfolio).
			self deny: (emptyPortfolio hasAccount: receptiveAccount).]!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:27:13'!
test11CanNotAddAnAccountThatBelongsToMyChildsAccounts

	| rootPortfolio fatherPortfolio childrenPortfolio |
	
	rootPortfolio _ Portfolio new.
	fatherPortfolio _ Portfolio new.
	childrenPortfolio _ Portfolio new.
	rootPortfolio addAccount: fatherPortfolio.
	fatherPortfolio addAccount: childrenPortfolio.
	
	self should: [ 	rootPortfolio addAccount: childrenPortfolio. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: rootPortfolio invalidAccountAddedErrorDescription.
			self assert: 2 equals: rootPortfolio allAccountsSize.
			self assert: 1 equals: fatherPortfolio allAccountsSize.
			self assert: 0 equals: childrenPortfolio allAccountsSize.]! !

!methodRemoval: PortfolioTest #test11CanNotAddAPortfolioFromAChildrenPortfolio stamp: 'Ciro 5/25/2021 17:27:18'!
test11CanNotAddAPortfolioFromAChildrenPortfolio

	| rootPortfolio fatherPortfolio childrenPortfolio |
	
	rootPortfolio _ Portfolio new.
	fatherPortfolio _ Portfolio new.
	childrenPortfolio _ Portfolio new.
	rootPortfolio addAccount: fatherPortfolio.
	fatherPortfolio addAccount: childrenPortfolio.
	
	self should: [ 	rootPortfolio addAccount: childrenPortfolio. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: rootPortfolio invalidAccountAddedErrorDescription.
			self assert: 2 equals: rootPortfolio allAccountsSize.
			self assert: 1 equals: fatherPortfolio allAccountsSize.
			self assert: 0 equals: childrenPortfolio allAccountsSize.]!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountThatBelongsToMyChildsAccounts stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddToAChildrenAnAccountThatBelongToTheFathersChildren stamp: 'Ciro 5/25/2021 17:27:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:27:24'!
test14CanNotAddToAChildrenAnAccountThatBelongsToTheFathersChildren

	| composedPortfolio emptyPortfolio receptiveAccount |
	
	composedPortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.	
	receptiveAccount _ ReceptiveAccount new.	
	composedPortfolio addAccount: emptyPortfolio.
	composedPortfolio addAccount: receptiveAccount.
	
	self should: [ 	emptyPortfolio addAccount: receptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: emptyPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: receptiveAccount).
			self assert: (composedPortfolio hasAccount: emptyPortfolio).
			self deny: (emptyPortfolio hasAccount: receptiveAccount).]! !

!methodRemoval: PortfolioTest #test14CanNotAddToAChildrenAnAccountThatBelongToTheFathersChildren stamp: 'Ciro 5/25/2021 17:27:28'!
test14CanNotAddToAChildrenAnAccountThatBelongToTheFathersChildren

	| composedPortfolio emptyPortfolio receptiveAccount |
	
	composedPortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.	
	receptiveAccount _ ReceptiveAccount new.	
	composedPortfolio addAccount: emptyPortfolio.
	composedPortfolio addAccount: receptiveAccount.
	
	self should: [ 	emptyPortfolio addAccount: receptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: emptyPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: receptiveAccount).
			self assert: (composedPortfolio hasAccount: emptyPortfolio).
			self deny: (emptyPortfolio hasAccount: receptiveAccount).]!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:28:16'!
test10CanNotAddMyParent

	| simplePortfolio emptyPortfolio |
	
	simplePortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.
	simplePortfolio addAccount: emptyPortfolio.
	
	self should: [ 	emptyPortfolio addAccount: simplePortfolio. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: simplePortfolio invalidAccountAddedErrorDescription.
			self assert: (simplePortfolio hasAccount: emptyPortfolio).
			self deny: (emptyPortfolio hasAccount: simplePortfolio).]! !

!methodRemoval: PortfolioTest #test10CanNotAddAParent stamp: 'Ciro 5/25/2021 17:28:19'!
test10CanNotAddAParent

	| simplePortfolio emptyPortfolio |
	
	simplePortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.
	simplePortfolio addAccount: emptyPortfolio.
	
	self should: [ 	emptyPortfolio addAccount: simplePortfolio. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: simplePortfolio invalidAccountAddedErrorDescription.
			self assert: (simplePortfolio hasAccount: emptyPortfolio).
			self deny: (emptyPortfolio hasAccount: simplePortfolio).]!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:30:39'!
test09ThereCanBeNoDuplicatedAccounts

	| composedPortfolio simplePortfolioInTheTree simplePortfolioOutTheTree aReceptiveAccount sharedReceptiveAccount  |
	
	composedPortfolio _ Portfolio new.
	simplePortfolioInTheTree _ Portfolio new.
	simplePortfolioOutTheTree _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	sharedReceptiveAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolioInTheTree addAccount: sharedReceptiveAccount.
	simplePortfolioOutTheTree addAccount: sharedReceptiveAccount.
	composedPortfolio addAccount: simplePortfolioInTheTree.
	
	self should: [ 	composedPortfolio addAccount: simplePortfolioOutTheTree ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: sharedReceptiveAccount).
			self assert: (simplePortfolioInTheTree hasAccount: sharedReceptiveAccount).
			self assert: (simplePortfolioOutTheTree hasAccount: sharedReceptiveAccount).
			self assert: (composedPortfolio hasAccount: simplePortfolioInTheTree).
			self deny: (composedPortfolio hasAccount: simplePortfolioOutTheTree).]! !

!methodRemoval: PortfolioTest #test09NoDuplicatedAccounts stamp: 'Ciro 5/25/2021 17:30:43'!
test09NoDuplicatedAccounts

	| composedPortfolio simplePortfolioInTheTree simplePortfolioOutTheTree aReceptiveAccount sharedReceptiveAccount  |
	
	composedPortfolio _ Portfolio new.
	simplePortfolioInTheTree _ Portfolio new.
	simplePortfolioOutTheTree _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	sharedReceptiveAccount _ ReceptiveAccount new. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolioInTheTree addAccount: sharedReceptiveAccount.
	simplePortfolioOutTheTree addAccount: sharedReceptiveAccount.
	composedPortfolio addAccount: simplePortfolioInTheTree.
	
	self should: [ 	composedPortfolio addAccount: simplePortfolioOutTheTree ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: composedPortfolio invalidAccountAddedErrorDescription.
			self assert: (composedPortfolio hasAccount: aReceptiveAccount).
			self assert: (composedPortfolio hasAccount: sharedReceptiveAccount).
			self assert: (simplePortfolioInTheTree hasAccount: sharedReceptiveAccount).
			self assert: (simplePortfolioOutTheTree hasAccount: sharedReceptiveAccount).
			self assert: (composedPortfolio hasAccount: simplePortfolioInTheTree).
			self deny: (composedPortfolio hasAccount: simplePortfolioOutTheTree).]!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:31:14'!
test08BalanceFromAComposedPortfolio

	| composedPortfolio simplePortfolio aReceptiveAccount anotherReceptiveAccount deposit1 deposit2 |
	
	composedPortfolio _ Portfolio new.
	simplePortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: aReceptiveAccount.
	deposit2 _ Deposit register: 100 on: anotherReceptiveAccount. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolio addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolio.
	
	self assert: 200 equals: composedPortfolio balance.
	self assert: 100 equals: simplePortfolio balance.
	self assert: 2 equals: composedPortfolio transactionsSize.
	self assert: 1 equals: simplePortfolio transactionsSize.
	self assert: (composedPortfolio hasRegistered: deposit1).
	self assert: (composedPortfolio hasRegistered: deposit2).
	self assert: (simplePortfolio hasRegistered: deposit2).! !

!methodRemoval: PortfolioTest #test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:31:17'!
test08BalanceAfterAddPortfolioWithAccountsToPortfolioWithAccounts

	| composedPortfolio simplePortfolio aReceptiveAccount anotherReceptiveAccount deposit1 deposit2 |
	
	composedPortfolio _ Portfolio new.
	simplePortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new.
	deposit1 _ Deposit register: 100 on: aReceptiveAccount.
	deposit2 _ Deposit register: 100 on: anotherReceptiveAccount. 
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolio addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolio.
	
	self assert: 200 equals: composedPortfolio balance.
	self assert: 100 equals: simplePortfolio balance.
	self assert: 2 equals: composedPortfolio transactionsSize.
	self assert: 1 equals: simplePortfolio transactionsSize.
	self assert: (composedPortfolio hasRegistered: deposit1).
	self assert: (composedPortfolio hasRegistered: deposit2).
	self assert: (simplePortfolio hasRegistered: deposit2).!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:31:40'!
test07CreateComposedPortfolio

	| composedPortfolio simplePortfolio aReceptiveAccount anotherReceptiveAccount |
	
	composedPortfolio _ Portfolio new.
	simplePortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new.
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolio addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolio.
	
	self assert: 3 equals: composedPortfolio allAccountsSize.
	self assert: 1 equals: simplePortfolio allAccountsSize.
	self assert: (composedPortfolio hasAccount: aReceptiveAccount).
	self assert: (composedPortfolio hasAccount: simplePortfolio).
	self assert: (simplePortfolio hasAccount: anotherReceptiveAccount).! !

!methodRemoval: PortfolioTest #test07AddPortfolioWithAccountsToPortfolioWithAccounts stamp: 'Ciro 5/25/2021 17:31:43'!
test07AddPortfolioWithAccountsToPortfolioWithAccounts

	| composedPortfolio simplePortfolio aReceptiveAccount anotherReceptiveAccount |
	
	composedPortfolio _ Portfolio new.
	simplePortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new.
	composedPortfolio addAccount: aReceptiveAccount.
	simplePortfolio addAccount: anotherReceptiveAccount.
	composedPortfolio addAccount: simplePortfolio.
	
	self assert: 3 equals: composedPortfolio allAccountsSize.
	self assert: 1 equals: simplePortfolio allAccountsSize.
	self assert: (composedPortfolio hasAccount: aReceptiveAccount).
	self assert: (composedPortfolio hasAccount: simplePortfolio).
	self assert: (simplePortfolio hasAccount: anotherReceptiveAccount).!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:31:53'!
test06CreateSimplePortfolio

	| simplePortfolio emptyPortfolio |
	
	simplePortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.
	simplePortfolio addAccount: emptyPortfolio.
	
	self assert: 1 equals: simplePortfolio allAccountsSize.
	self assert: (simplePortfolio hasAccount: emptyPortfolio).! !

!methodRemoval: PortfolioTest #test06AddPortfolioToPortfolio stamp: 'Ciro 5/25/2021 17:31:56'!
test06AddPortfolioToPortfolio

	| simplePortfolio emptyPortfolio |
	
	simplePortfolio _ Portfolio new.
	emptyPortfolio _ Portfolio new.
	simplePortfolio addAccount: emptyPortfolio.
	
	self assert: 1 equals: simplePortfolio allAccountsSize.
	self assert: (simplePortfolio hasAccount: emptyPortfolio).!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:32:21' prior: 50923470!
test04PortfolioDoNotKnowsRegisteredTransactions

	| emptyPortfolio deposit withdraw|
	
	emptyPortfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: emptyPortfolio balance.
	self assert: 0 equals: emptyPortfolio transactionsSize.
	self deny: (emptyPortfolio hasRegistered: deposit).
	self deny: (emptyPortfolio hasRegistered: withdraw).
! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:33:16'!
test04PortfolioDoNotKnowsNotRegisteredTransactions

	| emptyPortfolio deposit withdraw|
	
	emptyPortfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: emptyPortfolio balance.
	self assert: 0 equals: emptyPortfolio transactionsSize.
	self deny: (emptyPortfolio hasRegistered: deposit).
	self deny: (emptyPortfolio hasRegistered: withdraw).
! !

!methodRemoval: PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:33:19'!
test04PortfolioDoNotKnowsRegisteredTransactions

	| emptyPortfolio deposit withdraw|
	
	emptyPortfolio _ Portfolio new.
	deposit _ Deposit for:100.
	withdraw _ Withdraw for: 50.
		
	self assert: 0 equals: emptyPortfolio balance.
	self assert: 0 equals: emptyPortfolio transactionsSize.
	self deny: (emptyPortfolio hasRegistered: deposit).
	self deny: (emptyPortfolio hasRegistered: withdraw).
!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test02AddNewReceptiveAccount stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowsNotRegisteredTransactions stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test05AddMultipleTransactions stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test06CreateSimplePortfolio stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test07CreateComposedPortfolio stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test08BalanceFromAComposedPortfolio stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test09ThereCanBeNoDuplicatedAccounts stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddMyParent stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddAnAccountThatBelongsToMyChildsAccounts stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddMyself stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddToAChildrenAnAccountThatBelongsToTheFathersChildren stamp: 'Ciro 5/25/2021 17:33:51'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:34:25' prior: 50923548!
test05AddMultipleTransactions

	|composedPortfolio aReceptiveAccount anotherReceptiveAccount aDeposit anotherDeposit withdraw |
	
	composedPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	anotherReceptiveAccount _ ReceptiveAccount new.
	composedPortfolio addAccount: aReceptiveAccount.
	composedPortfolio addAccount: anotherReceptiveAccount.
	aDeposit _ Deposit register: 100 on: aReceptiveAccount. 
	anotherDeposit _ Deposit register: 200 on: anotherReceptiveAccount.
	withdraw _ Withdraw register: 50 on: anotherReceptiveAccount.
	
	self assert: 2 equals: composedPortfolio allAccountsSize.
	self assert: 3 equals: composedPortfolio transactionsSize.
	self assert: (composedPortfolio hasAccount: aReceptiveAccount).
	self assert: (composedPortfolio hasAccount: anotherReceptiveAccount).
	self assert: (composedPortfolio hasRegistered: aDeposit).
	self assert: (composedPortfolio hasRegistered: anotherDeposit).
	self assert: (composedPortfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:38:54' prior: 50924605!
test12CanNotAddARootsChildrenToAChildren

	| childrenPortfolio aFatherPortfolio aRootPortfolio anotherFatherPortfolio anotherRootPortfolio sharedReceptiveAccount |
	
	childrenPortfolio _ Portfolio new.
	aRootPortfolio _ Portfolio new.	
	anotherRootPortfolio _ Portfolio new.	
	sharedReceptiveAccount _ ReceptiveAccount new.	
	aRootPortfolio addAccount: childrenPortfolio.
	anotherRootPortfolio addAccount: childrenPortfolio.
	aRootPortfolio addAccount: sharedReceptiveAccount.
	anotherRootPortfolio addAccount: sharedReceptiveAccount.
	
	self should: [ 	childrenPortfolio addAccount: sharedReceptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: childrenPortfolio invalidAccountAddedErrorDescription.
			self assert: (aRootPortfolio hasAccount: sharedReceptiveAccount).
			self assert: (anotherRootPortfolio hasAccount: sharedReceptiveAccount).
			self deny: (childrenPortfolio hasAccount: sharedReceptiveAccount).]! !
!PortfolioTest methodsFor: 'tests' stamp: 'Ciro 5/25/2021 17:39:01' prior: 50925390!
test12CanNotAddARootsChildrenToAChildren

	| childrenPortfolio aRootPortfolio anotherRootPortfolio sharedReceptiveAccount |
	
	childrenPortfolio _ Portfolio new.
	aRootPortfolio _ Portfolio new.	
	anotherRootPortfolio _ Portfolio new.	
	sharedReceptiveAccount _ ReceptiveAccount new.	
	aRootPortfolio addAccount: childrenPortfolio.
	anotherRootPortfolio addAccount: childrenPortfolio.
	aRootPortfolio addAccount: sharedReceptiveAccount.
	anotherRootPortfolio addAccount: sharedReceptiveAccount.
	
	self should: [ 	childrenPortfolio addAccount: sharedReceptiveAccount. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: childrenPortfolio invalidAccountAddedErrorDescription.
			self assert: (aRootPortfolio hasAccount: sharedReceptiveAccount).
			self assert: (anotherRootPortfolio hasAccount: sharedReceptiveAccount).
			self deny: (childrenPortfolio hasAccount: sharedReceptiveAccount).]! !

!testRun: #PortfolioTest #test12CanNotAddARootsChildrenToAChildren stamp: 'Ciro 5/25/2021 17:39:03'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'Ciro 5/25/2021 17:43:06' prior: 50916562 overrides: 50915842!
contains: anAccount 

	^ self = anAccount or: [ accounts anySatisfy: [ :anotherAccount | (anotherAccount contains: anAccount) 
			or: [anAccount contains: anotherAccount]]]! !
!Portfolio methodsFor: 'private' stamp: 'Ciro 5/25/2021 17:43:14' prior: 50925460 overrides: 50915842!
contains: anAccount 

	^ self = anAccount 
		or: [ accounts anySatisfy: [ :anotherAccount | (anotherAccount contains: anAccount) 
			or: [anAccount contains: anotherAccount]]]! !
!Portfolio methodsFor: 'private' stamp: 'Ciro 5/25/2021 17:43:20' prior: 50925469 overrides: 50915842!
contains: anAccount 

	^ self = anAccount 
		or: [ accounts anySatisfy: [ :anotherAccount | (anotherAccount contains: anAccount) 
			or: [anAccount contains: anotherAccount]]]! !

----QUIT----(25 May 2021 17:46:16) CuisUniversity-4532.image priorSource: 18934943!