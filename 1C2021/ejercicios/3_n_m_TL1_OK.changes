----STARTUP---- (9 June 2021 22:26:11) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\CuisToTrain\CuisUniversity-4532.image!


Object subclass: #Carrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Carrito category: 'TusLibros' stamp: 'lmalvarez 6/9/2021 22:26:46'!
Object subclass: #Carrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'lmalvarez 6/9/2021 22:27:23'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'lmalvarez 6/9/2021 22:27:54'!
test01

	! !

!classRemoval: #Carrito stamp: 'lmalvarez 6/9/2021 22:27:57'!
Object subclass: #Carrito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'lmalvarez 6/9/2021 22:30:08'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:30:01' prior: 50897621!
test01
	
	self assert: Cart new isEmpty! !

!testRun: #CartTest #test01 stamp: 'lmalvarez 6/9/2021 22:30:11'!
ERROR!

!testRun: #CartTest #test01 stamp: 'lmalvarez 6/9/2021 22:30:12'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:30:31'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:30:41' prior: 50897646!
isEmpty
	^ true! !

!testRun: #CartTest #test01 stamp: 'lmalvarez 6/9/2021 22:30:43'!
PASSED!

!testRun: #CartTest #test01 stamp: 'lmalvarez 6/9/2021 22:30:44'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:32:59'!
test02

	| cart product |
	
	cart := Cart new.
	product := 'Book'.
	
	cart add: product.
	
	self deny: cart isEmpty.
	self assert: (cart has: product).! !

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:33:03'!
ERROR!

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:33:03'!
ERROR!

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:33:08'!
ERROR!

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:33:13'!
ERROR!

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:33:13'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:33:21'!
add: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:33:55' prior: 50897678!
add: aProduct
 
	! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'lmalvarez 6/9/2021 22:34:12'!
Object subclass: #Cart
	instanceVariableNames: 'products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:34:10' prior: 50897683!
add: aProduct

	products add: aProduct. 
	! !

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:34:15'!
ERROR!

Bag!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:35:09' overrides: 16896425!
initialize

	products := OrderedCollection new.! !

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:35:19'!
FAILURE!

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:35:19'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:35:39'!
has: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:36:04' prior: 50897710!
has: aProduct
	
	products includes: aProduct! !

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:36:04'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:36:20' prior: 50897651!
isEmpty
	^ products isEmpty! !

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:36:23'!
ERROR!

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:36:23'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:36:50' prior: 50897715!
has: aProduct
	
	^ products includes: aProduct! !

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:36:52'!
PASSED!

!testRun: #CartTest #test01 stamp: 'lmalvarez 6/9/2021 22:36:54'!
PASSED!

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:36:54'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:38:15'!
test03

	| cart productA productB |
	
	cart := Cart new.
	productA := 'Book'.
	productB := 'BookOfFairyTales'.
	
	cart add: productA.	
	cart add: productB.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart has: productB).! !

!testRun: #CartTest #test03 stamp: 'lmalvarez 6/9/2021 22:38:16'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:41:47'!
test04

	| cart product |
	
	cart := Cart new.
	product := 'Book'.
	
	cart add: 5 of: product.	
	
	self deny: cart isEmpty.
	self assert: (cart quantityOf: product) equals: 5.! !

!testRun: #CartTest #test04 stamp: 'lmalvarez 6/9/2021 22:41:53'!
ERROR!

!testRun: #CartTest #test04 stamp: 'lmalvarez 6/9/2021 22:41:53'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:42:00'!
add: aSmallInteger of: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:44:28' prior: 50897769!
add: anAmount of: aProduct

	anAmount timesRepeat: (self add: aProduct).
	! !

!testRun: #CartTest #test04 stamp: 'lmalvarez 6/9/2021 22:44:30'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:44:36'!
quantityOf: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:44:48' prior: 50897782!
quantityOf: aProduct 
	
	^ 5! !

!testRun: #CartTest #test04 stamp: 'lmalvarez 6/9/2021 22:44:50'!
PASSED!

!testRun: #CartTest #test04 stamp: 'lmalvarez 6/9/2021 22:44:53'!
PASSED!

!testRun: #CartTest #test01 stamp: 'lmalvarez 6/9/2021 22:44:55'!
PASSED!

!testRun: #CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:44:55'!
PASSED!

!testRun: #CartTest #test03 stamp: 'lmalvarez 6/9/2021 22:44:55'!
PASSED!

!testRun: #CartTest #test04 stamp: 'lmalvarez 6/9/2021 22:44:55'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:45:58'!
test01NewCartShouldBeEmpty
	
	self assert: Cart new isEmpty! !

!methodRemoval: CartTest #test01 stamp: 'lmalvarez 6/9/2021 22:45:58'!
test01
	
	self assert: Cart new isEmpty!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:46:54'!
test02OneProductShouldBeInTheCartAfterAddingIt

	| cart product |
	
	cart := Cart new.
	product := 'Book'.
	
	cart add: product.
	
	self deny: cart isEmpty.
	self assert: (cart has: product).! !

!methodRemoval: CartTest #test02 stamp: 'lmalvarez 6/9/2021 22:46:54'!
test02

	| cart product |
	
	cart := Cart new.
	product := 'Book'.
	
	cart add: product.
	
	self deny: cart isEmpty.
	self assert: (cart has: product).!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:47:18'!
test03ManyProductsShouldBeInTheCartAfterAddingIt

	| cart productA productB |
	
	cart := Cart new.
	productA := 'Book'.
	productB := 'BookOfFairyTales'.
	
	cart add: productA.	
	cart add: productB.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart has: productB).! !

!methodRemoval: CartTest #test03 stamp: 'lmalvarez 6/9/2021 22:47:18'!
test03

	| cart productA productB |
	
	cart := Cart new.
	productA := 'Book'.
	productB := 'BookOfFairyTales'.
	
	cart add: productA.	
	cart add: productB.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart has: productB).!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:48:17'!
test04MultipleInstancesOfTheSameProductShouldBeQuantifiedByTheCart

	| cart product |
	
	cart := Cart new.
	product := 'Book'.
	
	cart add: 5 of: product.	
	
	self deny: cart isEmpty.
	self assert: (cart quantityOf: product) equals: 5.! !

!methodRemoval: CartTest #test04 stamp: 'lmalvarez 6/9/2021 22:48:17'!
test04

	| cart product |
	
	cart := Cart new.
	product := 'Book'.
	
	cart add: 5 of: product.	
	
	self deny: cart isEmpty.
	self assert: (cart quantityOf: product) equals: 5.!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:49:37' prior: 50897787!
quantityOf: aProduct 
	
	^ products occurrencesOf: aProduct.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:49:51' prior: 50897701 overrides: 16896425!
initialize

	products := Bag new.! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'lmalvarez 6/9/2021 22:50:00'!
PASSED!

!testRun: #CartTest #test02OneProductShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 22:50:00'!
PASSED!

!testRun: #CartTest #test03ManyProductsShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 22:50:00'!
PASSED!

!testRun: #CartTest #test04MultipleInstancesOfTheSameProductShouldBeQuantifiedByTheCart stamp: 'lmalvarez 6/9/2021 22:50:00'!
FAILURE!

!testRun: #CartTest #test04MultipleInstancesOfTheSameProductShouldBeQuantifiedByTheCart stamp: 'lmalvarez 6/9/2021 22:50:00'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 22:50:44' prior: 50897774!
add: anAmount of: aProduct

	products add: aProduct withOccurrences: anAmount.
	! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'lmalvarez 6/9/2021 22:50:48'!
PASSED!

!testRun: #CartTest #test02OneProductShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 22:50:48'!
PASSED!

!testRun: #CartTest #test03ManyProductsShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 22:50:48'!
PASSED!

!testRun: #CartTest #test04MultipleInstancesOfTheSameProductShouldBeQuantifiedByTheCart stamp: 'lmalvarez 6/9/2021 22:50:48'!
PASSED!

!classDefinition: #Catalogue category: 'TusLibros' stamp: 'lmalvarez 6/9/2021 23:01:33'!
Object subclass: #Catalogue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:01:28'!
test05CannotAddAProductThatIsNotInTheCatalogue

	| cart catalogue productA productB |
	
	catalogue := Catalogue new.
	
	cart := Cart with: catalogue.
	productA := 'Book'.
	productB := 'BookOfDarkHorrorPower'.
	
	catalogue add: productA.
	
	cart add: productA.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	
	self should: [cart add: productB] 
		raise: Error
		withMessageText: Cart cannotAddAProductThatIsNotInCatalogueErrorSignal.! !

Object subclass: #Catalogue
	instanceVariableNames: 'availableProducts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Catalogue category: 'TusLibros' stamp: 'lmalvarez 6/9/2021 23:02:16'!
Object subclass: #Catalogue
	instanceVariableNames: 'availableProducts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Catalogue methodsFor: 'no messages' stamp: 'lmalvarez 6/9/2021 23:02:27' overrides: 16896425!
initialize

	availableProducts := OrderedCollection new.! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:02:41'!
add: aProduct

	availableProducts add: aProduct.! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:03:10' prior: 50897957 overrides: 16896425!
initialize

	availableProducts := Set new.! !
!Cart class methodsFor: 'no messages' stamp: 'lmalvarez 6/9/2021 23:03:46'!
with: aCatalogue

	^ self new initializeWith: aCatalogue! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'lmalvarez 6/9/2021 23:04:32'!
Object subclass: #Cart
	instanceVariableNames: 'products catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:04:31'!
initializeWith: aCatalogue

	products := Bag new.
	catalogue := Catalogue new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:04:42' prior: 50897984!
initializeWith: aCatalogue

	products := Bag new.
	catalogue := aCatalogue.! !

!methodRemoval: Cart #initialize stamp: 'lmalvarez 6/9/2021 23:04:50'!
initialize

	products := Bag new.!
!Cart class methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:05:48'!
cannotAddAProductThatIsNotInCatalogueErrorSignal

	^ 'Error - Product cannot be added to the catalogue'! !

!methodRemoval: Cart #add: stamp: 'lmalvarez 6/9/2021 23:06:19'!
add: aProduct

	products add: aProduct. 
	!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:08:27' prior: 50897901!
add: anAmount of: aProduct

	catalogue has: aProduct.
	products add: aProduct withOccurrences: anAmount.
	! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:08:42'!
has: aProduct

	^ availableProducts includes: aProduct.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:09:35' prior: 50897814!
test02OneProductShouldBeInTheCartAfterAddingIt

	| cart product |
	
	cart := Cart new.
	product := 'Book'.
	
	cart add: 1 of: product.
	
	self deny: cart isEmpty.
	self assert: (cart has: product).! !

!testRun: #CartTest #test05CannotAddAProductThatIsNotInTheCatalogue stamp: 'lmalvarez 6/9/2021 23:09:37'!
ERROR!

!testRun: #CartTest #test05CannotAddAProductThatIsNotInTheCatalogue stamp: 'lmalvarez 6/9/2021 23:09:37'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:09:47' prior: 50897928!
test05CannotAddAProductThatIsNotInTheCatalogue

	| cart catalogue productA productB |
	
	catalogue := Catalogue new.
	
	cart := Cart with: catalogue.
	productA := 'Book'.
	productB := 'BookOfDarkHorrorPower'.
	
	catalogue add: productA.
	
	cart add: 1 of: productA.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	
	self should: [cart add: productB] 
		raise: Error
		withMessageText: Cart cannotAddAProductThatIsNotInCatalogueErrorSignal.! !

!testRun: #CartTest #test05CannotAddAProductThatIsNotInTheCatalogue stamp: 'lmalvarez 6/9/2021 23:09:48'!
FAILURE!

!testRun: #CartTest #test05CannotAddAProductThatIsNotInTheCatalogue stamp: 'lmalvarez 6/9/2021 23:09:48'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:11:13' prior: 50898009!
add: anAmount of: aProduct

	(catalogue has: aProduct) ifFalse: [ ^ self error: self class cannotAddAProductThatIsNotInCatalogueErrorSignal ].
	products add: aProduct withOccurrences: anAmount.
	! !

!testRun: #CartTest #test05CannotAddAProductThatIsNotInTheCatalogue stamp: 'lmalvarez 6/9/2021 23:11:15'!
FAILURE!

!testRun: #CartTest #test05CannotAddAProductThatIsNotInTheCatalogue stamp: 'lmalvarez 6/9/2021 23:11:15'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:11:39' prior: 50898038!
test05CannotAddAProductThatIsNotInTheCatalogue

	| cart catalogue productA productB |
	
	catalogue := Catalogue new.
	
	cart := Cart with: catalogue.
	productA := 'Book'.
	productB := 'BookOfDarkHorrorPower'.
	
	catalogue add: productA.
	
	cart add: 1 of: productA.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	
	self should: [cart add: 1 of: productB ] 
		raise: Error
		withMessageText: Cart cannotAddAProductThatIsNotInCatalogueErrorSignal.! !

!testRun: #CartTest #test05CannotAddAProductThatIsNotInTheCatalogue stamp: 'lmalvarez 6/9/2021 23:11:40'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:13:03'!
catalogueWith: aProduct

	| catalogue |
	
	catalogue := Catalogue new.
	
	catalogue add: aProduct.
	
	^ catalogue! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:14:42' prior: 50898080!
test05CannotAddAProductThatIsNotInTheCatalogue

	| cart productA productB |
	
	productA := 'Book'.
	productB := 'BookOfDarkHorrorPower'.
	
	cart := Cart with: (self catalogueWith: productA).
	
	cart add: 1 of: productA.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	
	self should: [cart add: 1 of: productB ] 
		raise: Error
		withMessageText: Cart cannotAddAProductThatIsNotInCatalogueErrorSignal.! !

!testRun: #CartTest #test05CannotAddAProductThatIsNotInTheCatalogue stamp: 'lmalvarez 6/9/2021 23:14:45'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:15:18'!
emptyCatalogue

	^ Catalogue new.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:15:35' prior: 50897805!
test01NewCartShouldBeEmpty
	
	self assert: (Cart with: self emptyCatalogue) isEmpty! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'lmalvarez 6/9/2021 23:15:40'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:16:30' prior: 50898021!
test02OneProductShouldBeInTheCartAfterAddingIt

	| cart product |
	
	product := 'Book'.
	
	cart := Cart with: (self catalogueWith: product).
	
	cart add: 1 of: product.
	
	self deny: cart isEmpty.
	self assert: (cart has: product).! !

!testRun: #CartTest #test02OneProductShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 23:16:31'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:17:37' prior: 50897830!
test03ManyProductsShouldBeInTheCartAfterAddingIt

	| cart productA productB |
	
	productA := 'Book'.
	productB := 'BookOfFairyTales'.
	
	cart := Cart with: ( self catalogueWith: productA ).
	
	cart add: productA.	
	cart add: productB.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart has: productB).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:18:02'!
catalogueWith: aProduct and: anotherProduct

	| catalogue |
	
	catalogue := Catalogue new.
	
	catalogue add: aProduct.
	catalogue add: anotherProduct.
	
	^ catalogue! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:18:14' prior: 50898156!
test03ManyProductsShouldBeInTheCartAfterAddingIt

	| cart productA productB |
	
	productA := 'Book'.
	productB := 'BookOfFairyTales'.
	
	cart := Cart with: ( self catalogueWith: productA and: productB ).
	
	cart add: productA.	
	cart add: productB.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart has: productB).! !

!testRun: #CartTest #test03ManyProductsShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 23:18:16'!
ERROR!

!testRun: #CartTest #test03ManyProductsShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 23:18:16'!
ERROR!

!testRun: #CartTest #test03ManyProductsShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 23:18:30'!
ERROR!

!testRun: #CartTest #test03ManyProductsShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 23:18:30'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:18:42' prior: 50898179!
test03ManyProductsShouldBeInTheCartAfterAddingIt

	| cart productA productB |
	
	productA := 'Book'.
	productB := 'BookOfFairyTales'.
	
	cart := Cart with: ( self catalogueWith: productA and: productB ).
	
	cart add: 1 of: productA.	
	cart add: 1 of: productB.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart has: productB).! !

!testRun: #CartTest #test03ManyProductsShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 23:18:44'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:19:08' prior: 50897853!
test04MultipleInstancesOfTheSameProductShouldBeQuantifiedByTheCart

	| cart product |
	
	product := 'Book'.
	cart := Cart with: ( self catalogueWith: product ).
	
	cart add: 5 of: product.	
	
	self deny: cart isEmpty.
	self assert: (cart quantityOf: product) equals: 5.! !

!testRun: #CartTest #test04MultipleInstancesOfTheSameProductShouldBeQuantifiedByTheCart stamp: 'lmalvarez 6/9/2021 23:19:10'!
PASSED!

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'lmalvarez 6/9/2021 23:19:11'!
PASSED!

!testRun: #CartTest #test02OneProductShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 23:19:11'!
PASSED!

!testRun: #CartTest #test03ManyProductsShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 23:19:11'!
PASSED!

!testRun: #CartTest #test04MultipleInstancesOfTheSameProductShouldBeQuantifiedByTheCart stamp: 'lmalvarez 6/9/2021 23:19:11'!
PASSED!

!testRun: #CartTest #test05CannotAddAProductThatIsNotInTheCatalogue stamp: 'lmalvarez 6/9/2021 23:19:11'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:24:59'!
test03ManyProductsShouldBeInTheCartAfterAddingThem

	| cart productA productB |
	
	productA := 'Book'.
	productB := 'BookOfFairyTales'.
	
	cart := Cart with: ( self catalogueWith: productA and: productB ).
	
	cart add: 1 of: productA.	
	cart add: 1 of: productB.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart has: productB).! !

!methodRemoval: CartTest #test03ManyProductsShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 23:25:00'!
test03ManyProductsShouldBeInTheCartAfterAddingIt

	| cart productA productB |
	
	productA := 'Book'.
	productB := 'BookOfFairyTales'.
	
	cart := Cart with: ( self catalogueWith: productA and: productB ).
	
	cart add: 1 of: productA.	
	cart add: 1 of: productB.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart has: productB).!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:28:54'!
test06

	| cart productA productB |
	
	productA := 'Book'.
	productB := 'BookOfDarkHorrorPower'.
	
	cart := Cart with: (self catalogueWith: productA).
	
	cart add: 1 of: productA.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart quantityOf: productB).
	
	self should: [cart add: 1 of: productB ] 
		raise: Error
		withMessageText: Cart cannotAddAProductThatIsNotInCatalogueErrorSignal.! !

!testRun: #CartTest #test06 stamp: 'lmalvarez 6/9/2021 23:28:55'!
ERROR!

!testRun: #CartTest #test06 stamp: 'lmalvarez 6/9/2021 23:28:55'!
ERROR!

!testRun: #CartTest #test06 stamp: 'lmalvarez 6/9/2021 23:29:02'!
ERROR!

!testRun: #CartTest #test06 stamp: 'lmalvarez 6/9/2021 23:29:02'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:29:52' prior: 50898290!
test06

	| cart productA productB |
	
	productA := 'Book'.
	productB := 'BookOfDarkHorrorPower'.
	
	cart := Cart with: (self catalogueWith: productA).
	
	cart add: 1 of: productA.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart quantityOf: productB) equals: 0.
	
	self should: [cart add: 1 of: productB ] 
		raise: Error
		withMessageText: Cart cannotAddAProductThatIsNotInCatalogueErrorSignal.! !

!testRun: #CartTest #test06 stamp: 'lmalvarez 6/9/2021 23:29:53'!
PASSED!

!methodRemoval: CartTest #test06 stamp: 'lmalvarez 6/9/2021 23:29:59'!
test06

	| cart productA productB |
	
	productA := 'Book'.
	productB := 'BookOfDarkHorrorPower'.
	
	cart := Cart with: (self catalogueWith: productA).
	
	cart add: 1 of: productA.
	
	self deny: cart isEmpty.
	self assert: (cart has: productA).
	self assert: (cart quantityOf: productB) equals: 0.
	
	self should: [cart add: 1 of: productB ] 
		raise: Error
		withMessageText: Cart cannotAddAProductThatIsNotInCatalogueErrorSignal.!
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:39:42' prior: 50898063!
add: anAmount of: aProduct

	(catalogue has: aProduct) ifFalse: [ self error: self class cannotAddAProductThatIsNotInCatalogueErrorSignal ].
	products add: aProduct withOccurrences: anAmount.
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:40:10'!
assertThatCatalogueHas: aProduct

	^ (catalogue has: aProduct) ifFalse: [ self error: self class cannotAddAProductThatIsNotInCatalogueErrorSignal ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/9/2021 23:40:10' prior: 50898351!
add: anAmount of: aProduct

	self assertThatCatalogueHas: aProduct.
	products add: aProduct withOccurrences: anAmount.
	! !
!Cart methodsFor: 'accessing' stamp: 'lmalvarez 6/9/2021 23:40:45' prior: 50898360!
assertThatCatalogueHas: aProduct

	(catalogue has: aProduct) ifFalse: [ self error: self class cannotAddAProductThatIsNotInCatalogueErrorSignal ]! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'lmalvarez 6/9/2021 23:40:46'!
PASSED!

!testRun: #CartTest #test02OneProductShouldBeInTheCartAfterAddingIt stamp: 'lmalvarez 6/9/2021 23:40:46'!
PASSED!

!testRun: #CartTest #test03ManyProductsShouldBeInTheCartAfterAddingThem stamp: 'lmalvarez 6/9/2021 23:40:46'!
PASSED!

!testRun: #CartTest #test04MultipleInstancesOfTheSameProductShouldBeQuantifiedByTheCart stamp: 'lmalvarez 6/9/2021 23:40:46'!
PASSED!

!testRun: #CartTest #test05CannotAddAProductThatIsNotInTheCatalogue stamp: 'lmalvarez 6/9/2021 23:40:46'!
PASSED!

----SNAPSHOT----(9 June 2021 23:42:26) CuisUniversity-4532.image priorSource: 18110138!