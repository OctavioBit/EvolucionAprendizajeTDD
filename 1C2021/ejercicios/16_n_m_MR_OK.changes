----STARTUP---- (15 May 2021 18:49:02) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #MarsRoverTest category: '' stamp: 'ja 5/15/2021 18:59:16'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classRemoval: #MarsRoverTest stamp: 'ja 5/15/2021 18:59:56'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTest category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 19:00:24'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'ja 5/15/2021 19:04:27'!
test01! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:05:06' prior: 50879269!
test01

	! !

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 19:15:12'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:13:43' prior: 50879273!
test01

	| mars |
	
	mars _ MarsRover inPosition: 1@3 facing: #North.
	
	self assert: (mars isInPosition: 1@3 facing: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:15:29' prior: 50879284!
test01

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (mars isInPosition: 1@3 heading: #North).! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:15:46'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:16:13'!
inPosition: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:17:28' prior: 50879301!
inPosition: aPosition heading: aCardinalPoint 
	
	^ self new initializeInPosition: aPosition heading: aCardinalPoint! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:17:35'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 19:17:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'ja 5/15/2021 19:17:45'!
initializeInPosition: aPosition heading: aCardinalPoint 
	self shouldBeImplemented.
	position := aPosition.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'initialization' stamp: 'ja 5/15/2021 19:17:48' prior: 50879324!
initializeInPosition: aPosition heading: aCardinalPoint 
	
	position := aPosition.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'initialization' stamp: 'ja 5/15/2021 19:18:04' prior: 50879332!
initializeInPosition: aPosition heading: aCardinalPoint 
	
	position _ aPosition.
	head _ aCardinalPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:18:07'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:18:23'!
isInPosition: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:18:29' prior: 50879348!
isInPosition: aPoint heading: aSymbol 
	
	^ true! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:18:35'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:18:35'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 19:18:49'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:18:55'!
test02

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (mars isInPosition: 1@3 heading: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:19:53' prior: 50879375!
test02

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self deny: (mars isInPosition: 1@3 heading: #South).! !

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:20:01'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:21:04' prior: 50879354!
isInPosition: aPoint heading: aCardinalPoint
	
	^ position = aPoint and:[ head  = aCardinalPoint ]! !

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:21:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:21:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:21:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:21:23'!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self deny: (mars isInPosition: 1@3 heading: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:21:33' prior: 50879406!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (mars isInPosition: 1@3 heading: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:26:53' prior: 50879414!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'b'. 
	
	self assert: (mars isInPosition: 1@3 heading: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:28:12' prior: 50879422!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'b'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:28:23' prior: 50879430!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:29:59'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:30:09'!
process: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:31:01' prior: 50879448!
process: aCommands

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:31:14' prior: 50879453!
process: aCommands

	position + 0@1.

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:31:44' prior: 50879457!
process: commands

	position + 0@1.

	! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:31:59'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:32:12' prior: 50879462!
process: commands

	position + (0@1).

	! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:32:13'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:32:42' prior: 50879469!
process: commands

	position _ position + (0@1).

	! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:32:46'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:32:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:32:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:32:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:35:26'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:35:26'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:35:26'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:36:38'!
test01CorrectInitialPosition

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (mars isInPosition: 1@3 heading: #North).! !

!methodRemoval: MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:36:38'!
test01

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (mars isInPosition: 1@3 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:37:32'!
test03MoveForward

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !

!methodRemoval: MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:37:32'!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:37:49'!
test04MoveBackward

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:38:04' prior: 50879526!
test04MoveBackward

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'b'. 
	
	self assert: (mars isInPosition: 1@2 heading: #North).! !

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 19:40:15'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:42:09' prior: 50879476!
process: commands
	
	commands = 'f' ifTrue: [ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ position _ position - (0@1) ]
	
	

	! !

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 19:42:15'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 19:42:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:42:15'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 19:42:15'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 19:42:15'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:43:24'!
test05TurnRight

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'r'. 
	
	self assert: (mars isInPosition: 1@3 heading: #East).! !

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 19:43:26'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:44:28' prior: 50879546!
process: commands
	
	commands = 'f' ifTrue: [ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ head _ #East]
	
	

	! !

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 19:44:35'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 19:44:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:44:35'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 19:44:35'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 19:44:35'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 19:44:35'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:44:58'!
test05TurnLeft

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'l'. 
	
	self assert: (mars isInPosition: 1@3 heading: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:45:12'!
test06TurnLeft

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'l'. 
	
	self assert: (mars isInPosition: 1@3 heading: #West).! !

!methodRemoval: MarsRoverTest #test05TurnLeft stamp: 'ja 5/15/2021 19:45:12'!
test05TurnLeft

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'l'. 
	
	self assert: (mars isInPosition: 1@3 heading: #West).!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 19:45:16'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:45:57' prior: 50879578!
process: commands
	
	commands = 'f' ifTrue: [ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ head _ #East].
	commands = 'l' ifTrue: [ head _ #West]
	
	

	! !

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 19:46:00'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:58:48'!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	
	self should: [mars process: 'a'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:59:34' prior: 50879657!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [mars process: 'a'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 19:59:35'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:00:50' prior: 50879670!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [mars process: 'a'. ] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:00:51'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:01:18' prior: 50879686!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [mars process: 'a'. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:01:20'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:01:28' prior: 50879702!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [mars process: 'a'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:01:40' prior: 50879719!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [mars process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:02:18'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:02:47' prior: 50879732!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ mars process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:02:48'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:06:31' prior: 50879629!
process: commands
	
	commands = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ ^ head _ #East ].
	commands = 'l' ifTrue: [ ^ head _ #West ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:08:02'!
ERROR!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:08:02'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:08:11'!
invalidCommandErrorDescription
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:08:38' prior: 50879800!
invalidCommandErrorDescription
	
	^ 'Invalid command'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:08:41' prior: 50879805!
invalidCommandErrorDescription
	
	^ 'Invalid command.'! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:08:43'!
FAILURE!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:09:20'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:12:20'!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	
	self assert: (mars isInPosition: 0@3 heading: #East).! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:12:29'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:14:14' prior: 50879764!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	
	"commands = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ ^ head _ #East ].
	commands = 'l' ifTrue: [ ^ head _ #West ]."
	
	self error: self invalidCommandErrorDescription.
	

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:14:29' prior: 50879851!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:14:45' prior: 50879866!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	
	
	

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:14:49' prior: 50879872!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	
	"commands = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ ^ head _ #East ].
	commands = 'l' ifTrue: [ ^ head _ #West ]."
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:15:09'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:16:22'!
processACommand: aCommand

	aCommand = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	aCommand = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	aCommand = 'r' ifTrue: [ ^ head _ #East ].
	aCommand = 'l' ifTrue: [ ^ head _ #West ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:16:40'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:16:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:16:40'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:16:40'!
ERROR!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:16:40'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:16:40'!
ERROR!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:16:40'!
ERROR!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:16:40'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:16:40'!
ERROR!

Object subclass: #MarsRoverHead
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverHead category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:17:38'!
Object subclass: #MarsRoverHead
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRenamed: #MarsRoverHead as: #MarsRoverHeading stamp: 'ja 5/15/2021 20:20:01'!
Smalltalk renameClassNamed: #MarsRoverHead as: #MarsRoverHeading!

MarsRoverHeading subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #North category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:20:10'!
MarsRoverHeading subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverHeading subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #West category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:20:14'!
MarsRoverHeading subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverHeading subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #East category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:20:17'!
MarsRoverHeading subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverHeading subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #South category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:20:20'!
MarsRoverHeading subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:22:42' prior: 50879307!
inPosition: aPosition heading: aCardinalPoint 
	
	^ self new initializeInPosition: aPosition heading: aCardinalPoint! !
!MarsRover methodsFor: 'initialization' stamp: 'ja 5/15/2021 20:23:53' prior: 50879339!
initializeInPosition: aPosition heading: aCardinalPoint 
	
	position _ aPosition.
	head _ MarsRoverHeading for: aCardinalPoint.! !
!MarsRoverHeading class methodsFor: 'no messages' stamp: 'ja 5/15/2021 20:24:49'!
for: aCardinalPoint

	aCardinalPoint = #North ifTrue: [ ^ North new]! !
!MarsRoverHeading class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:25:59' prior: 50880009!
for: aCardinalPoint

	aCardinalPoint = #East ifTrue: [ ^ East new].
	aCardinalPoint = #North ifTrue: [ ^ North new].
	aCardinalPoint = #South ifTrue: [ ^ South new].
	aCardinalPoint = #West ifTrue: [ ^ West new].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:28:37' prior: 50879896!
processACommand: aCommand

	aCommand = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	aCommand = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	aCommand = 'r' ifTrue: [ ^ head _ head turnRight ].
	aCommand = 'l' ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !
!MarsRoverHeading methodsFor: 'no messages' stamp: 'ja 5/15/2021 20:29:05'!
turnRight

	self subclassResponsibility ! !
!East methodsFor: 'no messages' stamp: 'ja 5/15/2021 20:29:42' overrides: 50880038!
turnRight

	^ South new.! !
!North methodsFor: 'nil' stamp: 'ja 5/15/2021 20:29:57' overrides: 50880038!
turnRight

	^ East new.! !
!South methodsFor: 'no messages' stamp: 'ja 5/15/2021 20:30:15' overrides: 50880038!
turnRight

	^ West new.! !
!West methodsFor: 'nil' stamp: 'ja 5/15/2021 20:30:27' overrides: 50880038!
turnRight

	^ North new.! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:30:42'!
turnLeft

	^ South new.! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:30:55'!
turnLeft

	^ East new.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:31:07'!
turnLeft

	^ West new.! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:31:22'!
turnLeft

	^ North new.! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:31:37'!
turnLeft

	self subclassResponsibility ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:33:51' prior: 50880025!
processACommand: aCommand

	aCommand = 'f' ifTrue: [ ^ position _ position + head moveForward ].
	aCommand = 'b' ifTrue: [ ^ position _ position + head moveBackward ].
	aCommand = 'r' ifTrue: [ ^ head _ head turnRight ].
	aCommand = 'l' ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:34:08'!
moveForward

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:34:30' overrides: 50880093!
moveForward

	^ 1@0.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:34:44' overrides: 50880093!
moveForward

	^ 0@1! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:35:07' overrides: 50880093!
moveForward

	^ 0@-1! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:35:23' overrides: 50880093!
moveForward

	^ -1@0! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:35:39'!
moveBackward

	^ 1@0! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:35:48'!
moveBackward

	^ 0@1! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:35:55'!
moveBackward

	^ 0@-1! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:36:04'!
moveBackward

	^ -1@0.! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:36:11'!
moveBackward

	self subclassResponsibility ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:38:30' prior: 50879393!
isInPosition: aPoint heading: aCardinalPoint
	
	^ position = aPoint and:[ head isHeading = aCardinalPoint ]! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:38:48'!
isHeading

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:39:03' overrides: 50880141!
isHeading

	^ #East.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:39:13' overrides: 50880141!
isHeading

	^ #East.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:39:19' prior: 50880150 overrides: 50880141!
isHeading

	^ #North.! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:39:28' overrides: 50880141!
isHeading

	^ #South.! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:39:35' overrides: 50880141!
isHeading

	^ #West.! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:39:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:39:48'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:39:48'!
ERROR!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:39:48'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:39:48'!
ERROR!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:39:48'!
ERROR!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:39:48'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:39:48'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:40:20' prior: 50879879!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	
	"commands = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ ^ head _ #East ].
	commands = 'l' ifTrue: [ ^ head _ #West ]."
	
	
	

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:40:25' prior: 50880189!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	
	
	
	

	! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:40:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:40:29'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:40:29'!
ERROR!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:40:29'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:40:29'!
ERROR!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:40:29'!
ERROR!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:40:29'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:40:29'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:41:43' prior: 50880079!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ position _ position + head moveForward ].
	aCommand = $b ifTrue: [ ^ position _ position + head moveBackward ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:41:45'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:41:47'!
FAILURE!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:41:47'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:43:36' prior: 50879839!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	"mars process: 'flbrbr'."
	mars process: 'flb'.
	
	self assert: (mars isInPosition: 0@3 heading: #East).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:44:00' prior: 50880271!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	"mars process: 'flbrbr'."
	mars process: 'flb'.
	
	"self assert: (mars isInPosition: 0@3 heading: #East)."
	self assert: (mars isInPosition: 0@4 heading: #West).! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:44:02'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:45:34' prior: 50880281!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	"mars process: 'flbrbr'."
	mars process: 'flb'.
	
	"self assert: (mars isInPosition: 0@3 heading: #East)."
	self assert: (mars isInPosition: 2@4 heading: #West).! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:45:35'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:46:21' prior: 50880296!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	"mars process: 'flb'."
	
	"self assert: (mars isInPosition: 0@3 heading: #East)."
	self assert: (mars isInPosition: 2@3 heading: #West).! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:46:23'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:46:29' prior: 50880332!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	"mars process: 'flb'."
	
	"self assert: (mars isInPosition: 0@3 heading: #East)."
	self assert: (mars isInPosition: 2@3 heading: #East).! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:46:31'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:46:36' prior: 50880347!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	
	self assert: (mars isInPosition: 2@3 heading: #East).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:47:12'!
test09ProcessIncorrectCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbxr'.
	
	self assert: (mars isInPosition: 2@3 heading: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:47:22' prior: 50880392!
test09ProcessIncorrectCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbxr'.
	
	
	
	self assert: (mars isInPosition: 2@3 heading: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:47:52' prior: 50880401!
test09ProcessIncorrectCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.

	self should: [ 	mars process: 'flbrbxr'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 2@3 heading: #North)].
	! !

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 20:48:11'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:51:38'!
test10IncorrectCardinalPoint

	self should: [ MarsRover inPosition: 1@3 heading: #A] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCardinalPointErrorDescription].
	! !

!testRun: #MarsRoverTest #test10IncorrectCardinalPoint stamp: 'ja 5/15/2021 20:51:45'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:52:04'!
test10InvalidCardinalPoint

	self should: [ MarsRover inPosition: 1@3 heading: #A] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCardinalPointErrorDescription].
	! !

!methodRemoval: MarsRoverTest #test10IncorrectCardinalPoint stamp: 'ja 5/15/2021 20:52:07'!
test10IncorrectCardinalPoint

	self should: [ MarsRover inPosition: 1@3 heading: #A] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCardinalPointErrorDescription].
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:52:19'!
test07InvalidCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ mars process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!methodRemoval: MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:52:19'!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ mars process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].!
!MarsRoverHeading class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:52:46' prior: 50880015!
for: aCardinalPoint

	aCardinalPoint = #East ifTrue: [ ^ East new].
	aCardinalPoint = #North ifTrue: [ ^ North new].
	aCardinalPoint = #South ifTrue: [ ^ South new].
	aCardinalPoint = #West ifTrue: [ ^ West new].
	
	MarsRover invalidCardinalPointErrorDescription.! !
!MarsRoverHeading class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:52:53' prior: 50880487!
for: aCardinalPoint

	aCardinalPoint = #East ifTrue: [ ^ East new].
	aCardinalPoint = #North ifTrue: [ ^ North new].
	aCardinalPoint = #South ifTrue: [ ^ South new].
	aCardinalPoint = #West ifTrue: [ ^ West new].
	
	self error: MarsRover invalidCardinalPointErrorDescription.! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 20:53:16'!
ERROR!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 20:53:16'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:53:27'!
invalidCardinalPointErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:53:49' prior: 50880541!
invalidCardinalPointErrorDescription
	
	^ 'Invalid cardinal point.'! !

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 20:53:53'!
FAILURE!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:57:04'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverHeading class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:58:36' prior: 50880499!
for: aCardinalPoint

	aCardinalPoint = #East ifTrue: [ ^ East new].
	aCardinalPoint = #North ifTrue: [ ^ North new].
	aCardinalPoint = #South ifTrue: [ ^ South new].
	aCardinalPoint = #West ifTrue: [ ^ West new].
	
	self error: MarsRover invalidCardinalPointErrorDescription.! !

Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:58:43'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:59:09' prior: 50880230!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ position _ position + head moveForwardFor: self ].
	aCommand = $b ifTrue: [ ^ position _ position + head moveBackwardFor: self ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:08'!
moveForward: aMarsRover

	^ 1@0.! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:08'!
moveForward: aMarsRover

	^ 0@-1! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:08'!
moveForward: aMarsRover

	^ 0@1! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:08'!
moveForward: aMarsRover

	^ -1@0! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:08'!
moveForward: aMarsRover

	self subclassResponsibility ! !

!methodRemoval: East #moveForward stamp: 'ja 5/15/2021 21:00:09'!
moveForward

	^ 1@0.!

!methodRemoval: South #moveForward stamp: 'ja 5/15/2021 21:00:09'!
moveForward

	^ 0@-1!

!methodRemoval: North #moveForward stamp: 'ja 5/15/2021 21:00:09'!
moveForward

	^ 0@1!

!methodRemoval: West #moveForward stamp: 'ja 5/15/2021 21:00:09'!
moveForward

	^ -1@0!

!methodRemoval: MarsRoverHeading #moveForward stamp: 'ja 5/15/2021 21:00:09'!
moveForward

	self subclassResponsibility !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:32'!
moveForwardFor: aMarsRover

	^ 0@-1! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:32'!
moveForwardFor: aMarsRover

	^ 1@0.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:32'!
moveForwardFor: aMarsRover

	^ 0@1! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:32'!
moveForwardFor: aMarsRover

	^ -1@0! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:32'!
moveForwardFor: aMarsRover

	self subclassResponsibility ! !

!methodRemoval: South #moveForward: stamp: 'ja 5/15/2021 21:00:32'!
moveForward: aMarsRover

	^ 0@-1!

!methodRemoval: East #moveForward: stamp: 'ja 5/15/2021 21:00:32'!
moveForward: aMarsRover

	^ 1@0.!

!methodRemoval: North #moveForward: stamp: 'ja 5/15/2021 21:00:32'!
moveForward: aMarsRover

	^ 0@1!

!methodRemoval: West #moveForward: stamp: 'ja 5/15/2021 21:00:32'!
moveForward: aMarsRover

	^ -1@0!

!methodRemoval: MarsRoverHeading #moveForward: stamp: 'ja 5/15/2021 21:00:32'!
moveForward: aMarsRover

	self subclassResponsibility !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:01:04' prior: 50880674 overrides: 50880686!
moveForwardFor: aMarsRover

	^ aMarsRover moveForwardEast.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:01:46'!
moveForwardEast

	^ 1@0
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:02:05'!
moveForwardNorth

	^ 0@1
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:02:16'!
moveForwardSouth

	^ 0@-1
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:02:30'!
moveForwardWest

	^ -1@0! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:02:46'!
moveBackwardWest

	^ 1@0! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:03:00'!
moveBackwardEast

	^ -1@0! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:03:09'!
moveBackwardNorth

	^ 0@-1! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:03:17'!
moveBackwardSouth

	^ 0@1! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:03:49' prior: 50880678 overrides: 50880686!
moveForwardFor: aMarsRover

	^ aMarsRover moveForwardNorth! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:08' prior: 50880670 overrides: 50880686!
moveForwardFor: aMarsRover

	^ aMarsRover moveForwardSouth ! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:16' prior: 50880682 overrides: 50880686!
moveForwardFor: aMarsRover

	^ aMarsRover moveForwardWest ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:40'!
moveBackward: aMarsRover

	^ -1@0.! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:40'!
moveBackward: aMarsRover

	^ 1@0! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:40'!
moveBackward: aMarsRover

	^ 0@1! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:40'!
moveBackward: aMarsRover

	self subclassResponsibility ! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:40' overrides: 50880776!
moveBackward: aMarsRover

	^ 0@-1! !

!methodRemoval: East #moveBackward stamp: 'ja 5/15/2021 21:04:40'!
moveBackward

	^ -1@0.!

!methodRemoval: West #moveBackward stamp: 'ja 5/15/2021 21:04:40'!
moveBackward

	^ 1@0!

!methodRemoval: South #moveBackward stamp: 'ja 5/15/2021 21:04:40'!
moveBackward

	^ 0@1!

!methodRemoval: MarsRoverHeading #moveBackward stamp: 'ja 5/15/2021 21:04:40'!
moveBackward

	self subclassResponsibility !

!methodRemoval: North #moveBackward stamp: 'ja 5/15/2021 21:04:40'!
moveBackward

	^ 0@-1!
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:55'!
moveBackwardFor: aMarsRover

	^ 1@0! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:55'!
moveBackwardFor: aMarsRover

	^ -1@0.! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:55'!
moveBackwardFor: aMarsRover

	self subclassResponsibility ! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:55' overrides: 50880808!
moveBackwardFor: aMarsRover

	^ 0@1! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:55' overrides: 50880808!
moveBackwardFor: aMarsRover

	^ 0@-1! !

!methodRemoval: West #moveBackward: stamp: 'ja 5/15/2021 21:04:55'!
moveBackward: aMarsRover

	^ 1@0!

!methodRemoval: East #moveBackward: stamp: 'ja 5/15/2021 21:04:55'!
moveBackward: aMarsRover

	^ -1@0.!

!methodRemoval: MarsRoverHeading #moveBackward: stamp: 'ja 5/15/2021 21:04:55'!
moveBackward: aMarsRover

	self subclassResponsibility !

!methodRemoval: South #moveBackward: stamp: 'ja 5/15/2021 21:04:55'!
moveBackward: aMarsRover

	^ 0@1!

!methodRemoval: North #moveBackward: stamp: 'ja 5/15/2021 21:04:55'!
moveBackward: aMarsRover

	^ 0@-1!
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:05:13' prior: 50880804 overrides: 50880808!
moveBackwardFor: aMarsRover

	^ aMarsRover moveBackwardEast ! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:05:30' prior: 50880818 overrides: 50880808!
moveBackwardFor: aMarsRover

	^ aMarsRover moveBackwardNorth ! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:05:38' prior: 50880813 overrides: 50880808!
moveBackwardFor: aMarsRover

	^ aMarsRover moveBackwardSouth ! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:05:47' prior: 50880800 overrides: 50880808!
moveBackwardFor: aMarsRover

	^ aMarsRover moveBackwardWest ! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:05:50'!
ERROR!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 21:05:50'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 21:05:50'!
ERROR!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 21:05:50'!
FAILURE!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:06:21'!
ERROR!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 21:06:21'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 21:06:21'!
ERROR!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 21:06:21'!
FAILURE!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:07:16'!
ERROR!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:07:31'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:08:04' prior: 50880620!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ position _ position + (head moveForwardFor: self) ].
	aCommand = $b ifTrue: [ ^ position _ position + head moveBackwardFor: self ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 21:08:08'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 21:08:08'!
ERROR!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 21:08:08'!
FAILURE!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 21:08:08'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:08:22' prior: 50880924!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ position _ position + (head moveForwardFor: self) ].
	aCommand = $b ifTrue: [ ^ position _ position + (head moveBackwardFor: self) ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

----QUIT----(15 May 2021 21:59:37) CuisUniversity-4532.image priorSource: 17522690!

----STARTUP---- (16 May 2021 18:39:57) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 18:55:01'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:07:47'!
moveForward

	^ position _ position + (head moveForwardFor: self)! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:07:47' prior: 50880966!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ self moveForward ].
	aCommand = $b ifTrue: [ ^ position _ position + (head moveBackwardFor: self) ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 19:08:00'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:08:32'!
moveBackward

	^ position _ position + (head moveBackwardFor: self)! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:08:32' prior: 50881073!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ self moveForward ].
	aCommand = $b ifTrue: [ ^ self moveBackward ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:09:01'!
turnRight

	^ head _ head turnRight! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:09:01' prior: 50881118!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ self moveForward ].
	aCommand = $b ifTrue: [ ^ self moveBackward ].
	aCommand = $r ifTrue: [ ^ self turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:09:10'!
turnLeft

	^ head _ head turnLeft! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:09:10' prior: 50881134!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ self moveForward ].
	aCommand = $b ifTrue: [ ^ self moveBackward ].
	aCommand = $r ifTrue: [ ^ self turnRight ].
	aCommand = $l ifTrue: [ ^ self turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 19:19:56'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/16/2021 19:22:08' prior: 50879497!
test01CorrectInitialPosition

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:33:56'!
test01MarsRoverStartCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !

!methodRemoval: MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 19:33:56'!
test01CorrectInitialPosition

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:43:52'!
test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint

	self should: [ MarsRover inPosition: 1@3 heading: #A] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCardinalPointErrorDescription].
	! !

!methodRemoval: MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 19:43:52'!
test10InvalidCardinalPoint

	self should: [ MarsRover inPosition: 1@3 heading: #A] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCardinalPointErrorDescription].
	!

!methodRemoval: MarsRoverTest #test02 stamp: 'ja 5/16/2021 19:44:31'!
test02

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self deny: (mars isInPosition: 1@3 heading: #South).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:45:41'!
test10

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'ffff'. 
	
	self assert: (mars isInPosition: 1@7 heading: #North).! !

!testRun: #MarsRoverTest #test10 stamp: 'ja 5/16/2021 19:45:45'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:48:53'!
test03MoveForwardCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !

!methodRemoval: MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 19:48:53'!
test03MoveForward

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:49:15'!
test03MarsRoverMoveForwardCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !

!methodRemoval: MarsRoverTest #test03MoveForwardCorrectly stamp: 'ja 5/16/2021 19:49:15'!
test03MoveForwardCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:49:36'!
test04MarsRoverMoveBackwardCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'b'. 
	
	self assert: (mars isInPosition: 1@2 heading: #North).! !

!methodRemoval: MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 19:49:36'!
test04MoveBackward

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'b'. 
	
	self assert: (mars isInPosition: 1@2 heading: #North).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:50:04'!
test05MarsRoverTurnRightCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'r'. 
	
	self assert: (mars isInPosition: 1@3 heading: #East).! !

!methodRemoval: MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 19:50:04'!
test05TurnRight

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'r'. 
	
	self assert: (mars isInPosition: 1@3 heading: #East).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:50:16'!
test06MarsRoverTurnLeftCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'l'. 
	
	self assert: (mars isInPosition: 1@3 heading: #West).! !

!methodRemoval: MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 19:50:16'!
test06TurnLeft

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'l'. 
	
	self assert: (mars isInPosition: 1@3 heading: #West).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:52:23' prior: 50881321!
test03MarsRoverMoveForwardCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: 'f'. 
	
	self assert: (marsRover isInPosition: 1@4 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:52:46' prior: 50881338!
test04MarsRoverMoveBackwardCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: 'b'. 
	
	self assert: (marsRover isInPosition: 1@2 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:53:03' prior: 50881354!
test05MarsRoverTurnRightCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: 'r'. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #East).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:53:14' prior: 50881370!
test06MarsRoverTurnLeftCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: 'l'. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #West).! !

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ja 5/16/2021 19:53:24'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 20:00:22' prior: 50880202!
process: aCommandsList
	
	aCommandsList do: [ :aCommand | self processACommand: aCommand ].
	
	
	
	

	! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:05:23' prior: 50880461!
test07InvalidCommand

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ marsRover process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 1@3 heading: #North)].! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:06:05'!
test07MarsRoverCanNotProcessInvalidCommand

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ marsRover process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 1@3 heading: #North)].! !

!methodRemoval: MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 20:06:05'!
test07InvalidCommand

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ marsRover process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 1@3 heading: #North)].!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:07:50'!
test08MarsRoverProcessCommandList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	
	self assert: (mars isInPosition: 2@3 heading: #East).! !

!methodRemoval: MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 20:07:50'!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	
	self assert: (mars isInPosition: 2@3 heading: #East).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:08:29' prior: 50881499!
test08MarsRoverProcessCommandList

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'flbrbr'.
	
	self assert: (marsRover isInPosition: 2@3 heading: #East).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:08:42' prior: 50880411!
test09ProcessIncorrectCommandsList

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.

	self should: [ 	marsRover process: 'flbrbxr'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 2@3 heading: #North)].
	! !

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandList stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ja 5/16/2021 20:08:49'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:09:36'!
test08MarsRoverProcessCommandListCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'flbrbr'.
	
	self assert: (marsRover isInPosition: 2@3 heading: #East).! !

!methodRemoval: MarsRoverTest #test08MarsRoverProcessCommandList stamp: 'ja 5/16/2021 20:09:36'!
test08MarsRoverProcessCommandList

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'flbrbr'.
	
	self assert: (marsRover isInPosition: 2@3 heading: #East).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:12:09'!
test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.

	self should: [ 	marsRover process: 'flbrbxr'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 2@3 heading: #North)].
	! !

!methodRemoval: MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 20:12:09'!
test09ProcessIncorrectCommandsList

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.

	self should: [ 	marsRover process: 'flbrbxr'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 2@3 heading: #North)].
	!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:15:21' prior: 50881295!
test10

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: 'ffff'. 
	
	self assert: (marsRover isInPosition: 1@7 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:15:37' prior: 50881621!
test10

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: ''. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !

!testRun: #MarsRoverTest #test10 stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandListCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ja 5/16/2021 20:15:39'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:18:15'!
test10MarsRoverDoesNothingIfItNotReceiveCommands

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: ''. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !

!methodRemoval: MarsRoverTest #test10 stamp: 'ja 5/16/2021 20:18:15'!
test10

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: ''. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).!

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandListCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesNothingIfItNotReceiveCommands stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandListCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesNothingIfItNotReceiveCommands stamp: 'ja 5/16/2021 20:20:39'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:21:50' prior: 50881386!
test03MarsRoverMoveForwardCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'f'. 
	
	self assert: (marsRover isInPosition: 1@4 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:21:54' prior: 50881395!
test04MarsRoverMoveBackwardCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'b'. 
	
	self assert: (marsRover isInPosition: 1@2 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:21:58' prior: 50881404!
test05MarsRoverTurnRightCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'r'. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #East).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:22:02' prior: 50881413!
test06MarsRoverTurnLeftCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'l'. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #West).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:22:12' prior: 50881674!
test10MarsRoverDoesNothingIfItNotReceiveCommands

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: ''. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandListCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesNothingIfItNotReceiveCommands stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

----QUIT----(16 May 2021 20:22:26) CuisUniversity-4532.image priorSource: 17579409!

----STARTUP---- (17 May 2021 15:01:05) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandListCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesNothingIfItNotReceiveCommands stamp: 'ja 5/17/2021 15:01:22'!
PASSED!