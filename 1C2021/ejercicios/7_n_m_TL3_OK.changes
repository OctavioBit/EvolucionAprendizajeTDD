----STARTUP---- (17 June 2021 12:38:26) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!

!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/17/2021 12:42:52'!
test07CartWithBooksGivesPriceSummaryCorrectly
	
	cart addToCart: ISBNCormen withQuantity: 1. 
	self assert: cart priceSummary equals: CormenPrice.! !

!methodRemoval: TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:42:52'!
test07CartWithOneBookGivesPriceSummaryCorrectly
	
	cart addToCart: ISBNCormen withQuantity: 1. 
	self assert: cart priceSummary equals: CormenPrice.!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/17/2021 12:43:03' prior: 50891669!
test07CartWithBooksGivesPriceSummaryCorrectly
	
	cart addToCart: ISBNCormen withQuantity: 2. 
	self assert: cart priceSummary equals: CormenPrice * 2.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/17/2021 12:43:06' prior: 50891685!
test07CartWithBooksGivesPriceSummaryCorrectly
	
	cart addToCart: ISBNCormen withQuantity: 2. 
	self assert: cart priceSummary equals: CormenPrice * 2.! !

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/17/2021 12:43:06'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/17/2021 12:43:52'!
test08DenyCartHasDifferentQuantityOfBookThanAdded
	cart addToCart: ISBNCormen withQuantity: 10.
	
	self deny:( cart contains: ISBNCormen withQuantity: 1)! !

!methodRemoval: TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/17/2021 12:43:52'!
test08DenyRegisterOneBookHasDifferentQuantityThanRegistered
	cart addToCart: ISBNCormen withQuantity: 10.
	
	self deny:( cart contains: ISBNCormen withQuantity: 1)!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/17/2021 12:49:17' prior: 50880476!
test01CantCreateCreditCardWithInvalidNumber

self assert: [self createCreditCardWithInvalidNumber] isValidIndexFor: CreditCard invalidCardNumber.


	"self 
		should: [self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumber equals: anError messageText.
			
			]"

	
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/17/2021 12:49:28' prior: 50891787!
test01CantCreateCreditCardWithInvalidNumber

self assertWhen: [self createCreditCardWithInvalidNumber] raiseError: CreditCard invalidCardNumber.


	"self 
		should: [self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumber equals: anError messageText.
			
			]"

	
	! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:49:35'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 12:49:45'!
assertWhen: aBlockClosure raiseError: aString 
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 12:50:53' prior: 50891820!
assertWhen: aBlockClosure raiseError: anErrorMessage 
	self 
		should: aBlockClosure
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anErrorMessage equals: anError messageText.
			
			]! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 12:51:27' prior: 50891826!
assertWhen: creditCardCreationBlock raiseError: anErrorMessage 
	self 
		should: creditCardCreationBlock
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anErrorMessage equals: anError messageText.
			
			]! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 12:51:29'!
PASSED!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/17/2021 12:51:35' prior: 50891802!
test01CantCreateCreditCardWithInvalidNumber

self assertWhen: [self createCreditCardWithInvalidNumber] raiseError: CreditCard invalidCardNumber.


	
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/17/2021 12:52:06' prior: 50880627!
test02CantCreateCreditCardWithInvalidName

self assertWhen: [ self createCreditCardWithInvalidName] raiseError: CreditCard invalidCardName.


	
	! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 12:52:07'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 12:55:55' prior: 50891397!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createFakeCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 12:55:56'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 12:56:03' prior: 50891379!
test07CannotCheckoutCartWithStolenCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createStolenCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Stolen CreditCard' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 12:56:12' prior: 50891344!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createExpiredCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 12:56:18' prior: 50891362!
test06CannotCheckoutCartWithCreditCardWithoutFunds

	cart addToCart: ISBNCormen withQuantity: 10. 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createCreditCardWithoutFunds onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!MerchantProcessor class methodsFor: 'no messages' stamp: 'AM 6/17/2021 12:58:29'!
insufficientFundsError
	^'Insufficient funds'! !
!MerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 12:59:12'!
stolenCardError
^'Stolen CreditCard'! !
!MerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 12:59:38'!
fakeCardError
^'Fake CreditCard'! !
!MerchantProcessor methodsFor: 'debit' stamp: 'AM 6/17/2021 13:00:55' prior: 50890958!
debitCreditCard: aCreditCard forAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [self error: self class insufficientFundsError ].
	aCreditCard number = stolenCard ifTrue: [self error: self class stolenCardError ].
	aCreditCard number = fakeCard ifTrue: [self error: self class fakeCardError ].! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:03:48' prior: 50892106!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertWhenCheckoutWith: self createExpiredCreditCard throwsError: Cashier expiredCardError.
	
	"self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createExpiredCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
				self assert: salesList isEmpty .
			]"


	
	! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:03:53'!
ERROR!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:04:00' prior: 50892167!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWith: self createExpiredCreditCard throwsError: Cashier expiredCardError.
	
	"self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createExpiredCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
				self assert: salesList isEmpty .
			]"


	
	! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:04:03'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:04:11'!
assertCheckoutWith: aCreditCard throwsError: aString 
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:06:51' prior: 50892214!
assertCheckoutWith: aCreditCard throwsError: anErrorMessage 
	self 
		should: ([:creditCard |	cashier checkOutCart: cart usingCreditCard: creditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ] value: aCreditCard)
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:06:58'!
ERROR!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:07:07'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:10:31' prior: 50892220!
assertCheckoutWith: aCreditCard throwsError: anErrorMessage 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 13:10:40'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:10:48' prior: 50892191!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWith: self createExpiredCreditCard throwsError: Cashier expiredCardError.
	


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:11:42' prior: 50892123!
test06CannotCheckoutCartWithCreditCardWithoutFunds

	cart addToCart: ISBNCormen withQuantity: 10. 
	self assertCheckoutWith: self createCreditCardWithoutFunds throwsError: MerchantProcessor insufficientFundsError.



	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:14:42' prior: 50892089!
test07CannotCheckoutCartWithStolenCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWith: self createStolenCreditCard  throwsError: MerchantProcessor stolenCardError .



	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:15:16' prior: 50892003!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWith: self createFakeCreditCard  throwsError: MerchantProcessor stolenCardError .


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:16:22' prior: 50891302!
test01CheckoutEmptyCarShouldRaiseError

self assertCheckoutWith:  self createValidCreditCard throwsError: Cashier emptyCartError.	
	! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:16:25'!
FAILURE!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:16:25'!
FAILURE!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:16:45'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:16:54' prior: 50892357!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWith: self createFakeCreditCard  throwsError: MerchantProcessor fakeCardError .


	
	! !

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:16:56'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 13:16:56'!
PASSED!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:50'!
assertCheckoutWithCard: aCreditCard doesntRegisterToSalesListAndthrowsError: anErrorMessage 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:50' prior: 50892347!
test07CannotCheckoutCartWithStolenCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createStolenCreditCard  doesntRegisterToSalesListAndthrowsError: MerchantProcessor stolenCardError .



	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:50' prior: 50892337!
test06CannotCheckoutCartWithCreditCardWithoutFunds

	cart addToCart: ISBNCormen withQuantity: 10. 
	self assertCheckoutWithCard: self createCreditCardWithoutFunds doesntRegisterToSalesListAndthrowsError: MerchantProcessor insufficientFundsError.



	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:51' prior: 50892367!
test01CheckoutEmptyCarShouldRaiseError

self assertCheckoutWithCard:  self createValidCreditCard doesntRegisterToSalesListAndthrowsError: Cashier emptyCartError.	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:51' prior: 50892451!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createFakeCreditCard  doesntRegisterToSalesListAndthrowsError: MerchantProcessor fakeCardError .


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:51' prior: 50892327!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createExpiredCreditCard doesntRegisterToSalesListAndthrowsError: Cashier expiredCardError.
	


	
	! !

!methodRemoval: TestsTusLibros #assertCheckoutWith:throwsError: stamp: 'AM 6/17/2021 13:17:51'!
assertCheckoutWith: aCreditCard throwsError: anErrorMessage 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06'!
assertCheckoutWithCard: aCreditCard doesntRegisterToSalesListAndThrowsError: anErrorMessage 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06' prior: 50892557!
test06CannotCheckoutCartWithCreditCardWithoutFunds

	cart addToCart: ISBNCormen withQuantity: 10. 
	self assertCheckoutWithCard: self createCreditCardWithoutFunds doesntRegisterToSalesListAndThrowsError: MerchantProcessor insufficientFundsError.



	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06' prior: 50892589!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createExpiredCreditCard doesntRegisterToSalesListAndThrowsError: Cashier expiredCardError.
	


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06' prior: 50892569!
test01CheckoutEmptyCarShouldRaiseError

self assertCheckoutWithCard:  self createValidCreditCard doesntRegisterToSalesListAndThrowsError: Cashier emptyCartError.	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06' prior: 50892578!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createFakeCreditCard  doesntRegisterToSalesListAndThrowsError: MerchantProcessor fakeCardError .


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06' prior: 50892546!
test07CannotCheckoutCartWithStolenCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createStolenCreditCard  doesntRegisterToSalesListAndThrowsError: MerchantProcessor stolenCardError .



	
	! !

!methodRemoval: TestsTusLibros #assertCheckoutWithCard:doesntRegisterToSalesListAndthrowsError: stamp: 'AM 6/17/2021 13:18:06'!
assertCheckoutWithCard: aCreditCard doesntRegisterToSalesListAndthrowsError: anErrorMessage 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
initialize
	(merchantProcessor _ [
	(MerchantProcessor
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{52 to: 54})
		cover: (13 to: 29)
		declaredAt: (13 to: 29).! !
!Behavior method!
initialize
	(fundlessCard _ '0000000000000000' coverAll:
		{31 to: 48})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).
	(stolenCard _ '0000000000000001' coverAll:
		{67 to: 84})
		cover: (52 to: 61)
		declaredAt: (52 to: 61).
	(fakeCard _ '0000000000000002' coverAll:
		{103 to: 120})
		cover: (90 to: 97)
		declaredAt: (90 to: 97).! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{76 to: 79}) assertValidNumber:
		(aCreditCardNumber
			cover: (100 to: 116)
			declaredAt: (13 to: 29)) ] valueCoveringAll:
		{81 to: 98}.
	[
	(self coverAll:
		{120 to: 123}) assertValidName:
		(aName
			cover: (142 to: 146)
			declaredAt: (67 to: 71)) ] valueCoveringAll:
		{125 to: 140}.
	^ [
	([
	(self coverAll:
		{152 to: 155}) new ] valueCoveringAll:
		{157 to: 159})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (183 to: 199)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (211 to: 226)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (237 to: 241)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{161 to: 181. 201 to: 209. 228 to: 235}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(self coverAll:
				{93 to: 96}) invalidCardNumber ] valueCoveringAll:
				{98 to: 114}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) invalidCardName ] valueCoveringAll:
				{69 to: 83}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	(number _ aCreditCardNumber
		cover: (96 to: 112)
		declaredAt: (23 to: 39))
		cover: (86 to: 91)
		declaredAt: (86 to: 91).
	(expirationDate _ anExpirationDate
		cover: (134 to: 149)
		declaredAt: (51 to: 66))
		cover: (116 to: 129)
		declaredAt: (116 to: 129).
	(name _ aName
		cover: (162 to: 166)
		declaredAt: (77 to: 81))
		cover: (154 to: 157)
		declaredAt: (154 to: 157).! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear andRegisterOn: aSalesList
	[
	([
	(aCart
		cover: (111 to: 115)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{117 to: 123}) ifTrue: [
		[
		(self coverAll:
			{134 to: 137}) error:
			([
			(Cashier
				cover: (146 to: 152)
				declaredAt: (146 to: 152)) emptyCartError ] valueCoveringAll:
				{154 to: 167}) ] valueCoveringAll:
			{139 to: 144} ]] valueCoveringAll:
		{125 to: 131}.
	[
	([
	(aCreditCard
		cover: (173 to: 183)
		declaredAt: (38 to: 48)) isExpiredOn:
		(aMonthOfYear
			cover: (198 to: 209)
			declaredAt: (65 to: 76)) ] valueCoveringAll:
		{185 to: 196}) ifTrue: [
		[
		(self coverAll:
			{220 to: 223}) error:
			([
			(Cashier
				cover: (232 to: 238)
				declaredAt: (146 to: 152)) expiredCardError ] valueCoveringAll:
				{240 to: 255}) ] valueCoveringAll:
			{225 to: 230} ]] valueCoveringAll:
		{212 to: 218}.
	[
	[
	[
	(merchantProcessor
		cover: (266 to: 282)
		declaredAt: (266 to: 282))
		debitCreditCard:
			(aCreditCard
				cover: (301 to: 311)
				declaredAt: (38 to: 48))
		forAmount:
			([
			(aCart
				cover: (325 to: 329)
				declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
				{331 to: 342}) ] valueCoveringAll:
		{284 to: 299. 313 to: 322} ]
		on:
			(Error
				cover: (349 to: 353)
				declaredAt: (349 to: 353))
		do: [ :error |
			[
			(self coverAll:
				{367 to: 370}) error:
				([
				(error
					cover: (380 to: 384)
					declaredAt: (360 to: 364)) messageText ] valueCoveringAll:
					{386 to: 396}) ] valueCoveringAll:
				{372 to: 377} ]] valueCoveringAll:
		{345 to: 347. 355 to: 357}.
	[
	(aSalesList
		cover: (403 to: 412)
		declaredAt: (93 to: 102)) addLast:
		([
		(aCart
			cover: (423 to: 427)
			declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
			{429 to: 440}) ] valueCoveringAll:
		{414 to: 421}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:19:04'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
isExpiredOn: aMonthOfYear
	^ [
	(aMonthOfYear
		cover: (31 to: 42)
		declaredAt: (14 to: 25)) >=
		(expirationDate
			cover: (45 to: 58)
			declaredAt: (45 to: 58)) ] valueCoveringAll:
		{43 to: 44}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !
!Behavior method!
debitCreditCard: aCreditCard forAmount: anAmount
	[
	([
	([
	(aCreditCard
		cover: (52 to: 62)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{64 to: 69}) =
		(fundlessCard
			cover: (73 to: 84)
			declaredAt: (73 to: 84)) ] valueCoveringAll:
		{71 to: 71}) ifTrue: [
		[
		(self coverAll:
			{95 to: 98}) error:
			([
			([
			(self coverAll:
				{107 to: 110}) class ] valueCoveringAll:
				{112 to: 116}) insufficientFundsError ] valueCoveringAll:
				{118 to: 139}) ] valueCoveringAll:
			{100 to: 105} ]] valueCoveringAll:
		{86 to: 92}.
	[
	([
	([
	(aCreditCard
		cover: (145 to: 155)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{157 to: 162}) =
		(stolenCard
			cover: (166 to: 175)
			declaredAt: (166 to: 175)) ] valueCoveringAll:
		{164 to: 164}) ifTrue: [
		[
		(self coverAll:
			{186 to: 189}) error:
			([
			([
			(self coverAll:
				{198 to: 201}) class ] valueCoveringAll:
				{203 to: 207}) stolenCardError ] valueCoveringAll:
				{209 to: 223}) ] valueCoveringAll:
			{191 to: 196} ]] valueCoveringAll:
		{177 to: 183}.
	[
	([
	([
	(aCreditCard
		cover: (229 to: 239)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{241 to: 246}) =
		(fakeCard
			cover: (250 to: 257)
			declaredAt: (250 to: 257)) ] valueCoveringAll:
		{248 to: 248}) ifTrue: [
		[
		(self coverAll:
			{268 to: 271}) error:
			([
			([
			(self coverAll:
				{280 to: 283}) class ] valueCoveringAll:
				{285 to: 289}) fakeCardError ] valueCoveringAll:
				{291 to: 303}) ] valueCoveringAll:
			{273 to: 278} ]] valueCoveringAll:
		{259 to: 265}.! !
!Behavior method!
number
	^ [
	(number
		cover: (11 to: 16)
		declaredAt: (11 to: 16)) copy ] valueCoveringAll:
		{18 to: 21}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 13:19:04'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 13:19:04'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:19:04'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 13:19:05'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:19:05'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 13:19:05'!
PASSED!
!Behavior method!
insufficientFundsError
	^ 'Insufficient funds' coverAll:
		{26 to: 45}.! !

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 13:19:05'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 13:19:05'!
PASSED!
!Behavior method!
stolenCardError
	^ 'Stolen CreditCard' coverAll:
		{18 to: 36}.! !

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 13:19:05'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 13:19:05'!
PASSED!
!Behavior method!
fakeCardError
	^ 'Fake CreditCard' coverAll:
		{16 to: 32}.! !

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:19:05'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 13:19:05'!
PASSED!

----SNAPSHOT----(17 June 2021 13:24:37) CuisUniversity-4532.image priorSource: 17920377!

----QUIT----(17 June 2021 13:24:40) CuisUniversity-4532.image priorSource: 17967203!

----STARTUP---- (17 June 2021 20:38:05) as C:\Users\alejo\Documents\Cosas Facu\Inge 1\windows64\CuisUniversity-4532.image!


TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'merchantProcessor cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'AM 6/17/2021 20:39:22'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'merchantProcessor cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/17/2021 20:39:39' prior: 50891571 overrides: 16927572!
setUp
	
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	todayMonthOfYear := FixedGregorianDate today monthOfYear.
	validExpiration := todayMonthOfYear next: 40*month.
	salesList:= OrderedCollection new.
	cart:= self createCart .
	cashier:= self createCashier .
	merchantProcessor := MerchantProcessor new.
	! !
!Cashier class methodsFor: 'error-description' stamp: 'AM 6/17/2021 20:41:24'!
initializeWithMerchantProcessor: aMerchantProcessor
	^ self new initializeWithMerchantProcessor: aMerchantProcessor .! !
!Cashier class methodsFor: 'error-description' stamp: 'AM 6/17/2021 20:41:33'!
createWithMerchantProcessor: aMerchantProcessor
	^ self new initializeWithMerchantProcessor: aMerchantProcessor .! !

!methodRemoval: Cashier class #initializeWithMerchantProcessor: stamp: 'AM 6/17/2021 20:41:41'!
initializeWithMerchantProcessor: aMerchantProcessor
	^ self new initializeWithMerchantProcessor: aMerchantProcessor .!
!Cashier class methodsFor: 'error-description' stamp: 'AM 6/17/2021 20:42:04' prior: 50893186!
createWithMerchantProcessor: aMerchantProcessor
	^ self new initializeWithMerchantProcessor: aMerchantProcessor .! !
!Cashier methodsFor: 'initialization' stamp: 'AM 6/17/2021 20:42:18'!
initializeWithMerchantProcessor: aMerchantProcessor 
	merchantProcessor := aMerchantProcessor ! !

!methodRemoval: Cashier #initialize stamp: 'AM 6/17/2021 20:42:25'!
initialize
	merchantProcessor := MerchantProcessor new !
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/17/2021 20:42:41' prior: 50886812!
createCashier
	^Cashier createWithMerchantProcessor: merchantProcessor .! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 20:42:45'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 20:42:45'!
ERROR!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 20:42:45'!
FAILURE!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 20:42:45'!
FAILURE!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 20:42:45'!
FAILURE!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 20:42:45'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 20:43:05'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 20:43:05'!
ERROR!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 20:43:05'!
FAILURE!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 20:43:05'!
FAILURE!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 20:43:05'!
FAILURE!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 20:43:05'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 20:43:29'!
FAILURE!
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/17/2021 20:44:38' prior: 50893159 overrides: 16927572!
setUp
	
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	todayMonthOfYear := FixedGregorianDate today monthOfYear.
	validExpiration := todayMonthOfYear next: 40*month.
	salesList:= OrderedCollection new.
	merchantProcessor := MerchantProcessor new.
	cart:= self createCart .
	cashier:= self createCashier .
	
	! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 20:44:41'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 20:44:42'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 20:44:42'!
PASSED!

----SNAPSHOT----(17 June 2021 20:44:46) CuisUniversity-4532.image priorSource: 17967293!

Object subclass: #ApplicationInnerInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'AM 6/17/2021 20:46:31'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'AM 6/17/2021 20:48:02'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'nil' stamp: 'AM 6/17/2021 20:48:13' overrides: 16927572!
setUp
	
	! !

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'AM 6/17/2021 20:48:22'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 20:48:40' prior: 50893471 overrides: 16927572!
setUp
	innerInterface := self createInnerInterface.
	
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 20:51:46'!
test01listCartOfNewCartIsEmpty
	|cartId|
	
	
	
	! !

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validUserId validUserPassword invalidUserId invalidUserPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'AM 6/17/2021 20:52:53'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validUserId validUserPassword invalidUserId invalidUserPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 20:55:04' prior: 50893493!
test01listCartOfNewCartIsEmpty
	|cartId|
	innerInterface createCartWithClientId: 'sd'.! !

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'AM 6/17/2021 20:55:21'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validUserPassword invalidUserId invalidUserPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'AM 6/17/2021 20:55:33'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validUserPassword invalidClientId invalidUserPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'AM 6/17/2021 20:55:41'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validClientPassword invalidClientId invalidUserPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'AM 6/17/2021 20:55:50'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validClientPassword invalidClientId invalidClientPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 20:57:39' prior: 50893515!
test01listCartOfNewCartIsEmpty
	|cartId|
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self assert: (innerInterface listCart: cartId isEmpty)
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 20:57:45' prior: 50893560!
test01listCartOfNewCartIsEmpty
	|cartId|
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self assert: (innerInterface listCart: cartId isEmpty).
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 20:58:12' prior: 50893488 overrides: 16927572!
setUp
	innerInterface := self createInnerInterface.
	validClientId := 123456.
	validClientPassword := 'password'
	
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 20:58:32'!
createInnerInterface
	self shouldBeImplemented.! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 20:58:53' prior: 50893588!
createInnerInterface
	^ ApplicationInnerInterface new.! !

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 20:58:55'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 20:59:06'!
createCartWithClientId: aSmallInteger andPassword: aString 
	self shouldBeImplemented.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 20:59:52' prior: 50893601!
createCartWithClientId: aClientId andPassword: aPassword 
	^aClientId.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:00:11' prior: 50893608!
createCartWithClientId: aClientId andPassword: aPassword 
	^0.! !

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:00:13'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:00:43' prior: 50893570!
test01listCartOfNewCartIsEmpty
	|cartId|
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self assert: (innerInterface listCart: cartId) isEmpty.
	! !

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:00:44'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:00:51'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:01:02' prior: 50893636!
listCart: aCartId 
	^OrderedCollection new.! !

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:01:03'!
PASSED!

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:01:03'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:03:31'!
test02createCartWithInvalidUserIDandPasswordThrowsError
	|cartId|
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self assert: (innerInterface listCart: cartId) isEmpty.
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:04:14'!
test02createCartWithInvalidCredentialsThrowsError
	|cartId|
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self assert: (innerInterface listCart: cartId) isEmpty.
	! !

!methodRemoval: InnerInterfaceTest #test02createCartWithInvalidUserIDandPasswordThrowsError stamp: 'AM 6/17/2021 21:04:14'!
test02createCartWithInvalidUserIDandPasswordThrowsError
	|cartId|
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self assert: (innerInterface listCart: cartId) isEmpty.
	!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:05:46' prior: 50893663!
test02createCartWithInvalidCredentialsThrowsError
	|cartId|
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	
	"self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]"
	! !

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'cartId innerInterface validClientId validClientPassword invalidClientId invalidClientPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:06:15' prior: 50893623!
test01listCartOfNewCartIsEmpty
	|cartId2|
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self assert: (innerInterface listCart: cartId2) isEmpty.
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:06:19' prior: 50893684!
test02createCartWithInvalidCredentialsThrowsError
	|cartId2|
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	
	"self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]"
	! !

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validClientPassword invalidClientId invalidClientPassword cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'AM 6/17/2021 21:06:31'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validClientPassword invalidClientId invalidClientPassword cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:07:49' prior: 50893710!
test01listCartOfNewCartIsEmpty
	cartId=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self assert: (innerInterface listCart: cartId) isEmpty.
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:07:57' prior: 50893720!
test02createCartWithInvalidCredentialsThrowsError
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	
	"self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]"
	! !

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'AM 6/17/2021 21:09:59'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validClientPassword invalidClientId invalidClientPassword cartId invalidCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:09:55' prior: 50893766!
test02createCartWithInvalidCredentialsThrowsError
	
	
	self 
		should: [	cartId:=innerInterface createCartWithClientId: invalidClientId andPassword: invalidClientPassword . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
				self assert: cartId equals: invalidCartId.
			]
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:10:42' prior: 50893581 overrides: 16927572!
setUp
	innerInterface := self createInnerInterface.
	validClientId := 123456.
	validClientPassword := 'password'.
	invalidCartId :=-1.
	cartId := invalidCartId 
	
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:10:45' prior: 50893812 overrides: 16927572!
setUp
	innerInterface := self createInnerInterface.
	validClientId := 123456.
	validClientPassword := 'password'.
	invalidCartId :=-1.
	cartId := -1. 
	
	! !

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validClientPassword invalidClientId invalidClientPassword cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'AM 6/17/2021 21:16:42'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validClientPassword invalidClientId invalidClientPassword cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:16:49' prior: 50893822 overrides: 16927572!
setUp
	innerInterface := self createInnerInterface.
	validClientId := 123456.
	validClientPassword := 'password'.
	
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:16:57' prior: 50893795!
test02createCartWithInvalidCredentialsThrowsError
	
	
	self 
		should: [	cartId:=innerInterface createCartWithClientId: invalidClientId andPassword: invalidClientPassword . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:17:04' prior: 50893855!
test02createCartWithInvalidCredentialsThrowsError
	self 
		should: [	cartId:=innerInterface createCartWithClientId: invalidClientId andPassword: invalidClientPassword . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	! !

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:17:08'!
FAILURE!

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:17:08'!
FAILURE!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:17:44' prior: 50893614!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	^0.! !

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:17:53'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:18:00'!
assertValidClientId: anUndefinedObject andPassword: anUndefinedObject2 
	self shouldBeImplemented.! !

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'AM 6/17/2021 21:19:50'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:19:48' prior: 50893903!
assertValidClientId: aClientId andPassword: aPassword 
	credentialsValidator validateId: aClientId andPassword: aPassword ! !

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:19:56'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:20:24' prior: 50893593!
createInnerInterface
	^ ApplicationInnerInterface withCredentialsValidator: self.! !
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:20:46'!
withCredentialsValidator: anInnerInterfaceTest 
	self shouldBeImplemented.! !
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:21:16' prior: 50893935!
withCredentialsValidator: aCredentialsValidator 
	^self new initializeWithCredentialsValidator: aCredentialsValidator.! !
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'AM 6/17/2021 21:21:24'!
initializeWithCredentialsValidator: aCredentialsValidator 
	self shouldBeImplemented.
	credentialsValidator := aCredentialsValidator.! !
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'AM 6/17/2021 21:21:29' prior: 50893949!
initializeWithCredentialsValidator: aCredentialsValidator 
	credentialsValidator := aCredentialsValidator.! !

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:21:30'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:21:40'!
validateId: anUndefinedObject andPassword: anUndefinedObject2 
	self shouldBeImplemented.! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:23:02' prior: 50893967!
validateId: aClientId andPassword: aPassword 
	(aClientId = invalidClientId ) ifTrue: [^false]! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:23:14' prior: 50893974!
validateId: aClientId andPassword: aPassword 
	(aClientId = invalidClientId ) ifTrue: [^false] ifFalse:[^true].
	! !

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:23:16'!
FAILURE!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:23:54' prior: 50893918!
assertValidClientId: aClientId andPassword: aPassword 
	(credentialsValidator validateId: aClientId andPassword: aPassword ) ifFalse:[self error: self class].! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:24:14' prior: 50893992!
assertValidClientId: aClientId andPassword: aPassword 
	(credentialsValidator validateId: aClientId andPassword: aPassword ) ifFalse:[self error: self class invalidCredentialsError].! !

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:24:22'!
ERROR!
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:24:28'!
invalidCredentialsError
	self shouldBeImplemented.! !
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:24:48' prior: 50894014!
invalidCredentialsError
	^'Invalid password or ID'! !

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:24:49'!
PASSED!

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:24:49'!
ERROR!

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:24:49'!
PASSED!

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:24:49'!
ERROR!

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:27:04'!
PASSED!

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:27:26'!
ERROR!

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:27:26'!
ERROR!

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:27:45'!
ERROR!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 21:28:18' prior: 50893756!
test01listCartOfNewCartIsEmpty
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self assert: (innerInterface listCart: cartId) isEmpty.
	! !

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:28:19'!
PASSED!

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'AM 6/17/2021 21:28:19'!
PASSED!

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/17/2021 21:28:19'!
PASSED!

----SNAPSHOT----(17 June 2021 21:29:46) CuisUniversity-4532.image priorSource: 17977385!

----QUIT----(17 June 2021 21:30:36) CuisUniversity-4532.image priorSource: 17997476!

----STARTUP---- (21 June 2021 15:20:17) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!


!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'sebas 6/21/2021 15:23:29'!
PASSED!

!testRun: #InnerInterfaceTest #test01listCartOfNewCartIsEmpty stamp: 'sebas 6/21/2021 15:23:35'!
PASSED!

!testRun: #InnerInterfaceTest #test02createCartWithInvalidCredentialsThrowsError stamp: 'sebas 6/21/2021 15:23:35'!
PASSED!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 15:35:41'!
test03listCartAfterAddingAProductGivesCorrectListCart
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	self assert: (innerInterface listCart: cartId) isEmpty.
	! !

TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validClientPassword invalidClientId invalidClientPassword cartId ISBNCormen'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InnerInterfaceTest category: 'TusLibros' stamp: 'sebas 6/21/2021 15:36:15'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validClientPassword invalidClientId invalidClientPassword cartId ISBNCormen'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 15:45:22' prior: 50894092!
test03listCartAfterAddingAProductGivesCorrectListCart
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	self assert: (innerInterface listCart: cartId) first  equals: {ISBNCormen . 5}.
	! !
!InnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 15:46:06' prior: 50894122!
test03listCartAfterAddingAProductGivesCorrectListCart
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	self assert: (innerInterface listCart: cartId) first  equals: {ISBNCormen . 5}.
	! !

!testRun: #InnerInterfaceTest #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 15:46:08'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 15:46:19'!
add: anUndefinedObject toCart: aSmallInteger withQuantity: aSmallInteger3 
	self shouldBeImplemented.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 15:48:03' prior: 50894152!
add: anISBN toCart: aCartID withQuantity: aQuantity 
	
	! !

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 15:49:33'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator car'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 15:49:32' prior: 50893892!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	car := Cart new.! !

----QUIT----(21 June 2021 15:51:32) CuisUniversity-4532.image priorSource: 17997566!

----STARTUP---- (21 June 2021 15:51:41) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!


!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sebas 6/21/2021 15:53:22'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'merchantProcessor cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear innerInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sebas 6/21/2021 15:53:24'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'merchantProcessor cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear innerInterface validClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sebas 6/21/2021 15:53:25'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'merchantProcessor cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear innerInterface validClientId validClientPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'private-create' stamp: 'sebas 6/21/2021 15:53:20' prior: 50893358 overrides: 16927572!
setUp
	
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	todayMonthOfYear := FixedGregorianDate today monthOfYear.
	validExpiration := todayMonthOfYear next: 40*month.
	salesList:= OrderedCollection new.
	merchantProcessor := MerchantProcessor new.
	cart:= self createCart .
	cashier:= self createCashier .
	innerInterface := self createInnerInterface.
	validClientId := 123456.
	validClientPassword := 'password'.
	
	! !

!methodRemoval: InnerInterfaceTest #setUp stamp: 'sebas 6/21/2021 15:53:36'!
setUp
	innerInterface := self createInnerInterface.
	validClientId := 123456.
	validClientPassword := 'password'.
	
	!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 15:54:42'!
createInnerInterface
	^ ApplicationInnerInterface withCredentialsValidator: self.! !

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sebas 6/21/2021 15:54:56'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'merchantProcessor cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear innerInterface validClientId validClientPassword cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 15:54:53'!
test01listCartOfNewCartIsEmpty
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self assert: (innerInterface listCart: cartId) isEmpty.
	! !

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sebas 6/21/2021 15:55:15'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'merchantProcessor cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear innerInterface validClientId validClientPassword cartId invalidClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sebas 6/21/2021 15:55:16'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'merchantProcessor cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear innerInterface validClientId validClientPassword cartId invalidClientId invalidClientPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 15:55:09'!
test02createCartWithInvalidCredentialsThrowsError
	self 
		should: [	cartId:=innerInterface createCartWithClientId: invalidClientId andPassword: invalidClientPassword . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 15:55:29'!
test03listCartAfterAddingAProductGivesCorrectListCart
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	self assert: (innerInterface listCart: cartId) first  equals: {ISBNCormen . 5}.
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 15:55:50'!
validateId: aClientId andPassword: aPassword 
	(aClientId = invalidClientId ) ifTrue: [^false] ifFalse:[^true].
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 15:56:02' prior: 50894346!
validateId: aClientId andPassword: aPassword 
	(aClientId = invalidClientId ) ifTrue: [^false] ifFalse:[^true].
	! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 15:56:03'!
ERROR!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'sebas 6/21/2021 15:56:03'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 15:56:03'!
ERROR!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'sebas 6/21/2021 15:56:15'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sebas 6/21/2021 15:56:18'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 15:56:19'!
ERROR!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'sebas 6/21/2021 15:56:19'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 15:56:19'!
ERROR!

!classRemoval: #InnerInterfaceTest stamp: 'sebas 6/21/2021 15:57:45'!
TestCase subclass: #InnerInterfaceTest
	instanceVariableNames: 'innerInterface validClientId validClientPassword invalidClientId invalidClientPassword cartId ISBNCormen'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 16:04:37'!
ERROR!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 16:04:37'!
ERROR!
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:10:23'!
withCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	^self new initializeWithCredentialsValidator: aCredentialsValidator.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:10:23' prior: 50894259!
createInnerInterface
	^ ApplicationInnerInterface withCredentialsValidator: self andCatalog: catalog.! !

!methodRemoval: ApplicationInnerInterface class #withCredentialsValidator: stamp: 'sebas 6/21/2021 16:10:23'!
withCredentialsValidator: aCredentialsValidator 
	^self new initializeWithCredentialsValidator: aCredentialsValidator.!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:12:26' prior: 50894554!
createInnerInterface
	^ ApplicationInnerInterface withCredentialsValidator: self andCatalog: self defaultCatalog.! !

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 16:12:40'!
ERROR!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 16:12:40'!
ERROR!

Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 16:13:32'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 16:14:20'!
initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.! !
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:14:20' prior: 50894546!
withCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	^self new initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog.! !

!methodRemoval: ApplicationInnerInterface #initializeWithCredentialsValidator: stamp: 'sebas 6/21/2021 16:14:20'!
initializeWithCredentialsValidator: aCredentialsValidator 
	credentialsValidator := aCredentialsValidator.!

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 16:14:40'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 16:14:38' prior: 50894596!
initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog .! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:15:18' prior: 50894173!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	cart := Cart withCatalog: catalog.
	^0 ! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:17:01' prior: 50894159!
add: anISBN toCart: aCartID withQuantity: aQuantity 
	cart  addToCart: anISBN withQuantity: aQuantity.
	! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:17:21' prior: 50893642!
listCart: aCartId 
	^ cart listCart ! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'sebas 6/21/2021 16:17:55'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'sebas 6/21/2021 16:17:55'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 16:17:55'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:21:32'!
test04createDifferentCartsWillHaveDifferentsID
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	self assert: (innerInterface listCart: cartId) first  equals: {ISBNCormen . 5}.
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:23:04' prior: 50894669!
test04createDifferentCartsWillHaveDifferentsID
	| cartId1 cartId2 cartid2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self deny: (cartId1  = cartid2)! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:23:44' prior: 50894682!
test04createDifferentCartsWillHaveDifferentsID
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self deny: (cartId1  = cartId2)! !

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'sebas 6/21/2021 16:23:48'!
FAILURE!

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 16:24:35'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cart catalog nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 16:24:33' prior: 50894629!
initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	nextId := 0 ! !
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 16:24:51' prior: 50894721!
initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	nextId := 0 .! !
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 16:24:54' prior: 50894730!
initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	nextId := 0.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:25:17' prior: 50894638!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	cart := Cart withCatalog: catalog.
	nextId next.
	^nextId ! !

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'sebas 6/21/2021 16:25:24'!
ERROR!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'sebas 6/21/2021 16:25:24'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:26:48' prior: 50894748!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	cart := Cart withCatalog: catalog.
	nextId := nextId +1 .
	^nextId ! !

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'sebas 6/21/2021 16:26:54'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:27:42'!
test05DifferentCartsListContentCorrectly
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self deny: (cartId1  = cartId2)! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:28:30' prior: 50894778!
test05DifferentCartsListContentCorrectly
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 5. 
	self assert: true! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:28:51' prior: 50894791!
test05DifferentCartsListContentCorrectly
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100. 
	self assert: true! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:29:23' prior: 50894807!
test05DifferentCartsListContentCorrectly
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100. 
	self assert: (innerInterface listCart: cartId1) first  equals: {ISBNCormen . 5}.
	self assert: (innerInterface listCart: cartId2) first  equals: {ISBNWatkins . 100}.! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:29:30' prior: 50894824!
test05DifferentCartsListContentCorrectly
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100. 
	
	self assert: (innerInterface listCart: cartId1) first  equals: {ISBNCormen . 5}.
	self assert: (innerInterface listCart: cartId2) first  equals: {ISBNWatkins . 100}.! !

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'sebas 6/21/2021 16:29:32'!
FAILURE!

Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 16:30:05'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 16:30:38' prior: 50894739!
initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	nextId := 0.
	cartDatabase := Dictionary  new.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:32:32' prior: 50894765!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	nextId := nextId +1 .
	cartDatabase add: Cart withCatalog: catalog.
	^nextId ! !

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 16:32:43'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lasttId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:32:43' prior: 50894895!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lasttId := lasttId +1 .
	cartDatabase add: Cart withCatalog: catalog.
	^lasttId ! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:32:43' prior: 50894885!
initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lasttId := 0.
	cartDatabase := Dictionary  new.! !

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 16:32:52'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:32:52' prior: 50894915!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	cartDatabase add: Cart withCatalog: catalog.
	^lastId ! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:32:52' prior: 50894925!
initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:34:21' prior: 50894944!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	cartDatabase add: lastId->(Cart withCatalog: catalog).
	^lastId ! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:35:00' prior: 50894654!
listCart: aCartId 
	^ cartDatabase at: aCartId  listCart ! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:35:12' prior: 50894975!
listCart: aCartId 
	^ (cartDatabase at: aCartId) listCart ! !

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'sebas 6/21/2021 16:36:34'!
ERROR!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'sebas 6/21/2021 16:36:48'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 16:38:11' prior: 50894647!
add: anISBN toCart: aCartID withQuantity: aQuantity 
	(cartDatabase at: aCartID)  addToCart: anISBN withQuantity: aQuantity.
	! !

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'sebas 6/21/2021 16:38:15'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'sebas 6/21/2021 16:38:20'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:45:57'!
test06CheckOutOfNewCartIs
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100. 
	
	self assert: (innerInterface listCart: cartId1) first  equals: {ISBNCormen . 5}.
	self assert: (innerInterface listCart: cartId2) first  equals: {ISBNWatkins . 100}.! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:52:15'!
test06CheckOutTwoDifferentCartsHaveDifferentTransactionID
	| cartId1 cartId2 transactionID1 transactionID2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
 	transactionID1 := innerInterface checkOutCart: cartId1 withCreditCard: self createValidCreditCard. 
	transactionID2 := innerInterface checkOutCart: cartId1 withCreditCard: self createValidCreditCard.
	self deny: (transactionID1 = transactionID2)! !

!methodRemoval: TestsTusLibros #test06CheckOutOfNewCartIs stamp: 'sebas 6/21/2021 16:55:41'!
test06CheckOutOfNewCartIs
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100. 
	
	self assert: (innerInterface listCart: cartId1) first  equals: {ISBNCormen . 5}.
	self assert: (innerInterface listCart: cartId2) first  equals: {ISBNWatkins . 100}.!

Time dateAndTimeNow.!

Date dateAndTimeNow.					!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:57:34' prior: 50895114!
test06CheckOutTwoDifferentCartsHaveDifferentTransactionID
	| cartId1 cartId2 transactionID1 transactionID2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
 	transactionID1 := innerInterface checkOutCart: cartId1 withCreditCard: self createValidCreditCard. 
	transactionID2 := innerInterface checkOutCart: cartId1 withCreditCard: self createValidCreditCard.
	self deny: (transactionID1 = transactionID2)
	
	! !

GregorianDateTime now !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 16:59:20' prior: 50895157!
test06CheckOutTwoDifferentCartsHaveDifferentTransactionID
	| cartId1 cartId2 transactionID1 transactionID2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
 	transactionID1 := innerInterface checkOutCart: cartId1 withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	transactionID2 := innerInterface checkOutCart: cartId2 withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	self deny: (transactionID1 = transactionID2)
	
	! !

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 16:59:28'!
ERROR!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 16:59:51'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:00:02'!
checkOutCart: aSmallInteger withCreditCard: aCreditCard atTime: aGregorianDateTime 
	self shouldBeImplemented.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:00:28' prior: 50895210!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	! !
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:02:36'!
withCredentialsValidator: aCredentialsValidator withCatalog: aCatalog  
	^self new initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:02:36' prior: 50894568!
createInnerInterface
	^ ApplicationInnerInterface withCredentialsValidator: self withCatalog: self defaultCatalog.! !

!methodRemoval: ApplicationInnerInterface class #withCredentialsValidator:andCatalog: stamp: 'sebas 6/21/2021 17:02:36'!
withCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	^self new initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog.!
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:03:06'!
withCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	^self new initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:03:06' prior: 50895233!
createInnerInterface
	^ ApplicationInnerInterface withCredentialsValidator: self withCatalog: self defaultCatalog andMerchantProcessor: merchantProcessor.! !

!methodRemoval: ApplicationInnerInterface class #withCredentialsValidator:withCatalog: stamp: 'sebas 6/21/2021 17:03:06'!
withCredentialsValidator: aCredentialsValidator withCatalog: aCatalog  
	^self new initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog.!
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 17:03:28'!
initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.! !
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:03:28' prior: 50895249!
withCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	^self new initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog.! !

!methodRemoval: ApplicationInnerInterface #initializeWithCredentialsValidator:andCatalog: stamp: 'sebas 6/21/2021 17:03:28'!
initializeWithCredentialsValidator: aCredentialsValidator andCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.!
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 17:04:05'!
initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.! !
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:04:05' prior: 50895287!
withCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	^self new initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: merchantProcessor.! !

!methodRemoval: ApplicationInnerInterface #initializeWithCredentialsValidator:withCatalog: stamp: 'sebas 6/21/2021 17:04:05'!
initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog  
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'sebas 6/21/2021 17:04:13'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'sebas 6/21/2021 17:04:13'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/21/2021 17:04:13'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'sebas 6/21/2021 17:04:13'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'sebas 6/21/2021 17:04:13'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 17:04:13'!
FAILURE!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 17:04:13'!
FAILURE!

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 17:04:39'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 17:04:37' prior: 50895307!
initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.
	merchantProcessor := aMerchantProcessor.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:07:19' prior: 50895218!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: self ! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:08:10' prior: 50895390!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:08:53' prior: 50895404!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	^ self nextTransactionID.! !

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 17:09:27'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId merchantProcessor lastTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 17:09:24' prior: 50895377!
initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.
	merchantProcessor := aMerchantProcessor.
	lastTransactionID := 0! !
!ApplicationInnerInterface methodsFor: 'nil' stamp: 'sebas 6/21/2021 17:10:14'!
nextTransactionID
	lastTransactionID := lastTransactionID  + 1.
	^lastTransactionID 
	! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:10:37' prior: 50894964!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	cartDatabase add: lastId->(Cart withCatalog: catalog).
	^lastId .
! !

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 17:11:19'!
ERROR!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 17:11:19'!
ERROR!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:11:56' prior: 50895179!
test06CheckOutTwoDifferentCartsHaveDifferentTransactionID
	| cartId1 cartId2 transactionID1 transactionID2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100. 
 	transactionID1 := innerInterface checkOutCart: cartId1 withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	transactionID2 := innerInterface checkOutCart: cartId2 withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	self deny: (transactionID1 = transactionID2)
	
	! !

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 17:11:58'!
ERROR!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 17:12:53'!
ERROR!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 17:13:14'!
ERROR!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:15:47' prior: 50895259!
createInnerInterface
	^ ApplicationInnerInterface withCredentialsValidator: self withCatalog: self defaultCatalog andMerchantProcessor: merchantProcessor! !

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 17:16:42'!
ERROR!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 17:16:42'!
ERROR!
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:17:57' prior: 50895319!
withCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	^self new initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor.! !

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/21/2021 17:18:06'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:28:06'!
test07ListPurchasesMustHaveCreditCredentials
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: invalidClientPassword.
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:29:48' prior: 50895552!
test07ListPurchasesMustHaveCreditCredentials
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: invalidClientPassword.
	self 
		should: [	innerInterface listPurchasesOfClient: validClientId andPassword: invalidClientPassword . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:30:55' prior: 50894353!
validateId: aClientId andPassword: aPassword 
	(aClientId = invalidClientId )  ifTrue: [^false] ifFalse:[^true].
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:33:17' prior: 50895577!
validateId: aClientId andPassword: aPassword 
	((aClientId = invalidClientId ) or: (aPassword ~= validClientPassword)) ifTrue: [^false] ifFalse:[^true].
	! !

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveCreditCredentials stamp: 'sebas 6/21/2021 17:33:31'!
ERROR!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveCreditCredentials stamp: 'sebas 6/21/2021 17:33:31'!
ERROR!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:34:07' prior: 50895560!
test07ListPurchasesMustHaveCreditCredentials
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self 
		should: [	innerInterface listPurchasesOfClient: validClientId andPassword: invalidClientPassword . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	
	
	! !

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveCreditCredentials stamp: 'sebas 6/21/2021 17:34:10'!
ERROR!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveCreditCredentials stamp: 'sebas 6/21/2021 17:34:10'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:34:17'!
listPurchasesOfClient: aSmallInteger andPassword: anUndefinedObject 
	self shouldBeImplemented.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:35:45' prior: 50895624!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	self assertValidClientId: aClientID andPassword: aClientPassword ! !

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveCreditCredentials stamp: 'sebas 6/21/2021 17:35:46'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveCreditCredentials stamp: 'sebas 6/21/2021 17:35:54'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:38:17'!
test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  
		
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:39:04' prior: 50895646!
test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	! !

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'sebas 6/21/2021 17:39:08'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:39:49' prior: 50895631!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	^ OrderedCollection  with: 0.! !

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'sebas 6/21/2021 17:39:55'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:41:51'!
test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:42:51'!
test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	! !

!methodRemoval: TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 17:42:54'!
test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:43:25' prior: 50895706!
test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:43:59' prior: 50895738!
test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:44:58' prior: 50895756!
test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:49:03' prior: 50895777!
test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	
	self assert: listPurchases size equals: 3.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases second equals: {ISBNWatkins . 10}.
	self assert: listPurchases last equals: (CormenPrice * 5) + (WatkinsPrice *10)
	
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 17:49:21' prior: 50895807!
test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	
	self assert: listPurchases size equals: 3.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases second equals: {ISBNWatkins . 10}.
	self assert: listPurchases last equals: (CormenPrice * 5) + (WatkinsPrice *10)
	
	
	
	
	! !

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 17:49:32'!
FAILURE!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 17:52:34' prior: 50895418!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	
	
	^ self nextTransactionID.! !

x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"
y _ x keyAtValue: 3 ifAbsent: [].		"retrieve key for given value with error block"
y!

x _ Dictionary new.							"allocate collection"
x add: #a->3; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"
y _ x keyAtValue: 3 ifAbsent: [].		"retrieve key for given value with error block"
y !

x _ Dictionary new.							"allocate collection"
x add: #a->3; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"
y _ x keyAtValue: 2 ifAbsent: [].		"retrieve key for given value with error block"
y  !

x _ Dictionary new.							"allocate collection"
x add: #a->3; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"
y _ x keyAtValue: 10 ifAbsent: [].		"retrieve key for given value with error block"
y  !

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 18:06:19'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId merchantProcessor lastTransactionID clientDatabase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 18:06:25'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId merchantProcessor lastTransactionID clientDatabase clientDatebase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:06:14' prior: 50895463!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	cartDatabase add: lastId->(Cart withCatalog: catalog).
	(clientDatabase at: aClientId ifAbsent:[ clientDatebase add: aClientId->OrderedCollection new]) add: lastId
	.
! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:06:32' prior: 50895947!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	cartDatabase add: lastId->(Cart withCatalog: catalog).
	(clientDatabase at: aClientId ifAbsent:[ clientDatabase add: aClientId->OrderedCollection new]) add: lastId
	.
! !

Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId merchantProcessor lastTransactionID clientDatabase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'sebas 6/21/2021 18:06:43'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId merchantProcessor lastTransactionID clientDatabase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'sebas 6/21/2021 18:07:18' prior: 50895443!
initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.
	merchantProcessor := aMerchantProcessor.
	lastTransactionID := 0.
	clientDatabase := Dictionary new! !

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:07:33'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:07:52'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:11:59' prior: 50895961!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	cartDatabase add: lastId->(Cart withCatalog: catalog).
	(clientDatabase at: aClientId ifAbsent:[ clientDatabase at: aClientId put: OrderedCollection new]) add: lastId
	.
! !

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:12:00'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:12:33'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:13:07'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:13:52' prior: 50896017!
createCartWithClientId: aClientId andPassword: aPassword 

	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	cartDatabase add: lastId->(Cart withCatalog: catalog).
	(clientDatabase at: aClientId ifAbsent:[ clientDatabase at: aClientId put: OrderedCollection new]) add: lastId.
	^lastId
	
! !

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:14:18'!
FAILURE!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:15:16' prior: 50895679!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	^ OrderedCollection  with: 0.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:18:37' prior: 50896044!
createCartWithClientId: aClientId andPassword: aPassword 
	|newCart|
	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	newCart := Cart withCatalog: catalog.
	cartDatabase add: lastId-> newCart.
	(clientDatabase at: aClientId ifAbsent:[ clientDatabase at: aClientId put: OrderedCollection new]) add: newCart .
	^lastId
	
! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:19:13' prior: 50896063!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	OrderedCollection new.
	! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:24:20' prior: 50896072!
createCartWithClientId: aClientId andPassword: aPassword 
	|newCart|
	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	newCart := Cart withCatalog: catalog.
	cartDatabase add: lastId->{newCart. aClientId}. 
	(clientDatabase at: aClientId ifAbsent:[ clientDatabase at: aClientId put: OrderedCollection new]) add: newCart .
	^lastId
	
! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:25:01' prior: 50894994!
add: anISBN toCart: aCartID withQuantity: aQuantity 
	(cartDatabase at: aCartID) first addToCart: anISBN withQuantity: aQuantity.
	! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:25:13' prior: 50895882!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID first) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	
	
	^ self nextTransactionID.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:25:21' prior: 50896120!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID )first usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	
	
	^ self nextTransactionID.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:25:40' prior: 50894981!
listCart: aCartId 
	^ (cartDatabase at: aCartId) first listCart ! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:26:02' prior: 50896096!
createCartWithClientId: aClientId andPassword: aPassword 
	|newCart|
	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	newCart := Cart withCatalog: catalog.
	cartDatabase add: lastId->{newCart. aClientId}. 
	^lastId
	
! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:27:17' prior: 50896135!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier aClientId|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID )first usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	aClientId :=  (cartDatabase at: aCartID) second. 
	(clientDatabase at: aClientId ifAbsent:[ clientDatabase at: aClientId put: OrderedCollection new]) add: (cartDatabase at: aCartID) first. 
	
	^ self nextTransactionID.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:29:20' prior: 50896087!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	(clientDatabase at: aClientID  first listCart) add: 1
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'sebas 6/21/2021 18:31:09'!
test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
		
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	
	self assert: listPurchases size equals: 2.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases last equals: (CormenPrice * 5) 
	
	
	
	! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:32:58' prior: 50896190!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	(clientDatabase at: aClientID  first listCart) add: (clientDatabase at: aClientID) first priceSummary.
	! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:33:16' prior: 50896223!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	(clientDatabase at: aClientID)  first listCart add: (clientDatabase at: aClientID) first priceSummary.
	! !

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:33:27'!
ERROR!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:33:27'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:33:42' prior: 50896235!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	^(clientDatabase at: aClientID)  first listCart add: (clientDatabase at: aClientID) first priceSummary.
	! !

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:33:50'!
ERROR!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:33:50'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:34:33' prior: 50896255!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	^((clientDatabase at: aClientID)  first listCart) add: (clientDatabase at: aClientID) first priceSummary.
	! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:34:40' prior: 50896275!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	^((clientDatabase at: aClientID)  first listCart) add:( (clientDatabase at: aClientID) first priceSummary).
	! !

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:34:46'!
ERROR!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:34:46'!
ERROR!

((clientDatabase at: aClientID)  first listCart)!

((clientDatabase at: aClientID)  first listCart)  add:( (clientDatabase at: aClientID) first priceSummary).!

((clientDatabase at: aClientID)  first listCart)!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'sebas 6/21/2021 18:38:30' prior: 50896287!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	|purchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := (clientDatabase at: aClientID)  first listCart.
	purchases add:( (clientDatabase at: aClientID) first priceSummary).
	^ purchases ! !

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:38:33'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'sebas 6/21/2021 18:38:40'!
PASSED!

----QUIT----(21 June 2021 19:19:46) CuisUniversity-4532.image priorSource: 18000942!

----STARTUP---- (24 June 2021 08:39:34) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!


!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveCreditCredentials stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'sebas 6/24/2021 08:40:02'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'sebas 6/24/2021 08:40:02'!
FAILURE!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'sebas 6/24/2021 08:40:02'!
PASSED!

----QUIT----(24 June 2021 08:40:48) CuisUniversity-4532.image priorSource: 18069886!

----STARTUP---- (24 June 2021 11:44:31) as C:\Users\alejo\Documents\Cosas Facu\Inge 1\windows64\CuisUniversity-4532.image!

!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 11:47:02'!
test07ListPurchasesMustHaveValidCredentials
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self 
		should: [	innerInterface listPurchasesOfClient: validClientId andPassword: invalidClientPassword . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	
	
	! !

!methodRemoval: TestsTusLibros #test07ListPurchasesMustHaveCreditCredentials stamp: 'AM 6/24/2021 11:47:02'!
test07ListPurchasesMustHaveCreditCredentials
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	self 
		should: [	innerInterface listPurchasesOfClient: validClientId andPassword: invalidClientPassword . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	
	
	!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 11:47:43'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 11:47:43'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 11:47:43'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 11:47:43'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 11:47:43'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 11:47:43'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 11:47:43'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 11:47:43'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 11:47:43'!
FAILURE!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 11:47:43'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 11:48:12'!
ERROR!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 11:48:31'!
ERROR!

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'AM 6/24/2021 11:56:26'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId merchantProcessor lastTransactionID clientCheckoutDatabase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 11:56:26' prior: 50895993!
initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.
	merchantProcessor := aMerchantProcessor.
	lastTransactionID := 0.
	clientCheckoutDatabase := Dictionary new! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 11:56:26' prior: 50896314!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	|purchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := (clientCheckoutDatabase at: aClientID)  first listCart.
	purchases add:( (clientCheckoutDatabase at: aClientID) first priceSummary).
	^ purchases ! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 11:56:26' prior: 50896168!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier aClientId|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID )first usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	aClientId :=  (cartDatabase at: aCartID) second. 
	(clientCheckoutDatabase at: aClientId ifAbsent:[ clientCheckoutDatabase at: aClientId put: OrderedCollection new]) add: (cartDatabase at: aCartID) first. 
	
	^ self nextTransactionID.! !

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'AM 6/24/2021 12:03:36'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId merchantProcessor lastTransactionID clientPurchasedCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:03:36' prior: 50896545!
initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.
	merchantProcessor := aMerchantProcessor.
	lastTransactionID := 0.
	clientPurchasedCarts := Dictionary new! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:03:36' prior: 50896560!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	|purchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := (clientPurchasedCarts at: aClientID)  first listCart.
	purchases add:( (clientPurchasedCarts at: aClientID) first priceSummary).
	^ purchases ! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:03:36' prior: 50896574!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier aClientId|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID )first usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	aClientId :=  (cartDatabase at: aCartID) second. 
	(clientPurchasedCarts at: aClientId ifAbsent:[ clientPurchasedCarts at: aClientId put: OrderedCollection new]) add: (cartDatabase at: aCartID) first. 
	
	^ self nextTransactionID.! !

Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId merchantProcessor lastTransactionID clientPurchasedCarts cartsOwnerDatabase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ApplicationInnerInterface category: 'TusLibros' stamp: 'AM 6/24/2021 12:03:59'!
Object subclass: #ApplicationInnerInterface
	instanceVariableNames: 'credentialsValidator cartDatabase catalog lastId merchantProcessor lastTransactionID clientPurchasedCarts cartsOwnerDatabase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:04:41' prior: 50896156!
createCartWithClientId: aClientId andPassword: aPassword 
	|newCart|
	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	newCart := Cart withCatalog: catalog.
	cartDatabase add: lastId->newCart.
	cartsOwnerDatabase add: lastId-> aClientId.
	^lastId
	
! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:04:51' prior: 50896112!
add: anISBN toCart: aCartID withQuantity: aQuantity 
	(cartDatabase at: aCartID) addToCart: anISBN withQuantity: aQuantity.
	! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:04:57' prior: 50896635!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier aClientId|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID ) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	aClientId :=  (cartDatabase at: aCartID) second. 
	(clientPurchasedCarts at: aClientId ifAbsent:[ clientPurchasedCarts at: aClientId put: OrderedCollection new]) add: (cartDatabase at: aCartID) first. 
	
	^ self nextTransactionID.! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:05:39' prior: 50896697!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier aClientId|
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID ) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	aClientId := cartsOwnerDatabase at: aCartID . 
	(clientPurchasedCarts at: aClientId ifAbsent:[ clientPurchasedCarts at: aClientId put: OrderedCollection new]) add: (cartDatabase at: aCartID). 
	
	^ self nextTransactionID.! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:06:25' prior: 50896150!
listCart: aCartId 
	^ (cartDatabase at: aCartId) listCart ! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:08:44' prior: 50896622!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	|purchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := OrderedCollection new.
	(clientPurchasedCarts at: aClientID) do:[:aPurchasedCart| purchases addAll: aPurchasedCart listCart].
	purchases add:( (clientPurchasedCarts at: aClientID) first priceSummary).
	^ purchases ! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:11:37' prior: 50896744!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	|purchases amountPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := OrderedCollection new.
	amountPurchased :=(clientPurchasedCarts at: aClientID) sum:[:aPurchasedCart| purchases addAll: aPurchasedCart listCart. purchases priceSummary] ifEmpty:[0].
	purchases add: amountPurchased .
	^ purchases ! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:17:07'!
ERROR!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 12:17:07'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 12:17:07'!
ERROR!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 12:17:07'!
ERROR!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 12:17:07'!
ERROR!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 12:17:07'!
ERROR!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 12:17:07'!
ERROR!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 12:17:07'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:17:07'!
ERROR!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:17:07'!
ERROR!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:17:25'!
ERROR!
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'AM 6/24/2021 12:17:57' prior: 50896607!
initializeWithCredentialsValidator: aCredentialsValidator withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   
	credentialsValidator := aCredentialsValidator.
	catalog := aCatalog.
	lastId := 0.
	cartDatabase := Dictionary  new.
	merchantProcessor := aMerchantProcessor.
	lastTransactionID := 0.
	clientPurchasedCarts := Dictionary new.
	cartsOwnerDatabase := Dictionary new! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:18:03'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 12:18:03'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 12:18:03'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 12:18:03'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 12:18:03'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 12:18:03'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 12:18:03'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 12:18:03'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:18:03'!
ERROR!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:18:03'!
ERROR!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 12:18:36'!
ERROR!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 12:18:36'!
ERROR!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:19:28' prior: 50896759!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	|purchases amountPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := OrderedCollection new.
	amountPurchased :=(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new])sum:[:aPurchasedCart| purchases addAll: aPurchasedCart listCart. purchases priceSummary] ifEmpty:[0].
	purchases add: amountPurchased .
	^ purchases ! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:19:34' prior: 50896877!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	|purchases amountPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := OrderedCollection new.
	amountPurchased :=(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) sum:[:aPurchasedCart| purchases addAll: aPurchasedCart listCart. purchases priceSummary] ifEmpty:[0].
	purchases add: amountPurchased .
	^ purchases ! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 12:19:38'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:19:38'!
ERROR!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:19:38'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:19:50'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:19:50'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:20:37'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:20:39'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:20:40'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:20:42'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:20:42'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:20:43'!
ERROR!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:21:06' prior: 50896894!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	|purchases amountPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := OrderedCollection new.
	amountPurchased :=(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) sum:[:aPurchasedCart| purchases addAll: aPurchasedCart listCart. aPurchasedCart priceSummary] ifEmpty:[0].
	purchases add: amountPurchased .
	^ purchases ! !

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:21:09'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:21:12'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 12:21:12'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 12:21:12'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 12:21:12'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 12:21:12'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 12:21:12'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 12:21:12'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 12:21:12'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:21:12'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:21:12'!
PASSED!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:21:40' prior: 50897050!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	|purchases amountPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := OrderedCollection new.
	
	amountPurchased :=(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) sum:[:aPurchasedCart| purchases addAll: aPurchasedCart listCart. aPurchasedCart priceSummary] ifEmpty:[0].
	
	
	purchases add: amountPurchased .
	^ purchases ! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:32:58'!
add: anISBN toCart: aCartID withQuantity: aQuantity atTime: aGregorianDateTime  
	(cartDatabase at: aCartID) addToCart: anISBN withQuantity: aQuantity.
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:32:58' prior: 50895842!
test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	
	self assert: listPurchases size equals: 3.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases second equals: {ISBNWatkins . 10}.
	self assert: listPurchases last equals: (CormenPrice * 5) + (WatkinsPrice *10)
	
	
	
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:32:58' prior: 50895481!
test06CheckOutTwoDifferentCartsHaveDifferentTransactionID
	| cartId1 cartId2 transactionID1 transactionID2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5 atTime: GregorianDateTime now. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100 atTime: GregorianDateTime now. 
 	transactionID1 := innerInterface checkOutCart: cartId1 withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	transactionID2 := innerInterface checkOutCart: cartId2 withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	self deny: (transactionID1 = transactionID2)
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:32:58' prior: 50894333!
test03listCartAfterAddingAProductGivesCorrectListCart
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	self assert: (innerInterface listCart: cartId) first  equals: {ISBNCormen . 5}.
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:32:58' prior: 50894845!
test05DifferentCartsListContentCorrectly
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5 atTime: GregorianDateTime now. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100 atTime: GregorianDateTime now. 
	
	self assert: (innerInterface listCart: cartId1) first  equals: {ISBNCormen . 5}.
	self assert: (innerInterface listCart: cartId2) first  equals: {ISBNWatkins . 100}.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:32:58' prior: 50896199!
test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
		
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	
	self assert: listPurchases size equals: 2.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases last equals: (CormenPrice * 5) 
	
	
	
	! !

!methodRemoval: ApplicationInnerInterface #add:toCart:withQuantity: stamp: 'AM 6/24/2021 12:32:58'!
add: anISBN toCart: aCartID withQuantity: aQuantity 
	(cartDatabase at: aCartID) addToCart: anISBN withQuantity: aQuantity.
	!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:34:07'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 12:34:07'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 12:34:07'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 12:34:07'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 12:34:07'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 12:34:07'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 12:34:07'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 12:34:07'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:34:07'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:34:07'!
PASSED!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:35:13'!
createCartWithClientId: aClientId andPassword: aPassword atTime: aGregorianDateTime  
	|newCart|
	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	newCart := Cart withCatalog: catalog.
	cartDatabase add: lastId->newCart.
	cartsOwnerDatabase add: lastId-> aClientId.
	^lastId
	
! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:13' prior: 50897201!
test03listCartAfterAddingAProductGivesCorrectListCart
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	self assert: (innerInterface listCart: cartId) first  equals: {ISBNCormen . 5}.
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:13' prior: 50897135!
test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	
	self assert: listPurchases size equals: 3.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases second equals: {ISBNWatkins . 10}.
	self assert: listPurchases last equals: (CormenPrice * 5) + (WatkinsPrice *10)
	
	
	
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:13' prior: 50897172!
test06CheckOutTwoDifferentCartsHaveDifferentTransactionID
	| cartId1 cartId2 transactionID1 transactionID2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5 atTime: GregorianDateTime now. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100 atTime: GregorianDateTime now. 
 	transactionID1 := innerInterface checkOutCart: cartId1 withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	transactionID2 := innerInterface checkOutCart: cartId2 withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	self deny: (transactionID1 = transactionID2)
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:13' prior: 50897238!
test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
		
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	
	self assert: listPurchases size equals: 2.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases last equals: (CormenPrice * 5) 
	
	
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:13' prior: 50897215!
test05DifferentCartsListContentCorrectly
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5 atTime: GregorianDateTime now. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100 atTime: GregorianDateTime now. 
	
	self assert: (innerInterface listCart: cartId1) first  equals: {ISBNCormen . 5}.
	self assert: (innerInterface listCart: cartId2) first  equals: {ISBNWatkins . 100}.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:13' prior: 50894319!
test02createCartWithInvalidCredentialsThrowsError
	self 
		should: [	cartId:=innerInterface createCartWithClientId: invalidClientId andPassword: invalidClientPassword atTime: GregorianDateTime now . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:13' prior: 50894279!
test01listCartOfNewCartIsEmpty
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	self assert: (innerInterface listCart: cartId) isEmpty.
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:13' prior: 50895659!
test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword  .
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:14' prior: 50896454!
test07ListPurchasesMustHaveValidCredentials
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	self 
		should: [	innerInterface listPurchasesOfClient: validClientId andPassword: invalidClientPassword . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:14' prior: 50894695!
test04createDifferentCartsWillHaveDifferentsID
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	self deny: (cartId1  = cartId2)! !

!methodRemoval: ApplicationInnerInterface #createCartWithClientId:andPassword: stamp: 'AM 6/24/2021 12:35:14'!
createCartWithClientId: aClientId andPassword: aPassword 
	|newCart|
	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	newCart := Cart withCatalog: catalog.
	cartDatabase add: lastId->newCart.
	cartsOwnerDatabase add: lastId-> aClientId.
	^lastId
	
!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:35:45'!
listCart: aCartId atTime: aGregorianDateTime  
	^ (cartDatabase at: aCartId) listCart ! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:45' prior: 50897320!
test03listCartAfterAddingAProductGivesCorrectListCart
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	self assert: (innerInterface listCart: cartId atTime: GregorianDateTime now) first  equals: {ISBNCormen . 5}.
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:45' prior: 50897431!
test05DifferentCartsListContentCorrectly
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5 atTime: GregorianDateTime now. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100 atTime: GregorianDateTime now. 
	
	self assert: (innerInterface listCart: cartId1 atTime: GregorianDateTime now) first  equals: {ISBNCormen . 5}.
	self assert: (innerInterface listCart: cartId2 atTime: GregorianDateTime now) first  equals: {ISBNWatkins . 100}.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:35:45' prior: 50897471!
test01listCartOfNewCartIsEmpty
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	self assert: (innerInterface listCart: cartId atTime: GregorianDateTime now) isEmpty.
	! !

!methodRemoval: ApplicationInnerInterface #listCart: stamp: 'AM 6/24/2021 12:35:45'!
listCart: aCartId 
	^ (cartDatabase at: aCartId) listCart !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:35:53'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 12:35:53'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 12:35:53'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 12:35:53'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 12:35:53'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 12:35:53'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 12:35:53'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 12:35:53'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:35:53'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:35:53'!
PASSED!

Object subclass: #TimedCart
	instanceVariableNames: 'lastTimeModified aCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TimedCart category: 'TusLibros' stamp: 'AM 6/24/2021 12:38:07'!
Object subclass: #TimedCart
	instanceVariableNames: 'lastTimeModified aCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:38:24' prior: 50897307!
createCartWithClientId: aClientId andPassword: aPassword atTime: aGregorianDateTime  
	|newCart|
	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	newCart := TimedCart withCatalog: catalog.
	cartDatabase add: lastId->newCart.
	cartsOwnerDatabase add: lastId-> aClientId.
	^lastId
	
! !
!TimedCart class methodsFor: 'no messages' stamp: 'AM 6/24/2021 12:38:52'!
withCatalog: aCatalog
	! !

Object subclass: #TimedCart
	instanceVariableNames: 'lastTimeModified cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TimedCart category: 'TusLibros' stamp: 'AM 6/24/2021 12:38:57'!
Object subclass: #TimedCart
	instanceVariableNames: 'lastTimeModified cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TimedCart class methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:39:47' prior: 50897669!
withCatalog: aCatalog
	^self new initializeTimedCartWithCatalog: aCatalog! !
!TimedCart methodsFor: 'no messages' stamp: 'AM 6/24/2021 12:40:22'!
initializeTimedCartWithCatalog: aCatalog
	cart:= Cart withCatalog: aCatalog.
	! !
!TimedCart class methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:40:39'!
withCatalog: aCatalog atTime: aGregorianDateTime
	^self new initializeTimedCartWithCatalog: aCatalog! !
!TimedCart class methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:40:49' prior: 50897696!
withCatalog: aCatalog atTime: aGregorianDateTime
	^self new initializeTimedCartWithCatalog: aCatalog atTime: aGregorianDateTime! !

!methodRemoval: TimedCart class #withCatalog: stamp: 'AM 6/24/2021 12:41:00'!
withCatalog: aCatalog
	^self new initializeTimedCartWithCatalog: aCatalog!
!TimedCart methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:41:22'!
initializeTimedCartWithCatalog: aCatalog atTime: aGregorianDateTime
	cart:= Cart withCatalog: aCatalog.
	lastTimeModified := aGregorianDateTime
	! !
!TimedCart methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:41:23' prior: 50897715!
initializeTimedCartWithCatalog: aCatalog atTime: aGregorianDateTime
	cart:= Cart withCatalog: aCatalog.
	lastTimeModified := aGregorianDateTime.
	! !

!methodRemoval: TimedCart #initializeTimedCartWithCatalog: stamp: 'AM 6/24/2021 12:41:28'!
initializeTimedCartWithCatalog: aCatalog
	cart:= Cart withCatalog: aCatalog.
	!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:42:45'!
ERROR!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:42:45'!
ERROR!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:43:08' prior: 50897656!
createCartWithClientId: aClientId andPassword: aPassword atTime: aGregorianDateTime  
	|newCart|
	self assertValidClientId: aClientId  andPassword: 	aPassword.
	lastId := lastId +1 .
	newCart := TimedCart withCatalog: catalog atTime: aGregorianDateTime .
	cartDatabase add: lastId->newCart.
	cartsOwnerDatabase add: lastId-> aClientId.
	^lastId
	
! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:43:17'!
ERROR!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:43:17'!
ERROR!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:46:37' prior: 50897127!
add: anISBN toCart: aCartID withQuantity: aQuantity atTime: aGregorianDateTime  
	(cartDatabase at: aCartID) addToCart: anISBN withQuantity: aQuantity atTime: aGregorianDateTime.
	! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:46:54' prior: 50897542!
listCart: aCartId atTime: aGregorianDateTime  
	^ (cartDatabase at: aCartId) listCart atTime: aGregorianDateTime ! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:47:33'!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases amountPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := OrderedCollection new.
	
	amountPurchased :=(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) sum:[:aPurchasedCart| purchases addAll: aPurchasedCart listCart. aPurchasedCart priceSummary] ifEmpty:[0].
	
	
	purchases add: amountPurchased .
	^ purchases ! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:47:33' prior: 50897497!
test07ListPurchasesMustHaveValidCredentials
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	self 
		should: [	innerInterface listPurchasesOfClient: validClientId andPassword: invalidClientPassword atTime: GregorianDateTime now . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:47:33' prior: 50897481!
test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:47:33' prior: 50897405!
test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
		
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	
	self assert: listPurchases size equals: 2.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases last equals: (CormenPrice * 5) 
	
	
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:47:33' prior: 50897335!
test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	
	self assert: listPurchases size equals: 3.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases second equals: {ISBNWatkins . 10}.
	self assert: listPurchases last equals: (CormenPrice * 5) + (WatkinsPrice *10)
	
	
	
	
	! !

!methodRemoval: ApplicationInnerInterface #listPurchasesOfClient:andPassword: stamp: 'AM 6/24/2021 12:47:33'!
listPurchasesOfClient: aClientID andPassword: aClientPassword 
	|purchases amountPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := OrderedCollection new.
	
	amountPurchased :=(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) sum:[:aPurchasedCart| purchases addAll: aPurchasedCart listCart. aPurchasedCart priceSummary] ifEmpty:[0].
	
	
	purchases add: amountPurchased .
	^ purchases !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:48:36' prior: 50897764!
add: anISBN toCart: aCartID withQuantity: aQuantity atTime: aGregorianDateTime  
	(cartDatabase at: aCartID) addToCart: anISBN withQuantity: aQuantity.
	! !
!TimedCart methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:50:45' overrides: 16881366!
doesNotUnderstand: aMessage
	^aMessage sendTo: cart.! !
!TimedCart methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 12:51:22'!
beingUsedAtTime: aGregorianDateTime.
	! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 12:51:56' prior: 50897773!
listCart: aCartId atTime: aGregorianDateTime  
	^ (cartDatabase at: aCartId) listCart.! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 12:52:14'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 12:52:14'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 12:52:14'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 12:52:14'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 12:52:14'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 12:52:14'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 12:52:14'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 12:52:14'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:52:14'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 12:52:14'!
PASSED!

!methodRemoval: TimedCart #beingUsedAtTime: stamp: 'AM 6/24/2021 12:52:37'!
beingUsedAtTime: aGregorianDateTime.
	!

----SNAPSHOT----(24 June 2021 12:52:43) CuisUniversity-4532.image priorSource: 18073496!

----QUIT----(24 June 2021 12:55:55) CuisUniversity-4532.image priorSource: 18122663!

----STARTUP---- (24 June 2021 14:30:36) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!

!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:31:21'!
test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	
	self assert: listPurchases size equals: 3.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases second equals: {ISBNWatkins . 10}.
	self assert: listPurchases last equals: (CormenPrice * 5) + (WatkinsPrice *10)
	
	
	
	
	! !

!methodRemoval: TestsTusLibros #test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 14:31:21'!
test09ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	
	self assert: listPurchases size equals: 3.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases second equals: {ISBNWatkins . 10}.
	self assert: listPurchases last equals: (CormenPrice * 5) + (WatkinsPrice *10)
	
	
	
	
	!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:31:30'!
test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
		
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	
	self assert: listPurchases size equals: 2.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases last equals: (CormenPrice * 5) 
	
	
	
	! !

!methodRemoval: TestsTusLibros #test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 14:31:30'!
test10ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
		
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	
	self assert: listPurchases size equals: 2.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases last equals: (CormenPrice * 5) 
	
	
	
	!

GregorianDateTime now - (GregorianDateTime now - 15*minute)!

GregorianDateTime now!

GregorianDateTime now - 15*minute!

GregorianDateTime!

Time now   - (Time now - 15*minute)
!

GregorianDateTime now next: 15*minute!

TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'merchantProcessor cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear innerInterface validClientId validClientPassword cartId invalidClientId invalidClientPassword actualTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'AM 6/24/2021 14:39:17'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'merchantProcessor cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear innerInterface validClientId validClientPassword cartId invalidClientId invalidClientPassword actualTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/24/2021 14:39:48' prior: 50894229 overrides: 16927572!
setUp
	
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	todayMonthOfYear := FixedGregorianDate today monthOfYear.
	validExpiration := todayMonthOfYear next: 40*month.
	salesList:= OrderedCollection new.
	merchantProcessor := MerchantProcessor new.
	cart:= self createCart .
	cashier:= self createCashier .
	innerInterface := self createInnerInterface.
	validClientId := 123456.
	validClientPassword := 'password'.
	actualTime:= GregorianDateTime now.
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:40:40'!
test11ListCart30MinutesAfterCreationThrowsException
	
	
	
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:41:27' prior: 50897591!
test01listCartOfNewCartIsEmpty
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: actualTime.
	self assert: (innerInterface listCart: cartId atTime: actualTime) isEmpty.
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:41:38' prior: 50897456!
test02createCartWithInvalidCredentialsThrowsError
	self 
		should: [	cartId:=innerInterface createCartWithClientId: invalidClientId andPassword: invalidClientPassword atTime: actualTime . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:42:00' prior: 50897548!
test03listCartAfterAddingAProductGivesCorrectListCart
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: actualTime.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: actualTime. 
	self assert: (innerInterface listCart: cartId atTime: actualTime) first  equals: {ISBNCormen . 5}.
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:42:11' prior: 50897515!
test04createDifferentCartsWillHaveDifferentsID
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: actualTime.
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: actualTime.
	self deny: (cartId1  = cartId2)! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:42:42' prior: 50897564!
test05DifferentCartsListContentCorrectly
	| cartId1 cartId2 |
	cartId1:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: actualTime.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5 atTime: actualTime. 
	cartId2:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100 atTime: GregorianDateTime now. 
	
	self assert: (innerInterface listCart: cartId1 atTime: GregorianDateTime now) first  equals: {ISBNCormen . 5}.
	self assert: (innerInterface listCart: cartId2 atTime: GregorianDateTime now) first  equals: {ISBNWatkins . 100}.! !
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/24/2021 14:43:11'!
createCartInInterface
	^ Cart withCatalog: self defaultCatalog.! !
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/24/2021 14:43:15' prior: 50898275!
createCartInInterface
	! !
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/24/2021 14:44:16'!
createCartInInterfaceWithValidCredentials
	! !

!methodRemoval: TestsTusLibros #createCartInInterface stamp: 'AM 6/24/2021 14:44:16'!
createCartInInterface
	!
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/24/2021 14:44:25' prior: 50898284!
createCartInInterfaceWithValidCredentials
	innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: actualTime.
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:44:47' prior: 50898195!
test01listCartOfNewCartIsEmpty
	cartId:=self createCartInInterfaceWithValidCredentials.
	self assert: (innerInterface listCart: cartId atTime: actualTime) isEmpty.
	! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 14:44:50'!
ERROR!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 14:44:50'!
ERROR!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 14:45:05'!
PASSED!
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/24/2021 14:45:21' prior: 50898292!
createCartInInterfaceWithValidCredentials
	^innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: actualTime.
	! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 14:45:26'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:45:44' prior: 50898221!
test03listCartAfterAddingAProductGivesCorrectListCart
	cartId:=self createCartInInterfaceWithValidCredentials..
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: actualTime. 
	self assert: (innerInterface listCart: cartId atTime: actualTime) first  equals: {ISBNCormen . 5}.
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:45:45' prior: 50898329!
test03listCartAfterAddingAProductGivesCorrectListCart
	cartId:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: actualTime. 
	self assert: (innerInterface listCart: cartId atTime: actualTime) first  equals: {ISBNCormen . 5}.
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:45:57' prior: 50898236!
test04createDifferentCartsWillHaveDifferentsID
	| cartId1 cartId2 |
	cartId1:=self createCartInInterfaceWithValidCredentials.
	cartId2:=self createCartInInterfaceWithValidCredentials.
	self deny: (cartId1  = cartId2)! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:46:27' prior: 50898250!
test05DifferentCartsListContentCorrectly
	| cartId1 cartId2 |
	cartId1:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5 atTime: actualTime. 
	cartId2:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100 atTime: actualTime. 
	
	self assert: (innerInterface listCart: cartId1 atTime: actualTime) first  equals: {ISBNCormen . 5}.
	self assert: (innerInterface listCart: cartId2 atTime: actualTime) first  equals: {ISBNWatkins . 100}.! !

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 14:46:31'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:46:42' prior: 50897374!
test06CheckOutTwoDifferentCartsHaveDifferentTransactionID
	| cartId1 cartId2 transactionID1 transactionID2 |
	cartId1:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5 atTime: GregorianDateTime now. 
	cartId2:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100 atTime: GregorianDateTime now. 
 	transactionID1 := innerInterface checkOutCart: cartId1 withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	transactionID2 := innerInterface checkOutCart: cartId2 withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	self deny: (transactionID1 = transactionID2)
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:46:51' prior: 50897799!
test07ListPurchasesMustHaveValidCredentials
	cartId:=self createCartInInterfaceWithValidCredentials.
	self 
		should: [	innerInterface listPurchasesOfClient: validClientId andPassword: invalidClientPassword atTime: GregorianDateTime now . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:46:59' prior: 50897818!
test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero
	| listPurchases |
	cartId:=self createCartInInterfaceWithValidCredentials.
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:47:11' prior: 50898074!
test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
		
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	
	self assert: listPurchases size equals: 2.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases last equals: (CormenPrice * 5) 
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:47:20' prior: 50897994!
test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	cartId:=innerInterface createCartWithClientId: validClientId andPassword: validClientPassword atTime: GregorianDateTime now.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	
	self assert: listPurchases size equals: 3.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases second equals: {ISBNWatkins . 10}.
	self assert: listPurchases last equals: (CormenPrice * 5) + (WatkinsPrice *10)
	
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:47:27' prior: 50898471!
test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	cartId:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10 atTime: GregorianDateTime now. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: GregorianDateTime now.
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: GregorianDateTime now  .
	
	self assert: listPurchases size equals: 3.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases second equals: {ISBNWatkins . 10}.
	self assert: listPurchases last equals: (CormenPrice * 5) + (WatkinsPrice *10)
	
	
	
	
	! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 14:47:34'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 14:47:34'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 14:47:34'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 14:47:34'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 14:47:34'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 14:47:34'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 14:47:34'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 14:47:34'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 14:47:34'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 14:47:34'!
PASSED!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:47:34'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:48:01' prior: 50898389!
test06CheckOutTwoDifferentCartsHaveDifferentTransactionID
	| cartId1 cartId2 transactionID1 transactionID2 |
	cartId1:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId1 withQuantity: 5 atTime: actualTime. 
	cartId2:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNWatkins toCart: cartId2 withQuantity: 100 atTime:actualTime. 
 	transactionID1 := innerInterface checkOutCart: cartId1 withCreditCard: self createValidCreditCard atTime: actualTime. 
	transactionID2 := innerInterface checkOutCart: cartId2 withCreditCard: self createValidCreditCard atTime: actualTime. 
	self deny: (transactionID1 = transactionID2)
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:48:08' prior: 50898415!
test07ListPurchasesMustHaveValidCredentials
	cartId:=self createCartInInterfaceWithValidCredentials.
	self 
		should: [	innerInterface listPurchasesOfClient: validClientId andPassword: invalidClientPassword atTime: actualTime.  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface invalidCredentialsError equals: anError messageText.
			]
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:48:16' prior: 50898432!
test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero
	| listPurchases |
	cartId:=self createCartInInterfaceWithValidCredentials.
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: actualTime  .
	self assert: listPurchases size equals: 1.
	self assert: listPurchases last equals: 0.
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:48:27' prior: 50898447!
test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: actualTime. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: actualTime. 
		
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: actualTime. 
	
	self assert: listPurchases size equals: 2.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases last equals: (CormenPrice * 5) 
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:48:42' prior: 50898509!
test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount
	| listPurchases |
	cartId:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: actualTime. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: actualTime. 
	
	cartId:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNWatkins toCart: cartId withQuantity: 10 atTime: actualTime. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: actualTime. 
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: actualTime. 
	
	self assert: listPurchases size equals: 3.
	self assert: listPurchases first equals: {ISBNCormen . 5}.
	self assert: listPurchases second equals: {ISBNWatkins . 10}.
	self assert: listPurchases last equals: (CormenPrice * 5) + (WatkinsPrice *10)
	
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:49:41' prior: 50898189!
test11ListCart30MinutesAfterCreationThrowsException

	cartId:=innerInterface createCartWithClientId: invalidClientId andPassword: invalidClientPassword atTime: actualTime .
	self 
		should: [	innerInterface listCart: cartId atTime: (actualTime next: 31*minute)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface cartTimeOutError equals: anError messageText.
			]
	
	
	
	
	
	
	
	! !

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:49:50'!
ERROR!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:49:50'!
ERROR!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:50:07' prior: 50898699!
test11ListCart30MinutesAfterCreationThrowsException

	cartId:=self createCartInInterfaceWithValidCredentials .
	self 
		should: [	innerInterface listCart: cartId atTime: (actualTime next: 31*minute)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface cartTimeOutError equals: anError messageText.
			]
	
	
	
	
	
	
	
	! !

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:50:09'!
FAILURE!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:50:13'!
FAILURE!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 14:51:16' prior: 50897937!
listCart: aCartId atTime: aGregorianDateTime

	self assertCartNotTimeoutAtTime: aGregorianDateTime .
	^ (cartDatabase at: aCartId) listCart.! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 14:51:24'!
ERROR!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 14:51:24'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 14:51:24'!
ERROR!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 14:51:24'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 14:51:24'!
ERROR!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 14:51:24'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 14:51:24'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 14:51:24'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 14:51:24'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 14:51:24'!
PASSED!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:51:24'!
ERROR!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:51:32'!
ERROR!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:51:32'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 14:51:46'!
assertCartNotTimeoutAtTime: aGregorianDateTime 
	self shouldBeImplemented.! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 14:52:23' prior: 50898747!
listCart: aCartId atTime: aGregorianDateTime

	self assertCart: aCartId HasntTimedoutAtTime: aGregorianDateTime .
	^ (cartDatabase at: aCartId) listCart.! !

!methodRemoval: ApplicationInnerInterface #assertCartNotTimeoutAtTime: stamp: 'AM 6/24/2021 14:52:31'!
assertCartNotTimeoutAtTime: aGregorianDateTime 
	self shouldBeImplemented.!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:52:49'!
ERROR!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:52:49'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 14:52:56'!
assertCart: aSmallInteger HasntTimedoutAtTime: aGregorianDateTime 
	self shouldBeImplemented.! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 14:53:56' prior: 50898831!
assertCart: aCartID HasntTimedoutAtTime: aGregorianDateTime 
	(cartDatabase at: aCartID) beingUsedAtTime: aGregorianDateTime .! !

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:54:02'!
ERROR!
!TimedCart methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 14:55:50'!
beingUsedAtTime: aGregorianDateTime
	
	(aGregorianDateTime > lastTimeModified next: 30*minute) ifTrue:[^self error: 'Timeout'] ifFalse:[lastTimeModified := aGregorianDateTime.]
	
	! !
!TimedCart methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 14:55:54' prior: 50898849!
beingUsedAtTime: aGregorianDateTime
	
	(aGregorianDateTime > lastTimeModified next: 30*minute) ifTrue:[self error: 'Timeout'] ifFalse:[lastTimeModified := aGregorianDateTime.]
	
	! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 14:57:09' prior: 50898838!
assertCart: aCartID HasntTimedoutAtTime: aGregorianDateTime 
	[(cartDatabase at: aCartID) beingUsedAtTime: aGregorianDateTime ]on: Error do:[:error| self error: self class  ].! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 14:57:32' prior: 50898868!
assertCart: aCartID HasntTimedoutAtTime: aGregorianDateTime 
	[(cartDatabase at: aCartID) beingUsedAtTime: aGregorianDateTime ]on: Error do:[:error| self error: self class cartTimeOutError  ].! !

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:57:41'!
ERROR!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:57:41'!
ERROR!
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 14:57:58'!
cartTimeOutError
	self shouldBeImplemented.! !
!ApplicationInnerInterface class methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 14:58:09' prior: 50898894!
cartTimeOutError
	^'Cart has timed out'! !

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:58:11'!
PASSED!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:58:15'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 14:59:26'!
test12AddBooksToCart30MinutesAfterCreationThrowsException

	cartId:=self createCartInInterfaceWithValidCredentials .
	self 
		should: [	innerInterface add: ISBNCormen  toCart: cartId  withQuantity: 1  atTime: (actualTime next: 31*minute)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface cartTimeOutError equals: anError messageText.
			]
	
	
	
	
	
	
	
	! !

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:59:28'!
FAILURE!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 14:59:28'!
FAILURE!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 15:00:06' prior: 50896718!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier aClientId|
	self assertCart: aCartID HasntTimedoutAtTime: aGregorianDateTime .
	
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID ) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	aClientId := cartsOwnerDatabase at: aCartID . 
	(clientPurchasedCarts at: aClientId ifAbsent:[ clientPurchasedCarts at: aClientId put: OrderedCollection new]) add: (cartDatabase at: aCartID). 
	
	^ self nextTransactionID.! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 15:00:20' prior: 50897919!
add: anISBN toCart: aCartID withQuantity: aQuantity atTime: aGregorianDateTime
	self assertCart: aCartID HasntTimedoutAtTime: aGregorianDateTime .  
	(cartDatabase at: aCartID) addToCart: anISBN withQuantity: aQuantity.
	! !

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 15:01:24'!
ERROR!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 15:01:24'!
ERROR!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 15:01:24'!
ERROR!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 15:01:24'!
ERROR!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 15:01:24'!
ERROR!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 15:01:24'!
ERROR!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:01:24'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 15:01:52'!
ERROR!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 15:01:52'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 15:01:52'!
ERROR!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 15:01:52'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 15:01:52'!
ERROR!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 15:01:52'!
ERROR!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 15:01:52'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 15:01:52'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 15:01:52'!
ERROR!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 15:01:52'!
ERROR!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:01:52'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:01:52'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 15:02:13'!
ERROR!
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 15:03:25' prior: 50898877!
assertCart: aCartID HasntTimedoutAtTime: aGregorianDateTime 
	[(cartDatabase at: aCartID) beingUsedAtTime: aGregorianDateTime ]on: Error do:[:error| self error: self class cartTimeOutError  ].! !

lastTimeModified next: 30*minute!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 15:05:12'!
ERROR!

GregorianDateTime now   > (GregorianDateTime now next: 15*minute  )!
!TimedCart methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 15:05:47' prior: 50898858!
beingUsedAtTime: aGregorianDateTime
	
	(aGregorianDateTime > (lastTimeModified next: 30*minute)) ifTrue:[self error: 'Timeout'] ifFalse:[lastTimeModified := aGregorianDateTime.]
	
	! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:05:52'!
PASSED!

----SNAPSHOT----(24 June 2021 15:06:35) CuisUniversity-4532.image priorSource: 18122753!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 15:15:25'!
test13CheckOutCart30MinutesAfterCreationThrowsException

	cartId:=self createCartInInterfaceWithValidCredentials .
	
	innerInterface add: ISBNCormen  toCart: cartId  withQuantity: 1  atTime: actualTime.
	self 
		should: [	innerInterface checkOutCart: cartId withCreditCard:  #v atTime: (actualTime next: 31*minute)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface cartTimeOutError equals: anError messageText.
			]
	
	
	
	
	
	
	
	! !
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 15:15:50' prior: 50899207!
test13CheckOutCart30MinutesAfterCreationThrowsException

	cartId:=self createCartInInterfaceWithValidCredentials .
	
	innerInterface add: ISBNCormen  toCart: cartId  withQuantity: 1  atTime: actualTime.
	self 
		should: [	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: (actualTime next: 31*minute)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: ApplicationInnerInterface cartTimeOutError equals: anError messageText.
			]
	
	
	
	
	
	
	
	! !

!testRun: #TestsTusLibros #test13CheckOutCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:15:53'!
PASSED!

----QUIT----(24 June 2021 15:16:28) CuisUniversity-4532.image priorSource: 18161703!

----STARTUP---- (24 June 2021 15:21:51) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	
 x asOrderedCollection.			!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 15:26:15' prior: 50897743!
createCartWithClientId: aClientId andPassword: aPassword atTime: aGregorianDateTime  
	|newCart cartId|
	self assertValidClientId: aClientId  andPassword: 	aPassword.
	cartId := self nextCartId .
	newCart := TimedCart withCatalog: catalog atTime: aGregorianDateTime .
	cartDatabase add: cartId->newCart.
	cartsOwnerDatabase add: cartId-> aClientId.
	^cartId
	
! !
!ApplicationInnerInterface methodsFor: 'as yet unclassified' stamp: 'AM 6/24/2021 15:26:51'!
nextCartId
	lastId:=lastId+1.
	^lastId. 
	! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

!testRun: #TestsTusLibros #test13CheckOutCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 15:27:17'!
PASSED!

----QUIT----(24 June 2021 15:28:19) CuisUniversity-4532.image priorSource: 18163142!

----STARTUP---- (24 June 2021 15:28:44) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


----QUIT----(24 June 2021 15:28:54) CuisUniversity-4532.image priorSource: 18167828!

----STARTUP---- (24 June 2021 16:05:56) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!

!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 16:09:39' prior: 50897780!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: [:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases].
	
	^ purchases ! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 16:13:01'!
addCartPurchases: cartList to: aDictionary
	cartList do: [:aListTuple |aDictionary at: aListTuple first ifAbsent: [].]! !

x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	

(x at: 3 ifAbsent:[x at: 3 put: 0])
x at: 3!

x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	

(x at: 'h' ifAbsent:[x at: 'h' put: 0])
x at: 'h'!

x _ Dictionary new.							"allocate collection"
(x at: 'h' ifAbsent:[x at: 'h' put: 0]).
x at: 'h'!

x _ Dictionary new.							"allocate collection"
(x at: 'h' ifAbsent:[x at: 'h' put: 0]).
x at: 'h' put: (x at:'h'+3).
x at:'h'!

x _ Dictionary new.							"allocate collection"
(x at: 'h' ifAbsent:[x at: 'h' put: 0]).
x at: 'h' put: (x at:'h' +3).
x!

x _ Dictionary new.							"allocate collection"
(x at: 'h' ifAbsent:[x at: 'h' put: 0]).
x at: 'h' put: (x at:'h' +3).!

x at:'h' +3!

(x at:'h') +3!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 16:21:30' prior: 50899426!
addCartPurchases: cartList to: aDictionary
	cartList do: [:aListTuple |aDictionary at: (aListTuple first) ifAbsent: [aDictionary add: (aListTuple first->0)].
						aDictionary at: (aListTuple  first) put: ((aDictionary at: (aListTuple  first))+ aListTuple second).
						]! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 16:22:21' prior: 50899410!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: [:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases andTotal: totalPurchased ].
	

	
	^ purchases ! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 16:23:07' prior: 50899471!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: [:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases andTotalTo: totalPurchased ].
	

	
	^ purchases ! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 16:24:03' prior: 50899488!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: [:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases. totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	

	
	^ purchases ! !
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 16:25:41' prior: 50899505!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: [:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases. totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	
	self transformPurchasesDictionary: purchases toList: listPurchases.
	listPurchases add: totalPurchased .
	^ purchases ! !
!ApplicationInnerInterface methodsFor: 'initialization' stamp: 'AM 6/24/2021 16:28:59'!
transformPurchasesDictionary: purchases toList: listPurchases.
	purchases keysDo: [:aBookIsbn| listPurchases add: {aBookIsbn. purchases at: aBookIsbn}.]! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:29:05'!
FAILURE!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:29:05'!
FAILURE!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:29:05'!
FAILURE!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:29:05'!
PASSED!

!testRun: #TestsTusLibros #test13CheckOutCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:29:05'!
PASSED!
!ApplicationInnerInterface methodsFor: 'cartOps' stamp: 'AM 6/24/2021 16:30:18' prior: 50899524!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: [:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases. totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	
	self transformPurchasesDictionary: purchases toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:30:19'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:30:24'!
PASSED!

!testRun: #TestsTusLibros #test13CheckOutCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:30:24'!
PASSED!
!TestsTusLibros methodsFor: 'testInnerInterface' stamp: 'AM 6/24/2021 16:31:47'!
test14ListPurchasesOfClientWithPurchasesOfSameBookInDifferentCartsAreCountedCorrectly
	| listPurchases |
	cartId:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: actualTime. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: actualTime. 
	
	cartId:=self createCartInInterfaceWithValidCredentials.
	innerInterface add: ISBNCormen toCart: cartId withQuantity: 5 atTime: actualTime. 
	innerInterface checkOutCart: cartId withCreditCard: self createValidCreditCard atTime: actualTime. 
	
	listPurchases := innerInterface listPurchasesOfClient: validClientId andPassword: validClientPassword atTime: actualTime. 
	
	self assert: listPurchases size equals: 2.
	self assert: listPurchases first equals: {ISBNCormen . 10}.
	self assert: listPurchases last equals: (CormenPrice * 10).
	
	
	
	
	! !

!testRun: #TestsTusLibros #test14ListPurchasesOfClientWithPurchasesOfSameBookInDifferentCartsAreCountedCorrectly stamp: 'AM 6/24/2021 16:31:51'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test13CheckOutCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:33:35'!
PASSED!

!testRun: #TestsTusLibros #test14ListPurchasesOfClientWithPurchasesOfSameBookInDifferentCartsAreCountedCorrectly stamp: 'AM 6/24/2021 16:33:35'!
PASSED!
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:36:12' prior: 50899671!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	
	self transformPurchasesDictionary: purchases toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !

----SNAPSHOT----(24 June 2021 16:37:07) CuisUniversity-4532.image priorSource: 18168042!
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:37:16' prior: 50899905!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchases toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:38:50' prior: 50898937!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier aClientId|
	self assertCart: aCartID HasntTimedoutAtTime: aGregorianDateTime .
	
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID ) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	aClientId := cartsOwnerDatabase at: aCartID .
	
	self addCart: aCartID toClientPurchases: aClientId. 
	(clientPurchasedCarts at: aClientId ifAbsent:[ clientPurchasedCarts at: aClientId put: OrderedCollection new]) add: (cartDatabase at: aCartID). 
	
	^ self nextTransactionID.! !
!ApplicationInnerInterface methodsFor: 'private' stamp: 'AM 6/24/2021 16:38:59'!
addCart: aCartID toClientPurchases: aClientId. ! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:39:12' prior: 50899956!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier aClientId|
	self assertCart: aCartID HasntTimedoutAtTime: aGregorianDateTime .
	
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID ) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	aClientId := cartsOwnerDatabase at: aCartID .
	
	self addCart: aCartID toClientPurchases: aClientId. 
	^ self nextTransactionID.! !
!ApplicationInnerInterface methodsFor: 'private' stamp: 'AM 6/24/2021 16:39:22' prior: 50899980!
addCart: aCartID toClientPurchases: aClientId. 
	(clientPurchasedCarts at: aClientId ifAbsent:[ clientPurchasedCarts at: aClientId put: OrderedCollection new]) add: (cartDatabase at: aCartID). ! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:40:04' prior: 50899985!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier |
	self assertCart: aCartID HasntTimedoutAtTime: aGregorianDateTime .
	
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID ) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	
	
	self addCartToClientPurchases: aCartID. 
	^ self nextTransactionID.! !
!ApplicationInnerInterface methodsFor: 'private' stamp: 'AM 6/24/2021 16:40:49'!
addCartToClientPurchases: aCartID
	|aClientId|

	aClientId := cartsOwnerDatabase at: aCartID .
	(clientPurchasedCarts at: aClientId ifAbsent:[ clientPurchasedCarts at: aClientId put: OrderedCollection new]) add: (cartDatabase at: aCartID). ! !

!methodRemoval: ApplicationInnerInterface #addCart:toClientPurchases: stamp: 'AM 6/24/2021 16:40:56'!
addCart: aCartID toClientPurchases: aClientId. 
	(clientPurchasedCarts at: aClientId ifAbsent:[ clientPurchasedCarts at: aClientId put: OrderedCollection new]) add: (cartDatabase at: aCartID). !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:41:11' prior: 50900015!
checkOutCart: aCartID withCreditCard: aCreditCard atTime: aGregorianDateTime 
	|cashier |
	self assertCart: aCartID HasntTimedoutAtTime: aGregorianDateTime .
	
	cashier  := Cashier createWithMerchantProcessor: merchantProcessor.
	cashier checkOutCart: (cartDatabase at: aCartID ) usingCreditCard: aCreditCard  onMonthOfYear: aGregorianDateTime monthOfYear andRegisterOn: OrderedCollection new.
	
	self addCartToClientPurchases: aCartID. 
	^ self nextTransactionID.! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:42:40' prior: 50899932!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	totalPurchased:= self createDictionaryOfPurchasesFromClient: aClientID. 

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchases toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:43:04' prior: 50900072!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	totalPurchased:= self createDictionaryOfPurchasesFromClient: aClientID. 

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchases toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !
!ApplicationInnerInterface methodsFor: 'private' stamp: 'AM 6/24/2021 16:43:10'!
createDictionaryOfPurchasesFromClient: aClientID. 

! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:44:24' prior: 50900099!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	totalPurchased:= self createDictionaryOfPurchasesFromClient: aClientID. 

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchases toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:45:53' prior: 50900131!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchases totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	totalPurchased:= self createDictionaryOfPurchasesFromClient: aClientID. 

	purchases := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchases. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchases toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/24/2021 16:45:57'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/24/2021 16:45:57'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/24/2021 16:45:57'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 16:45:57'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/24/2021 16:45:57'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:45:57'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test13CheckOutCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:45:58'!
PASSED!

!testRun: #TestsTusLibros #test14ListPurchasesOfClientWithPurchasesOfSameBookInDifferentCartsAreCountedCorrectly stamp: 'AM 6/24/2021 16:45:58'!
PASSED!
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:47:42' prior: 50900158!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchasesDictionary totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	totalPurchased:= self createDictionaryOfPurchasesFromClient: aClientID. 

	purchasesDictionary := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchasesDictionary. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchasesDictionary toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:48:37' prior: 50900305!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchasesDictionary totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	totalPurchased:= self addPurchasesFromClient:aClientID toDictionary: purchasesDictionary . 

	purchasesDictionary := Dictionary new.
	totalPurchased:=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchasesDictionary. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchasesDictionary toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:48:48' prior: 50900333!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchasesDictionary totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	totalPurchased:= self addPurchasesFromClient:aClientID toDictionary: purchasesDictionary . 

	purchasesDictionary := Dictionary new.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchasesDictionary. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchasesDictionary toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:49:05' prior: 50900361!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchasesDictionary totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	purchasesDictionary :=Dictionary new.
	totalPurchased:= self addPurchasesFromClient: aClientID toDictionary: purchasesDictionary . 

	purchasesDictionary := Dictionary new.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchasesDictionary. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchasesDictionary toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:49:14' prior: 50900389!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchasesDictionary totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	purchasesDictionary :=Dictionary new.
	totalPurchased:= self addPurchasesFromClient: aClientID toDictionary: purchasesDictionary . 

	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchasesDictionary. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchasesDictionary toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !

!methodRemoval: ApplicationInnerInterface #createDictionaryOfPurchasesFromClient: stamp: 'AM 6/24/2021 16:49:21'!
createDictionaryOfPurchasesFromClient: aClientID. 

!
!ApplicationInnerInterface methodsFor: 'private' stamp: 'AM 6/24/2021 16:49:27'!
addPurchasesFromClient: aClientID toDictionary: purchasesDictionary
! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:49:36' prior: 50900418!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchasesDictionary totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	purchasesDictionary :=Dictionary new.
	totalPurchased:= self addPurchasesFromClient: aClientID toDictionary: purchasesDictionary . 

	
	
	listPurchases := OrderedCollection new.
	self transformPurchasesDictionary: purchasesDictionary toList: listPurchases.
	listPurchases add: totalPurchased .
	^ listPurchases ! !
!ApplicationInnerInterface methodsFor: 'private' stamp: 'AM 6/24/2021 16:49:57' prior: 50900450!
addPurchasesFromClient: aClientID toDictionary: purchasesDictionary
	|totalPurchased|
	totalPurchased :=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchasesDictionary. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
! !
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:50:50' prior: 50900456!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchasesDictionary totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	purchasesDictionary :=Dictionary new.
	totalPurchased:= self addPurchasesFromClient: aClientID toDictionary: purchasesDictionary . 
	listPurchases := self listPurchasesDictionary: purchasesDictionary.
	listPurchases add: totalPurchased .
	^ listPurchases ! !
!ApplicationInnerInterface methodsFor: 'private' stamp: 'AM 6/24/2021 16:51:44'!
listPurchasesDictionary:  purchasesDictionary
	|listPurchases|
	listPurchases :=OrderedCollection new.
	purchasesDictionary keysDo: [:aBookIsbn| listPurchases add: {aBookIsbn. purchasesDictionary at: aBookIsbn}.]! !

!methodRemoval: ApplicationInnerInterface #transformPurchasesDictionary:toList: stamp: 'AM 6/24/2021 16:52:01'!
transformPurchasesDictionary: purchases toList: listPurchases.
	purchases keysDo: [:aBookIsbn| listPurchases add: {aBookIsbn. purchases at: aBookIsbn}.]!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/24/2021 16:52:04'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:52:05'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:52:05'!
ERROR!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:52:05'!
ERROR!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test13CheckOutCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:52:05'!
PASSED!

!testRun: #TestsTusLibros #test14ListPurchasesOfClientWithPurchasesOfSameBookInDifferentCartsAreCountedCorrectly stamp: 'AM 6/24/2021 16:52:05'!
ERROR!
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:52:33' prior: 50900491!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchasesDictionary totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	purchasesDictionary :=Dictionary new.
	totalPurchased:= self addPurchasesFromClient: aClientID toDictionary: purchasesDictionary . 
	listPurchases := self listPurchasesDictionary: purchasesDictionary.
	listPurchases add: totalPurchased .
	^ listPurchases ! !

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 16:52:42'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 16:52:42'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 16:52:42'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 16:52:42'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 16:52:42'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 16:52:42'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 16:52:42'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:52:42'!
ERROR!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:52:42'!
ERROR!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:52:42'!
ERROR!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:52:42'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:52:42'!
PASSED!

!testRun: #TestsTusLibros #test13CheckOutCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:52:42'!
PASSED!

!testRun: #TestsTusLibros #test14ListPurchasesOfClientWithPurchasesOfSameBookInDifferentCartsAreCountedCorrectly stamp: 'AM 6/24/2021 16:52:42'!
ERROR!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:53:01'!
ERROR!
!ApplicationInnerInterface methodsFor: 'private' stamp: 'AM 6/24/2021 16:53:59' prior: 50900509!
listPurchasesDictionary:  purchasesDictionary
	|listPurchases|
	listPurchases :=OrderedCollection new.
	purchasesDictionary keysDo: [:aBookIsbn| listPurchases add: {aBookIsbn. purchasesDictionary at: aBookIsbn}.].
	^listPurchases.! !

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:54:02'!
FAILURE!
!ApplicationInnerInterface methodsFor: 'cart-operations' stamp: 'AM 6/24/2021 16:54:29' prior: 50900648!
listPurchasesOfClient: aClientID andPassword: aClientPassword atTime: aGregorianDateTime  
	|purchasesDictionary totalPurchased listPurchases|
	self assertValidClientId: aClientID andPassword: aClientPassword .
	
	purchasesDictionary :=Dictionary new.
	totalPurchased:= self addPurchasesFromClient: aClientID toDictionary: purchasesDictionary . 
	listPurchases := self listPurchasesDictionary: purchasesDictionary.
	listPurchases add: totalPurchased .
	^ listPurchases ! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:54:32'!
FAILURE!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:54:32'!
FAILURE!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:54:32'!
FAILURE!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test13CheckOutCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:54:32'!
PASSED!

!testRun: #TestsTusLibros #test14ListPurchasesOfClientWithPurchasesOfSameBookInDifferentCartsAreCountedCorrectly stamp: 'AM 6/24/2021 16:54:32'!
FAILURE!
!ApplicationInnerInterface methodsFor: 'private' stamp: 'AM 6/24/2021 16:55:37' prior: 50900476!
addPurchasesFromClient: aClientID toDictionary: purchasesDictionary
	|totalPurchased|
	totalPurchased :=0.
	
	(clientPurchasedCarts at: aClientID ifAbsent:[OrderedCollection new]) do: 
	[:aPurchasedCart| self addCartPurchases: aPurchasedCart listCart to: purchasesDictionary. 
		totalPurchased := totalPurchased + aPurchasedCart priceSummary ].
	
	^totalPurchased.
! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test01listCartOfNewCartIsEmpty stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test02createCartWithInvalidCredentialsThrowsError stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test03listCartAfterAddingAProductGivesCorrectListCart stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test04createDifferentCartsWillHaveDifferentsID stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test05DifferentCartsListContentCorrectly stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test06CheckOutTwoDifferentCartsHaveDifferentTransactionID stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test07ListPurchasesMustHaveValidCredentials stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test08ListPurchasesOfClientWithoutPurchasesHasTotalAmountZero stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test09ListPurchasesOfClientWithOnePurchaseHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test10ListPurchasesOfClientWithManyPurchasesHasAllItemsAndCorrectAmount stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test11ListCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test12AddBooksToCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test13CheckOutCart30MinutesAfterCreationThrowsException stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

!testRun: #TestsTusLibros #test14ListPurchasesOfClientWithPurchasesOfSameBookInDifferentCartsAreCountedCorrectly stamp: 'AM 6/24/2021 16:55:45'!
PASSED!

----QUIT----(24 June 2021 16:55:57) CuisUniversity-4532.image priorSource: 18184877!