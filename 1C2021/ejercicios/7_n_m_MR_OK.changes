!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:00:15' prior: 50867098!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
				]
		].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 17:00:48'!
test05
	|robot|
	robot := MarsRover createAt: (2@2) pointing: #North.
	robot receivePackage: 'fff'.
	
	self robot: robot IsAtPosition: (2@5) pointing: #North.! !

!methodRemoval: MarsRoverTest #test05 stamp: 'AM 5/15/2021 19:28:22'!
test05
	|robot|
	robot := MarsRover createAt: (2@2) pointing: #North.
	robot receivePackage: 'fff'.
	
	self robot: robot IsAtPosition: (2@5) pointing: #North.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 17:08:28'!
test05
	|robot|
	robot := MarsRover createAt: (2@2) pointing: #North.
	robot receivePackage: 'l'.
	
	self robot: robot IsAtPosition: (2@4) pointing: #West.! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:10:21' prior: 50870046!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing := #West]
				]
		].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 17:10:33' prior: 50870071!
test05
	|robot|
	robot := MarsRover createAt: (2@2) pointing: #North.
	robot receivePackage: 'l'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #West.! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:15:16' prior: 50870079!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing = #West) ifTrue: [pointing := #South].
											  [(pointing = #North) ifTrue: [pointing := #West]]]
				]
				
		].! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:17:00' prior: 50870100!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing = #West) ].
											 
				]
				
		].! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:17:13' prior: 50870115!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing := #West) ].
											 
				]
				
		].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 17:17:40'!
test06
	|robot|
	robot := MarsRover createAt: (2@2) pointing: #North.
	robot receivePackage: 'll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #South.! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:19:07' prior: 50870128!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing = #West)ifTrue: [pointing:= #South ].
											   (pointing = #North)ifTrue: [pointing:= #West ].
							
											].
											 
				]
				
		].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 17:20:52'!
test07
	|robot|
	robot := MarsRover createAt: (2@2) pointing: #North.
	robot receivePackage: 'lll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #East.! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:23:12' prior: 50870149!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing = #West)ifTrue: [pointing:= #South ].
											   (pointing = #North)ifTrue: [pointing:= #West ].
											   (pointing = #South)ifTrue: [pointing:= #East ].

							
											].
											 
				]
				
		].! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:29:44' prior: 50870173!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing = #West)ifTrue: [pointing:= #South ifFalse:[ .
											   (pointing = #North)ifTrue: [pointing:= #West ]ifFalse:[
											   (pointing = #South)ifTrue: [pointing:= #East ]]]]

							
											].
											 
				]
				
		].! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:23:12' prior: 50870191!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing = #West)ifTrue: [pointing:= #South ].
											   (pointing = #North)ifTrue: [pointing:= #West ].
											   (pointing = #South)ifTrue: [pointing:= #East ].

							
											].
											 
				]
				
		].! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:23:12' prior: 50870210!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing = #West)ifTrue: [pointing:= #South ].
											   (pointing = #North)ifTrue: [pointing:= #West ].
											   (pointing = #South)ifTrue: [pointing:= #East ].

							
											].
											 
				]
				
		].! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:34:23' prior: 50870228!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing = #West)ifTrue: [pointing:= #South] ifFalse:[
											   (pointing = #North)ifTrue: [pointing:= #West] ifFalse:[
											   (pointing = #South)ifTrue: [pointing:= #East]]]


							
											].
											 
				]
				
		].! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:38:18' prior: 50870246!
receivePackage: aString 
	| newDirection|
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing = #West)ifTrue: [newDirection := #South] .
											   (pointing = #North)ifTrue: [newDirection:= #West] .
											   (pointing = #South)ifTrue: [newDirection:= #East].
											    pointing  := newDirection.


							
											].
											 
				]
				
		].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 17:38:32' prior: 50870165!
test07
	|robot|
	robot := MarsRover createAt: (2@2) pointing: #North.
	robot receivePackage: 'llll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 17:38:37' prior: 50870286!
test07
	|robot|
	robot := MarsRover createAt: (2@2) pointing: #North.
	robot receivePackage: 'lll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 17:38:43'!
test08
	|robot|
	robot := MarsRover createAt: (2@2) pointing: #North.
	robot receivePackage: 'llll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 17:39:33' prior: 50870303!
test08
	|robot|
	robot := MarsRover createAt: (2@2) pointing: #North.
	robot receivePackage: 'llll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #North.! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 17:40:35' prior: 50870265!
receivePackage: aString 
	| newDirection|
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[(pointing = #West)ifTrue: [newDirection := #South] .
											   (pointing = #North)ifTrue: [newDirection:= #West] .
											   (pointing = #South)ifTrue: [newDirection:= #East].
											   (pointing = #East)ifTrue: [newDirection:= #North].
											    pointing  := newDirection.


							
											].
											 
				]
				
		].! !

!classDefinition: #RobotOrientation category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
Object subclass: #RobotOrientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #RobotOrientation category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
Object subclass: #RobotOrientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #RobotOrientationNorth category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
RobotOrientation subclass: #RobotOrientationNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #RobotOrientationNorth category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
RobotOrientation subclass: #RobotOrientationNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #RobotOrientationSouth category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
RobotOrientation subclass: #RobotOrientationSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #RobotOrientationSouth category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
RobotOrientation subclass: #RobotOrientationSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #RobotOrientationEast category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
RobotOrientation subclass: #RobotOrientationEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #RobotOrientationEast category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
RobotOrientation subclass: #RobotOrientationEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #RobotOrientationWest category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
RobotOrientation subclass: #RobotOrientationWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #RobotOrientationWest category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
RobotOrientation subclass: #RobotOrientationWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #East category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
RobotOrientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #East category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:22'!
RobotOrientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classRemoval: #RobotOrientationEast stamp: 'AM 5/15/2021 19:28:23'!
RobotOrientation subclass: #RobotOrientationEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #North category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:23'!
RobotOrientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #North category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:23'!
RobotOrientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classRemoval: #RobotOrientationNorth stamp: 'AM 5/15/2021 19:28:23'!
RobotOrientation subclass: #RobotOrientationNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #South category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:23'!
RobotOrientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #South category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:23'!
RobotOrientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classRemoval: #RobotOrientationSouth stamp: 'AM 5/15/2021 19:28:24'!
RobotOrientation subclass: #RobotOrientationSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #West category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:24'!
RobotOrientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #West category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:24'!
RobotOrientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classRemoval: #RobotOrientationWest stamp: 'AM 5/15/2021 19:28:25'!
RobotOrientation subclass: #RobotOrientationWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!
!RobotOrientation methodsFor: 'nil' stamp: 'bocaccio 5/15/2021 17:48:20'!
turnLeft
	^ self subclassResponsibility .! !
!East methodsFor: 'nil' stamp: 'bocaccio 5/15/2021 17:48:49' overrides: 50870506!
turnLeft
	^ North new! !
!North methodsFor: 'nil' stamp: 'bocaccio 5/15/2021 17:48:55' overrides: 50870506!
turnLeft
	^ self subclassResponsibility .! !
!North methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 17:49:07' prior: 50870514 overrides: 50870506!
turnLeft
	^ West new.! !
!South methodsFor: 'nil' stamp: 'bocaccio 5/15/2021 17:49:33' overrides: 50870506!
turnLeft
	^ East new! !
!West methodsFor: 'nil' stamp: 'bocaccio 5/15/2021 17:50:12' overrides: 50870506!
turnLeft
	^ South new! !
!MarsRover methodsFor: 'initalization' stamp: 'bocaccio 5/15/2021 18:05:29' prior: 50859533!
initializeCreateAt: aCoordenate pointing: aCardinalPoint
	position := aCoordenate.
	pointing := aCardinalPoint.
	! !
!RobotOrientation methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:07:10' prior: 50870506!
turnLeft
	^ self subclassResponsibility .
	! !
!RobotOrientation methodsFor: 'nil' stamp: 'bocaccio 5/15/2021 18:13:50'!
correctOrientation: aCardinalPoint
self detect: [true]! !
!MarsRover methodsFor: 'initalization' stamp: 'bocaccio 5/15/2021 18:17:43' prior: 50870531!
initializeCreateAt: aCoordenate pointing: aCardinalPoint
	position := aCoordenate.
	(aCardinalPoint = #West)ifTrue: [pointing := #South] .
      (aCardinalPoint = #North)ifTrue: [pointing = #West] .
     (aCardinalPoint = #South)ifTrue: [pointing = #East].
     (aCardinalPoint = #East)ifTrue: [pointing = #North].! !
!MarsRover methodsFor: 'initalization' stamp: 'bocaccio 5/15/2021 18:19:22' prior: 50870547!
initializeCreateAt: aCoordenate pointing: aCardinalPoint
	position := aCoordenate.
	pointing := aCardinalPoint.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:20:49' prior: 50867055!
test01
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North.
	robot receivePackage: ''.
	self robot: robot IsAtPosition: (2@2) pointing: North.! !
!MarsRover methodsFor: 'initalization' stamp: 'bocaccio 5/15/2021 18:20:59' prior: 50870560!
initializeCreateAt: aCoordenate pointing: aCardinalPoint
	position := aCoordenate.
	pointing := aCardinalPoint new.! !
!MarsRover methodsFor: 'initalization' stamp: 'bocaccio 5/15/2021 18:21:15' prior: 50870575!
initializeCreateAt: aCoordenate pointing: aCardinalPoint
	position := aCoordenate.
	pointing := aCardinalPoint.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:21:24' prior: 50870567!
test01
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: ''.
	self robot: robot IsAtPosition: (2@2) pointing: North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:23:34' prior: 50870589!
test01
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: ''.
	self robot: robot IsAtPosition: (2@2) pointing: North new.! !
!RobotOrientation methodsFor: 'nil' stamp: 'bocaccio 5/15/2021 18:28:04' overrides: 16881029!
= aCardinalPoint
^ self class = aCardinalPoint  class. ! !
!RobotOrientation methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:28:18' prior: 50870607 overrides: 16881029!
= anObject
^ self class = anObject class. ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:29:24' prior: 50870598!
test01
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: ''.
	self robot: robot IsAtPosition: (2@2) pointing: North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:30:48' prior: 50867082!
test02
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (2@3) pointing: North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:30:55' prior: 50867090!
test03
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'b'.
	
	self robot: robot IsAtPosition: (2@1) pointing: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:31:02' prior: 50867107!
test04
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'ff'.
	
	self robot: robot IsAtPosition: (2@4) pointing: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:31:09' prior: 50870092!
test05
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'l'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #West.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:31:15' prior: 50870141!
test06
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #South.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:31:21' prior: 50870295!
test07
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #East.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:31:28' prior: 50870312!
test08
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: #North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:32:35' prior: 50870618!
test01
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: ''.
	self robot: robot IsAtPosition: (2@2) pointing: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:32:49' prior: 50870690!
test01
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: ''.
	self robot: robot IsAtPosition: (2@2) pointing: North.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:33:10' prior: 50870699!
test01
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: ''.
	self robot: robot IsAtPosition: (2@2) pointing: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:33:24' prior: 50870627!
test02
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (2@3) pointing: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:33:43' prior: 50870636!
test03
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'b'.
	
	self robot: robot IsAtPosition: (2@1) pointing: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:35:43' prior: 50870645!
test04
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'ff'.
	
	self robot: robot IsAtPosition: (2@4) pointing: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:35:50' prior: 50870654!
test05
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'l'.
	
	self robot: robot IsAtPosition: (2@2) pointing: West new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:35:56' prior: 50870663!
test06
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: South new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:36:03' prior: 50870672!
test07
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: East new .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:36:09' prior: 50870681!
test08
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: North new.! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 18:37:44' prior: 50870320!
receivePackage: aString 
	| newDirection|
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft 


							
											].
											 
				]
				
		].! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 18:38:27' prior: 50870779!
receivePackage: aString 
	| newDirection|
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 18:38:27' prior: 50870793!
receivePackage: aString 
	| newDirection|
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 18:38:27' prior: 50870807!
receivePackage: aString 
	| newDirection|
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 18:38:35' prior: 50870821!
receivePackage: aString 
	
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !

!classDefinition: #MarsRover category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:26'!
Object subclass: #MarsRover
	instanceVariableNames: 'position pointing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!

!classDefinition: #MarsRover category: 'Terraforming Mars' stamp: 'AM 5/15/2021 19:28:26'!
Object subclass: #MarsRover
	instanceVariableNames: 'position pointing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terraforming Mars'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:40:57'!
test01_emptypackage_keepsTheSame
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: ''.
	self robot: robot IsAtPosition: (2@2) pointing: North new.! !

!methodRemoval: MarsRoverTest #test01 stamp: 'AM 5/15/2021 19:28:26'!
test01
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: ''.
	self robot: robot IsAtPosition: (2@2) pointing: North new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:43:42'!
test02_moveNorthwiseOnePosition
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (2@3) pointing: North new.! !

!methodRemoval: MarsRoverTest #test02 stamp: 'AM 5/15/2021 19:28:26'!
test02
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (2@3) pointing: North new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:44:27'!
test02_moveNorthwiseOnePositionForward
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (2@3) pointing: North new.! !

!methodRemoval: MarsRoverTest #test02_moveNorthwiseOnePosition stamp: 'AM 5/15/2021 19:28:26'!
test02_moveNorthwiseOnePosition
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (2@3) pointing: North new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:45:18'!
test03_moveNorthwiseOnePositionBackwards
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'b'.
	
	self robot: robot IsAtPosition: (2@1) pointing: North new.! !

!methodRemoval: MarsRoverTest #test03 stamp: 'AM 5/15/2021 19:28:26'!
test03
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'b'.
	
	self robot: robot IsAtPosition: (2@1) pointing: North new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:45:57'!
test04_moveNorthwiseTwoPositionsForwards
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'ff'.
	
	self robot: robot IsAtPosition: (2@4) pointing: North new.! !

!methodRemoval: MarsRoverTest #test04 stamp: 'AM 5/15/2021 19:28:26'!
test04
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'ff'.
	
	self robot: robot IsAtPosition: (2@4) pointing: North new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:47:09'!
test05_turnLeftNorthToWestCorrectly
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'l'.
	
	self robot: robot IsAtPosition: (2@2) pointing: West new.! !

!methodRemoval: MarsRoverTest #test05 stamp: 'AM 5/15/2021 19:28:26'!
test05
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'l'.
	
	self robot: robot IsAtPosition: (2@2) pointing: West new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:47:49'!
test06_turnLeftTwiceStartingOnNorthFinishOnSouth
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: South new.! !

!methodRemoval: MarsRoverTest #test06 stamp: 'AM 5/15/2021 19:28:26'!
test06
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: South new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:48:17'!
test06_turnLeftTwiceStartingOnNorthFinishSouth
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: South new.! !

!methodRemoval: MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishOnSouth stamp: 'AM 5/15/2021 19:28:26'!
test06_turnLeftTwiceStartingOnNorthFinishOnSouth
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: South new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:49:56'!
test07_turnLeftThreeTimesEndsEast
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: East new .! !

!methodRemoval: MarsRoverTest #test07 stamp: 'AM 5/15/2021 19:28:26'!
test07
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: East new .!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:50:27'!
test07_turnLeftThreeTimesStartingNorthFinishEast
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: East new .! !

!methodRemoval: MarsRoverTest #test07_turnLeftThreeTimesEndsEast stamp: 'AM 5/15/2021 19:28:26'!
test07_turnLeftThreeTimesEndsEast
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: East new .!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:51:16'!
test08_turnLeftFourTimesStartingNorthFinishNorth
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: North new.! !

!methodRemoval: MarsRoverTest #test08 stamp: 'AM 5/15/2021 19:28:26'!
test08
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llll'.
	
	self robot: robot IsAtPosition: (2@2) pointing: North new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:53:58'!
test09
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lf'.
	
	self robot: robot IsAtPosition: (3@2) pointing: West new.! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 18:55:19' prior: 50870835!
receivePackage: aString 
	
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !
!RobotOrientation methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:56:56' prior: 50870613 overrides: 16881029!
= anObject
^ self class = anObject ! !
!RobotOrientation methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 18:57:50' prior: 50871077 overrides: 16881029!
= anObject
^ self class = anObject class ! !

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:26'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:26'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:29:03'!
assertShouldAddAll: portableObjects withPoints: expectedTotalPoints

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: self backpackWeight limitingPointsTo: 100.

	portableObjects do: [ :aPortableObject | aBackpack add: aPortableObject ].
	
	self assert: aBackpack size equals: portableObjects size.
	self assert: aBackpack totalWeight equals: (portableObjects sum: [ :aPortableObject | aPortableObject weight ]).
	self assert: aBackpack totalPoints equals: expectedTotalPoints.
! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:28:32'!
assertShouldNotAddPortableObjectIfWeightExceeded: aPortableObject

	| aBackpack |
	aBackpack := Backpack containingUpTo: self backpackWeight limitingPointsTo: 100.

	self
		should: [ aBackpack add: aPortableObject ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: aBackpack isEmpty. 
! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:28:32'!
backpackWeight

	^ 42! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:28:41'!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	self assertShouldNotAddPortableObjectIfWeightExceeded: 
		(NoPointsPortableObject named: 'help-wanted sign' weighing: self backpackWeight + 1)
! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:28:47'!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	self assertShouldNotAddPortableObjectIfWeightExceeded: 
		(PointsPortableObject named: 'left-handed hammer' weighing: self backpackWeight + 6 worth: 5) ! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:26:42'!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	self 
		assertShouldAddAll: self twoPortableObjects
		withPoints: 5.
! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:27:27'!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	self 
		assertShouldAddAll:  self twoPortableObjects, {(PointsPortableObject named: 'letter' weighing: 1 worth: 5)}
		withPoints: 10.
! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:27:39'!
twoPortableObjects

	^ {
		(PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
		(NoPointsPortableObject named: 'help-wanted sign' weighing: 1) }! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test01CanNotCreateBackpackWithZeroMaxWeight

	self
		should: [ Backpack containingUpTo: 0 limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack invalidWeightCapacityErrorDescription.
! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test02CanNotCreateBackpackWithNegativeMaxWeight

	self
		should: [ Backpack containingUpTo: -1 limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack invalidWeightCapacityErrorDescription.! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test03CanNotCreateBackpackWithZeroMaxPoints

	self
		should: [ Backpack containingUpTo: 10 limitingPointsTo: 0 ]
		raise: Error
		withMessageText: Backpack invalidPointsCapacityErrorDescription.
! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test04CanNotCreateBackpackWithNegativeMaxPoints

	self
		should: [ Backpack containingUpTo: 10 limitingPointsTo: -1 ]
		raise: Error
		withMessageText: Backpack invalidPointsCapacityErrorDescription.! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test05CanNotCreateBackpackWithNoIntegerMaxWeight

	self
		should: [ Backpack containingUpTo: 1.0 limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack weightCapacityMustBeIntegerErrorDescription.
! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test06CanNotCreateBackpackWithNoIntegerMaxPoints

	self
		should: [ Backpack containingUpTo: 100 limitingPointsTo: 1.0 ]
		raise: Error
		withMessageText: Backpack pointsCapacityMustBeIntegerErrorDescription.
! !
!BackpackTest methodsFor: 'accessing' stamp: 'HAW 10/14/2020 14:49:20'!
test11ShouldAddZeroWeightWhenEmpty

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	self assert: aBackpack totalWeight equals: 0.
	self assert: aBackpack isEmpty
! !
!BackpackTest methodsFor: 'accessing' stamp: 'HAW 10/14/2020 14:35:57'!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'HAW 10/14/2020 14:49:31'!
test13ShouldAddZeroPointsWhenEmpty

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	self assert: aBackpack totalPoints equals: 0.
	self assert: aBackpack isEmpty.
! !
!BackpackTest methodsFor: 'accessing' stamp: 'HAW 10/14/2020 14:35:57'!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (PointsPortableObject named: 'car key' weighing: 10 worth: 20).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalPoints equals: 25.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'HAW 10/14/2020 14:35:57'!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:27'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:27'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!DoorTest methodsFor: 'opening' stamp: 'HAW 10/14/2020 14:43:48'!
test01ADoorOpenedCanNotBeOpenedAgain
	
	| mainCharacter aDoor |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	aDoor := Door opened.
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter ]
		raise: Error
		withMessageText: Door alreadyOpenedErrorDescription.
		
	self assert: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'HAW 10/14/2020 14:44:18'!
test04ADoorClosedCanBeOpened
	
	| mainCharacter aDoor |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	aDoor := Door closed.
	
	self deny: aDoor isOpen.
	aDoor toBeOpenedBy: mainCharacter.
	self assert: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'HAW 10/14/2020 14:44:30'!
test05ADoorClosedCanNotBeOpenedWithAKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	aDoor := Door closed.
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter using: oldKey ]
		raise: Error
		withMessageText: Door noNeedForAKeyErrorDescription.
		
	self deny: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'HAW 10/14/2020 14:47:44'!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'opening' stamp: 'HAW 10/14/2020 14:47:52'!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: mainCharacter using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		raise: Error
		withMessageText: Door notCorrectKeyErrorDescription.
		
	self deny: aDoor isOpen ! !
!DoorTest methodsFor: 'opening' stamp: 'HAW 10/14/2020 14:48:03'!
test09ADoorKeyClosedCanBeOpenWithTheCorrectKey
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self deny: aDoor isOpen.
	aDoor toBeOpenedBy: mainCharacter using: oldKey.
	self assert: aDoor isOpen! !
!DoorTest methodsFor: 'closing' stamp: 'HAW 10/14/2020 14:43:40'!
test02ADoorOpenedCanBeClosed
	
	| mainCharacter aDoor |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	aDoor := Door opened.
	
	self assert: aDoor isOpen.
	aDoor toBeClosedBy: mainCharacter.
	self deny: aDoor isOpen.
	! !
!DoorTest methodsFor: 'closing' stamp: 'HAW 10/18/2020 12:37:04'!
test03ADoorClosedCanNotBeClosedAgain
	
	| mainCharacter aDoor |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	aDoor := Door closed.
	
	self 
		should: [ aDoor toBeClosedBy: mainCharacter ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'closing' stamp: 'HAW 10/14/2020 14:48:25'!
test06ADoorKeyClosedCanNotBeClosedAgain
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeClosedBy: mainCharacter ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !
!DoorTest methodsFor: 'using' stamp: 'HAW 10/14/2020 14:48:39'!
test10WhenUsingADoorClosedGetsOpened
	
	| mainCharacter aDoor |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	aDoor := Door closed.
	
	self deny: aDoor isOpen.
	aDoor toBeUsedBy: mainCharacter.	
	self assert: aDoor isOpen ! !
!DoorTest methodsFor: 'using' stamp: 'HAW 10/14/2020 14:48:50'!
test11WhenUsingADoorOpenedGetsClosed
	
	| mainCharacter aDoor |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	aDoor := Door opened.
	
	self assert: aDoor isOpen.
	aDoor toBeUsedBy: mainCharacter.	
	self deny: aDoor isOpen.! !
!DoorTest methodsFor: 'using' stamp: 'HAW 10/14/2020 14:49:01'!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	| mainCharacter aDoor oldKey |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeUsedBy: mainCharacter ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !

!classDefinition: #Backpack category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #Backpack category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!Backpack methodsFor: 'exceptions' stamp: 'FRT 10/8/2020 18:02:29'!
signalMaxPointsExceeded

	self error: self class maxPointsExceededErrorDescription ! !
!Backpack methodsFor: 'exceptions' stamp: 'FRT 10/8/2020 18:02:47'!
signalMaxWeightExceeded

	self error: self class maxWeightExceededErrorDescription ! !
!Backpack methodsFor: 'initialization' stamp: 'HAW 10/14/2020 14:31:56'!
initializeContainingUpTo: aWeightCapacity limitingPointsTo: pointsCapacity

	weightCapacity := aWeightCapacity.
	gamePointsCapacity := pointsCapacity.
	
	container := OrderedCollection new.
	
	
	! !
!Backpack methodsFor: 'accessing' stamp: 'FRT 10/11/2020 19:14:47' overrides: 16880927!
size

	^ container size.! !
!Backpack methodsFor: 'accessing' stamp: 'HAW 10/18/2020 12:20:52'!
totalPoints
		
	^(container select: [ :portableObject | portableObject doesItAddPoints ])	
		sum: [ :portableObject | portableObject points ]
		ifEmpty: [ 0 ]! !
!Backpack methodsFor: 'accessing' stamp: 'HAW 10/18/2020 12:20:20'!
totalWeight
	
	^container 
		sum: [ :portableObject | portableObject weight ]
		ifEmpty: [ 0 ]
		! !
!Backpack methodsFor: 'assertions' stamp: 'FRT 10/12/2020 14:12:36'!
assertPointsAdding: aPointsPortableObject

	(self totalPoints + aPointsPortableObject points) > gamePointsCapacity ifTrue: [ self signalMaxPointsExceeded ]! !
!Backpack methodsFor: 'assertions' stamp: 'FRT 10/15/2020 12:22:34'!
assertWeightAdding: aPortableObject tolerating: aThreshold

	(self totalWeight + aPortableObject weight - weightCapacity) > aThreshold ifTrue: [ self signalMaxWeightExceeded ]! !
!Backpack methodsFor: 'adding' stamp: 'HAW 10/18/2020 12:28:24'!
add: aPortableObject
	
	aPortableObject assertCanAddTo: self.
	
	container add: aPortableObject.
	! !
!Backpack methodsFor: 'testing' stamp: 'FRT 10/11/2020 18:38:38'!
isEmpty

	^ container isEmpty.! !
!Backpack methodsFor: 'adding - private' stamp: 'HAW 10/18/2020 12:28:48'!
assertCanAddNoPointsPortableObject: aNoPointsPortableObject 
	
	self assertWeightAdding: aNoPointsPortableObject tolerating: 0.
	! !
!Backpack methodsFor: 'adding - private' stamp: 'HAW 10/18/2020 12:29:07'!
assertCanAddPointPortableObject: aPointsPortableObject 
	
	self assertWeightAdding: aPointsPortableObject tolerating: 5.
	self assertPointsAdding: aPointsPortableObject.
	! !

!classDefinition: 'Backpack class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
Backpack class
	instanceVariableNames: ''!

!classDefinition: 'Backpack class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
Backpack class
	instanceVariableNames: ''!
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/11/2020 18:27:33'!
invalidPointsCapacityErrorDescription

	^ 'Points capacity must be positive'! !
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/11/2020 18:21:04'!
invalidWeightCapacityErrorDescription

	^ 'Weight capacity must be positive'! !
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/8/2020 17:36:29'!
maxPointsExceededErrorDescription

	^ 'Maximum points has been exceeded'! !
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/8/2020 17:36:17'!
maxWeightExceededErrorDescription

	^ 'Maximum weight has been exceeded'! !
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/8/2020 17:43:00'!
pointsCapacityMustBeIntegerErrorDescription

	^ 'Points capacity must be integer'! !
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/8/2020 17:42:48'!
weightCapacityMustBeIntegerErrorDescription

	^ 'Weight capacity must be integer'! !
!Backpack class methodsFor: 'exceptions' stamp: 'FRT 10/11/2020 18:27:16'!
signalInvalidPointsCapacity

	self error: self invalidPointsCapacityErrorDescription 
! !
!Backpack class methodsFor: 'exceptions' stamp: 'FRT 10/11/2020 18:21:51'!
signalInvalidWeightCapacity

	self error: self invalidWeightCapacityErrorDescription 
! !
!Backpack class methodsFor: 'exceptions' stamp: 'FRT 10/8/2020 17:41:06'!
signalPointsCapacityMustBeInteger

	self error: self pointsCapacityMustBeIntegerErrorDescription
! !
!Backpack class methodsFor: 'exceptions' stamp: 'FRT 10/8/2020 17:40:47'!
signalWeightCapacityMustBeInteger

	self error: self weightCapacityMustBeIntegerErrorDescription
! !
!Backpack class methodsFor: 'instance creation' stamp: 'HAW 10/14/2020 14:31:56'!
containingUpTo: aWeightCapacity limitingPointsTo: pointsCapacity

	aWeightCapacity strictlyPositive  ifFalse: [ self signalInvalidWeightCapacity ].
	pointsCapacity strictlyPositive ifFalse: [ self signalInvalidPointsCapacity ].
	
	aWeightCapacity isInteger ifFalse: [ self signalWeightCapacityMustBeInteger ].
	pointsCapacity isInteger ifFalse: [ self signalPointsCapacityMustBeInteger ].
	
	^ self new initializeContainingUpTo: aWeightCapacity limitingPointsTo: pointsCapacity.
! !

!classDefinition: #DoorState category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #DoorState category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!DoorState methodsFor: 'initialization' stamp: 'FRT 10/13/2020 14:26:58'!
initializeFor: aDoor

	door := aDoor! !
!DoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:10:33'!
close 

	self subclassResponsibility ! !
!DoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:10:45'!
open 

	self subclassResponsibility ! !
!DoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:11:19'!
openUsing: aKey 

	self subclassResponsibility ! !
!DoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 12:58:22'!
toBeUsedBy: aPlayableCharacter 

	self subclassResponsibility ! !
!DoorState methodsFor: 'testing' stamp: 'FRT 10/13/2020 14:47:24'!
isOpen

	self subclassResponsibility! !

!classDefinition: 'DoorState class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
DoorState class
	instanceVariableNames: ''!

!classDefinition: 'DoorState class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
DoorState class
	instanceVariableNames: ''!
!DoorState class methodsFor: 'instance creation' stamp: 'FRT 10/13/2020 14:25:25'!
for: aDoor

	^ self new initializeFor: aDoor! !

!classDefinition: #ClosedDoorState category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
DoorState subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #ClosedDoorState category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
DoorState subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!ClosedDoorState methodsFor: 'testing' stamp: 'HAW 10/18/2020 12:55:43' overrides: 50871709!
isOpen
	
	^ false! !
!ClosedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:13:18' overrides: 50871692!
close 
	
	door error: Door alreadyClosedErrorDescription
	! !
!ClosedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:14:33' overrides: 50871696!
open 
	
	door open! !
!ClosedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:14:46' overrides: 50871700!
openUsing: aKey 
	
	door error: Door noNeedForAKeyErrorDescription! !
!ClosedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 15:55:29' overrides: 50871704!
toBeUsedBy: aPlayableCharacter 
	
	door toBeOpenedBy: aPlayableCharacter ! !

!classDefinition: #KeyClosedDoorState category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
DoorState subclass: #KeyClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #KeyClosedDoorState category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:28'!
DoorState subclass: #KeyClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!KeyClosedDoorState methodsFor: 'testing' stamp: 'HAW 10/18/2020 12:55:58' overrides: 50871709!
isOpen
	
	^false! !
!KeyClosedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:13:36' overrides: 50871692!
close 
	
	door error: Door alreadyClosedErrorDescription
! !
!KeyClosedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:15:02' overrides: 50871696!
open 
	
	door error: Door closedWithKeyErrorDescription
! !
!KeyClosedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:15:18' overrides: 50871700!
openUsing: aKey 
	
	door openUsing: aKey ! !
!KeyClosedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 15:55:44' overrides: 50871704!
toBeUsedBy: aPlayableCharacter 
	
	door toBeOpenedBy: aPlayableCharacter ! !

!classDefinition: #OpenedDoorState category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
DoorState subclass: #OpenedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #OpenedDoorState category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
DoorState subclass: #OpenedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!OpenedDoorState methodsFor: 'testing' stamp: 'HAW 10/18/2020 12:55:30' overrides: 50871709!
isOpen
	
	^true! !
!OpenedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:14:24' overrides: 50871692!
close 
	
	door close! !
!OpenedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:15:29' overrides: 50871696!
open 
	
	door error: Door alreadyOpenedErrorDescription
	! !
!OpenedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 16:15:43' overrides: 50871700!
openUsing: aKey 
	
	door error: Door alreadyOpenedErrorDescription! !
!OpenedDoorState methodsFor: 'door actions' stamp: 'HAW 10/18/2020 15:55:59' overrides: 50871704!
toBeUsedBy: aPlayableCharacter 
	
	door toBeClosedBy: aPlayableCharacter ! !

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'name backpack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'name backpack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!PlayableCharacter methodsFor: 'actions' stamp: 'FRT 10/14/2020 22:59:08'!
close: aStageObject

	aStageObject toBeClosedBy: self.! !
!PlayableCharacter methodsFor: 'actions' stamp: 'FRT 10/14/2020 22:59:35'!
open: aStageObject

	aStageObject toBeOpenedBy: self.! !
!PlayableCharacter methodsFor: 'actions' stamp: 'FRT 10/14/2020 23:00:42'!
take: aPortableObject

	backpack add: aPortableObject.! !
!PlayableCharacter methodsFor: 'actions' stamp: 'FRT 10/14/2020 22:59:51'!
use: aStageObject

	aStageObject toBeUsedBy: self.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'FRT 10/8/2020 19:44:29'!
initializeNamed: aName using: aBackpack

	name := aName.
	backpack := aBackpack.! !

!classDefinition: 'PlayableCharacter class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
PlayableCharacter class
	instanceVariableNames: ''!

!classDefinition: 'PlayableCharacter class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
PlayableCharacter class
	instanceVariableNames: ''!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FRT 10/8/2020 19:43:11'!
named: aName using: aBackpack

	^ self new initializeNamed: aName using: aBackpack! !

!classDefinition: #StageObject category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #StageObject category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!StageObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:23:07'!
toBeClosedBy: aPlayableCharacter

	self subclassResponsibility! !
!StageObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:23:25'!
toBeOpenedBy: aPlayableCharacter

	self subclassResponsibility! !
!StageObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:23:51'!
toBeOpenedBy: aPlayableCharacter using: aKey

	self subclassResponsibility! !
!StageObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:23:39'!
toBeUsedBy: aPlayableCharacter

	self subclassResponsibility! !

!classDefinition: #Door category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
StageObject subclass: #Door
	instanceVariableNames: 'key state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #Door category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
StageObject subclass: #Door
	instanceVariableNames: 'key state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!Door methodsFor: 'testing' stamp: 'HAW 10/18/2020 12:56:34'!
isOpen

	^ state isOpen! !
!Door methodsFor: 'initialization' stamp: 'HAW 10/18/2020 12:56:34'!
initializeWith: aDoorStateClass

	state := aDoorStateClass for: self.
	! !
!Door methodsFor: 'initialization' stamp: 'HAW 10/18/2020 12:56:18'!
initializeWith: aDoorStateClass using: aKey

	self initializeWith: aDoorStateClass.
	key := aKey.
	! !
!Door methodsFor: 'playable character reactions' stamp: 'HAW 10/18/2020 16:10:33' overrides: 50871931!
toBeClosedBy: aPlayableCharacter

	state close! !
!Door methodsFor: 'playable character reactions' stamp: 'HAW 10/18/2020 16:10:45' overrides: 50871936!
toBeOpenedBy: aPlayableCharacter

	state open! !
!Door methodsFor: 'playable character reactions' stamp: 'HAW 10/18/2020 16:11:19' overrides: 50871941!
toBeOpenedBy: aPlayableCharacter using: aKey

	state openUsing: aKey! !
!Door methodsFor: 'playable character reactions' stamp: 'HAW 10/18/2020 12:56:34' overrides: 50871947!
toBeUsedBy: aPlayableCharacter

	state toBeUsedBy: aPlayableCharacter ! !
!Door methodsFor: 'reactions - private' stamp: 'HAW 10/18/2020 16:14:24'!
close 
	
	state := ClosedDoorState for: self. 
	! !
!Door methodsFor: 'reactions - private' stamp: 'HAW 10/18/2020 16:14:33'!
open 
	
	state := OpenedDoorState for: self.
	! !
!Door methodsFor: 'reactions - private' stamp: 'HAW 10/18/2020 16:15:18'!
openUsing: aKey 
	
	key = aKey ifTrue: [ ^state := OpenedDoorState for: self ].
	self error: Door notCorrectKeyErrorDescription. 
! !

!classDefinition: 'Door class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
Door class
	instanceVariableNames: ''!

!classDefinition: 'Door class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
Door class
	instanceVariableNames: ''!
!Door class methodsFor: 'instance creation' stamp: 'HAW 10/18/2020 12:52:10'!
closed

	^self new initializeWith: ClosedDoorState ! !
!Door class methodsFor: 'instance creation' stamp: 'HAW 10/18/2020 12:52:28'!
closedWith: aKey

	^self new initializeWith: KeyClosedDoorState using: aKey.
	! !
!Door class methodsFor: 'instance creation' stamp: 'HAW 10/18/2020 12:52:40'!
opened

	^self new initializeWith: OpenedDoorState ! !
!Door class methodsFor: 'error messages' stamp: 'FRT 10/11/2020 19:50:28'!
alreadyClosedErrorDescription

	^ 'The door is already closed'! !
!Door class methodsFor: 'error messages' stamp: 'FRT 10/11/2020 20:15:28'!
alreadyOpenedErrorDescription

	^ 'The door is already opened'! !
!Door class methodsFor: 'error messages' stamp: 'FRT 10/11/2020 22:15:06'!
closedWithKeyErrorDescription

	^ 'The door is closed with key'! !
!Door class methodsFor: 'error messages' stamp: 'FRT 10/11/2020 19:50:40'!
keyClosedErrorDescription

	^ 'The door is closed with a key'! !
!Door class methodsFor: 'error messages' stamp: 'FRT 10/11/2020 22:26:32'!
noNeedForAKeyErrorDescription

	^ 'The door is not key-closed'! !
!Door class methodsFor: 'error messages' stamp: 'FRT 10/11/2020 22:31:16'!
notCorrectKeyErrorDescription

	^ 'Not the correct key!!'! !

!classDefinition: #PortableObject category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #PortableObject category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!PortableObject methodsFor: 'testing' stamp: 'FRT 10/11/2020 17:54:20'!
doesItAddPoints

	self subclassResponsibility	! !
!PortableObject methodsFor: 'adding' stamp: 'HAW 10/18/2020 12:28:24'!
assertCanAddTo: aBackpack

	self subclassResponsibility	! !
!PortableObject methodsFor: 'accessing' stamp: 'FRT 10/11/2020 18:53:51'!
weight

	^ weight! !
!PortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:27:01' overrides: 50871931!
toBeClosedBy: aPlayableCharacter

	self subclassResponsibility! !
!PortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:27:14' overrides: 50871936!
toBeOpenedBy: aPlayableCharacter

	self subclassResponsibility! !
!PortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:27:27' overrides: 50871941!
toBeOpenedBy: aPlayableCharacter using: aKey

	self subclassResponsibility! !
!PortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:27:39' overrides: 50871947!
toBeUsedBy: aPlayableCharacter

	self subclassResponsibility! !

!classDefinition: #NoPointsPortableObject category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #NoPointsPortableObject category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!NoPointsPortableObject methodsFor: 'initialization' stamp: 'HAW 10/14/2020 14:34:36'!
initializeNamed: aName weighing: aWeight
	
	name := aName.
	weight := aWeight.! !
!NoPointsPortableObject methodsFor: 'testing' stamp: 'FRT 10/11/2020 17:54:20' overrides: 50872089!
doesItAddPoints	

	^ false! !
!NoPointsPortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:27:59' overrides: 50872103!
toBeClosedBy: aPlayableCharacter

	"No implementado en 1er Parcial"! !
!NoPointsPortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:28:14' overrides: 50872109!
toBeOpenedBy: aPlayableCharacter

	"No implementado en 1er Parcial"! !
!NoPointsPortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:28:24' overrides: 50872115!
toBeOpenedBy: aPlayableCharacter using: aKey

	"No implementado en 1er Parcial"! !
!NoPointsPortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:28:34' overrides: 50872121!
toBeUsedBy: aPlayableCharacter

	"No implementado en 1er Parcial"! !
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/18/2020 12:28:48' overrides: 50872093!
assertCanAddTo: aBackpack 
	
	^aBackpack assertCanAddNoPointsPortableObject: self! !

!classDefinition: 'NoPointsPortableObject class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
NoPointsPortableObject class
	instanceVariableNames: ''!

!classDefinition: 'NoPointsPortableObject class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
NoPointsPortableObject class
	instanceVariableNames: ''!
!NoPointsPortableObject class methodsFor: 'instance creation' stamp: 'HAW 10/14/2020 14:34:36'!
named: aName weighing: aWeight
	
	^ self new initializeNamed: aName weighing: aWeight. ! !

!classDefinition: #PointsPortableObject category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #PointsPortableObject category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!PointsPortableObject methodsFor: 'testing' stamp: 'FRT 10/11/2020 17:54:20' overrides: 50872089!
doesItAddPoints

	^ true! !
!PointsPortableObject methodsFor: 'initialization' stamp: 'HAW 10/14/2020 14:36:26'!
initializeNamed: aName weighing: aWeight worth: gamePoints
	
	name := aName.
	weight := aWeight.
	points := gamePoints.! !
!PointsPortableObject methodsFor: 'accessing' stamp: 'FRT 10/11/2020 19:06:57'!
points

	^ points! !
!PointsPortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:28:49' overrides: 50872103!
toBeClosedBy: aPlayableCharacter

	"No implementado en 1er Parcial"! !
!PointsPortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:28:59' overrides: 50872109!
toBeOpenedBy: aPlayableCharacter

	"No implementado en 1er Parcial"! !
!PointsPortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:29:14' overrides: 50872115!
toBeOpenedBy: aPlayableCharacter using: aKey

	"No implementado en 1er Parcial"! !
!PointsPortableObject methodsFor: 'playable character reactions' stamp: 'FRT 10/12/2020 23:29:25' overrides: 50872121!
toBeUsedBy: aPlayableCharacter

	"No implementado en 1er Parcial"! !
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/18/2020 12:29:07' overrides: 50872093!
assertCanAddTo: aBackpack 
	
	^aBackpack assertCanAddPointPortableObject: self! !

!classDefinition: 'PointsPortableObject class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
PointsPortableObject class
	instanceVariableNames: ''!

!classDefinition: 'PointsPortableObject class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'AM 5/15/2021 19:28:29'!
PointsPortableObject class
	instanceVariableNames: ''!
!PointsPortableObject class methodsFor: 'instance creation' stamp: 'HAW 10/14/2020 14:36:26'!
named: aName weighing: aWeight worth: gamePoints
	
	^ self new initializeNamed: aName weighing: aWeight worth: gamePoints.! !

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:29'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:29'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:31:10'!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot addedWeapon |
	
	robot := self createAluminum3000.
	addedWeapon := self createTurboLaserCannon.
	robot addWeapon: addedWeapon.
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: addedWeapon)

	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:31:48'!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot firstAddedWeapon secondAddedWeapon |
	
	robot := self createTankRover.
	firstAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: firstAddedWeapon.
	secondAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: secondAddedWeapon.
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: firstAddedWeapon).
	self assert: (robot includesWeapon: secondAddedWeapon)
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 5/2/2021 16:04:51'!
test03ShouldHaveZeroWeightWhenNoWeaponsAdded
	
	| robot |
	
	robot := self createTankRover.

	self assert: 0 * kilogram equals: robot totalWeaponWeight.
	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:32:23'!
test04ShouldAddWeightWhenAddingWeapon
	
	| robot weapon |
	
	robot := self createTankRover.
	weapon := self createTurboLaserCannon.

	robot addWeapon: weapon.

	self assert: weapon weight equals: robot totalWeaponWeight.
	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 5/2/2021 16:05:22'!
test05ShouldHaveZeroSpeedWhenNoWeaponsAdded
	
	| robot |
	
	robot := self createTankRover.

	self assert: 0 * kilometer / hour equals: robot totalSpeedImpact.
	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:32:57'!
test06ShouldAddSpeedImpactWhenAddingWeapons

	| robot weapon anotherWeapon |
	
	robot := self createTankRover.
	weapon := self createTurboLaserCannon.
	anotherWeapon := self createClaw.

	robot addWeapon: weapon.
	robot addWeapon: anotherWeapon.

	self assert: weapon weight + anotherWeapon weight equals: robot totalWeaponWeight.
	
	

	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:06:05'!
test07ClawReducesLifeOfAluminum3000By25

	self assertAttacking: self createAluminum3000 with: self createClaw reducesLifeBy: 25 * year
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:06:09'!
test08ClawReducesLifeOfTankRoverBy5

	self assertAttacking: self createTankRover with: self createClaw reducesLifeBy: 5 * year
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:06:13'!
test09HSBlasterReducesLifeOfAluminum3000By5

	self assertAttacking: self createAluminum3000 with: self createHSBlaster reducesLifeBy: 5 * year
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:05:33'!
test10HSBlasterReducesLifeOfTankRoverBy50

	self assertAttacking: self createTankRover with: self createHSBlaster reducesLifeBy: 50 * year
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:06:20'!
test11TurboLaserCannonReducesLifeOfAluminum3000By100

	self assertAttacking: self createAluminum3000 with: self createTurboLaserCannon reducesLifeBy: 100 * year
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 16:06:24'!
test12TurboLaserCannonReducesLifeOfTankRoverBy100

	self assertAttacking: self createTankRover with: self createTurboLaserCannon reducesLifeBy: 100 * year! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:41:40'!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	2 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self 
		should: [ attacker attack: attacked with: attackerWeapon ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:42:05'!
test14CanUseClawOnlyOnceWhenAttackingTankRover

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self 
		should: [ attacker attack: attacked with: attackerWeapon ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:58:31'!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: TurboLaserCannon).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:58:48'!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster .
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: 2 equals: attacker weaponsCount.
	self assert: (attacker includesWeapon: attackerWeapon).
	self assert: (attacker includesWeaponOfType: Claw).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:43:35'!
test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createTurboLaserCannon.
	attacker addWeapon: attackerWeapon.
	
	10 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 0 equals: attacker weaponsCount.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 19:31:17'!
test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createTurboLaserCannon .
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: HSBlaster)
	! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'HAW 4/30/2021 17:49:45'!
createAluminum3000

	^ Aluminum3000 new! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'HAW 4/30/2021 17:49:52'!
createTankRover

	^ TankRover new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'HAW 4/30/2021 17:45:41'!
createClaw

	^ Claw new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'HAW 4/30/2021 17:45:50'!
createHSBlaster

	^ HSBlaster new! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'HAW 4/30/2021 17:45:56'!
createTurboLaserCannon

	^ TurboLaserCannon new! !
!RobotWarsTest methodsFor: 'assertions' stamp: 'HAW 5/2/2021 16:05:45'!
assertAttacking: attacked with: attackerWeapon reducesLifeBy: delta  

	| attacker |
	
	attacker := self createAluminum3000.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: 100 * year - delta equals: attacked life! !

!classDefinition: 'RobotWarsTest class' category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
RobotWarsTest class
	instanceVariableNames: ''!

!classDefinition: 'RobotWarsTest class' category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
RobotWarsTest class
	instanceVariableNames: ''!
!RobotWarsTest class methodsFor: 'class initialization' stamp: 'HAW 5/2/2021 16:01:30' overrides: 16883149!
initialize

	"Este m�todo est� para crear una unidad que falta, no lo deben tocar ni darle importancia durante 
	el parcial - Hernan"
	| kilogram |
	gram := BaseUnit named: 'gram' sign: 'g'.
	kilogram := ProportionalDerivedUnit baseUnit: gram conversionFactor: 1000  named: 'kilogram' sign: 'kg'.
	
	Smalltalk at: #kilogram put: kilogram
	! !

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Object subclass: #Robot
	instanceVariableNames: 'life weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Object subclass: #Robot
	instanceVariableNames: 'life weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'assertions' stamp: 'HAW 4/30/2021 19:23:06'!
assertAddingNewWeaponDoesNotPassMaxWeaponWeight: aWeapon

	^ (self totalWeaponWeight + aWeapon weight) > self maxWeaponWeight ifTrue: [ self signalMaxWeaponWeightExceeded ]! !
!Robot methodsFor: 'assertions' stamp: 'HAW 4/30/2021 19:21:43'!
assertAddingNewWeaponDoesNotPassSpeed: aWeapon

	^ (self totalSpeedImpact + aWeapon speedImpact) > self speed ifTrue: [ self signalSpeedBelowZero ]! !
!Robot methodsFor: 'attacking' stamp: 'HAW 4/30/2021 17:13:38'!
attack: aVictim with: aWeapon

	(weapons includes: aWeapon) 
		ifTrue: [ aWeapon attack: aVictim by: self ]
		ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ]! !
!Robot methodsFor: 'attacking - private' stamp: 'HAW 4/30/2021 18:06:40'!
attackedWith: aWeapon by: anAttacker

	self subclassResponsibility ! !
!Robot methodsFor: 'exceptions' stamp: 'HAW 4/29/2021 20:49:49'!
signalCanNotAttackWithWeaponNotBelongingToRobot
	
	self error: self class canNotAttackWithWeaponNotBelongingToRobotErrorDescription! !
!Robot methodsFor: 'exceptions' stamp: 'FRT 4/28/2021 16:02:10'!
signalMaxWeaponWeightExceeded

	self error: self class maxWeaponWeightExceededErrorDescription 	! !
!Robot methodsFor: 'exceptions' stamp: 'FRT 4/28/2021 22:53:14'!
signalSpeedBelowZero

	self error: self class speedBelowZeroErrorDescription 	! !
!Robot methodsFor: 'initialization' stamp: 'HAW 5/2/2021 16:01:56' overrides: 16896425!
initialize
	
	weapons := OrderedCollection new.
	life := 100 * year.

	! !
!Robot methodsFor: 'life' stamp: 'FRT 4/28/2021 20:33:19'!
life

	^ life! !
!Robot methodsFor: 'life' stamp: 'HAW 4/30/2021 18:05:23'!
reduceLifeBy: lifePoints

	life := life - lifePoints! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 17:18:10'!
addWeapon: aWeapon

	self assertAddingNewWeaponDoesNotPassMaxWeaponWeight: aWeapon.
	self assertAddingNewWeaponDoesNotPassSpeed: aWeapon.
	
	weapons add: aWeapon.
	! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 17:13:44'!
includesWeapon: aWeapon 
	
	^weapons includes: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 17:58:42'!
includesWeaponOfType: aWeaponType

	^weapons anySatisfy: [ :weapon | weapon class = aWeaponType ]! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 17:13:54'!
removeWeapon: aWeapon 
	
	weapons remove: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'HAW 5/2/2021 16:02:46'!
totalSpeedImpact

	^ (weapons select: [ :weapon | weapon weight > (10 * kilogram) ])
		sum: [ :weapon | weapon speedImpact ] ifEmpty: [ 0 * kilometer / hour ]! !
!Robot methodsFor: 'weapons' stamp: 'HAW 5/2/2021 16:02:54'!
totalWeaponWeight

	^weapons sum: [ :weapon | weapon weight ] ifEmpty: [ 0 * kilogram ]! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 17:14:11'!
weaponsCount

	^ weapons size 	! !
!Robot methodsFor: 'accesing' stamp: 'HAW 4/30/2021 19:24:25'!
maxWeaponWeight

	self subclassResponsibility ! !
!Robot methodsFor: 'accesing' stamp: 'HAW 4/30/2021 19:24:30'!
speed

	self subclassResponsibility ! !

!classDefinition: 'Robot class' category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Robot class
	instanceVariableNames: ''!

!classDefinition: 'Robot class' category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Robot class
	instanceVariableNames: ''!
!Robot class methodsFor: 'error description' stamp: 'HAW 4/29/2021 20:50:34'!
canNotAttackWithWeaponNotBelongingToRobotErrorDescription
	
	^'Cannot attack with weapon not belonging to robot'! !
!Robot class methodsFor: 'error description' stamp: 'FRT 4/28/2021 16:04:48'!
maxWeaponWeightExceededErrorDescription

	^ 'Maximum weapon weight has been exceeded'! !
!Robot class methodsFor: 'error description' stamp: 'FRT 4/28/2021 22:53:14'!
speedBelowZeroErrorDescription

	^ 'Speed cannot be below zero'! !

!classDefinition: #Aluminum3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Aluminum3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Aluminum3000 methodsFor: 'attacking - private' stamp: 'HAW 4/30/2021 17:51:56' overrides: 50872630!
attackedWith: aWeapon by: anAttacker

	^aWeapon attackAluminum3000: self by: anAttacker ! !
!Aluminum3000 methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:12' overrides: 50872704!
maxWeaponWeight

	^50 * kilogram ! !
!Aluminum3000 methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:22' overrides: 50872708!
speed

	^ 90 * kilometer / hour
	! !

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!TankRover methodsFor: 'attacking - private' stamp: 'HAW 4/30/2021 17:53:09' overrides: 50872630!
attackedWith: aWeapon by: anAttacker

	^aWeapon attackTankRover: self by: anAttacker ! !
!TankRover methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:30' overrides: 50872704!
maxWeaponWeight

	^200 * kilogram ! !
!TankRover methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:40' overrides: 50872708!
speed
	
	^40 * kilometer / hour! !

!classDefinition: #Weapon category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Object subclass: #Weapon
	instanceVariableNames: 'usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Weapon category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Object subclass: #Weapon
	instanceVariableNames: 'usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Weapon methodsFor: 'accesing' stamp: 'HAW 4/30/2021 19:28:14'!
speedImpact
	
	self subclassResponsibility ! !
!Weapon methodsFor: 'accesing' stamp: 'HAW 4/30/2021 19:28:21'!
weight
	
	self subclassResponsibility ! !
!Weapon methodsFor: 'initialization' stamp: 'HAW 4/30/2021 19:27:23' overrides: 16896425!
initialize 
	
	usedTimes := 0.! !
!Weapon methodsFor: 'attacking' stamp: 'HAW 4/30/2021 17:57:18'!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim attackedWith: self by: anAttacker 
	! !
!Weapon methodsFor: 'attacking - private' stamp: 'HAW 4/30/2021 18:01:40'!
attackAluminum3000: aVictim by: anAttacker

	self subclassResponsibility ! !
!Weapon methodsFor: 'attacking - private' stamp: 'HAW 4/30/2021 18:01:55'!
attackTankRover: aVictim by: anAttacker
	
	self subclassResponsibility ! !

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Claw methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:06:56' overrides: 50872832!
attackAluminum3000: aVictim by: anAttacker
 
	aVictim reduceLifeBy: 25 * year.
	usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
! !
!Claw methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:07:01' overrides: 50872837!
attackTankRover: aVictim by: anAttacker

	aVictim reduceLifeBy: 5 * year.
	anAttacker removeWeapon: self.
	! !
!Claw methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:53' overrides: 50872813!
speedImpact

	^ 5 * kilometer / hour
! !
!Claw methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:03:58' overrides: 50872817!
weight

	^ 10 * kilogram ! !

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!HSBlaster methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:07:09' overrides: 50872832!
attackAluminum3000: aVictim by: anAttacker
 
	aVictim reduceLifeBy: 5 * year.
	usedTimes = 5 ifTrue: [ 
		anAttacker removeWeapon: self.
		anAttacker addWeapon: TurboLaserCannon new ].
! !
!HSBlaster methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:08:21' overrides: 50872837!
attackTankRover: aVictim by: anAttacker
 
	aVictim reduceLifeBy: 50 * year.
	aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: Claw new ].
! !
!HSBlaster methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:04:07' overrides: 50872813!
speedImpact

	^ 10 * kilometer / hour! !
!HSBlaster methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:04:14' overrides: 50872817!
weight

	^ 20 * kilogram ! !

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:31'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!TurboLaserCannon methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:07:19' overrides: 50872832!
attackAluminum3000: aVictim by: anAttacker 
	
	aVictim reduceLifeBy: 100 * year.
	usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ].
	! !
!TurboLaserCannon methodsFor: 'attacking - private' stamp: 'HAW 5/2/2021 16:07:25' overrides: 50872837!
attackTankRover: aVictim by: anAttacker

	aVictim reduceLifeBy: 100 * year.
	usedTimes = 5 ifTrue: [ 
		anAttacker removeWeapon: self.
		anAttacker addWeapon: HSBlaster new].
	! !
!TurboLaserCannon methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:04:24' overrides: 50872813!
speedImpact

	^ 15 * kilometer / hour! !
!TurboLaserCannon methodsFor: 'accesing' stamp: 'HAW 5/2/2021 16:04:32' overrides: 50872817!
weight

	^ 40 * kilogram ! !

!classRemoval: #TurboLaserCannon stamp: 'AM 5/15/2021 19:28:32'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #HSBlaster stamp: 'AM 5/15/2021 19:28:33'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Claw stamp: 'AM 5/15/2021 19:28:34'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Weapon stamp: 'AM 5/15/2021 19:28:35'!
Object subclass: #Weapon
	instanceVariableNames: 'usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TankRover stamp: 'AM 5/15/2021 19:28:35'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Aluminum3000 stamp: 'AM 5/15/2021 19:28:36'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #Robot stamp: 'AM 5/15/2021 19:28:37'!
Object subclass: #Robot
	instanceVariableNames: 'life weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #RobotWarsTest stamp: 'AM 5/15/2021 19:28:38'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:38'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #RobotWarsTest category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:38'!
TestCase subclass: #RobotWarsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:31:10'!
test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded
	
	| robot addedWeapon |
	
	robot := self createAluminum3000.
	addedWeapon := self createTurboLaserCannon.
	robot addWeapon: addedWeapon.
	
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot maxWeaponWeightExceededErrorDescription.
		
	self assert: 1 equals: robot weaponsCount.
	self assert: (robot includesWeapon: addedWeapon)

	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:31:48'!
test02ShouldNotAddWeaponIfSpeedBelowZero
	
	| robot firstAddedWeapon secondAddedWeapon |
	
	robot := self createTankRover.
	firstAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: firstAddedWeapon.
	secondAddedWeapon := self createTurboLaserCannon.
	robot addWeapon: secondAddedWeapon.
		
	self
		should: [ robot addWeapon: self createTurboLaserCannon ]
		raise: Error
		withMessageText: Robot speedBelowZeroErrorDescription .
		
	self assert: 2 equals: (robot weaponsCount).
	self assert: (robot includesWeapon: firstAddedWeapon).
	self assert: (robot includesWeapon: secondAddedWeapon)
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 5/2/2021 15:49:38'!
test03ShouldHaveZeroWeightWhenNoWeaponsAdded
	
	| robot |
	
	robot := self createTankRover.

	self assert: 0 * kilogram equals: robot totalWeaponWeight.
	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:32:23'!
test04ShouldAddWeightWhenAddingWeapon
	
	| robot weapon |
	
	robot := self createTankRover.
	weapon := self createTurboLaserCannon.

	robot addWeapon: weapon.

	self assert: weapon weight equals: robot totalWeaponWeight.
	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 5/2/2021 15:49:58'!
test05ShouldHaveZeroSpeedWhenNoWeaponsAdded
	
	| robot |
	
	robot := self createTankRover.

	self assert: 0 * kilometer / hour equals: robot totalSpeedImpact.
	
	

	! !
!RobotWarsTest methodsFor: 'robot creation tests' stamp: 'HAW 4/30/2021 17:32:57'!
test06ShouldAddSpeedImpactWhenAddingWeapons

	| robot weapon anotherWeapon |
	
	robot := self createTankRover.
	weapon := self createTurboLaserCannon.
	anotherWeapon := self createClaw.

	robot addWeapon: weapon.
	robot addWeapon: anotherWeapon.

	self assert: weapon weight + anotherWeapon weight equals: robot totalWeaponWeight.
	
	

	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 15:47:51'!
test07ClawReducesLifeOfAluminum3000By25

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (25 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 15:48:11'!
test08ClawReducesLifeOfTankRoverBy5

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 15:48:31'!
test09HSBlasterReducesLifeOfAluminum3000By5

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 15:47:17'!
test10HSBlasterReducesLifeOfTankRoverBy50

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (50 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 15:49:02'!
test11TurboLaserCannonReducesLifeOfAluminum3000By100

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createTurboLaserCannon.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (100 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 15:49:15'!
test12TurboLaserCannonReducesLifeOfTankRoverBy100

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createTurboLaserCannon.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (100 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:41:40'!
test13CanUseClawOnlyTwiceWhenAttackingAluminum3000

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	2 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self 
		should: [ attacker attack: attacked with: attackerWeapon ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:42:05'!
test14CanUseClawOnlyOnceWhenAttackingTankRover

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self 
		should: [ attacker attack: attacked with: attackerWeapon ]
		raise: Error
		withMessageText: Robot canNotAttackWithWeaponNotBelongingToRobotErrorDescription 
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 19:38:04'!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #TurboLaserCannon).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 19:38:09'!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster .
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: 2 equals: attacker weaponsCount.
	self assert: (attacker includesWeapon: attackerWeapon).
	self assert: (attacker includesWeaponOfType: #Claw).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 17:43:35'!
test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createTurboLaserCannon.
	attacker addWeapon: attackerWeapon.
	
	10 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 0 equals: attacker weaponsCount.
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'HAW 4/30/2021 19:38:16'!
test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createTurboLaserCannon .
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: #HSBlaster)
	! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'HAW 4/30/2021 19:37:15'!
createAluminum3000

	^ Robot ofType: #Aluminum3000 ! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'HAW 4/30/2021 19:37:25'!
createTankRover

	^ Robot ofType: #TankRover ! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'HAW 4/30/2021 19:37:36'!
createClaw

	^ Weapon ofType: #Claw ! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'HAW 4/30/2021 19:37:46'!
createHSBlaster

	^ Weapon ofType: #HSBlaster ! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'HAW 4/30/2021 19:37:52'!
createTurboLaserCannon

	^ Weapon ofType: #TurboLaserCannon ! !

!classDefinition: 'RobotWarsTest class' category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:39'!
RobotWarsTest class
	instanceVariableNames: ''!

!classDefinition: 'RobotWarsTest class' category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:39'!
RobotWarsTest class
	instanceVariableNames: ''!
!RobotWarsTest class methodsFor: 'class initialization' stamp: 'HAW 5/2/2021 15:40:59' overrides: 16883149!
initialize

	"Este m�todo est� para crear una unidad que falta, no lo deben tocar ni darle importancia durante 
	el parcial - Hernan"
	| kilogram |
	gram := BaseUnit named: 'gram' sign: 'g'.
	kilogram := ProportionalDerivedUnit baseUnit: gram conversionFactor: 1000  named: 'kilogram' sign: 'kg'.
	
	Smalltalk at: #kilogram put: kilogram
	! !

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:39'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:39'!
Object subclass: #Robot
	instanceVariableNames: 'type life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Robot methodsFor: 'type' stamp: 'HAW 4/29/2021 17:46:19'!
type

	^ type	! !
!Robot methodsFor: 'initialization' stamp: 'FRT 4/28/2021 15:36:58'!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type := aRobotType.
	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	! !
!Robot methodsFor: 'attacking' stamp: 'HAW 4/30/2021 16:57:30'!
attack: aVictim with: aWeapon

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	(weapons includes: aWeapon) 
		ifTrue: [ aWeapon attack: aVictim by: self ]
		ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ]! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 16:56:38'!
addWeapon: aWeapon

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].
	
	(self totalWeaponWeight + aWeapon weight) > maxWeaponWeight ifTrue: [ self signalMaxWeaponWeightExceeded ].
	
	(self totalSpeedImpact + aWeapon speedImpact) > speed ifTrue: [ self signalSpeedBelowZero ].
	
	weapons add: aWeapon.
	! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 16:56:43'!
includesWeapon: aWeapon 
	
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	^weapons includes: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 16:56:48'!
includesWeaponOfType: aWeaponType

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	^weapons anySatisfy: [ :weapon | weapon type = aWeaponType ]! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 16:56:54'!
removeWeapon: aWeapon 
	
	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	weapons remove: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'HAW 5/2/2021 15:51:03'!
totalSpeedImpact

	| total index |

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	^ total.! !
!Robot methodsFor: 'weapons' stamp: 'HAW 5/2/2021 15:51:34'!
totalWeaponWeight

	| total index |

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^ total.	! !
!Robot methodsFor: 'weapons' stamp: 'HAW 4/30/2021 16:57:10'!
weaponsCount

	weapons isNil ifTrue: [ weapons := OrderedCollection new ].

	^ weapons size 	! !
!Robot methodsFor: 'life' stamp: 'FRT 4/28/2021 20:33:19'!
life

	^ life! !
!Robot methodsFor: 'life' stamp: 'HAW 5/2/2021 15:52:01'!
life: newLife

	life := newLife! !
!Robot methodsFor: 'exceptions' stamp: 'HAW 4/29/2021 20:49:49'!
signalCanNotAttackWithWeaponNotBelongingToRobot
	
	self error: self class canNotAttackWithWeaponNotBelongingToRobotErrorDescription! !
!Robot methodsFor: 'exceptions' stamp: 'FRT 4/28/2021 16:02:10'!
signalMaxWeaponWeightExceeded

	self error: self class maxWeaponWeightExceededErrorDescription 	! !
!Robot methodsFor: 'exceptions' stamp: 'FRT 4/28/2021 22:53:14'!
signalSpeedBelowZero

	self error: self class speedBelowZeroErrorDescription 	! !

!classDefinition: 'Robot class' category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:40'!
Robot class
	instanceVariableNames: ''!

!classDefinition: 'Robot class' category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:40'!
Robot class
	instanceVariableNames: ''!
!Robot class methodsFor: 'error description' stamp: 'HAW 4/29/2021 20:50:34'!
canNotAttackWithWeaponNotBelongingToRobotErrorDescription
	
	^'Cannot attack with weapon not belonging to robot'! !
!Robot class methodsFor: 'error description' stamp: 'FRT 4/28/2021 16:04:48'!
maxWeaponWeightExceededErrorDescription

	^ 'Maximum weapon weight has been exceeded'! !
!Robot class methodsFor: 'error description' stamp: 'HAW 5/2/2021 15:52:46'!
speedBelowZeroErrorDescription

	^ 'Speed cannot be below zero kilometer per hour'! !
!Robot class methodsFor: 'instance creation' stamp: 'HAW 5/2/2021 15:43:10'!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ self new 
		initializeType: aRobotType 
		life: 100 * year
		speed: 90 * kilometer / hour
		maxWeaponWeight: 50 * kilogram ].
	aRobotType = #TankRover ifTrue: [ ^ self new 
		initializeType: aRobotType 
		life: 100 * year
		speed: 40 * kilometer / hour
		maxWeaponWeight: 200 * kilogram ].

	self error: 'Invalid Robot Type'! !

!classDefinition: #Weapon category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:40'!
Object subclass: #Weapon
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Weapon category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:40'!
Object subclass: #Weapon
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Weapon methodsFor: 'accesing' stamp: 'FRT 4/28/2021 22:43:38'!
speedImpact
	
	^ speedImpact! !
!Weapon methodsFor: 'accesing' stamp: 'FRT 4/28/2021 22:43:53'!
weight
	
	^ weight! !
!Weapon methodsFor: 'initialization' stamp: 'HAW 4/30/2021 17:03:09'!
initializeType: aWeaponType weight: aWeight speedImpact: aSpeedImpact 
	
	type := aWeaponType.
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.! !
!Weapon methodsFor: 'attacking' stamp: 'HAW 5/2/2021 15:46:43'!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].

	type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	].! !
!Weapon methodsFor: 'type' stamp: 'HAW 4/30/2021 16:45:24'!
type
	
	^type! !

!classDefinition: 'Weapon class' category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:40'!
Weapon class
	instanceVariableNames: ''!

!classDefinition: 'Weapon class' category: 'ISW1-2021-1C-1erParcial' stamp: 'AM 5/15/2021 19:28:40'!
Weapon class
	instanceVariableNames: ''!
!Weapon class methodsFor: 'instance creation' stamp: 'HAW 5/2/2021 15:44:12'!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^self new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ self new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ self new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 19:07:45' prior: 50871063!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[position := position + (0@1)].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 19:11:29' prior: 50873615!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[ (pointing = North new) ifTrue:[position := position + (0@1)].
											   (pointing = West new) ifTrue:[position := position + (1@0)].
											].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 19:12:12'!
test10
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lf'.
	
	self robot: robot IsAtPosition: (3@2) pointing: West new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 19:12:21' prior: 50873645!
test10
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llf'.
	
	self robot: robot IsAtPosition: (3@2) pointing: West new.! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 19:13:00' prior: 50873628!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[ (pointing = North new) ifTrue:[position := position + (0@1)].
											   (pointing = West new) ifTrue:[position := position + (1@0)].
											   (pointing = South new) ifTrue:[position := position + (0@-1)].
											].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 19:13:26' prior: 50873654!
test10
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llf'.
	
	self robot: robot IsAtPosition: (2@1) pointing: South new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 19:13:45'!
test11
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lllf'.
	
	self robot: robot IsAtPosition: (2@1) pointing: South new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 19:14:22' prior: 50873690!
test11
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lllf'.
	
	self robot: robot IsAtPosition: (2@1) pointing: East new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 19:14:35' prior: 50873699!
test11
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lllf'.
	
	self robot: robot IsAtPosition: (3@2) pointing: East new.! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 19:15:27' prior: 50873662!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[ (pointing = North new) ifTrue:[position := position + (0@1)].
											   (pointing = West new) ifTrue:[position := position + (-1@0)].
											   (pointing = South new) ifTrue:[position := position + (0@-1)].
											   (pointing = East new) ifTrue:[position := position + (1@0)].
											].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 19:15:44' prior: 50871055!
test09
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lf'.
	
	self robot: robot IsAtPosition: (1@2) pointing: West new.! !
!MarsRover methodsFor: 'moving' stamp: 'bocaccio 5/15/2021 19:16:57' prior: 50873716!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[ (pointing = North new) ifTrue:[position := position + (0@1)].
											   (pointing = West new)  ifTrue:[position := position + (-1@0)].
											   (pointing = South new) ifTrue:[position := position + (0@-1)].
											   (pointing = East new)   ifTrue:[position := position + (1@0)].
											].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 19:20:52'!
test12
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llllf'.
	
	self robot: robot IsAtPosition: (3@2) pointing: East new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'bocaccio 5/15/2021 19:21:07' prior: 50873768!
test12
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llllf'.
	
	self robot: robot IsAtPosition: (2@3) pointing: North new.! !
!East methodsFor: 'nil' stamp: 'AM 5/15/2021 19:34:19'!
displacementFoward
	^(1@0)! !
!RobotOrientation methodsFor: 'nil' stamp: 'AM 5/15/2021 19:34:40'!
displacementFoward
	^self subclassResponsibility.! !
!North methodsFor: 'nil' stamp: 'AM 5/15/2021 19:34:57' overrides: 50873789!
displacementFoward
	^(0@1)! !
!South methodsFor: 'nil' stamp: 'AM 5/15/2021 19:35:17' overrides: 50873789!
displacementFoward
	^(0@-1)! !
!West methodsFor: 'nil' stamp: 'AM 5/15/2021 19:35:38' overrides: 50873789!
displacementFoward
	^(-1@0)! !
!East methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:35:56'!
displacementForward
	^(1@0)! !

!methodRemoval: East #displacementFoward stamp: 'AM 5/15/2021 19:36:07'!
displacementFoward
	^(1@0)!
!North methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:36:19'!
displacementForward
	^(0@1)! !

!methodRemoval: North #displacementFoward stamp: 'AM 5/15/2021 19:36:27'!
displacementFoward
	^(0@1)!
!South methodsFor: 'nil' stamp: 'AM 5/15/2021 19:36:40'!
displacementForward
	^(0@-1)! !

!methodRemoval: South #displacementFoward stamp: 'AM 5/15/2021 19:36:47'!
displacementFoward
	^(0@-1)!
!West methodsFor: 'nil' stamp: 'AM 5/15/2021 19:37:05'!
displacementForward
	^(-1@0)! !
!RobotOrientation methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:37:33'!
displacementForward
	^self subclassResponsibility.! !

!methodRemoval: RobotOrientation #displacementFoward stamp: 'AM 5/15/2021 19:37:40'!
displacementFoward
	^self subclassResponsibility.!

----SNAPSHOT----(15 May 2021 19:37:58) CuisUniversity-4532.image priorSource: 16896372!
!MarsRover methodsFor: 'moving' stamp: 'AM 5/15/2021 19:38:49' prior: 50873746!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[ position:= position + pointing displacementForward].
						     (instruccion =$b) ifTrue:[position := position - (0@1)].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'AM 5/15/2021 19:38:58'!
PASSED!

----SNAPSHOT----(15 May 2021 19:39:02) CuisUniversity-4532.image priorSource: 17349982!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:53:12'!
test09_moveForwardFacingWest
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lf'.
	
	self robot: robot IsAtPosition: (1@2) pointing: West new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:53:27' prior: 50873894!
test09_moveForwardFacingWest
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (1@2) pointing: West new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:53:42'!
test10_moveForwardFacingSouth
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llf'.
	
	self robot: robot IsAtPosition: (2@1) pointing: South new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:53:48' prior: 50873912!
test10_moveForwardFacingSouth
	|robot|
	robot := MarsRover createAt: (2@2) pointing: South new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (2@1) pointing: South new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:54:14'!
test11_moveForwardFacingEast
	|robot|
	robot := MarsRover createAt: (2@2) pointing: East new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (3@2) pointing: East new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:54:27'!
test12_moveForwardFacingNorth
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llllf'.
	
	self robot: robot IsAtPosition: (2@3) pointing: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:54:33' prior: 50873939!
test12_moveForwardFacingNorth
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (2@3) pointing: North new.! !

!methodRemoval: MarsRoverTest #test12 stamp: 'AM 5/15/2021 19:54:42'!
test12
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llllf'.
	
	self robot: robot IsAtPosition: (2@3) pointing: North new.!

!methodRemoval: MarsRoverTest #test11 stamp: 'AM 5/15/2021 19:54:48'!
test11
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lllf'.
	
	self robot: robot IsAtPosition: (3@2) pointing: East new.!

!methodRemoval: MarsRoverTest #test10 stamp: 'AM 5/15/2021 19:54:53'!
test10
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'llf'.
	
	self robot: robot IsAtPosition: (2@1) pointing: South new.!

!methodRemoval: MarsRoverTest #test09 stamp: 'AM 5/15/2021 19:54:57'!
test09
	|robot|
	robot := MarsRover createAt: (2@2) pointing: North new.
	robot receivePackage: 'lf'.
	
	self robot: robot IsAtPosition: (1@2) pointing: West new.!

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/15/2021 19:55:01'!
PASSED!

----SNAPSHOT----(15 May 2021 19:55:05) CuisUniversity-4532.image priorSource: 17351680!
!RobotOrientation methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:55:56'!
displacementBackward
	^self subclassResponsibility.! !
!East methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:56:12' overrides: 50874030!
displacementBackward
	^(-1@0)! !
!North methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:56:20' overrides: 50874030!
displacementBackward
	^(0@-1)! !
!South methodsFor: 'nil' stamp: 'AM 5/15/2021 19:56:31' overrides: 50874030!
displacementBackward
	^(0@1)! !
!West methodsFor: 'nil' stamp: 'AM 5/15/2021 19:56:43' overrides: 50874030!
displacementBackward
	^(1@0)! !

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/15/2021 19:57:03'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/15/2021 19:57:03'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'AM 5/15/2021 19:57:50' prior: 50873841!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[ position:= position + pointing displacementForward].
						     (instruccion =$b) ifTrue:[position:= position + pointing displacementBackward].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
				 
				]
		]
				
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:58:52'!
test013_moveBackwardFacingWest
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (3@2) pointing: West new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 19:59:13'!
test13_moveBackwardFacingWest
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (3@2) pointing: West new.! !

!methodRemoval: MarsRoverTest #test013_moveBackwardFacingWest stamp: 'AM 5/15/2021 19:59:13'!
test013_moveBackwardFacingWest
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'f'.
	
	self robot: robot IsAtPosition: (3@2) pointing: West new.!

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/15/2021 19:59:40'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/15/2021 19:59:40'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/15/2021 19:59:40'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/15/2021 19:59:40'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/15/2021 19:59:40'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/15/2021 19:59:40'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/15/2021 19:59:40'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/15/2021 19:59:40'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/15/2021 19:59:40'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/15/2021 19:59:40'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/15/2021 19:59:41'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/15/2021 19:59:41'!
PASSED!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/15/2021 19:59:41'!
FAILURE!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/15/2021 19:59:41'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 20:00:04' prior: 50874113!
test13_moveBackwardFacingWest
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'b'.
	
	self robot: robot IsAtPosition: (3@2) pointing: West new.! !

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/15/2021 20:00:08'!
PASSED!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/15/2021 20:00:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 20:00:50'!
test14_turnRightWestToSouthCorrectly
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'b'.
	
	self robot: robot IsAtPosition: (2@2) pointing: South new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 20:00:58' prior: 50874228!
test14_turnRightWestToSouthCorrectly
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'r'.
	
	self robot: robot IsAtPosition: (2@2) pointing: South new.! !

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/15/2021 20:01:03'!
PASSED!

!testRun: #MarsRoverTest #test14_turnRightWestToSouthCorrectly stamp: 'AM 5/15/2021 20:01:03'!
FAILURE!

!testRun: #MarsRoverTest #test14_turnRightWestToSouthCorrectly stamp: 'AM 5/15/2021 20:01:03'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'AM 5/15/2021 20:01:47' prior: 50874090!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[ position:= position + pointing displacementForward].
						     (instruccion =$b) ifTrue:[position:= position + pointing displacementBackward].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnRight].
				 
				]
		]
				
! !
!RobotOrientation methodsFor: 'nil' stamp: 'AM 5/15/2021 20:02:06'!
turnRight
	^ self subclassResponsibility .
	! !
!East methodsFor: 'nil' stamp: 'AM 5/15/2021 20:02:30' overrides: 50874312!
turnRight
	^ South new! !
!North methodsFor: 'nil' stamp: 'AM 5/15/2021 20:02:53' overrides: 50874312!
turnRight
	^ East new.! !
!South methodsFor: 'nil' stamp: 'AM 5/15/2021 20:03:08' overrides: 50874312!
turnRight
	^ West new! !
!West methodsFor: 'nil' stamp: 'AM 5/15/2021 20:03:20' overrides: 50874312!
turnRight
	^ North new! !

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/15/2021 20:03:24'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/15/2021 20:03:24'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/15/2021 20:03:24'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/15/2021 20:03:24'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/15/2021 20:03:24'!
FAILURE!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/15/2021 20:03:24'!
FAILURE!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/15/2021 20:03:24'!
FAILURE!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/15/2021 20:03:24'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/15/2021 20:03:24'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/15/2021 20:03:24'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/15/2021 20:03:24'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/15/2021 20:03:24'!
PASSED!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/15/2021 20:03:24'!
PASSED!

!testRun: #MarsRoverTest #test14_turnRightWestToSouthCorrectly stamp: 'AM 5/15/2021 20:03:24'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'AM 5/15/2021 20:04:58' prior: 50874296!
receivePackage: aString 
	aString isEmpty ifTrue: []
	ifFalse:[
		aString do:[:instruccion| (instruccion =$f) ifTrue:[ position:= position + pointing displacementForward].
						     (instruccion =$b) ifTrue:[position:= position + pointing displacementBackward].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
						     (instruccion = $r) ifTrue:[pointing  := pointing  turnRight].
				 
				]
		]
				
! !

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/15/2021 20:05:02'!
PASSED!

!testRun: #MarsRoverTest #test14_turnRightWestToSouthCorrectly stamp: 'AM 5/15/2021 20:05:02'!
FAILURE!

!testRun: #MarsRoverTest #test14_turnRightWestToSouthCorrectly stamp: 'AM 5/15/2021 20:05:02'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/15/2021 20:05:37' prior: 50874238!
test14_turnRightWestToSouthCorrectly
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'r'.
	
	self robot: robot IsAtPosition: (2@2) pointing: North new.! !

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

!testRun: #MarsRoverTest #test14_turnRightWestToSouthCorrectly stamp: 'AM 5/15/2021 20:05:41'!
PASSED!

----QUIT----(15 May 2021 20:06:01) CuisUniversity-4532.image priorSource: 17356025!

----STARTUP---- (15 May 2021 20:08:19) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


----QUIT----(15 May 2021 20:08:27) CuisUniversity-4532.image priorSource: 17371092!

----STARTUP---- (17 May 2021 11:47:20) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/17/2021 11:48:58'!
PASSED!

!testRun: #MarsRoverTest #test14_turnRightWestToSouthCorrectly stamp: 'AM 5/17/2021 11:48:58'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 11:55:28' prior: 50874377!
receivePackage: aString 
	"aString isEmpty ifTrue: []
	ifFalse:["
		aString do:[:instruccion| (instruccion =$f) ifTrue:[ position:= position + pointing displacementForward].
						     (instruccion =$b) ifTrue:[position:= position + pointing displacementBackward].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
						     (instruccion = $r) ifTrue:[pointing  := pointing  turnRight].
				 
				]
		"]"
				
! !

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/17/2021 11:55:32'!
PASSED!

!testRun: #MarsRoverTest #test14_turnRightWestToSouthCorrectly stamp: 'AM 5/17/2021 11:55:32'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 11:55:44' prior: 50874556!
receivePackage: aString 
		aString do:[:instruccion| (instruccion =$f) ifTrue:[ position:= position + pointing displacementForward].
						     (instruccion =$b) ifTrue:[position:= position + pointing displacementBackward].
						     (instruccion = $l) ifTrue:[pointing  := pointing  turnLeft ].
						     (instruccion = $r) ifTrue:[pointing  := pointing  turnRight].
				 
				]
				
! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 11:56:16' prior: 50874618!
receivePackage: instructions 
		instructions do:[:instruction| (instruction =$f) ifTrue:[ position:= position + pointing displacementForward].
						     (instruction =$b) ifTrue:[position:= position + pointing displacementBackward].
						     (instruction = $l) ifTrue:[pointing  := pointing  turnLeft ].
						     (instruction = $r) ifTrue:[pointing  := pointing  turnRight].
				 
				]
				
! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 11:57:30'!
moveForward 
		 position:= position + pointing displacementForward! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 11:57:42'!
moveBackward
		 position:= position + pointing displacementBackward! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 11:58:11'!
turnLeft	
	pointing  := pointing  turnLeft! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 11:58:26'!
turnRight
	pointing  := pointing  turnRight! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 11:58:45' prior: 50874633!
receivePackage: instructions 
		instructions do:[:instruction| (instruction =$f) ifTrue:[ self moveForward].
						     (instruction =$b) ifTrue:[position:= position + pointing displacementBackward].
						     (instruction = $l) ifTrue:[pointing  := pointing  turnLeft ].
						     (instruction = $r) ifTrue:[pointing  := pointing  turnRight].
				 
				]
				
! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 11:59:07' prior: 50874666!
receivePackage: instructions 
		instructions do:[:instruction| (instruction =$f) ifTrue:[ self moveForward].
						     (instruction =$b) ifTrue:[self moveBackward].
						     (instruction = $l) ifTrue:[self turnLeft ].
						     (instruction = $r) ifTrue:[self turnRight].
				 
				]
				
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/17/2021 12:04:38'!
test15_wrongCommandStopsExecution
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'rrfhola'.
	
	self robot: robot IsAtPosition: (2@2) pointing: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/17/2021 12:06:21' prior: 50874692!
test15_wrongCommandStopsExecution
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'rrhr'.
	
	self robot: robot IsAtPosition: (2@2) pointing: East new.! !

!methodRemoval: MarsRoverTest #test15_wrongCommandStopsExecution stamp: 'AM 5/17/2021 12:06:31'!
test15_wrongCommandStopsExecution
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'rrhr'.
	
	self robot: robot IsAtPosition: (2@2) pointing: East new.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AM 5/17/2021 12:08:12'!
test15_wrongCommandStopsProcessingPackage
	|robot|
	robot := MarsRover createAt: (2@2) pointing: West new.
	robot receivePackage: 'rrhr'.
	
	self robot: robot IsAtPosition: (2@2) pointing: East new.! !

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/17/2021 12:08:18'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/17/2021 12:08:18'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/17/2021 12:08:18'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/17/2021 12:08:18'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/17/2021 12:08:18'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/17/2021 12:08:18'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/17/2021 12:08:18'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/17/2021 12:08:18'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/17/2021 12:08:18'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/17/2021 12:08:18'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/17/2021 12:08:19'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/17/2021 12:08:19'!
PASSED!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/17/2021 12:08:19'!
PASSED!

!testRun: #MarsRoverTest #test14_turnRightWestToSouthCorrectly stamp: 'AM 5/17/2021 12:08:19'!
PASSED!

!testRun: #MarsRoverTest #test15_wrongCommandStopsProcessingPackage stamp: 'AM 5/17/2021 12:08:19'!
FAILURE!

!testRun: #MarsRoverTest #test15_wrongCommandStopsProcessingPackage stamp: 'AM 5/17/2021 12:08:19'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 12:23:06'!
isValidInstruction: anInstruction
		 (anInstruction =$f or: anInstruction =$b or: anInstruction =$l or: anInstruction =$r) ifTrue:[^true].
				
! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 12:23:20' prior: 50874680!
receivePackage: instructions 
		instructions do:[:instruction| 
						    (instruction =$f) ifTrue:[ self moveForward].
						     (instruction =$b) ifTrue:[self moveBackward].
						     (instruction = $l) ifTrue:[self turnLeft ].
						     (instruction = $r) ifTrue:[self turnRight].
				 
				]
				
! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 12:23:34' prior: 50874781!
isValidInstruction: anInstruction
		 (anInstruction =$f or: anInstruction =$b or: anInstruction =$l or: anInstruction =$r) ifTrue:[^true] ifFalse:[^false].
				
! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 12:24:53' prior: 50874789!
receivePackage: instructions 
		instructions do:[:instruction| 
						(self isValidInstruction: instruction) ifTrue:[].
						    (instruction =$f) ifTrue:[ self moveForward].
						     (instruction =$b) ifTrue:[self moveBackward].
						     (instruction = $l) ifTrue:[self turnLeft ].
						     (instruction = $r) ifTrue:[self turnRight].
				 
				]
				
! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 12:25:20'!
processInstruction: anInstruction
						    (anInstruction =$f) ifTrue:[ self moveForward].
						     (anInstruction =$b) ifTrue:[self moveBackward].
						     (anInstruction = $l) ifTrue:[self turnLeft ].
						     (anInstruction = $r) ifTrue:[self turnRight].
				 

				
! !
!MarsRover methodsFor: 'moving' stamp: 'AM 5/17/2021 12:25:51' prior: 50874810!
receivePackage: instructions 
		instructions do:[:instruction| 
						(self isValidInstruction: instruction) ifTrue:[self processInstruction: instruction] ifFalse:[^self]
				 
				]
				
! !

!testRun: #MarsRoverTest #test01_emptypackage_keepsTheSame stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test02_moveNorthwiseOnePositionForward stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test03_moveNorthwiseOnePositionBackwards stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test04_moveNorthwiseTwoPositionsForwards stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test05_turnLeftNorthToWestCorrectly stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test06_turnLeftTwiceStartingOnNorthFinishSouth stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test07_turnLeftThreeTimesStartingNorthFinishEast stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test08_turnLeftFourTimesStartingNorthFinishNorth stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test09_moveForwardFacingWest stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test10_moveForwardFacingSouth stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test11_moveForwardFacingEast stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test12_moveForwardFacingNorth stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test13_moveBackwardFacingWest stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test14_turnRightWestToSouthCorrectly stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!testRun: #MarsRoverTest #test15_wrongCommandStopsProcessingPackage stamp: 'AM 5/17/2021 12:26:01'!
PASSED!

!methodRemoval: RobotOrientation #correctOrientation: stamp: 'AM 5/17/2021 12:28:31'!
correctOrientation: aCardinalPoint
self detect: [true]!

----SNAPSHOT----(17 May 2021 12:30:01) CuisUniversity-4532.image priorSource: 17371304!

!methodRemoval: West #displacementFoward stamp: 'AM 5/17/2021 12:31:28'!
displacementFoward
	^(-1@0)!

----SNAPSHOT----(17 May 2021 12:34:19) CuisUniversity-4532.image priorSource: 17383917!

----QUIT----(17 May 2021 12:34:47) CuisUniversity-4532.image priorSource: 17384109!

----STARTUP---- (17 May 2021 12:46:17) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


----SNAPSHOT----(17 May 2021 12:47:11) CuisUniversity-4532.image priorSource: 17384198!

----QUIT----(17 May 2021 12:47:17) CuisUniversity-4532.image priorSource: 17384410!