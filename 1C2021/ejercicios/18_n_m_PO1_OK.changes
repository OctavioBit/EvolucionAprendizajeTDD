----STARTUP---- (17 May 2021 16:39:53) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!

!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'JR 5/17/2021 16:40:50'!
test01MarsRoverShouldNotMoveIfCommandIsEmpty

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: ''.
	
	self assert: (marsRover isAt: 0@0 heading: North)! !

!methodRemoval: MarsRoverTest #test01 stamp: 'JR 5/17/2021 16:40:50'!
test01

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: ''.
	
	self assert: (marsRover isAt: 0@0 heading: North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'JR 5/17/2021 16:41:21'!
test02ShouldMoveForwardWithCommandF

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: 'f'.
	
	self assert: (marsRover isAt: 1@0 heading: North)! !

!methodRemoval: MarsRoverTest #test02 stamp: 'JR 5/17/2021 16:41:21'!
test02

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: 'f'.
	
	self assert: (marsRover isAt: 1@0 heading: North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'JR 5/17/2021 16:41:35'!
test01ShouldNotMoveIfCommandIsEmpty

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: ''.
	
	self assert: (marsRover isAt: 0@0 heading: North)! !

!methodRemoval: MarsRoverTest #test01MarsRoverShouldNotMoveIfCommandIsEmpty stamp: 'JR 5/17/2021 16:41:35'!
test01MarsRoverShouldNotMoveIfCommandIsEmpty

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: ''.
	
	self assert: (marsRover isAt: 0@0 heading: North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'JR 5/17/2021 16:41:55'!
test03ShouldMoveBackwardsWithCommandB

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: 'b'.
	
	self assert: (marsRover isAt: -1@0 heading: North)! !

!methodRemoval: MarsRoverTest #test03 stamp: 'JR 5/17/2021 16:41:55'!
test03

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: 'b'.
	
	self assert: (marsRover isAt: -1@0 heading: North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'JR 5/17/2021 16:42:08'!
test04ShouldRotateLeftWithCommandL

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: 'l'.
	
	self assert: (marsRover isAt: 0@0 heading: West)! !

!methodRemoval: MarsRoverTest #test04 stamp: 'JR 5/17/2021 16:42:09'!
test04

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: 'l'.
	
	self assert: (marsRover isAt: 0@0 heading: West)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'JR 5/17/2021 16:42:23'!
test05ShouldRotateRightWithCommandR

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: 'r'.
	
	self assert: (marsRover isAt: 0@0 heading: East)! !

!methodRemoval: MarsRoverTest #test05 stamp: 'JR 5/17/2021 16:42:23'!
test05

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: 'r'.
	
	self assert: (marsRover isAt: 0@0 heading: East)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'JR 5/17/2021 16:42:47'!
test06ShouldProcessMultipleCommands

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: 'rflb'.
	
	self assert: (marsRover isAt: -1@1 heading: North)! !

!methodRemoval: MarsRoverTest #test06 stamp: 'JR 5/17/2021 16:42:47'!
test06

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	marsRover processCommand: 'rflb'.
	
	self assert: (marsRover isAt: -1@1 heading: North)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'JR 5/17/2021 16:43:05'!
test07ShouldStopProcessingAfterInvalidCommand

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	self 
		should: [ marsRover processCommand: 'rlffxbb'.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: MarsRover invalidCommandError equals: anError messageText.
			self assert: (marsRover isAt: 2@0 heading: North) ]! !

!methodRemoval: MarsRoverTest #test07 stamp: 'JR 5/17/2021 16:43:05'!
test07

	|marsRover|
	
	marsRover := MarsRover at: 0@0 heading: North.
	
	self 
		should: [ marsRover processCommand: 'rlffxbb'.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: MarsRover invalidCommandError equals: anError messageText.
			self assert: (marsRover isAt: 2@0 heading: North) ]!

----QUIT----(17 May 2021 16:43:16) CuisUniversity-4532.image priorSource: 17170017!

----STARTUP---- (17 May 2021 20:04:03) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


----End fileIn of C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\2021-1c-main\17-Portfolio 1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 20:08:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:08:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:08:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:08:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 20:08:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/17/2021 20:08:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 5/17/2021 20:08:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 5/17/2021 20:08:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 20:11:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 20:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:17:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:17:45'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:17:45'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:24:04' prior: 50868581!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value].
								(aTransaction isKindOf: Withdraw) ifTrue: [^(aTransaction value) * (-1)].] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 20:24:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:24:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:24:14'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:24:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:24:37' prior: 50868645!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [aTransaction value].
								(aTransaction isKindOf: Withdraw) ifTrue: [(aTransaction value) * (-1)].] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 20:24:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:24:43'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:24:43'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:25:16' prior: 50868670!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value] ifFalse: 
		[(aTransaction value) * (-1)].] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:25:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 20:25:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:25:24'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:25:24'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 20:25:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/17/2021 20:25:34'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:25:49' prior: 50868691!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value] ifFalse: 
		[^(aTransaction value) * (-1)].] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:25:51'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:25:52'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:26:14' prior: 50868722!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value] ifFalse: 
		[^((aTransaction value) * (-1))].] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:26:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:26:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:28:58' prior: 50868738!
balance

	^transactions sum: [ :aTransaction | aTransaction value] ifEmpty: [ 0 ]
	
	"(aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value] ifFalse: 
		[^((aTransaction value) * (-1))]."! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:29:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 20:29:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 20:29:07'!
PASSED!
!Withdraw methodsFor: 'value' stamp: 'JR 5/17/2021 20:29:13' prior: 50868537 overrides: 50868466!
value

	^ value * (-1)! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 20:29:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:29:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:29:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 20:29:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/17/2021 20:29:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 5/17/2021 20:29:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 5/17/2021 20:29:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 20:29:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:29:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 20:29:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 20:29:22'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'JR 5/17/2021 20:29:46' prior: 50868775 overrides: 50868466!
value

	^ value ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:30:32' prior: 50868754!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value].] ifEmpty: [ 0 ]
	
	"(aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value] ifFalse: 
		[^((aTransaction value) * (-1))]."! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:30:37'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:31:10' prior: 50868824!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value] 
		ifFalse: [(aTransaction value) * (-1)]] ifEmpty: [ 0 ]
	
	! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:31:14'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:31:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:31:38' prior: 50868839!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value] 
		ifFalse: [^ (-1) * (aTransaction value)]] ifEmpty: [ 0 ]
	
	! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:31:42'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:31:42'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:32:41' prior: 50868855!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] 
		ifFalse: [(-1) * (aTransaction value)]] ifEmpty: [ 0 ]
	
	! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:32:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:32:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 20:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 20:32:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 20:32:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/17/2021 20:32:51'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:34:40' prior: 50868872!
balance

	^transactions sum: [ :aTransaction | aTransaction valueForBalance] ifEmpty: [ 0 ]
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] 
		ifFalse: [(-1) * (aTransaction value)]"! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 20:55:26' prior: 50868903!
balance

	^transactions sum: [ :aTransaction | aTransaction valueForBalance] ifEmpty: [ 0 ]
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] 
		ifFalse: [(-1) * (aTransaction value)]"! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 21:46:58' prior: 50868913!
balance
	
	|currentBalance|
	
	currentBalance _ 0.
	
	^transactions do: [:aTransaction | currentBalance _ aTransaction ]
	
	"sum: [ :aTransaction | aTransaction value] ifEmpty: [ 0 ]"
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] 
		ifFalse: [(-1) * (aTransaction value)]"! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 21:49:32' prior: 50868923!
balance
	
	|currentBalance|
	
	currentBalance _ 0.
	
	^transactions do: [:aTransaction | currentBalance _ aTransaction xxx: currentBalance]
	
	"sum: [ :aTransaction | aTransaction value] ifEmpty: [ 0 ]"
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] 
		ifFalse: [(-1) * (aTransaction value)]"! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 21:52:02' prior: 50868935!
balance
	
	|currentBalance|
	
	currentBalance _ 0.
	
	^transactions do: [:aTransaction | currentBalance _ aTransaction weighIn: currentBalance]
	
	"sum: [ :aTransaction | aTransaction value] ifEmpty: [ 0 ]"
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] 
		ifFalse: [(-1) * (aTransaction value)]"! !
!AccountTransaction methodsFor: 'balance' stamp: 'JR 5/17/2021 21:52:39'!
weighIn: aBalance

	self subclassResponsibility ! !
!Withdraw methodsFor: 'balance' stamp: 'JR 5/17/2021 21:52:56' overrides: 50868961!
weighIn: aBalance! !
!Deposit methodsFor: 'balance' stamp: 'JR 5/17/2021 21:53:01' overrides: 50868961!
weighIn: aBalance! !
!Withdraw methodsFor: 'balance' stamp: 'JR 5/17/2021 21:53:23' prior: 50868966 overrides: 50868961!
weighIn: aBalance

	^aBalance - value! !
!Deposit methodsFor: 'balance' stamp: 'JR 5/17/2021 21:53:34' prior: 50868970 overrides: 50868961!
weighIn: aBalance

	^aBalance + value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 21:53:45'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 21:53:45'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 21:54:19' prior: 50868948!
balance
	
	|currentBalance|
	
	currentBalance _ 0.
	
	transactions do: [:aTransaction | currentBalance _ aTransaction weighIn: currentBalance].
	
	^currentBalance 
	
	"sum: [ :aTransaction | aTransaction value] ifEmpty: [ 0 ]"
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] 
		ifFalse: [(-1) * (aTransaction value)]"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 21:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 21:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 21:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 21:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/17/2021 21:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 5/17/2021 21:54:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 5/17/2021 21:54:30'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'JR 5/17/2021 21:54:50'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'JR 5/17/2021 21:54:59'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'JR 5/17/2021 21:56:01'!
test01

	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	self assert: aPortfolio balance equals: 0! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/17/2021 21:56:03'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'JR 5/17/2021 21:56:03'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'JR 5/17/2021 21:56:18'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'JR 5/17/2021 21:56:25' prior: 50869064!
balance
	
	^0! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/17/2021 21:56:28'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/17/2021 21:58:19'!
test02

	|aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount.
	
	self assert: aPortfolio balance equals: anAccount balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/17/2021 21:58:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 21:58:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/17/2021 21:58:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/17/2021 21:58:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/17/2021 21:58:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 5/17/2021 21:58:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 5/17/2021 21:58:43'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'JR 5/17/2021 21:59:16' prior: 50868991!
balance
	
	|currentBalance|
	
	currentBalance _ 0.
	
	transactions do: [:aTransaction | currentBalance _ aTransaction weighIn: currentBalance].
	
	^currentBalance ! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/17/2021 22:01:12'!
PASSED!

----QUIT----(17 May 2021 22:06:13) CuisUniversity-4532.image priorSource: 17174757!

----STARTUP---- (20 May 2021 19:55:52) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/20/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/20/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/20/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/20/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/20/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 5/20/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 5/20/2021 20:17:43'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/20/2021 20:22:41'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/20/2021 20:22:41'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/20/2021 20:23:17'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/20/2021 20:23:44' prior: 50869160!
addAccount: aReceptiveAccount 

	| account |
	account := aReceptiveAccount ! !

!testRun: #PortfolioTest #test02 stamp: 'JR 5/20/2021 20:25:14'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/20/2021 20:25:14'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: 'anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'JR 5/20/2021 20:25:59'!
Object subclass: #Portfolio
	instanceVariableNames: 'anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/20/2021 20:26:09' prior: 50869165!
addAccount: aReceptiveAccount 

	
	anAccount := aReceptiveAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/20/2021 20:26:11' prior: 50869192!
addAccount: aReceptiveAccount 

	anAccount := aReceptiveAccount ! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'JR 5/20/2021 20:26:25'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/20/2021 20:26:25' prior: 50869197!
addAccount: aReceptiveAccount 

	account := aReceptiveAccount ! !

!testRun: #PortfolioTest #test02 stamp: 'JR 5/20/2021 20:26:31'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/20/2021 20:26:31'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'JR 5/20/2021 20:26:50' prior: 50869068!
balance
	
	^ account balance ! !

!testRun: #PortfolioTest #test02 stamp: 'JR 5/20/2021 20:26:54'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/20/2021 20:28:44'!
test03

	|aPortfolio anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: aPortfolio balance equals: (anAccount1 balance + anAccount2 balance)! !

!testRun: #PortfolioTest #test03 stamp: 'JR 5/20/2021 20:28:48'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/20/2021 20:28:48'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/20/2021 20:29:15' prior: 50869210!
addAccount: aReceptiveAccount 

	account add: aReceptiveAccount ! !
!Portfolio methodsFor: 'initialization' stamp: 'JR 5/20/2021 20:30:01' overrides: 16896425!
initialize

	account := OrderedCollection new! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'JR 5/20/2021 20:30:10'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/20/2021 20:30:10' prior: 50869248!
addAccount: aReceptiveAccount 

	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/20/2021 20:30:10' prior: 50869253 overrides: 16896425!
initialize

	accounts := OrderedCollection new! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/20/2021 20:30:10' prior: 50869220!
balance
	
	^ accounts balance ! !
!Portfolio methodsFor: 'balance' stamp: 'JR 5/20/2021 20:31:04' prior: 50869276!
balance
	
	^ accounts sum: [:account | account balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test03 stamp: 'JR 5/20/2021 20:31:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'JR 5/20/2021 20:31:13'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/20/2021 20:31:13'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/20/2021 20:31:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/20/2021 20:36:16'!
test04

	|aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: aPortfolio balance equals: anAccount balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/20/2021 20:39:07' prior: 50869295!
test04

	|aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount.
	
	self 
		should: [ aPortfolio addAccount: anAccount]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio balance equals: anAccount balance ]! !

!testRun: #PortfolioTest #test04 stamp: 'JR 5/20/2021 20:39:09'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/20/2021 20:39:09'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/20/2021 20:40:14' prior: 50869265!
addAccount: aReceptiveAccount 

	(accounts includes: aReceptiveAccount) ifFalse: [ accounts 	add: aReceptiveAccount]! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/20/2021 20:40:50' prior: 50869331!
addAccount: aReceptiveAccount 

	(accounts includes: aReceptiveAccount) ifTrue: [self error: Portfolio duplicatedAccountError]
	ifFalse: [ accounts 	add: aReceptiveAccount]! !
!Portfolio class methodsFor: 'error descriptions' stamp: 'JR 5/20/2021 20:41:42'!
duplicatedAccountError

	^'The account is already in this portfolio'! !

!testRun: #PortfolioTest #test04 stamp: 'JR 5/20/2021 20:41:47'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/20/2021 20:42:59'!
test05

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 addAccount: anAccount1.
	aPortfolio1 addAccount: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 addPortfolio: aPortfolio1.
	
	self assert: aPortfolio2 balance equals: (aPortfolio1 balance)! !

!testRun: #PortfolioTest #test05 stamp: 'JR 5/20/2021 20:43:02'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/20/2021 20:43:02'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/20/2021 20:43:14'!
addPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/20/2021 20:30:10' prior: 50869338!
addAccount: aReceptiveAccount 

	accounts add: aReceptiveAccount ! !

!methodRemoval: PortfolioTest #test04 stamp: 'JR 5/20/2021 20:57:57'!
test04

	|aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount.
	
	self 
		should: [ aPortfolio addAccount: anAccount]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio balance equals: anAccount balance ]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/20/2021 20:58:03'!
test04

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 addAccount: anAccount1.
	aPortfolio1 addAccount: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 addPortfolio: aPortfolio1.
	
	self assert: aPortfolio2 balance equals: (aPortfolio1 balance)! !

!methodRemoval: PortfolioTest #test05 stamp: 'JR 5/20/2021 20:58:03'!
test05

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 addAccount: anAccount1.
	aPortfolio1 addAccount: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 addPortfolio: aPortfolio1.
	
	self assert: aPortfolio2 balance equals: (aPortfolio1 balance)!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/20/2021 20:58:30'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/20/2021 20:58:30'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'JR 5/20/2021 20:59:58'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/20/2021 20:59:54' prior: 50869379!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio! !

!testRun: #PortfolioTest #test04 stamp: 'JR 5/20/2021 21:00:02'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'JR 5/20/2021 21:00:29' prior: 50869271 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test04 stamp: 'JR 5/20/2021 21:00:41'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/20/2021 21:00:41'!
FAILURE!

----QUIT----(20 May 2021 22:01:54) CuisUniversity-4532.image priorSource: 17199088!

----STARTUP---- (24 May 2021 15:19:53) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!

!Portfolio methodsFor: 'adding' stamp: 'JR 5/24/2021 15:23:44' prior: 50869457!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio! !

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 15:24:04'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 15:24:36'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 15:24:36'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'JR 5/24/2021 15:25:06' prior: 50869280!
balance
	
	^ (accounts sum: [:account | account balance] ifEmpty: [0]) + (portfolios sum: [:account | account balance] ifEmpty: [0]) ! !

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 15:25:10'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 15:26:09' prior: 50869406!
test04

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 addAccount: anAccount1.
	aPortfolio1 addAccount: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 addPortfolio: aPortfolio1.
	aPortfolio1 addPortfolio: aPortfolio2 .
	self assert: aPortfolio2 balance equals: (aPortfolio1 balance)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 15:26:18' prior: 50869504!
test04

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 addAccount: anAccount1.
	aPortfolio1 addAccount: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 addPortfolio: aPortfolio1.
	
	self assert: aPortfolio2 balance equals: (aPortfolio1 balance)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 15:28:20'!
test05

	|aPortfolio anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	"self assert: aPortfolio hasRegistered:  Argument expected ->equals: (aPortfolio1 balance)"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 15:30:29' prior: 50869546!
test05

	|aPortfolio anAccount1 anAccount2 aTransaction1 aTransaction2|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction1 := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	aTransaction2 := Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: (aPortfolio hasRegistered: aTransaction1).
	self assert: (aPortfolio hasRegistered: aTransaction2).! !

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 15:30:34'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 15:30:35'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 15:30:47'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 15:32:39' prior: 50869590!
hasRegistered: aTransaction

	^(accounts do: [:account | account hasRegistered: aTransaction]) or: 
		[portfolios do: [:portfolio | portfolio hasRegistered: aTransaction]]! !
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 15:33:54' prior: 50869595!
hasRegistered: aTransaction

	^(accounts anySatisfy: [:account | account hasRegistered: aTransaction]) or: 
		[portfolios anySatisfy: [:portfolio | portfolio hasRegistered: aTransaction]]! !

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 15:33:56'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 15:33:59'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 15:35:46' prior: 50869604!
hasRegistered: aTransaction

	^(accounts anySatisfy: [:account | account hasRegistered: aTransaction]) ! !

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 15:35:49'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'JR 5/24/2021 15:35:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/24/2021 15:35:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/24/2021 15:35:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 15:35:55'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 15:35:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 15:36:36'!
test06

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 aTransaction|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 addAccount: anAccount1.
	aPortfolio1 addAccount: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 addPortfolio: aPortfolio1.
	
	self assert: (aPortfolio2 hasRegistered: aTransaction) ! !

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 15:36:38'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 15:36:38'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 15:37:02' prior: 50869618!
hasRegistered: aTransaction

	^(accounts anySatisfy: [:account | account hasRegistered: aTransaction]) or: 
		[portfolios anySatisfy: [:portfolio | portfolio hasRegistered: aTransaction]]! !

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 15:37:05'!
PASSED!

((OrderedCollection new) add: 1) , ((OrderedCollection new) add: 13)!

 {(OrderedCollection new) add: 1} , {(OrderedCollection new) add: 13}!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 15:43:31'!
test07

	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: aPortfolio transactions equals: {anAccount1 transactions} , {anAccount2 transactions}.! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:43:33'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 15:43:43'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 15:47:51' prior: 50869699!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	accounts do: [:account | allTransactions addAll: account transactions].
	
	^allTransactions ! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:48:22'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:48:32'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:48:32'!
FAILURE!

 ({(OrderedCollection new) add: 1} , {(OrderedCollection new) add: 13}) class!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 15:49:27' prior: 50869679!
test07

	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: aPortfolio transactions equals: (anAccount1 transactions addAll: anAccount2 transactions).! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:49:28'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:49:28'!
FAILURE!

 ({(OrderedCollection new) add: 1} , {(OrderedCollection new) add: 13}) copy!

 ({(OrderedCollection new) add: 1} , {(OrderedCollection new) add: 13}) copy class!

((OrderedCollection new) add: 1) addAll: ((OrderedCollection new) add: 13) copy class!

((OrderedCollection new) add: 1)!

(OrderedCollection new) add: 1 class !

OrderedCollection new add: 1 class !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:54:34'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:54:34'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:54:57'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:54:57'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 15:55:40' prior: 50869722!
test07

	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: aPortfolio transactions equals: ({anAccount1 transactions} , {anAccount2 transactions}) asOrderedCollection .! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:55:42'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:55:42'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 15:55:57' prior: 50869766!
test07

	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: aPortfolio transactions equals: (anAccount1 transactions addAll: anAccount2 transactions).! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:56:00'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:56:00'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 15:56:26' prior: 50869703!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	accounts do: [:account | allTransactions addAll: account transactions].
	
	^allTransactions asOrderedCollection ! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:56:30'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 15:56:30'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 15:57:12' prior: 50869813!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	accounts do: [:account | allTransactions addAll: account transactions].
	
	^allTransactions  ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:03:00' prior: 50869790!
test07

	|aPortfolio anAccount1 anAccount2 xxx|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	xxx := (anAccount1 transactions addAll: anAccount2 transactions).
	
	self assert: aPortfolio transactions equals: xxx.! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:04:09'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:04:09'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:04:14'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:04:14'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:04:55' prior: 50869836!
test07

	|aPortfolio anAccount1 anAccount2 xxx|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	xxx := {anAccount1 transactions} ,{anAccount2 transactions} asOrderedCollection .
	
	self assert: aPortfolio transactions equals: xxx.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:05:00' prior: 50869865!
test07

	|aPortfolio anAccount1 anAccount2 xxx|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	xxx := ({anAccount1 transactions} ,{anAccount2 transactions} )asOrderedCollection .
	
	self assert: aPortfolio transactions equals: xxx.! !
!PortfolioTest class methodsFor: 'nil' stamp: 'JR 5/24/2021 16:05:49'!
DoIt

|aPortfolio anAccount1 anAccount2 xxx|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	xxx := (anAccount1 transactions , anAccount2 transactions )asOrderedCollection .
	
	self assert: aPortfolio transactions equals: xxx.! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:06:11'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:06:11'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:06:26' prior: 50869885!
test07

	|aPortfolio anAccount1 anAccount2 xxx|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	xxx := (anAccount1 transactions , anAccount2 transactions)asOrderedCollection .
	
	self assert: aPortfolio transactions equals: xxx.! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:06:28'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:07:00' prior: 50869929!
test07

	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: anAccount1.
	aPortfolio addAccount: anAccount2.
	
	self assert: aPortfolio transactions equals: (anAccount1 transactions , anAccount2 transactions) asOrderedCollection.! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:07:02'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'JR 5/24/2021 16:07:05'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/24/2021 16:07:05'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/24/2021 16:07:05'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 16:07:05'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 16:07:05'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 16:07:05'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:07:05'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:07:37'!
test08

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 addAccount: anAccount1.
	aPortfolio1 addAccount: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 addPortfolio: aPortfolio1.
	
	"self assert: (aPortfolio2 hasRegistered: aTransaction) "! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:08:23' prior: 50869988!
test08

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 addAccount: anAccount1.
	aPortfolio1 addAccount: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 addPortfolio: aPortfolio1.
	
	self assert: aPortfolio1 transactions equals: (anAccount1 transactions , anAccount2 transactions) asOrderedCollection.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:09:02' prior: 50870008!
test08

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 addAccount: anAccount1.
	aPortfolio1 addAccount: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 addPortfolio: aPortfolio1.
	
	self assert: aPortfolio2 transactions equals: aPortfolio1 transactions.! !

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:09:03'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:09:03'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 16:09:40' prior: 50869827!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	accounts do: [:account | allTransactions addAll: account transactions].
	portfolios do: [:portfolio | allTransactions addAll: portfolio transactions].
	
	^allTransactions  ! !

OrderedCollection new add: 3; add: 2; add: 1; add: 4; yourself.!

(OrderedCollection new add: 2; add: 4; add: 1; add: 3; yourself)!


TestCase new assert: (OrderedCollection new add: 3; add: 2; add: 1; add: 4; yourself) equals: 
(OrderedCollection new add: 2; add: 4; add: 1; add: 3; yourself)!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:12:47'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'JR 5/24/2021 16:12:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/24/2021 16:12:51'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/24/2021 16:12:51'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:12:52'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:12:52'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'JR 5/24/2021 16:16:25'!
Object subclass: #Portfolio
	instanceVariableNames: 'financialAssets portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:16:25' prior: 50869384!
addAccount: aReceptiveAccount 

	financialAssets add: aReceptiveAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:16:25' prior: 50870055!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	financialAssets do: [:account | allTransactions addAll: account transactions].
	portfolios do: [:portfolio | allTransactions addAll: portfolio transactions].
	
	^allTransactions  ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:16:25' prior: 50869465 overrides: 16896425!
initialize

	financialAssets := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:16:25' prior: 50869663!
hasRegistered: aTransaction

	^(financialAssets anySatisfy: [:account | account hasRegistered: aTransaction]) or: 
		[portfolios anySatisfy: [:portfolio | portfolio hasRegistered: aTransaction]]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:16:25' prior: 50869494!
balance
	
	^ (financialAssets sum: [:account | account balance] ifEmpty: [0]) + (portfolios sum: [:account | account balance] ifEmpty: [0]) ! !

Object subclass: #Portfolio
	instanceVariableNames: 'financialAssets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'JR 5/24/2021 16:16:30'!
Object subclass: #Portfolio
	instanceVariableNames: 'financialAssets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/24/2021 16:16:52'!
add: aReceptiveAccount 

	financialAssets add: aReceptiveAccount ! !

!methodRemoval: Portfolio #addAccount: stamp: 'JR 5/24/2021 16:16:52'!
addAccount: aReceptiveAccount 

	financialAssets add: aReceptiveAccount !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/24/2021 16:17:01' prior: 50870158!
add: aFinancialAsset 

	financialAssets add: aFinancialAsset ! !

!methodRemoval: Portfolio #addPortfolio: stamp: 'JR 5/24/2021 16:17:08'!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio!
!Portfolio methodsFor: 'balance' stamp: 'JR 5/24/2021 16:17:25' prior: 50870139!
balance
	
	^ (financialAssets sum: [:asset | asset balance] ifEmpty: [0]) ! !
!Portfolio methodsFor: 'initialization' stamp: 'JR 5/24/2021 16:17:33' prior: 50870123 overrides: 16896425!
initialize

	financialAssets := OrderedCollection new.! !
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 16:17:41' prior: 50870129!
hasRegistered: aTransaction

	^(financialAssets anySatisfy: [:account | account hasRegistered: aTransaction])! !
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 16:17:56' prior: 50870111!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	financialAssets do: [:asset | allTransactions addAll: asset transactions].
	
	^allTransactions  ! !
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/24/2021 16:18:02' prior: 50870188!
hasRegistered: aTransaction

	^(financialAssets anySatisfy: [:asset | asset hasRegistered: aTransaction])! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:18:12' prior: 50869074!
test02

	|aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: anAccount balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:18:21' prior: 50869226!
test03

	|aPortfolio anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: aPortfolio balance equals: (anAccount1 balance + anAccount2 balance)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:18:26' prior: 50869526!
test04

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 addAccount: anAccount1.
	aPortfolio1 addAccount: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 add: aPortfolio1.
	
	self assert: aPortfolio2 balance equals: (aPortfolio1 balance)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:18:36' prior: 50870241!
test04

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 add: aPortfolio1.
	
	self assert: aPortfolio2 balance equals: (aPortfolio1 balance)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:18:45' prior: 50869565!
test05

	|aPortfolio anAccount1 anAccount2 aTransaction1 aTransaction2|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction1 := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	aTransaction2 := Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: (aPortfolio hasRegistered: aTransaction1).
	self assert: (aPortfolio hasRegistered: aTransaction2).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:18:53' prior: 50869638!
test06

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 aTransaction|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 addPortfolio: aPortfolio1.
	
	self assert: (aPortfolio2 hasRegistered: aTransaction) ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:18:56' prior: 50870302!
test06

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 aTransaction|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 add: aPortfolio1.
	
	self assert: (aPortfolio2 hasRegistered: aTransaction) ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:19:05' prior: 50869951!
test07

	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: aPortfolio transactions equals: (anAccount1 transactions , anAccount2 transactions) asOrderedCollection.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:19:15' prior: 50870030!
test08

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 add: aPortfolio1.
	
	self assert: aPortfolio2 transactions equals: aPortfolio1 transactions.! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/24/2021 16:19:17'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/24/2021 16:19:17'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/24/2021 16:19:17'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 16:19:17'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 16:19:17'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 16:19:17'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:19:17'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:19:17'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:21:06'!
test09

	|aPortfolio1 anAccount1 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount1.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:22:04' prior: 50870400!
test09

	|aPortfolio1 anAccount1 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
		
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:23:14' prior: 50870411!
test09

	|aPortfolio1 anAccount1 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: anAccount1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:23:16'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:23:16'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/24/2021 16:25:03' prior: 50870168!
add: aFinancialAsset 

	(financialAssets includes: aFinancialAsset) ifTrue: [self error: 	self class duplicatedAccountError].
	financialAssets add: aFinancialAsset ! !

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:25:09'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:27:11' prior: 50870422!
test09

	|aPortfolio1 anAccount1 aPortfolio2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:27:14'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:27:14'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/24/2021 16:29:06' prior: 50870445!
add: aFinancialAsset 

	financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset].
	financialAssets add: aFinancialAsset ! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/24/2021 16:29:38'!
assertDoesNotContain: aFinantialAsset! !
!AccountTransaction methodsFor: 'assertions' stamp: 'JR 5/24/2021 16:30:40'!
assertDoesNotContain: aFinancialAsset
	
	(self = aFinancialAsset) ifTrue: [self error: 	self class duplicatedAccountError].! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/24/2021 16:32:04' prior: 50870488!
assertDoesNotContain: aFinantialAsset

	financialAssets do: [].! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/24/2021 16:33:23' prior: 50870499!
assertDoesNotContain: aFinancialAsset

	financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset].! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/24/2021 16:33:29'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/24/2021 16:33:29'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/24/2021 16:33:29'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 16:33:29'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 16:33:29'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 16:33:29'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:33:29'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:33:29'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:33:29'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:33:34'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:33:34'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:34:02'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:34:02'!
ERROR!

!methodRemoval: AccountTransaction #assertDoesNotContain: stamp: 'JR 5/24/2021 16:34:21'!
assertDoesNotContain: aFinancialAsset
	
	(self = aFinancialAsset) ifTrue: [self error: 	self class duplicatedAccountError].!
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/24/2021 16:34:46'!
assertDoesNotContain: aFinancialAsset
	
	(self = aFinancialAsset) ifTrue: [self error: 	self class duplicatedAccountError].! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/24/2021 16:34:48'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/24/2021 16:34:49'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/24/2021 16:34:49'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 16:34:49'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 16:34:49'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 16:34:49'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:34:49'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:34:49'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:34:49'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:34:49'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 16:34:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:34:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:35:27'!
test10

	|aPortfolio1 anAccount1 aPortfolio2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:35:36' prior: 50870456!
test09

	|aPortfolio1 anAccount1 aPortfolio2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: anAccount1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:35:45'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:35:47'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:35:48'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:35:48'!
ERROR!
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/24/2021 16:36:02' prior: 50870547!
assertDoesNotContain: aFinancialAsset
	
	(self = aFinancialAsset) ifTrue: [self error: 	Portfolio duplicatedAccountError].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/24/2021 16:36:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/24/2021 16:36:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/24/2021 16:36:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/24/2021 16:36:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/24/2021 16:36:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 5/24/2021 16:36:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 5/24/2021 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'JR 5/24/2021 16:36:11'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/24/2021 16:36:11'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/24/2021 16:36:11'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 16:36:11'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 16:36:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 16:36:11'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:36:11'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:36:12'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:36:12'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/24/2021 16:36:12'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/24/2021 16:36:12'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:36:16'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/24/2021 16:36:18'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/24/2021 16:36:18'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/24/2021 16:39:22' prior: 50870481!
add: aFinancialAsset 

	financialAssets do: [:asset | aFinancialAsset assertDoesNotContain: asset].
	financialAssets add: aFinancialAsset ! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/24/2021 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/24/2021 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/24/2021 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/24/2021 16:39:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:42:10' prior: 50870582!
test10

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:42:50' prior: 50870730!
test10

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
	
	aPortfolio2 add: aPortfolio3 .
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:43:11'!
test11

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
	
	aPortfolio2 add: aPortfolio3 .
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:43:35' prior: 50870751!
test10

	|aPortfolio1 anAccount1 aPortfolio2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !

!testRun: #PortfolioTest #test10 stamp: 'JR 5/24/2021 16:43:37'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/24/2021 16:43:39'!
PASSED!

!methodRemoval: PortfolioTest #test11 stamp: 'JR 5/24/2021 16:43:45'!
test11

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
	
	aPortfolio2 add: aPortfolio3 .
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	!

!testRun: #PortfolioTest #test01 stamp: 'JR 5/24/2021 16:43:49'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/24/2021 16:43:49'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/24/2021 16:43:49'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/24/2021 16:43:49'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/24/2021 16:43:49'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/24/2021 16:43:49'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/24/2021 16:43:49'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/24/2021 16:43:49'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/24/2021 16:43:49'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/24/2021 16:43:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:47:15'!
test11

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	aPortfolio2 add: aPortfolio3.
	
	aPortfolio1 add: aPortfolio2.
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:48:35' prior: 50870867!
test11

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	aPortfolio2 add: aPortfolio3.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !

!testRun: #PortfolioTest #test11 stamp: 'JR 5/24/2021 16:48:36'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/24/2021 16:48:36'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 16:49:40' prior: 50870891!
test11

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	aPortfolio2 add: aPortfolio3.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio1 balance equals: 0]	! !
!Portfolio class methodsFor: 'error descriptions' stamp: 'JR 5/24/2021 16:49:58'!
portfoliosLoopError

	^'The account is already in this portfolio'! !
!Portfolio class methodsFor: 'error descriptions' stamp: 'JR 5/24/2021 16:50:41' prior: 50870941!
portfoliosLoopError

	^'Adding this portfolio is not allowed'! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 17:00:21'!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	
	self 
		should: [aPortfolio3 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio1 balance equals: 0]	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 17:00:33' prior: 50870952!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	
	self 
		should: [aPortfolio3 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio1 balance equals: 0]	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/24/2021 17:00:48' prior: 50870975!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	
	self 
		should: [aPortfolio3 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio3 balance equals: aPortfolio1 balance]	! !

!testRun: #PortfolioTest #test12 stamp: 'JR 5/24/2021 17:00:49'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/24/2021 17:00:50'!
FAILURE!
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/24/2021 17:07:16' prior: 50870633!
assertDoesNotContain: aFinancialAsset
	
	(self = aFinancialAsset) ifTrue: [self error: 	Portfolio duplicatedAccountError].
	aFinancialAsset assertDoesNotContain: self.! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/24/2021 17:15:22' prior: 50870699!
add: aFinancialAsset 

	financialAssets do: [:asset | (asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: [].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) "ifTrue: error". ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]].
	financialAssets add: aFinancialAsset 
	
	"aFinancialAsset assertDoesNotContain: asset"! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/24/2021 17:15:31' prior: 50871034!
add: aFinancialAsset 

	financialAssets do: [:asset | (asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: ["??????????????"].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) "ifTrue: error". ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]].
	financialAssets add: aFinancialAsset 
	
	"aFinancialAsset assertDoesNotContain: asset"! !

----QUIT----(24 May 2021 17:15:51) CuisUniversity-4532.image priorSource: 17210382!

----STARTUP---- (25 May 2021 14:46:28) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


!methodRemoval: PortfolioTest #test12 stamp: 'JR 5/25/2021 14:47:48'!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	
	self 
		should: [aPortfolio3 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio3 balance equals: aPortfolio1 balance]	!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/25/2021 14:48:18'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/25/2021 14:48:20'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/25/2021 14:48:20'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 14:56:53' prior: 50871057!
add: aFinancialAsset 
	"para la raiz"
	financialAssets do: [:asset | (asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: ["??????????????"].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) "ifTrue: error". ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]].
	financialAssets add: aFinancialAsset 
	
	"aFinancialAsset assertDoesNotContain: asset"! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 14:59:29' prior: 50871117!
add: aFinancialAsset 
	"para la raiz"
	"comparar aFinancialAsset con self"
	financialAssets do: [:asset | (asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: ["??????????????"].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) "ifTrue: error". ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]].
	financialAssets add: aFinancialAsset 
	
	"aFinancialAsset assertDoesNotContain: asset"! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 15:08:08' prior: 50871141!
add: aFinancialAsset 
	"para la raiz"
	"comparar aFinancialAsset con self"
	financialAssets do: [:asset | (asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset "ni sus hijos" .].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) "ifTrue: error". ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]].
	financialAssets add: aFinancialAsset 
	
	"aFinancialAsset assertDoesNotContain: asset"! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:11:32' prior: 50870504!
assertDoesNotContain: aFinancialAsset
	(aFinancialAsset isKindOf: ReceptiveAccount ) ifTrue: [
	financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset].].
	
	(aFinancialAsset isKindOf: Portfolio ) ifTrue: [
		financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset.
			(aFinancialAsset financialAssets) do: [:hijo | asset assertDoesNotContain: hijo ].
		]]! !

Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialAsset category: 'Portfolio-Ejercicio' stamp: 'JR 5/25/2021 15:12:45'!
Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'financialAssets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'JR 5/25/2021 15:12:57'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'financialAssets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'JR 5/25/2021 15:13:03'!
FinancialAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #FinancialAsset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialAsset category: 'Portfolio-Ejercicio' stamp: 'JR 5/25/2021 15:14:18'!
Object subclass: #FinancialAsset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 15:15:02' prior: 50871166!
add: aFinancialAsset 
	"para la raiz"
	"comparar aFinancialAsset con self"
	financialAssets do: [:asset | (asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset "ni sus hijos" .].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) "ifTrue: error". ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]].
	financialAssets add: aFinancialAsset .
	aFinancialAsset beAddedTo: self.
	
	"aFinancialAsset assertDoesNotContain: asset"! !
!FinancialAsset methodsFor: 'no messages' stamp: 'JR 5/25/2021 15:15:26'!
beAddedTo: aPortfolio

	parents add: aPortfolio ! !
!Portfolio methodsFor: 'initialization' stamp: 'JR 5/25/2021 15:15:56' prior: 50870183 overrides: 16896425!
initialize

	financialAssets := OrderedCollection new.
	! !
!Portfolio methodsFor: 'initialization' stamp: 'JR 5/25/2021 15:16:30' prior: 50871292 overrides: 16896425!
initialize

	financialAssets := OrderedCollection new.
	parents := OrderedCollection new.
	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'JR 5/25/2021 15:16:41' prior: 50868567 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 15:18:00' prior: 50871259!
add: aFinancialAsset 
	"para la raiz"
	"comparar aFinancialAsset con self"
	financialAssets do: [:asset | (asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ni sus hijos .].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) "ifTrue: error". ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]].
	financialAssets add: aFinancialAsset .
	aFinancialAsset beAddedTo: self.
	
	"aFinancialAsset assertDoesNotContain: asset"! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 15:19:18' prior: 50871311!
add: aFinancialAsset 
	"para la raiz"
	"comparar aFinancialAsset con self"
	financialAssets do: [:asset | asset xxx: aFinancialAsset]."(asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ni sus hijos .].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) ifTrue: error. ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]]."
	financialAssets add: aFinancialAsset .
	aFinancialAsset beAddedTo: self.
	
	"aFinancialAsset assertDoesNotContain: asset"! !
!FinancialAsset methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:19:34'!
xxx: aFinancialAsset

	self subclassResponsibility ! !
!Portfolio methodsFor: 'nil' stamp: 'JR 5/25/2021 15:19:50' overrides: 50871368!
xxx: aFinancialAsset! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'JR 5/25/2021 15:19:57' overrides: 50871368!
xxx: aFinancialAsset! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:21:05' prior: 50871373 overrides: 50871368!
xxx: aFinancialAsset

	(aFinancialAsset isKindOf: ReceptiveAccount) ifTrue: [self assertDoesNotContain: aFinancialAsset ].
	(aFinancialAsset isKindOf: Portfolio) 	ifTrue: [self assertDoesNotContain: aFinancialAsset "ni sus hijos" .].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:21:43' prior: 50871377 overrides: 50871368!
xxx: aFinancialAsset

	(aFinancialAsset isKindOf: ReceptiveAccount) ifTrue: [(self = aFinancialAsset ) "ifTrue: error". ].
	(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: self]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:22:47' prior: 50871394 overrides: 50871368!
xxx: aFinancialAsset

	aFinancialAsset assertDoesNotContain: self
	"(aFinancialAsset isKindOf: ReceptiveAccount) ifTrue: [(self = aFinancialAsset ) ifTrue: error. ].
	(aFinancialAsset isKindOf: Portfolio) ifTrue: []"! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:25:34' prior: 50871405 overrides: 50871368!
xxx: aFinancialAsset

	self assertDoesNotContain: aFinancialAsset 
	"(aFinancialAsset isKindOf: ReceptiveAccount) ifTrue: [(self = aFinancialAsset ) ifTrue: error. ].
	(aFinancialAsset isKindOf: Portfolio) ifTrue: []"! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:26:08' prior: 50871416 overrides: 50871368!
xxx: aFinancialAsset

	aFinancialAsset assertDoesNotContain: self 
	"(aFinancialAsset isKindOf: ReceptiveAccount) ifTrue: [(self = aFinancialAsset ) ifTrue: error. ].
	(aFinancialAsset isKindOf: Portfolio) ifTrue: []"! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:27:23' prior: 50871382 overrides: 50871368!
xxx: aFinancialAsset

	self assertDoesNotContain: aFinancialAsset

	"(aFinancialAsset isKindOf: ReceptiveAccount) ifTrue: [self assertDoesNotContain: aFinancialAsset ].
	(aFinancialAsset isKindOf: Portfolio) 	ifTrue: [self assertDoesNotContain: aFinancialAsset ni sus hijos .]."! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:28:40' prior: 50871193!
assertDoesNotContain: aFinancialAsset
	(aFinancialAsset isKindOf: ReceptiveAccount ) ifTrue: ["chequear q self no tenga la cuenta ni sus portfolios tengan la cuenta"
	financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset].].
	
	(aFinancialAsset isKindOf: Portfolio ) ifTrue: [
		financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset.
			(aFinancialAsset financialAssets) do: [:hijo | asset assertDoesNotContain: hijo ].
		]]! !
!Portfolio methodsFor: 'accessing' stamp: 'JR 5/25/2021 15:31:35'!
financialAssets

	^financialAssets copy! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:32:01' prior: 50871450!
assertDoesNotContain: aFinancialAsset

	(aFinancialAsset isKindOf: ReceptiveAccount ) ifTrue: [
		"chequear q self no tenga la cuenta ni sus portfolios tengan la cuenta"
	financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset].].
	
	(aFinancialAsset isKindOf: Portfolio ) ifTrue: [
		financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset.
			(aFinancialAsset financialAssets) do: [:hijo | asset assertDoesNotContain: hijo ].]]! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/25/2021 15:32:14'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/25/2021 15:32:16'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 15:33:01' prior: 50871339!
add: aFinancialAsset 
	"para la raiz"
	"comparar aFinancialAsset con self"
	financialAssets do: [:asset | asset xxx: aFinancialAsset].
	financialAssets add: aFinancialAsset .
	aFinancialAsset beAddedTo: self.
	
	"aFinancialAsset assertDoesNotContain: asset"
	
	"(asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ni sus hijos .].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) ifTrue: error. ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]]."! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 15:33:32' prior: 50871493!
add: aFinancialAsset 
	"llegar a la raiz"
	
	"para la raiz"
	"comparar aFinancialAsset con self"
	financialAssets do: [:asset | asset xxx: aFinancialAsset].
	financialAssets add: aFinancialAsset .
	aFinancialAsset beAddedTo: self.
	
	"aFinancialAsset assertDoesNotContain: asset"
	
	"(asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ni sus hijos .].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) ifTrue: error. ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]]."! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 15:35:14' prior: 50871522!
add: aFinancialAsset 
	"llegar a la raiz"
	(parents isEmpty) ifTrue: [
	"para la raiz"
	"comparar aFinancialAsset con self"
	financialAssets do: [:asset | asset xxx: aFinancialAsset].].

	
	
	financialAssets add: aFinancialAsset.
	aFinancialAsset beAddedTo: self.
	
	"aFinancialAsset assertDoesNotContain: asset"
	
	"(asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ni sus hijos .].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) ifTrue: error. ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]]."! !
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 15:38:15' prior: 50871551!
add: aFinancialAsset 
	
	self yyy: aFinancialAsset .
	
	financialAssets add: aFinancialAsset.
	aFinancialAsset beAddedTo: self.
	
	"aFinancialAsset assertDoesNotContain: asset"
	
	"(asset isKindOf: Portfolio) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ]].
							(aFinancialAsset isKindOf: Portfolio) 
								ifTrue: [asset assertDoesNotContain: aFinancialAsset ni sus hijos .].
						
						(asset isKindOf: ReceptiveAccount) ifTrue: [
							(aFinancialAsset isKindOf: ReceptiveAccount) 
								ifTrue: [(asset = aFinancialAsset ) ifTrue: error. ].
							(aFinancialAsset isKindOf: Portfolio) ifTrue: [aFinancialAsset assertDoesNotContain: asset]]]."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:38:32'!
yyy: aFinancialAsset

	"llegar a la raiz"
	(parents isEmpty) ifTrue: [
	"para la raiz"
	"comparar aFinancialAsset con self"
	financialAssets do: [:asset | asset xxx: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre yyy: aFinancialAsset ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:39:40' prior: 50871607!
yyy: aFinancialAsset

	"llegar a la raiz"
	(parents isEmpty) ifTrue: [
	"para la raiz"
	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError ].
	financialAssets do: [:asset | asset xxx: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre yyy: aFinancialAsset ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:39:43' prior: 50871618!
yyy: aFinancialAsset

	"llegar a la raiz"
	(parents isEmpty) ifTrue: [
	"para la raiz"
	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError].
	financialAssets do: [:asset | asset xxx: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre yyy: aFinancialAsset ]].! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:40:31' prior: 50871026!
assertDoesNotContain: aFinancialAsset
	
	(self = aFinancialAsset) ifTrue: [self error: 	Portfolio portfoliosLoopError].
	aFinancialAsset assertDoesNotContain: self.! !

!methodRemoval: Portfolio class #duplicatedAccountError stamp: 'JR 5/25/2021 15:40:42'!
duplicatedAccountError

	^'The account is already in this portfolio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:41:06' prior: 50870603!
test09

	|aPortfolio1 anAccount1 aPortfolio2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: anAccount1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:41:13' prior: 50870797!
test10

	|aPortfolio1 anAccount1 aPortfolio2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !

!testRun: #PortfolioTest #test02 stamp: 'JR 5/25/2021 15:42:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:42:35' prior: 50870223!
test03

	|aPortfolio anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	"aPortfolio add: anAccount2."
	
	self assert: aPortfolio balance equals: (anAccount1 balance + anAccount2 balance)! !

!testRun: #PortfolioTest #test03 stamp: 'JR 5/25/2021 15:42:37'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/25/2021 15:42:37'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:42:44' prior: 50871702!
test03

	|aPortfolio anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: aPortfolio balance equals: (anAccount1 balance + anAccount2 balance)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:46:59' prior: 50871438 overrides: 50871368!
xxx: aFinancialAsset

	aFinancialAsset assertDoesNotContainPortfolio: self 
	
		"self assertDoesNotContain: aFinancialAsset"
	

	"(aFinancialAsset isKindOf: ReceptiveAccount) ifTrue: [self assertDoesNotContain: aFinancialAsset ].
	(aFinancialAsset isKindOf: Portfolio) 	ifTrue: [self assertDoesNotContain: aFinancialAsset ni sus hijos .]."! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:47:09' prior: 50871427 overrides: 50871368!
xxx: aFinancialAsset

	aFinancialAsset assertDoesNotContainAccount: self 
	"(aFinancialAsset isKindOf: ReceptiveAccount) ifTrue: [(self = aFinancialAsset ) ifTrue: error. ].
	(aFinancialAsset isKindOf: Portfolio) ifTrue: []"! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:47:26'!
assertDoesNotContainAccount: aFinancialAsset

	(aFinancialAsset isKindOf: ReceptiveAccount ) ifTrue: [
		"chequear q self no tenga la cuenta ni sus portfolios tengan la cuenta"
	financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset].].
	
	(aFinancialAsset isKindOf: Portfolio ) ifTrue: [
		financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset.
			(aFinancialAsset financialAssets) do: [:hijo | asset assertDoesNotContain: hijo ].]]! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:47:39'!
assertDoesNotContainPortfolio: aFinancialAsset
! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:47:48' prior: 50871785!
assertDoesNotContainPortfolio: aPortfolio
! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:47:54' prior: 50871768!
assertDoesNotContainAccount: anAccount! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:48:07'!
sertDoesNotContainAccount: anAccount! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:48:18'!
sertDoesNotContainPortfolio: aPortfolio! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:48:55'!
assertDoesNotContainAccount: anAccount! !

!methodRemoval: ReceptiveAccount #sertDoesNotContainAccount: stamp: 'JR 5/25/2021 15:48:56'!
sertDoesNotContainAccount: anAccount!
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:49:02'!
assertDoesNotContainPortfolio: aPortfolio! !

!methodRemoval: ReceptiveAccount #sertDoesNotContainPortfolio: stamp: 'JR 5/25/2021 15:49:02'!
sertDoesNotContainPortfolio: aPortfolio!
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:49:31' prior: 50871807!
assertDoesNotContainAccount: anAccount

		(self = anAccount) ifTrue: [self error: 	Portfolio portfoliosLoopError].! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:49:57' prior: 50871815!
assertDoesNotContainPortfolio: aPortfolio

	aPortfolio assertDoesNotContainAccount: self! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:50:35' prior: 50871795!
assertDoesNotContainAccount: anAccount

	financialAssets do: [:asset | asset assertDoesNotContainAccount: anAccount ]! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:52:08' prior: 50871790!
assertDoesNotContainPortfolio: aPortfolio

	financialAssets do: [:asset | asset assertDoesNotContainPortfolio: aPortfolio.
			(aPortfolio financialAssets) do: [:hijo | asset assertDoesNotContain: hijo ]]! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 15:52:33' prior: 50871844!
assertDoesNotContainPortfolio: aPortfolio

	financialAssets do: [:asset | asset assertDoesNotContainPortfolio: aPortfolio.
			(aPortfolio financialAssets) do: [:hijo | asset xxx: hijo ]]! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/25/2021 15:53:04'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/25/2021 15:53:05'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/25/2021 15:53:06'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/25/2021 15:53:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/25/2021 15:53:09'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/25/2021 15:53:11'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 15:53:12'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/25/2021 15:53:12'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/25/2021 15:53:13'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/25/2021 15:53:15'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/25/2021 15:53:16'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:53:43'!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	
	self 
		should: [aPortfolio3 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio duplicatedAccountError equals: anError messageText.
			self assert: aPortfolio3 balance equals: aPortfolio1 balance]	! !

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 15:53:45'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 15:53:45'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:54:00' prior: 50871888!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	
	self 
		should: [aPortfolio3 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio3 balance equals: aPortfolio1 balance]	! !

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 15:54:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 15:57:16'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 15:57:53' prior: 50871916!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 aPortfolio4 aPortfolio5|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	
	self 
		should: [aPortfolio3 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio3 balance equals: aPortfolio1 balance]	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:01:09' prior: 50871944!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 aPortfolio4 aPortfolio5|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio5 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
		
	aPortfolio4 := Portfolio new.
	aPortfolio4 add: aPortfolio5.
	
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio3.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: aPortfolio3.
	aPortfolio2 add: aPortfolio5.
	
	
	
	self 
		should: [aPortfolio3 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio3 balance equals: aPortfolio1 balance]	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:02:41' prior: 50871968!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 aPortfolio4 aPortfolio5|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio5 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
		
	aPortfolio4 := Portfolio new.
	aPortfolio4 add: aPortfolio5.
	
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio3.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: aPortfolio3.
	aPortfolio2 add: aPortfolio5.
	
	aPortfolio1 add: aPortfolio4.
	
	self assert: aPortfolio1 balance equals: aPortfolio4 balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:02:56' prior: 50871996!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 aPortfolio4 aPortfolio5|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio5 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
		
	aPortfolio4 := Portfolio new.
	aPortfolio4 add: aPortfolio5.
	
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio3.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: aPortfolio3.
	aPortfolio2 add: aPortfolio5.
	
	aPortfolio1 add: aPortfolio4.
	
	self assert: aPortfolio1 balance equals: aPortfolio3 balance! !

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:02:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:04:49' prior: 50872019!
test12

	|aPortfolio1 aPortfolio2 |
	
	aPortfolio2 := Portfolio new.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio2.
	
	aPortfolio2 add: aPortfolio2 .! !

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:04:50'!
PASSED!

|aPortfolio1 aPortfolio2 |
	
	aPortfolio2 := Portfolio new.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio2.
	
	aPortfolio2 add: aPortfolio2 .!

|aPortfolio1 aPortfolio2 |
	
	aPortfolio2 := Portfolio new.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio2.
	
	aPortfolio2 add: aPortfolio2 .!

|aPortfolio1 aPortfolio2 |
	
	aPortfolio2 := Portfolio new.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio2.
	
	aPortfolio2 add: aPortfolio2 .!

|aPortfolio1 aPortfolio2 |
	
	aPortfolio2 := Portfolio new.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio2.
	
	aPortfolio2 add: aPortfolio2 .!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:05:13' prior: 50872044!
test12

	|aPortfolio1 aPortfolio2 |
	
	aPortfolio2 := Portfolio new.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio2.
	
	aPortfolio2 add: aPortfolio2 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:08:05' prior: 50872075!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 aPortfolio4 aPortfolio5|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio5 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
		
	aPortfolio4 := Portfolio new.
	aPortfolio4 add: aPortfolio5.
	
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio3.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: aPortfolio3.
	aPortfolio2 add: aPortfolio5.
	
	aPortfolio5 add: aPortfolio3.
	
	self 
		should: [aPortfolio1 add: aPortfolio4] 
		raise:  Error - MessageNotUnderstood
		withMessage: []
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:08:37' prior: 50872084!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 aPortfolio4 aPortfolio5|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio5 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
		
	aPortfolio4 := Portfolio new.
	aPortfolio4 add: aPortfolio5.
	
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio3.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: aPortfolio3.
	aPortfolio2 add: aPortfolio5.
	
	aPortfolio5 add: aPortfolio3.
	
	self 
		should: [aPortfolio1 add: aPortfolio4] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.]	! !

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:08:39'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:08:39'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:11:44' prior: 50872108!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 aPortfolio4 aPortfolio5|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
	
	aPortfolio5 := Portfolio new.	
	aPortfolio5 add: aPortfolio3.
		
	aPortfolio4 := Portfolio new.
	aPortfolio4 add: aPortfolio5.
	
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio3.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: aPortfolio3.
	
	self 
		should: [aPortfolio1 add: aPortfolio4] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.]	! !

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:11:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/25/2021 16:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/25/2021 16:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/25/2021 16:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/25/2021 16:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/25/2021 16:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 5/25/2021 16:12:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 5/25/2021 16:12:04'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:12:07'!
PASSED!

!methodRemoval: Portfolio #assertDoesNotContain: stamp: 'JR 5/25/2021 16:12:19'!
assertDoesNotContain: aFinancialAsset

	(aFinancialAsset isKindOf: ReceptiveAccount ) ifTrue: [
		"chequear q self no tenga la cuenta ni sus portfolios tengan la cuenta"
	financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset].].
	
	(aFinancialAsset isKindOf: Portfolio ) ifTrue: [
		financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset.
			(aFinancialAsset financialAssets) do: [:hijo | asset assertDoesNotContain: hijo ].]]!

!methodRemoval: ReceptiveAccount #assertDoesNotContain: stamp: 'JR 5/25/2021 16:12:23'!
assertDoesNotContain: aFinancialAsset
	
	(self = aFinancialAsset) ifTrue: [self error: 	Portfolio portfoliosLoopError].
	aFinancialAsset assertDoesNotContain: self.!

!testRun: #PortfolioTest #test01 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:12:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/25/2021 16:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/25/2021 16:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/25/2021 16:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/25/2021 16:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/25/2021 16:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 5/25/2021 16:12:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 5/25/2021 16:12:29'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'JR 5/25/2021 16:14:02' prior: 50871581!
add: aFinancialAsset 
	
	self yyy: aFinancialAsset .
	
	financialAssets add: aFinancialAsset.
	aFinancialAsset beAddedTo: self.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:14:32' prior: 50871631!
yyy: aFinancialAsset

	(parents isEmpty) ifTrue: [
	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError].
	financialAssets do: [:asset | asset xxx: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre yyy: aFinancialAsset ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:14:48' prior: 50872309!
yyy: aFinancialAsset

	(parents isEmpty) ifTrue: [
	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError].
	financialAssets do: [:asset | asset xxx: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre yyy: aFinancialAsset ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:15:05'!
assertCanBeAdded: aFinancialAsset

	(parents isEmpty) ifTrue: [
	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError].
	financialAssets do: [:asset | asset xxx: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre yyy: aFinancialAsset ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:15:05' prior: 50872320!
yyy: aFinancialAsset

	(parents isEmpty) ifTrue: [
	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError].
	financialAssets do: [:asset | asset xxx: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre assertCanBeAdded: aFinancialAsset ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:15:05' prior: 50872301!
add: aFinancialAsset 
	
	self assertCanBeAdded: aFinancialAsset .
	
	financialAssets add: aFinancialAsset.
	aFinancialAsset beAddedTo: self.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:15:05' prior: 50872331!
assertCanBeAdded: aFinancialAsset

	(parents isEmpty) ifTrue: [
	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError].
	financialAssets do: [:asset | asset xxx: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre assertCanBeAdded: aFinancialAsset ]].! !

!methodRemoval: Portfolio #yyy: stamp: 'JR 5/25/2021 16:15:05'!
yyy: aFinancialAsset

	(parents isEmpty) ifTrue: [
	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError].
	financialAssets do: [:asset | asset xxx: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre assertCanBeAdded: aFinancialAsset ]].!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:15:54' prior: 50871743 overrides: 50871368!
xxx: aFinancialAsset

	aFinancialAsset assertDoesNotContainPortfolio: self 
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:16:14'!
assertDoesNotContain: aFinancialAsset

	aFinancialAsset assertDoesNotContainAccount: self 
	"(aFinancialAsset isKindOf: ReceptiveAccount) ifTrue: [(self = aFinancialAsset ) ifTrue: error. ].
	(aFinancialAsset isKindOf: Portfolio) ifTrue: []"! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:16:14'!
assertDoesNotContain: aFinancialAsset

	aFinancialAsset assertDoesNotContainPortfolio: self 
	! !
!FinancialAsset methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:16:14'!
assertDoesNotContain: aFinancialAsset

	self subclassResponsibility ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:16:14' prior: 50872363!
assertCanBeAdded: aFinancialAsset

	(parents isEmpty) ifTrue: [
	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError].
	financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre assertCanBeAdded: aFinancialAsset ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:16:14' prior: 50871854!
assertDoesNotContainPortfolio: aPortfolio

	financialAssets do: [:asset | asset assertDoesNotContainPortfolio: aPortfolio.
			(aPortfolio financialAssets) do: [:hijo | asset assertDoesNotContain: hijo ]]! !

!methodRemoval: ReceptiveAccount #xxx: stamp: 'JR 5/25/2021 16:16:14'!
xxx: aFinancialAsset

	aFinancialAsset assertDoesNotContainAccount: self 
	"(aFinancialAsset isKindOf: ReceptiveAccount) ifTrue: [(self = aFinancialAsset ) ifTrue: error. ].
	(aFinancialAsset isKindOf: Portfolio) ifTrue: []"!

!methodRemoval: Portfolio #xxx: stamp: 'JR 5/25/2021 16:16:14'!
xxx: aFinancialAsset

	aFinancialAsset assertDoesNotContainPortfolio: self 
	!

!methodRemoval: FinancialAsset #xxx: stamp: 'JR 5/25/2021 16:16:14'!
xxx: aFinancialAsset

	self subclassResponsibility !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 16:16:58' prior: 50872415!
assertCanBeAdded: aFinancialAsset

	(parents isEmpty) 
	ifTrue: [	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError].
		    financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre assertCanBeAdded: aFinancialAsset ]].! !
!Portfolio methodsFor: 'assertions' stamp: 'JR 5/25/2021 16:17:24' prior: 50872455!
assertCanBeAdded: aFinancialAsset

	(parents isEmpty) 
	ifTrue: [	(aFinancialAsset  = self) ifTrue: [self error: Portfolio portfoliosLoopError].
		    financialAssets do: [:asset | asset assertDoesNotContain: aFinancialAsset].]
	ifFalse: [parents do: [:padre | padre assertCanBeAdded: aFinancialAsset]].! !
!ReceptiveAccount methodsFor: 'assertions' stamp: 'JR 5/25/2021 16:17:51' prior: 50872392 overrides: 50872409!
assertDoesNotContain: aFinancialAsset

	aFinancialAsset assertDoesNotContainAccount: self ! !
!FinancialAsset methodsFor: 'assertions' stamp: 'JR 5/25/2021 16:18:37'!
assertDoesNotContainAccount: anAccount! !
!FinancialAsset methodsFor: 'assertions' stamp: 'JR 5/25/2021 16:18:45'!
assertDoesNotContainPortfolio: aPortfolio! !
!FinancialAsset methodsFor: 'assertions' stamp: 'JR 5/25/2021 16:18:53' prior: 50872488!
assertDoesNotContainAccount: anAccount

	self subclassResponsibility ! !
!FinancialAsset methodsFor: 'assertions' stamp: 'JR 5/25/2021 16:18:59' prior: 50872492!
assertDoesNotContainPortfolio: aPortfolio

	self subclassResponsibility ! !
!FinancialAsset methodsFor: 'balance' stamp: 'JR 5/25/2021 16:19:40'!
balance

	self subclassResponsibility ! !
!FinancialAsset methodsFor: 'transactions' stamp: 'JR 5/25/2021 16:20:05'!
transactions

	self subclassResponsibility ! !
!FinancialAsset methodsFor: 'testing' stamp: 'JR 5/25/2021 16:20:23'!
hasRegistered: aTransactions

	self subclassResponsibility ! !
!FinancialAsset methodsFor: 'initialization' stamp: 'JR 5/25/2021 16:21:17' overrides: 16896425!
initialize

	self subclassResponsibility ! !
!Portfolio methodsFor: 'transactions' stamp: 'JR 5/25/2021 16:27:11' prior: 50870195 overrides: 50872512!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	financialAssets do: [:asset | allTransactions , asset transactions].
	
	^allTransactions  ! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:27:14'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:27:14'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:27:14'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'JR 5/25/2021 16:27:39' prior: 50872526 overrides: 50872512!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	financialAssets do: [:asset | (allTransactions) , (asset transactions)].
	
	^allTransactions  ! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/25/2021 16:27:41'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/25/2021 16:27:41'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/25/2021 16:27:41'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/25/2021 16:27:41'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/25/2021 16:27:41'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/25/2021 16:27:41'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:27:41'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/25/2021 16:27:41'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/25/2021 16:27:41'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/25/2021 16:27:41'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/25/2021 16:27:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:27:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:27:42'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'JR 5/25/2021 16:27:47'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/25/2021 16:27:50'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/25/2021 16:27:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/25/2021 16:27:53'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:27:54'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:27:54'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'JR 5/25/2021 16:28:16' prior: 50872565 overrides: 50872512!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	financialAssets do: [:asset | (allTransactions , asset transactions) asOrderedCollection ].
	
	^allTransactions  ! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:28:18'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:28:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:28:18'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'JR 5/25/2021 16:28:40' prior: 50872619 overrides: 50872512!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	financialAssets do: [:asset | (allTransactions , (asset transactions)) asOrderedCollection ].
	
	^allTransactions  ! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:28:43'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:28:43'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:28:43'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:29:32' prior: 50870343!
test07

	|aPortfolio anAccount1 anAccount2 res|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	res := aPortfolio transactions.
	
	self assert: aPortfolio transactions equals: (anAccount1 transactions , anAccount2 transactions) asOrderedCollection.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:29:37' prior: 50872699!
test07

	|aPortfolio anAccount1 anAccount2 res|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	res := aPortfolio transactions.
	
	self assert: res equals: (anAccount1 transactions , anAccount2 transactions) asOrderedCollection.! !
!Portfolio methodsFor: 'transactions' stamp: 'JR 5/25/2021 16:30:44' prior: 50872659 overrides: 50872512!
transactions
	
	|allTransactions|
	
	allTransactions := OrderedCollection new	.
	
	financialAssets do: [:asset | allTransactions addAll: asset transactions].
	
	^allTransactions  ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:31:07' prior: 50872719!
test07

	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: aPortfolio transactions equals: (anAccount1 transactions , anAccount2 transactions) asOrderedCollection.! !

!testRun: #PortfolioTest #test01 stamp: 'JR 5/25/2021 16:31:08'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'JR 5/25/2021 16:31:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'JR 5/25/2021 16:31:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'JR 5/25/2021 16:31:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'JR 5/25/2021 16:31:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'JR 5/25/2021 16:31:08'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'JR 5/25/2021 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'JR 5/25/2021 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'JR 5/25/2021 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'JR 5/25/2021 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'JR 5/25/2021 16:31:09'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'JR 5/25/2021 16:31:09'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:32:25'!
test01PortfolioHasZeroAsBalanceWhenCreated 

	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	self assert: aPortfolio balance equals: 0! !

!methodRemoval: PortfolioTest #test01 stamp: 'JR 5/25/2021 16:32:29'!
test01

	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	self assert: aPortfolio balance equals: 0!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'JR 5/25/2021 16:32:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:33:21'!
test02AddingAccountModifiesBalance

	|aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: anAccount balance! !

!methodRemoval: PortfolioTest #test02 stamp: 'JR 5/25/2021 16:33:21'!
test02

	|aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: anAccount balance!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:33:53'!
test03AddingPortfolioModifiesBalance

	|aPortfolio anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: aPortfolio balance equals: (anAccount1 balance + anAccount2 balance)! !

!methodRemoval: PortfolioTest #test03 stamp: 'JR 5/25/2021 16:33:53'!
test03

	|aPortfolio anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: aPortfolio balance equals: (anAccount1 balance + anAccount2 balance)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:35:09'!
test03BalanceAfterAddingMultipleAccountsIsSumOfTheirBalances

	|aPortfolio anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: aPortfolio balance equals: (anAccount1 balance + anAccount2 balance)! !

!methodRemoval: PortfolioTest #test03AddingPortfolioModifiesBalance stamp: 'JR 5/25/2021 16:35:09'!
test03AddingPortfolioModifiesBalance

	|aPortfolio anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: aPortfolio balance equals: (anAccount1 balance + anAccount2 balance)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:35:25'!
test04AddingPortfolioModifiesBalance

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 add: aPortfolio1.
	
	self assert: aPortfolio2 balance equals: (aPortfolio1 balance)! !

!methodRemoval: PortfolioTest #test04 stamp: 'JR 5/25/2021 16:35:25'!
test04

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 add: aPortfolio1.
	
	self assert: aPortfolio2 balance equals: (aPortfolio1 balance)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:36:13'!
test05APortfolioKnowsItsAccountsTransactions

	|aPortfolio anAccount1 anAccount2 aTransaction1 aTransaction2|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction1 := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	aTransaction2 := Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: (aPortfolio hasRegistered: aTransaction1).
	self assert: (aPortfolio hasRegistered: aTransaction2).! !

!methodRemoval: PortfolioTest #test05 stamp: 'JR 5/25/2021 16:36:13'!
test05

	|aPortfolio anAccount1 anAccount2 aTransaction1 aTransaction2|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction1 := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	aTransaction2 := Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: (aPortfolio hasRegistered: aTransaction1).
	self assert: (aPortfolio hasRegistered: aTransaction2).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:36:36'!
test05APortfolioKnowsItsAccountsRegisteredTransactions

	|aPortfolio anAccount1 anAccount2 aTransaction1 aTransaction2|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction1 := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	aTransaction2 := Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: (aPortfolio hasRegistered: aTransaction1).
	self assert: (aPortfolio hasRegistered: aTransaction2).! !

!methodRemoval: PortfolioTest #test05APortfolioKnowsItsAccountsTransactions stamp: 'JR 5/25/2021 16:36:37'!
test05APortfolioKnowsItsAccountsTransactions

	|aPortfolio anAccount1 anAccount2 aTransaction1 aTransaction2|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction1 := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	aTransaction2 := Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: (aPortfolio hasRegistered: aTransaction1).
	self assert: (aPortfolio hasRegistered: aTransaction2).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:37:00'!
test06APortfolioKnowsItsPortfoliosRegisteredTransactions

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 aTransaction|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 add: aPortfolio1.
	
	self assert: (aPortfolio2 hasRegistered: aTransaction) ! !

!methodRemoval: PortfolioTest #test06 stamp: 'JR 5/25/2021 16:37:00'!
test06

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 aTransaction|
	
	anAccount1 := ReceptiveAccount new.
	aTransaction := Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 add: aPortfolio1.
	
	self assert: (aPortfolio2 hasRegistered: aTransaction) !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:37:35'!
test07APortfolioKnowsItsAccountTransactions

	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: aPortfolio transactions equals: (anAccount1 transactions , anAccount2 transactions) asOrderedCollection.! !

!methodRemoval: PortfolioTest #test07 stamp: 'JR 5/25/2021 16:37:35'!
test07

	|aPortfolio anAccount1 anAccount2|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: anAccount1.
	aPortfolio add: anAccount2.
	
	self assert: aPortfolio transactions equals: (anAccount1 transactions , anAccount2 transactions) asOrderedCollection.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:37:54'!
test08APortfolioKnowsItsPortfoliosTransactions

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 add: aPortfolio1.
	
	self assert: aPortfolio2 transactions equals: aPortfolio1 transactions.! !

!methodRemoval: PortfolioTest #test08 stamp: 'JR 5/25/2021 16:37:54'!
test08

	|aPortfolio1 aPortfolio2 anAccount1 anAccount2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	anAccount2 := ReceptiveAccount new.
	Deposit register: 10 on: anAccount2.
	Withdraw register: 5 on: anAccount2.
	
	aPortfolio1 := Portfolio new.
	
	aPortfolio1 add: anAccount1.
	aPortfolio1 add: anAccount2.
	
	aPortfolio2 := Portfolio new.
	
	aPortfolio2 add: aPortfolio1.
	
	self assert: aPortfolio2 transactions equals: aPortfolio1 transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:38:24'!
test09AccountsCanNotBeDuplicatedInPortfolio

	|aPortfolio1 anAccount1 aPortfolio2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: anAccount1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	! !

!methodRemoval: PortfolioTest #test09 stamp: 'JR 5/25/2021 16:38:24'!
test09

	|aPortfolio1 anAccount1 aPortfolio2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: anAccount1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	!

!methodRemoval: PortfolioTest #test10 stamp: 'JR 5/25/2021 16:39:46'!
test10

	|aPortfolio1 anAccount1 aPortfolio2 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: anAccount1.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio1 balance equals: anAccount1 balance]	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:40:29'!
test10PortfoliosCanNotFormLoop

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	aPortfolio2 add: aPortfolio3.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio1 balance equals: 0]	! !

!methodRemoval: PortfolioTest #test11 stamp: 'JR 5/25/2021 16:40:29'!
test11

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 |
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: anAccount1.
		
	aPortfolio1 := Portfolio new.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: aPortfolio1.
	aPortfolio2 add: aPortfolio3.
	
	self 
		should: [ aPortfolio1 add: aPortfolio2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.
			self assert: aPortfolio1 balance equals: 0]	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'JR 5/25/2021 16:41:58'!
test11PortfoliosCanNotFormLoopWithTheirChilds

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 aPortfolio4 aPortfolio5|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
	
	aPortfolio5 := Portfolio new.	
	aPortfolio5 add: aPortfolio3.
		
	aPortfolio4 := Portfolio new.
	aPortfolio4 add: aPortfolio5.
	
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio3.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: aPortfolio3.
	
	self 
		should: [aPortfolio1 add: aPortfolio4] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.]	! !

!methodRemoval: PortfolioTest #test12 stamp: 'JR 5/25/2021 16:41:59'!
test12

	|aPortfolio1 anAccount1 aPortfolio2 aPortfolio3 aPortfolio4 aPortfolio5|
	
	anAccount1 := ReceptiveAccount new.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 50 on: anAccount1.
	
	aPortfolio3 := Portfolio new.
	aPortfolio3 add: anAccount1.
	
	aPortfolio5 := Portfolio new.	
	aPortfolio5 add: aPortfolio3.
		
	aPortfolio4 := Portfolio new.
	aPortfolio4 add: aPortfolio5.
	
	aPortfolio1 := Portfolio new.
	aPortfolio1 add: aPortfolio3.
	
	aPortfolio2 := Portfolio new.
	aPortfolio2 add: aPortfolio3.
	
	self 
		should: [aPortfolio1 add: aPortfolio4] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: Portfolio portfoliosLoopError equals: anError messageText.]	!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/25/2021 16:42:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/25/2021 16:42:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/25/2021 16:42:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/25/2021 16:42:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/25/2021 16:42:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 5/25/2021 16:42:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 5/25/2021 16:42:05'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountModifiesBalance stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceAfterAddingMultipleAccountsIsSumOfTheirBalances stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test04AddingPortfolioModifiesBalance stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioKnowsItsAccountsRegisteredTransactions stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioKnowsItsPortfoliosRegisteredTransactions stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioKnowsItsAccountTransactions stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test08APortfolioKnowsItsPortfoliosTransactions stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test09AccountsCanNotBeDuplicatedInPortfolio stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfoliosCanNotFormLoop stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfoliosCanNotFormLoopWithTheirChilds stamp: 'JR 5/25/2021 16:42:08'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountModifiesBalance stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceAfterAddingMultipleAccountsIsSumOfTheirBalances stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #PortfolioTest #test04AddingPortfolioModifiesBalance stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioKnowsItsAccountsRegisteredTransactions stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioKnowsItsPortfoliosRegisteredTransactions stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioKnowsItsAccountTransactions stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #PortfolioTest #test08APortfolioKnowsItsPortfoliosTransactions stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #PortfolioTest #test09AccountsCanNotBeDuplicatedInPortfolio stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfoliosCanNotFormLoop stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfoliosCanNotFormLoopWithTheirChilds stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 5/25/2021 16:50:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 5/25/2021 16:50:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 5/25/2021 16:50:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 5/25/2021 16:50:57'!
PASSED!

----QUIT----(25 May 2021 16:52:00) CuisUniversity-4532.image priorSource: 17261747!

----STARTUP---- (25 May 2021 17:24:41) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


----End fileIn of C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\inge1\17-Portfolio 1\Portfolio-Ejercicio.st----!

----QUIT----(25 May 2021 17:25:04) CuisUniversity-4532.image priorSource: 17336969!