----STARTUP---- (31 May 2021 00:04:07) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


!classRemoval: #Transfer stamp: 'JR 5/31/2021 00:04:23'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'JR 5/31/2021 00:04:23'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferWithdraw stamp: 'JR 5/31/2021 00:04:24'!
TransferPata subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'JR 5/31/2021 00:04:24'!
TransferPata subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferPata stamp: 'JR 5/31/2021 00:04:24'!
AccountTransaction subclass: #TransferPata
	instanceVariableNames: 'value transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'JR 5/31/2021 00:04:25'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'JR 5/31/2021 00:04:25'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'JR 5/31/2021 00:04:25'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'JR 5/31/2021 00:04:26'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'JR 5/31/2021 00:04:26'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTest stamp: 'JR 5/31/2021 00:04:27'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'JR 5/31/2021 00:04:27'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'JR 5/31/2021 00:04:28'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\Portfolio-2.st----!

!testRun: #TransferTest #test01 stamp: 'JR 5/31/2021 00:04:41'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'JR 5/31/2021 00:04:41'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'JR 5/31/2021 00:04:41'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'JR 5/31/2021 00:04:41'!
PASSED!

----QUIT----(31 May 2021 00:04:54) CuisUniversity-4532.image priorSource: 17535549!

----STARTUP---- (31 May 2021 21:38:02) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


AccountTransaction subclass: #TransferPata
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferPata category: 'Portfolio-Solucion' stamp: 'JR 5/31/2021 21:45:56'!
AccountTransaction subclass: #TransferPata
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01 stamp: 'JR 5/31/2021 21:46:00'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'JR 5/31/2021 21:46:00'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'JR 5/31/2021 21:46:00'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'JR 5/31/2021 21:46:00'!
PASSED!

----QUIT----(31 May 2021 21:55:54) CuisUniversity-4532.image priorSource: 17568354!

----STARTUP---- (3 June 2021 11:09:39) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportsTest category: 'Portfolio-Solucion' stamp: 'JR 6/3/2021 11:19:29'!
TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportsTest methodsFor: 'no messages' stamp: 'JR 6/3/2021 11:21:44'!
test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:21:49' prior: 50880709!
test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero

	! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:24:03' prior: 50880714!
test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero

	|anEmptyAccount expectedSummary|
	
	anEmptyAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	expectedSummary add: 'Balance = 0'.
	
	self assert: expectedSummary equals: anEmptyAccount accountSummary.! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:24:06'!
ERROR!

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:24:06'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:24:25'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:25:04' prior: 50880738!
accountSummary
	
	^(OrderedCollection new) add: 'Balance = 0'! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:25:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:26:18' prior: 50880743!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	summary add: 'Balance = 0'.
	
	^summary! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:26:22'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:27:49'!
test02SummaryShouldReflectDepositOnAccount

	|anAccount expectedSummary|
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	expectedSummary add: 'Balance = 0'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:28:45' prior: 50880762!
test02SummaryShouldReflectDepositOnAccount

	|anAccount expectedSummary|
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Deposit register: 100 on: anAccount.
	
	expectedSummary .
	expectedSummary add: 'Balance = 100'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:29:39' prior: 50880774!
test02SummaryShouldReflectDepositOnAccount

	|anAccount expectedSummary|
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Deposit register: 100 on: anAccount.
	
	expectedSummary add: 'Deposito por 100'.
	expectedSummary add: 'Balance = 100'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:29:44'!
FAILURE!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:29:45'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:31:14' prior: 50880752!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions isEmpty ifTrue: [summary add: 'Balance = 0'.]
	ifFalse: [summary add: 'Deposito por 100'.
		summary add: 'Balance = 100'.].
	
	^summary! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:31:19'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:31:19'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:34:43'!
test03SummaryShouldReflectWithdrawOnAccount

	|anAccount expectedSummary|
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Withdraw register: 50 on: anAccount.
	
	expectedSummary add: 'Extraccion por 50'.
	expectedSummary add: 'Balance = -50'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:34:44'!
FAILURE!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:34:44'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:37:04' prior: 50880809!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions isEmpty ifTrue: [summary add: 'Balance = 0'.]
	ifFalse: [(transactions first isKindOf: Deposit) 
		ifTrue: [	summary add: 'Deposito por 100'.
		summary add: 'Balance = 100'.]
		ifFalse: [summary add: 'Extraccion por 50'.
		summary add: 'Balance = -50'.]].
	
	^summary! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:37:09'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:37:09'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:37:09'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:37:32'!
test03SummaryShouldReflectTransferFromAccount

	|anAccount expectedSummary|
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Withdraw register: 50 on: anAccount.
	
	expectedSummary add: 'Extraccion por 50'.
	expectedSummary add: 'Balance = -50'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:37:38'!
test04SummaryShouldReflectTransferFromAccount

	|anAccount expectedSummary|
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Withdraw register: 50 on: anAccount.
	
	expectedSummary add: 'Extraccion por 50'.
	expectedSummary add: 'Balance = -50'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !

!methodRemoval: ReportsTest #test03SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:37:38'!
test03SummaryShouldReflectTransferFromAccount

	|anAccount expectedSummary|
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Withdraw register: 50 on: anAccount.
	
	expectedSummary add: 'Extraccion por 50'.
	expectedSummary add: 'Balance = -50'.
	
	self assert: expectedSummary equals: anAccount accountSummary.!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:39:13' prior: 50880885!
test04SummaryShouldReflectTransferFromAccount

	|originAccount destinyAccount expectedSummary|
	
	originAccount := ReceptiveAccount new. 
	destinyAccount := ReceptiveAccount new.
	expectedSummary := OrderedCollection new.
	
	Transfer register: 20 from: originAccount to: destinyAccount.
	
	expectedSummary add: 'Salida por transferencia de 20'.
	expectedSummary add: 'Balance = -20'.
	
	self assert: expectedSummary equals: originAccount accountSummary.! !

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:39:17'!
FAILURE!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:39:17'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:42:10' prior: 50880847!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions isEmpty ifTrue: [summary add: 'Balance = 0'.]
	ifFalse: [(transactions first isKindOf: Deposit) 
			ifTrue: [	summary add: 'Deposito por 100'.
				summary add: 'Balance = 100'.].
		(transactions first isKindOf: Withdraw)
			ifTrue: [summary add: 'Extraccion por 50'.
				summary add: 'Balance = -50'.].
		(transactions first isKindOf: TransferWithdraw)
			ifTrue: [summary add: 'Salida por tranferencia de 20'.
				summary add: 'Balance = -20'.]].
	
	^summary! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:42:14'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:42:14'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:42:14'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:42:14'!
FAILURE!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:42:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:42:32' prior: 50880939!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions isEmpty ifTrue: [summary add: 'Balance = 0'.]
	ifFalse: [(transactions first isKindOf: Deposit) 
			ifTrue: [	summary add: 'Deposito por 100'.
				summary add: 'Balance = 100'.].
		(transactions first isKindOf: Withdraw)
			ifTrue: [summary add: 'Extraccion por 50'.
				summary add: 'Balance = -50'.].
		(transactions first isKindOf: TransferWithdraw)
			ifTrue: [summary add: 'Salida por transferencia de 20'.
				summary add: 'Balance = -20'.]].
	
	^summary! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:42:37'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:42:37'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:42:37'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:42:37'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:42:45'!
test05SummaryShouldReflectTransferToAccount

	|originAccount destinyAccount expectedSummary|
	
	originAccount := ReceptiveAccount new. 
	destinyAccount := ReceptiveAccount new.
	expectedSummary := OrderedCollection new.
	
	Transfer register: 20 from: originAccount to: destinyAccount.
	
	expectedSummary add: 'Salida por transferencia de 20'.
	expectedSummary add: 'Balance = -20'.
	
	self assert: expectedSummary equals: originAccount accountSummary.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:43:16' prior: 50881011!
test05SummaryShouldReflectTransferToAccount

	|originAccount destinyAccount expectedSummary|
	
	originAccount := ReceptiveAccount new. 
	destinyAccount := ReceptiveAccount new.
	expectedSummary := OrderedCollection new.
	
	Transfer register: 30 from: originAccount to: destinyAccount.
	
	expectedSummary add: 'Entrada por transferencia de 30'.
	expectedSummary add: 'Balance = 30'.
	
	self assert: expectedSummary equals: destinyAccount accountSummary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:43:52' prior: 50880977!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions isEmpty ifTrue: [summary add: 'Balance = 0'.]
	ifFalse: [(transactions first isKindOf: Deposit) 
			ifTrue: [	summary add: 'Deposito por 100'.
				summary add: 'Balance = 100'.].
		(transactions first isKindOf: Withdraw)
			ifTrue: [summary add: 'Extraccion por 50'.
				summary add: 'Balance = -50'.].
		(transactions first isKindOf: TransferWithdraw)
			ifTrue: [summary add: 'Salida por transferencia de 20'.
				summary add: 'Balance = -20'.].
		(transactions first isKindOf: TransferDeposit)
			ifTrue: [summary add: 'Entrada por transferencia de 30'.
				summary add: 'Balance = 30'.]].
	
	^summary! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:45:11'!
test06SummaryShouldReflectMultipleDepositsOnAccount

	|anAccount expectedSummary|
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Deposit register: 100 on: anAccount.
	Deposit register: 100 on: anAccount.
	
	expectedSummary add: 'Deposito por 200'.
	expectedSummary add: 'Balance = 200'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:45:15'!
FAILURE!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:45:15'!
FAILURE!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:45:56' prior: 50881071!
test06SummaryShouldReflectMultipleDepositsOnAccount

	|anAccount expectedSummary|
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Deposit register: 100 on: anAccount.
	Deposit register: 100 on: anAccount.
	
	expectedSummary add: 'Deposito por 100'.
	expectedSummary add: 'Deposito por 100'.
	expectedSummary add: 'Balance = 200'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:46:03'!
FAILURE!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:46:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:48:53' prior: 50881047!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions isEmpty ifTrue: [summary add: 'Balance = 0'.]
	ifFalse: [transactions do: [:transaction | (transaction isKindOf: Deposit) 
			ifTrue: [	summary add: 'Deposito por' , transaction value asString.
				summary add: 'Balance =' , self balance asString.].
		(transactions first isKindOf: Withdraw)
			ifTrue: [summary add: 'Extraccion por 50'.
				summary add: 'Balance = -50'.].
		(transactions first isKindOf: TransferWithdraw)
			ifTrue: [summary add: 'Salida por transferencia de 20'.
				summary add: 'Balance = -20'.].
		(transactions first isKindOf: TransferDeposit)
			ifTrue: [summary add: 'Entrada por transferencia de 30'.
				summary add: 'Balance = 30'.]]].
	
	^summary! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:48:58'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:48:58'!
FAILURE!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:48:58'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:48:58'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 11:48:58'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:48:58'!
FAILURE!

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:49:03'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:49:04'!
FAILURE!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:49:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:49:25' prior: 50881119!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions isEmpty ifTrue: [summary add: 'Balance = 0'.]
	ifFalse: [transactions do: [:transaction | (transaction isKindOf: Deposit) 
			ifTrue: [	summary add: 'Deposito por' , transaction value asString.
				summary add: 'Balance =' , self balance asString.]].
		(transactions first isKindOf: Withdraw)
			ifTrue: [summary add: 'Extraccion por 50'.
				summary add: 'Balance = -50'.].
		(transactions first isKindOf: TransferWithdraw)
			ifTrue: [summary add: 'Salida por transferencia de 20'.
				summary add: 'Balance = -20'.].
		(transactions first isKindOf: TransferDeposit)
			ifTrue: [summary add: 'Entrada por transferencia de 30'.
				summary add: 'Balance = 30'.]].
	
	^summary! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:49:28'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:49:28'!
FAILURE!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:49:28'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:49:28'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 11:49:28'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:49:28'!
FAILURE!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:49:33'!
FAILURE!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:49:33'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:50:02' prior: 50881178!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions isEmpty ifTrue: [summary add: 'Balance = 0'.]
	ifFalse: [transactions do: [:transaction | (transaction isKindOf: Deposit) 
			ifTrue: [	summary add: 'Deposito por ' , transaction value asString.
				summary add: 'Balance = ' , self balance asString.]].
		(transactions first isKindOf: Withdraw)
			ifTrue: [summary add: 'Extraccion por 50'.
				summary add: 'Balance = -50'.].
		(transactions first isKindOf: TransferWithdraw)
			ifTrue: [summary add: 'Salida por transferencia de 20'.
				summary add: 'Balance = -20'.].
		(transactions first isKindOf: TransferDeposit)
			ifTrue: [summary add: 'Entrada por transferencia de 30'.
				summary add: 'Balance = 30'.]].
	
	^summary! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:50:14'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:50:14'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:50:14'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:50:14'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 11:50:14'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:50:14'!
FAILURE!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:50:14'!
FAILURE!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:50:18'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:50:21'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:50:22'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 11:50:24'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:50:25'!
FAILURE!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:50:25'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:54:42' prior: 50881233!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions do: [:transaction | 
	(transaction isKindOf: Deposit) ifTrue: [	summary add: 'Deposito por ' , transaction value asString.].
	(transaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraccion por ' , transaction value asString.].
	(transaction isKindOf: TransferWithdraw) ifTrue: [summary add: 'Salida por transferencia de ' , transaction value asString].
	(transaction isKindOf: TransferDeposit) ifTrue: [summary add: 'Entrada por transferencia de ' , transaction value asString]].
		
	summary add: 'Balance = ' , self balance asString.
	^summary! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:54:46'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:54:46'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:54:46'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:54:46'!
ERROR!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 11:54:46'!
ERROR!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:54:46'!
PASSED!

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:54:49'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:54:51'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:54:52'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:54:53'!
ERROR!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:54:53'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:55:33' prior: 50881306!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions do: [:transaction | 
	(transaction isKindOf: Deposit) ifTrue: [	summary add: 'Deposito por ' , transaction value asString.].
	(transaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraccion por ' , transaction value asString.].
	(transaction isKindOf: TransferWithdraw) ifTrue: [summary add: 'Salida por transferencia de ' , transaction value asString].
	(transaction isKindOf: TransferDeposit) ifTrue: [summary add: 'Entrada por transferencia de ' , transaction value asString]].
		
	summary add: 'Balance = ' , self balance asString.
	^summary! !
!TransferPata methodsFor: 'accessing' stamp: 'JR 6/3/2021 11:56:49' overrides: 50880424!
value
	
	^self myTransfer value! !

!testRun: #TransferTest #test01 stamp: 'JR 6/3/2021 11:56:54'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'JR 6/3/2021 11:56:54'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'JR 6/3/2021 11:56:54'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'JR 6/3/2021 11:56:54'!
PASSED!

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 11:56:56'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 11:56:56'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 11:56:56'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 11:56:56'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 11:56:56'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 11:56:56'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:58:01'!
test07SummaryShouldReflectMultipleTransactionsOnAccount

	|anAccount expectedSummary|
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	expectedSummary add: 'Deposito por 100'.
	expectedSummary add: 'Deposito por 100'.
	expectedSummary add: 'Balance = 200'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 11:58:35' prior: 50881424!
test07SummaryShouldReflectMultipleTransactionsOnAccount

	|anAccount expectedSummary destinyAccount originAccount |
	
	anAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer register: 30 from: originAccount to: destinyAccount.
	
	expectedSummary add: 'Deposito por 100'.
	expectedSummary add: 'Deposito por 100'.
	expectedSummary add: 'Balance = 200'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:01:54' prior: 50881441!
test07SummaryShouldReflectMultipleTransactionsOnAccount

	|anAccount expectedSummary destinyAccount originAccount |
	
	anAccount := ReceptiveAccount new. 
	destinyAccount := ReceptiveAccount new. 
	originAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer register: 20 from: anAccount to: destinyAccount.
	Transfer register: 30 from: originAccount to: anAccount.
	
	expectedSummary add: 'Deposito por 100'.
	expectedSummary add: 'Extraccion por 50'.
	expectedSummary add: 'Salida por transferencia de 20'.
	expectedSummary add: 'Entrada por transferencia de 30'.
	expectedSummary add: 'Balance = 60'.
	
	self assert: expectedSummary equals: anAccount accountSummary.! !

!testRun: #ReportsTest #test07SummaryShouldReflectMultipleTransactionsOnAccount stamp: 'JR 6/3/2021 12:01:56'!
PASSED!

!methodRemoval: ReportsTest #test07SummaryShouldReflectMultipleTransactionsOnAccount stamp: 'JR 6/3/2021 12:02:02'!
test07SummaryShouldReflectMultipleTransactionsOnAccount

	|anAccount expectedSummary destinyAccount originAccount |
	
	anAccount := ReceptiveAccount new. 
	destinyAccount := ReceptiveAccount new. 
	originAccount := ReceptiveAccount new. 
	expectedSummary := OrderedCollection new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	Transfer register: 20 from: anAccount to: destinyAccount.
	Transfer register: 30 from: originAccount to: anAccount.
	
	expectedSummary add: 'Deposito por 100'.
	expectedSummary add: 'Extraccion por 50'.
	expectedSummary add: 'Salida por transferencia de 20'.
	expectedSummary add: 'Entrada por transferencia de 30'.
	expectedSummary add: 'Balance = 60'.
	
	self assert: expectedSummary equals: anAccount accountSummary.!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:02:37' prior: 50881367!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions do: [:transaction | 
	(transaction isKindOf: Deposit) ifTrue: [	summary add: 'Deposito por ' , transaction value asString.].
	(transaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraccion por ' , transaction value asString.].
	(transaction isKindOf: TransferWithdraw) ifTrue: [summary add: 'Salida por transferencia de ' , transaction value asString].
	(transaction isKindOf: TransferDeposit) ifTrue: [summary add: 'Entrada por transferencia de ' , transaction value asString]].
		
	summary add: 'Balance = ' , self balance asString.
	^summary! !
!Deposit methodsFor: 'reports' stamp: 'JR 6/3/2021 12:04:03'!
includeInAccountSummary: aSummary

	aSummary add: 'Deposito por ' , self value asString.
	^aSummary! !
!Withdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 12:04:52'!
includeInAccountSummary: aSummary

	aSummary add: 'Extraccion por ' , self value asString.
	^aSummary! !
!TransferDeposit methodsFor: 'reports' stamp: 'JR 6/3/2021 12:05:18'!
includeInAccountSummary: aSummary

	aSummary add: 'Entrada por transferencia de ' , self value asString.
	^aSummary! !
!TransferWithdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 12:05:37'!
includeInAccountSummary: aSummary

	aSummary add: 'Salida por transferencia de ' , self value asString.
	^aSummary! !
!AccountTransaction methodsFor: 'reports' stamp: 'JR 6/3/2021 12:05:50'!
includeInAccountSummary: aSummary

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:06:57' prior: 50881521!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions do: [:transaction | summary := transaction includeInAccountSummary: summary].
	"(transaction isKindOf: Deposit) ifTrue: [	summary add: 'Deposito por ' , transaction value asString.].
	(transaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraccion por ' , transaction value asString.].
	(transaction isKindOf: TransferWithdraw) ifTrue: [summary add: 'Salida por transferencia de ' , transaction value asString].
	(transaction isKindOf: TransferDeposit) ifTrue: [summary add: 'Entrada por transferencia de ' , transaction value asString]]."
		
	summary add: 'Balance = ' , self balance asString.
	^summary! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:07:58' prior: 50881573!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions do: [:transaction | summary _ transaction includeInAccountSummary: summary].
	"(transaction isKindOf: Deposit) ifTrue: [	summary add: 'Deposito por ' , transaction value asString.].
	(transaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraccion por ' , transaction value asString.].
	(transaction isKindOf: TransferWithdraw) ifTrue: [summary add: 'Salida por transferencia de ' , transaction value asString].
	(transaction isKindOf: TransferDeposit) ifTrue: [summary add: 'Entrada por transferencia de ' , transaction value asString]]."
		
	summary add: 'Balance = ' , self balance asString.
	^summary! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:08:14' prior: 50881598!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions do: [:transaction | transaction includeInAccountSummary: summary].
	"(transaction isKindOf: Deposit) ifTrue: [	summary add: 'Deposito por ' , transaction value asString.].
	(transaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraccion por ' , transaction value asString.].
	(transaction isKindOf: TransferWithdraw) ifTrue: [summary add: 'Salida por transferencia de ' , transaction value asString].
	(transaction isKindOf: TransferDeposit) ifTrue: [summary add: 'Entrada por transferencia de ' , transaction value asString]]."
		
	summary add: 'Balance = ' , self balance asString.
	^summary! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 12:08:18'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 12:08:18'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 12:08:18'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:08:18'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:08:18'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 12:08:18'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:08:33' prior: 50881623!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	transactions do: [:transaction | transaction includeInAccountSummary: summary].
	summary add: 'Balance = ' , self balance asString.
	
	^summary! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:11:44'!
test07TransferNetOfEmptyAccountShouldBeZero

	|anEmptyAccount|
	
	anEmptyAccount := ReceptiveAccount new. 
	
	self assert: 0 equals: anEmptyAccount accountTransferNet.! !

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:11:48'!
ERROR!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:11:48'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:12:04'!
accountTransferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:12:19' prior: 50881694!
accountTransferNet
	
	^0! !

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:12:21'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:12:24'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:13:34'!
test08TransferNetShouldReflectTransferFromAccount

	|anEmptyAccount|
	
	anEmptyAccount := ReceptiveAccount new. 
	
	self assert: 0 equals: anEmptyAccount accountTransferNet.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:14:21' prior: 50881710!
test08TransferNetShouldReflectTransferFromAccount

	|originAccount destinyAccount|
	
	originAccount := ReceptiveAccount new. 
	destinyAccount := ReceptiveAccount new.
	
	Transfer register: 20 from: originAccount to: destinyAccount.
	
	self assert: -20 equals: originAccount accountTransferNet.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'JR 6/3/2021 12:15:17' prior: 50881699!
accountTransferNet
	
	transactions isEmpty ifTrue:[	^0] ifFalse: [^-20]! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 12:15:22'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 12:15:22'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 12:15:22'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:15:22'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:15:22'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 12:15:22'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:15:22'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:15:22'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:15:42'!
test09TransferNetShouldReflectTransferToAccount

	|originAccount destinyAccount|
	
	originAccount := ReceptiveAccount new. 
	destinyAccount := ReceptiveAccount new.
	
	Transfer register: 20 from: originAccount to: destinyAccount.
	
	self assert: 20 equals: destinyAccount accountTransferNet.! !

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:15:48'!
FAILURE!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:15:48'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'JR 6/3/2021 12:19:18' prior: 50881731!
accountTransferNet
	
	|currentTransferNet|
	
	currentTransferNet := 0.
	
	transactions do: [:transaction | 
		(transaction isKindOf: TransferDeposit) ifTrue: [currentTransferNet := currentTransferNet + transaction value].
		(transaction isKindOf: TransferWithdraw) ifTrue: [currentTransferNet := currentTransferNet - transaction value]].
	
	^currentTransferNet ! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 12:19:21'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 12:19:21'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 12:19:21'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:19:21'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:19:21'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 12:19:21'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:19:21'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:19:21'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:19:21'!
PASSED!

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 12:19:25'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 12:19:25'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 12:19:25'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:19:25'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:19:25'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 12:19:25'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:19:25'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:19:25'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:19:26'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:20:27'!
test10TransferNetShouldReflectMultipleTransfersRegisterdInAccount

	|originAccount destinyAccount|
	
	originAccount := ReceptiveAccount new. 
	destinyAccount := ReceptiveAccount new.
	
	Transfer register: 20 from: originAccount to: destinyAccount.
	Transfer register: 30 from: destinyAccount to: originAccount.
		
	self assert: 10 equals: destinyAccount accountTransferNet.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:20:40' prior: 50881860!
test10TransferNetShouldReflectMultipleTransfersRegisterdInAccount

	|originAccount destinyAccount|
	
	originAccount := ReceptiveAccount new. 
	destinyAccount := ReceptiveAccount new.
	
	Transfer register: 20 from: originAccount to: destinyAccount.
	Transfer register: 30 from: destinyAccount to: originAccount.
		
	self assert: 10 equals: originAccount accountTransferNet.! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 12:20:43'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 12:20:43'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 12:20:43'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:20:43'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:20:43'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 12:20:43'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:20:43'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:20:43'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:20:43'!
PASSED!

!testRun: #ReportsTest #test10TransferNetShouldReflectMultipleTransfersRegisterdInAccount stamp: 'JR 6/3/2021 12:20:43'!
PASSED!

!methodRemoval: ReportsTest #test10TransferNetShouldReflectMultipleTransfersRegisterdInAccount stamp: 'JR 6/3/2021 12:20:46'!
test10TransferNetShouldReflectMultipleTransfersRegisterdInAccount

	|originAccount destinyAccount|
	
	originAccount := ReceptiveAccount new. 
	destinyAccount := ReceptiveAccount new.
	
	Transfer register: 20 from: originAccount to: destinyAccount.
	Transfer register: 30 from: destinyAccount to: originAccount.
		
	self assert: 10 equals: originAccount accountTransferNet.!
!ReceptiveAccount methodsFor: 'reports' stamp: 'JR 6/3/2021 12:21:47' prior: 50881783!
accountTransferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ]
! !
!AccountTransaction methodsFor: 'reports' stamp: 'JR 6/3/2021 12:22:29'!
affectTransferNet: aTransferNet

	self subclassResponsibility ! !
!Deposit methodsFor: 'reports' stamp: 'JR 6/3/2021 12:22:50' overrides: 50881948!
affectTransferNet: aTransferNet! !
!Withdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 12:22:59' overrides: 50881948!
affectTransferNet: aTransferNet! !
!TransferDeposit methodsFor: 'reports' stamp: 'JR 6/3/2021 12:23:28' overrides: 50881948!
affectTransferNet: aTransferNet

	^aTransferNet + self value! !
!TransferWithdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 12:23:36' overrides: 50881948!
affectTransferNet: aTransferNet

	^aTransferNet - self value! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 12:23:41'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 12:23:41'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 12:23:41'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:23:41'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:23:41'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 12:23:41'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:23:41'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:23:41'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:23:41'!
PASSED!

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'JR 6/3/2021 12:31:10'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary class methodsFor: 'no messages' stamp: 'JR 6/3/2021 12:34:37'!
for: anAccount

	^self new initializeFor: anAccount! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'JR 6/3/2021 12:35:18'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialization' stamp: 'JR 6/3/2021 12:35:16'!
initializeFor: anAccount

	account := anAccount! !
!AccountSummary methodsFor: 'nil' stamp: 'JR 6/3/2021 12:36:21'!
accountSummary

	^account accountSummary ! !

!classRemoval: #AccountSummary stamp: 'JR 6/3/2021 12:40:06'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'JR 6/3/2021 12:43:38'!
Object subclass: #AccountSummary
	instanceVariableNames: 'accountTransactions account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:43:38'!
for: anAccount with: transactions
	^self new initializeFor: anAccount with: transactions! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:43:38'!
initializeFor: anAccount with: transactions
	accountTransactions := transactions.
	account := anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:43:38'!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	accountTransactions do: [:transaction | transaction includeInAccountSummary: summary].
	summary add: 'Balance = ' , account balance asString.
	
	^summary! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 12:43:38' prior: 50881669!
accountSummary
	^(AccountSummary for: self with: transactions) accountSummary! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'JR 6/3/2021 12:43:49' prior: 50882072!
accountSummary
	
	^(AccountSummary for: self with: transactions) accountSummary! !
!AccountSummary methodsFor: 'initialization' stamp: 'JR 6/3/2021 12:43:56' prior: 50882055!
initializeFor: anAccount with: transactions

	accountTransactions := transactions.
	account := anAccount.! !
!AccountSummary class methodsFor: 'instance creation' stamp: 'JR 6/3/2021 12:45:13' prior: 50882049!
for: anAccount with: transactions

	^self new initializeFor: anAccount with: transactions! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 12:45:39'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 12:45:39'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 12:45:39'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:45:39'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:45:39'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 12:45:40'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:45:40'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:45:40'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:45:40'!
PASSED!
!Deposit methodsFor: 'reports' stamp: 'JR 6/3/2021 12:52:50' prior: 50881543 overrides: 50881567!
includeInAccountSummary: anAccountSummary
	
	anAccountSummary includeDeposit: self
	
	"aSummary add: 'Deposito por ' , self value asString.
	^aSummary"! !
!Deposit methodsFor: 'reports' stamp: 'JR 6/3/2021 12:52:57' prior: 50882129 overrides: 50881567!
includeInAccountSummary: anAccountSummary
	
	anAccountSummary includeDeposit: self
	
	! !
!AccountSummary methodsFor: 'evaluating' stamp: 'JR 6/3/2021 12:53:14' prior: 50882061!
accountSummary
	
	|summary|
	
	summary := OrderedCollection new.
	accountTransactions do: [:transaction | transaction includeInAccountSummary: self].
	summary add: 'Balance = ' , account balance asString.
	
	^summary! !
!AccountSummary methodsFor: 'xxx' stamp: 'JR 6/3/2021 12:53:44'!
includeDeposit: aDeposit

	"aSummary add: 'Deposito por ' , self value asString.
	^aSummary"! !
!AccountSummary methodsFor: 'initialization' stamp: 'JR 6/3/2021 12:54:58' prior: 50882084!
initializeFor: anAccount with: transactions

	accountTransactions := transactions.
	account := anAccount.
	! !

Object subclass: #AccountSummary
	instanceVariableNames: 'accountTransactions account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountSummary
	instanceVariableNames: 'accountTransactions account mySummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'JR 6/3/2021 12:55:14'!
Object subclass: #AccountSummary
	instanceVariableNames: 'accountTransactions account mySummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialization' stamp: 'JR 6/3/2021 12:55:23' prior: 50882158!
initializeFor: anAccount with: transactions

	accountTransactions := transactions.
	account := anAccount.
	mySummary := OrderedCollection new.
	! !
!AccountSummary methodsFor: 'evaluating' stamp: 'JR 6/3/2021 12:55:49' prior: 50882143!
accountSummary
	
	
	accountTransactions do: [:transaction | transaction includeInAccountSummary: self].
	mySummary add: 'Balance = ' , account balance asString.
	
	^mySummary! !
!AccountSummary methodsFor: 'xxx' stamp: 'JR 6/3/2021 12:56:12' prior: 50882152!
includeDeposit: aDeposit

	mySummary add: 'Deposito por ' , self value asString.
	^mySummary! !
!AccountSummary methodsFor: 'xxx' stamp: 'JR 6/3/2021 12:56:21' prior: 50882201!
includeDeposit: aDeposit

	mySummary add: 'Deposito por ' , aDeposit value asString.
	^mySummary! !
!AccountSummary methodsFor: 'xxx' stamp: 'JR 6/3/2021 12:56:55'!
includeWithdraw: aWithdraw

	mySummary add: 'Extraccion por ' , aWithdraw value asString.
	^mySummary! !
!Withdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 12:57:20' prior: 50881549 overrides: 50881567!
includeInAccountSummary: anAccountSummary

	anAccountSummary includeWithdraw: self! !
!TransferDeposit methodsFor: 'reports' stamp: 'JR 6/3/2021 12:57:52' prior: 50881555 overrides: 50881567!
includeInAccountSummary: anAccountSummary

	anAccountSummary includeTransferDeposit: self
	
	! !
!AccountSummary methodsFor: 'xxx' stamp: 'JR 6/3/2021 12:58:26'!
includeTransferDeposit: aTransferDeposit

	mySummary add: 'Entrada por transferencia de ' , self value asString.
	^mySummary! !
!AccountSummary methodsFor: 'xxx' stamp: 'JR 6/3/2021 12:58:33' prior: 50882232!
includeTransferDeposit: aTransferDeposit

	mySummary add: 'Entrada por transferencia de ' , aTransferDeposit value asString.
	^mySummary! !
!AccountSummary methodsFor: 'xxx' stamp: 'JR 6/3/2021 12:58:56'!
includeTransferWithdraw: aTransferWithdraw

	mySummary add: 'Salida por transferencia de ' , aTransferWithdraw value asString.
	^mySummary! !
!TransferWithdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 12:59:32' prior: 50881561 overrides: 50881567!
includeInAccountSummary: anAccountSummary

	anAccountSummary includeTransferWithdraw: self ! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 12:59:45'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 12:59:45'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 12:59:45'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:59:45'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:59:45'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 12:59:45'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 12:59:45'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 12:59:45'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 12:59:45'!
PASSED!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'JR 6/3/2021 13:06:48'!
Object subclass: #TransferNet
	instanceVariableNames: 'accountTransactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 13:06:48'!
with: aTransactions
	^self new initializeWith: aTransactions! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 13:06:48'!
initializeWith: aTransactions
	accountTransactions := aTransactions.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 13:06:48'!
accountTransferNet
	
	^accountTransactions 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ]
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 13:06:48' prior: 50881941!
accountTransferNet
	^(TransferNet with: transactions) accountTransferNet! !
!TransferNet methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:08:35' prior: 50882309!
accountTransferNet
	
	^accountTransactions 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: self ]
! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'JR 6/3/2021 13:09:16'!
Object subclass: #TransferNet
	instanceVariableNames: 'accountTransactions transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialization' stamp: 'JR 6/3/2021 13:09:15' prior: 50882304!
initializeWith: aTransactions
	accountTransactions := aTransactions.
	transferNet := 0.! !
!TransferNet methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:09:26' prior: 50882323!
accountTransferNet
	
	^accountTransactions 
		inject: 0
		into: [ :transaction | transaction affectTransferNet: self ]
! !
!TransferDeposit methodsFor: 'reports' stamp: 'JR 6/3/2021 13:10:03' prior: 50881961 overrides: 50881948!
affectTransferNet: aTransferNet

	^aTransferNet includeTransferDeposit: self ! !
!TransferWithdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 13:10:53' prior: 50881966 overrides: 50881948!
affectTransferNet: aTransferNet

	^aTransferNet includeTransferWithdraw: self ! !
!TransferNet methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:11:21'!
includeTransferDeposit: aTransferDeposit
	
! !
!TransferNet methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:11:31'!
includeTransferWithdraw: aTransferWithdraw
	
! !
!TransferNet methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:12:14' prior: 50882368!
includeTransferWithdraw: aTransferWithdraw

	transferNet := transferNet - aTransferWithdraw value
	
	
! !
!TransferNet methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:12:27' prior: 50882364!
includeTransferDeposit: aTransferDeposit

	transferNet := transferNet + aTransferDeposit value
	
! !
!TransferNet methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:12:51' prior: 50882345!
accountTransferNet
	
	accountTransactions do: [ :transaction | transaction affectTransferNet: self ].
	
	^transferNet 
! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 13:12:57'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 13:12:57'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 13:12:57'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:12:57'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:12:57'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 13:12:57'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 13:12:57'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:12:57'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:12:57'!
PASSED!
!Deposit methodsFor: 'reports' stamp: 'JR 6/3/2021 13:14:01' prior: 50881953 overrides: 50881948!
affectTransferNet: aTransferNet

	aTransferNet includeDeposit: self! !
!Withdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 13:14:21' prior: 50881957 overrides: 50881948!
affectTransferNet: aTransferNet

	aTransferNet includeWithdraw: self! !
!TransferNet methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:14:35'!
includeDeposit: aDeposit
	
	
! !
!TransferNet methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:14:47'!
includeWithdraw: aWithdraw
	
	
! !

Object subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 'JR 6/3/2021 13:16:01'!
Object subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reports subclass: #TransferNet
	instanceVariableNames: 'accountTransactions transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'JR 6/3/2021 13:16:09'!
Reports subclass: #TransferNet
	instanceVariableNames: 'accountTransactions transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reports subclass: #AccountSummary
	instanceVariableNames: 'accountTransactions account mySummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'JR 6/3/2021 13:16:18'!
Reports subclass: #AccountSummary
	instanceVariableNames: 'accountTransactions account mySummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Reports methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:17:57'!
includeTransferWithdraw: aTransferWithdraw

	self subclassResponsibility ! !
!Reports methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:18:04'!
includeWithdraw: aWithdraw

	self subclassResponsibility ! !
!Reports methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:18:12'!
includeDeposit: aDeposit

	self subclassResponsibility ! !
!Reports methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:18:25'!
includeTransferDeposit: aTransferDeposit

	self subclassResponsibility ! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 13:18:29'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 13:18:29'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 13:18:29'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:18:29'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:18:29'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 13:18:29'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 13:18:29'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:18:29'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:18:29'!
PASSED!
!Deposit methodsFor: 'reports' stamp: 'JR 6/3/2021 13:19:56'!
includeInReport: aReport

	aReport includeDeposit: self! !

!methodRemoval: Deposit #includeInAccountSummary: stamp: 'JR 6/3/2021 13:19:58'!
includeInAccountSummary: anAccountSummary
	
	anAccountSummary includeDeposit: self
	
	!
!AccountTransaction methodsFor: 'reports' stamp: 'JR 6/3/2021 13:20:19'!
includeInRepost: aReport

	self subclassResponsibility ! !

!methodRemoval: TransferDeposit #affectTransferNet: stamp: 'JR 6/3/2021 13:20:28'!
affectTransferNet: aTransferNet

	^aTransferNet includeTransferDeposit: self !
!TransferDeposit methodsFor: 'reports' stamp: 'JR 6/3/2021 13:20:39'!
includeInincludeInRepost: aReport

	aReport includeTransferDeposit: self
	
	! !

!methodRemoval: TransferDeposit #includeInAccountSummary: stamp: 'JR 6/3/2021 13:20:41'!
includeInAccountSummary: anAccountSummary

	anAccountSummary includeTransferDeposit: self
	
	!
!TransferWithdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 13:21:04' overrides: 50882540!
includeInRepost: aReport

	^aReport includeTransferWithdraw: self ! !

!methodRemoval: TransferWithdraw #includeInAccountSummary: stamp: 'JR 6/3/2021 13:21:07'!
includeInAccountSummary: anAccountSummary

	anAccountSummary includeTransferWithdraw: self !

!methodRemoval: TransferWithdraw #affectTransferNet: stamp: 'JR 6/3/2021 13:21:10'!
affectTransferNet: aTransferNet

	^aTransferNet includeTransferWithdraw: self !
!AccountTransaction methodsFor: 'reports' stamp: 'JR 6/3/2021 13:21:20'!
includeInReport: aReport

	self subclassResponsibility ! !
!TransferWithdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 13:21:20' overrides: 50882578!
includeInReport: aReport

	^aReport includeTransferWithdraw: self ! !

!methodRemoval: AccountTransaction #includeInRepost: stamp: 'JR 6/3/2021 13:21:20'!
includeInRepost: aReport

	self subclassResponsibility !

!methodRemoval: TransferWithdraw #includeInRepost: stamp: 'JR 6/3/2021 13:21:20'!
includeInRepost: aReport

	^aReport includeTransferWithdraw: self !
!TransferDeposit methodsFor: 'reports' stamp: 'JR 6/3/2021 13:21:53' overrides: 50882578!
includeInReport: aReport

	aReport includeTransferDeposit: self
	
	! !

!methodRemoval: TransferDeposit #includeInincludeInRepost: stamp: 'JR 6/3/2021 13:21:53'!
includeInincludeInRepost: aReport

	aReport includeTransferDeposit: self
	
	!
!TransferDeposit methodsFor: 'reports' stamp: 'JR 6/3/2021 13:22:02' prior: 50882598 overrides: 50882578!
includeInReport: aReport

	^aReport includeTransferDeposit: self
	
	! !
!Deposit methodsFor: 'reports' stamp: 'JR 6/3/2021 13:22:08' prior: 50882530 overrides: 50882578!
includeInReport: aReport

	^aReport includeDeposit: self! !
!Withdraw methodsFor: 'reports' stamp: 'JR 6/3/2021 13:22:31' overrides: 50882578!
includeInReport: aReport

	^aReport includeWithdraw: self! !

!methodRemoval: Withdraw #includeInAccountSummary: stamp: 'JR 6/3/2021 13:22:33'!
includeInAccountSummary: anAccountSummary

	anAccountSummary includeWithdraw: self!

!methodRemoval: Withdraw #affectTransferNet: stamp: 'JR 6/3/2021 13:22:36'!
affectTransferNet: aTransferNet

	aTransferNet includeWithdraw: self!
!AccountSummary methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:22:54' prior: 50882192!
accountSummary
	
	
	accountTransactions do: [:transaction | transaction includeInReport: self].
	mySummary add: 'Balance = ' , account balance asString.
	
	^mySummary! !
!TransferNet methodsFor: 'evaluating' stamp: 'JR 6/3/2021 13:23:06' prior: 50882385!
accountTransferNet
	
	accountTransactions do: [ :transaction | transaction includeInReport: self ].
	
	^transferNet 
! !

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 13:23:08'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 13:23:08'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 13:23:08'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:23:08'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:23:08'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 13:23:08'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 13:23:08'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:23:09'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:23:09'!
PASSED!

!methodRemoval: Deposit #affectTransferNet: stamp: 'JR 6/3/2021 13:25:08'!
affectTransferNet: aTransferNet

	aTransferNet includeDeposit: self!

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 13:25:31'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 13:25:31'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 13:25:31'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:25:31'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:25:31'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 13:25:31'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 13:25:31'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:25:31'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:25:31'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'JR 6/3/2021 13:25:34'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'JR 6/3/2021 13:25:34'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'JR 6/3/2021 13:25:34'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'JR 6/3/2021 13:25:34'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'JR 6/3/2021 13:25:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 6/3/2021 13:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 6/3/2021 13:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 6/3/2021 13:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 6/3/2021 13:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 6/3/2021 13:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 6/3/2021 13:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 6/3/2021 13:25:41'!
PASSED!

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 13:27:13'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 13:27:13'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 13:27:14'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:27:14'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:27:14'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 13:27:14'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 13:27:14'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:27:14'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:27:14'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 13:28:04'!
test01TransferShouldAffectBalanceOfBothAccounts

	|originAccount destinyAccount|
	
	originAccount := ReceptiveAccount new.
	destinyAccount := ReceptiveAccount new.
	
	Transfer register: 200 from: originAccount to: destinyAccount.
	
	self assert: 200 equals: destinyAccount balance.
	self assert: -200 equals: originAccount balance.! !

!methodRemoval: TransferTest #test01 stamp: 'JR 6/3/2021 13:28:04'!
test01

	|originAccount destinyAccount|
	
	originAccount := ReceptiveAccount new.
	destinyAccount := ReceptiveAccount new.
	
	Transfer register: 200 from: originAccount to: destinyAccount.
	
	self assert: 200 equals: destinyAccount balance.
	self assert: -200 equals: originAccount balance.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 13:29:41'!
test02AnAccountShouldKnowItsTransfersAndTheirKind

	|originAccount destinyAccount|
	
	originAccount := ReceptiveAccount new.
	destinyAccount := ReceptiveAccount new.
	
	Transfer register: 200 from: originAccount to: destinyAccount.
	
	self assert: (destinyAccount transactions anySatisfy: [:transaction | transaction isKindOf: TransferDeposit]).
	self assert: (originAccount transactions anySatisfy: [:transaction | transaction isKindOf: TransferWithdraw]).! !

!methodRemoval: TransferTest #test02 stamp: 'JR 6/3/2021 13:29:41'!
test02

	|originAccount destinyAccount|
	
	originAccount := ReceptiveAccount new.
	destinyAccount := ReceptiveAccount new.
	
	Transfer register: 200 from: originAccount to: destinyAccount.
	
	self assert: (destinyAccount transactions anySatisfy: [:transaction | transaction isKindOf: TransferDeposit]).
	self assert: (originAccount transactions anySatisfy: [:transaction | transaction isKindOf: TransferWithdraw]).!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 13:30:35'!
test03TransferDepositsAndWithdrawsShouldKnowTheirTransfer

	|originAccount destinyAccount transfer|
	
	originAccount := ReceptiveAccount new.
	destinyAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: originAccount to: destinyAccount.
	
	self assert: (destinyAccount transactions anySatisfy: [:transaction | (transaction isKindOf: TransferDeposit) and: 		[transaction myTransfer = transfer]]).
	self assert: (originAccount transactions anySatisfy: [:transaction | (transaction isKindOf: TransferWithdraw) and: 		[transaction myTransfer = transfer]]).! !

!methodRemoval: TransferTest #test03 stamp: 'JR 6/3/2021 13:30:36'!
test03

	|originAccount destinyAccount transfer|
	
	originAccount := ReceptiveAccount new.
	destinyAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: originAccount to: destinyAccount.
	
	self assert: (destinyAccount transactions anySatisfy: [:transaction | (transaction isKindOf: TransferDeposit) and: 		[transaction myTransfer = transfer]]).
	self assert: (originAccount transactions anySatisfy: [:transaction | (transaction isKindOf: TransferWithdraw) and: 		[transaction myTransfer = transfer]]).!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'JR 6/3/2021 13:31:27'!
test04TransfersShouldKnowBothItsLegs

	|originAccount destinyAccount transfer|
	
	originAccount := ReceptiveAccount new.
	destinyAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: originAccount to: destinyAccount.
	
	self assert: (destinyAccount transactions anySatisfy: [:transaction | (transaction isKindOf: TransferDeposit) and: 		[transaction = transfer deposit]]).
	self assert: (originAccount transactions anySatisfy: [:transaction | (transaction isKindOf: TransferWithdraw) and: 		[transaction = transfer withdraw]]).! !

!methodRemoval: TransferTest #test04 stamp: 'JR 6/3/2021 13:31:27'!
test04

	|originAccount destinyAccount transfer|
	
	originAccount := ReceptiveAccount new.
	destinyAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: originAccount to: destinyAccount.
	
	self assert: (destinyAccount transactions anySatisfy: [:transaction | (transaction isKindOf: TransferDeposit) and: 		[transaction = transfer deposit]]).
	self assert: (originAccount transactions anySatisfy: [:transaction | (transaction isKindOf: TransferWithdraw) and: 		[transaction = transfer withdraw]]).!

!classRenamed: #TransferPata as: #TransferLeg stamp: 'JR 6/3/2021 13:31:41'!
Smalltalk renameClassNamed: #TransferPata as: #TransferLeg!

!testRun: #ReportsTest #test01SummaryOfEmptyAccountShouldBeBalanceEqualsZero stamp: 'JR 6/3/2021 13:31:46'!
PASSED!

!testRun: #ReportsTest #test02SummaryShouldReflectDepositOnAccount stamp: 'JR 6/3/2021 13:31:46'!
PASSED!

!testRun: #ReportsTest #test03SummaryShouldReflectWithdrawOnAccount stamp: 'JR 6/3/2021 13:31:46'!
PASSED!

!testRun: #ReportsTest #test04SummaryShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:31:46'!
PASSED!

!testRun: #ReportsTest #test05SummaryShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:31:46'!
PASSED!

!testRun: #ReportsTest #test06SummaryShouldReflectMultipleDepositsOnAccount stamp: 'JR 6/3/2021 13:31:46'!
PASSED!

!testRun: #ReportsTest #test07TransferNetOfEmptyAccountShouldBeZero stamp: 'JR 6/3/2021 13:31:46'!
PASSED!

!testRun: #ReportsTest #test08TransferNetShouldReflectTransferFromAccount stamp: 'JR 6/3/2021 13:31:46'!
PASSED!

!testRun: #ReportsTest #test09TransferNetShouldReflectTransferToAccount stamp: 'JR 6/3/2021 13:31:46'!
PASSED!

!testRun: #TransferTest #test01TransferShouldAffectBalanceOfBothAccounts stamp: 'JR 6/3/2021 13:31:48'!
PASSED!

!testRun: #TransferTest #test02AnAccountShouldKnowItsTransfersAndTheirKind stamp: 'JR 6/3/2021 13:31:48'!
PASSED!

!testRun: #TransferTest #test03TransferDepositsAndWithdrawsShouldKnowTheirTransfer stamp: 'JR 6/3/2021 13:31:48'!
PASSED!

!testRun: #TransferTest #test04TransfersShouldKnowBothItsLegs stamp: 'JR 6/3/2021 13:31:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'JR 6/3/2021 13:31:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'JR 6/3/2021 13:31:56'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'JR 6/3/2021 13:31:56'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'JR 6/3/2021 13:31:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'JR 6/3/2021 13:31:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'JR 6/3/2021 13:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'JR 6/3/2021 13:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'JR 6/3/2021 13:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'JR 6/3/2021 13:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'JR 6/3/2021 13:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'JR 6/3/2021 13:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'JR 6/3/2021 13:31:57'!
PASSED!