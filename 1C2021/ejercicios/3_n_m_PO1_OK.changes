----End fileIn of C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\Git Ejercicios\2021-1c\17-Portfolio 1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 5/17/2021 20:23:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:23:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:23:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:23:54'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:23:54'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'lmalvarez 5/17/2021 20:24:30' prior: 50887955!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 20:26:59' prior: 50888142!
balance
	^ transactions
		sum: [ :aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value].
			(aTransaction isKindOf: Withdraw ) ifTrue: [aTransaction value negated].
			 ]
		ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:27:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:27:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:27:17'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:27:48'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:28:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:29:57'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 20:31:26' prior: 50888188!
balance
	^ transactions
		sum: [ :aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] ifFalse: [aTransaction value negated].
			 ]
		ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:31:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:31:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:31:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 5/17/2021 20:32:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 5/17/2021 20:33:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 5/17/2021 20:33:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 5/17/2021 20:33:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 5/17/2021 20:33:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:33:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:33:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 5/17/2021 20:33:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 5/17/2021 20:33:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 5/17/2021 20:33:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 5/17/2021 20:33:51'!
PASSED!
!AccountTransaction methodsFor: 'value' stamp: 'lmalvarez 5/17/2021 20:39:59'!
affectsBalance: aBalance

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'lmalvarez 5/17/2021 20:40:51' overrides: 50888286!
affectsBalance: aBalance

	^ aBalance + value! !
!Withdraw methodsFor: 'value' stamp: 'lmalvarez 5/17/2021 20:41:00' overrides: 50888286!
affectsBalance: aBalance
	^ aBalance - value.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 20:42:18' prior: 50888222!
balance
	| balance |
	balance _ 0.

	transactions do: [ :aTransaction | aTransaction affectsBalance: balance ].
		
	^balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 5/17/2021 20:42:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:42:31'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:42:31'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 5/17/2021 20:42:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 5/17/2021 20:42:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 5/17/2021 20:42:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 5/17/2021 20:42:31'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'lmalvarez 5/17/2021 20:42:42' prior: 50887946!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:42:51'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 20:43:18' prior: 50888301!
balance
	| balance |
	balance _ 0.

	transactions do: [ :aTransaction | balance := aTransaction affectsBalance: balance ].
		
	^balance! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:43:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 5/17/2021 20:43:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:43:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/17/2021 20:43:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 5/17/2021 20:43:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 5/17/2021 20:43:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 5/17/2021 20:43:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 5/17/2021 20:43:23'!
PASSED!
!Withdraw methodsFor: 'value' stamp: 'lmalvarez 5/17/2021 20:44:42' prior: 50888296 overrides: 50888286!
affectsBalance: aBalanceValue
	^ aBalanceValue - value.! !
!Deposit methodsFor: 'value' stamp: 'lmalvarez 5/17/2021 20:44:48' prior: 50888291 overrides: 50888286!
affectsBalance: aBalanceValue
	^ aBalanceValue + value.! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/17/2021 20:46:11'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'lmalvarez 5/17/2021 20:46:21'!
test01
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 20:47:15' prior: 50888412!
test01

	| portfolio |
	
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/17/2021 20:49:03'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 20:48:43' prior: 50888416!
test01
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 20:49:08'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 20:49:08'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 20:49:21'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 20:49:33'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 20:49:52'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 20:50:07' prior: 50888444!
balance
	^0.! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 20:50:09'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 20:50:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 20:52:42'!
test02
	| portfolio account1 |
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	portfolio register: account1.
	
	self assert: (portfolio hasRegistered: account1)	.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 20:53:37' prior: 50888457!
test02
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	portfolio register: account1.
	
	self assert: (portfolio hasRegistered: account1).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 20:53:53'!
xxxx
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	portfolio register: account1.
	
	self assert: (portfolio hasRegistered: account1).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 20:54:19' prior: 50888466!
test02
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	
	
	portfolio register: account1.
	
	self assert: (portfolio hasRegistered: account1).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 20:54:59' prior: 50888484!
test02
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio register: account1.
	
	self assert: portfolio balance equals: 100 .! !

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 20:55:04'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 20:55:12'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 20:55:36'!
register: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/17/2021 20:59:01'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 20:58:57' prior: 50888509!
register: anAccount

	accounts add: anAccount. 
	! !

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 20:59:05'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 21:00:38' overrides: 16896425!
initialize
	
	accounts := Set new.! !

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 21:00:41'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 21:00:41'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 21:02:19' prior: 50888448!
balance
	^ accounts sum: [:anAccount | anAccount balance] ifEmpty: [0].! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 21:02:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 21:02:26'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 21:06:40' prior: 50888530 overrides: 16896425!
initialize
	
	accounts := ReceptiveAccount new.! !
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 21:06:52' prior: 50888551 overrides: 16896425!
initialize
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 21:07:05' prior: 50888522!
register: anAccount

	accounts := anAccount. 
	! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 21:07:07'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 21:07:07'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 21:07:32' prior: 50888540!
balance
	^ accounts balance.

	"^ accounts sum: [:anAccount | anAccount balance] ifEmpty: [0]."! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 21:07:34'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 21:07:34'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 21:08:25' prior: 50888570!
balance
	^ accounts isNil ifTrue: [0] ifFalse: [accounts balance].

	"^ accounts sum: [:anAccount | anAccount balance] ifEmpty: [0]."! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 21:08:28'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 21:08:29'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 21:08:31'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 21:08:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 21:09:01'!
test03
	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	Deposit register: 300 on: account2. 
	
	portfolio register: account1.
	portfolio register: account2.
	
	self assert: portfolio balance equals: 400 .! !

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/17/2021 21:09:02'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/17/2021 21:09:11'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/17/2021 21:09:14'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 21:09:56' prior: 50888581!
balance
	^ accounts sum: [:anAccount | anAccount balance] ifEmpty: [0].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 21:10:03' prior: 50888560!
register: anAccount

	accounts add: anAccount. 
	! !
!Portfolio methodsFor: 'initialization' stamp: 'lmalvarez 5/17/2021 21:10:25' prior: 50888556 overrides: 16896425!
initialize
	
	accounts := Set new.! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 21:10:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 21:10:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/17/2021 21:10:27'!
PASSED!

!methodRemoval: PortfolioTest #xxxx stamp: 'lmalvarez 5/17/2021 21:10:50'!
xxxx
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	portfolio register: account1.
	
	self assert: (portfolio hasRegistered: account1).!

----SNAPSHOT----(17 May 2021 21:10:53) CuisUniversity-4532.image priorSource: 17776747!

----SNAPSHOT----(17 May 2021 21:42:57) CuisUniversity-4532.image priorSource: 17824024!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 21:47:09'!
test04
	| portfolio portfolioChild |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self assert: portfolio balance equals: 0 .! !

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/17/2021 21:47:14'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/17/2021 21:48:01'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'lmalvarez 5/17/2021 21:48:00' prior: 50888632 overrides: 16896425!
initialize
	
	accounts := Set new.
	portfolios := Set new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 21:49:10' prior: 50888626!
register: anAccount

	(anAccount isKindOf: ReceptiveAccount ) ifTrue: [	accounts add: anAccount].
	(anAccount isKindOf: Portfolio) ifTrue: [portfolios add: anAccount]. 
	! !
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/17/2021 21:50:38' prior: 50888620!
balance

	^ (accounts sum: [:anAccount | anAccount balance] ifEmpty: [0] )
		+ (portfolios sum: [:anAccount | anAccount balance] ifEmpty: [0]).! !

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/17/2021 21:50:53'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 21:51:04'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 21:51:04'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/17/2021 21:51:04'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/17/2021 21:51:04'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 21:51:59'!
test05
	| portfolio portfolioChild1 portfolioChild2 |
	
	portfolio _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	
	portfolio register: portfolioChild1.
	portfolio register: portfolioChild2.
	
	self assert: portfolio balance equals: 0 .! !

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/17/2021 21:52:02'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/17/2021 21:52:04'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/17/2021 21:52:04'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/17/2021 21:52:04'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/17/2021 21:52:04'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/17/2021 21:52:04'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 21:54:19' prior: 50888713!
test05
	| portfolio portfolioChild account |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account .
	portfolioChild register: account.
	
	portfolio register: portfolioChild.
	
	self assert: portfolio balance equals: 100 .! !

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/17/2021 21:54:22'!
PASSED!

----SNAPSHOT----(17 May 2021 21:55:04) CuisUniversity-4532.image priorSource: 17824113!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 21:55:21' prior: 50888741!
test05
	| portfolio portfolioChild account |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	portfolioChild register: account.
	
	portfolio register: portfolioChild.
	
	self assert: portfolio balance equals: 100 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/17/2021 21:55:43' prior: 50888760!
test05
	| portfolio portfolioChild account |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	portfolioChild register: account.
	
	portfolio register: portfolioChild.
	
	self assert: portfolio balance equals: 100.! !

----SNAPSHOT----(17 May 2021 21:56:28) CuisUniversity-4532.image priorSource: 17827361!

----SNAPSHOT----(17 May 2021 22:10:32) CuisUniversity-4532.image priorSource: 17828302!

----STARTUP---- (20 May 2021 19:55:50) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\CuisToTrain\CuisUniversity-4532.image!


!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/20/2021 20:11:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/20/2021 20:11:25'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/20/2021 20:11:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/20/2021 20:11:25'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/20/2021 20:11:25'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/20/2021 20:11:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/20/2021 20:11:37'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/20/2021 20:11:37'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/20/2021 20:11:37'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/20/2021 20:11:37'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/20/2021 20:14:33'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/20/2021 20:14:33'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/20/2021 20:14:33'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/20/2021 20:14:33'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/20/2021 20:14:33'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'lmalvarez 5/20/2021 20:16:50' prior: 50888678 overrides: 16896425!
initialize
	
	accounts := Set new.! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/20/2021 20:16:56'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'balance' stamp: 'lmalvarez 5/20/2021 20:17:02' prior: 50888693!
balance

	^ (accounts sum: [:anAccount | anAccount balance] ifEmpty: [0] ).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:17:18' prior: 50888684!
register: anAccount

	accounts add: anAccount
	! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/20/2021 20:17:22'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/20/2021 20:17:22'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/20/2021 20:17:22'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/20/2021 20:17:22'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/20/2021 20:17:22'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:25:41'!
test06
	| portfolio  |
	
	portfolio _ Portfolio new.
	
	self should: [portfolio register: portfolio]
		raise: Error
		withException: [].
	
	
	self assert: portfolio balance equals: 100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:27:53' prior: 50888875!
test06
	| portfolio  |
	
	portfolio _ Portfolio new.
	
	self should: [portfolio register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !
!Portfolio class methodsFor: 'no messages' stamp: 'lmalvarez 5/20/2021 20:28:17'!
signalDuplicatedAccountError
	^ 'Invalid - Duplicated account'! !

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/20/2021 20:28:25'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/20/2021 20:28:25'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/20/2021 20:29:43'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/20/2021 20:29:43'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/20/2021 20:30:04'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:32:47' prior: 50888858!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	accounts add: anAccount
	! !

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/20/2021 20:32:48'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/20/2021 20:32:48'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/20/2021 20:32:48'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/20/2021 20:32:48'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/20/2021 20:32:48'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/20/2021 20:32:48'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/20/2021 20:32:48'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:33:53'!
test07
	| portfolio portfolioChild |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self should: [portfolio register: portfolioChild]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/20/2021 20:33:55'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/20/2021 20:33:55'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:34:29' prior: 50888912!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(accounts includes: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	accounts add: anAccount
	! !

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/20/2021 20:34:33'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/20/2021 20:34:35'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/20/2021 20:34:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/20/2021 20:34:37'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/20/2021 20:34:37'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/20/2021 20:34:37'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/20/2021 20:34:37'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/20/2021 20:34:37'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/20/2021 20:34:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:36:16'!
test08
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolioChild register: account.
	portfolio register: portfolioChild.
	
	self should: [portfolio register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 20:36:18'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 20:36:18'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:41:03' prior: 50888954!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(accounts includes: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	((accounts select: [:aPorfolio | aPorfolio isKindOf: Portfolio] )
		 allSatisfy: [:aPorfolio | aPorfolio hasRegistered: anAccount])
			ifFalse: [self error: self class signalDuplicatedAccountError].
	
	accounts add: anAccount
	! !

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 20:41:07'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:41:57'!
hasRegistered: anAccount
	
	^ accounts includes: anAccount! !

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 20:42:01'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 20:42:01'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:44:08' prior: 50889007!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(accounts includes: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	((accounts select: [:aPorfolio | aPorfolio isKindOf: Portfolio] )
		 allSatisfy: [:aPorfolio | (aPorfolio hasRegistered: anAccount) not ])
			ifTrue: [self error: self class signalDuplicatedAccountError].
	
	accounts add: anAccount
	! !

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 20:44:09'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 20:44:14'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:44:37' prior: 50889037!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(accounts includes: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	((accounts select: [:aPorfolio | aPorfolio isKindOf: Portfolio] )
		 allSatisfy: [:aPorfolio | (aPorfolio hasRegistered: anAccount) not ])
			ifFalse: [self error: self class signalDuplicatedAccountError].
	
	accounts add: anAccount
	! !

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 20:44:38'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 20:44:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/20/2021 20:44:47'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/20/2021 20:44:47'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/20/2021 20:44:47'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/20/2021 20:44:47'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/20/2021 20:44:47'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/20/2021 20:44:47'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/20/2021 20:44:47'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 20:44:47'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:46:55'!
test09
	| portfolio portfolioChildA portfolioChildB account|
	
	portfolio _ Portfolio new.
	portfolioChildA _ Portfolio new.
	portfolioChildB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolioChildB register: account.
	portfolioChildA register: portfolioChildB.
	portfolio register: portfolioChildA.
	
	self should: [portfolio register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 20:46:59'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 20:46:59'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:53:35' prior: 50889026!
hasRegistered: anAccount
	
	(accounts includes: anAccount) or: [ accounts anySatisfy: [:aPortfolio | aPortfolio hasRegistered: anAccount] ] .! !

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 20:55:24'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 20:55:24'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 20:56:38'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 20:56:38'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:58:29' prior: 50889059!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	accounts add: anAccount
	! !

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 20:58:32'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 20:58:32'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 20:58:56'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 20:59:03'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 20:59:13' prior: 50889143!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	accounts add: anAccount
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/20/2021 21:00:17' prior: 50889125!
hasRegistered: anAccount
	
	^(accounts includes: anAccount) or: [ accounts anySatisfy: [:aPortfolio | aPortfolio hasRegistered: anAccount] ] .! !

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 21:00:23'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/20/2021 21:00:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/20/2021 21:00:25'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/20/2021 21:00:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/20/2021 21:00:25'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/20/2021 21:00:25'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/20/2021 21:00:25'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/20/2021 21:00:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/20/2021 21:00:25'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/20/2021 21:00:25'!
PASSED!

----SNAPSHOT----(20 May 2021 21:04:04) CuisUniversity-4532.image priorSource: 17828391!

----SNAPSHOT----(20 May 2021 22:09:40) CuisUniversity-4532.image priorSource: 17841819!

----SNAPSHOT----(20 May 2021 22:10:15) CuisUniversity-4532.image priorSource: 17841908!

----SNAPSHOT----(20 May 2021 22:10:21) CuisUniversity-4532.image priorSource: 17841997!

----SNAPSHOT----(20 May 2021 22:10:32) CuisUniversity-4532.image priorSource: 17842086!

----STARTUP---- (24 May 2021 18:35:26) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\CuisToTrain\CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 18:38:44'!
test10
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self should: [portfolioChild register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 18:38:59' prior: 50889227!
test10
	| portfolio portfolioChild |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self should: [portfolioChild register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 18:39:46'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 18:39:46'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts fatherPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/24/2021 18:41:23'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts fatherPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #PortfolioRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioRoot category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/24/2021 18:44:47'!
Object subclass: #PortfolioRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'lmalvarez 5/24/2021 18:46:23' prior: 50888835 overrides: 16896425!
initialize
	
	fatherPortfolio := PortfolioRoot new.
	accounts := Set new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 18:47:34' prior: 50889164!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	anAccount setFather: self.
	
	accounts add: anAccount
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/24/2021 18:56:58'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts father'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 18:56:58' prior: 50889282 overrides: 16896425!
initialize
	
	father := PortfolioRoot new.
	accounts := Set new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 18:57:33'!
setFather: aFatherPortfolio

	father := aFatherPortfolio.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'lmalvarez 5/24/2021 18:57:45'!
setFather! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'lmalvarez 5/24/2021 18:57:59'!
setFather: aFatherPortfolio! !

!methodRemoval: ReceptiveAccount #setFather stamp: 'lmalvarez 5/24/2021 18:58:01'!
setFather!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 18:59:00' prior: 50889288!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	(father == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	anAccount setFather: self.
	
	accounts add: anAccount
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 18:59:05' prior: 50889330!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	(father == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	anAccount setFather: self.
	
	accounts add: anAccount
	! !

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 18:59:09'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 18:59:11'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 18:59:11'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 18:59:11'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 18:59:11'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 18:59:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 18:59:11'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 18:59:11'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 18:59:11'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 18:59:11'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 18:59:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:01:29' prior: 50889239!
test10
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	

	portfolioChild register: account.
	portfolio register: portfolioChild.
	
	self should: [		portfolio register: account.]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:01:33'!
test11
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	

	portfolioChild register: account.
	portfolio register: portfolioChild.
	
	self should: [		portfolio register: account.]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 18:38:59' prior: 50889388!
test10
	| portfolio portfolioChild |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self should: [portfolioChild register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 19:01:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:01:53'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:03:01' prior: 50889403!
test11
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	portfolio register: portfolioChild.
	
	self should: [		portfolioChild register: account.]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:03:06' prior: 50889436!
test11
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolioChild register: account.
	portfolioChild register: portfolioChild.
	
	self should: [		portfolio register: account.]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:03:06'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:03:40' prior: 50889452!
test11
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	portfolio register: portfolioChild.
	
	self should: [		portfolioChild register: account.]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:03:44'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:03:44'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:06:07' prior: 50889345!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	(father == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	(father hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError].
	
	anAccount setFather: self.
	
	accounts add: anAccount
	! !

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:06:28'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:06:28'!
ERROR!
!PortfolioRoot methodsFor: 'no messages' stamp: 'lmalvarez 5/24/2021 19:06:49'!
hasRegistered: anAccount

	^false! !

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:06:51'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:06:53'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:07:49'!
test12
	| portfolio portfolioChildA portfolioChildB account|
	
	portfolio _ Portfolio new.
	portfolioChildA _ Portfolio new.
	portfolioChildB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	portfolio register: portfolioChildA.
	portfolioChildA register: portfolioChildB.
	
	self should: [		portfolioChildB register: account.]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!testRun: #PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 19:07:51'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 19:07:51'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:09:48' prior: 50889175!
hasRegistered: anAccount
	
	^(accounts includes: anAccount) 
		or: [ (accounts anySatisfy: [:aPortfolio | aPortfolio hasRegistered: anAccount]) 
			or: [father hasRegistered: anAccount] 
			] .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:10:19' prior: 50889491!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	(father == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	anAccount setFather: self.
	
	accounts add: anAccount
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/24/2021 19:22:31'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts root'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:22:31' prior: 50889313!
setFather: aFatherPortfolio

	root := aFatherPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:22:31' prior: 50889572!
hasRegistered: anAccount
	
	^(accounts includes: anAccount) 
		or: [ (accounts anySatisfy: [:aPortfolio | aPortfolio hasRegistered: anAccount]) 
			or: [root hasRegistered: anAccount] 
			] .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:22:31' prior: 50889308 overrides: 16896425!
initialize
	
	root := PortfolioRoot new.
	accounts := Set new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:22:31' prior: 50889582!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	(root == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	anAccount setFather: self.
	
	accounts add: anAccount
	! !
!Portfolio methodsFor: 'initialization' stamp: 'lmalvarez 5/24/2021 19:22:39' prior: 50889619 overrides: 16896425!
initialize
	
	root := self.
	accounts := Set new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:26:32' prior: 50889625!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	(root == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	anAccount setRoot: self.
	
	accounts add: anAccount
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:26:55'!
setRoot: aRoot

	root := aRoot.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:27:08' prior: 50889645!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	(root == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	anAccount setRoot: root.
	
	accounts add: anAccount
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:27:41' prior: 50889659!
setRoot: aRoot

	root := aRoot.
	accounts do: [:anAccount | anAccount setRoot: aRoot].! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 19:27:47'!
PASSED!

!methodRemoval: Portfolio #setFather: stamp: 'lmalvarez 5/24/2021 19:27:51'!
setFather: aFatherPortfolio

	root := aFatherPortfolio.!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'lmalvarez 5/24/2021 19:28:03'!
setRoot: aRoot! !

!methodRemoval: ReceptiveAccount #setFather: stamp: 'lmalvarez 5/24/2021 19:28:05'!
setFather: aFatherPortfolio!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:28:51' prior: 50889664!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	(self hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	(root == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	(root hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError].
	
	anAccount setRoot: root.
	
	accounts add: anAccount
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:29:05' prior: 50889699!
register: anAccount

	self == anAccount ifTrue: [self error: self class signalDuplicatedAccountError ].
	
	(root == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	(root hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError].
	
	anAccount setRoot: root.
	
	accounts add: anAccount
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:30:25' prior: 50889609!
hasRegistered: anAccount
	
	^(accounts includes: anAccount) 
		or: [ (accounts anySatisfy: [:aPortfolio | aPortfolio hasRegistered: anAccount])		] .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:30:52' prior: 50889716!
register: anAccount
	
	(root == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	(root hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError].
	
	anAccount setRoot: root.
	
	accounts add: anAccount
	! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 19:31:01'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 19:31:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 19:31:05'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 19:31:06'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 19:31:07'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 19:31:09'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 19:31:10'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 19:31:11'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 19:31:13'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 19:31:14'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:31:16'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 19:31:22'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 19:31:24'!
PASSED!

!classRemoval: #PortfolioRoot stamp: 'lmalvarez 5/24/2021 19:31:41'!
Object subclass: #PortfolioRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #BankAccounts
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #BankAccounts category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/24/2021 19:41:02'!
Object subclass: #BankAccounts
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

BankAccounts subclass: #Portfolio
	instanceVariableNames: 'accounts root'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/24/2021 19:41:25'!
BankAccounts subclass: #Portfolio
	instanceVariableNames: 'accounts root'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

BankAccounts subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'lmalvarez 5/24/2021 19:41:36'!
BankAccounts subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!BankAccounts methodsFor: 'no messages' stamp: 'lmalvarez 5/24/2021 19:41:57'!
balance

	self subclassResponsibility.! !
!BankAccounts methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:42:08'!
hasRegistered: anAccount

	self subclassResponsibility.! !
!BankAccounts methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:42:18'!
setRoot: aRoot

	self subclassResponsibility.! !
!BankAccounts methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:43:11'!
transactions

	self subclassResponsibility .! !
!BankAccounts methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:43:34'!
register: anAccount

	self subclassResponsibility.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:46:26'!
assertThatAnAccountIsNotDuplicated: anAccount

	(root == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	(root hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:46:26' prior: 50889738 overrides: 50889875!
register: anAccount
	
	self assertThatAnAccountIsNotDuplicated: anAccount.
	
	anAccount setRoot: root.
	
	accounts add: anAccount
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:46:44' prior: 50889880!
assertThatAnAccountIsNotDuplicated: anAccount

	(root == anAccount) ifTrue: [self error: self class signalDuplicatedAccountError ].
	(root hasRegistered: anAccount) ifTrue: [self error: self class signalDuplicatedAccountError].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:47:06' prior: 50889899!
assertThatAnAccountIsNotDuplicated: anAccount

	(root == anAccount or: [root hasRegistered: anAccount])
		 ifTrue: [self error: self class signalDuplicatedAccountError ].! !

----SNAPSHOT----(24 May 2021 19:49:07) CuisUniversity-4532.image priorSource: 17842175!

----SNAPSHOT----(24 May 2021 19:51:13) CuisUniversity-4532.image priorSource: 17864557!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 19:51:20'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 19:51:21'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:53:05'!
test13
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions equals: OrderedCollection new.! !

!testRun: #PortfolioTest #test13 stamp: 'lmalvarez 5/24/2021 19:53:06'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'lmalvarez 5/24/2021 19:53:06'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'lmalvarez 5/24/2021 19:53:19'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'lmalvarez 5/24/2021 19:53:41' overrides: 50889870!
transactions

	^ OrderedCollection new.! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'lmalvarez 5/24/2021 19:53:50'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:54:59'!
test14
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	self assert: portfolio transactions equals: account transactions.! !

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 19:55:01'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 19:55:01'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'lmalvarez 5/24/2021 19:55:50' prior: 50889972 overrides: 50889870!
transactions

	^ accounts first transactions.! !

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 19:55:56'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 19:56:00'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 19:56:00'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:56:28' prior: 50890009!
test14
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	
	self assert: portfolio transactions equals: account transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'lmalvarez 5/24/2021 19:56:40' prior: 50890024 overrides: 50889870!
transactions

	^ OrderedCollection new.! !

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 19:56:44'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 19:56:44'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'lmalvarez 5/24/2021 19:56:52' prior: 50890048 overrides: 50889870!
transactions

	^ accounts first transactions.! !

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 19:56:53'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'lmalvarez 5/24/2021 20:01:21' prior: 50890058 overrides: 50889870!
transactions

	| portfolioTransactions |

	portfolioTransactions := OrderedCollection new.
	accounts do: [:anAccount | portfolioTransactions + anAccount transactions].

	^ portfolioTransactions .! !

!testRun: #PortfolioTest #test13 stamp: 'lmalvarez 5/24/2021 20:01:25'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:01:28'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:01:28'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:01:56'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:01:56'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'lmalvarez 5/24/2021 20:04:26' prior: 50890066 overrides: 50889870!
transactions

	| portfolioTransactions |

	portfolioTransactions := OrderedCollection new.
	accounts do: [:anAccount | portfolioTransactions , anAccount transactions].

	^ portfolioTransactions .! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'lmalvarez 5/24/2021 20:04:29'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:04:29'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:04:29'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'lmalvarez 5/24/2021 20:04:48'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:04:48'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:04:48'!
FAILURE!

portfolio transactions!
!Portfolio methodsFor: 'transactions' stamp: 'lmalvarez 5/24/2021 20:06:31' prior: 50890089 overrides: 50889870!
transactions

	| portfolioTransactions |

	portfolioTransactions := OrderedCollection new.
	accounts do: [:anAccount | portfolioTransactions addAll: anAccount transactions].

	^ portfolioTransactions .! !

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:06:38'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:06:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 20:07:39' prior: 50890037!
test14
	| portfolio portfolioChild account |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolioChild register: account.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: account transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 20:07:42'!
test15
	| portfolio portfolioChild account |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolioChild register: account.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: account transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 19:56:28' prior: 50890224!
test14
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	
	self assert: portfolio transactions equals: account transactions.! !

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'lmalvarez 5/24/2021 20:07:53'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'lmalvarez 5/24/2021 20:07:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 20:09:48'!
test16
	| portfolio portfolioChild accountA accountB depositA depositB |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	accountA _ ReceptiveAccount new.
	accountB _ ReceptiveAccount new.
	
	depositA _ Deposit register: 100 on: accountA.
	depositB _ Deposit register: 300 on: accountB.
	
	portfolioChild register: accountA.
	portfolio register: accountB.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: (OrderedCollection with: depositA with: depositB).! !

!testRun: #PortfolioTest #test16 stamp: 'lmalvarez 5/24/2021 20:09:49'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'lmalvarez 5/24/2021 20:09:49'!
FAILURE!

portfolio transactions!

(OrderedCollection with: depositA with: depositB)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/24/2021 20:10:53' prior: 50890305!
test16
	| portfolio portfolioChild accountA accountB depositA depositB |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	accountA _ ReceptiveAccount new.
	accountB _ ReceptiveAccount new.
	
	depositA _ Deposit register: 100 on: accountA.
	depositB _ Deposit register: 300 on: accountB.
	
	portfolioChild register: accountA.
	portfolio register: accountB.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: (OrderedCollection with: depositB with: depositA).! !

!testRun: #PortfolioTest #test16 stamp: 'lmalvarez 5/24/2021 20:10:55'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'lmalvarez 5/24/2021 20:10:58'!
PASSED!

----SNAPSHOT----(24 May 2021 20:11:08) CuisUniversity-4532.image priorSource: 17864646!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:17:08'!
test01ANewPortfolioHasABalanceOfCero
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.! !

!testRun: #PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 20:17:10'!
PASSED!

!methodRemoval: PortfolioTest #test01 stamp: 'lmalvarez 5/24/2021 20:17:25'!
test01
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.!

!testRun: #PortfolioTest #test01ANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 20:17:27'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:18:15'!
test02APortfolioWithOneAccountHasTheSameBalanceAsTheAccount
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio register: account1.
	
	self assert: portfolio balance equals: 100 .! !

!methodRemoval: PortfolioTest #test02 stamp: 'lmalvarez 5/24/2021 20:18:18'!
test02
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio register: account1.
	
	self assert: portfolio balance equals: 100 .!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:18:59'!
test03APortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance
	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	Deposit register: 300 on: account2. 
	
	portfolio register: account1.
	portfolio register: account2.
	
	self assert: portfolio balance equals: 400 .! !

!methodRemoval: PortfolioTest #test03 stamp: 'lmalvarez 5/24/2021 20:19:02'!
test03
	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	Deposit register: 300 on: account2. 
	
	portfolio register: account1.
	portfolio register: account2.
	
	self assert: portfolio balance equals: 400 .!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:19:14'!
test02APortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio register: account1.
	
	self assert: portfolio balance equals: 100 .! !

!methodRemoval: PortfolioTest #test02APortfolioWithOneAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 20:19:16'!
test02APortfolioWithOneAccountHasTheSameBalanceAsTheAccount
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio register: account1.
	
	self assert: portfolio balance equals: 100 .!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:19:39'!
test01NewPortfolioHasABalanceOfCero
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.! !

!methodRemoval: PortfolioTest #test01ANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 20:19:40'!
test01ANewPortfolioHasABalanceOfCero
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:19:44'!
test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio register: account1.
	
	self assert: portfolio balance equals: 100 .! !

!methodRemoval: PortfolioTest #test02APortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 20:19:46'!
test02APortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount
	| portfolio account1 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio register: account1.
	
	self assert: portfolio balance equals: 100 .!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:19:49'!
test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance
	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	Deposit register: 300 on: account2. 
	
	portfolio register: account1.
	portfolio register: account2.
	
	self assert: portfolio balance equals: 400 .! !

!methodRemoval: PortfolioTest #test03APortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 20:19:50'!
test03APortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance
	| portfolio account1 account2 |
	
	portfolio _ Portfolio new.
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	Deposit register: 300 on: account2. 
	
	portfolio register: account1.
	portfolio register: account2.
	
	self assert: portfolio balance equals: 400 .!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:20:17'!
test04PortfolioWithANewPortfolioHasABalanceOfCero
	| portfolio portfolioChild |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self assert: portfolio balance equals: 0 .! !

!methodRemoval: PortfolioTest #test04 stamp: 'lmalvarez 5/24/2021 20:20:19'!
test04
	| portfolio portfolioChild |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self assert: portfolio balance equals: 0 .!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:21:00'!
test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount
	| portfolio portfolioChild account |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	portfolioChild register: account.
	
	portfolio register: portfolioChild.
	
	self assert: portfolio balance equals: 100.! !

!methodRemoval: PortfolioTest #test05 stamp: 'lmalvarez 5/24/2021 20:21:01'!
test05
	| portfolio portfolioChild account |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	portfolioChild register: account.
	
	portfolio register: portfolioChild.
	
	self assert: portfolio balance equals: 100.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:22:06'!
test06AddingAPortfolioToItselfShouldRaiseError
	| portfolio  |
	
	portfolio _ Portfolio new.
	
	self should: [portfolio register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test06 stamp: 'lmalvarez 5/24/2021 20:22:08'!
test06
	| portfolio  |
	
	portfolio _ Portfolio new.
	
	self should: [portfolio register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:22:43'!
test07AddingTheSamePortfolioTwiceShouldRaiseAnError
	| portfolio portfolioChild |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self should: [portfolio register: portfolioChild]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test07 stamp: 'lmalvarez 5/24/2021 20:22:44'!
test07
	| portfolio portfolioChild |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self should: [portfolio register: portfolioChild]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:22:47'!
test06AddingAPortfolioToItselfShouldRaiseAnError
	| portfolio  |
	
	portfolio _ Portfolio new.
	
	self should: [portfolio register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 20:22:49'!
test06AddingAPortfolioToItselfShouldRaiseAnError
	| portfolio  |
	
	portfolio _ Portfolio new.
	
	self should: [portfolio register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:22:54'!
test06AddingAPortfolioToItselfShouldRaiseAnError
	| portfolio  |
	
	portfolio _ Portfolio new.
	
	self should: [portfolio register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseError stamp: 'lmalvarez 5/24/2021 20:22:55'!
test06AddingAPortfolioToItselfShouldRaiseError
	| portfolio  |
	
	portfolio _ Portfolio new.
	
	self should: [portfolio register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!

----SNAPSHOT----(24 May 2021 20:23:00) CuisUniversity-4532.image priorSource: 17878558!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:24:21'!
test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolioChild register: account.
	portfolio register: portfolioChild.
	
	self should: [portfolio register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test08 stamp: 'lmalvarez 5/24/2021 20:24:22'!
test08
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolioChild register: account.
	portfolio register: portfolioChild.
	
	self should: [portfolio register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:25:44'!
test09AddingAReceptiveAccountToAPortfolioWhichHasTheSameReceptiveAccountInSomeDeeperLevel
	| portfolio portfolioChildA portfolioChildB account|
	
	portfolio _ Portfolio new.
	portfolioChildA _ Portfolio new.
	portfolioChildB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolioChildB register: account.
	portfolioChildA register: portfolioChildB.
	portfolio register: portfolioChildA.
	
	self should: [portfolio register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test09 stamp: 'lmalvarez 5/24/2021 20:25:46'!
test09
	| portfolio portfolioChildA portfolioChildB account|
	
	portfolio _ Portfolio new.
	portfolioChildA _ Portfolio new.
	portfolioChildB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolioChildB register: account.
	portfolioChildA register: portfolioChildB.
	portfolio register: portfolioChildA.
	
	self should: [portfolio register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:25:52'!
test09AddingAReceptiveAccountToAPortfolioWhichHasTheSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError
	| portfolio portfolioChildA portfolioChildB account|
	
	portfolio _ Portfolio new.
	portfolioChildA _ Portfolio new.
	portfolioChildB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolioChildB register: account.
	portfolioChildA register: portfolioChildB.
	portfolio register: portfolioChildA.
	
	self should: [portfolio register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasTheSameReceptiveAccountInSomeDeeperLevel stamp: 'lmalvarez 5/24/2021 20:25:56'!
test09AddingAReceptiveAccountToAPortfolioWhichHasTheSameReceptiveAccountInSomeDeeperLevel
	| portfolio portfolioChildA portfolioChildB account|
	
	portfolio _ Portfolio new.
	portfolioChildA _ Portfolio new.
	portfolioChildB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolioChildB register: account.
	portfolioChildA register: portfolioChildB.
	portfolio register: portfolioChildA.
	
	self should: [portfolio register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:26:14'!
test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError
	| portfolio portfolioChildA portfolioChildB account|
	
	portfolio _ Portfolio new.
	portfolioChildA _ Portfolio new.
	portfolioChildB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolioChildB register: account.
	portfolioChildA register: portfolioChildB.
	portfolio register: portfolioChildA.
	
	self should: [portfolio register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasTheSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 20:26:17'!
test09AddingAReceptiveAccountToAPortfolioWhichHasTheSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError
	| portfolio portfolioChildA portfolioChildB account|
	
	portfolio _ Portfolio new.
	portfolioChildA _ Portfolio new.
	portfolioChildB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolioChildB register: account.
	portfolioChildA register: portfolioChildB.
	portfolio register: portfolioChildA.
	
	self should: [portfolio register: account]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:29:10'!
test10AddingAPortfolioToItsChildShouldRaiseAnError
	| portfolio portfolioChild |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self should: [portfolioChild register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test10 stamp: 'lmalvarez 5/24/2021 20:29:11'!
test10
	| portfolio portfolioChild |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	
	portfolio register: portfolioChild.
	
	self should: [portfolioChild register: portfolio]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:30:21'!
test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	portfolio register: portfolioChild.
	
	self should: [		portfolioChild register: account.]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test11 stamp: 'lmalvarez 5/24/2021 20:30:23'!
test11
	| portfolio portfolioChild account|
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	portfolio register: portfolioChild.
	
	self should: [		portfolioChild register: account.]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:33:22'!
test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError
	| portfolio portfolioChildA portfolioChildB account|
	
	portfolio _ Portfolio new.
	portfolioChildA _ Portfolio new.
	portfolioChildB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	portfolio register: portfolioChildA.
	portfolioChildA register: portfolioChildB.
	
	self should: [		portfolioChildB register: account.]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.! !

!methodRemoval: PortfolioTest #test12 stamp: 'lmalvarez 5/24/2021 20:33:24'!
test12
	| portfolio portfolioChildA portfolioChildB account|
	
	portfolio _ Portfolio new.
	portfolioChildA _ Portfolio new.
	portfolioChildB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	portfolio register: portfolioChildA.
	portfolioChildA register: portfolioChildB.
	
	self should: [		portfolioChildB register: account.]
		raise: Error
		withMessageText: Portfolio signalDuplicatedAccountError.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:34:28'!
test13TransactionInANewPortfolioShouldBeAnEmptyCollection
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions equals: OrderedCollection new.! !

!methodRemoval: PortfolioTest #test13 stamp: 'lmalvarez 5/24/2021 20:34:29'!
test13
	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio transactions equals: OrderedCollection new.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:35:44'!
test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	
	self assert: portfolio transactions equals: account transactions.! !

!methodRemoval: PortfolioTest #test14 stamp: 'lmalvarez 5/24/2021 20:35:46'!
test14
	| portfolio account |
	
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolio register: account.
	
	self assert: portfolio transactions equals: account transactions.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:36:35'!
test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction
	| portfolio portfolioChild account |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolioChild register: account.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: account transactions.! !

!methodRemoval: PortfolioTest #test15 stamp: 'lmalvarez 5/24/2021 20:36:36'!
test15
	| portfolio portfolioChild account |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	account _ ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	portfolioChild register: account.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: account transactions.!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 20:37:45'!
test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount
	| portfolio portfolioChild accountA accountB depositA depositB |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	accountA _ ReceptiveAccount new.
	accountB _ ReceptiveAccount new.
	
	depositA _ Deposit register: 100 on: accountA.
	depositB _ Deposit register: 300 on: accountB.
	
	portfolioChild register: accountA.
	portfolio register: accountB.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: (OrderedCollection with: depositB with: depositA).! !

!methodRemoval: PortfolioTest #test16 stamp: 'lmalvarez 5/24/2021 20:37:47'!
test16
	| portfolio portfolioChild accountA accountB depositA depositB |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	accountA _ ReceptiveAccount new.
	accountB _ ReceptiveAccount new.
	
	depositA _ Deposit register: 100 on: accountA.
	depositB _ Deposit register: 300 on: accountB.
	
	portfolioChild register: accountA.
	portfolio register: accountB.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: (OrderedCollection with: depositB with: depositA).!

----SNAPSHOT----(24 May 2021 20:37:53) CuisUniversity-4532.image priorSource: 17887913!

----SNAPSHOT----(24 May 2021 20:38:56) CuisUniversity-4532.image priorSource: 17899317!

----SNAPSHOT----(24 May 2021 20:42:37) CuisUniversity-4532.image priorSource: 17899406!

----SNAPSHOT----(24 May 2021 20:43:44) CuisUniversity-4532.image priorSource: 17899495!

----SNAPSHOT----(24 May 2021 20:49:32) CuisUniversity-4532.image priorSource: 17899584!

----STARTUP---- (24 May 2021 20:59:40) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\CuisToTrain\CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 21:00:10' prior: 50890965!
test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount
	| portfolio portfolioChild accountA accountB depositA depositB |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	accountA _ ReceptiveAccount new.
	accountB _ ReceptiveAccount new.
	
	depositA _ Deposit register: 100 on: accountA.
	depositB _ Deposit register: 300 on: accountB.
	
	portfolioChild register: accountA.
	portfolio register: accountB.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: ((OrderedCollection with: depositB) with: depositA).! !

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:00:11'!
ERROR!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:00:11'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 21:00:19' prior: 50891023!
test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount
	| portfolio portfolioChild accountA accountB depositA depositB |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	accountA _ ReceptiveAccount new.
	accountB _ ReceptiveAccount new.
	
	depositA _ Deposit register: 100 on: accountA.
	depositB _ Deposit register: 300 on: accountB.
	
	portfolioChild register: accountA.
	portfolio register: accountB.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: (OrderedCollection with: depositB with: depositA).! !
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 21:00:35' prior: 50891055!
test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount
	| portfolio portfolioChild accountA accountB depositA depositB |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	accountA _ ReceptiveAccount new.
	accountB _ ReceptiveAccount new.
	
	depositA _ Deposit register: 100 on: accountA.
	depositB _ Deposit register: 300 on: accountB.
	
	portfolioChild register: accountA.
	portfolio register: accountB.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: ((OrderedCollection with: depositB) add: depositA).! !

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:01:02'!
FAILURE!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:01:02'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'lmalvarez 5/24/2021 21:01:13' prior: 50891077!
test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount
	| portfolio portfolioChild accountA accountB depositA depositB |
	
	portfolio _ Portfolio new.
	portfolioChild _ Portfolio new.
	accountA _ ReceptiveAccount new.
	accountB _ ReceptiveAccount new.
	
	depositA _ Deposit register: 100 on: accountA.
	depositB _ Deposit register: 300 on: accountB.
	
	portfolioChild register: accountA.
	portfolio register: accountB.
	portfolio register: portfolioChild.
	
	self assert: portfolio transactions equals: (OrderedCollection with: depositB with: depositA).! !

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:13'!
FAILURE!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:13'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:15'!
FAILURE!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:15'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:24'!
FAILURE!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:24'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:25'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:27'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:28'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:29'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:32'!
FAILURE!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:32'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:33'!
FAILURE!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:02:33'!
FAILURE!

 (OrderedCollection with: depositB with: depositA)!
!Portfolio methodsFor: 'initialization' stamp: 'lmalvarez 5/24/2021 21:04:52' prior: 50889640 overrides: 16896425!
initialize
	
	root := self.
	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:04:57'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:04:58'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:04:59'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:01'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:02'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:03'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:05'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:06'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:07'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:08'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:09'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:10'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:11'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:12'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:13'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:14'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:15'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:16'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:17'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:18'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:20'!
PASSED!

!testRun: #PortfolioTest #test01NewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneReceptiveAccountHasTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithMoreThanOneReceptiveAccountHasTheSameBalanceAsTheSumOfEachBalance stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithANewPortfolioHasABalanceOfCero stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAPortfolioThatHasOneReceptiveAccountShouldHaveTheSameBalanceAsTheAccount stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test06AddingAPortfolioToItselfShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test07AddingTheSamePortfolioTwiceShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test08AddingAReceptiveAccountToAPortfolioWhichHasAPortfolioWithThatSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test09AddingAReceptiveAccountToAPortfolioWhichHasThatSameReceptiveAccountInSomeDeeperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test10AddingAPortfolioToItsChildShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test11AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test12AddingAReceptiveAccountToAChildOfAPortfolioThatHasTheSameReceptiveAccountInSomeUpperLevelShouldRaiseAnError stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test13TransactionInANewPortfolioShouldBeAnEmptyCollection stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test14TransactionInAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test15TransactionInAPortfolioWichHasAPortfolioWithOneReceptiveAccountShouldHaveThatSameTransaction stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

!testRun: #PortfolioTest #test16MultipleTransactionsInAPortfolioTreeShouldBeTheCombinedTransactionsOfEachAccount stamp: 'lmalvarez 5/24/2021 21:05:21'!
PASSED!

----SNAPSHOT----(24 May 2021 21:05:26) CuisUniversity-4532.image priorSource: 17899673!