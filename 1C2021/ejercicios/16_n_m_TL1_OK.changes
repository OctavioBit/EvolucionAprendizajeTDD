----STARTUP---- (8 June 2021 15:40:26) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


Object subclass: #Carts
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Carts category: 'TusLibros' stamp: 'ja 6/8/2021 15:52:28'!
Object subclass: #Carts
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'ja 6/8/2021 15:52:42'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #Carts as: #Cart stamp: 'ja 6/8/2021 15:53:40'!
Smalltalk renameClassNamed: #Carts as: #Cart!
!CartTest methodsFor: 'no messages' stamp: 'ja 6/8/2021 15:53:55'!
test01! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:06:14' prior: 50890107!
test01

	| cart |
	
	cart _ Cart new.
	
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01 stamp: 'ja 6/8/2021 16:06:19'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:06:27'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:06:31' prior: 50890118!
isEmpty
	
	^ true! !

!testRun: #CartTest #test01 stamp: 'ja 6/8/2021 16:06:33'!
PASSED!

!testRun: #CartTest #test01 stamp: 'ja 6/8/2021 16:06:33'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:06:55'!
test01CreateEmptyCart

	| cart |
	
	cart _ Cart new.
	
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:12:14'!
test02ANewItemCanBeAddedToTheCart

	| cart |
	
	cart _ Cart new.
	
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:13:11' prior: 50890136!
test02ANewItemCanBeAddedToTheCart

	| cart |
	
	cart _ Cart new.
	
	cart add: 'anItemValid'.
		
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 16:13:13'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:13:27'!
add: aString 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'ja 6/8/2021 16:14:26'!
Object subclass: #Cart
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:14:24' prior: 50890152!
add: anItem 
	
	items add: anItem.! !

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 16:14:54'!
ERROR!
!UndefinedObject methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:15:00'!
add: aString 
	self shouldBeImplemented.! !

!methodRemoval: UndefinedObject #add: stamp: 'ja 6/8/2021 16:15:14'!
add: aString 
	self shouldBeImplemented.!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:15:28' overrides: 16896425!
initialize
	
	items _ OrderedCollection new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:15:52' prior: 50890122!
isEmpty
	
	^ items isEmpty ! !

!methodRemoval: CartTest #test01 stamp: 'ja 6/8/2021 16:16:08'!
test01

	| cart |
	
	cart _ Cart new.
	
	self assert: cart isEmpty.!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 16:16:10'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 16:16:10'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:22:03' prior: 50890142!
test02ANewItemCanBeAddedToTheCart

	| cart |
	
	cart _ Cart new.
	
	cart add: 'aValidItem' times: 1.
		
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 16:22:25'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:22:33'!
add: aString times: aSmallInteger 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:26:55' prior: 50890207!
add: anItem times: aQuantity 
	
	1 to: aQuantity do:[:aNumber | items add: anItem ].! !

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 16:26:59'!
PASSED!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 16:26:59'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 16:26:59'!
PASSED!

!methodRemoval: Cart #add: stamp: 'ja 6/8/2021 16:27:06'!
add: anItem 
	
	items add: anItem.!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:32:10'!
test03CanNotAddANumberOfItemsLessThanOne

	| cart |
	
	cart _ Cart new.
	
	cart add: 'aValidItem' times: 0.
		
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:35:12' prior: 50890229!
test03CanNotAddANumberOfItemsLessThanOne

	| cart |
	
	cart _ Cart new.
	
	self 
		should:  [	cart add: 'aValidItem' times: 0.]
		raise: Error
	  	withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidQuantityOfItemsErrorDescription.
			self assert: cart isEmpty. ]
		
! !

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 16:35:15'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:35:50'!
invalidQuantityOfItemsErrorDescription

 	^'Invalid quantity of items'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:36:28' prior: 50890212!
add: anItem times: aQuantity 

	aQuantity < 1 ifTrue: [self error: self invalidQuantityOfItemsErrorDescription].
	
	1 to: aQuantity do:[:aNumber | items add: anItem ].! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 16:36:34'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 16:36:34'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 16:36:34'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:37:24'!
assertQuantity: aQuantity

	^ aQuantity < 1 ifTrue: [self error: self invalidQuantityOfItemsErrorDescription]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:37:24' prior: 50890258!
add: anItem times: aQuantity 

	self assertQuantity: aQuantity.
	
	1 to: aQuantity do:[:aNumber | items add: anItem ].! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:38:19'!
test04

	| cart |
	
	cart _ Cart new.
	
	cart add: 'aValidItem' times: 1.1.
		
	self deny:  cart isEmpty.
! !

!testRun: #CartTest #test04 stamp: 'ja 6/8/2021 16:38:24'!
PASSED!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 16:38:24'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 16:38:24'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 16:38:24'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ja 6/8/2021 16:38:24'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:39:45' prior: 50890289!
test04

	| cart |
	
	cart _ Cart new.
	
	cart add: 'aValidItem' times: 'ss'.
		
	self deny:  cart isEmpty.
! !

!testRun: #CartTest #test04 stamp: 'ja 6/8/2021 16:39:53'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:43:00' prior: 50890309!
test04

	| cart |
	
	cart _ Cart new.
	
	cart add: 'aValidItem' times: 3.
		
	self deny:  cart isEmpty.
! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:45:33' prior: 50890318!
test04

	| cart item list |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:45:42' prior: 50890325!
test04

	| cart item list |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.! !

!testRun: #CartTest #test04 stamp: 'ja 6/8/2021 16:45:43'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:45:52'!
list
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:46:01' prior: 50890350!
list
	
	^ items ! !

!testRun: #CartTest #test04 stamp: 'ja 6/8/2021 16:46:03'!
PASSED!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 16:46:03'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 16:46:03'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 16:46:03'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ja 6/8/2021 16:46:03'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:47:16'!
test04CanListAllItemsAdded

	| cart item list |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.! !

!methodRemoval: CartTest #test04 stamp: 'ja 6/8/2021 16:47:16'!
test04

	| cart item list |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:48:59'!
test04AllAddedItemsCanBeListed

	| cart item list |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.! !

!methodRemoval: CartTest #test04CanListAllItemsAdded stamp: 'ja 6/8/2021 16:48:59'!
test04CanListAllItemsAdded

	| cart item list |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:49:18'!
test05

	| cart item list |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:52:46'!
test05CartDoesNotKnowNotAddedItems

	| cart item list |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.! !

!methodRemoval: CartTest #test05 stamp: 'ja 6/8/2021 16:52:46'!
test05

	| cart item list |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:54:21' prior: 50890426!
test05CartDoesNotKnowNotAddedItems

	| cart item notAddedItem list |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	notAddedItem _ 'aNotAddedItem'.
	cart add: item times: 1.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self deny: (cart includes: notAddedItem). ! !

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 16:54:22'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:54:30'!
includes: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:54:47' prior: 50890464!
includes: anItem 
	
	^ items includes: anItem .
	! !

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 16:54:48'!
PASSED!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 16:54:48'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 16:54:48'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 16:54:48'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 16:54:48'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 16:54:48'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 16:59:12'!
test06CartKnowNumberOfOccurrencesOfAnItem

	| cart item |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	
	self assert: (cart occurrencesOf: item) equals: 3
	! !

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 16:59:14'!
ERROR!
!Cart methodsFor: '*Aconcagua-Extensions' stamp: 'ja 6/8/2021 16:59:20'!
occurrencesOf: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: '*Aconcagua-Extensions' stamp: 'ja 6/8/2021 17:00:19' prior: 50890503!
occurrencesOf: anItem 
	
	^ items occurrencesOf: anItem .! !

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 17:00:21'!
PASSED!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:00:21'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 17:00:21'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 17:00:21'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 17:00:21'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 17:00:21'!
PASSED!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 17:00:21'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:00:47'!
test07

	| cart item |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	
	self assert: (cart occurrencesOf: item) equals: 3
	! !

!methodRemoval: CartTest #test07 stamp: 'ja 6/8/2021 17:02:41'!
test07

	| cart item |
	
	cart _ Cart new.
	item _ 'aValidItem'.
	cart add: item times: 3.
	
	self assert: (cart occurrencesOf: item) equals: 3
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:03:19' prior: 50890130!
test01CreateEmptyCart

	| cart |
	
	cart _ Cart with: self.
	
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:03:27' prior: 50890549!
test01CreateEmptyCart

	| cart |
	
	cart _ Cart with: self catalogue.
	
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:04:09'!
catalogue

	^ OrderedCollection with: 'aValidItem'.! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:04:22'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'ja 6/8/2021 17:04:29'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'ja 6/8/2021 17:04:44' prior: 50890568!
with: aCatalogue 
	
	^self new initializeWith: aCatalogue ! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:05:11'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'ja 6/8/2021 17:05:51'!
Object subclass: #Cart
	instanceVariableNames: 'items catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:05:49'!
initializeWith: aCatalogue
	
	items _ OrderedCollection new.
	catalogue _ aCatalogue ! !

!methodRemoval: Cart #initialize stamp: 'ja 6/8/2021 17:06:05'!
initialize
	
	items _ OrderedCollection new.!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:06:13'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:06:44' prior: 50890197!
test02ANewItemCanBeAddedToTheCart

	| cart |
	
	cart _ Cart with: self catalogue.
	
	cart add: 'aValidItem' times: 1.
		
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:06:48' prior: 50890237!
test03CanNotAddANumberOfItemsLessThanOne

	| cart |
	
	cart _ Cart with: self catalogue.
	
	self 
		should:  [	cart add: 'aValidItem' times: 0.]
		raise: Error
	  	withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidQuantityOfItemsErrorDescription.
			self assert: cart isEmpty. ]
		
! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:06:51' prior: 50890392!
test04AllAddedItemsCanBeListed

	| cart item list |
	
	cart _ Cart with: self catalogue.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:07:24' prior: 50890449!
test05CartDoesNotKnowNotAddedItems

	| cart item notAddedItem list |
	
	cart _ Cart with: self catalogue.
	item _ 'aValidItem'.
	notAddedItem _ 'aNotAddedItem'.
	cart add: item times: 1.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: item equals: list first.
	self deny: (cart includes: notAddedItem). ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:07:27' prior: 50890491!
test06CartKnowNumberOfOccurrencesOfAnItem

	| cart item |
	
	cart _ Cart with: self catalogue.
	item _ 'aValidItem'.
	cart add: item times: 3.
	
	self assert: (cart occurrencesOf: item) equals: 3
	! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:07:30'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 17:07:30'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 17:07:30'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 17:07:30'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 17:07:30'!
PASSED!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 17:07:30'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:08:43'!
test07CanNotAddAnItemThatDoNotBelongToTheCatalogue

	| cart item |
	
	cart _ Cart with: self catalogue.
	item _ 'anInvalidItem'.
	cart add: item times: 3.
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:09:45' prior: 50890677!
test07CanNotAddAnItemThatDoNotBelongToTheCatalogue

	| cart item |
	
	cart _ Cart with: self catalogue.
	item _ 'anInvalidItem'.
	
	self 
		should:  [	cart add: item times: 1.]
		raise: Error
	  	withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidItemErrorDescription.
			self assert: cart isEmpty. 
			self deny: (cart includes: item)]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:10:00' prior: 50890685!
test07CanNotAddAnItemThatDoNotBelongToTheCatalogue

	| cart item |
	
	cart _ Cart with: self catalogue.
	item _ 'anInvalidItem'.
	
	self 
		should:  [	cart add: item times: 1.]
		raise: Error
	  	withExceptionDo: [:anError | 
			self assert: anError messageText equals: cart invalidItemErrorDescription.
			self assert: cart isEmpty. 
			self deny: (cart includes: item)]! !

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/8/2021 17:10:03'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:10:52' prior: 50890282!
add: anItem times: aQuantity 

	self assertQuantity: aQuantity.
	(catalogue includes: anItem) ifFalse: [self error: self invalidItemErrorDescription].
	
	1 to: aQuantity do:[:aNumber | items add: anItem ].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:11:14'!
invalidItemErrorDescription

	^'Invalid item.'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:11:34'!
assertItem: anItem

	^ (catalogue includes: anItem) ifFalse: [self error: self invalidItemErrorDescription]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:11:34' prior: 50890718!
add: anItem times: aQuantity 

	self assertQuantity: aQuantity.
	self assertItem: anItem.
	
	1 to: aQuantity do:[:aNumber | items add: anItem ].! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:11:38'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 17:11:38'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 17:11:38'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 17:11:38'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 17:11:38'!
PASSED!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 17:11:38'!
PASSED!

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/8/2021 17:11:38'!
PASSED!
!Behavior method!
with: aCatalogue
	^ [
	([
	(self coverAll:
		{23 to: 26}) new ] valueCoveringAll:
		{28 to: 30}) initializeWith:
		(aCatalogue
			cover: (48 to: 57)
			declaredAt: (7 to: 16)) ] valueCoveringAll:
		{32 to: 46}.! !
!Behavior method!
initializeWith: aCatalogue
	(items _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (31 to: 35)
		declaredAt: (31 to: 35).
	(catalogue _ aCatalogue
		cover: (75 to: 84)
		declaredAt: (17 to: 26))
		cover: (63 to: 71)
		declaredAt: (63 to: 71).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:12:21'!
PASSED!
!Behavior method!
add: anItem times: aQuantity
	[
	(self coverAll:
		{33 to: 36}) assertQuantity:
		(aQuantity
			cover: (54 to: 62)
			declaredAt: (20 to: 28)) ] valueCoveringAll:
		{38 to: 52}.
	[
	(self coverAll:
		{66 to: 69}) assertItem:
		(anItem
			cover: (83 to: 88)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{71 to: 81}.
	[
	(1 coverAll:
		{94 to: 94})
		to:
			(aQuantity
				cover: (100 to: 108)
				declaredAt: (20 to: 28))
		do: [ :aNumber |
			[
			(items
				cover: (125 to: 129)
				declaredAt: (125 to: 129)) add:
				(anItem
					cover: (136 to: 141)
					declaredAt: (6 to: 11)) ] valueCoveringAll:
				{131 to: 134} ]] valueCoveringAll:
		{96 to: 98. 110 to: 112}.! !
!Behavior method!
assertQuantity: aQuantity
	^ [
	([
	(aQuantity
		cover: (31 to: 39)
		declaredAt: (17 to: 25)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifTrue: [
		[
		(self coverAll:
			{54 to: 57}) error:
			([
			(self coverAll:
				{66 to: 69}) invalidQuantityOfItemsErrorDescription ] valueCoveringAll:
				{71 to: 108}) ] valueCoveringAll:
			{59 to: 64} ]] valueCoveringAll:
		{45 to: 51}.! !
!Behavior method!
assertItem: anItem
	^ [
	([
	(catalogue
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) includes:
		(anItem
			cover: (45 to: 50)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{35 to: 43}) ifFalse: [
		[
		(self coverAll:
			{63 to: 66}) error:
			([
			(self coverAll:
				{75 to: 78}) invalidItemErrorDescription ] valueCoveringAll:
				{80 to: 106}) ] valueCoveringAll:
			{68 to: 73} ]] valueCoveringAll:
		{53 to: 60}.! !

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 17:12:21'!
PASSED!
!Behavior method!
invalidQuantityOfItemsErrorDescription
	^ 'Invalid quantity of items' coverAll:
		{44 to: 70}.! !

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 17:12:21'!
PASSED!
!Behavior method!
list
	^ items
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 17:12:21'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (24 to: 28)
		declaredAt: (24 to: 28)) includes:
		(anItem
			cover: (40 to: 45)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{30 to: 38}.! !

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 17:12:21'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (29 to: 33)
		declaredAt: (29 to: 33)) occurrencesOf:
		(anItem
			cover: (50 to: 55)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{35 to: 48}.! !

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 17:12:21'!
PASSED!
!Behavior method!
invalidItemErrorDescription
	^ 'Invalid item.' coverAll:
		{32 to: 46}.! !

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/8/2021 17:12:21'!
PASSED!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:13:27'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 17:13:27'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 17:13:27'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 17:13:27'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 17:13:27'!
PASSED!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 17:13:27'!
PASSED!

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/8/2021 17:13:27'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:14:35' prior: 50890624!
test04AllAddedItemsCanBeListed

	| cart item list |
	
	cart _ Cart with: self catalogue.
	item _ 'aValidItem'.
	cart add: item times: 3.
	list _ cart list.
	
	self deny: cart isEmpty.
	self assert: cart includes: item.
	self assert: item equals: list first.
	self assert: item equals: list second.
	self assert: item equals: list third.! !

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 17:14:36'!
PASSED!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:14:36'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 17:14:36'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 17:14:36'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 17:14:36'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 17:14:36'!
PASSED!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 17:14:36'!
PASSED!

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/8/2021 17:14:36'!
PASSED!
!Behavior method!
with: aCatalogue
	^ [
	([
	(self coverAll:
		{23 to: 26}) new ] valueCoveringAll:
		{28 to: 30}) initializeWith:
		(aCatalogue
			cover: (48 to: 57)
			declaredAt: (7 to: 16)) ] valueCoveringAll:
		{32 to: 46}.! !
!Behavior method!
initializeWith: aCatalogue
	(items _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (31 to: 35)
		declaredAt: (31 to: 35).
	(catalogue _ aCatalogue
		cover: (75 to: 84)
		declaredAt: (17 to: 26))
		cover: (63 to: 71)
		declaredAt: (63 to: 71).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:14:41'!
PASSED!
!Behavior method!
add: anItem times: aQuantity
	[
	(self coverAll:
		{33 to: 36}) assertQuantity:
		(aQuantity
			cover: (54 to: 62)
			declaredAt: (20 to: 28)) ] valueCoveringAll:
		{38 to: 52}.
	[
	(self coverAll:
		{66 to: 69}) assertItem:
		(anItem
			cover: (83 to: 88)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{71 to: 81}.
	[
	(1 coverAll:
		{94 to: 94})
		to:
			(aQuantity
				cover: (100 to: 108)
				declaredAt: (20 to: 28))
		do: [ :aNumber |
			[
			(items
				cover: (125 to: 129)
				declaredAt: (125 to: 129)) add:
				(anItem
					cover: (136 to: 141)
					declaredAt: (6 to: 11)) ] valueCoveringAll:
				{131 to: 134} ]] valueCoveringAll:
		{96 to: 98. 110 to: 112}.! !
!Behavior method!
assertQuantity: aQuantity
	^ [
	([
	(aQuantity
		cover: (31 to: 39)
		declaredAt: (17 to: 25)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifTrue: [
		[
		(self coverAll:
			{54 to: 57}) error:
			([
			(self coverAll:
				{66 to: 69}) invalidQuantityOfItemsErrorDescription ] valueCoveringAll:
				{71 to: 108}) ] valueCoveringAll:
			{59 to: 64} ]] valueCoveringAll:
		{45 to: 51}.! !
!Behavior method!
assertItem: anItem
	^ [
	([
	(catalogue
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) includes:
		(anItem
			cover: (45 to: 50)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{35 to: 43}) ifFalse: [
		[
		(self coverAll:
			{63 to: 66}) error:
			([
			(self coverAll:
				{75 to: 78}) invalidItemErrorDescription ] valueCoveringAll:
				{80 to: 106}) ] valueCoveringAll:
			{68 to: 73} ]] valueCoveringAll:
		{53 to: 60}.! !

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 17:14:41'!
PASSED!
!Behavior method!
invalidQuantityOfItemsErrorDescription
	^ 'Invalid quantity of items' coverAll:
		{44 to: 70}.! !

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 17:14:41'!
PASSED!
!Behavior method!
list
	^ items
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (24 to: 28)
		declaredAt: (24 to: 28)) includes:
		(anItem
			cover: (40 to: 45)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{30 to: 38}.! !

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 17:14:41'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 17:14:41'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (29 to: 33)
		declaredAt: (29 to: 33)) occurrencesOf:
		(anItem
			cover: (50 to: 55)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{35 to: 48}.! !

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 17:14:41'!
PASSED!
!Behavior method!
invalidItemErrorDescription
	^ 'Invalid item.' coverAll:
		{32 to: 46}.! !

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/8/2021 17:14:41'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:15:22' prior: 50890738!
add: anItem times: aQuantity 

	self assertQuantity: aQuantity.
	self assertItem: anItem.
	
	1 to: aQuantity do:[ items add: anItem ].! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:15:24'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 17:15:24'!
ERROR!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 17:15:24'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 17:15:24'!
ERROR!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 17:15:24'!
ERROR!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 17:15:24'!
ERROR!

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/8/2021 17:15:24'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:11:34' prior: 50891065!
add: anItem times: aQuantity 

	self assertQuantity: aQuantity.
	self assertItem: anItem.
	
	1 to: aQuantity do:[:aNumber | items add: anItem ].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ja 6/8/2021 17:15:40' prior: 50891094!
add: anItem times: aQuantity 

	self assertQuantity: aQuantity.
	self assertItem: anItem.
	
	1 to: aQuantity do: [:aNumber | items add: anItem ].! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/8/2021 17:15:42'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/8/2021 17:15:42'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/8/2021 17:15:42'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/8/2021 17:15:42'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/8/2021 17:15:42'!
PASSED!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/8/2021 17:15:42'!
PASSED!

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/8/2021 17:15:42'!
PASSED!
!Cart class methodsFor: 'instance creation' stamp: 'ja 6/8/2021 17:15:50' prior: 50890577!
with: aCatalogue 
	
	^ self new initializeWith: aCatalogue ! !

----QUIT----(8 June 2021 17:18:12) CuisUniversity-4532.image priorSource: 17869646!

----STARTUP---- (9 June 2021 19:26:38) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/9/2021 19:46:03'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/9/2021 19:46:04'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/9/2021 19:46:04'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/9/2021 19:46:04'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/9/2021 19:46:04'!
PASSED!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/9/2021 19:46:04'!
PASSED!

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/9/2021 19:46:04'!
PASSED!
!Cart methodsFor: 'accessing' stamp: 'ja 6/9/2021 19:46:15' prior: 50890354!
list
	
	^ items copy! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/9/2021 19:46:16'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/9/2021 19:46:16'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/9/2021 19:46:16'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/9/2021 19:46:16'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/9/2021 19:46:16'!
PASSED!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/9/2021 19:46:16'!
PASSED!

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/9/2021 19:46:16'!
PASSED!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/9/2021 19:46:21'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/9/2021 19:46:21'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/9/2021 19:46:21'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/9/2021 19:46:21'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/9/2021 19:46:21'!
PASSED!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/9/2021 19:46:21'!
PASSED!

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/9/2021 19:46:21'!
PASSED!

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/9/2021 19:49:59'!
PASSED!

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/9/2021 19:49:59'!
PASSED!

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/9/2021 19:49:59'!
PASSED!

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/9/2021 19:49:59'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/9/2021 19:49:59'!
PASSED!

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/9/2021 19:49:59'!
PASSED!

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/9/2021 19:49:59'!
PASSED!
!Behavior method!
with: aCatalogue
	^ [
	([
	(self coverAll:
		{24 to: 27}) new ] valueCoveringAll:
		{29 to: 31}) initializeWith:
		(aCatalogue
			cover: (49 to: 58)
			declaredAt: (7 to: 16)) ] valueCoveringAll:
		{33 to: 47}.! !
!Behavior method!
initializeWith: aCatalogue
	(items _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (31 to: 35)
		declaredAt: (31 to: 35).
	(catalogue _ aCatalogue
		cover: (75 to: 84)
		declaredAt: (17 to: 26))
		cover: (63 to: 71)
		declaredAt: (63 to: 71).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) isEmpty ] valueCoveringAll:
		{20 to: 26}.! !

!testRun: #CartTest #test01CreateEmptyCart stamp: 'ja 6/9/2021 19:50:03'!
PASSED!
!Behavior method!
add: anItem times: aQuantity
	[
	(self coverAll:
		{33 to: 36}) assertQuantity:
		(aQuantity
			cover: (54 to: 62)
			declaredAt: (20 to: 28)) ] valueCoveringAll:
		{38 to: 52}.
	[
	(self coverAll:
		{66 to: 69}) assertItem:
		(anItem
			cover: (83 to: 88)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{71 to: 81}.
	[
	(1 coverAll:
		{94 to: 94})
		to:
			(aQuantity
				cover: (100 to: 108)
				declaredAt: (20 to: 28))
		do: [ :aNumber |
			[
			(items
				cover: (126 to: 130)
				declaredAt: (126 to: 130)) add:
				(anItem
					cover: (137 to: 142)
					declaredAt: (6 to: 11)) ] valueCoveringAll:
				{132 to: 135} ]] valueCoveringAll:
		{96 to: 98. 110 to: 112}.! !
!Behavior method!
assertQuantity: aQuantity
	^ [
	([
	(aQuantity
		cover: (31 to: 39)
		declaredAt: (17 to: 25)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifTrue: [
		[
		(self coverAll:
			{54 to: 57}) error:
			([
			(self coverAll:
				{66 to: 69}) invalidQuantityOfItemsErrorDescription ] valueCoveringAll:
				{71 to: 108}) ] valueCoveringAll:
			{59 to: 64} ]] valueCoveringAll:
		{45 to: 51}.! !
!Behavior method!
assertItem: anItem
	^ [
	([
	(catalogue
		cover: (25 to: 33)
		declaredAt: (25 to: 33)) includes:
		(anItem
			cover: (45 to: 50)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{35 to: 43}) ifFalse: [
		[
		(self coverAll:
			{63 to: 66}) error:
			([
			(self coverAll:
				{75 to: 78}) invalidItemErrorDescription ] valueCoveringAll:
				{80 to: 106}) ] valueCoveringAll:
			{68 to: 73} ]] valueCoveringAll:
		{53 to: 60}.! !

!testRun: #CartTest #test02ANewItemCanBeAddedToTheCart stamp: 'ja 6/9/2021 19:50:03'!
PASSED!
!Behavior method!
invalidQuantityOfItemsErrorDescription
	^ 'Invalid quantity of items' coverAll:
		{44 to: 70}.! !

!testRun: #CartTest #test03CanNotAddANumberOfItemsLessThanOne stamp: 'ja 6/9/2021 19:50:03'!
PASSED!
!Behavior method!
list
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) copy ] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (24 to: 28)
		declaredAt: (24 to: 28)) includes:
		(anItem
			cover: (40 to: 45)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{30 to: 38}.! !

!testRun: #CartTest #test04AllAddedItemsCanBeListed stamp: 'ja 6/9/2021 19:50:03'!
PASSED!

!testRun: #CartTest #test05CartDoesNotKnowNotAddedItems stamp: 'ja 6/9/2021 19:50:03'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (29 to: 33)
		declaredAt: (29 to: 33)) occurrencesOf:
		(anItem
			cover: (50 to: 55)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{35 to: 48}.! !

!testRun: #CartTest #test06CartKnowNumberOfOccurrencesOfAnItem stamp: 'ja 6/9/2021 19:50:03'!
PASSED!
!Behavior method!
invalidItemErrorDescription
	^ 'Invalid item.' coverAll:
		{32 to: 46}.! !

!testRun: #CartTest #test07CanNotAddAnItemThatDoNotBelongToTheCatalogue stamp: 'ja 6/9/2021 19:50:03'!
PASSED!