----STARTUP---- (10 June 2021 18:22:39) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


!classRemoval: #TusLibrosCart stamp: 'JR 6/10/2021 18:23:02'!
Object subclass: #TusLibrosCart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'JR 6/10/2021 18:23:02'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\2021-1c-main\20-TusLibros\iteracion1\TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'JR 6/10/2021 19:43:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'JR 6/10/2021 19:45:29'!
test01CanNotCheckOutEmptyCart

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 19:45:39' prior: 50889151!
test01CanNotCheckOutEmptyCart

	|cart|
	

! !

TestCase subclass: #CartAndCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartAndCashierTest category: 'TusLibros' stamp: 'JR 6/10/2021 19:47:25'!
TestCase subclass: #CartAndCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartAndCashierTest stamp: 'JR 6/10/2021 19:47:31'!
TestCase subclass: #CartAndCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #CartTest as: #CartAndCashierTest stamp: 'JR 6/10/2021 19:47:40'!
Smalltalk renameClassNamed: #CartTest as: #CartAndCashierTest!

!classRemoval: #CashierTest stamp: 'JR 6/10/2021 19:48:11'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartAndCashierTest methodsFor: 'cashier tests' stamp: 'JR 6/10/2021 19:48:21'!
test01CanNotCheckOutEmptyCart! !
!CartAndCashierTest methodsFor: 'cashier tests' stamp: 'JR 6/10/2021 19:48:40'!
test09CanNotCheckOutEmptyCart! !

!methodRemoval: CartAndCashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 19:48:40'!
test01CanNotCheckOutEmptyCart!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'JR 6/10/2021 19:49:59'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartAndCashierTest methodsFor: 'cashier tests' stamp: 'JR 6/10/2021 19:49:54' prior: 50889193!
test09CanNotCheckOutEmptyCart

	| cart cashier|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	! !

1/6 class!

Date today !

Date newDay: 12 month: #July year: 1999.!

Date month: #July year: 1999.!
!CartAndCashierTest methodsFor: 'cashier tests' stamp: 'JR 6/10/2021 20:06:50' prior: 50889208!
test09CanNotCheckOutEmptyCart

	| cart cashier creditCard|
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := Date newDay: 12 month: #July year: 1999.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	! !
!Cashier methodsFor: 'no messages' stamp: 'JR 6/10/2021 20:07:26'!
emptyCartErrorMessage

	^'Can not check out empty cart'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:08:08'!
checkOut: aCart with: aCreditCard

	^self emptyCartErrorMessage ! !

!testRun: #CartAndCashierTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/10/2021 20:08:10'!
PASSED!

!testRun: #CartAndCashierTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/10/2021 20:08:10'!
PASSED!

!testRun: #CartAndCashierTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/10/2021 20:08:11'!
PASSED!

!testRun: #CartAndCashierTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/10/2021 20:08:11'!
PASSED!

!testRun: #CartAndCashierTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/10/2021 20:08:11'!
PASSED!

!testRun: #CartAndCashierTest #test06CartRemembersAddedItems stamp: 'JR 6/10/2021 20:08:11'!
PASSED!

!testRun: #CartAndCashierTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/10/2021 20:08:11'!
PASSED!

!testRun: #CartAndCashierTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/10/2021 20:08:11'!
PASSED!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:08:11'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:08:11'!
FAILURE!

!testRun: #CartAndCashierTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/10/2021 20:08:14'!
PASSED!

!testRun: #CartAndCashierTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/10/2021 20:08:15'!
PASSED!

!testRun: #CartAndCashierTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/10/2021 20:08:15'!
PASSED!

!testRun: #CartAndCashierTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/10/2021 20:08:15'!
PASSED!

!testRun: #CartAndCashierTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/10/2021 20:08:15'!
PASSED!

!testRun: #CartAndCashierTest #test06CartRemembersAddedItems stamp: 'JR 6/10/2021 20:08:15'!
PASSED!

!testRun: #CartAndCashierTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/10/2021 20:08:15'!
PASSED!

!testRun: #CartAndCashierTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/10/2021 20:08:15'!
PASSED!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:08:15'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:08:15'!
FAILURE!
!CartAndCashierTest methodsFor: 'cashier tests' stamp: 'JR 6/10/2021 20:08:36' prior: 50889218!
test09CanNotCheckOutEmptyCart

	| cart cashier creditCard|
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := Date newDay: 12 month: #July year: 1999.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]
	
	! !
!CartAndCashierTest methodsFor: 'cashier tests' stamp: 'JR 6/10/2021 20:08:40' prior: 50889311!
test09CanNotCheckOutEmptyCart

	| cart cashier creditCard|
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := Date newDay: 12 month: #July year: 1999.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	
	! !
!CartAndCashierTest methodsFor: 'cashier tests' stamp: 'JR 6/10/2021 20:09:00' prior: 50889326!
test09CanNotCheckOutEmptyCart

	| cart cashier creditCard|
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := Date newDay: 12 month: #July year: 1999.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	! !

!testRun: #CartAndCashierTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/10/2021 20:09:18'!
PASSED!

!testRun: #CartAndCashierTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/10/2021 20:09:18'!
PASSED!

!testRun: #CartAndCashierTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/10/2021 20:09:18'!
PASSED!

!testRun: #CartAndCashierTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/10/2021 20:09:18'!
PASSED!

!testRun: #CartAndCashierTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/10/2021 20:09:18'!
PASSED!

!testRun: #CartAndCashierTest #test06CartRemembersAddedItems stamp: 'JR 6/10/2021 20:09:18'!
PASSED!

!testRun: #CartAndCashierTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/10/2021 20:09:18'!
PASSED!

!testRun: #CartAndCashierTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/10/2021 20:09:18'!
PASSED!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:09:22'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:09:22'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:10:06' prior: 50889237!
checkOut: aCart with: aCreditCard

	self emptyCartErrorMessage ! !

!testRun: #CartAndCashierTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/10/2021 20:10:08'!
PASSED!

!testRun: #CartAndCashierTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/10/2021 20:10:08'!
PASSED!

!testRun: #CartAndCashierTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/10/2021 20:10:08'!
PASSED!

!testRun: #CartAndCashierTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/10/2021 20:10:08'!
PASSED!

!testRun: #CartAndCashierTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/10/2021 20:10:08'!
PASSED!

!testRun: #CartAndCashierTest #test06CartRemembersAddedItems stamp: 'JR 6/10/2021 20:10:08'!
PASSED!

!testRun: #CartAndCashierTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/10/2021 20:10:08'!
PASSED!

!testRun: #CartAndCashierTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/10/2021 20:10:08'!
PASSED!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:10:08'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:10:08'!
FAILURE!
!CartAndCashierTest methodsFor: 'cashier tests' stamp: 'JR 6/10/2021 20:13:21' prior: 50889341!
test09CanNotCheckOutEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := Date newDay: 12 month: #July year: 1999.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	! !

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:13:24'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:13:24'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:16:27'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:16:27'!
FAILURE!
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
checkOut: aCart with: aCreditCard
	[
	(self coverAll:
		{37 to: 40}) emptyCartErrorMessage ] valueCoveringAll:
		{42 to: 62}.! !
!Behavior method!
emptyCartErrorMessage
	^ 'Can not check out empty cart' coverAll:
		{26 to: 55}.! !

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:20:42'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:20:42'!
FAILURE!
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
checkOut: aCart with: aCreditCard
	[
	(self coverAll:
		{37 to: 40}) emptyCartErrorMessage ] valueCoveringAll:
		{42 to: 62}.! !
!Behavior method!
emptyCartErrorMessage
	^ 'Can not check out empty cart' coverAll:
		{26 to: 55}.! !

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:21:05'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:21:06'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:22:51'!
FAILURE!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:22:51'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:24:26' prior: 50889390!
checkOut: aCart with: aCreditCard

	self error: self emptyCartErrorMessage ! !

!testRun: #CartAndCashierTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/10/2021 20:24:27'!
PASSED!

!testRun: #CartAndCashierTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/10/2021 20:24:27'!
PASSED!

!testRun: #CartAndCashierTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/10/2021 20:24:28'!
PASSED!

!testRun: #CartAndCashierTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/10/2021 20:24:28'!
PASSED!

!testRun: #CartAndCashierTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/10/2021 20:24:28'!
PASSED!

!testRun: #CartAndCashierTest #test06CartRemembersAddedItems stamp: 'JR 6/10/2021 20:24:28'!
PASSED!

!testRun: #CartAndCashierTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/10/2021 20:24:28'!
PASSED!

!testRun: #CartAndCashierTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/10/2021 20:24:28'!
PASSED!

!testRun: #CartAndCashierTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:24:28'!
PASSED!

!classRenamed: #CartAndCashierTest as: #CartTest stamp: 'JR 6/10/2021 20:25:11'!
Smalltalk renameClassNamed: #CartAndCashierTest as: #CartTest!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'JR 6/10/2021 20:25:21'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: CartTest #test09CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:25:39'!
test09CanNotCheckOutEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := Date newDay: 12 month: #July year: 1999.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	!
!CashierTest methodsFor: 'no messages' stamp: 'JR 6/10/2021 20:25:56'!
test01CanNotCheckOutEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := Date newDay: 12 month: #July year: 1999.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:26:08'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:26:21'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:26:32'!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:26:50'!
itemNotSellByTheStore
	
	^'invalidBook'! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:26:52'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:27:46'!
test02CheckOutCartReturnsTotalToPay

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := Date newDay: 12 month: #July year: 1999.
	
	cashier checkOut: cart with: creditCard
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:28:03'!
createCreditCard
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:28:10' prior: 50889599!
test01CanNotCheckOutEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := 
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:28:16' prior: 50889645!
createCreditCard
	
	^Date newDay: 12 month: #July year: 1999.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:28:18' prior: 50889665!
createCreditCard
	
	^Date newDay: 12 month: #July year: 1999! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:28:29' prior: 50889651!
test01CanNotCheckOutEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := self createCreditCard.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:28:31'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:28:42' prior: 50889635!
test02CheckOutCartReturnsTotalToPay

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := Cashier new.
	creditCard := self createCreditCard.
	
	cashier checkOut: cart with: creditCard
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:33:19' prior: 50889693!
test02CheckOutCartReturnsTotalToPay

	| cart cashier creditCard priceList|
	
	cart := self createCart.
	priceList := self defaultPriceList.
	cashier := Cashier acceptingItemsOf: priceList.
	creditCard := self createCreditCard.
	
	cashier checkOut: cart with: creditCard
		! !

'hola' asSymbol!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:37:14'!
defaultPriceList
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	^priceList ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:37:18' prior: 50889715!
defaultPriceList
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList ! !

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'JR 6/10/2021 20:37:55'!
Cashier class
	instanceVariableNames: 'priceList'!
!Cashier class methodsFor: 'instance creation' stamp: 'JR 6/10/2021 20:37:53'!
acceptingItemsOf: aPriceList

	priceList := aPriceList 

! !
!Cashier class methodsFor: 'instance creation' stamp: 'JR 6/10/2021 20:38:24' prior: 50889733!
acceptingItemsOf: aPriceList

	^self new initializeAcceptingItemsOf: aPriceList

! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'JR 6/10/2021 20:38:49'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'JR 6/10/2021 20:38:48'!
initializeAcceptingItemsOf: aPriceList

	priceList := aPriceList ! !

Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'JR 6/10/2021 20:39:08'!
Cashier class
	instanceVariableNames: ''!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:40:32' prior: 50889703!
test02CheckOutCartReturnsTotalToPay

	| cart cashier creditCard priceList|
	
	cart := self createCart.
	priceList := self defaultPriceList.
	cashier := Cashier acceptingItemsOf: priceList.
	creditCard := self createCreditCard.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self assert: 7500 equals: (cashier checkOut: cart with: creditCard)
		! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:41:02' prior: 50889533!
checkOut: aCart with: aCreditCard

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:41:33' prior: 50889775!
checkOut: aCart with: aCreditCard

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:45:47' prior: 50889782!
checkOut: aCart with: aCreditCard

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	priceList inject: 0 into: [:book :price | (aCart includes: book) ifTrue: [price * (aCart occurrencesOf: book)] ]
	
	! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:45:50'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:45:50'!
FAILURE!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:45:50'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:46:01' prior: 50889789!
checkOut: aCart with: aCreditCard

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	^priceList inject: 0 into: [:book :price | (aCart includes: book) ifTrue: [price * (aCart occurrencesOf: book)] ]
	
	! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:46:03'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:46:03'!
FAILURE!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:46:03'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:46:16' prior: 50889809!
checkOut: aCart with: aCreditCard

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	^priceList inject: 0 into: [:book :price | (aCart includes: book) ifTrue: [^(price * (aCart occurrencesOf: book))] ]
	
	! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:46:19'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:46:20'!
FAILURE!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:46:20'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:47:11' prior: 50889829!
checkOut: aCart with: aCreditCard

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	^priceList inject: 0 into: [:book | (aCart includes: book) ifTrue: [(priceList at: book) * (aCart occurrencesOf: book)] ]
	
	! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:47:13'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:47:13'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:47:13'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:48:55' prior: 50889849!
checkOut: aCart with: aCreditCard
	
	|totalToPay|
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	totalToPay := 0.
	
	priceList keysAndValuesDo: [:item :price | (aCart includes: item) ifTrue: [ price * (aCart occurrencesOf: item)] ].
	
	^totalToPay! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:48:58'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:48:58'!
FAILURE!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:48:58'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:49:10' prior: 50889869!
checkOut: aCart with: aCreditCard
	
	|totalToPay|
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	totalToPay := 0.
	
	priceList keysAndValuesDo: [:item :price | (aCart includes: item) ifTrue: [ totalToPay + price * (aCart occurrencesOf: item)] ].
	
	^totalToPay! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:49:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:49:12'!
FAILURE!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:49:12'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:49:39' prior: 50889890!
checkOut: aCart with: aCreditCard
	
	|totalToPay|
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	totalToPay := 0.
	
	priceList keysAndValuesDo: [:item :price | (aCart includes: item) ifTrue: [ totalToPay := totalToPay + price * (aCart occurrencesOf: item)] ].
	
	^totalToPay! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:49:40'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:49:40'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:49:49' prior: 50889912!
checkOut: aCart with: aCreditCard
	
	|totalToPay|
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	totalToPay := 0.
	
	priceList keysAndValuesDo: [:item :price | (aCart includes: item) 
			ifTrue: [ totalToPay := totalToPay + price * (aCart occurrencesOf: item)] ].
	
	^totalToPay! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:50:09' prior: 50889931!
checkOut: aCart with: aCreditCard
	
	|totalToPay|
	
	self assertCartIsNotEmpty: aCart.
	
	totalToPay := 0.
	
	priceList keysAndValuesDo: [:item :price | (aCart includes: item) 
			ifTrue: [ totalToPay := totalToPay + price * (aCart occurrencesOf: item)] ].
	
	^totalToPay! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:50:29'!
assertCartIsNotEmpty: aCart

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/10/2021 20:50:43'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/10/2021 20:50:43'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:52:14'!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier creditCard priceList|
	
	cart := self createCart.
	priceList := self defaultPriceList.
	cashier := Cashier acceptingItemsOf: priceList.
	creditCard := self createCreditCard.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self assert: 7500 equals: (cashier checkOut: cart with: creditCard)
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:52:34' prior: 50889967!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier creditCard priceList|
	
	cart := self createCart.
	priceList := self defaultPriceList.
	cashier := Cashier acceptingItemsOf: priceList.
	creditCard := self createCreditCard.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:53:12'!
createCashier
	
	^Cashier acceptingItemsOf: self defaultPriceList.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:53:28' prior: 50889675!
test01CanNotCheckOutEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:53:54' prior: 50889761!
test02CheckOutCartReturnsTotalToPay

	| cart cashier creditCard|
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self assert: 7500 equals: (cashier checkOut: cart with: creditCard)
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:54:10' prior: 50889982!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:54:19' prior: 50890033!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:56:27' prior: 50890050!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/10/2021 20:56:40' prior: 50890067!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage]	! !
!Cashier methodsFor: 'error messages' stamp: 'JR 6/10/2021 20:57:05'!
expiredCreditCardErrorMessage

	^'The credit card is expired'! !

----QUIT----(10 June 2021 21:26:03) CuisUniversity-4532.image priorSource: 17833099!

----STARTUP---- (14 June 2021 16:19:26) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!

!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:23:28' prior: 50889944!
checkOut: aCart with: aCreditCard
	
	|totalToPay|
	
	self assertCartIsNotEmpty: aCart.
	
	totalToPay := aCart totalPriceOfProducts.
	
	^totalToPay! !
!Cart methodsFor: 'nil' stamp: 'JR 6/14/2021 16:24:43'!
totalPriceOfProducts

	|totalToPay|
	
	totalToPay := 0.
	
	catalog keysAndValuesDo: [:item :price | (self includes: item) 
			ifTrue: [ totalToPay := totalToPay + price * (self occurrencesOf: item)] ].
		
	^totalToPay! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:25:18' prior: 50890109!
checkOut: aCart with: aCreditCard
	
	
	self assertCartIsNotEmpty: aCart.
	
	^aCart totalPriceOfProducts.
	! !
!CartTest methodsFor: 'support' stamp: 'JR 6/14/2021 16:25:53'!
defaultPriceList
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList ! !
!CartTest methodsFor: 'support' stamp: 'JR 6/14/2021 16:26:11' prior: 50889127!
defaultCatalog
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList ! !

!methodRemoval: CartTest #defaultPriceList stamp: 'JR 6/14/2021 16:26:13'!
defaultPriceList
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:26:28' prior: 50889619!
defaultCatalog
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList ! !

!methodRemoval: CashierTest #defaultPriceList stamp: 'JR 6/14/2021 16:26:31'!
defaultPriceList
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/14/2021 16:26:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/14/2021 16:26:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:26:48'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:26:48'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'JR 6/14/2021 16:27:28' prior: 50888988!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Dictionary new.! !
!Cart methodsFor: 'assertions' stamp: 'JR 6/14/2021 16:28:33' prior: 50888975!
assertIsValidItem: anItem

	(catalog includesKey: anItem asSymbol) ifFalse: [ self error: self invalidItemErrorMessage ]! !

(Dictionary new add: #a->4; add: #a->1; add: #c->1; add: #d->2; yourself) occurrencesOf: #a!

(Dictionary new add: #a->4; add: #a->1; add: #c->1; add: #d->2; yourself) occurrencesOf: 1!
!Cart methodsFor: 'queries' stamp: 'JR 6/14/2021 16:30:21' prior: 50888994!
occurrencesOf: anItem

	^(items keys) occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'JR 6/14/2021 16:30:33' prior: 50888998!
includes: anItem

	^items includesKey: anItem asSymbol! !

(Dictionary new add: #a->4; add: #a->1; add: #c->1; add: #d->2; yourself) keys !
!Cart methodsFor: 'queries' stamp: 'JR 6/14/2021 16:30:53' prior: 50890197!
occurrencesOf: anItem

	^(items keys) occurrencesOf: anItem asSymbol! !
!Cart methodsFor: 'testing' stamp: 'JR 6/14/2021 16:31:23' prior: 50890202!
includes: anItem

	^items includes: anItem asSymbol! !
!Cart methodsFor: 'queries' stamp: 'JR 6/14/2021 16:31:34' prior: 50890209!
occurrencesOf: anItem

	^items occurrencesOf: anItem ! !
!Cart methodsFor: 'testing' stamp: 'JR 6/14/2021 16:31:40' prior: 50890214!
includes: anItem

	^items includes: anItem ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/14/2021 16:32:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/14/2021 16:32:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:32:04'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/14/2021 16:32:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/14/2021 16:32:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/14/2021 16:32:04'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/14/2021 16:32:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/14/2021 16:32:04'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/14/2021 16:32:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/14/2021 16:32:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:32:10'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:32:10'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:32:35'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:32:35'!
ERROR!

'validBook' asSymbol!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:34:08'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:34:08'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:35:10'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:35:10'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:35:16'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:35:20'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:35:20'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:35:24'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:35:30'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:35:30'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:35:34'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/14/2021 16:36:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:36:10'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:36:10'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:36:23'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:36:40'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:36:40'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:36:45'!
ERROR!

!classRemoval: #Cashier stamp: 'JR 6/14/2021 16:36:58'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'JR 6/14/2021 16:36:59'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'JR 6/14/2021 16:36:59'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'JR 6/14/2021 16:37:00'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/14/2021 16:37:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/14/2021 16:37:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:37:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/14/2021 16:37:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/14/2021 16:37:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/14/2021 16:37:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/14/2021 16:37:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/14/2021 16:37:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:37:24'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 16:37:24'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:37:24'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:37:24'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/14/2021 16:37:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/14/2021 16:37:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:37:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/14/2021 16:37:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/14/2021 16:37:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/14/2021 16:37:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/14/2021 16:37:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/14/2021 16:37:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:37:36'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 16:37:37'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:38:05' prior: 50890637!
checkOut: aCart with: aCreditCard
	
	self assertCartIsNotEmpty: aCart.
	
	^aCart totalPriceOfProducts! !
!Cart methodsFor: 'total' stamp: 'JR 6/14/2021 16:38:51'!
totalPriceOfProducts
	|totalToPay|
	
	totalToPay := 0.
	
	catalog keysAndValuesDo: [:item :price | (self includes: item) 
			ifTrue: [ totalToPay := totalToPay + price * (self occurrencesOf: item)] ].
		
	^totalToPay ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:39:42' prior: 50890489!
defaultCatalog
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList ! !

!methodRemoval: CashierTest #defaultPriceList stamp: 'JR 6/14/2021 16:39:44'!
defaultPriceList
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList !
!CartTest methodsFor: 'support' stamp: 'JR 6/14/2021 16:39:50' prior: 50890450!
defaultCatalog
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/14/2021 16:39:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/14/2021 16:39:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:39:57'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/14/2021 16:39:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/14/2021 16:39:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/14/2021 16:39:57'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/14/2021 16:39:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/14/2021 16:39:57'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/14/2021 16:40:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/14/2021 16:40:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:40:06'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:40:06'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'JR 6/14/2021 16:40:21' prior: 50890571!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/14/2021 16:40:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/14/2021 16:40:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/14/2021 16:40:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/14/2021 16:40:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/14/2021 16:40:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/14/2021 16:40:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/14/2021 16:40:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/14/2021 16:40:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:40:29'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:40:29'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:40:47'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:40:47'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:41:19' prior: 50890479!
createCashier
	
	^Cashier new.! !

!methodRemoval: Cashier class #acceptingItemsOf: stamp: 'JR 6/14/2021 16:41:26'!
acceptingItemsOf: aPriceList

	^self new initializeAcceptingItemsOf: aPriceList

!

!methodRemoval: Cashier #initializeAcceptingItemsOf: stamp: 'JR 6/14/2021 16:41:35'!
initializeAcceptingItemsOf: aPriceList

	priceList := aPriceList !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:41:39'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 16:41:39'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:41:39'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:41:39'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:41:43'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 16:41:45'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:42:38' prior: 50890755!
checkOut: aCart with: aCreditCard
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	
	^aCart totalPriceOfProducts! !
!Cashier methodsFor: 'assertions' stamp: 'JR 6/14/2021 16:42:55'!
assertCreditCardIsNotExpired: aCreditCard! !

Date today - 3 days!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:45:19' prior: 50890523!
test02CheckOutCartReturnsTotalToPay

	| cart cashier expiredCreditCard|
	
	cart := self createCart.
	cashier := self createCashier.
	expiredCreditCard := Date today - 3 days.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self assert: 7500 equals: (cashier checkOut: cart with: expiredCreditCard)
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:45:30' prior: 50890920!
test02CheckOutCartReturnsTotalToPay

	| cart cashier creditCard|
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self assert: 7500 equals: (cashier checkOut: cart with: creditCard)
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:46:04' prior: 50890535!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cashier := self createCashier.
	expiredCreditCard := Date today - 3 days.
	
	self 
		should: [cashier checkOut: cart with: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage]	! !

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:46:11'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:46:11'!
FAILURE!

 Date today > Date today - 3!

 Date today > Date today - 3 days!

 (Date today) > (Date today - 3 days)!
!Cashier methodsFor: 'assertions' stamp: 'JR 6/14/2021 16:47:47' prior: 50890914!
assertCreditCardIsNotExpired: aCreditCard

	^aCreditCard > Date today ! !
!Cashier methodsFor: 'assertions' stamp: 'JR 6/14/2021 16:48:07' prior: 50890971!
assertCreditCardIsNotExpired: aCreditCard

	^aCreditCard > Date today ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:48:51' prior: 50890484!
createCreditCard
	
	^Date today + 3 days! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:49:11' prior: 50890982!
createCreditCard
	
	^Date today + 3 days ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:49:15' prior: 50890987!
createCreditCard
	
	^Date today + 365 days ! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:49:20'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 16:49:20'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:49:20'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:49:20'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:49:24'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 16:49:26'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:49:28'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:49:28'!
FAILURE!
!Cashier methodsFor: 'assertions' stamp: 'JR 6/14/2021 16:50:06' prior: 50890976!
assertCreditCardIsNotExpired: aCreditCard

	(aCreditCard > Date today) ifFalse: [self error: self expiredCreditCardErrorMessage ].! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:50:08'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 16:50:08'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:50:08'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:50:08'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 16:50:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 16:50:14'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:50:15'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:50:15'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:51:26'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:51:26'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:51:37'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:51:37'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:52:07' prior: 50890945!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cashier := self createCashier.
	expiredCreditCard := Date today - 3 days.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self 
		should: [cashier checkOut: cart with: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage]	! !

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 16:52:08'!
PASSED!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'JR 6/14/2021 16:59:06'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 16:59:02'!
test04CreatingInvalidCreditCardRaisesError
	
	self 
		should: [CreditCard withNumber: 4 expiring: (Date today + 3 days).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCreditCardErrorMessage]	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/14/2021 17:00:13'!
withNumber: aNumber expiring: aDate

	self new initializeWith: aNumber andExpiringDate: aDate! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'JR 6/14/2021 17:00:51'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'JR 6/14/2021 17:00:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expiringDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'JR 6/14/2021 17:00:50'!
initializeWith: aNumber andExpiringDate: aDate

	number := aNumber.
	expiringDate := aDate.! !
!CreditCard methodsFor: 'initialization' stamp: 'JR 6/14/2021 17:01:00' prior: 50891131!
initializeWith: aNumber andExpiringDate: aDate
	
	number := aNumber.
	expiringDate := aDate.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/14/2021 17:01:46' prior: 50891111!
withNumber: aNumber expiring: aDate

	self new initializeWith: aNumber andExpiringDate: aDate! !
!CreditCard methodsFor: 'initialization' stamp: 'JR 6/14/2021 17:02:18' prior: 50891137!
initializeWith: aNumber andExpiringDate: aDate

	self assertNumberHas16Digits: aNumber.
	
	number := aNumber.
	expiringDate := aDate.! !
!CreditCard methodsFor: 'assertions' stamp: 'JR 6/14/2021 17:02:32'!
assertNumberHas16Digits: aNumber

	! !
!CreditCard methodsFor: 'assertions' stamp: 'JR 6/14/2021 17:03:38' prior: 50891157!
assertNumberHas16Digits: aNumber

	! !

123 size!

1234567890123456 / 10!

1234567890123456 / 1000000000000000!

1234567890123456 / 1000000000000000 < 1!

1234567890123456 / 1000000000000000 < 1!

1234567890123456 / 10000000000000000 < 1  !

1234567890123456 asString size !
!CreditCard methodsFor: 'assertions' stamp: 'JR 6/14/2021 17:10:19' prior: 50891161!
assertNumberHas16Digits: aNumber

	(aNumber asString size = 16) ifFalse: [self error: self class invalidCreditCardErrorDescription]

	! !
!CreditCard methodsFor: 'assertions' stamp: 'JR 6/14/2021 17:10:40' prior: 50891173!
assertNumberHas16Digits: aNumber

	(aNumber asString size = 16) ifFalse: [self error: self class invalidCreditCardErrorMessage]

	! !
!CreditCard class methodsFor: 'error messages' stamp: 'JR 6/14/2021 17:11:20'!
invalidCreditCardErrorMessage

	^'The number must have 16 digits'! !

0000000000000001 asString size . !

0000000000000001 asSymbol size .  1 !

0000111122223333 asString size!

!methodRemoval: CreditCard #assertNumberHas16Digits: stamp: 'JR 6/14/2021 17:20:06'!
assertNumberHas16Digits: aNumber

	(aNumber asString size = 16) ifFalse: [self error: self class invalidCreditCardErrorMessage]

	!
!CreditCard class methodsFor: 'assertions' stamp: 'JR 6/14/2021 17:20:27'!
assertNumberHas16Digits: aNumber

	(aNumber asString size = 16) ifFalse: [self error: self class invalidCreditCardErrorMessage]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/14/2021 17:20:53' prior: 50891144!
withNumber: aNumber expiring: aDate

	self assertNumberHas16Digits: aNumber.
	
	self new initializeWith: aNumber andExpiringDate: aDate! !
!CreditCard methodsFor: 'initialization' stamp: 'JR 6/14/2021 17:21:01' prior: 50891150!
initializeWith: aNumber andExpiringDate: aDate
	
	number := aNumber.
	expiringDate := aDate.! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 17:21:04'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 17:21:04'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 17:21:04'!
PASSED!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 17:21:04'!
ERROR!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 17:21:04'!
ERROR!
!CreditCard class methodsFor: 'assertions' stamp: 'JR 6/14/2021 17:21:20' prior: 50891202!
assertNumberHas16Digits: aNumber

	(aNumber asString size = 16) ifFalse: [self error: self invalidCreditCardErrorMessage]! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 17:21:22'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 17:21:22'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 17:21:22'!
PASSED!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 17:21:22'!
PASSED!

'0000111122223333' allSatisfy: [:a | a isKindOf: Number]!

'0000111122223333' allSatisfy: [:a | a isKindOf: Integer]!

'0000111122223333' at: 2 class!

('0000111122223333' at: 2) class!

'0000111122223333' allSatisfy: [:a | a isDigit]!
!CreditCard class methodsFor: 'assertions' stamp: 'JR 6/14/2021 17:24:43' prior: 50891241!
assertNumberHas16Digits: aNumber

	((aNumber allSatisfy: [:a | a isDigit])and: [aNumber size = 1]) ifFalse: [self error: self invalidCreditCardErrorMessage]! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 17:24:47'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 17:24:47'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 17:24:47'!
PASSED!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 17:24:47'!
ERROR!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 17:24:47'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 17:25:09'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 17:25:11'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 17:25:20' prior: 50891099!
test04CreatingInvalidCreditCardRaisesError
	
	self 
		should: [CreditCard withNumber: '4' expiring: (Date today + 3 days).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCreditCardErrorMessage]	! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 17:25:27'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 17:25:27'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 17:25:27'!
PASSED!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 17:25:27'!
FAILURE!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 17:25:27'!
FAILURE!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 17:25:32'!
FAILURE!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 17:25:32'!
FAILURE!
!CreditCard class methodsFor: 'assertions' stamp: 'JR 6/14/2021 17:25:55' prior: 50891269!
assertNumberHas16Digits: aNumber

	((aNumber allSatisfy: [:a | a isDigit]) and: [aNumber size = 16]) ifFalse: [self error: self invalidCreditCardErrorMessage]! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 17:25:59'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 17:25:59'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 17:25:59'!
PASSED!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 17:25:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 18:36:23'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:36:23'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 18:36:23'!
PASSED!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 18:36:23'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 18:37:39' prior: 50891300!
test04CreatingInvalidCreditCardRaisesError
	
	self 
		should: [CreditCard withNumber: '4' ownedBy: 'Matias' expiring: (Date today + 3 days).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCreditCardErrorMessage]	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/14/2021 18:38:08'!
withNumber: aNumber ownedBy: anOwner expiring: aDate

	self assertNumberHas16Digits: aNumber.
	
	self new initializeWith: aNumber owner: anOwner andExpiringDate: aDate! !

!methodRemoval: CreditCard class #withNumber:expiring: stamp: 'JR 6/14/2021 18:38:15'!
withNumber: aNumber expiring: aDate

	self assertNumberHas16Digits: aNumber.
	
	self new initializeWith: aNumber andExpiringDate: aDate!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'JR 6/14/2021 18:38:32'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expiringDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'JR 6/14/2021 18:38:30'!
initializeWith: aNumber owner: anOwner andExpiringDate: aDate
	
	owner := anOwner .
	number := aNumber.
	expiringDate := aDate.! !

!methodRemoval: CreditCard #initializeWith:andExpiringDate: stamp: 'JR 6/14/2021 18:38:36'!
initializeWith: aNumber andExpiringDate: aDate
	
	number := aNumber.
	expiringDate := aDate.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 18:39:08' prior: 50890992!
createCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today + 3 days)! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 18:39:22'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:39:25'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:39:26'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'JR 6/14/2021 18:40:25' prior: 50891023!
assertCreditCardIsNotExpired: aCreditCard

	aCreditCard isExpiredOn: Date today. ! !
!CreditCard methodsFor: 'testing' stamp: 'JR 6/14/2021 18:40:55'!
isExpiredOn: aDate

	! !
!CreditCard methodsFor: 'testing' stamp: 'JR 6/14/2021 18:41:50' prior: 50891439!
isExpiredOn: aDate
	
	^(expiringDate > aDate) 
	! !
!CreditCard methodsFor: 'testing' stamp: 'JR 6/14/2021 18:42:23' prior: 50891443!
isExpiredOn: aDate
	
	^(expiringDate < aDate) 
	! !
!Cashier methodsFor: 'assertions' stamp: 'JR 6/14/2021 18:42:46' prior: 50891434!
assertCreditCardIsNotExpired: aCreditCard

	(aCreditCard isExpiredOn: Date today) ifTrue: [self error: self expiredCreditCardErrorMessage ]! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 18:42:49'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:42:49'!
ERROR!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 18:42:49'!
ERROR!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 18:42:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 18:42:54'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:42:55'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:42:55'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 18:43:44' prior: 50891418!
createCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today month + 3 days)! !
!Cashier methodsFor: 'assertions' stamp: 'JR 6/14/2021 18:44:17' prior: 50891453!
assertCreditCardIsNotExpired: aCreditCard

	(aCreditCard isExpiredOn: Date today month) ifTrue: [self error: self expiredCreditCardErrorMessage ]! !

Date today month!

FixedGregorianDate today month!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 18:44:54'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:44:57'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:44:57'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/14/2021 18:45:21' prior: 50891382!
withNumber: aNumber ownedBy: anOwner expiring: aDate

	self assertNumberHas16Digits: aNumber.
	
	^self new initializeWith: aNumber owner: anOwner andExpiringDate: aDate! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 18:45:26'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:45:26'!
ERROR!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 18:45:26'!
ERROR!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 18:45:26'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:45:31'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:45:31'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:45:41'!
ERROR!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:45:41'!
ERROR!

Date today month previous: (Date today - 3 days)!
!CreditCard methodsFor: 'testing' stamp: 'JR 6/14/2021 18:47:47' prior: 50891448!
isExpiredOn: aDate
	
	^(expiringDate < aDate) 
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 18:48:07' prior: 50891483!
createCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today + 3 days)! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 18:48:13'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 18:48:13'!
ERROR!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 18:48:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 18:48:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 18:49:17'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 18:49:19'!
ERROR!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 18:49:19'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'JR 6/14/2021 18:49:55' prior: 50891490!
assertCreditCardIsNotExpired: aCreditCard

	(aCreditCard isExpiredOn: Date today) ifTrue: [self error: self expiredCreditCardErrorMessage ]! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 18:49:59'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 18:50:01'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 18:50:02'!
ERROR!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 18:50:02'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 18:50:36' prior: 50891072!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier expiredCreditCard |
	
	cart := self createCart.
	cashier := self createCashier.
	expiredCreditCard := CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today - 3 days).
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self 
		should: [cashier checkOut: cart with: expiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage]	! !

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 18:50:38'!
PASSED!

!testRun: #CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 18:50:40'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 18:51:04'!
test04CreatingCreditCardWithInvalidNumberRaisesError
	
	self 
		should: [CreditCard withNumber: '4' ownedBy: 'Matias' expiring: (Date today + 3 days).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCreditCardErrorMessage]	! !

!methodRemoval: CashierTest #test04CreatingInvalidCreditCardRaisesError stamp: 'JR 6/14/2021 18:51:04'!
test04CreatingInvalidCreditCardRaisesError
	
	self 
		should: [CreditCard withNumber: '4' ownedBy: 'Matias' expiring: (Date today + 3 days).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCreditCardErrorMessage]	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 18:52:14'!
test05CreatingCreditCardWithEmptyOwnerRaisesError
	
	self 
		should: [CreditCard withNumber: '1111222233334444' ownedBy: ' ' expiring: (Date today + 3 days).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidOwnerErrorMessage]	! !
!CreditCard class methodsFor: 'error messages' stamp: 'JR 6/14/2021 18:52:34'!
invalidNumberErrorMessage

	^'The number must have 16 digits'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 18:52:34' prior: 50891627!
test04CreatingCreditCardWithInvalidNumberRaisesError
	
	self 
		should: [CreditCard withNumber: '4' ownedBy: 'Matias' expiring: (Date today + 3 days).]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberErrorMessage]	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 18:52:34' prior: 50891335!
assertNumberHas16Digits: aNumber

	((aNumber allSatisfy: [:a | a isDigit]) and: [aNumber size = 16]) ifFalse: [self error: self invalidNumberErrorMessage]! !

!methodRemoval: CreditCard class #invalidCreditCardErrorMessage stamp: 'JR 6/14/2021 18:52:34'!
invalidCreditCardErrorMessage

	^'The number must have 16 digits'!
!CreditCard class methodsFor: 'error messages' stamp: 'JR 6/14/2021 18:52:48' prior: 50891665!
invalidNumberErrorMessage

	^'The number must have 16 digits'! !
!CreditCard class methodsFor: 'assertions' stamp: 'JR 6/14/2021 18:53:21'!
invalidOwnerErrorMessage

	^'Owner can not be empty'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/14/2021 18:53:43' prior: 50891509!
withNumber: aNumber ownedBy: anOwner expiring: aDate

	self assertNumberHas16Digits: aNumber.
	self assertOwnerIsNotEmpty: anOwner.
	
	^self new initializeWith: aNumber owner: anOwner andExpiringDate: aDate! !
!CreditCard class methodsFor: 'assertions' stamp: 'JR 6/14/2021 18:55:07'!
assertOwnerIsNotEmpty: aName

	aName ! !

'   ' trimmed: ' ' !

'    abc' withoutTrailingBlanks !

'    abc' withoutLeadingBlanks!
!CreditCard class methodsFor: 'assertions' stamp: 'JR 6/14/2021 19:04:20' prior: 50891716!
assertOwnerIsNotEmpty: aName

	(aName withoutLeadingBlanks isEmpty) ifTrue: []! !
!CreditCard class methodsFor: 'assertions' stamp: 'JR 6/14/2021 19:04:53' prior: 50891723!
assertOwnerIsNotEmpty: aName

	(aName withoutLeadingBlanks isEmpty) ifTrue: [self error: self invalidOwnerErrorMessage ]! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 19:04:55'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 19:04:55'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 19:04:55'!
PASSED!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/14/2021 19:04:55'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/14/2021 19:04:55'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'JR 6/14/2021 19:09:26' prior: 50890509!
test01CanNotCheckOutEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	! !

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'JR 6/14/2021 19:13:18'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 19:13:20'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 19:13:20'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 19:13:20'!
PASSED!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/14/2021 19:13:21'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/14/2021 19:13:21'!
PASSED!

!methodRemoval: CashierTest #itemNotSellByTheStore stamp: 'JR 6/14/2021 19:14:33'!
itemNotSellByTheStore
	
	^'invalidBook'!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 19:14:36'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 19:14:36'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 19:14:36'!
PASSED!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/14/2021 19:14:36'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/14/2021 19:14:36'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'JR 6/14/2021 19:15:38'!
createExpiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today - 3 days)! !
!CashierTest methodsFor: 'tests' stamp: 'JR 6/14/2021 19:16:00' prior: 50891601!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier |
	
	cart := self createCart.
	cashier := self createCashier.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self 
		should: [cashier checkOut: cart with: self createExpiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage]	! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 19:16:04'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 19:16:05'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 19:16:05'!
PASSED!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/14/2021 19:16:05'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/14/2021 19:16:05'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'JR 6/14/2021 19:16:17' prior: 50891822!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier |
	
	cart := self createCart.
	cashier := self createCashier.
	cart add: 3 of: self itemSellByTheStore.	
	
	self 
		should: [cashier checkOut: cart with: self createExpiredCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage]	! !
!CashierTest methodsFor: 'tests' stamp: 'JR 6/14/2021 19:26:47' prior: 50891753!
test01CanNotCheckOutEmptyCart

	| cart cashier creditCard salesBook|
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	salesBook := OrderedCollection new.
	
	self 
		should: [cashier checkOut: cart with: creditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage]	! !
!Cashier methodsFor: 'check out' stamp: 'JR 6/14/2021 19:28:03'!
checkOut: aCart with: aCreditCard registerOn: aSalesBook
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	
	aSalesBook add: aCart totalPriceOfProducts.
	^aSalesBook! !

!methodRemoval: Cashier #checkOut:with: stamp: 'JR 6/14/2021 19:28:07'!
checkOut: aCart with: aCreditCard
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	
	^aCart totalPriceOfProducts!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 19:28:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 19:28:12'!
ERROR!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 19:28:12'!
ERROR!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/14/2021 19:28:12'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/14/2021 19:28:12'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'JR 6/14/2021 19:28:26' prior: 50891871!
test01CanNotCheckOutEmptyCart

	| cart cashier creditCard salesBook|
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	salesBook := OrderedCollection new.
	
	self 
		should: [cashier checkOut: cart with: creditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty]	! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/14/2021 19:28:28'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'JR 6/14/2021 19:28:40'!
test02CheckOutCartRegistersTotalToPay

	| cart cashier creditCard|
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self assert: 7500 equals: (cashier checkOut: cart with: creditCard)
		! !

!methodRemoval: CashierTest #test02CheckOutCartReturnsTotalToPay stamp: 'JR 6/14/2021 19:28:41'!
test02CheckOutCartReturnsTotalToPay

	| cart cashier creditCard|
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	
	cart add: 3 of: self itemSellByTheStore.	
	
	self assert: 7500 equals: (cashier checkOut: cart with: creditCard)
		!
!CashierTest methodsFor: 'tests' stamp: 'JR 6/14/2021 19:29:57' prior: 50891940!
test02CheckOutCartRegistersTotalToPay

	| cart cashier creditCard salesBook|
	
	cart := self createCart.
	cashier := self createCashier.
	creditCard := self createCreditCard.
	salesBook := OrderedCollection new.
	
	cart add: 3 of: self itemSellByTheStore.	
	cashier checkOut: cart with: creditCard registerOn: salesBook .
	
	self assert: salesBook size equals: 1.
	self assert: salesBook includes: 7500  
		! !

!testRun: #CashierTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/14/2021 19:29:59'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'JR 6/14/2021 19:30:32' prior: 50891855!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier salesBook|
	
	cart := self createCart.
	cashier := self createCashier.
	cart add: 3 of: self itemSellByTheStore.	
	salesBook := OrderedCollection new.
	
	self 
		should: [cashier checkOut: cart with: self createExpiredCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/14/2021 19:30:34'!
PASSED!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/14/2021 19:30:36'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/14/2021 19:30:38'!
PASSED!

----QUIT----(14 June 2021 20:40:02) CuisUniversity-4532.image priorSource: 17870432!

----STARTUP---- (16 June 2021 15:19:56) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'JR 6/16/2021 15:55:02'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'JR 6/16/2021 15:54:56'!
test06MerchantProcessorRegistersStolenCreditCard

	|merchantProcessor|
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: self createCreditCard .
	
	self assert: merchantProcessor stolenCreditCards size equals: 1.
	self assert: merchantProcessor stolenCreditCards includes: self createCreditCard! !

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'JR 6/16/2021 15:55:35'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'stolenCreditCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'nil' stamp: 'JR 6/16/2021 15:55:33'!
registerCreditCardAsStolen: aCreditCard

	stolenCreditCards add: aCreditCard ! !
!MerchantProcessor methodsFor: 'initialization' stamp: 'JR 6/16/2021 15:55:56' overrides: 16896425!
initialize

	stolenCreditCards := OrderedCollection new.! !
!MerchantProcessor methodsFor: 'accessing' stamp: 'JR 6/16/2021 15:56:16'!
stolenCreditCards

	^stolenCreditCards copy! !

!testRun: #CashierTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/16/2021 15:56:22'!
FAILURE!

!testRun: #CashierTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/16/2021 15:56:22'!
FAILURE!

!testRun: #CashierTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/16/2021 15:57:19'!
FAILURE!

!testRun: #CashierTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/16/2021 15:57:19'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'JR 6/16/2021 15:57:53' prior: 50892026!
test06MerchantProcessorRegistersStolenCreditCard

	|merchantProcessor creditCard|
	
	creditCard := self createCreditCard.
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: creditCard .
	
	self assert: merchantProcessor stolenCreditCards size equals: 1.
	self assert: merchantProcessor stolenCreditCards includes: creditCard ! !

!testRun: #CashierTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/16/2021 15:57:54'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'JR 6/16/2021 15:58:26'!
test06MerchantProcessorRegistersFakeCreditCard

	|merchantProcessor creditCard|
	
	creditCard := self createCreditCard.
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: creditCard .
	
	self assert: merchantProcessor fakeCreditCards size equals: 1.
	self assert: merchantProcessor fakeCreditCards includes: creditCard ! !
!CashierTest methodsFor: 'tests' stamp: 'JR 6/16/2021 15:58:37'!
test07MerchantProcessorRegistersFakeCreditCard

	|merchantProcessor creditCard|
	
	creditCard := self createCreditCard.
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: creditCard .
	
	self assert: merchantProcessor fakeCreditCards size equals: 1.
	self assert: merchantProcessor fakeCreditCards includes: creditCard ! !

!methodRemoval: CashierTest #test06MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/16/2021 15:58:37'!
test06MerchantProcessorRegistersFakeCreditCard

	|merchantProcessor creditCard|
	
	creditCard := self createCreditCard.
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: creditCard .
	
	self assert: merchantProcessor fakeCreditCards size equals: 1.
	self assert: merchantProcessor fakeCreditCards includes: creditCard !

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'JR 6/16/2021 15:59:00'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'stolenCreditCards fakeCreditCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'JR 6/16/2021 15:58:59'!
registerCreditCardAsFake: aCreditCard 

	fakeCreditCards add: aCreditCard ! !
!MerchantProcessor methodsFor: 'accessing' stamp: 'JR 6/16/2021 15:59:15'!
fakeCreditCards

	^fakeCreditCards copy! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/16/2021 15:59:43'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/16/2021 15:59:43'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/16/2021 15:59:43'!
PASSED!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/16/2021 15:59:43'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/16/2021 15:59:43'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/16/2021 15:59:43'!
PASSED!

!testRun: #CashierTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/16/2021 15:59:43'!
ERROR!

!testRun: #CashierTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/16/2021 15:59:43'!
ERROR!
!MerchantProcessor methodsFor: 'initialization' stamp: 'JR 6/16/2021 16:00:04' prior: 50892053 overrides: 16896425!
initialize

	stolenCreditCards := OrderedCollection new.
	fakeCreditCards := OrderedCollection new! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/16/2021 16:00:06'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/16/2021 16:00:07'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/16/2021 16:00:07'!
PASSED!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/16/2021 16:00:07'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/16/2021 16:00:07'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/16/2021 16:00:07'!
PASSED!

!testRun: #CashierTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/16/2021 16:00:07'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'JR 6/16/2021 16:03:06'!
test08CanNotCheckOutWithFakeCreditCard

	| cart cashier salesBook merchantProcessor fakeCreditCard|
	
	cart := self createCart.
	cashier := self createCashier.
	cart add: 3 of: self itemSellByTheStore.	
	salesBook := OrderedCollection new.
	fakeCreditCard := self createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: fakeCreditCard .
	
	cashier checkOut: cart with: fakeCreditCard registerOn: salesBook.
	self assert: salesBook isEmpty! !

!testRun: #CashierTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/16/2021 16:03:13'!
FAILURE!

!testRun: #CashierTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/16/2021 16:03:13'!
FAILURE!
!Cashier methodsFor: 'check out' stamp: 'JR 6/16/2021 16:04:03' prior: 50891887!
checkOut: aCart with: aCreditCard registerOn: aSalesBook
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	
	aSalesBook add: aCart totalPriceOfProducts.
	^aSalesBook! !
!CashierTest methodsFor: 'support' stamp: 'JR 6/16/2021 16:04:33' prior: 50890873!
createCashier
	
	
	^Cashier with: (MerchantProcessor new).! !
!Cashier class methodsFor: 'instance creation' stamp: 'JR 6/16/2021 16:04:58'!
with: aMerchantProcessor

	^self new initializeWith: aMerchantProcessor ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'JR 6/16/2021 16:05:27'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'JR 6/16/2021 16:05:26'!
initializeWith: aMerchantProcessor

	merchantProcessor := aMerchantProcessor ! !
!CashierTest methodsFor: 'tests' stamp: 'JR 6/16/2021 16:06:15' prior: 50892214!
test08CanNotCheckOutWithFakeCreditCard

	| cart cashier salesBook merchantProcessor fakeCreditCard|
	
	cart := self createCart.
	cart add: 3 of: self itemSellByTheStore.	
	salesBook := OrderedCollection new.
	fakeCreditCard := self createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: fakeCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	cashier checkOut: cart with: fakeCreditCard registerOn: salesBook.
	self assert: salesBook isEmpty! !
!Cashier methodsFor: 'check out' stamp: 'JR 6/16/2021 16:10:57' prior: 50892239!
checkOut: aCart with: aCreditCard registerOn: aSalesBook
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.	
	
	
	aSalesBook add: aCart totalPriceOfProducts.
	^aSalesBook! !
!Cashier methodsFor: 'assertions' stamp: 'JR 6/16/2021 16:11:19'!
assertCreditCardIsValid: aCreditCard

	^merchantProcessor charge: aCreditCard.! !
!Cashier methodsFor: 'check out' stamp: 'JR 6/16/2021 16:11:41' prior: 50892291!
checkOut: aCart with: aCreditCard registerOn: aSalesBook
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	
	aSalesBook add: aCart totalPriceOfProducts.
	^aSalesBook! !
!Cashier methodsFor: 'assertions' stamp: 'JR 6/16/2021 16:11:47' prior: 50892301!
assertCreditCardIsValid: aCreditCard

	! !

!methodRemoval: Cashier #assertCreditCardIsValid: stamp: 'JR 6/16/2021 16:11:49'!
assertCreditCardIsValid: aCreditCard

	!
!Cashier methodsFor: 'check out' stamp: 'JR 6/16/2021 16:12:24' prior: 50892307!
checkOut: aCart with: aCreditCard registerOn: aSalesBook
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	(merchantProcessor charge: aCreditCard) ifFalse: [aSalesBook add: aCart totalPriceOfProducts.].
	
	^aSalesBook! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/16/2021 16:13:59'!
charge: aCreditCard

	^(stolenCreditCards includes: aCreditCard) or: [fakeCreditCards includes: aCreditCard]! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/16/2021 16:14:43' prior: 50892335!
charge: aCreditCard

	^((stolenCreditCards includes: aCreditCard) or: [fakeCreditCards includes: aCreditCard]) not.! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/16/2021 16:14:47'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/16/2021 16:14:47'!
FAILURE!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/16/2021 16:14:47'!
PASSED!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/16/2021 16:14:47'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/16/2021 16:14:47'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/16/2021 16:14:47'!
PASSED!

!testRun: #CashierTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/16/2021 16:14:47'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/16/2021 16:14:47'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/16/2021 16:14:55'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/16/2021 16:14:57'!
FAILURE!

!testRun: #CashierTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/16/2021 16:14:58'!
FAILURE!
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/16/2021 16:16:01' prior: 50892342!
charge: aCreditCard

	^(stolenCreditCards includes: aCreditCard) or: [fakeCreditCards includes: aCreditCard]! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/16/2021 16:16:14' prior: 50892386!
charge: aCreditCard

	^((stolenCreditCards includes: aCreditCard) or: [fakeCreditCards includes: aCreditCard]) not.! !
!Cashier methodsFor: 'check out' stamp: 'JR 6/16/2021 16:16:30' prior: 50892324!
checkOut: aCart with: aCreditCard registerOn: aSalesBook
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	(merchantProcessor charge: aCreditCard) ifTrue: [aSalesBook add: aCart totalPriceOfProducts.].
	
	^aSalesBook! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/16/2021 16:16:32'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/16/2021 16:16:32'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/16/2021 16:16:32'!
PASSED!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/16/2021 16:16:32'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/16/2021 16:16:32'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/16/2021 16:16:32'!
PASSED!

!testRun: #CashierTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/16/2021 16:16:32'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/16/2021 16:16:32'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'JR 6/16/2021 16:17:11'!
test09CanNotCheckOutWithStolenCreditCard

	| cart cashier salesBook merchantProcessor stolenCreditCard|
	
	cart := self createCart.
	cart add: 3 of: self itemSellByTheStore.	
	salesBook := OrderedCollection new.
	stolenCreditCard := self createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: stolenCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	cashier checkOut: cart with: stolenCreditCard registerOn: salesBook.
	self assert: salesBook isEmpty! !

!testRun: #CashierTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/16/2021 16:17:27'!
PASSED!

!testRun: #CashierTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/16/2021 16:17:27'!
PASSED!

!testRun: #CashierTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/16/2021 16:17:27'!
PASSED!

!testRun: #CashierTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/16/2021 16:17:27'!
PASSED!

!testRun: #CashierTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/16/2021 16:17:27'!
PASSED!

!testRun: #CashierTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/16/2021 16:17:27'!
PASSED!

!testRun: #CashierTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/16/2021 16:17:27'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/16/2021 16:17:27'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/16/2021 16:17:27'!
PASSED!

----QUIT----(16 June 2021 16:27:31) CuisUniversity-4532.image priorSource: 17931572!

----STARTUP---- (16 June 2021 21:17:36) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


!classRemoval: #Transfer stamp: 'JR 6/16/2021 21:17:44'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNet stamp: 'JR 6/16/2021 21:17:44'!
Reports subclass: #TransferNet
	instanceVariableNames: 'accountTransactions transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'JR 6/16/2021 21:17:45'!
Reports subclass: #AccountSummary
	instanceVariableNames: 'accountTransactions account mySummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Reports stamp: 'JR 6/16/2021 21:17:45'!
Object subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'JR 6/16/2021 21:17:46'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferWithdraw stamp: 'JR 6/16/2021 21:17:46'!
TransferLeg subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'JR 6/16/2021 21:17:47'!
TransferLeg subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferLeg stamp: 'JR 6/16/2021 21:17:47'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'JR 6/16/2021 21:17:47'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'JR 6/16/2021 21:17:48'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'JR 6/16/2021 21:17:48'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'JR 6/16/2021 21:17:49'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'JR 6/16/2021 21:17:49'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTest stamp: 'JR 6/16/2021 21:17:50'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReportsTest stamp: 'JR 6/16/2021 21:17:50'!
TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'JR 6/16/2021 21:17:50'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'JR 6/16/2021 21:17:51'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\repo\18-Portfolio 2\Portfolio-Solucion.st----!

----QUIT----(16 June 2021 21:18:57) CuisUniversity-4532.image priorSource: 17946784!

----STARTUP---- (16 June 2021 21:21:20) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


!classRemoval: #Transfer stamp: 'JR 6/16/2021 21:21:29'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNet stamp: 'JR 6/16/2021 21:21:29'!
Reports subclass: #TransferNet
	instanceVariableNames: 'accountTransactions transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'JR 6/16/2021 21:21:30'!
Reports subclass: #AccountSummary
	instanceVariableNames: 'accountTransactions account mySummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Reports stamp: 'JR 6/16/2021 21:21:30'!
Object subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'JR 6/16/2021 21:21:31'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferWithdraw stamp: 'JR 6/16/2021 21:21:31'!
TransferLeg subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'JR 6/16/2021 21:21:32'!
TransferLeg subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferLeg stamp: 'JR 6/16/2021 21:21:32'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'JR 6/16/2021 21:21:32'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'JR 6/16/2021 21:21:33'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'JR 6/16/2021 21:21:33'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'JR 6/16/2021 21:21:34'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'JR 6/16/2021 21:21:34'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTest stamp: 'JR 6/16/2021 21:21:35'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReportsTest stamp: 'JR 6/16/2021 21:21:35'!
TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'JR 6/16/2021 21:21:35'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'JR 6/16/2021 21:21:36'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\2021-1c-main\18-Portfolio 2\Portfolio2-Solucion.st----!

----QUIT----(16 June 2021 21:22:05) CuisUniversity-4532.image priorSource: 17991343!

----STARTUP---- (17 June 2021 11:43:14) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'JR 6/17/2021 11:45:21'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'JR 6/17/2021 11:46:05'!
defaultCatalog
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:46:25'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:47:20'!
createCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today + 3 days)! !

!classRenamed: #CashierTest as: #CheckOutTest stamp: 'JR 6/17/2021 11:47:32'!
Smalltalk renameClassNamed: #CashierTest as: #CheckOutTest!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:47:57'!
createCashier
	
	
	^Cashier with: (MerchantProcessor new).! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:48:12'!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:48:28'!
createExpiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today - 3 days)! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:48:52'!
itemNotSellByTheStore
	
	^'invalidBook'! !

!classDefinition: #CheckOutTest category: 'TusLibros' stamp: 'JR 6/17/2021 11:50:15'!
TestCase subclass: #CheckOutTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckOutTest methodsFor: 'support' stamp: 'JR 6/17/2021 11:50:14' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:51:01' prior: 50891920!
test01CanNotCheckOutEmptyCart

	| cart cashier creditCard salesBook|
	
	cart := testObjectsFactory createCart.
	cashier := testObjectsFactory createCashier.
	creditCard := testObjectsFactory createCreditCard.
	salesBook := OrderedCollection new.
	
	self 
		should: [cashier checkOut: cart with: creditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty]	! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 11:51:03'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:51:37' prior: 50891964!
test02CheckOutCartRegistersTotalToPay

	| cart cashier creditCard salesBook|
	
	cart := testObjectsFactory createCart.
	cashier := testObjectsFactory createCashier.
	creditCard := testObjectsFactory createCreditCard.
	salesBook := OrderedCollection new.
	
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	cashier checkOut: cart with: creditCard registerOn: salesBook .
	
	self assert: salesBook size equals: 1.
	self assert: salesBook includes: 7500  
		! !

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 11:51:39'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:51:52' prior: 50891983!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier salesBook|
	
	cart := testObjectsFactory createCart.
	cashier := testObjectsFactory createCashier.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	
	self 
		should: [cashier checkOut: cart with: self createExpiredCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:52:08' prior: 50892077!
test06MerchantProcessorRegistersStolenCreditCard

	|merchantProcessor creditCard|
	
	creditCard := testObjectsFactory createCreditCard.
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: creditCard .
	
	self assert: merchantProcessor stolenCreditCards size equals: 1.
	self assert: merchantProcessor stolenCreditCards includes: creditCard ! !
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:52:12' prior: 50892109!
test07MerchantProcessorRegistersFakeCreditCard

	|merchantProcessor creditCard|
	
	creditCard := testObjectsFactory createCreditCard.
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: creditCard .
	
	self assert: merchantProcessor fakeCreditCards size equals: 1.
	self assert: merchantProcessor fakeCreditCards includes: creditCard ! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!methodRemoval: CheckOutTest #createCart stamp: 'JR 6/17/2021 11:52:26'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CheckOutTest #createCashier stamp: 'JR 6/17/2021 11:52:26'!
createCashier
	
	
	^Cashier with: (MerchantProcessor new).!

!methodRemoval: CheckOutTest #createCreditCard stamp: 'JR 6/17/2021 11:52:26'!
createCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today + 3 days)!

!methodRemoval: CheckOutTest #createExpiredCreditCard stamp: 'JR 6/17/2021 11:52:26'!
createExpiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today - 3 days)!

!methodRemoval: CheckOutTest #defaultCatalog stamp: 'JR 6/17/2021 11:52:26'!
defaultCatalog
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList !

!methodRemoval: CheckOutTest #itemSellByTheStore stamp: 'JR 6/17/2021 11:52:26'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CheckOutTest #setUp stamp: 'JR 6/17/2021 11:52:27'!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.!
!CheckOutTest methodsFor: 'setup' stamp: 'JR 6/17/2021 11:53:30' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 11:53:32'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 11:53:33'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:53:33'!
ERROR!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 11:53:33'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 11:53:33'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 11:53:33'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 11:53:33'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 11:53:33'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 11:53:33'!
ERROR!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 11:53:42'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 11:53:43'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:53:44'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:53:45'!
ERROR!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:53:50' prior: 50895142!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier salesBook|
	
	cart := testObjectsFactory createCart.
	cashier := testObjectsFactory createCashier.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	
	self 
		should: [cashier checkOut: cart with: testObjectsFactory createExpiredCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:53:52'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 11:53:54'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 11:53:55'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 11:53:58'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 11:53:59'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 11:54:00'!
ERROR!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 11:54:00'!
ERROR!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:54:09' prior: 50892272!
test08CanNotCheckOutWithFakeCreditCard

	| cart cashier salesBook merchantProcessor fakeCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	fakeCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: fakeCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	cashier checkOut: cart with: fakeCreditCard registerOn: salesBook.
	self assert: salesBook isEmpty! !
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:54:16' prior: 50892438!
test09CanNotCheckOutWithStolenCreditCard

	| cart cashier salesBook merchantProcessor stolenCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	stolenCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: stolenCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	cashier checkOut: cart with: stolenCreditCard registerOn: salesBook.
	self assert: salesBook isEmpty! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 11:54:17'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 11:54:17'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:54:17'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!methodRemoval: CartTest #createCart stamp: 'JR 6/17/2021 11:54:26'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'JR 6/17/2021 11:54:26'!
defaultCatalog
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList !

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'JR 6/17/2021 11:54:26'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'JR 6/17/2021 11:54:26'!
itemSellByTheStore
	
	^ 'validBook'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'JR 6/17/2021 11:54:46'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setup' stamp: 'JR 6/17/2021 11:54:44' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:54:50' prior: 50890369!
test01NewCartsAreCreatedEmpty

	self assert: testObjectsFactory createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:54:57' prior: 50890374!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:03' prior: 50890387!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:09' prior: 50890395!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:14' prior: 50890408!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:21' prior: 50890421!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:29' prior: 50890429!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self deny: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:38' prior: 50890436!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

Month month: Date today monthIndex year: Date today yearNumber!

(Month month: Date today monthIndex year: Date today yearNumber) + 1!

(Month month: Date today monthIndex year: Date today yearNumber) + 1!

(Month month: Date today monthIndex year: Date today yearNumber + 1)!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:58:55'!
today

	^Month month: Date today monthIndex year: Date today yearNumber! !

!methodRemoval: StoreTestObjectsFactory #today stamp: 'JR 6/17/2021 12:00:46'!
today

	^Month month: Date today monthIndex year: Date today yearNumber!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 12:01:17' prior: 50895075!
createExpiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' 
			ownedBy: 'Matias'
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 12:01:25' prior: 50895583!
createExpiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' 
			ownedBy: 'Matias'
			expiring: (Month month: Date today monthIndex year: Date today yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 12:01:43' prior: 50895054!
createCreditCard
	
	^CreditCard withNumber: '1111222233334444' 
			ownedBy: 'Matias'
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:01:46'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:01:46'!
ERROR!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:01:46'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:01:47'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'JR 6/17/2021 12:02:35' prior: 50891580!
assertCreditCardIsNotExpired: aCreditCard

	(aCreditCard isExpiredOn: (Month month: Date today monthIndex year: Date today yearNumber)) 
		ifTrue: [self error: self expiredCreditCardErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:02:44'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:02:44'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:02:44'!
ERROR!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:02:44'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:02:44'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:02:44'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:02:44'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:02:44'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:02:44'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:02:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:03:03'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:03:04'!
ERROR!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:03:04'!
ERROR!

(Month month: Date today monthIndex year: Date today yearNumber + 1) < (Month month: Date today monthIndex year: Date today yearNumber)!

(Month month: Date today monthIndex year: Date today yearNumber + 1) > (Month month: Date today monthIndex year: Date today yearNumber + 1)!

(Month month: Date today monthIndex year: Date today yearNumber) subtractFrom: (Month month: Date today monthIndex year: Date today yearNumber + 1)!

365:00:00:00 !

(Month month: Date today monthIndex year: Date today yearNumber + 1) subtractFrom: (Month month: Date today monthIndex year: Date today yearNumber) !
!CreditCard methodsFor: 'testing' stamp: 'JR 6/17/2021 12:08:40' prior: 50891545!
isExpiredOn: aDate
	
	^(expiringDate subtractFrom: aDate) > 0 
	! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:08:45'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:08:45'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:08:45'!
ERROR!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:08:45'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:08:45'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:08:45'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:08:45'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:08:45'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:08:45'!
ERROR!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:08:49'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:08:50'!
ERROR!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:08:50'!
ERROR!

(Month month: Date today monthIndex year: Date today yearNumber + 1) subtractFrom: (Month month: Date today monthIndex year: Date today yearNumber) < 0 !

((Month month: Date today monthIndex year: Date today yearNumber + 1) subtractFrom: (Month month: Date today monthIndex year: Date today yearNumber)) class!

June < May!
!CreditCard methodsFor: 'testing' stamp: 'JR 6/17/2021 12:14:26' prior: 50895785!
isExpiredOn: aDate
	
	^(expiringDate year < aDate year) or: [(expiringDate year = aDate year) and: [expiringDate month < aDate month]]
	! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:14:28'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:14:28'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:14:28'!
ERROR!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:14:29'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:14:29'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:14:29'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:14:29'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:14:29'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:14:29'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:14:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:14:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:14:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:14:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:14:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:14:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:14:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:14:34'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:14:41'!
ERROR!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:14:41'!
ERROR!

(Month month: Date today monthIndex year: Date today yearNumber + 1) year!

(Month month: Date today monthIndex year: Date today yearNumber + 1) yearNumber!
!CreditCard methodsFor: 'testing' stamp: 'JR 6/17/2021 12:15:54' prior: 50895841!
isExpiredOn: aDate
	
	^(expiringDate yearNumber < aDate yearNumber) or: [(expiringDate yearNumber = aDate yearNumber) and: [expiringDate month < aDate month]]
	! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:16:01'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:31:43' prior: 50895352!
test08CanNotCheckOutWithFakeCreditCard

	| cart cashier salesBook merchantProcessor fakeCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	fakeCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: fakeCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: fakeCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor fakeCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:32:42' prior: 50892393!
charge: aCreditCard

	self assertCreditCardIsNotStolen.
	self assertCreditCardIsNotFake.! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:33:05' prior: 50896037!
charge: aCreditCard

	self assertCreditCardIsNotStolen: aCreditCard .
	self assertCreditCardIsNotFake: aCreditCard ! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:33:40'!
assertCreditCardIsNotStolen: aCreditCard

	
	(stolenCreditCards includes: aCreditCard) ifTrue: [self error: self stolenCreditCardErrorMessage]! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:33:42' prior: 50896050!
assertCreditCardIsNotStolen: aCreditCard

	(stolenCreditCards includes: aCreditCard) ifTrue: [self error: self stolenCreditCardErrorMessage]! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:34:17'!
assertCreditCardIsNotFake: aCreditCard

	(fakeCreditCards includes: aCreditCard) ifTrue: [self error: self fakeCreditCardErrorMessage]! !
!MerchantProcessor methodsFor: 'error messages' stamp: 'JR 6/17/2021 12:34:43'!
fakeCreditCardErrorMessage
	
	^'Credit card is fake'! !
!MerchantProcessor methodsFor: 'error messages' stamp: 'JR 6/17/2021 12:34:51'!
stolenCreditCardErrorMessage
	
	^'Credit card is stolen'! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:34:56'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:34:56'!
ERROR!
!Cashier methodsFor: 'check out' stamp: 'JR 6/17/2021 12:35:36' prior: 50892400!
checkOut: aCart with: aCreditCard registerOn: aSalesBook
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	merchantProcessor charge: aCreditCard.
	aSalesBook add: aCart totalPriceOfProducts.
	
	^aSalesBook! !
!Cashier methodsFor: 'check out' stamp: 'JR 6/17/2021 12:35:42' prior: 50896113!
checkOut: aCart with: aCreditCard registerOn: aSalesBook
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	
	merchantProcessor charge: aCreditCard.
	
	aSalesBook add: aCart totalPriceOfProducts.
	
	^aSalesBook! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:35:46'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:35:46'!
ERROR!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:35:51'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:35:53'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:36:28' prior: 50895372!
test09CanNotCheckOutWithStolenCreditCard

	| cart cashier salesBook merchantProcessor stolenCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	stolenCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: stolenCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: stolenCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor stolenCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:36:29'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:36:32'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:36:32'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:36:32'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:36:32'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:36:33'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:36:33'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:36:33'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:36:33'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:36:33'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:36:46'!
test10CanNotCheckOutWithStolenCreditCard

	| cart cashier salesBook merchantProcessor stolenCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	stolenCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: stolenCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: stolenCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor stolenCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !

!methodRemoval: CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:36:46'!
test09CanNotCheckOutWithStolenCreditCard

	| cart cashier salesBook merchantProcessor stolenCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	stolenCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: stolenCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: stolenCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor stolenCreditCardErrorMessage.
			self assert: salesBook isEmpty]	!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:36:51'!
test09CanNotCheckOutWithFakeCreditCard

	| cart cashier salesBook merchantProcessor fakeCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	fakeCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: fakeCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: fakeCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor fakeCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !

!methodRemoval: CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:36:51'!
test08CanNotCheckOutWithFakeCreditCard

	| cart cashier salesBook merchantProcessor fakeCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	fakeCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: fakeCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: fakeCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor fakeCreditCardErrorMessage.
			self assert: salesBook isEmpty]	!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:39:25'!
test08MerchantProcessorRegistersCreditCardWithInsufficientBalance

	|merchantProcessor creditCard|
	
	creditCard := testObjectsFactory createCreditCard.
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardWithInsufficientBalance: creditCard .
	
	self assert: merchantProcessor creditCardsWithInsufficientBalance size equals: 1.
	self assert: merchantProcessor creditCardsWithInsufficientBalance includes: creditCard ! !

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'JR 6/17/2021 12:40:05'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'stolenCreditCards fakeCreditCards creditCardsWithInsufficientBalance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'register cards' stamp: 'JR 6/17/2021 12:40:04'!
registerCreditCardWithInsufficientBalance: aCreditCard

	creditCardsWithInsufficientBalance add: aCreditCard ! !
!MerchantProcessor methodsFor: 'initialization' stamp: 'JR 6/17/2021 12:40:20' prior: 50892184 overrides: 16896425!
initialize

	stolenCreditCards := OrderedCollection new.
	fakeCreditCards := OrderedCollection new.
	creditCardsWithInsufficientBalance := OrderedCollection new.! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test08MerchantProcessorRegistersCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:40:36'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test10CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test08MerchantProcessorRegistersCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:40:36'!
ERROR!
!MerchantProcessor methodsFor: 'accessing' stamp: 'JR 6/17/2021 12:41:10'!
creditCardsWithInsufficientBalance

	^creditCardsWithInsufficientBalance copy! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test08MerchantProcessorRegistersCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test10CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:41:14'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:42:09'!
test11CanNotCheckOutWithCreditCardWithInsufficientBalance

	| cart cashier salesBook merchantProcessor creditCardWithInsufficientBalance|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	creditCardWithInsufficientBalance := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardWithInsufficientBalance: creditCardWithInsufficientBalance .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: creditCardWithInsufficientBalance registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor creditCardWithInsufficientBalanceErrorMessage.
			self assert: salesBook isEmpty]	! !
!MerchantProcessor methodsFor: 'error messages' stamp: 'JR 6/17/2021 12:42:27'!
creditCardWithInsufficientBalanceErrorMessage
	
	^'Credit card has insufficient balance'! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:43:00' prior: 50896043!
charge: aCreditCard

	self assertCreditCardIsNotStolen: aCreditCard .
	self assertCreditCardIsNotFake: aCreditCard .
	self assertCreditCardHasSufficientBalance: aCreditCard ! !
!MerchantProcessor methodsFor: 'assertions' stamp: 'JR 6/17/2021 12:43:29'!
assertCreditCardHasSufficientBalance: aCreditCard 

	(creditCardsWithInsufficientBalance includes: aCreditCard) 
		ifTrue: [self error: self creditCardHasInsufficientBalanceErrorMessage]! !
!MerchantProcessor methodsFor: 'assertions' stamp: 'JR 6/17/2021 12:43:58' prior: 50896504!
assertCreditCardHasSufficientBalance: aCreditCard 

	(creditCardsWithInsufficientBalance includes: aCreditCard) 
		ifTrue: [self error: self creditCardWithInsufficientBalanceErrorMessage]! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test08MerchantProcessorRegistersCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test10CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test11CanNotCheckOutWithCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:44:04'!
PASSED!

!testRun: #CheckOutTest #test08MerchantProcessorRegistersCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:44:04'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:44:04'!
PASSED!

!testRun: #CheckOutTest #test10CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:44:04'!
PASSED!

!testRun: #CheckOutTest #test11CanNotCheckOutWithCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:44:04'!
PASSED!

----QUIT----(17 June 2021 12:45:25) CuisUniversity-4532.image priorSource: 18027914!