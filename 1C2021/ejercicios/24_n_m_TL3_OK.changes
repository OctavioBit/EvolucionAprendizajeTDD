----STARTUP---- (17 June 2021 20:54:36) as /home/nikita/r/f/ingsoft1/Inge1-ejercicios/20-TusLibros/TusLibros.image!


TestCase subclass: #ShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #ShopTest category: 'Tus-Libros' stamp: 'nz 6/17/2021 20:58:09'!
TestCase subclass: #ShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'nz 6/17/2021 21:09:38'!
Object subclass: #Shop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!ShopTest methodsFor: 'no messages' stamp: 'nz 6/17/2021 21:09:28'!
      test01
	
	| shop |
	shop := Shop new.
	
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:09:45'!
ERROR!
!Shop class methodsFor: 'errors' stamp: 'nz 6/17/2021 21:09:56'!
incorrectPasswordOrClientIdErrorDescription
	self shouldBeImplemented.! !
!Shop class methodsFor: 'errors' stamp: 'nz 6/17/2021 21:10:15' prior: 50342230!
     incorrectPasswordOrClientIdErrorDescription
	^'Incorrect password or client id!!'.! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:10:21'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:10:36'!
                              createCartClientId: aSmallInteger password: aString 
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:11:52' prior: 50342243!
                     createCartClientId: aClientId password: aPassword

	self error: self class incorrectPasswordOrClientIdErrorDescription .
	! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:12:20'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:12:20'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:12:30' prior: 50342219!
                            test01
	
	| shop |
	
	shop := Shop new.
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:15:11'!
                         test02
	
	| shop cartId cartItems |
	
	shop := Shop new.
	
	cartId := shop createCartClientId: 3 password: '123'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:15:23'!
ERROR!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:15:29' prior: 50342271!
 test02
	
	| shop cartId cartItems |
	
	shop := Shop new.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:15:30'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:16:17' prior: 50342249!
    createCartClientId: aClientId password: aPassword

	(aPassword = '123') ifTrue: [
	self error: self class incorrectPasswordOrClientIdErrorDescription .
	].

! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:16:23' prior: 50342293!
       createCartClientId: aClientId password: aPassword

	(aPassword = '123') ifTrue: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].
! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:16:24'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:16:24'!
ERROR!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:16:24'!
ERROR!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:16:36'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:16:36'!
ERROR!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:16:36'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:16:44'!
                             listCart: aShop 
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:16:55' prior: 50342322!
                         listCart: aShop 
	^OrderedCollection new.! !

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:16:57'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:17:03'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:17:03'!
PASSED!

!classDefinition: #MockUserAuthenticator category: 'Tus-Libros' stamp: 'nz 6/17/2021 21:23:31'!
Object subclass: #MockUserAuthenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:23:10' prior: 50342261!
                             test01
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysResponding: true).
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:23:52'!
ERROR!
!MockUserAuthenticator class methodsFor: 'instance creation' stamp: 'nz 6/17/2021 21:24:12'!
  alwaysResponding: aTrue 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAlwaysResponding: aTrue ! !
!MockUserAuthenticator class methodsFor: 'instance creation' stamp: 'nz 6/17/2021 21:25:11' prior: 50342360!
         alwaysResponding: anAuthenticationResponse
	^self new initializeAlwaysReturning: anAuthenticationResponse ! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:25:18'!
ERROR!

!classDefinition: #MockUserAuthenticator category: 'Tus-Libros' stamp: 'nz 6/17/2021 21:25:27'!
Object subclass: #MockUserAuthenticator
	instanceVariableNames: 'authenticationResponse'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!MockUserAuthenticator methodsFor: 'initialization' stamp: 'nz 6/17/2021 21:25:27'!
                         initializeAlwaysReturning: anAuthenticationResponse 
	self shouldBeImplemented.
	authenticationResponse := anAuthenticationResponse.! !
!MockUserAuthenticator methodsFor: 'initialization' stamp: 'nz 6/17/2021 21:25:35' prior: 50342386!
                    initializeAlwaysReturning: anAuthenticationResponse 
	
	authenticationResponse := anAuthenticationResponse.! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:25:38'!
ERROR!
!Shop class methodsFor: 'instance creation' stamp: 'nz 6/17/2021 21:25:50'!
 withUserAuthenticator: aMockUserAuthenticator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithUserAuthenticator: aMockUserAuthenticator ! !
!Shop class methodsFor: 'instance creation' stamp: 'nz 6/17/2021 21:26:05' prior: 50342402!
              withUserAuthenticator: anUserAuthenticator 

	^self new initializeWithUserAuthenticator: anUserAuthenticator ! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:26:07'!
ERROR!

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'nz 6/17/2021 21:26:14'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'initialization' stamp: 'nz 6/17/2021 21:26:14'!
              initializeWithUserAuthenticator: anUserAuthenticator 
	self shouldBeImplemented.
	userAuthenticator := anUserAuthenticator.! !
!Shop methodsFor: 'initialization' stamp: 'nz 6/17/2021 21:26:21' prior: 50342427!
              initializeWithUserAuthenticator: anUserAuthenticator 
	
	userAuthenticator := anUserAuthenticator.! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:26:23'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:26:23'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:26:23'!
PASSED!
!MockUserAuthenticator class methodsFor: 'instance creation' stamp: 'nz 6/17/2021 21:26:42'!
              alwaysReturning: anAuthenticationResponse
	^self new initializeAlwaysReturning: anAuthenticationResponse ! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:26:42' prior: 50342346!
                       test01
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !

!methodRemoval: MockUserAuthenticator class #alwaysResponding: stamp: 'nz 6/17/2021 21:26:42'!
alwaysResponding: anAuthenticationResponse
	^self new initializeAlwaysReturning: anAuthenticationResponse !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:26:47'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:26:47'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:26:47'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:26:55' prior: 50342282!
             test02
	
	| shop cartId cartItems |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:26:56'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:26:56'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:26:56'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:27:01'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:27:01'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:27:01'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:27:11' prior: 50342479!
     test02
	
	| shop cartId cartItems |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false).
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:27:13'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:27:13'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:27:13'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:28:44' prior: 50342301!
                       createCartClientId: aClientId password: aPassword

	userAuthenticator authenticate: aClientId password: aPassword.
! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:28:48'!
ERROR!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:28:48'!
ERROR!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:28:51'!
ERROR!
!MockUserAuthenticator methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:29:02'!
    authenticate: aSmallInteger password: aString 
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:29:18' prior: 50342521!
                           createCartClientId: aClientId password: aPassword

	(userAuthenticator authenticate: aClientId password: aPassword) ifTrue: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:29:23' prior: 50342540!
                            createCartClientId: aClientId password: aPassword

	(userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:29:24'!
FAILURE!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:29:24'!
ERROR!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:29:26'!
ERROR!
!MockUserAuthenticator methodsFor: 'error handling' stamp: 'nz 6/17/2021 21:29:29' overrides: 16881409!
                             error: aString 
	self shouldBeImplemented.! !

!methodRemoval: MockUserAuthenticator #error: stamp: 'nz 6/17/2021 21:30:05'!
error: aString 
	self shouldBeImplemented.!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:30:13'!
ERROR!
!MockUserAuthenticator methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:30:51' prior: 50342534!
          authenticate: aSmallInteger password: aString 
	true! !

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:30:52'!
ERROR!
!MockUserAuthenticator methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:31:09' prior: 50342578!
                           authenticate: aSmallInteger password: aString 
	^true.! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:31:10'!
FAILURE!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:31:10'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:31:10'!
FAILURE!
!MockUserAuthenticator methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:31:32' prior: 50342586!
            authenticate: aSmallInteger password: aString 
	^authenticationResponse .! !

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:32:07'!
ERROR!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:32:07'!
ERROR!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:32:17' prior: 50342503!
               test02
	
	| shop cartId cartItems |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/17/2021 21:32:24' prior: 50342454!
   test01
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false).
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:32:24'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:32:24'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:32:24'!
PASSED!

!testRun: #CheckOutTest #test01CheckoutEmptyCartShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test04CheckoutItemWithoutPricesShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test05CheckoutWithExpiredCardShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test06CheckoutWithCardExpiredThisMonthShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test07CheckoutWithStolenCardShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test08CheckoutWithFakeCardShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test09CheckoutWithInsufficientFundsShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test10CheckoutWithInvalidCardNumberShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test11CheckoutWithEmptyCardOwnerNameShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #CheckOutTest #test12CheckoutWithBlankCardOwnerNameShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #PriceListTest #test01AddItemWithNegativePriceShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #PriceListTest #test02AddItemWithZeroPriceShouldRaiseError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #ShoppingCartTest #test01EmptyCartHasNoItems stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #ShoppingCartTest #test02AddingAnItemToACart stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #ShoppingCartTest #test03AddingMultipleItemsToACart stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #ShoppingCartTest #test04AddingANegativeQuantityRaisesError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #ShoppingCartTest #test05AddingZeroQuantityRaisesError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

!testRun: #ShoppingCartTest #test06AddingNonIntegerQuantityRaisesError stamp: 'nz 6/17/2021 21:34:05'!
PASSED!

----QUIT----(17 June 2021 21:34:14) TusLibros.image priorSource: 337465!

----STARTUP---- (22 June 2021 21:14:01) as /home/awolfsdorf/Dropbox/CSCOM/IngeSoft1/Inge1-ejercicios/20-TusLibros/TusLibros.image!

!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:24:30'!
                            test03
	
	| shop cartId cartItems bookIsbn quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems size equals: 1.
	self assert: cartItems first quantity equals: quantity.
	self assert: cartItems first item equals: bookIsbn.! !

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:24:39'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:24:49'!
                add: aSmallInteger of: aString to: aShop 
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:25:30' prior: 50342737!
add: aQuantity of: anItem to: aShoppingCartId
	! !

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:25:33'!
FAILURE!

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'AW 6/22/2021 21:28:19'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:28:17' prior: 50342742!
               add: aQuantity of: anItem to: aShoppingCartId
	
	items add: (ShoppingCartEntry for: anItem quantity: aQuantity )! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:28:29' prior: 50342756!
                    add: aQuantity of: anItem to: aShoppingCartId
	
	items add: (ShoppingCartEntry for: anItem quantity: aQuantity)! !
!Shop methodsFor: 'initialization' stamp: 'AW 6/22/2021 21:28:45' prior: 50342434!
                          initializeWithUserAuthenticator: anUserAuthenticator 
	
	userAuthenticator := anUserAuthenticator.
	items := OrderedCollection new.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:29:01' prior: 50342327!
 listCart: aShop 
	^items.! !

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 21:29:02'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 21:29:02'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:29:02'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:29:04'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 21:29:04'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 21:29:04'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:29:04'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:32:36'!
                    test04
	
	| shop cartItems |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	
	self should: [ cartItems := shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartId
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:32:49' prior: 50342796!
          test04
	
	| shop cartItems |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	
	self should: [ cartItems := shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:32:59' prior: 50342807!
                         test04
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	
	self should: [ shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:33:06' prior: 50342819!
                test04
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	self should: [ shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 21:33:07'!
ERROR!
!Shop class methodsFor: 'errors' stamp: 'AW 6/22/2021 21:33:23'!
         invalidCartIdErrorDescription
	self shouldBeImplemented.! !
!Shop class methodsFor: 'errors' stamp: 'AW 6/22/2021 21:33:52' prior: 50342842!
                   invalidCartIdErrorDescription
	^'The cart id is invalid!!'! !

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 21:34:08'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:35:24' prior: 50342777!
    listCart: aShoppingCartId 
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
	^items.! !

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 21:35:26'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 21:35:26'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 21:35:26'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:35:26'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 21:35:26'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:38:05'!
                         test05
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	self should: [ shop add: 15 of: 'book_isbn' to: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:38:08'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:38:37' prior: 50342763!
                              add: aQuantity of: anItem to: aShoppingCartId
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	items add: (ShoppingCartEntry for: anItem quantity: aQuantity)! !

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:38:39'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 21:38:39'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 21:38:39'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:38:39'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 21:38:39'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:38:39'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:40:40' prior: 50342872!
                           test05
	
	| shop bookIsbn cartId1 cartId2 quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	cartId1 := shop createCartClientId: 3 password: '1234'.
	cartId2 := shop createCartClientId: 4 password: '12345'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId1.
	
	self assert: (shop listCart: cartId2) isEmpty.
	! !

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:40:54'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:44:51' prior: 50342550!
              createCartClientId: aClientId password: aPassword

	(userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].

	^aClientId ! !

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:44:52'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:45:59' prior: 50342854!
       listCart: aShoppingCartId 
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^items.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:46:31' prior: 50342927!
   createCartClientId: aClientId password: aPassword

	(userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].

	^ShoppingCart new.! !

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:46:33'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:47:00' prior: 50342939!
listCart: aShoppingCartId 
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^aShoppingCartId items.! !

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:47:04'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:47:18' prior: 50342958!
               listCart: aShoppingCartId 
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^aShoppingCartId entries .! !

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:47:19'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 21:47:19'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 21:47:19'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:47:19'!
FAILURE!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 21:47:19'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:47:19'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:47:19'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:48:49' prior: 50342886!
           add: aQuantity of: anItem to: aShoppingCartId
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	aShoppingCartId add: (ShoppingCartEntry for: anItem quantity: aQuantity)! !

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:49:02'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:49:49' prior: 50342991!
             add: aQuantity of: anItem to: aShoppingCartId
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	aShoppingCartId add: anItem of: aQuantity.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:50:03' prior: 50343003!
               add: aQuantity of: anItem to: aShoppingCartId
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	aShoppingCartId add: aQuantity of: anItem.! !

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:50:04'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:50:08'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 21:50:08'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 21:50:08'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:50:08'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 21:50:08'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:50:08'!
PASSED!

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'AW 6/22/2021 21:54:35'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator items carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:54:34' prior: 50342946!
      createCartClientId: aClientId password: aPassword

	(userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].

	carts add: ShoppingCart new.
	
	^carts size - 1.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:55:11' prior: 50343012!
        add: aQuantity of: anItem to: aShoppingCartId
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	(carts at: aShoppingCartId) add: aQuantity of: anItem.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:55:33' prior: 50342968!
   listCart: aShoppingCartId 
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^(carts at: aShoppingCartId) entries .! !

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:55:37'!
ERROR!
!Shop methodsFor: 'initialization' stamp: 'AW 6/22/2021 21:55:51' prior: 50342770!
     initializeWithUserAuthenticator: anUserAuthenticator 
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.! !

Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'AW 6/22/2021 21:56:01'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:56:03'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:56:55' prior: 50343043!
            createCartClientId: aClientId password: aPassword

	(userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].

	carts add: ShoppingCart new.
	
	^carts size .! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:56:56' prior: 50343094!
           createCartClientId: aClientId password: aPassword

	(userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].

	carts add: ShoppingCart new.
	
	^carts size.! !

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:56:57'!
ERROR!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:57:33'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 21:57:33'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 21:57:33'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 21:57:33'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 21:57:33'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 21:57:33'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:58:54' prior: 50343105!
          createCartClientId: aClientId password: aPassword

	(userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].

	carts add: ShoppingCart new.
	carts size.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:59:29'!
                               createCart

	carts add: ShoppingCart new.
	carts size! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:59:29' prior: 50343131!
               createCartClientId: aClientId password: aPassword

	(userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].

	self createCart.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:59:34' prior: 50343147!
        createCartClientId: aClientId password: aPassword

	(userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	].

	^self createCart.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:59:39' prior: 50343142!
       createCart

	carts add: ShoppingCart new.
	^carts size! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 21:59:41' prior: 50343167!
              createCart
	carts add: ShoppingCart new.
	^carts size! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:00:14'!
                               getCart: aShoppingCartId

	^ carts at: aShoppingCartId! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:00:14' prior: 50343063!
              listCart: aShoppingCartId 
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^(self getCart: aShoppingCartId) entries .! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:00:20' prior: 50343182!
listCart: aShoppingCartId 
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^(self getCart: aShoppingCartId) entries.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:00:46'!
                 getCartEntries: aShoppingCartId

	^ (self getCart: aShoppingCartId) entries! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:00:46' prior: 50343190!
                         listCart: aShoppingCartId 
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^self getCartEntries: aShoppingCartId.! !

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:01:12'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 22:01:12'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 22:01:12'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 22:01:12'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 22:01:12'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:01:12'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:01:41' prior: 50343054!
      add: aQuantity of: anItem to: aShoppingCartId
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	(self getCart: aShoppingCartId) add: aQuantity of: anItem.! !

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 22:01:44'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 22:01:44'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 22:01:44'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 22:01:44'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:01:44'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:01:58'!
                      a: aShoppingCartId m2: anItem m3: aQuantity

	^ (self getCart: aShoppingCartId) add: aQuantity of: anItem! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:01:58' prior: 50343225!
                           add: aQuantity of: anItem to: aShoppingCartId
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	self a: aShoppingCartId m2: anItem m3: aQuantity.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:02:11' prior: 50343252!
        add: aQuantity of: anItem to: aShoppingCartId
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	(self getCart: aShoppingCartId) add: aQuantity of: anItem.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:03:00'!
               to: anItem of: aQuantity add: aShoppingCartId

	^ (self getCart: aShoppingCartId) add: aQuantity of: anItem! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:03:00' prior: 50343261!
                         add: aQuantity of: anItem to: aShoppingCartId
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	self to: anItem of: aQuantity add: aShoppingCartId.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:04:18' prior: 50343277!
      add: aQuantity of: anItem to: aShoppingCartId
	(aShoppingCartId = 15) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	(self getCart: aShoppingCartId) add: aQuantity of: anItem! !

!methodRemoval: Shop #to:of:add: stamp: 'AW 6/22/2021 22:04:24'!
to: anItem of: aQuantity add: aShoppingCartId

	^ (self getCart: aShoppingCartId) add: aQuantity of: anItem!

!methodRemoval: Shop #a:m2:m3: stamp: 'AW 6/22/2021 22:04:29'!
a: aShoppingCartId m2: anItem m3: aQuantity

	^ (self getCart: aShoppingCartId) add: aQuantity of: anItem!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:04:42'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 22:04:42'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 22:04:42'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 22:04:42'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 22:04:42'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:04:42'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:05:49' prior: 50343204!
        listCart: aShoppingCartId 
	(carts size < aShoppingCartId) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^self getCartEntries: aShoppingCartId.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:05:54'!
        test06
	
	| shop bookIsbn cartId1 cartId2 quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	cartId1 := shop createCartClientId: 3 password: '1234'.
	cartId2 := shop createCartClientId: 4 password: '12345'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId1.
	
	self assert: (shop listCart: cartId2) isEmpty.
	! !

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:05:54'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 22:05:54'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 22:05:54'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 22:05:54'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 22:05:54'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:05:54'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:05:54'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:06:13'!
 cartExists: aShoppingCartId

	^ carts size < aShoppingCartId! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:06:13' prior: 50343319!
        listCart: aShoppingCartId 
	((self cartExists: aShoppingCartId)) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^self getCartEntries: aShoppingCartId.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:06:19' prior: 50343362!
                      listCart: aShoppingCartId 
	(self cartExists: aShoppingCartId) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^self getCartEntries: aShoppingCartId.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:06:51' prior: 50343286!
                        add: aQuantity of: anItem to: aShoppingCartId
	(self cartExists: aShoppingCartId) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	(self getCart: aShoppingCartId) add: aQuantity of: anItem! !

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:06:52'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 22:06:52'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 22:06:52'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 22:06:52'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 22:06:52'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:06:52'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:06:52'!
PASSED!

!classDefinition: #ShopTest category: 'Tus-Libros' stamp: 'AW 6/22/2021 22:13:16'!
TestCase subclass: #ShopTest
	instanceVariableNames: 'creditCard1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:13:14' prior: 50343327!
               test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	self assert: (shop checkOut: 16 with: creditCard1) isEmpty.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:13:32' prior: 50343412!
                       test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	self assert: (shop checkOut: 16 payingWith: creditCard1) isEmpty.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:14:22' prior: 50343421!
                 test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	self should: (shop checkOut: 16 payingWith: creditCard1)
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:14:58' prior: 50343430!
                            test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	self should: (shop checkOut: 16 payingWith: creditCard1)
		raise: Error - MessageNotUnderstood
		withMessageText: Shop invalidCartIdErrorDescription.
	! !

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:14:59'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:15:08'!
             checkOut: aSmallInteger payingWith: anUndefinedObject 
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:15:47' prior: 50343455!
                   checkOut: aShoppingCartId payingWith: aCreditCard 
	self error: self class invalidCartIdErrorDescription.! !

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:15:49'!
ERROR!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:16:04'!
ERROR!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:16:15' prior: 50343442!
               test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	self should: [ shop checkOut: 16 payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop invalidCartIdErrorDescription.
	! !

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:16:18'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 22:16:18'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 22:16:18'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 22:16:18'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 22:16:18'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:16:18'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:16:18'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:16:31'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 22:16:31'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 22:16:31'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 22:16:31'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 22:16:31'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:16:31'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:16:31'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:47:24'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 22:47:24'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 22:47:24'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 22:47:24'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 22:47:24'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:47:24'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:47:24'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:50:13'!
  test07
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	self should: [ shop checkOut: cartId payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	! !

!testRun: #ShopTest #test07 stamp: 'AW 6/22/2021 22:50:19'!
FAILURE!

!testRun: #ShopTest #test07 stamp: 'AW 6/22/2021 22:50:33'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:51:49' prior: 50343461!
  checkOut: aShoppingCartId payingWith: aCreditCard 
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	self error: Cashier cantCheckoutEmptyCartErrorDescription.! !

!testRun: #ShopTest #test07 stamp: 'AW 6/22/2021 22:51:59'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 22:51:59'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 22:51:59'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 22:51:59'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 22:51:59'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 22:51:59'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 22:51:59'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/22/2021 22:51:59'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:53:03' prior: 50343528!
 test07
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	shop add: 10 of: 'book_isbn' to: cartId.
	
	self should: [ shop checkOut: cartId payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:58:02' prior: 50343573!
                              test07
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 10 of: 'book_isbn' to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	self assert: (shop listPurchasesOf: clientId with: password) size equals: 1.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:58:21' prior: 50343589!
  test07
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 10 of: 'book_isbn' to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	self assert: (shop listPurchasesOf: clientId with: password) size equals: 1.
	! !

!testRun: #ShopTest #test07 stamp: 'AW 6/22/2021 22:58:32'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 23:01:58' prior: 50343546!
    checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	! !

!testRun: #ShopTest #test07 stamp: 'AW 6/22/2021 23:02:08'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 23:02:17'!
       listPurchasesOf: aSmallInteger with: aString 
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 23:02:48' prior: 50343637!
                            listPurchasesOf: aClientId with: aClientPassword
	^OrderedCollection with: 1.! !

!testRun: #ShopTest #test07 stamp: 'AW 6/22/2021 23:02:52'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 23:02:52'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 23:02:52'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 23:02:52'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 23:02:52'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 23:02:52'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 23:02:52'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/22/2021 23:02:52'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 23:03:31'!
                           test08
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 10 of: 'book_isbn' to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	self assert: (shop listPurchasesOf: clientId with: password) size equals: 1.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 22:50:13' prior: 50343605!
    test07
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	self should: [ shop checkOut: cartId payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	! !

!testRun: #ShopTest #test07 stamp: 'AW 6/22/2021 23:03:55'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/22/2021 23:03:55'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/22/2021 23:03:55'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/22/2021 23:03:55'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/22/2021 23:03:55'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/22/2021 23:03:55'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/22/2021 23:03:55'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/22/2021 23:03:55'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/22/2021 23:03:55'!
PASSED!

----QUIT----(22 June 2021 23:04:30) TusLibros.image priorSource: 353896!

----STARTUP---- (22 June 2021 23:34:54) as /home/nikita/r/f/ingsoft1/Inge1-ejercicios/20-TusLibros/TusLibros.image!

!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/22/2021 23:36:13' prior: 50343666!
                             test08
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 10 of: 'book_isbn' to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	self assert: (shop listPurchasesOf: clientId with: password) size equals: 1.
	! !

!testRun: #ShopTest #test08 stamp: 'nz 6/22/2021 23:42:12'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/22/2021 23:42:12'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/22/2021 23:42:12'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/22/2021 23:42:12'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/22/2021 23:42:12'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/22/2021 23:42:12'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/22/2021 23:42:12'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/22/2021 23:42:12'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/22/2021 23:42:12'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/22/2021 23:45:49' prior: 50343722!
                      test08
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 10 of: 'book_isbn' to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases size equals: 1.
	! !

!testRun: #ShopTest #test08 stamp: 'nz 6/22/2021 23:45:52'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/22/2021 23:45:52'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/22/2021 23:45:52'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/22/2021 23:45:52'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/22/2021 23:45:52'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/22/2021 23:45:52'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/22/2021 23:45:52'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/22/2021 23:45:52'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/22/2021 23:45:52'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/22/2021 23:54:11' prior: 50343758!
                     test08
	
	| shop cartId clientId password purchases book |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book := 'book_isbn'.
	shop add: 10 of: book to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases entries size equals: 1.
	self assert: (purchases entries occurrencesOf: book) equals: 1
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/22/2021 23:54:49'!
           test09
	
	| shop cartId clientId password purchases book |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book := 'book_isbn'.
	shop add: 10 of: book to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases entries size equals: 1.
	self assert: (purchases entries occurrencesOf: book) equals: 10
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/22/2021 23:03:31' prior: 50343795!
                          test08
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 10 of: 'book_isbn' to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	self assert: (shop listPurchasesOf: clientId with: password) size equals: 1.
	! !

bag _ Bag new.
!

bag size!

bag add: 1.!

bag size!

bag add: 1!

bag size!

bag occurrencesOf: 1!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/22/2021 23:57:28' prior: 50343816!
                               test09
	
	| shop cartId clientId password purchases book |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book := 'book_isbn'.
	shop add: 10 of: book to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 10.
	self assert: (purchases items occurrencesOf: book) equals: 10.
	! !

!testRun: #ShopTest #test09 stamp: 'nz 6/22/2021 23:57:41'!
ERROR!

!classDefinition: #PurchasesSummary category: 'Tus-Libros' stamp: 'nz 6/22/2021 23:58:37'!
Object subclass: #PurchasesSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/22/2021 23:58:32' prior: 50343643!
                           listPurchasesOf: aClientId with: aClientPassword
	^PurchasesSummary new.! !

!testRun: #ShopTest #test09 stamp: 'nz 6/22/2021 23:58:40'!
ERROR!
!PurchasesSummary methodsFor: 'as yet unclassified' stamp: 'nz 6/22/2021 23:58:46'!
                            total
	self shouldBeImplemented.! !
!PurchasesSummary methodsFor: 'as yet unclassified' stamp: 'nz 6/22/2021 23:58:52' prior: 50343897!
                        total
	^100.! !

!testRun: #ShopTest #test09 stamp: 'nz 6/22/2021 23:58:53'!
ERROR!
!PurchasesSummary methodsFor: 'as yet unclassified' stamp: 'nz 6/22/2021 23:59:05'!
                        items
	self shouldBeImplemented.! !
!PurchasesSummary methodsFor: 'as yet unclassified' stamp: 'nz 6/22/2021 23:59:53' prior: 50343908!
                        items
	^ Bag with: 'book_isbn' with: 'book_isbn'. ! !

!testRun: #ShopTest #test09 stamp: 'nz 6/22/2021 23:59:55'!
FAILURE!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:00:09' prior: 50343858!
        test09
	
	| shop cartId clientId password purchases book |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book := 'book_isbn'.
	shop add: 2 of: book to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: book) equals: 2.
	! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:00:10'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 00:00:10'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 00:00:10'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 00:00:10'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 00:00:10'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 00:00:10'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 00:00:10'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 00:00:10'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:00:10'!
ERROR!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:00:10'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:00:10'!
ERROR!

!methodRemoval: ShopTest #test08 stamp: 'nz 6/23/2021 00:00:37'!
test08
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
	
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 10 of: 'book_isbn' to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	self assert: (shop listPurchasesOf: clientId with: password) size equals: 1.
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:01:54'!
                          test08
	
	| shop cartId clientId password purchases book |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book := 'book_isbn'.
	shop add: 2 of: book to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: book) equals: 2.
	! !

!methodRemoval: ShopTest #test09 stamp: 'nz 6/23/2021 00:01:54'!
test09
	
	| shop cartId clientId password purchases book |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book := 'book_isbn'.
	shop add: 2 of: book to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: book) equals: 2.
	!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:01:56'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 00:01:56'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 00:01:56'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 00:01:56'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 00:01:56'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 00:01:56'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 00:01:56'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 00:01:56'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:01:56'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:02:48'!
                             test09
	
	| shop cartId clientId password purchases book1 book2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book1 := 'book_isbn1'.
	shop add: 2 of: book1 to: cartId.
	
	book2 := 'book_isbn2'.
	shop add: 1 of: book2 to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 120.
	self assert: purchases items size equals: 3.
	self assert: (purchases items occurrencesOf: book1) equals: 2.
	self assert: (purchases items occurrencesOf: book2) equals: 1.
	! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:02:56'!
FAILURE!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:03:06'!
FAILURE!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:05:49'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:11:24' prior: 50343623!
         checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:12:34' prior: 50344073!
                             checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].! !

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'nz 6/23/2021 00:15:19'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:15:17' prior: 50344086!
                      checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	purchases at: clientId put: cart entries size.
	! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:15:22' prior: 50344108!
            checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	purchases at: clientId put: cart entries size.! !
!Shop methodsFor: 'initialization' stamp: 'nz 6/23/2021 00:15:59' prior: 50343073!
                   initializeWithUserAuthenticator: anUserAuthenticator 
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	purchases  := Dictionary new.! !
!Shop methodsFor: 'initialization' stamp: 'nz 6/23/2021 00:16:14' prior: 50344140!
       initializeWithUserAuthenticator: anUserAuthenticator 
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	purchases  := Dictionary new.  "clientId => int"! !
!Shop methodsFor: 'initialization' stamp: 'nz 6/23/2021 00:16:20' prior: 50344148!
                    initializeWithUserAuthenticator: anUserAuthenticator 
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	purchases  := Dictionary new.  "clientId => cart size"! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:19:08' prior: 50343889!
         listPurchasesOf: aClientId with: aClientPassword

	((purchases at: aClientId) = 1) ifTrue: [ ^PurchasesSummary new. ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:19:32' prior: 50344166!
              listPurchasesOf: aClientId with: aClientPassword

	((purchases at: aClientId) = 1) ifTrue: [ ^PurchasesSummary new. ].
	((purchases at: aClientId) = 2) ifTrue: [ ^PurchasesSummary new. ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:21:16' prior: 50344173!
         listPurchasesOf: aClientId with: aClientPassword

	| aBagOfItems aTotal |
	((purchases at: aClientId) = 1) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1'.
		aTotal := 100.
	].
	((purchases at: aClientId) = 2) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1' with: 'book_isbn2'.
		aTotal := 120.
	].
	
	PurchasesSummary with: aBagOfItems total: aTotal.! !

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 00:21:24'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 00:21:24'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 00:21:24'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 00:21:24'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 00:21:24'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 00:21:24'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 00:21:24'!
ERROR!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:21:24'!
ERROR!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:21:24'!
ERROR!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:21:41'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:21:59'!
                             getClientIdOf: aSmallInteger 
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:22:14' prior: 50344219!
            getClientIdOf: aSmallInteger 
	
	^15.! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:22:15'!
ERROR!
!PurchasesSummary class methodsFor: 'instance creation' stamp: 'nz 6/23/2021 00:22:25'!
                           with: aBag total: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aBag total: aSmallInteger ! !
!PurchasesSummary class methodsFor: 'instance creation' stamp: 'nz 6/23/2021 00:22:34' prior: 50344231!
                              with: aBag total: aSmallInteger 

	^self new initializeWith: aBag total: aSmallInteger ! !
!PurchasesSummary class methodsFor: 'instance creation' stamp: 'nz 6/23/2021 00:22:41' prior: 50344241!
                             with: aBagOfItems total: aSmallInteger 

	^self new initializeWith: aBagOfItems total: aSmallInteger ! !
!PurchasesSummary class methodsFor: 'instance creation' stamp: 'nz 6/23/2021 00:22:54' prior: 50344248!
               with: aBagOfItems total: aTotalAmount 

	^self new initializeWith: aBagOfItems total: aTotalAmount ! !
!PurchasesSummary class methodsFor: 'instance creation' stamp: 'nz 6/23/2021 00:22:58' prior: 50344255!
                 with: aBagOfItems total: aTotalAmount 

	^self new initializeWith: aBagOfItems total: aTotalAmount.! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:22:59'!
ERROR!

!classDefinition: #PurchasesSummary category: 'Tus-Libros' stamp: 'nz 6/23/2021 00:23:16'!
Object subclass: #PurchasesSummary
	instanceVariableNames: 'bagOfItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #PurchasesSummary category: 'Tus-Libros' stamp: 'nz 6/23/2021 00:23:16'!
Object subclass: #PurchasesSummary
	instanceVariableNames: 'bagOfItems totalAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!PurchasesSummary methodsFor: 'initialization' stamp: 'nz 6/23/2021 00:23:16'!
    initializeWith: aBagOfItems total: aTotalAmount 
	self shouldBeImplemented.
	bagOfItems := aBagOfItems.
	totalAmount := aTotalAmount.! !
!PurchasesSummary methodsFor: 'initialization' stamp: 'nz 6/23/2021 00:23:23' prior: 50344285!
                        initializeWith: aBagOfItems total: aTotalAmount 

	bagOfItems := aBagOfItems.
	totalAmount := aTotalAmount.! !

!classDefinition: #PurchasesSummary category: 'Tus-Libros' stamp: 'nz 6/23/2021 00:23:26'!
Object subclass: #PurchasesSummary
	instanceVariableNames: 'items totalAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!PurchasesSummary methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:23:26' prior: 50344293!
                           initializeWith: aBagOfItems total: aTotalAmount 

	items := aBagOfItems.
	totalAmount := aTotalAmount.! !

!classDefinition: #PurchasesSummary category: 'Tus-Libros' stamp: 'nz 6/23/2021 00:23:29'!
Object subclass: #PurchasesSummary
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!PurchasesSummary methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:23:29' prior: 50344308!
      initializeWith: aBagOfItems total: aTotalAmount 

	items := aBagOfItems.
	total := aTotalAmount.! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:23:32'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:23:51' prior: 50344182!
listPurchasesOf: aClientId with: aClientPassword

	| aBagOfItems aTotal |
	((purchases at: aClientId) = 1) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1'.
		aTotal := 100.
	].
	((purchases at: aClientId) = 2) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1' with: 'book_isbn2'.
		aTotal := 120.
	].
	
	^ PurchasesSummary with: aBagOfItems total: aTotal.! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:23:52'!
FAILURE!
!PurchasesSummary methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:24:54' prior: 50343902!
       total
	^total.! !
!PurchasesSummary methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:25:00' prior: 50343913!
          items
	^ items. ! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:25:02'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 00:25:02'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 00:25:02'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 00:25:02'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 00:25:02'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 00:25:02'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 00:25:02'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 00:25:02'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:25:02'!
FAILURE!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:25:02'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:25:02'!
FAILURE!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:25:15' prior: 50343980!
                       test08
	
	| shop cartId clientId password purchases book |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book := 'book_isbn1'.
	shop add: 2 of: book to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: book) equals: 2.
	! !

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:25:16'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:25:19'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 00:25:19'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 00:25:19'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 00:25:19'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 00:25:19'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 00:25:19'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 00:25:19'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 00:25:19'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:25:19'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:25:19'!
PASSED!

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'nz 6/23/2021 00:28:15'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts receiptBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:28:15' prior: 50344157!
                              initializeWithUserAuthenticator: anUserAuthenticator 
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	receiptBooks  := Dictionary new.  "clientId => cart size"! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:28:15' prior: 50344330!
      listPurchasesOf: aClientId with: aClientPassword

	| aBagOfItems aTotal |
	((receiptBooks at: aClientId) = 1) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1'.
		aTotal := 100.
	].
	((receiptBooks at: aClientId) = 2) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1' with: 'book_isbn2'.
		aTotal := 120.
	].
	
	^ PurchasesSummary with: aBagOfItems total: aTotal.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:28:15' prior: 50344124!
                   checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	receiptBooks at: clientId put: cart entries size.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:30:49' prior: 50344458!
           checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.
	

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	
	
	receiptBooks at: clientId put: cart entries size.! !

!testRun: #CheckOutTest #test04CheckoutItemWithoutPricesShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test01CheckoutEmptyCartShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test04CheckoutItemWithoutPricesShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test05CheckoutWithExpiredCardShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test06CheckoutWithCardExpiredThisMonthShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test07CheckoutWithStolenCardShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test08CheckoutWithFakeCardShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test09CheckoutWithInsufficientFundsShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test10CheckoutWithInvalidCardNumberShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test11CheckoutWithEmptyCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!

!testRun: #CheckOutTest #test12CheckoutWithBlankCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 00:30:54'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:31:59' prior: 50344041!
            test09
	
	| shop cartId clientId password purchases book1 book2 book3 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book1 := 'book_isbn1'.
	shop add: 2 of: book1 to: cartId.
	
	book2 := 'book_isbn2'.
	shop add: 1 of: book2 to: cartId.
	
	book3 := 'book_isbn3'.
	shop add: 1 of: book3 to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: book1) equals: 2.
	self assert: (purchases items occurrencesOf: book2) equals: 1.
	self assert: (purchases items occurrencesOf: book3) equals: 1.
	! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:32:04'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:32:32' prior: 50344442!
                  listPurchasesOf: aClientId with: aClientPassword

	| aBagOfItems aTotal |
	((receiptBooks at: aClientId) = 1) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1'.
		aTotal := 100.
	].
	((receiptBooks at: aClientId) = 2) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1' with: 'book_isbn2'.
		aTotal := 120.
	].
	((receiptBooks at: aClientId) = 3) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1' with: 'book_isbn2' with: 'book_isbn3'.
		aTotal := 150.
	].
	
	^ PurchasesSummary with: aBagOfItems total: aTotal.! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:32:34'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 00:32:34'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 00:32:34'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 00:32:34'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 00:32:34'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 00:32:34'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 00:32:34'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 00:32:34'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:32:34'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:32:34'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:34:52' prior: 50344536!
                        test09
	
	| shop cartId clientId password purchases book1 book2 book3 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book1 := 'book_isbn1'.
	shop add: 2 of: book1 to: cartId.
	
	book2 := 'book_isbn2'.
	shop add: 1 of: book2 to: cartId.
	
	book3 := 'book_isbn3'.
	shop add: 1 of: book3 to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: book1) equals: 2.
	self assert: (purchases items occurrencesOf: book2) equals: 1.
	self assert: (purchases items occurrencesOf: book3) equals: 1.
	! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:35:05' prior: 50344568!
                        listPurchasesOf: aClientId with: aClientPassword

	| aBagOfItems aTotal |
	
	((receiptBooks at: aClientId) = 1) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1'.
		aTotal := 100.
	].
	((receiptBooks at: aClientId) = 2) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1' with: 'book_isbn2'.
		aTotal := 120.
	].
	((receiptBooks at: aClientId) = 3) ifTrue: [
		aBagOfItems := Bag with: 'book_isbn1' with: 'book_isbn1' with: 'book_isbn2' with: 'book_isbn3'.
		aTotal := 150.
	].
	
	^ PurchasesSummary with: aBagOfItems total: aTotal.! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:35:06'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 00:35:06'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 00:35:06'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 00:35:06'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 00:35:06'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 00:35:06'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 00:35:06'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 00:35:06'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 00:35:06'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 00:35:06'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:38:27'!
      test10
	
	| shop cartId clientId password book1 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book1 := 'book_isbn1'.
	shop add: 1 of: book1 to: cartId.
	
	self
		should: [ shop checkOut: cartId payingWith: creditCard1. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier invalidCreditCardNumberErrorDescription.
	! !

Object subclass: #TestStubs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!

!classDefinition: #TestStubs category: 'Tus-Libros' stamp: 'nz 6/23/2021 00:41:54'!
Object subclass: #TestStubs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!TestStubs methodsFor: 'nil' stamp: 'nz 6/23/2021 00:42:35'!
            invalidNumberCreditCard

	^ CreditCard
		number: '418241'
		owner: self cardOwner
		expiration: self currentMonth next.! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:43:00'!
                        cardOwner
	^ 'PEPE SANCHEZ'.! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:43:27'!
                   currentMonth
	^ self today monthOfYear.! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:43:41'!
        today

	^ FixedGregorianDate today.! !

!classDefinition: #CheckOutTest category: 'Tus-Libros' stamp: 'nz 6/23/2021 00:44:19'!
TestCase subclass: #CheckOutTest
	instanceVariableNames: 'creditCardNumber cardOwner validCreditCard book1 book2 expiredCreditCard currentMonth today expiredThisMonthCreditCard mockAlwaysStolenCardMerchantProcessor mockAlwaysOkMerchantProcessor mockAlwaysFakeCardMerchantProcessor mockAlwaysWithoutCreditCardMerchantProcessor invalidNumberCreditCard emptyOwnerCreditCard emptyOwnerCreditCard2 stubs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!CheckOutTest methodsFor: 'setUp/tearDown' stamp: 'nz 6/23/2021 00:44:15' prior: 50341516 overrides: 16927572!
                           setUp

	today _ FixedGregorianDate today.
	currentMonth _ today monthOfYear.
	
	creditCardNumber _ '4182418241824182'.
	cardOwner _ 'PEPE SANCHEZ'.

	stubs := TestStubs new.

	validCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth next.
	
	expiredCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth previous.
		
	expiredThisMonthCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth.
		
	invalidNumberCreditCard _ CreditCard
		number: '418241'
		owner: cardOwner
		expiration: currentMonth next.
		
	emptyOwnerCreditCard _ CreditCard
		number: creditCardNumber
		owner: ''
		expiration: currentMonth next.
		
	emptyOwnerCreditCard2 _ CreditCard
		number: creditCardNumber
		owner: '            '
		expiration: currentMonth next.
		
	book1 := 'ISBN1'.
	book2 := 'ISBN2'.
	
	mockAlwaysStolenCardMerchantProcessor _ MockAlwaysStolenCardMerchantProcessor new.
	mockAlwaysOkMerchantProcessor _ MockAlwaysOkMerchantProcessor new.
	mockAlwaysFakeCardMerchantProcessor _ MockAlwaysFakeCardMerchantProcessor new.
	mockAlwaysWithoutCreditCardMerchantProcessor _ MockAlwaysWithoutCreditCardMerchantProcessor new.! !
!CheckOutTest methodsFor: 'setUp/tearDown' stamp: 'nz 6/23/2021 00:44:34' prior: 50344749 overrides: 16927572!
                         setUp

	today _ FixedGregorianDate today.
	currentMonth _ today monthOfYear.
	
	creditCardNumber _ '4182418241824182'.
	cardOwner _ 'PEPE SANCHEZ'.

	stubs := TestStubs new.

	validCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth next.
	
	expiredCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth previous.
		
	expiredThisMonthCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth.
		
	invalidNumberCreditCard _ stubs invalidNumberCreditCard.
		
	emptyOwnerCreditCard _ CreditCard
		number: creditCardNumber
		owner: ''
		expiration: currentMonth next.
		
	emptyOwnerCreditCard2 _ CreditCard
		number: creditCardNumber
		owner: '            '
		expiration: currentMonth next.
		
	book1 := 'ISBN1'.
	book2 := 'ISBN2'.
	
	mockAlwaysStolenCardMerchantProcessor _ MockAlwaysStolenCardMerchantProcessor new.
	mockAlwaysOkMerchantProcessor _ MockAlwaysOkMerchantProcessor new.
	mockAlwaysFakeCardMerchantProcessor _ MockAlwaysFakeCardMerchantProcessor new.
	mockAlwaysWithoutCreditCardMerchantProcessor _ MockAlwaysWithoutCreditCardMerchantProcessor new.! !

!testRun: #CheckOutTest #test01CheckoutEmptyCartShouldRaiseError stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test04CheckoutItemWithoutPricesShouldRaiseError stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test05CheckoutWithExpiredCardShouldRaiseError stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test06CheckoutWithCardExpiredThisMonthShouldRaiseError stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test07CheckoutWithStolenCardShouldRaiseError stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test08CheckoutWithFakeCardShouldRaiseError stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test09CheckoutWithInsufficientFundsShouldRaiseError stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test10CheckoutWithInvalidCardNumberShouldRaiseError stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test11CheckoutWithEmptyCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!testRun: #CheckOutTest #test12CheckoutWithBlankCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 00:44:44'!
PASSED!

!classDefinition: #ShopTest category: 'Tus-Libros' stamp: 'nz 6/23/2021 00:46:28'!
TestCase subclass: #ShopTest
	instanceVariableNames: 'creditCard1 stubs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:46:26' prior: 50344683!
                        test10
	
	| shop cartId clientId password book1 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true).
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book1 := 'book_isbn1'.
	shop add: 1 of: book1 to: cartId.
	
	self
		should: [ shop
				checkOut: cartId
				payingWith: stubs invalidNumberCreditCard. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier invalidCreditCardNumberErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:46:42' overrides: 16927572!
 setUp

	stubs := TestStubs new.! !

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 00:46:46'!
FAILURE!

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'nz 6/23/2021 00:55:02'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts receiptBooks cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:54:36' prior: 50344474!
          checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.
	

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	"cashier := Cashier
		withPrices: self getPrices
		receiptBook: self getReceiptBook
		merchantProcessor: self getMerchantProcessor."
		
	cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	receiptBooks at: clientId put: cart entries size.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 00:58:28' prior: 50344915!
                              checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.
	

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	receiptBooks at: clientId put: cart entries size.! !
!Shop methodsFor: 'initialization' stamp: 'nz 6/23/2021 00:59:13' prior: 50344433!
            initializeWithUserAuthenticator: anUserAuthenticator 
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	receiptBooks  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: nil
		receiptBook: nil
		merchantProcessor: nil.
		! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:01:29'!
                         priceList

	| bookPrices |
	bookPrices _ PriceList new.
	bookPrices set: self book1 price: 100.
	bookPrices set: self book2 price: 25.
	^bookPrices.! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:01:49'!
                           book1
	^'ISBN1'.! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:01:53'!
                               book2
	^'ISBN2'.! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:03:31'!
                               mockAlwaysOkMerchantProcessor

	^MockAlwaysOkMerchantProcessor new.! !
!CheckOutTest methodsFor: 'setUp/tearDown' stamp: 'nz 6/23/2021 01:03:45' prior: 50344792 overrides: 16927572!
          setUp

	today _ FixedGregorianDate today.
	currentMonth _ today monthOfYear.
	
	creditCardNumber _ '4182418241824182'.
	cardOwner _ 'PEPE SANCHEZ'.

	stubs := TestStubs new.

	validCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth next.
	
	expiredCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth previous.
		
	expiredThisMonthCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth.
		
	invalidNumberCreditCard _ stubs invalidNumberCreditCard.
		
	emptyOwnerCreditCard _ CreditCard
		number: creditCardNumber
		owner: ''
		expiration: currentMonth next.
		
	emptyOwnerCreditCard2 _ CreditCard
		number: creditCardNumber
		owner: '            '
		expiration: currentMonth next.
		
	book1 := 'ISBN1'.
	book2 := 'ISBN2'.
	
	mockAlwaysStolenCardMerchantProcessor _ MockAlwaysStolenCardMerchantProcessor new.
	mockAlwaysOkMerchantProcessor _ stubs mockAlwaysOkMerchantProcessor.
	mockAlwaysFakeCardMerchantProcessor _ MockAlwaysFakeCardMerchantProcessor new.
	mockAlwaysWithoutCreditCardMerchantProcessor _ MockAlwaysWithoutCreditCardMerchantProcessor new.! !
!CheckOutTest methodsFor: 'setUp/tearDown' stamp: 'nz 6/23/2021 01:04:03' prior: 50344990 overrides: 16927572!
          setUp

	today _ FixedGregorianDate today.
	currentMonth _ today monthOfYear.
	
	creditCardNumber _ '4182418241824182'.
	cardOwner _ 'PEPE SANCHEZ'.

	stubs := TestStubs new.

	validCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth next.
	
	expiredCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth previous.
		
	expiredThisMonthCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth.
		
	invalidNumberCreditCard _ stubs invalidNumberCreditCard.
		
	emptyOwnerCreditCard _ CreditCard
		number: creditCardNumber
		owner: ''
		expiration: currentMonth next.
		
	emptyOwnerCreditCard2 _ CreditCard
		number: creditCardNumber
		owner: '            '
		expiration: currentMonth next.
		
	book1 := stubs book1.
	book2 := stubs book2.
	
	mockAlwaysStolenCardMerchantProcessor _ MockAlwaysStolenCardMerchantProcessor new.
	mockAlwaysOkMerchantProcessor _ stubs mockAlwaysOkMerchantProcessor.
	mockAlwaysFakeCardMerchantProcessor _ MockAlwaysFakeCardMerchantProcessor new.
	mockAlwaysWithoutCreditCardMerchantProcessor _ MockAlwaysWithoutCreditCardMerchantProcessor new.! !
!Shop methodsFor: 'initialization' stamp: 'nz 6/23/2021 01:04:48' prior: 50344956!
                              initializeWithUserAuthenticator: anUserAuthenticator 
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	receiptBooks  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: nil
		receiptBook: OrderedCollection new
		merchantProcessor: nil.
		! !
!Shop methodsFor: 'initialization' stamp: 'nz 6/23/2021 01:05:54'!
                 initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList  
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	receiptBooks  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: nil
		receiptBook: OrderedCollection new
		merchantProcessor: nil.
		! !
!Shop class methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:05:54' prior: 50342412!
  withUserAuthenticator: anUserAuthenticator 

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: nil ! !

!methodRemoval: Shop #initializeWithUserAuthenticator: stamp: 'nz 6/23/2021 01:05:54'!
initializeWithUserAuthenticator: anUserAuthenticator 
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	receiptBooks  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: nil
		receiptBook: OrderedCollection new
		merchantProcessor: nil.
		!
!Shop methodsFor: 'initialization' stamp: 'nz 6/23/2021 01:05:59' prior: 50345084!
              initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList  
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	receiptBooks  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: nil.
		! !
!Shop methodsFor: 'initialization' stamp: 'nz 6/23/2021 01:06:27'!
                      initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	receiptBooks  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: nil.
		! !
!Shop class methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:06:27' prior: 50345097!
                    withUserAuthenticator: anUserAuthenticator 

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: nil merchantProcessor: nil ! !

!methodRemoval: Shop #initializeWithUserAuthenticator:prices: stamp: 'nz 6/23/2021 01:06:27'!
initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList  
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	receiptBooks  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: nil.
		!
!Shop methodsFor: 'initialization' stamp: 'nz 6/23/2021 01:06:32' prior: 50345129!
                     initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	receiptBooks  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		! !
!Shop class methodsFor: 'instance creation' stamp: 'nz 6/23/2021 01:07:40'!
                       withUserAuthenticator: anUserAuthenticator prices: aPriceList  

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: nil merchantProcessor: nil ! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:07:40' prior: 50343472!
                            test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList.
	
	self should: [ shop checkOut: 16 payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:07:40' prior: 50344882!
   test10
	
	| shop cartId clientId password book1 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book1 := 'book_isbn1'.
	shop add: 1 of: book1 to: cartId.
	
	self
		should: [ shop
				checkOut: cartId
				payingWith: stubs invalidNumberCreditCard. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier invalidCreditCardNumberErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:07:40' prior: 50342830!
             test04
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList.
	
	self should: [ shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:07:40' prior: 50342619!
                          test01
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) prices: stubs priceList.
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:07:40' prior: 50343682!
               test07
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList.
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	self should: [ shop checkOut: cartId payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:07:40' prior: 50342717!
                  test03
	
	| shop cartId cartItems bookIsbn quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems size equals: 1.
	self assert: cartItems first quantity equals: quantity.
	self assert: cartItems first item equals: bookIsbn.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:07:40' prior: 50344611!
        test09
	
	| shop cartId clientId password purchases book1 book2 book3 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book1 := 'book_isbn1'.
	shop add: 2 of: book1 to: cartId.
	
	book2 := 'book_isbn2'.
	shop add: 1 of: book2 to: cartId.
	
	book3 := 'book_isbn3'.
	shop add: 1 of: book3 to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: book1) equals: 2.
	self assert: (purchases items occurrencesOf: book2) equals: 1.
	self assert: (purchases items occurrencesOf: book3) equals: 1.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:07:40' prior: 50342608!
                            test02
	
	| shop cartId cartItems |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:07:40' prior: 50344380!
           test08
	
	| shop cartId clientId password purchases book |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book := 'book_isbn1'.
	shop add: 2 of: book to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: book) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:07:40' prior: 50342909!
      test05
	
	| shop bookIsbn cartId1 cartId2 quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList.
	
	cartId1 := shop createCartClientId: 3 password: '1234'.
	cartId2 := shop createCartClientId: 4 password: '12345'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId1.
	
	self assert: (shop listCart: cartId2) isEmpty.
	! !

!methodRemoval: Shop class #withUserAuthenticator: stamp: 'nz 6/23/2021 01:07:40'!
withUserAuthenticator: anUserAuthenticator 

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: nil merchantProcessor: nil !
!Shop class methodsFor: 'instance creation' stamp: 'nz 6/23/2021 01:07:47' prior: 50345180!
                  withUserAuthenticator: anUserAuthenticator prices: aPriceList  

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: nil ! !
!Shop class methodsFor: 'instance creation' stamp: 'nz 6/23/2021 01:08:54'!
     withUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: nil ! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:08:54' prior: 50345280!
              test09
	
	| shop cartId clientId password purchases book1 book2 book3 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book1 := 'book_isbn1'.
	shop add: 2 of: book1 to: cartId.
	
	book2 := 'book_isbn2'.
	shop add: 1 of: book2 to: cartId.
	
	book3 := 'book_isbn3'.
	shop add: 1 of: book3 to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: book1) equals: 2.
	self assert: (purchases items occurrencesOf: book2) equals: 1.
	self assert: (purchases items occurrencesOf: book3) equals: 1.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:08:54' prior: 50345311!
     test02
	
	| shop cartId cartItems |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:08:54' prior: 50345233!
                    test01
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:08:54' prior: 50345201!
                        test10
	
	| shop cartId clientId password book1 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book1 := 'book_isbn1'.
	shop add: 1 of: book1 to: cartId.
	
	self
		should: [ shop
				checkOut: cartId
				payingWith: stubs invalidNumberCreditCard. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier invalidCreditCardNumberErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:08:54' prior: 50345246!
                      test07
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	self should: [ shop checkOut: cartId payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:08:54' prior: 50345323!
                           test08
	
	| shop cartId clientId password purchases book |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book := 'book_isbn1'.
	shop add: 2 of: book to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: book) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:08:54' prior: 50345261!
               test03
	
	| shop cartId cartItems bookIsbn quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems size equals: 1.
	self assert: cartItems first quantity equals: quantity.
	self assert: cartItems first item equals: bookIsbn.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:08:54' prior: 50345345!
                 test05
	
	| shop bookIsbn cartId1 cartId2 quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId1 := shop createCartClientId: 3 password: '1234'.
	cartId2 := shop createCartClientId: 4 password: '12345'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId1.
	
	self assert: (shop listCart: cartId2) isEmpty.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:08:54' prior: 50345189!
 test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	self should: [ shop checkOut: 16 payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:08:54' prior: 50345221!
            test04
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	self should: [ shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !

!methodRemoval: Shop class #withUserAuthenticator:prices: stamp: 'nz 6/23/2021 01:08:54'!
withUserAuthenticator: anUserAuthenticator prices: aPriceList  

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: nil !
!Shop class methodsFor: 'instance creation' stamp: 'nz 6/23/2021 01:08:59' prior: 50345377!
                           withUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor ! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:09:30' prior: 50345433!
                               test01
	
	| shop |
	
	shop := Shop
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) 
		prices: stubs priceList
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:10:48'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:10:48'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:10:48'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:10:48'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:10:48'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:10:48'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:10:48'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:10:48'!
ERROR!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:10:48'!
ERROR!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:10:48'!
ERROR!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:10:58'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:11:17'!
                  today
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:11:36' prior: 50345635!
    today
	^FixedGregorianDate today.! !

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:11:37'!
ERROR!
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:12:00' prior: 50344968!
                          priceList

	| bookPrices |
	bookPrices _ PriceList new.
	bookPrices set: self book1 price: 100.
	bookPrices set: self book2 price: 25.
	^bookPrices.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:12:06' prior: 50345487!
            test08
	
	| shop cartId clientId password purchases book |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book := 'ISBN1'.
	shop add: 2 of: book to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: book) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:12:12' prior: 50345387!
                    test09
	
	| shop cartId clientId password purchases book1 book2 book3 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	book1 := 'ISBN2'.
	shop add: 2 of: book1 to: cartId.
	
	book2 := 'book_isbn2'.
	shop add: 1 of: book2 to: cartId.
	
	book3 := 'book_isbn3'.
	shop add: 1 of: book3 to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: book1) equals: 2.
	self assert: (purchases items occurrencesOf: book2) equals: 1.
	self assert: (purchases items occurrencesOf: book3) equals: 1.
	! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:12:43'!
                         book3
	^'ISBN3'.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:12:56' prior: 50345678!
                test09
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop add: 1 of: stubs book2 to: cartId.
	
	shop add: 1 of: stubs book3 to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 1.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:13:10' prior: 50345654!
                           test08
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop checkOut: cartId payingWith: creditCard1.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:13:16' prior: 50345448!
                             test10
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 1 of: stubs book1 to: cartId.
	
	self
		should: [ shop
				checkOut: cartId
				payingWith: stubs invalidNumberCreditCard. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier invalidCreditCardNumberErrorDescription.
	! !

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:13:21'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:13:21'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:13:21'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:13:21'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:13:21'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:13:21'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:13:21'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:13:21'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:13:21'!
ERROR!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:13:21'!
ERROR!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:13:21'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:13:24'!
ERROR!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:13:51'!
ERROR!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:14:25'!
ERROR!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:14:58' prior: 50345745!
             test08
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop checkOut: cartId payingWith: stubs invalidNumberCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	! !

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:15:02'!
ERROR!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:15:15' prior: 50345820!
       test08
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:15:30' prior: 50345714!
                   test09
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop add: 1 of: stubs book2 to: cartId.
	
	shop add: 1 of: stubs book3 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 1.
	! !

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:15:47'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:15:47'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:15:47'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:15:47'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:15:47'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:15:47'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:15:47'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:15:47'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:15:47'!
ERROR!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:15:47'!
ERROR!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:15:47'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:15:52'!
ERROR!
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:15:58'!
       validCreditCard
	self shouldBeImplemented.! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:16:35' prior: 50345926!
                     validCreditCard
	^CreditCard
		number: self validCreditCardNumber
		owner: self cardOwner
		expiration: self currentMonth next.! !

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:16:39'!
ERROR!
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:16:44'!
            validCreditCardNumber
	self shouldBeImplemented.! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:16:56' prior: 50345940!
               validCreditCardNumber
	^'4182418241824182'.! !

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:16:59'!
FAILURE!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:17:15'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:17:15'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:17:15'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:17:15'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:17:15'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:17:15'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:17:15'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:17:15'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:17:15'!
FAILURE!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:17:15'!
ERROR!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:17:15'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:17:17'!
ERROR!
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:17:43' prior: 50345646!
                   priceList

	| bookPrices |
	bookPrices _ PriceList new.
	bookPrices set: self book1 price: 100.
	bookPrices set: self book2 price: 25.
	bookPrices set: self book3 price: 25.
	^bookPrices.! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:17:49' prior: 50345978!
    priceList

	| bookPrices |
	bookPrices _ PriceList new.
	bookPrices set: self book1 price: 100.
	bookPrices set: self book2 price: 25.
	bookPrices set: self book3 price: 23.
	^bookPrices.! !

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:17:56'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:18:49' prior: 50344641!
   listPurchasesOf: aClientId with: aClientPassword

	| aBagOfItems aTotal |
	
	((receiptBooks at: aClientId) = 1) ifTrue: [
		aBagOfItems := Bag with: 'ISBN1' with: 'ISBN1'.
		aTotal := 100.
	].
	((receiptBooks at: aClientId) = 2) ifTrue: [
		aBagOfItems := Bag with: 'ISBN1' with: 'ISBN1' with: 'ISBN2'.
		aTotal := 120.
	].
	((receiptBooks at: aClientId) = 3) ifTrue: [
		aBagOfItems := Bag with: 'ISBN1' with: 'ISBN1' with: 'ISBN2' with: 'ISBN3'.
		aTotal := 150.
	].
	
	^ PurchasesSummary with: aBagOfItems total: aTotal.! !

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:18:53'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:21:01' prior: 50344938!
  checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.
	

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	receiptBooks at: clientId put: cart entries size.! !

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:21:04'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:21:04'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:21:04'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:21:04'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:21:04'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:21:04'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:21:04'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:21:04'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:21:04'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:21:04'!
PASSED!

!testRun: #CheckOutTest #test01CheckoutEmptyCartShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test04CheckoutItemWithoutPricesShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test05CheckoutWithExpiredCardShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test06CheckoutWithCardExpiredThisMonthShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test07CheckoutWithStolenCardShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test08CheckoutWithFakeCardShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test09CheckoutWithInsufficientFundsShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test10CheckoutWithInvalidCardNumberShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test11CheckoutWithEmptyCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #CheckOutTest #test12CheckoutWithBlankCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #PriceListTest #test01AddItemWithNegativePriceShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #PriceListTest #test02AddItemWithZeroPriceShouldRaiseError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShoppingCartTest #test01EmptyCartHasNoItems stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShoppingCartTest #test02AddingAnItemToACart stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShoppingCartTest #test03AddingMultipleItemsToACart stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShoppingCartTest #test04AddingANegativeQuantityRaisesError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShoppingCartTest #test05AddingZeroQuantityRaisesError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!

!testRun: #ShoppingCartTest #test06AddingNonIntegerQuantityRaisesError stamp: 'nz 6/23/2021 01:21:08'!
PASSED!
!CheckOutTest methodsFor: 'valid checkout' stamp: 'nz 6/23/2021 01:25:02' prior: 50340599!
             test02CheckoutACartWithOneItem

	| aCashier bookPrices cart receipt receiptBook |
	
	bookPrices _ PriceList new.
	bookPrices set: book1 price: 124.
	
	receiptBook _ OrderedCollection new.
	
	aCashier _ Cashier withPrices: bookPrices receiptBook: receiptBook merchantProcessor: mockAlwaysOkMerchantProcessor.
	
	cart _ ShoppingCart new.
	cart add: 1 of: book1.
	
	receipt _ aCashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: 124 equals: receipt total.
	self assert: 1 equals: receipt items size.
	self assert: 1 equals: (receipt items occurrencesOf: book1).
	
	self assert: receipt isTheOnlyIn: receiptBook.! !

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 01:25:05'!
ERROR!
!Receipt methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:25:21'!
                       items
	self shouldBeImplemented.! !
!Receipt methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:25:31' prior: 50346197!
 items
	^Bag new.! !

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 01:25:33'!
FAILURE!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 01:25:54'!
FAILURE!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 01:26:02'!
FAILURE!
!Receipt methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:27:28' prior: 50346201!
           items
	^Bag with: 'ISBN1'.! !

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test01CheckoutEmptyCartShouldRaiseError stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test04CheckoutItemWithoutPricesShouldRaiseError stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test05CheckoutWithExpiredCardShouldRaiseError stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test06CheckoutWithCardExpiredThisMonthShouldRaiseError stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test07CheckoutWithStolenCardShouldRaiseError stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test08CheckoutWithFakeCardShouldRaiseError stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test09CheckoutWithInsufficientFundsShouldRaiseError stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test10CheckoutWithInvalidCardNumberShouldRaiseError stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test11CheckoutWithEmptyCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 01:27:32'!
PASSED!

!testRun: #CheckOutTest #test12CheckoutWithBlankCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 01:27:32'!
PASSED!
!CheckOutTest methodsFor: 'valid checkout' stamp: 'nz 6/23/2021 01:27:57' prior: 50340637!
   test03CheckoutACartWithMultipleItems

	| aCashier bookPrices cart receipt receiptBook |
	
	bookPrices _ PriceList new.
	bookPrices set: book1 price: 100.
	bookPrices set: book2 price: 25.
	
	receiptBook _ OrderedCollection new.
	
	aCashier _ Cashier withPrices: bookPrices receiptBook: receiptBook merchantProcessor: mockAlwaysOkMerchantProcessor.
	
	cart _ ShoppingCart new.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	
	receipt _ aCashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: 150 equals: receipt total.
	self assert: 3 equals: receipt items size.
	self assert: 1 equals: (receipt items occurrencesOf: book1).
	self assert: 2 equals: (receipt items occurrencesOf: book2).

	self assert: receipt isTheOnlyIn: receiptBook.
	! !

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 01:27:58'!
FAILURE!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 01:28:13'!
FAILURE!
!Cashier methodsFor: 'private' stamp: 'nz 6/23/2021 01:31:18'!
                    createReceiptWithTotal: anAmountOfMoney cart: aShoppingCart 

	| receipt |
	
	receipt _ Receipt withTotal: anAmountOfMoney.
	receiptBook add: receipt.
	
	^receipt .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:31:18' prior: 50339295!
                             checkOut: aShoppingCart payingWith: aCreditCard on: aGregorianDate  

	| total |

	self assertCanCheckout: aShoppingCart payingWith: aCreditCard on: aGregorianDate.
	
	total _ self calculateShoppingCartTotal: aShoppingCart.

	merchantProcessor debit: total from: aCreditCard. 

	^ self createReceiptWithTotal: total cart: aShoppingCart.
	! !

!methodRemoval: Cashier #createReceiptWithTotal: stamp: 'nz 6/23/2021 01:31:18'!
createReceiptWithTotal: anAmountOfMoney

	| receipt |
	
	receipt _ Receipt withTotal: anAmountOfMoney.
	receiptBook add: receipt.
	
	^receipt .!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 01:31:32'!
FAILURE!
!Receipt class methodsFor: 'instance creation' stamp: 'nz 6/23/2021 01:34:27'!
                withTotal: aTransactionTotal items: aBagOfItems  

	^self new initializeWithTotal: aTransactionTotal ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:34:27' prior: 50346296!
                            createReceiptWithTotal: anAmountOfMoney cart: aShoppingCart 

	| receipt |
	
	receipt _ Receipt withTotal: anAmountOfMoney items: (self getEntriesAsBag: aShoppingCart).
	receiptBook add: receipt.
	
	^receipt .! !

!methodRemoval: Receipt class #withTotal: stamp: 'nz 6/23/2021 01:34:27'!
withTotal: aTransactionTotal 

	^self new initializeWithTotal: aTransactionTotal !

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 01:34:32'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:35:19'!
                            getEntriesAsBag: aShoppingCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:35:51' prior: 50346354!
       getEntriesAsBag: aShoppingCart 
	
	| aBag |
	aBag := Bag new.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:35:59' prior: 50346359!
getEntriesAsBag: aShoppingCart 
	
	| aBag |
	aBag := Bag new.
	
	^aBag.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:37:45' prior: 50346364!
                          getEntriesAsBag: aShoppingCart 
	
	| aBag |
	aBag := Bag new.
	
	aShoppingCart entries do: [ :entry | aBag add: entry item withOccurrences: entry quantity ].
	
	^aBag.! !

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 01:37:49'!
FAILURE!
!Receipt methodsFor: 'initialization' stamp: 'nz 6/23/2021 01:39:45'!
       initializeWithTotal: aTransactionTotal items: aBagOfItems  
	
	total := aTransactionTotal.! !
!Receipt class methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:39:45' prior: 50346329!
 withTotal: aTransactionTotal items: aBagOfItems  

	^self new initializeWithTotal: aTransactionTotal items: aBagOfItems ! !

!methodRemoval: Receipt #initializeWithTotal: stamp: 'nz 6/23/2021 01:39:45'!
initializeWithTotal: aTransactionTotal 
	
	total := aTransactionTotal.!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 01:39:51'!
FAILURE!

!classDefinition: #Receipt category: 'Tus-Libros' stamp: 'nz 6/23/2021 01:40:13'!
Object subclass: #Receipt
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Receipt methodsFor: 'initialization' stamp: 'nz 6/23/2021 01:40:10' prior: 50346381!
                     initializeWithTotal: aTransactionTotal items: aBagOfItems  
	
	total := aTransactionTotal.
	items := aBagOfItems.! !
!Receipt methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:40:20' prior: 50346214!
                items
	^items.! !

!testRun: #CheckOutTest #test01CheckoutEmptyCartShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test04CheckoutItemWithoutPricesShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test05CheckoutWithExpiredCardShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test06CheckoutWithCardExpiredThisMonthShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test07CheckoutWithStolenCardShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test08CheckoutWithFakeCardShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test09CheckoutWithInsufficientFundsShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test10CheckoutWithInvalidCardNumberShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test11CheckoutWithEmptyCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #CheckOutTest #test12CheckoutWithBlankCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #PriceListTest #test01AddItemWithNegativePriceShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #PriceListTest #test02AddItemWithZeroPriceShouldRaiseError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShoppingCartTest #test01EmptyCartHasNoItems stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShoppingCartTest #test02AddingAnItemToACart stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShoppingCartTest #test03AddingMultipleItemsToACart stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShoppingCartTest #test04AddingANegativeQuantityRaisesError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShoppingCartTest #test05AddingZeroQuantityRaisesError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!testRun: #ShoppingCartTest #test06AddingNonIntegerQuantityRaisesError stamp: 'nz 6/23/2021 01:40:29'!
PASSED!

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'nz 6/23/2021 01:41:38'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts lastReceiptForClient cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:41:38' prior: 50345998!
                    listPurchasesOf: aClientId with: aClientPassword

	| aBagOfItems aTotal |
	
	((lastReceiptForClient at: aClientId) = 1) ifTrue: [
		aBagOfItems := Bag with: 'ISBN1' with: 'ISBN1'.
		aTotal := 100.
	].
	((lastReceiptForClient at: aClientId) = 2) ifTrue: [
		aBagOfItems := Bag with: 'ISBN1' with: 'ISBN1' with: 'ISBN2'.
		aTotal := 120.
	].
	((lastReceiptForClient at: aClientId) = 3) ifTrue: [
		aBagOfItems := Bag with: 'ISBN1' with: 'ISBN1' with: 'ISBN2' with: 'ISBN3'.
		aTotal := 150.
	].
	
	^ PurchasesSummary with: aBagOfItems total: aTotal.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:41:38' prior: 50346041!
 checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.
	

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	lastReceiptForClient at: clientId put: cart entries size.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:41:38' prior: 50345165!
                               initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	lastReceiptForClient  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:41:55' prior: 50346538!
   checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.
	

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	lastReceiptForClient at: clientId put: receipt.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:42:51' prior: 50346518!
                      listPurchasesOf: aClientId with: aClientPassword

	| receipt |
	
	receipt := lastReceiptForClient at: aClientId .

	^ PurchasesSummary with: receipt items total: receipt total.! !

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:42:52'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:42:52'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:42:52'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:42:52'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:42:52'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:42:52'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:42:52'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:42:52'!
FAILURE!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:42:52'!
FAILURE!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:42:52'!
PASSED!
!TestStubs methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:43:29' prior: 50345987!
                           priceList

	| bookPrices |
	bookPrices _ PriceList new.
	bookPrices set: self book1 price: 50.
	bookPrices set: self book2 price: 20.
	bookPrices set: self book3 price: 30.
	^bookPrices.! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:43:37'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:47:55' prior: 50345870!
               test09
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 5.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:47:59'!
FAILURE!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:48:24' prior: 50346655!
                      test09
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: 150 equals: purchases total.
	self assert: purchases items size equals: 5.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:48:25'!
FAILURE!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:48:38' prior: 50346695!
                      test09
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: 150 equals: purchases total.
	self assert: 5 equals: purchases items size.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	! !

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:48:46'!
FAILURE!

!testRun: #CheckOutTest #test01CheckoutEmptyCartShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test04CheckoutItemWithoutPricesShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test05CheckoutWithExpiredCardShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test06CheckoutWithCardExpiredThisMonthShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test07CheckoutWithStolenCardShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test08CheckoutWithFakeCardShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test09CheckoutWithInsufficientFundsShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test10CheckoutWithInvalidCardNumberShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test11CheckoutWithEmptyCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #CheckOutTest #test12CheckoutWithBlankCardOwnerNameShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #PriceListTest #test01AddItemWithNegativePriceShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #PriceListTest #test02AddItemWithZeroPriceShouldRaiseError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:48:51'!
FAILURE!

!testRun: #ShopTest #test10 stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShoppingCartTest #test01EmptyCartHasNoItems stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShoppingCartTest #test02AddingAnItemToACart stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShoppingCartTest #test03AddingMultipleItemsToACart stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShoppingCartTest #test04AddingANegativeQuantityRaisesError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShoppingCartTest #test05AddingZeroQuantityRaisesError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShoppingCartTest #test06AddingNonIntegerQuantityRaisesError stamp: 'nz 6/23/2021 01:48:51'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'nz 6/23/2021 01:48:51'!
FAILURE!

----QUIT----(23 June 2021 01:48:57) TusLibros.image priorSource: 386054!

----STARTUP---- (23 June 2021 01:49:06) as /home/nikita/r/f/ingsoft1/Inge1-ejercicios/20-TusLibros/TusLibros.image!


----QUIT----(23 June 2021 01:49:15) TusLibros.image priorSource: 486905!

----STARTUP---- (23 June 2021 22:47:07) as /home/awolfsdorf/Dropbox/CSCOM/IngeSoft1/Inge1-ejercicios/20-TusLibros/TusLibros.image!

!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 22:47:47' prior: 50346591!
                               listPurchasesOf: aClientId with: aClientPassword

	| receipt |
	
	receipt := lastReceiptForClient at: aClientId .

	^ PurchasesSummary with: receipt items total: receipt total.! !

!testRun: #ShopTest #test01 stamp: 'AW 6/23/2021 22:47:47'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/23/2021 22:47:47'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/23/2021 22:47:47'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/23/2021 22:47:47'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/23/2021 22:47:47'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/23/2021 22:47:47'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/23/2021 22:47:47'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/23/2021 22:47:47'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 22:47:47'!
FAILURE!

!testRun: #ShopTest #test10 stamp: 'AW 6/23/2021 22:47:47'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 22:47:47'!
FAILURE!

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 22:48:11'!
FAILURE!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 22:49:34'!
 test11
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: 150 equals: purchases total.
	self assert: 5 equals: purchases items size.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/23/2021 01:15:30' prior: 50346735!
                            test09
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop add: 1 of: stubs book2 to: cartId.
	
	shop add: 1 of: stubs book3 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 1.
	! !

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/23/2021 22:49:54'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 22:49:54'!
FAILURE!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 22:49:54'!
FAILURE!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 22:53:57'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:00:42' prior: 50346572!
            checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	(self cartExists: aShoppingCartId ) ifTrue: [ self error: self class invalidCartIdErrorDescription ].
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.
	

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:00:49'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:00:58'!
    registerReceipt: aReceipt for: aSmallInteger 
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:01:20' prior: 50347033!
                            registerReceipt: aReceipt for: aClientId 
	lastReceiptForClient at: aClientId put: aReceipt.! !

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'AW 6/23/2021 23:01:43'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts receiptsForClients cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:01:43' prior: 50346880!
             listPurchasesOf: aClientId with: aClientPassword

	| receipt |
	
	receipt := receiptsForClients at: aClientId .

	^ PurchasesSummary with: receipt items total: receipt total.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:01:43' prior: 50346557!
                      initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	receiptsForClients  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:01:43' prior: 50347039!
     registerReceipt: aReceipt for: aClientId 
	receiptsForClients at: aClientId put: aReceipt.! !

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'AW 6/23/2021 23:01:52'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts clientReceipts cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:01:52' prior: 50347053!
                   listPurchasesOf: aClientId with: aClientPassword

	| receipt |
	
	receipt := clientReceipts at: aClientId .

	^ PurchasesSummary with: receipt items total: receipt total.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:01:52' prior: 50347062!
                          initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	clientReceipts  := Dictionary new.  "clientId => cart size"
	
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:01:52' prior: 50347077!
         registerReceipt: aReceipt for: aClientId 
	clientReceipts at: aClientId put: aReceipt.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:04:08' prior: 50347115!
              registerReceipt: aReceipt for: aClientId 
	| receipts |
	receipts := clientReceipts at: aClientId ifAbsentPut: OrderedCollection new.
	
	receipts add: aReceipt.! !

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:04:19'!
ERROR!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:04:45'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:05:44' prior: 50347091!
                            listPurchasesOf: aClientId with: aClientPassword

	| receipts |
	
	receipts := clientReceipts at: aClientId .

	^ PurchasesSummary with: receipts items total: receipts total.! !

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:06:11'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:07:20' prior: 50347134!
                  listPurchasesOf: aClientId with: aClientPassword

	| receipts |
	
	receipts := clientReceipts at: aClientId .

	^ PurchasesSummary with: receipts.! !
!PurchasesSummary class methodsFor: 'instance creation' stamp: 'AW 6/23/2021 23:07:27' prior: 50344262!
  with: aBagOfItems total: aTotalAmount 

	^self new initializeWith: aBagOfItems.! !
!PurchasesSummary class methodsFor: 'instance creation' stamp: 'AW 6/23/2021 23:07:38'!
                     with: aBagOfItems

	^self new initializeWith: aBagOfItems.! !
!PurchasesSummary class methodsFor: 'instance creation' stamp: 'AW 6/23/2021 23:07:48'!
          for: aBagOfItems

	^self new initializeWith: aBagOfItems.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:07:48' prior: 50347145!
           listPurchasesOf: aClientId with: aClientPassword

	| receipts |
	
	receipts := clientReceipts at: aClientId .

	^ PurchasesSummary for: receipts.! !

!methodRemoval: PurchasesSummary class #with: stamp: 'AW 6/23/2021 23:07:48'!
with: aBagOfItems

	^self new initializeWith: aBagOfItems.!
!PurchasesSummary class methodsFor: 'instance creation' stamp: 'AW 6/23/2021 23:07:59' prior: 50347164!
                        for: aReceiptCollection

	^self new initializeWith: aReceiptCollection.! !
!PurchasesSummary class methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:08:11' prior: 50347182!
           for: aReceiptCollection

	^self new initializeFor: aReceiptCollection.! !
!PurchasesSummary class methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:08:11' prior: 50347153!
            with: aBagOfItems total: aTotalAmount 

	^self new initializeFor: aBagOfItems.! !

!methodRemoval: PurchasesSummary class #with:total: stamp: 'AW 6/23/2021 23:08:12'!
with: aBagOfItems total: aTotalAmount 

	^self new initializeFor: aBagOfItems.!
!PurchasesSummary methodsFor: 'initialization' stamp: 'AW 6/23/2021 23:08:57'!
                          initializeWith: aReceiptCollection

	| aTotalAmount |
	items := aReceiptCollection.
	total := aTotalAmount.! !
!PurchasesSummary methodsFor: 'initialization' stamp: 'AW 6/23/2021 23:09:09' prior: 50347205!
                  initializeWith: aReceiptCollection
	| aTotalAmount |
	items := aReceiptCollection.
	total := aTotalAmount.! !
!PurchasesSummary methodsFor: 'initialization' stamp: 'AW 6/23/2021 23:09:23' prior: 50347212!
                   initializeWith: aReceiptCollection
	| totalAmount |
	items := aReceiptCollection.
	total := totalAmount.! !
!PurchasesSummary methodsFor: 'initialization' stamp: 'AW 6/23/2021 23:09:40' prior: 50347219!
                     initializeWith: aReceiptCollection
	| totalAmount |

	items := aReceiptCollection.
	total := totalAmount.! !

!methodRemoval: PurchasesSummary #initializeWith:total: stamp: 'AW 6/23/2021 23:09:43'!
initializeWith: aBagOfItems total: aTotalAmount 

	items := aBagOfItems.
	total := aTotalAmount.!
!PurchasesSummary methodsFor: 'initialization' stamp: 'AW 6/23/2021 23:11:16' prior: 50347226!
                         initializeWith: aReceiptCollection

	total := 0.
	items := Bag new.
	aReceiptCollection do: [ :aReceipt | 
		items addAll: aReceipt items.
		total := total + aReceipt total.	
	]
	! !
!PurchasesSummary methodsFor: 'initialization' stamp: 'AW 6/23/2021 23:13:38' prior: 50347239!
          initializeWith: aReceiptCollection

	total := 0.
	items := Bag new.
	aReceiptCollection do: [ :aReceipt | 
		items addAll: aReceipt items.
		total := total + aReceipt total.	
	].
	! !

!testRun: #ShopTest #test06 stamp: 'AW 6/23/2021 23:13:48'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:13:52'!
ERROR!
!PurchasesSummary methodsFor: 'initialization' stamp: 'AW 6/23/2021 23:14:32'!
                initializeFor: aReceiptCollection

	total := 0.
	items := Bag new.
	aReceiptCollection do: [ :aReceipt | 
		items addAll: aReceipt items.
		total := total + aReceipt total.	
	].
	! !

!methodRemoval: PurchasesSummary #initializeWith: stamp: 'AW 6/23/2021 23:14:32'!
initializeWith: aReceiptCollection

	total := 0.
	items := Bag new.
	aReceiptCollection do: [ :aReceipt | 
		items addAll: aReceipt items.
		total := total + aReceipt total.	
	].
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:14:52' prior: 50346914!
    test11
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: 150 equals: purchases total.
	self assert: 5 equals: purchases items size.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	! !

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:14:52'!
FAILURE!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:16:32' prior: 50347278!
                      test11
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: 230 equals: purchases total.
	self assert: 6 equals: purchases items size.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	! !

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:16:40'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:21:04'!
                test12
	
	| shop clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	
	
	self should: [ shop listPurchasesOf: clientId with: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:23:21' prior: 50347381!
              test12
	
	| shop clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	
	self should: [ shop listPurchasesOf: clientId with: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.
	! !

!testRun: #ShopTest #test12 stamp: 'AW 6/23/2021 23:25:09'!
FAILURE!

!testRun: #ShopTest #test12 stamp: 'AW 6/23/2021 23:27:03'!
FAILURE!

!testRun: #ShopTest #test12 stamp: 'AW 6/23/2021 23:27:12'!
FAILURE!

!testRun: #ShopTest #test12 stamp: 'AW 6/23/2021 23:27:37'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:29:13' prior: 50347169!
      listPurchasesOf: aClientId with: aClientPassword

	| receipts |
	
	userAuthenticator authenticate: aClientId password: aClientPassword.
	
	
	receipts := clientReceipts at: aClientId .

	^ PurchasesSummary for: receipts.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:29:19' prior: 50347423!
         listPurchasesOf: aClientId with: aClientPassword

	| receipts |
	
	userAuthenticator authenticate: aClientId password: aClientPassword.

	
	receipts := clientReceipts at: aClientId .

	^ PurchasesSummary for: receipts.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:29:20' prior: 50347433!
          listPurchasesOf: aClientId with: aClientPassword

	| receipts |
	
	userAuthenticator authenticate: aClientId password: aClientPassword.
	
	receipts := clientReceipts at: aClientId .

	^ PurchasesSummary for: receipts.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:30:29' prior: 50347443!
           listPurchasesOf: aClientId with: aClientPassword

	| receipts |
	
	(userAuthenticator authenticate: aClientId password: aClientPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription.
	].
	
	receipts := clientReceipts at: aClientId .

	^ PurchasesSummary for: receipts.! !

!testRun: #ShopTest #test12 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/23/2021 23:30:33'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:34:11' prior: 50347013!
                    checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.
	

	(cart entries) ifEmpty: [ self error: Cashier cantCheckoutEmptyCartErrorDescription ].
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:34:26' prior: 50343177!
                               getCart: aShoppingCartId
	(self cartExists: aShoppingCartId ) 
		ifTrue: [ self error: self class invalidCartIdErrorDescription ].

	^ carts at: aShoppingCartId! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:34:42' prior: 50343380!
    add: aQuantity of: anItem to: aShoppingCartId
	
	(self getCart: aShoppingCartId) add: aQuantity of: anItem! !

!testRun: #ShopTest #test01 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/23/2021 23:34:47'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:35:21' prior: 50347494!
                              checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	
	cart := self getCart: aShoppingCartId. 
	
	clientId := self getClientIdOf: aShoppingCartId.
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !

!testRun: #ShopTest #test01 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/23/2021 23:35:23'!
ERROR!

!testRun: #ShopTest #test08 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/23/2021 23:35:23'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/23/2021 23:35:23'!
ERROR!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:36:17' prior: 50345470!
                       test07
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	! !

!testRun: #ShopTest #test07 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/23/2021 23:36:23'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:38:01' prior: 50347551!
                    checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	
	cart := self getCart: aShoppingCartId. 
	clientId := self getClientIdOf: aShoppingCartId.
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:39:30'!
            authenticateClient: aPassword withPassword: aClientId

	^ (userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	]! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:39:30' prior: 50343157!
                      createCartClientId: aClientId password: aPassword

	self authenticateClient: aPassword withPassword: aClientId.

	^self createCart.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:39:51' prior: 50347659!
 createCartClientId: aClientId password: aPassword

	self authenticateClient: aClientId withPassword: aPassword.

	^self createCart.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:40:09' prior: 50347649!
 authenticateClient: aClientId withPassword: aPassword

	^ (userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	]! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:40:21' prior: 50347673!
                      authenticateClient: aClientId withPassword: aPassword
	
	(userAuthenticator authenticate: aClientId password: aPassword) ifFalse: [
		self error: self class incorrectPasswordOrClientIdErrorDescription .
	]! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:40:54' prior: 50347453!
                       listPurchasesOf: aClientId with: aClientPassword

	| receipts |
	
	self authenticateClient: aClientId withPassword: aClientPassword.
	
	receipts := clientReceipts at: aClientId .

	^ PurchasesSummary for: receipts.! !

!testRun: #ShopTest #test01 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/23/2021 23:40:55'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:41:33'!
  receiptsFor: aClientId

	^ clientReceipts at: aClientId! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:41:33' prior: 50347693!
             listPurchasesOf: aClientId with: aClientPassword

	| receipts |
	
	self authenticateClient: aClientId withPassword: aClientPassword.
	
	receipts := self receiptsFor: aClientId .

	^ PurchasesSummary for: receipts.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:42:03' prior: 50347733!
               listPurchasesOf: aClientId with: aClientPassword
	
	self authenticateClient: aClientId withPassword: aClientPassword.
	
	^ PurchasesSummary for: (self receiptsFor: aClientId).! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:58:47'!
     createCartAndGetId
	carts add: ShoppingCart new.
	^carts size! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/23/2021 23:58:47' prior: 50347666!
       createCartClientId: aClientId password: aPassword

	self authenticateClient: aClientId withPassword: aPassword.

	^self createCartAndGetId.! !

!methodRemoval: Shop #createCart stamp: 'AW 6/23/2021 23:58:47'!
createCart
	carts add: ShoppingCart new.
	^carts size!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:01:11' prior: 50347510!
getCart: aShoppingCartId

	
	(self cartExists: aShoppingCartId ) 
		ifTrue: [ self error: self class invalidCartIdErrorDescription ].

	^ carts at: aShoppingCartId! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:01:40' prior: 50347767!
 getCart: aShoppingCartId

	self assertCartExists: aShoppingCartId.
	
	^ carts at: aShoppingCartId! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:01:59'!
                   assertCartExists: aShoppingCartId
	
	(self cartExists: aShoppingCartId ) 
		ifTrue: [ self error: self class invalidCartIdErrorDescription ].
! !

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 00:02:01'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:05:05'!
      test13
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 00:05:09'!
FAILURE!

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'AW 6/24/2021 00:08:20'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts clientReceipts cashier cartsClients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:08:15' prior: 50344224!
             getClientIdOf: aCartId 
	
	^cartsClients at: aCartId .! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:11:37'!
                              createCartAndGetId: aClientId
	carts add: ShoppingCart new.
	^carts size! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:11:37' prior: 50347756!
                            createCartClientId: aClientId password: aPassword

	self authenticateClient: aClientId withPassword: aPassword.

	^self createCartAndGetId: aClientId.! !

!methodRemoval: Shop #createCartAndGetId stamp: 'AW 6/24/2021 00:11:37'!
createCartAndGetId
	carts add: ShoppingCart new.
	^carts size!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:11:58'!
                     createCartAndGetIdFor: aClientId
	carts add: ShoppingCart new.
	^carts size! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:11:58' prior: 50347874!
                         createCartClientId: aClientId password: aPassword

	self authenticateClient: aClientId withPassword: aPassword.

	^self createCartAndGetIdFor: aClientId.! !

!methodRemoval: Shop #createCartAndGetId: stamp: 'AW 6/24/2021 00:11:58'!
createCartAndGetId: aClientId
	carts add: ShoppingCart new.
	^carts size!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:13:42' prior: 50347886!
                      createCartAndGetIdFor: aClientId
	| cartId |
	carts add: ShoppingCart new.
	
	cartId := carts size.
	
	cartsClients at: cartId put: aClientId. 
	
	^ cartId.! !

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 00:14:09'!
ERROR!
!Shop methodsFor: 'initialization' stamp: 'AW 6/24/2021 00:14:50' prior: 50347100!
         initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	clientReceipts  := Dictionary new. 
	cartsClients := Dictionary new. 
		
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		

		! !

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 00:14:56'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:22:11'!
test14
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !

!classDefinition: #MockTimeProvider category: 'Tus-Libros' stamp: 'AW 6/24/2021 00:23:13'!
Object subclass: #MockTimeProvider
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!TestStubs methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:09'!
 timeProvider
	^MockTimeProvider new.! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52'!
           mockAlwaysOkMerchantProcessor: aTimeProvider

	^MockAlwaysOkMerchantProcessor new.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52' prior: 50346952!
              test09
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop add: 1 of: stubs book2 to: cartId.
	
	shop add: 1 of: stubs book3 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 1.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52' prior: 50347398!
                             test12
	
	| shop clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	self should: [ shop listPurchasesOf: clientId with: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52' prior: 50345550!
      test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
	
	self should: [ shop checkOut: 16 payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52' prior: 50345564!
                        test04
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
	
	self should: [ shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!CheckOutTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52' prior: 50345031 overrides: 16927572!
                       setUp

	today _ FixedGregorianDate today.
	currentMonth _ today monthOfYear.
	
	creditCardNumber _ '4182418241824182'.
	cardOwner _ 'PEPE SANCHEZ'.

	stubs := TestStubs new.

	validCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth next.
	
	expiredCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth previous.
		
	expiredThisMonthCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth.
		
	invalidNumberCreditCard _ stubs invalidNumberCreditCard.
		
	emptyOwnerCreditCard _ CreditCard
		number: creditCardNumber
		owner: ''
		expiration: currentMonth next.
		
	emptyOwnerCreditCard2 _ CreditCard
		number: creditCardNumber
		owner: '            '
		expiration: currentMonth next.
		
	book1 := stubs book1.
	book2 := stubs book2.
	
	mockAlwaysStolenCardMerchantProcessor _ MockAlwaysStolenCardMerchantProcessor new.
	mockAlwaysOkMerchantProcessor _ stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
	mockAlwaysFakeCardMerchantProcessor _ MockAlwaysFakeCardMerchantProcessor new.
	mockAlwaysWithoutCreditCardMerchantProcessor _ MockAlwaysWithoutCreditCardMerchantProcessor new.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52' prior: 50347318!
 test11
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: 230 equals: purchases total.
	self assert: 6 equals: purchases items size.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52' prior: 50345532!
        test05
	
	| shop bookIsbn cartId1 cartId2 quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
	
	cartId1 := shop createCartClientId: 3 password: '1234'.
	cartId2 := shop createCartClientId: 4 password: '12345'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId1.
	
	self assert: (shop listCart: cartId2) isEmpty.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52' prior: 50345846!
             test08
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52' prior: 50345597!
                               test01
	
	| shop |
	
	shop := Shop
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) 
		prices: stubs priceList
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:52' prior: 50345419!
                             test02
	
	| shop cartId cartItems |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:53' prior: 50347814!
test13
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:53' prior: 50347960!
                               test14
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:53' prior: 50345511!
                               test03
	
	| shop cartId cartItems bookIsbn quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems size equals: 1.
	self assert: cartItems first quantity equals: quantity.
	self assert: cartItems first item equals: bookIsbn.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:53' prior: 50345769!
                             test10
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 1 of: stubs book1 to: cartId.
	
	self
		should: [ shop
				checkOut: cartId
				payingWith: stubs invalidNumberCreditCard. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier invalidCreditCardNumberErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:23:53' prior: 50347592!
                          test07
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	! !

!methodRemoval: TestStubs #mockAlwaysOkMerchantProcessor stamp: 'AW 6/24/2021 00:23:53'!
mockAlwaysOkMerchantProcessor

	^MockAlwaysOkMerchantProcessor new.!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:24:22' prior: 50348287!
                              test14
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:24:41' prior: 50348394!
                   test14
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor: stubs timeProvider.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:25:09' prior: 50348433!
                               test14
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !
!TestStubs methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:25:18'!
  mockAlwaysOkMerchantProcessor

	^MockAlwaysOkMerchantProcessor new.! !

!methodRemoval: TestStubs #mockAlwaysOkMerchantProcessor: stamp: 'AW 6/24/2021 00:25:22'!
mockAlwaysOkMerchantProcessor: aTimeProvider

	^MockAlwaysOkMerchantProcessor new.!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:25:31' prior: 50348247!
              test13
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:25:39' prior: 50348047!
                   test12
	
	| shop clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	
	self should: [ shop listPurchasesOf: clientId with: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:25:51' prior: 50348135!
                          test11
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: 230 equals: purchases total.
	self assert: 6 equals: purchases items size.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:25:53' prior: 50347637!
checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	
	cart := self getCart: aShoppingCartId. 
	clientId := self getClientIdOf: aShoppingCartId.
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:26:02' prior: 50348349!
                        test10
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 1 of: stubs book1 to: cartId.
	
	self
		should: [ shop
				checkOut: cartId
				payingWith: stubs invalidNumberCreditCard. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier invalidCreditCardNumberErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:26:12' prior: 50348015!
              test09
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop add: 1 of: stubs book2 to: cartId.
	
	shop add: 1 of: stubs book3 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 1.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:26:17' prior: 50348192!
                 test08
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:26:23' prior: 50348371!
                   test07
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:26:31' prior: 50348064!
                 test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	self should: [ shop checkOut: 16 payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:26:38' prior: 50348173!
            test05
	
	| shop bookIsbn cartId1 cartId2 quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId1 := shop createCartClientId: 3 password: '1234'.
	cartId2 := shop createCartClientId: 4 password: '12345'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId1.
	
	self assert: (shop listCart: cartId2) isEmpty.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:26:45' prior: 50348079!
 test04
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	self should: [ shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:26:51' prior: 50348327!
   test03
	
	| shop cartId cartItems bookIsbn quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems size equals: 1.
	self assert: cartItems first quantity equals: quantity.
	self assert: cartItems first item equals: bookIsbn.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:27:02' prior: 50348233!
                 test02
	
	| shop cartId cartItems |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:27:10' prior: 50348217!
                    test01
	
	| shop |
	
	shop := Shop
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) 
		prices: stubs priceList
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:29:08' prior: 50348787!
                 test02
	
	| shop cartId cartItems |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:29:31' prior: 50348766!
           test03
	
	| shop cartId cartItems bookIsbn quantity |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems size equals: 1.
	self assert: cartItems first quantity equals: quantity.
	self assert: cartItems first item equals: bookIsbn.! !

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:29:33'!
PASSED!
!Shop class methodsFor: 'instance creation' stamp: 'AW 6/24/2021 00:30:35'!
             withUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor timeProvider: aTimeProvider    

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor ! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348561!
  test12
	
	| shop clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	self should: [ shop listPurchasesOf: clientId with: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348801!
                         test01
	
	| shop |
	
	shop := Shop
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) 
		prices: stubs priceList
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348721!
                test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	self should: [ shop checkOut: 16 payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348578!
           test11
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: 230 equals: purchases total.
	self assert: 6 equals: purchases items size.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348816!
                           test02
	
	| shop cartId cartItems |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348753!
          test04
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	self should: [ shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348680!
  test08
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348522!
                  test13
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348704!
                  test07
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348830!
                test03
	
	| shop cartId cartItems bookIsbn quantity |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems size equals: 1.
	self assert: cartItems first quantity equals: quantity.
	self assert: cartItems first item equals: bookIsbn.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348628!
       test10
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 1 of: stubs book1 to: cartId.
	
	self
		should: [ shop
				checkOut: cartId
				payingWith: stubs invalidNumberCreditCard. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier invalidCreditCardNumberErrorDescription.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348473!
             test14
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:35' prior: 50348649!
                  test09
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop add: 1 of: stubs book2 to: cartId.
	
	shop add: 1 of: stubs book3 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 1.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:36' prior: 50348735!
                test05
	
	| shop bookIsbn cartId1 cartId2 quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	cartId1 := shop createCartClientId: 3 password: '1234'.
	cartId2 := shop createCartClientId: 4 password: '12345'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId1.
	
	self assert: (shop listCart: cartId2) isEmpty.
	! !

!methodRemoval: Shop class #withUserAuthenticator:prices:merchantProcessor: stamp: 'AW 6/24/2021 00:30:36'!
withUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:41' prior: 50349094!
                test03
	
	| shop cartId cartItems bookIsbn quantity |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems size equals: 1.
	self assert: cartItems first quantity equals: quantity.
	self assert: cartItems first item equals: bookIsbn.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:48' prior: 50348982!
    test02
	
	| shop cartId cartItems |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:30:51' prior: 50348912!
       test01
	
	| shop |
	
	shop := Shop
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) 
		prices: stubs priceList
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: stubs timeProvider.
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:31:08' prior: 50349138!
             test14
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: stubs timeProvider.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:34:58' prior: 50349293!
      test14
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 30 * minute.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:35:12' prior: 50349333!
                               test14
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 30 * minute.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:36:35' prior: 50349353!
                               test14
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 30 * minute.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop expiredCartErrorDescription.
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:37:14' prior: 50349373!
                   test14
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	! !

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:37:16'!
ERROR!
!MockTimeProvider methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:37:30'!
                        toTheFuture: aSimpleMeasure 
	self shouldBeImplemented.! !
!MockTimeProvider methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:37:50' prior: 50349421!
 toTheFuture: anAmountOfFuture
	! !

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:37:53'!
ERROR!
!Shop class methodsFor: 'errors' stamp: 'AW 6/24/2021 00:38:03'!
                        expiredCartErrorDescription
	self shouldBeImplemented.! !
!Shop class methodsFor: 'errors' stamp: 'AW 6/24/2021 00:38:25' prior: 50349432!
                     expiredCartErrorDescription
	^'The cart is expired!!'.! !

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:38:30'!
FAILURE!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:43:32'!
FAILURE!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:43:40'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:44:47' prior: 50348615!
                            checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	
	self assertCartNotExpired: aShoppingCartId.
	
	cart := self getCart: aShoppingCartId. 
	clientId := self getClientIdOf: aShoppingCartId.
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:45:05'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:45:11'!
                         assertCartNotExpired: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'AW 6/24/2021 00:49:07'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts clientReceipts cashier cartsClients timeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:49:03' prior: 50349465!
                    assertCartNotExpired: aCartId 
	(timeProvider now distanceTo: (self getCreationTime: aCartId) > 30 * minute) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'initialization' stamp: 'AW 6/24/2021 00:49:33' prior: 50347915!
                          initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	clientReceipts  := Dictionary new. 
	cartsClients := Dictionary new. 
		
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		
	
		

		! !
!Shop methodsFor: 'initialization' stamp: 'AW 6/24/2021 00:50:00'!
          initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor timeProvider: aTimeProvider    
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	clientReceipts  := Dictionary new. 
	cartsClients := Dictionary new. 
		
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		
	
		

		! !
!Shop class methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:50:00' prior: 50348883!
                  withUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor timeProvider: aTimeProvider    

	^self new initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor timeProvider: aTimeProvider ! !

!methodRemoval: Shop #initializeWithUserAuthenticator:prices:merchantProcessor: stamp: 'AW 6/24/2021 00:50:00'!
initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor   
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	clientReceipts  := Dictionary new. 
	cartsClients := Dictionary new. 
		
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		
	
		

		!
!Shop methodsFor: 'initialization' stamp: 'AW 6/24/2021 00:50:09' prior: 50349503!
             initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor timeProvider: aTimeProvider    
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	clientReceipts  := Dictionary new. 
	cartsClients := Dictionary new. 
		
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		
	timeProvider := aTimeProvider.
		
	
		

		! !
!Shop methodsFor: 'initialization' stamp: 'AW 6/24/2021 00:50:13' prior: 50349548!
                          initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor timeProvider: aTimeProvider    
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	clientReceipts  := Dictionary new. 
	cartsClients := Dictionary new. 
	timeProvider := aTimeProvider.		
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		

		
	
		

		! !

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 00:50:16'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 00:50:16'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 00:50:16'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 00:50:16'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 00:50:16'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 00:50:16'!
ERROR!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 00:50:16'!
ERROR!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 00:50:16'!
ERROR!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 00:50:16'!
ERROR!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 00:50:16'!
ERROR!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 00:50:16'!
ERROR!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 00:50:16'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 00:50:16'!
ERROR!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:50:16'!
ERROR!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 00:50:20'!
ERROR!
!MockTimeProvider methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:50:32'!
                       now
	self shouldBeImplemented.! !
!MockTimeProvider methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:51:10' prior: 50349616!
                          now
	GregorianDateTime now.! !
!MockTimeProvider methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:51:14' prior: 50349621!
                             now
	^GregorianDateTime now.! !

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 00:51:17'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:51:26'!
                    getCreationTime: aSmallInteger 
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:51:43' prior: 50349632!
          getCreationTime: aCartId 
	self shouldBeImplemented.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:52:04' prior: 50349637!
                getCreationTime: aCartId 
	^GregorianDateTime now.! !

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 00:52:06'!
ERROR!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:52:46' prior: 50349479!
              assertCartNotExpired: aCartId 
	((timeProvider now distanceTo: (self getCreationTime: aCartId)) > 30 * minute) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 00:52:48'!
FAILURE!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 00:53:04'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:54:00' prior: 50349649!
       assertCartNotExpired: aCartId 
	((timeProvider now distanceTo: (self getCreationTime: aCartId)) > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 00:54:09'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 00:54:11'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 00:54:11'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 00:54:11'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 00:54:12'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 00:54:12'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 00:54:12'!
PASSED!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:54:13'!
FAILURE!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:54:51'!
FAILURE!
!MockTimeProvider methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:57:22' prior: 50349426!
                      toTheFuture: anAmountOfFuture
	self now next: anAmountOfFuture.! !

!classDefinition: #MockTimeProvider category: 'Tus-Libros' stamp: 'AW 6/24/2021 00:57:59'!
Object subclass: #MockTimeProvider
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!MockTimeProvider methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:57:56' prior: 50349691!
                     toTheFuture: anAmountOfFuture
	now := now next: anAmountOfFuture.! !
!MockTimeProvider methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:59:25' overrides: 16896425!
                   initialize

	now := GregorianDateTime now.! !
!MockTimeProvider methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 00:59:41' prior: 50349626!
              now
	^now.! !

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 00:59:46'!
FAILURE!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:00:19'!
FAILURE!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:01:26'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:02:05' prior: 50349662!
        assertCartNotExpired: aCartId 
	self halt.
	((timeProvider now distanceTo: (self getCreationTime: aCartId)) > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !

(self getCreationTime: aCartId)!

timeProvider now!

timeProvider now distanceTo: (self getCreationTime: aCartId)!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:04:02' prior: 50349725!
                 assertCartNotExpired: aCartId 
	self halt.
	((timeProvider now distanceTo: (self getCreationTime: aCartId)) > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:06:45'!
FAILURE!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:06:53'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:08:38' prior: 50349738!
                         assertCartNotExpired: aCartId 
	| cartCreationTime now |
	self halt.
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	((cartCreationTime distanceTo: now) > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:08:51'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 01:08:51'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 01:08:51'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 01:08:51'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 01:08:51'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 01:08:51'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 01:08:51'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 01:10:23'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 01:10:23'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 01:10:23'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 01:10:23'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 01:10:23'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 01:10:23'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:10:27'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 01:10:32'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:10:34' prior: 50349752!
              assertCartNotExpired: aCartId 
	| cartCreationTime now |

	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	((cartCreationTime distanceTo: now) > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:10:36' prior: 50349796!
    assertCartNotExpired: aCartId 
	| cartCreationTime now |
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	((cartCreationTime distanceTo: now) > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:10:38'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:11:00' prior: 50349807!
                               assertCartNotExpired: aCartId 
	| cartCreationTime now |
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	((cartCreationTime distanceTo: now) > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:11:05' prior: 50349849!
     assertCartNotExpired: aCartId 
	| cartCreationTime now |
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	((cartCreationTime distanceTo: now) > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:11:39' prior: 50349860!
     assertCartNotExpired: aCartId 
	| cartCreationTime now |
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	((cartCreationTime distanceTo: now) > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:12:18' prior: 50349871!
     assertCartNotExpired: aCartId 
	| cartCreationTime now cartAge |
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	cartAge _ cartCreationTime distanceTo: now.
	((cartAge) > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:12:47' prior: 50349882!
         assertCartNotExpired: aCartId 
	| cartCreationTime now cartAge |
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	cartAge := cartCreationTime distanceTo: now.
	(cartAge > (30 * minute)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:13:32'!
                          maxCartAge

	^ 30 * minute! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:13:32' prior: 50349894!
          assertCartNotExpired: aCartId 
	| cartCreationTime now cartAge |
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	cartAge := cartCreationTime distanceTo: now.
	(cartAge > (self maxCartAge)) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:13:37' prior: 50349910!
      assertCartNotExpired: aCartId 
	| cartCreationTime now cartAge |
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	cartAge := cartCreationTime distanceTo: now.
	(cartAge > self maxCartAge) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:13:39'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:14:50' prior: 50349922!
  assertCartNotExpired: aCartId 
	| cartCreationTime now cartAge |
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	cartCreationTime distanceTo: now.
	cartAge := self getCartAgeFor: aCartId. 
	(cartAge > self maxCartAge) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:15:30'!
                         getCartAgeFor: aCartId
	| cartCreationTime now |
	
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	^cartCreationTime distanceTo: now.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:15:39' prior: 50349977!
getCartAgeFor: aCartId
	| cartCreationTime now |
	
	cartCreationTime := self getCreationTime: aCartId.
	now := timeProvider now.
	
	^cartCreationTime distanceTo: now.! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:16:23' prior: 50349964!
                              assertCartNotExpired: aCartId 

	| cartAge |
	cartAge := self getCartAgeFor: aCartId. 
	(cartAge > self maxCartAge) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:16:25' prior: 50349994!
              assertCartNotExpired: aCartId 
	| cartAge |
	cartAge := self getCartAgeFor: aCartId. 
	(cartAge > self maxCartAge) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:17:04'!
                               assertCartIsNotExpired: aCartId 
	| cartAge |
	cartAge := self getCartAgeFor: aCartId. 
	(cartAge > self maxCartAge) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:17:04' prior: 50349449!
             checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	
	self assertCartIsNotExpired: aShoppingCartId.
	
	cart := self getCart: aShoppingCartId. 
	clientId := self getClientIdOf: aShoppingCartId.
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !

!methodRemoval: Shop #assertCartNotExpired: stamp: 'AW 6/24/2021 01:17:04'!
assertCartNotExpired: aCartId 
	| cartAge |
	cartAge := self getCartAgeFor: aCartId. 
	(cartAge > self maxCartAge) 
		ifTrue: [ self error: self class expiredCartErrorDescription ].!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:17:49' prior: 50349396!
   test14
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	timeProvider toTheFuture: 31 * minute.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:18:05' prior: 50350043!
          test14
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:18:12'!
    test15
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	timeProvider toTheFuture: 31 * minute.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	! !

!testRun: #ShopTest #test15 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!

!testRun: #ShopTest #test15 stamp: 'AW 6/24/2021 01:18:17'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:20:33' prior: 50350089!
                          test15
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	timeProvider toTheFuture: 31 * minute.
	
	cartId := shop createCartClientId: clientId password: password.
		
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	
	! !

!testRun: #ShopTest #test15 stamp: 'AW 6/24/2021 01:20:36'!
FAILURE!

!classDefinition: #Shop category: 'Tus-Libros' stamp: 'AW 6/24/2021 01:21:56'!
Object subclass: #Shop
	instanceVariableNames: 'userAuthenticator carts clientReceipts cashier cartsClients timeProvider cartCreationTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tus-Libros'!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:21:52' prior: 50349642!
 getCreationTime: aCartId 
	^cartCreationTimes at: aCartId.! !

!testRun: #ShopTest #test15 stamp: 'AW 6/24/2021 01:21:59'!
FAILURE!
!Shop methodsFor: 'initialization' stamp: 'AW 6/24/2021 01:22:19' prior: 50349566!
         initializeWithUserAuthenticator: anUserAuthenticator prices: aPriceList merchantProcessor: aMerchantProcessor timeProvider: aTimeProvider    
	
	userAuthenticator := anUserAuthenticator.
	carts := OrderedCollection new.
	clientReceipts  := Dictionary new. 
	cartsClients := Dictionary new. 
	cartCreationTimes := Dictionary new. 
	timeProvider := aTimeProvider.		
	cashier := Cashier
		withPrices: aPriceList
		receiptBook: OrderedCollection new
		merchantProcessor: aMerchantProcessor.
		

		
	
		

		! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:22:56' prior: 50347905!
              createCartAndGetIdFor: aClientId
	| cartId |
	carts add: ShoppingCart new.
	
	cartId := carts size.
	
	cartsClients at: cartId put: aClientId. 
	cartCreationTimes at: cartId put: timeProvider now.
	
	^ cartId.! !

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:23:32'!
FAILURE!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test15 stamp: 'AW 6/24/2021 01:23:32'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:23:32'!
FAILURE!

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:23:59'!
FAILURE!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test15 stamp: 'AW 6/24/2021 01:23:59'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:23:59'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:25:35' prior: 50350021!
               checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	
	cart := self getCart: aShoppingCartId. 
	self assertCartIsNotExpired: aShoppingCartId.
	clientId := self getClientIdOf: aShoppingCartId.
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:25:43'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!

!testRun: #ShopTest #test15 stamp: 'AW 6/24/2021 01:25:46'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:27:00' prior: 50350067!
                         test14
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop add: 12 of: stubs book1 to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	! !

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:27:04'!
FAILURE!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:27:12' prior: 50350148!
                              test15
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop add: 12 of: stubs book1 to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:27:17'!
                    test16
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop add: 12 of: stubs book1 to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:20:33' prior: 50350361!
    test15
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	timeProvider toTheFuture: 31 * minute.
	
	cartId := shop createCartClientId: clientId password: password.
		
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	
	! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:18:05' prior: 50350336!
      test14
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	! !

!testRun: #ShopTest #test16 stamp: 'AW 6/24/2021 01:27:57'!
FAILURE!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:28:40' prior: 50347775!
                  getCart: aShoppingCartId

	self assertCartExists: aShoppingCartId.
	self assertCartIsNotExpired: aShoppingCartId.
	
	^ carts at: aShoppingCartId! !

!testRun: #ShopTest #test16 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test15 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!

!testRun: #ShopTest #test16 stamp: 'AW 6/24/2021 01:28:41'!
PASSED!
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:28:48' prior: 50350287!
                               checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	
	cart := self getCart: aShoppingCartId. 

	clientId := self getClientIdOf: aShoppingCartId.
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !
!Shop methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:28:50' prior: 50350498!
                           checkOut: aShoppingCartId payingWith: aCreditCard 
	| cart clientId receipt |
	
	cart := self getCart: aShoppingCartId. 
	clientId := self getClientIdOf: aShoppingCartId.
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !

!testRun: #ShopTest #test01 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test02 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test03 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test04 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test05 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test06 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test07 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test08 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test09 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test10 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test11 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test12 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test13 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test14 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test15 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!

!testRun: #ShopTest #test16 stamp: 'AW 6/24/2021 01:28:52'!
PASSED!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:32:59'!
                        test01InvalidClientShallNotPass
	
	| shop |
	
	shop := Shop
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) 
		prices: stubs priceList
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: stubs timeProvider.
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	! !

!methodRemoval: ShopTest #test01 stamp: 'AW 6/24/2021 01:33:04'!
test01
	
	| shop |
	
	shop := Shop
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) 
		prices: stubs priceList
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: stubs timeProvider.
	
	self should: [ shop createCartClientId: 3 password: '123'. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.	
	
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:37:38'!
             test02NewCartsAreEmpty
	
	| shop cartId cartItems |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:38:17'!
       test03ListCartWithOneItem
	
	| shop cartId cartItems bookIsbn quantity |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems size equals: 1.
	self assert: cartItems first quantity equals: quantity.
	self assert: cartItems first item equals: bookIsbn.! !
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:38:40'!
 test04ListInvalidCartShouldRaiseError
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	self should: [ shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	! !

!methodRemoval: ShopTest #test04 stamp: 'AW 6/24/2021 01:38:42'!
test04
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	self should: [ shop listCart: 15 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop invalidCartIdErrorDescription.
	!

!methodRemoval: ShopTest #test03 stamp: 'AW 6/24/2021 01:38:45'!
test03
	
	| shop cartId cartItems bookIsbn quantity |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems size equals: 1.
	self assert: cartItems first quantity equals: quantity.
	self assert: cartItems first item equals: bookIsbn.!

!methodRemoval: ShopTest #test02 stamp: 'AW 6/24/2021 01:38:47'!
test02
	
	| shop cartId cartItems |
	
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 3 password: '1234'.
	
	cartItems := shop listCart: cartId.
	
	self assert: cartItems isEmpty.!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:39:39'!
                    test05AddItemToCartDoesntModifyOtherCarts
	
	| shop bookIsbn cartId1 cartId2 quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	cartId1 := shop createCartClientId: 3 password: '1234'.
	cartId2 := shop createCartClientId: 4 password: '12345'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId1.
	
	self assert: (shop listCart: cartId2) isEmpty.
	! !

!methodRemoval: ShopTest #test05 stamp: 'AW 6/24/2021 01:39:41'!
test05
	
	| shop bookIsbn cartId1 cartId2 quantity |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	cartId1 := shop createCartClientId: 3 password: '1234'.
	cartId2 := shop createCartClientId: 4 password: '12345'.
	
	quantity := 2.
	bookIsbn := 'book_isbn'.
		
	shop add: quantity of: bookIsbn to: cartId1.
	
	self assert: (shop listCart: cartId2) isEmpty.
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:40:21'!
         test06CheckoutInvalidCartIdShouldRaiseError
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	self should: [ shop checkOut: 16 payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop invalidCartIdErrorDescription.
	! !

!methodRemoval: ShopTest #test06 stamp: 'AW 6/24/2021 01:40:23'!
test06
	
	| shop |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	self should: [ shop checkOut: 16 payingWith: creditCard1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop invalidCartIdErrorDescription.
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:40:45'!
                             test07CheckoutUsesTheCashier
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	! !

!methodRemoval: ShopTest #test07 stamp: 'AW 6/24/2021 01:40:47'!
test07
	
	| shop cartId |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
	
	cartId := shop createCartClientId: 15 password: '1234'.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'AW 6/24/2021 01:43:21'!
                      test08ListPurchasesOnOnlyOneBuyClient
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	! !

!methodRemoval: ShopTest #test08 stamp: 'AW 6/24/2021 01:43:23'!
test08
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 100.
	self assert: purchases items size equals: 2.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	!

----QUIT----(24 June 2021 01:43:58) TusLibros.image priorSource: 487097!

----STARTUP---- (24 June 2021 16:20:40) as /home/nikita/r/f/ingsoft1/Inge1-ejercicios/20-TusLibros/TusLibros.image!

!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/24/2021 16:21:59'!
                 test09ListPurchasesOfManyItemsByOneClient
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop add: 1 of: stubs book2 to: cartId.
	
	shop add: 1 of: stubs book3 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 1.
	! !

!methodRemoval: ShopTest #test09 stamp: 'nz 6/24/2021 16:21:59'!
test09
	
	| shop cartId clientId password purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 2 of: stubs book1 to: cartId.
	
	shop add: 1 of: stubs book2 to: cartId.
	
	shop add: 1 of: stubs book3 to: cartId.
	
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: purchases total equals: 150.
	self assert: purchases items size equals: 4.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 2.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 1.
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/24/2021 16:22:34'!
         test10CheckoutWithInvalidCreditCardShouldFail
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 1 of: stubs book1 to: cartId.
	
	self
		should: [ shop
				checkOut: cartId
				payingWith: stubs invalidNumberCreditCard. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier invalidCreditCardNumberErrorDescription.
	! !

!methodRemoval: ShopTest #test10 stamp: 'nz 6/24/2021 16:22:34'!
test10
	
	| shop cartId clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	cartId := shop createCartClientId: clientId password: password.
	
	shop add: 1 of: stubs book1 to: cartId.
	
	self
		should: [ shop
				checkOut: cartId
				payingWith: stubs invalidNumberCreditCard. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier invalidCreditCardNumberErrorDescription.
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/24/2021 16:23:14'!
                               test11ListMultiplePurchasesOfTheSameClient
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: 230 equals: purchases total.
	self assert: 6 equals: purchases items size.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	! !

!methodRemoval: ShopTest #test11 stamp: 'nz 6/24/2021 16:23:14'!
test11
	
	| shop cartId clientId password purchases cartId2 |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	purchases := shop listPurchasesOf: clientId with: password.
	self assert: 230 equals: purchases total.
	self assert: 6 equals: purchases items size.
	self assert: (purchases items occurrencesOf: stubs book1) equals: 3.
	self assert: (purchases items occurrencesOf: stubs book2) equals: 1.
	self assert: (purchases items occurrencesOf: stubs book3) equals: 2.
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/24/2021 16:23:52'!
                              test12ListPurchasesOfIncorrectPasswordShouldFail
	
	| shop clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	self should: [ shop listPurchasesOf: clientId with: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.
	! !

!methodRemoval: ShopTest #test12 stamp: 'nz 6/24/2021 16:23:52'!
test12
	
	| shop clientId password |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: false) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	self should: [ shop listPurchasesOf: clientId with: password ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Shop incorrectPasswordOrClientIdErrorDescription.
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/24/2021 16:24:14'!
                    test13ListPurchasesOfDifferentClients
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	! !

!methodRemoval: ShopTest #test13 stamp: 'nz 6/24/2021 16:24:14'!
test13
	
	| shop cartId clientId1 clientId2 password client1purchases cartId2 client2purchases |
	
	shop := Shop withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) prices: stubs priceList merchantProcessor: stubs mockAlwaysOkMerchantProcessor timeProvider: stubs timeProvider.
		
	clientId1 := 15.
	clientId2 := 42.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId1 password: password.
	shop add: 2 of: stubs book1 to: cartId.
	shop add: 1 of: stubs book2 to: cartId.
	shop add: 1 of: stubs book3 to: cartId.
	shop checkOut: cartId payingWith: stubs validCreditCard.
	
	cartId2 := shop createCartClientId: clientId2 password: password.
	shop add: 1 of: stubs book1 to: cartId2.
	shop add: 1 of: stubs book3 to: cartId2.
	shop checkOut: cartId2 payingWith: stubs validCreditCard.
	
	client1purchases := shop listPurchasesOf: clientId1 with: password.
	self assert: 150 equals: client1purchases total.
	self assert: 4 equals: client1purchases items size.
	
	client2purchases := shop listPurchasesOf: clientId2 with: password.
	self assert: 80 equals: client2purchases total.
	self assert: 2 equals: client2purchases items size.
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/24/2021 16:25:02'!
                 test14CheckingOutAnExpiredCardShouldFail
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	! !

!methodRemoval: ShopTest #test14 stamp: 'nz 6/24/2021 16:25:02'!
test14
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/24/2021 16:27:57'!
                  test15CheckingOutInADifferentPointInTimeShouldWorkAsIntended
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	timeProvider toTheFuture: 31 * minute.
	
	cartId := shop createCartClientId: clientId password: password.
		
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	
	! !

!methodRemoval: ShopTest #test15 stamp: 'nz 6/24/2021 16:27:57'!
test15
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	timeProvider toTheFuture: 31 * minute.
	
	cartId := shop createCartClientId: clientId password: password.
		
	self should: [ shop checkOut: cartId payingWith: stubs validCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription.
	
	!
!ShopTest methodsFor: 'as yet unclassified' stamp: 'nz 6/24/2021 16:28:15'!
  test16AddingItemsToAnExpiredCartShouldFail
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop add: 12 of: stubs book1 to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	! !

!methodRemoval: ShopTest #test16 stamp: 'nz 6/24/2021 16:28:15'!
test16
	
	| shop cartId password clientId timeProvider |
	
	timeProvider := stubs timeProvider.
	shop := Shop 
		withUserAuthenticator: (MockUserAuthenticator alwaysReturning: true) 
		prices: stubs priceList 
		merchantProcessor: stubs mockAlwaysOkMerchantProcessor 
		timeProvider: timeProvider.
		
	clientId := 15.
	password := '123456'.
	
	cartId := shop createCartClientId: clientId password: password.
	
	timeProvider toTheFuture: 31 * minute.
	
	self should: [ shop add: 12 of: stubs book1 to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: Shop expiredCartErrorDescription.
	
	!
!Shop methodsFor: 'facade' stamp: 'nz 6/24/2021 16:37:41' prior: 50343371!
                 listCart: aShoppingCartId 
	"
	Aca nos quedo expuesta la clase ShoppingCartEntry
	Pensamos refactorizar el carrito para que use una Bag pero
	no llegamos con ese refactor.
	"
	(self cartExists: aShoppingCartId) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^self getCartEntries: aShoppingCartId.! !
!Shop methodsFor: 'facade' stamp: 'nz 6/24/2021 16:38:48' prior: 50350511!
                 checkOut: aShoppingCartId payingWith: aCreditCard 
	"
	Ac� quedo expuesta la clase de la tarjeta de credito.
	"
	
	| cart clientId receipt |
	
	cart := self getCart: aShoppingCartId. 
	clientId := self getClientIdOf: aShoppingCartId.
	
	receipt := cashier checkOut: cart payingWith: aCreditCard on: self today.
	
	self registerReceipt: receipt for: clientId.
! !
!Shop methodsFor: 'facade' stamp: 'nz 6/24/2021 16:39:35' prior: 50351280!
          listCart: aShoppingCartId 
	"
	Aca nos quedo expuesta la clase ShoppingCartEntry
	Despues de definir PurchasesSummary pensamos en
	refactorizar el carrito para que use una Bag pero
	no llegamos con ese refactor.
	"
	(self cartExists: aShoppingCartId) ifTrue: [ self error: self class invalidCartIdErrorDescription ]. 
 	
	^self getCartEntries: aShoppingCartId.! !

----QUIT----(24 June 2021 16:46:28) TusLibros.image priorSource: 614082!

----STARTUP---- (24 June 2021 21:45:10) as /home/nikita/r/f/ingsoft1/Inge1-ejercicios/20-TusLibros/TusLibros.image!


!testRun: #PriceListTest #test01AddItemWithNegativePriceShouldRaiseError stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #PriceListTest #test02AddItemWithZeroPriceShouldRaiseError stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test01InvalidClientShallNotPass stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test02NewCartsAreEmpty stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test03ListCartWithOneItem stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test04ListInvalidCartShouldRaiseError stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test05AddItemToCartDoesntModifyOtherCarts stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test06CheckoutInvalidCartIdShouldRaiseError stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test07CheckoutUsesTheCashier stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test08ListPurchasesOnOnlyOneBuyClient stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test09ListPurchasesOfManyItemsByOneClient stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test10CheckoutWithInvalidCreditCardShouldFail stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test11ListMultiplePurchasesOfTheSameClient stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test12ListPurchasesOfIncorrectPasswordShouldFail stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test13ListPurchasesOfDifferentClients stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test14CheckingOutAnExpiredCardShouldFail stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test15CheckingOutInADifferentPointInTimeShouldWorkAsIntended stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShopTest #test16AddingItemsToAnExpiredCartShouldFail stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShoppingCartTest #test01EmptyCartHasNoItems stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShoppingCartTest #test02AddingAnItemToACart stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShoppingCartTest #test03AddingMultipleItemsToACart stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShoppingCartTest #test04AddingANegativeQuantityRaisesError stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShoppingCartTest #test05AddingZeroQuantityRaisesError stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #ShoppingCartTest #test06AddingNonIntegerQuantityRaisesError stamp: 'nz 6/24/2021 21:45:16'!
PASSED!

!testRun: #PriceListTest #test01AddItemWithNegativePriceShouldRaiseError stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #PriceListTest #test02AddItemWithZeroPriceShouldRaiseError stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test01InvalidClientShallNotPass stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test02NewCartsAreEmpty stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test03ListCartWithOneItem stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test04ListInvalidCartShouldRaiseError stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test05AddItemToCartDoesntModifyOtherCarts stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test06CheckoutInvalidCartIdShouldRaiseError stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test07CheckoutUsesTheCashier stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test08ListPurchasesOnOnlyOneBuyClient stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test09ListPurchasesOfManyItemsByOneClient stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test10CheckoutWithInvalidCreditCardShouldFail stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test11ListMultiplePurchasesOfTheSameClient stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test12ListPurchasesOfIncorrectPasswordShouldFail stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test13ListPurchasesOfDifferentClients stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test14CheckingOutAnExpiredCardShouldFail stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test15CheckingOutInADifferentPointInTimeShouldWorkAsIntended stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShopTest #test16AddingItemsToAnExpiredCartShouldFail stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShoppingCartTest #test01EmptyCartHasNoItems stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShoppingCartTest #test02AddingAnItemToACart stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShoppingCartTest #test03AddingMultipleItemsToACart stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShoppingCartTest #test04AddingANegativeQuantityRaisesError stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShoppingCartTest #test05AddingZeroQuantityRaisesError stamp: 'nz 6/24/2021 21:45:22'!
PASSED!

!testRun: #ShoppingCartTest #test06AddingNonIntegerQuantityRaisesError stamp: 'nz 6/24/2021 21:45:22'!
PASSED!
!CheckOutTest methodsFor: 'setUp/tearDown' stamp: 'nz 6/24/2021 21:45:35' prior: 50348094 overrides: 16927572!
               setUp

	today _ FixedGregorianDate today.
	currentMonth _ today monthOfYear.
	
	creditCardNumber _ '4182418241824182'.
	cardOwner _ 'PEPE SANCHEZ'.

	stubs := TestStubs new.

	validCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth next.
	
	expiredCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth previous.
		
	expiredThisMonthCreditCard _ CreditCard
		number: creditCardNumber
		owner: cardOwner
		expiration: currentMonth.
		
	invalidNumberCreditCard _ stubs invalidNumberCreditCard.
		
	emptyOwnerCreditCard _ CreditCard
		number: creditCardNumber
		owner: ''
		expiration: currentMonth next.
		
	emptyOwnerCreditCard2 _ CreditCard
		number: creditCardNumber
		owner: '            '
		expiration: currentMonth next.
		
	book1 := stubs book1.
	book2 := stubs book2.
	
	mockAlwaysStolenCardMerchantProcessor _ MockAlwaysStolenCardMerchantProcessor new.
	mockAlwaysOkMerchantProcessor _ stubs mockAlwaysOkMerchantProcessor.
	mockAlwaysFakeCardMerchantProcessor _ MockAlwaysFakeCardMerchantProcessor new.
	mockAlwaysWithoutCreditCardMerchantProcessor _ MockAlwaysWithoutCreditCardMerchantProcessor new.! !

!testRun: #CheckOutTest #test01CheckoutEmptyCartShouldRaiseError stamp: 'nz 6/24/2021 21:45:38'!
PASSED!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/24/2021 21:45:40'!
PASSED!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/24/2021 21:45:40'!
PASSED!

!testRun: #CheckOutTest #test04CheckoutItemWithoutPricesShouldRaiseError stamp: 'nz 6/24/2021 21:45:40'!
PASSED!

!testRun: #CheckOutTest #test05CheckoutWithExpiredCardShouldRaiseError stamp: 'nz 6/24/2021 21:45:40'!
PASSED!

!testRun: #CheckOutTest #test06CheckoutWithCardExpiredThisMonthShouldRaiseError stamp: 'nz 6/24/2021 21:45:40'!
PASSED!

!testRun: #CheckOutTest #test07CheckoutWithStolenCardShouldRaiseError stamp: 'nz 6/24/2021 21:45:41'!
PASSED!

!testRun: #CheckOutTest #test08CheckoutWithFakeCardShouldRaiseError stamp: 'nz 6/24/2021 21:45:41'!
PASSED!

!testRun: #CheckOutTest #test09CheckoutWithInsufficientFundsShouldRaiseError stamp: 'nz 6/24/2021 21:45:41'!
PASSED!

!testRun: #CheckOutTest #test10CheckoutWithInvalidCardNumberShouldRaiseError stamp: 'nz 6/24/2021 21:45:41'!
PASSED!

!testRun: #CheckOutTest #test11CheckoutWithEmptyCardOwnerNameShouldRaiseError stamp: 'nz 6/24/2021 21:45:41'!
PASSED!

!testRun: #CheckOutTest #test12CheckoutWithBlankCardOwnerNameShouldRaiseError stamp: 'nz 6/24/2021 21:45:41'!
PASSED!

!testRun: #CheckOutTest #test01CheckoutEmptyCartShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test02CheckoutACartWithOneItem stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test03CheckoutACartWithMultipleItems stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test04CheckoutItemWithoutPricesShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test05CheckoutWithExpiredCardShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test06CheckoutWithCardExpiredThisMonthShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test07CheckoutWithStolenCardShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test08CheckoutWithFakeCardShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test09CheckoutWithInsufficientFundsShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test10CheckoutWithInvalidCardNumberShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test11CheckoutWithEmptyCardOwnerNameShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #CheckOutTest #test12CheckoutWithBlankCardOwnerNameShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #PriceListTest #test01AddItemWithNegativePriceShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #PriceListTest #test02AddItemWithZeroPriceShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test01InvalidClientShallNotPass stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test02NewCartsAreEmpty stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test03ListCartWithOneItem stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test04ListInvalidCartShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test05AddItemToCartDoesntModifyOtherCarts stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test06CheckoutInvalidCartIdShouldRaiseError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test07CheckoutUsesTheCashier stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test08ListPurchasesOnOnlyOneBuyClient stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test09ListPurchasesOfManyItemsByOneClient stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test10CheckoutWithInvalidCreditCardShouldFail stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test11ListMultiplePurchasesOfTheSameClient stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test12ListPurchasesOfIncorrectPasswordShouldFail stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test13ListPurchasesOfDifferentClients stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test14CheckingOutAnExpiredCardShouldFail stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test15CheckingOutInADifferentPointInTimeShouldWorkAsIntended stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShopTest #test16AddingItemsToAnExpiredCartShouldFail stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShoppingCartTest #test01EmptyCartHasNoItems stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShoppingCartTest #test02AddingAnItemToACart stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShoppingCartTest #test03AddingMultipleItemsToACart stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShoppingCartTest #test04AddingANegativeQuantityRaisesError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShoppingCartTest #test05AddingZeroQuantityRaisesError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

!testRun: #ShoppingCartTest #test06AddingNonIntegerQuantityRaisesError stamp: 'nz 6/24/2021 21:45:45'!
PASSED!

----QUIT----(24 June 2021 21:46:03) TusLibros.image priorSource: 629451!