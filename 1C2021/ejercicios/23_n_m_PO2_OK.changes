----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/Cuis/macos64/Portfolio-Solucion.st----!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:14:33'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 20:14:33'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 20:14:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/2/2021 20:14:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/2/2021 20:14:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/2/2021 20:14:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/2/2021 20:14:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/2/2021 20:14:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/2/2021 20:14:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/2/2021 20:14:37'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/2/2021 20:14:42'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/2/2021 20:14:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/2/2021 20:14:43'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:20:07'!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self should: [	 Transfer from: account to: anotherAccount value: -100 ]
		raise: Error
		description: 	'sd'

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:22:37' prior: 50904509!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		description: [ :anError |
			self assert: Transfer canNotTransferNegativeValueErrorMessage equals: anError messageText.
			 ]

! !

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:22:41'!
FAILURE!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:22:41'!
FAILURE!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:22:41'!
ERROR!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:22:53'!
FAILURE!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:22:53'!
FAILURE!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:22:53'!
ERROR!
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:23:31' prior: 50904520!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferNegativeValueErrorMessage equals: anError messageText.
			 ]
		
		

! !

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:23:39'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:25:22' prior: 50904329!
from: anAccountSending to: anAccountRecieving value: aValue

	aValue >= 0 ifTrue: [ Transfer canNotTransferInvalidValue ].
	
	^ self new initializeFrom: anAccountSending to: anAccountRecieving value: aValue
	


	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:26:48'!
canNotTransferInvalidValue

	self error: 'Can not transfer invalid value'.
	


	! !

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:26:54'!
ERROR!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 20:26:54'!
ERROR!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 20:26:54'!
ERROR!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:26:54'!
FAILURE!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:27:18'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:27:33' prior: 50904573!
from: anAccountSending to: anAccountRecieving value: aValue
	
	^ self new initializeFrom: anAccountSending to: anAccountRecieving value: aValue
	


	! !
!Transfer methodsFor: 'initialization' stamp: 'jn 6/2/2021 20:28:47' prior: 50904296!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	aValue >= 0 ifTrue: [ self error: Transfer canNotTransferInvalidValue ].

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:29:03' prior: 50904583!
canNotTransferInvalidValue

	^  'Can not transfer invalid value'.
	


	! !

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:29:06'!
ERROR!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 20:29:06'!
ERROR!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 20:29:06'!
ERROR!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:29:06'!
FAILURE!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:29:12'!
ERROR!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 20:29:12'!
ERROR!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 20:29:12'!
ERROR!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:29:12'!
FAILURE!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:29:18'!
ERROR!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:29:18'!
ERROR!
!Transfer methodsFor: 'initialization' stamp: 'jn 6/2/2021 20:29:31' prior: 50904613!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	aValue <= 0 ifTrue: [ self error: Transfer canNotTransferInvalidValue ].

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:29:33'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 20:29:33'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 20:29:33'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:29:33'!
ERROR!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:29:33'!
ERROR!
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:29:47' prior: 50904554!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferInvalidValue equals: anError messageText.
			 ]
		
		

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:30:00' prior: 50904693!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: 0 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferInvalidValue equals: anError messageText.
			 ].
		
	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferInvalidValue equals: anError messageText.
			 ]
		
		

! !

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:30:03'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:30:03'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 20:30:03'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 20:30:03'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:30:03'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:30:46'!
test04transferToSameAccountMustFail

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: account value: 100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferToSameAccount equals: anError messageText.
			 ].
	

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:30:58'!
test05transferToSameAccountMustFail

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: account value: 100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferToSameAccount equals: anError messageText.
			 ].
	

! !

!methodRemoval: TransferTest #test04transferToSameAccountMustFail stamp: 'jn 6/2/2021 20:30:58'!
test04transferToSameAccountMustFail

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: account value: 100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferToSameAccount equals: anError messageText.
			 ].
	

!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/2/2021 20:31:01'!
FAILURE!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/2/2021 20:31:01'!
FAILURE!
!Transfer methodsFor: 'initialization' stamp: 'jn 6/2/2021 20:31:42' prior: 50904664!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	aValue <= 0 ifTrue: [ self error: Transfer canNotTransferInvalidValue ].
	anAccountSending == anAccountRecieving ifTrue: [ self error: Transfer canNotTransferToSameAccount ].

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:32:00'!
canNotTransferToSameAccount

	^  'Can not transfer to same account'.
	


	! !

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:32:02'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 20:32:02'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 20:32:02'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:32:02'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/2/2021 20:32:02'!
PASSED!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'jn 6/2/2021 20:32:52'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'no messages' stamp: 'jn 6/2/2021 20:33:15'!
test01! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:34:39'!
test01accountSummaryWithNoneTransactions

	! !

!methodRemoval: ReportTest #test01 stamp: 'jn 6/2/2021 20:34:46'!
test01!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:36:25' prior: 50904843!
test01accountSummaryWithNoneTransactions

		| account |
	account := ReceptiveAccount new.
		
		self assert: account accountSummary equals: #('Balance = 0').


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:36:31' prior: 50904850!
test01accountSummaryWithNoneTransactions

		| account |
		account := ReceptiveAccount new.
		
		self assert: account accountSummary equals: #('Balance = 0').


	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:36:33'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:36:33'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:36:49'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:37:01'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:37:35' prior: 50904876!
accountSummary
	
	^ #('Balance = 0').! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:37:38'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:37:38'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:38:27'!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		
		
		self assert: account accountSummary equals: #('Balance = 0').


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:39:24' prior: 50904891!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 100.' 'Balance = 100').


	! !

!testRun: #ReportTest #test02accountSummaryWithTransaction stamp: 'jn 6/2/2021 20:39:27'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:40:48' prior: 50904881!
accountSummary
	
	^ #('Balance = ', (self balance asString)).! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:42:19' prior: 50904912!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:42:27'!
FAILURE!

!testRun: #ReportTest #test02accountSummaryWithTransaction stamp: 'jn 6/2/2021 20:42:27'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:42:42' prior: 50904858!
test01accountSummaryWithNoneTransactions

		| account |
		account := ReceptiveAccount new.
		
		self assert: account accountSummary equals: #('Balance = 0') asOrderedCollection .


	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:42:44'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:42:44'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithTransaction stamp: 'jn 6/2/2021 20:42:44'!
FAILURE!

!testRun: #ReportTest #test02accountSummaryWithTransaction stamp: 'jn 6/2/2021 20:42:44'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:42:53' prior: 50904899!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 100.' 'Balance = 100') asOrderedCollection.


	! !

!testRun: #ReportTest #test02accountSummaryWithTransaction stamp: 'jn 6/2/2021 20:42:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:45:45' prior: 50904917!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Dep�sito por ', (transactions at: 1) value asString.
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:45:51'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 20:45:51'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 20:45:51'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:45:51'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/2/2021 20:45:51'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:45:55'!
ERROR!

!testRun: #ReportTest #test02accountSummaryWithTransaction stamp: 'jn 6/2/2021 20:45:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:47:13' prior: 50904967!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	self addToSummary: summary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:50:09' prior: 50904999!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Dep�sito por 100'.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 20:50:16'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 20:50:16'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 20:50:16'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 20:50:16'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/2/2021 20:50:16'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:50:19'!
FAILURE!

!testRun: #ReportTest #test02accountSummaryWithTransaction stamp: 'jn 6/2/2021 20:50:19'!
FAILURE!

!methodRemoval: ReportTest #test02accountSummaryWithTransaction stamp: 'jn 6/2/2021 20:50:46'!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 100.' 'Balance = 100') asOrderedCollection.


	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:52:26'!
test02accountSummaryWithDeposits

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 50' 'Dep�sito por 100' 'Balance = 150') asOrderedCollection .


	! !

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 20:52:31'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:53:27' prior: 50905007!
accountSummary
	
	| summary |
	
	summary := self createSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:54:42'!
createSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToReport: summary.
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:55:56'!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		aSummary add: 'Dep�sito por', aTransaction value asString.
		]
	
	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:56:06'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 20:56:06'!
FAILURE!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 20:56:06'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:56:40' prior: 50905048!
test02accountSummaryWithDeposits

		| account bla |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.
		
		bla := account accountSummary .
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Dep�sito por 100' 'Balance = 150') asOrderedCollection .


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:57:13' prior: 50905077!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		aSummary add: 'Dep�sito por ', aTransaction value asString.
		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:57:21' prior: 50905094!
test02accountSummaryWithDeposits

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Dep�sito por 100' 'Balance = 150') asOrderedCollection .


	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 20:57:25'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 20:57:25'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:58:17'!
test02accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Extracci�n por 25' 'Balance = 25') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:58:27'!
test03accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Extracci�n por 25' 'Balance = 25') asOrderedCollection .


	! !

!methodRemoval: ReportTest #test02accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 20:58:27'!
test02accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Extracci�n por 25' 'Balance = 25') asOrderedCollection .


	!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 20:58:30'!
FAILURE!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 20:58:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:00:05' prior: 50905107!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ aSummary add: 'Dep�sito por ', aTransaction value asString. ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ aSummary add: 'Extracci�n por ', aTransaction value asString. ].
	
		]
	
	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 21:00:09'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 21:00:09'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 21:00:09'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:02:54'!
test03accountSummaryWithTransferWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Balance = 20') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:03:06'!
test04accountSummaryWithTransferWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Balance = 20') asOrderedCollection .


	! !

!methodRemoval: ReportTest #test03accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:03:06'!
test03accountSummaryWithTransferWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Balance = 20') asOrderedCollection .


	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:04:02' prior: 50905176!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ aSummary add: 'Dep�sito por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ aSummary add: 'Extracci�n por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: WithdrawLeg) ifTrue: [ aSummary add: 'Salida por transferencia de ', aTransaction value asString, '.' ].

		]
	
	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 21:04:05'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 21:04:05'!
FAILURE!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 21:04:05'!
FAILURE!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:04:05'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:04:17' prior: 50905114!
test02accountSummaryWithDeposits

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Dep�sito por 100.' 'Balance = 150') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:04:24' prior: 50905144!
test03accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 25') asOrderedCollection .


	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 21:04:26'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 21:04:26'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 21:04:26'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:04:26'!
FAILURE!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:04:26'!
FAILURE!
!TransferLeg methodsFor: 'balance' stamp: 'jn 6/2/2021 21:05:37' overrides: 16881508!
value 
	
	^ transfer value.! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 21:05:39'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 21:05:39'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 21:05:39'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:05:39'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:06:26'!
test05accountSummaryWithTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.

		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.''Balance = 20') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:06:35' prior: 50905335!
test05accountSummaryWithTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.

		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 20') asOrderedCollection .


	! !

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:06:38'!
FAILURE!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:06:38'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:06:59' prior: 50905248!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ aSummary add: 'Dep�sito por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ aSummary add: 'Extracci�n por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: WithdrawLeg) ifTrue: [ aSummary add: 'Salida por transferencia de ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: DepositLeg) ifTrue: [ aSummary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ].

		]
	
	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 21:07:08'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 21:07:08'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 21:07:08'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:07:08'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:07:08'!
FAILURE!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:07:08'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:07:55' prior: 50905355!
test05accountSummaryWithTransferDeposit

		| account anotherAccount asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.
asd := account accountSummary .
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 20') asOrderedCollection .


	! !

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:08:00'!
FAILURE!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:08:00'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:08:37' prior: 50905421!
test05accountSummaryWithTransferDeposit

		| account anotherAccount asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.
asd := account accountSummary .
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 30') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:08:42' prior: 50905448!
test05accountSummaryWithTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.

		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 30') asOrderedCollection .


	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 21:08:45'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 21:08:45'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 21:08:45'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:08:45'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:08:45'!
PASSED!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:10:41' prior: 50905381!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 21:11:24'!
asSummaryLine

	self subclassResponsibility .! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 21:11:26' prior: 50905512!
asSummaryLine

	self subclassResponsibility.! !
!Deposit methodsFor: 'summary' stamp: 'jn 6/2/2021 21:12:06' overrides: 50905517!
asSummaryLine

	^ 'Dep�sito por ', self value asString, '.'.
		! !
!Withdraw methodsFor: 'summary' stamp: 'jn 6/2/2021 21:13:01' overrides: 50905517!
asSummaryLine

	^ 'Extracci�n por ', self value asString, '.'.
		
! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:13:36'!
asSummaryLine

	self subclassResponsibility.
		! !
!DepositLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:14:06' overrides: 50905532!
asSummaryLine

		^ 'Entrada por transferencia de ', self value asString, '.'.! !
!WithdrawLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:14:25' overrides: 50905532!
asSummaryLine

	^ 'Salida por transferencia de ', self value asString, '.'.
! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 21:14:30'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 21:14:30'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 21:14:30'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:14:30'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:14:30'!
PASSED!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:17:07'!
addTransactionsToSummary: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 21:17:07' prior: 50905070!
createSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToSummary: summary.
	
	^ summary.! !

!methodRemoval: ReceptiveAccount #addTransactionsToReport: stamp: 'jn 6/2/2021 21:17:07'!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:17:39'!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToSummary: summary.
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 21:17:39' prior: 50905063!
accountSummary
	
	| summary |
	
	summary := self createAccountSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !

!methodRemoval: ReceptiveAccount #createSummary stamp: 'jn 6/2/2021 21:17:39'!
createSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToSummary: summary.
	
	^ summary.!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:17:52'!
addTransactionsToAccountSummary: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 21:17:52' prior: 50905584!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToAccountSummary: summary.
	
	^ summary.! !

!methodRemoval: ReceptiveAccount #addTransactionsToSummary: stamp: 'jn 6/2/2021 21:17:52'!
addTransactionsToSummary: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 21:19:48'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 21:19:48'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 21:19:48'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 21:19:48'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/2/2021 21:19:48'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 21:19:51'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 21:19:51'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 21:19:51'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:19:51'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:19:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/2/2021 21:19:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/2/2021 21:19:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/2/2021 21:19:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/2/2021 21:19:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/2/2021 21:19:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/2/2021 21:19:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/2/2021 21:19:52'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/2/2021 21:19:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/2/2021 21:20:18'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:49:00'!
test06transferNetWithNoneTransfers

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	! !

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 21:49:03'!
ERROR!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 21:49:25'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 21:49:34' prior: 50905757!
transferNet
	
	^0.! !

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 21:49:37'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 21:49:37'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 21:49:37'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 21:49:37'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:49:37'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:49:37'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 21:49:37'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:50:09'!
test06transferNetWithOneTransferDeposit

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:50:17'!
test07transferNetWithOneTransferDeposit

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	! !

!methodRemoval: ReportTest #test06transferNetWithOneTransferDeposit stamp: 'jn 6/2/2021 21:50:17'!
test06transferNetWithOneTransferDeposit

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:50:56' prior: 50905794!
test07transferNetWithOneTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.


	! !

!testRun: #ReportTest #test07transferNetWithOneTransferDeposit stamp: 'jn 6/2/2021 21:51:00'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:51:19'!
test07transferNetWithOneTransfer

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.


	! !

!methodRemoval: ReportTest #test07transferNetWithOneTransferDeposit stamp: 'jn 6/2/2021 21:51:19'!
test07transferNetWithOneTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.


	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:51:38' prior: 50905823!
test07transferNetWithOneTransfer

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.
		self assert: anotherAccount transferNet equals: -5.



	! !

!testRun: #ReportTest #test07transferNetWithOneTransfer stamp: 'jn 6/2/2021 21:51:42'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:53:15'!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.
		self assert: anotherAccount transferNet equals: -5.



	! !

!methodRemoval: ReportTest #test07transferNetWithOneTransfer stamp: 'jn 6/2/2021 21:53:15'!
test07transferNetWithOneTransfer

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.
		self assert: anotherAccount transferNet equals: -5.



	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:53:36' prior: 50905860!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 35.



	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 21:55:40' prior: 50905762!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !
!DepositLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:57:46'!
affectTransferNet: currentTransferNet

	^ currentTransferNet + transfer value.! !
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 21:58:10'!
affectTransferNet: currentTransferNet

	self subclassResponsibility ! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 21:59:32'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 21:59:32'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 21:59:32'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 21:59:32'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 21:59:32'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 21:59:32'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 21:59:32'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:00:21'!
test07transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:00:29'!
test08transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !

!methodRemoval: ReportTest #test07transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:00:29'!
test07transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:00:31'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:00:31'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:00:31'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:00:31'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:00:31'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:00:31'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:00:31'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:00:31'!
ERROR!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:00:31'!
ERROR!
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:00:57' overrides: 50905914!
affectTransferNet: currentTransferNet

	^ currentTransferNet - transfer value.! !

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/2/2021 22:01:00'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/2/2021 22:01:00'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/2/2021 22:01:00'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/2/2021 22:01:00'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/2/2021 22:01:00'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:01:02'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:01:02'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:01:02'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:01:02'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:01:02'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:01:02'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:01:02'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:01:02'!
ERROR!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:01:02'!
ERROR!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:01:31'!
ERROR!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:02:02' prior: 50905900!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:02:09'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:02:09'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:02:09'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:02:09'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:02:09'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:02:09'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:02:09'!
ERROR!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:02:09'!
ERROR!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:02:29' prior: 50905885!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.
asd := account transferNet.
		self assert: account transferNet equals: 35.



	! !

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:02:41'!
ERROR!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:02:53' prior: 50906115!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 35.



	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:03:47' prior: 50906077!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:04:04'!
ERROR!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:04:04'!
ERROR!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:05:10'!
ERROR!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:05:38' prior: 50906134!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		"Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20."

		self assert: account transferNet equals: 35.



	! !

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:05:40'!
FAILURE!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:10:32' prior: 50906149!
transferNet
	| currentTransferNet |
	currentTransferNet := 0.
	^transactions do: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:10:36'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:10:36'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:10:36'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:10:36'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:10:36'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:10:36'!
FAILURE!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:10:36'!
FAILURE!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:10:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:11:03' prior: 50906190!
transferNet
	| currentTransferNet |
	currentTransferNet := 0.
	
	transactions do: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			].
		
	^currentTransferNet.! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:11:05'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:11:05'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:11:05'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:11:05'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:11:05'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:11:05'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:11:05'!
FAILURE!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:11:05'!
FAILURE!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:11:10'!
FAILURE!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:11:10'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:11:18' prior: 50906171!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 35.



	! !

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:11:25'!
FAILURE!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:11:25'!
FAILURE!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:13:04' prior: 50906229!
transferNet

	^transactions sum: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction valueForTransferNet ]
			].
		
! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:13:13' prior: 50906299!
transferNet

	^transactions sum: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction valueForTransferNet ].
			].
		
! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:13:35'!
valueForTransferNet

	^ transfer value.! !

!methodRemoval: DepositLeg #affectTransferNet: stamp: 'jn 6/2/2021 22:13:40'!
affectTransferNet: currentTransferNet

	^ currentTransferNet + transfer value.!
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:13:51'!
valueForTransferNet

	self subclassResponsibility ! !

!methodRemoval: TransferLeg #affectTransferNet: stamp: 'jn 6/2/2021 22:13:54'!
affectTransferNet: currentTransferNet

	self subclassResponsibility !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:14:33' overrides: 50906328!
valueForTransferNet

	^ transfer value negated.! !

!methodRemoval: WithdrawLeg #affectTransferNet: stamp: 'jn 6/2/2021 22:14:38'!
affectTransferNet: currentTransferNet

	^ currentTransferNet - transfer value.!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:14:41'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:14:41'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:14:41'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:14:41'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:14:41'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:14:41'!
ERROR!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:14:41'!
ERROR!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:14:41'!
ERROR!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:14:46'!
ERROR!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:14:46'!
ERROR!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:15:09' prior: 50906309!
transferNet

	^transactions sum: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction valueForTransferNet ].
			] ifEmpty: [0].
		
! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:15:11'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:15:11'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:15:11'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:15:11'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:15:11'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:15:11'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:15:11'!
ERROR!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:15:11'!
ERROR!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:15:15'!
ERROR!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:15:15'!
ERROR!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:17:05' prior: 50906380!
transferNet
	| transferNet |
	transferNet := 0.
	transactions do: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transferNet := transferNet + transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transferNet := transferNet + transaction valueForTransferNet ].
			].
		
	^transferNet .
		
! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:17:09'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:17:09'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:17:09'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:17:09'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:17:09'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:17:09'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:17:09'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:17:09'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:18:05'!
test08transferNetWithMultipleTransactions

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:18:17' prior: 50905957!
test08transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:18:24'!
test09transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !

!methodRemoval: ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:18:24'!
test08transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:18:29'!
PASSED!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:19:15' prior: 50906424!
transferNet

	^ transactions sum: [ :transaction | transaction valueForTransferNet ] ifEmpty: [0].
		
		
! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:19:31'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:19:31'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:19:31'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:19:31'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:19:31'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:19:31'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:19:31'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 22:19:31'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:19:31'!
ERROR!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:19:31'!
ERROR!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 22:19:35'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:19:37'!
PASSED!
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:20:06'!
valueForTransferNet

	^ 0.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:20:20'!
valueForTransferNet

	^ 0.! !
!AccountTransaction methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:20:35'!
valueForTransferNet

	self subclassResponsibility.! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:20:38'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:20:38'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:20:38'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:20:38'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:20:38'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:20:38'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:20:38'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 22:20:38'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:20:38'!
PASSED!
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:26:01' prior: 50906319 overrides: 50906328!
valueForTransferNet

	^ self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:26:17' prior: 50906338 overrides: 50906328!
valueForTransferNet

	^ self value negated.! !
!Portfolio methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:43:01'!
transferNet

	^ accounts sum: [ :anAccount | anAccount transferNet ] ifEmpty: [0].
		! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:14'!
accountSummary
	
	| summary |
	
	summary := self createAccountSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:22'!
createAccountSummary! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:47' prior: 50906651!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToAccountSummary: summary.
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:57' prior: 50905606!
addTransactionsToAccountSummary: aSummary

	
	! !

!methodRemoval: ReceptiveAccount #addTransactionsToAccountSummary: stamp: 'jn 6/2/2021 22:47:01'!
addTransactionsToAccountSummary: aSummary

	
	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:47:21' prior: 50905614!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | summary add: aTransaction asSummaryLine. ].
	
	^ summary.! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 22:47:24'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 22:47:24'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 22:47:24'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 22:47:24'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 22:47:24'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 22:47:24'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 22:47:24'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 22:47:24'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 22:47:24'!
PASSED!
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:48:22' prior: 50906655!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	accounts do: [:anAccount | anAccount createAccountSummary ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:51:34' prior: 50906710!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	accounts do: [:anAccount | anAccount addToAccountSummary: summary ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:55:26' prior: 50906718!
createAccountSummary
	
	| summary |
	
	
	accounts do: [:anAccount | anAccount addToAccountSummary: summary ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:56:00' prior: 50906644!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.

	summary := self createAccountSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:57:02' prior: 50906733!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.
! !

!methodRemoval: Portfolio #createAccountSummary stamp: 'jn 6/2/2021 22:57:12'!
createAccountSummary
	
	| summary |
	
	
	accounts do: [:anAccount | anAccount addToAccountSummary: summary ].
	
	^ summary.!
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:58:26'!
addTransactionsLinesTo: summary

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].! !

!methodRemoval: ReceptiveAccount #createAccountSummary stamp: 'jn 6/2/2021 22:58:52'!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | summary add: aTransaction asSummaryLine. ].
	
	^ summary.!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:59:06' prior: 50905592!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | summary add: aTransaction asSummaryLine. ].
		
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:59:56' prior: 50906773!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!Deposit methodsFor: 'summary' stamp: 'jn 6/2/2021 23:01:25'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.! !

!methodRemoval: Deposit #addTransactionsLinesTo: stamp: 'jn 6/2/2021 23:01:38'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.!
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:01:45'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 23:01:48'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 23:01:48'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 23:01:48'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 23:01:48'!
ERROR!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 23:01:48'!
ERROR!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 23:01:48'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 23:01:48'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 23:01:48'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 23:01:48'!
PASSED!
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 23:02:04'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 23:02:07'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 23:02:07'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 23:02:07'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 23:02:07'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 23:02:07'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 23:02:07'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 23:02:07'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 23:02:07'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 23:02:07'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:03:10'!
test10PortfolioAccountSummary

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:05:04' prior: 50906870!
test10PortfolioAccountSummary

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:18:50'!
test10AccountSummaryInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new

		self assert: portfolio accountSummary equals: 15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:19:09' prior: 50906907!
test10AccountSummaryInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	! !

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/2/2021 23:19:12'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:20:10'!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:22:16' prior: 50906926!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 30') asOrderedCollection .




	! !

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:22:19'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test10PortfolioAccountSummary stamp: 'jn 6/2/2021 23:22:45'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:22:45'!
ERROR!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:22:45'!
ERROR!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 23:23:39'!
addTransactionsLinesTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test10PortfolioAccountSummary stamp: 'jn 6/2/2021 23:23:41'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:23:41'!
FAILURE!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:23:42'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:23:59' prior: 50906946!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.
asd := portfolio accountSummary .
		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 30') asOrderedCollection .




	! !

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:24:05'!
FAILURE!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:24:05'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:24:35' prior: 50907064!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.
asd := portfolio accountSummary .
		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 40') asOrderedCollection .




	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:24:41' prior: 50907096!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 40') asOrderedCollection .




	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test10PortfolioAccountSummary stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:24:48'!
PASSED!

!methodRemoval: ReportTest #test10PortfolioAccountSummary stamp: 'jn 6/2/2021 23:25:16'!
test10PortfolioAccountSummary

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:25:25'!
test10TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:25:30'!
test12TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	! !

!methodRemoval: ReportTest #test10TransferNetInEmptyPortfolio stamp: 'jn 6/2/2021 23:25:33'!
test10TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:25:46' prior: 50907211!
test12TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio transferNet equals: 0.



	! !

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:25:49'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/2/2021 23:25:49'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:26:22'!
test11transferNetInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio transferNet equals: 15 .




	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:26:27'!
test13transferNetInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio transferNet equals: 15 .




	! !

!methodRemoval: ReportTest #test11transferNetInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:26:30'!
test11transferNetInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio transferNet equals: 15 .




	!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/2/2021 23:26:34'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/2/2021 23:26:34'!
PASSED!
!FormSection methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:30:49' prior: 50814657!
initializeWithTitle: aTitle withExplanation: anExplanation withColor: aColor

	| titleLayoutSpec |

	title := aTitle.
	explanation := anExplanation.

	self separation: 3.
	self color: aColor.

	titleMorph := LabelMorph
		contents: title
		font: Preferences windowTitleFont
		emphasis: 1.
	titleLayoutSpec := LayoutSpec
		fixedWidth: titleMorph morphWidth
		fixedHeight: titleMorph morphHeight.
	titleLayoutSpec offAxisEdgeWeight: 0.03.

	self addMorph: titleMorph layoutSpec: titleLayoutSpec.

	explanation isEmpty ifFalse: [
		explanationMorph := ImmutableTextModelMorph
			withText: anExplanation
			withColor: aColor
			withWidth: self fixedWidthForTexts.
		self addMorph: explanationMorph.
	].! !
!LabeledInput methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:31:07' prior: 50814774!
withLabel: aLabel withWidth: aWidth withModel: aTextModel usingAs: focusMover

	| labelLayoutSpec inputMorphLayoutSpec |

	self separation: 5.
	self layoutSpec: (LayoutSpec proportionalWidth: 0.95 fixedHeight: LabeledInput recommendedHeight).

	labelMorph := LabelMorph contents: aLabel.
	labelLayoutSpec := LayoutSpec
		fixedWidth: aWidth
		fixedHeight: labelMorph morphHeight
		offAxisEdgeWeight: #center.
	self addMorph: labelMorph layoutSpec: labelLayoutSpec.

	inputMorph := TabPassingTextModelMorph withModel: aTextModel.
	inputMorph textMorph focusMover: focusMover.
	focusMover addFocusReceiver: inputMorph textMorph.
	inputMorph hideScrollBarsIndefinitely.
	inputMorphLayoutSpec :=
		LayoutSpec
			fixedWidth: LabeledInput inputWidth * 0.7
			fixedHeight: labelMorph morphHeight + 2.
	self addMorph: inputMorph layoutSpec: inputMorphLayoutSpec.



	! !
!MessageKeywordsAndParametersTable methodsFor: 'GUI building' stamp: 'jn 6/2/2021 23:31:25' prior: 50815089!
buildColumnTitlesRowFor: inputColumnsTitles

	| columnsTitles row |

	row := LayoutMorph newRow.
	row color: self backgroundColor.
	row separation: self columnSeparation.

	columnsTitles := OrderedCollection newFrom: inputColumnsTitles.
	columnsTitles addFirst: ''.
	self needsToReorderRows ifTrue: [columnsTitles addLast: 'Change order'].
	columnsTitles withIndexDo: [:aColumnTitle :columnIndex | | columnTitleLayoutSpec titleLayout |
		titleLayout := LayoutMorph newRow.
		titleLayout color: self backgroundColor .
		titleLayout axisEdgeWeight: #center.
		titleLayout addMorph: (LabelMorph contents: aColumnTitle).
		columnTitleLayoutSpec := LayoutSpec fixedWidth: (columnWidths at: columnIndex).
		row
			addMorph: titleLayout
			layoutSpec: columnTitleLayoutSpec].

	^row

	! !
!MessageKeywordsAndParametersTable methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:31:41' prior: 50814979!
withRows: rowsTitles withColor: aColor withPreviewModel: aPreviewModel withRefactoringModel: aRefactoringModel

	| rowsSeparation recommendedHeight numberOfRows columnsTitlesRow changeOrderButtons tableWidth inputColumnsTitles |

	backgroundColor := aColor.
	rowModels := OrderedCollection new.
	previewModel := aPreviewModel.
	refactoringModel := aRefactoringModel.
	variablesToParametrize := rowsTitles.

	rowsSeparation := 4.
	self separation: rowsSeparation.

	"Calculate table height"
	numberOfRows := (rowsTitles size + 1).
	recommendedHeight :=  self rowHeight * numberOfRows + (rowsSeparation * (numberOfRows + 1)) * 1.1.

	"Calculate column widths"
	inputColumnsTitles := #('Keyword' 'Parameter name').
	columnWidths := self columnWidthsRequiredForRowTitles: rowsTitles forInputColumns: inputColumnsTitles size.

	"Calculate table width"
	tableWidth := columnWidths sum + (self columnSeparation * (columnWidths size + 1)) * 1.1.

	self layoutSpec: (LayoutSpec fixedWidth: tableWidth fixedHeight: recommendedHeight).

	"Buid the columns titles row"
	columnsTitlesRow := self buildColumnTitlesRowFor: inputColumnsTitles.
	self addMorph: columnsTitlesRow layoutSpec: self rowsLayoutSpec.

	"Build the input rows"
	rowsTitles withIndexDo: [:aRowTitle :index | | aRow changeOrderModel keywordInputMorph inputMorphLayoutSpec parameternameInputMorph |
		aRow := LayoutMorph newRow.
		aRow color: self backgroundColor; separation: self columnSeparation.

		aRow
			addMorph: (LabelMorph contents: aRowTitle)
			layoutSpec: (LayoutSpec fixedWidth: (columnWidths at: 1)).

		inputMorphLayoutSpec := LayoutSpec fixedWidth: (columnWidths at: 2) fixedHeight: self rowHeight.

		keywordInputMorph := self buildInputMorphWith: (aRefactoringModel keywordModelOf: aRowTitle).
		aRow addMorph: keywordInputMorph layoutSpec: inputMorphLayoutSpec.

		parameternameInputMorph := self buildInputMorphWith: (aRefactoringModel parameterModelOf: aRowTitle).
		aRow addMorph: parameternameInputMorph layoutSpec: inputMorphLayoutSpec.

		self needsToReorderRows ifTrue: [
			changeOrderModel := ChangeRowOrderButtonModel for: (rowsTitles size - (index - 1)) notifying: self.
			rowModels addFirst: changeOrderModel.
			changeOrderButtons := self buildChangeOrderButtonsWith: changeOrderModel.
			aRow addMorph: changeOrderButtons layoutSpec: (LayoutSpec fixedWidth: (columnWidths last))].

		self addMorph: aRow layoutSpec: self rowsLayoutSpec.
	].! !

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/2/2021 23:34:44'!
Object subclass: #Summarizer
	instanceVariableNames: 'removethis account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer class methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44'!
account: aSelf removethis: aTransactions
	^self new initializeAccount: aSelf removethis: aTransactions! !
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44'!
initializeAccount: aSelf removethis: aTransactions
	removethis := aTransactions.
	account := aSelf.! !
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44'!
summarize
	
	| summary |
	
	summary := OrderedCollection  new.
	
	removethis do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44' prior: 50906783!
accountSummary
	^(Summarizer account: self removethis: transactions) summarize! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 23:35:19' prior: 50907568!
accountSummary

	^(Summarizer account: self removethis: transactions) summarize! !
!Summarizer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 23:35:38'!
account: anAccount
	^self new initializeAccount: anAccount! !

!methodRemoval: Summarizer class #account:removethis: stamp: 'jn 6/2/2021 23:35:44'!
account: aSelf removethis: aTransactions
	^self new initializeAccount: aSelf removethis: aTransactions!
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:35:59'!
initializeAccount: anAccount
	account := anAccount.! !

!methodRemoval: Summarizer #initializeAccount:removethis: stamp: 'jn 6/2/2021 23:36:03'!
initializeAccount: aSelf removethis: aTransactions
	removethis := aTransactions.
	account := aSelf.!
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:36:54' prior: 50907557!
summarize
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account accountSummary
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 23:37:04' prior: 50907574!
accountSummary

	^(Summarizer account: self) summarize! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:38:18'!
evaluate
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account accountSummary
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:38:18' prior: 50907613!
accountSummary

	^(Summarizer account: self) evaluate! !

!methodRemoval: Summarizer #summarize stamp: 'jn 6/2/2021 23:38:18'!
summarize
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account accountSummary
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.!
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:46:05' prior: 50907617!
evaluate
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account doOperation.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/2/2021 23:47:03'!
doOperation: summary

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:47:14' prior: 50907643!
evaluate
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account doOperation: summary.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !

Object subclass: #Summarizer
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/2/2021 23:50:04'!
Object subclass: #Summarizer
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Summarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Summarizer
	instanceVariableNames: 'account summaryReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/2/2021 23:52:14'!
Object subclass: #Summarizer
	instanceVariableNames: 'account summaryReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:52:29' prior: 50907591!
initializeAccount: anAccount
	account := anAccount.
	summaryReport := OrderedCollection new.! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:52:58' prior: 50907658!
evaluate
	
	account doOperation: summaryReport .
		
	summaryReport add: 'Balance = ', (account balance asString).
	
	^ summaryReport.! !

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/2/2021 23:53:07'!
Object subclass: #Summarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:53:07' prior: 50907696!
initializeAccount: anAccount
	account := anAccount.
	summary := OrderedCollection new.! !
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:53:07' prior: 50907702!
evaluate
	
	account doOperation: summary .
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:53:28' prior: 50907723!
evaluate
	
	account doOperation: summary.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:53:34' prior: 50907730!
evaluate
	
	account doOperation: self.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:55:45' prior: 50906802!
addTransactionsLinesTo: summary

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:56:18' prior: 50907744!
addTransactionsLinesTo: summary

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:56:34' prior: 50907749!
addTransactionsLinesTo: summary

	self subclassResponsibility.! !
!Deposit methodsFor: 'report' stamp: 'jn 6/2/2021 23:57:25' overrides: 50907754!
addTransactionsLinesTo: summary

	summary addDepositLineWithValue: self value.! !
!Withdraw methodsFor: 'report' stamp: 'jn 6/2/2021 23:57:55' overrides: 50907754!
addTransactionsLinesTo: summary

	summary addWithdrawLineWithValue: self value.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:59:15'!
addWithdrawLineWithValue: aValue

	summary add: 'Extracci�n por ', aValue asString, '.'.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:59:33'!
addDepositLineWithValue: aValue

	summary add: 'Dep�sito por ', aValue asString, '.'.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:00:05'!
addDepositLegLineWithValue: aValue

	summary add: 'Entrada por transferencia de ', aValue asString, '.'.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:00:18'!
addWithdrawLegLineWithValue: aValue

	summary add: 'Salida por transferencia de ', aValue asString, '.'.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/3/2021 00:00:58' prior: 50906836!
addTransactionsLinesTo: summary

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:01:15' overrides: 50907794!
addTransactionsLinesTo: summary

	summary addDepositLegLineWithValue: self value.! !
!WithdrawLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:01:36' overrides: 50907794!
addTransactionsLinesTo: summary

	summary addWithdrawLegLineWithValue: self value.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:02:37' prior: 50907651!
doOperation: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].
! !
!Deposit methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:00' prior: 50907759 overrides: 50907754!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLineWithValue: self value.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/3/2021 00:03:15' prior: 50907754!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.! !
!Withdraw methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:25' prior: 50907765 overrides: 50907824!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLineWithValue: self value.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/3/2021 00:03:31' prior: 50907794!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:39' prior: 50907799 overrides: 50907836!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLegLineWithValue: self value.! !
!WithdrawLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:46' prior: 50907805 overrides: 50907836!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLegLineWithValue: self value.! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:03:51'!
ERROR!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:03:51'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:03:51'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:03:54'!
ERROR!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:03:54'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:03:54'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:03:57'!
ERROR!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:03:57'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:03:57'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:04:00'!
ERROR!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:04:00'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:04:00'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:04:02'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:04:21'!
ERROR!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:04:21'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:04:21'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:04:28'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:04:29'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:04:30'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:04:31'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:04:33'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:04:35'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:04:36'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:04:37'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:04:38'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:04:39'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:04:40'!
ERROR!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:04:40'!
ERROR!

!methodRemoval: Portfolio #accountSummary stamp: 'jn 6/3/2021 00:05:26'!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.
!
!Account methodsFor: 'report' stamp: 'jn 6/3/2021 00:05:36'!
accountSummary
	
	^(Summarizer account: self) evaluate! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'jn 6/3/2021 00:05:47'!
accountSummary

	^(Summarizer account: self) evaluate!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:05:50'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:05:50'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:05:50'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:05:50'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:05:50'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:05:50'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:05:50'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:05:50'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:05:50'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:05:50'!
ERROR!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:05:50'!
ERROR!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:05:50'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:05:50'!
PASSED!
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:06:31'!
doOperation: aSummarizer

	| transactions |
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:07:27' prior: 50908182!
doOperation: aSummarizer

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: aSummarizer ].! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:07:33'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:07:33'!
PASSED!
!ReceptiveAccount methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:13:52' prior: 50906541!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
		
! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	^ 0.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	^ self value.! !
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	self subclassResponsibility ! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31' overrides: 50908253!
affectTransferNet

	^ self value negated.! !
!AccountTransaction methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	self subclassResponsibility.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31' overrides: 50908262!
affectTransferNet

	^ 0.! !

!methodRemoval: Deposit #valueForTransferNet stamp: 'jn 6/3/2021 00:14:31'!
valueForTransferNet

	^ 0.!

!methodRemoval: DepositLeg #valueForTransferNet stamp: 'jn 6/3/2021 00:14:31'!
valueForTransferNet

	^ self value.!

!methodRemoval: TransferLeg #valueForTransferNet stamp: 'jn 6/3/2021 00:14:31'!
valueForTransferNet

	self subclassResponsibility !

!methodRemoval: WithdrawLeg #valueForTransferNet stamp: 'jn 6/3/2021 00:14:31'!
valueForTransferNet

	^ self value negated.!

!methodRemoval: AccountTransaction #valueForTransferNet stamp: 'jn 6/3/2021 00:14:31'!
valueForTransferNet

	self subclassResponsibility.!

!methodRemoval: Withdraw #valueForTransferNet stamp: 'jn 6/3/2021 00:14:31'!
valueForTransferNet

	^ 0.!
!AccountTransaction methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	^ self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	^ self value negated.! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31' overrides: 50908293!
affectTransferNet: currentTransferNet

	^ 0.! !
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	self subclassResponsibility ! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:32' overrides: 50908293!
affectTransferNet: currentTransferNet

	^ 0.! !

!methodRemoval: AccountTransaction #affectTransferNet stamp: 'jn 6/3/2021 00:15:32'!
affectTransferNet

	self subclassResponsibility.!

!methodRemoval: DepositLeg #affectTransferNet stamp: 'jn 6/3/2021 00:15:32'!
affectTransferNet

	^ self value.!

!methodRemoval: WithdrawLeg #affectTransferNet stamp: 'jn 6/3/2021 00:15:32'!
affectTransferNet

	^ self value negated.!

!methodRemoval: Deposit #affectTransferNet stamp: 'jn 6/3/2021 00:15:32'!
affectTransferNet

	^ 0.!

!methodRemoval: TransferLeg #affectTransferNet stamp: 'jn 6/3/2021 00:15:32'!
affectTransferNet

	self subclassResponsibility !

!methodRemoval: Withdraw #affectTransferNet stamp: 'jn 6/3/2021 00:15:32'!
affectTransferNet

	^ 0.!
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:41' prior: 50908307 overrides: 50908293!
affectTransferNet: currentTransferNet

	^ currentTransferNet.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:55' prior: 50908316 overrides: 50908293!
affectTransferNet: currentTransferNet

	^ currentTransferNet.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:16:05' prior: 50908298 overrides: 50908311!
affectTransferNet: currentTransferNet

	^ currentTransferNet + self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:16:15' prior: 50908302 overrides: 50908311!
affectTransferNet: currentTransferNet

	^ currentTransferNet - self value.! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:16:18'!
PASSED!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 00:18:26'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetCalculator class methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26'!
deleteme: aTransactions
	^self new initializeDeleteme: aTransactions! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26'!
initializeDeleteme: aTransactions
	transferNet := aTransactions.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26'!
evaluate
	
	^transferNet 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
		
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26' prior: 50908238!
transferNet
	^(TransferNetCalculator deleteme: transactions) evaluate! !
!TransferNetCalculator class methodsFor: 'instance creation' stamp: 'jn 6/3/2021 00:19:13'!
for: aTransactions
	^self new initializeDeleteme: aTransactions! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:19:13' prior: 50908435!
transferNet
	^(TransferNetCalculator for: transactions) evaluate! !

!methodRemoval: TransferNetCalculator class #deleteme: stamp: 'jn 6/3/2021 00:19:13'!
deleteme: aTransactions
	^self new initializeDeleteme: aTransactions!
!TransferNetCalculator class methodsFor: 'instance creation' stamp: 'jn 6/3/2021 00:19:27' prior: 50908441!
for: anAccount

	^self new initializeDeleteme: anAccount! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:19:45'!
initializeFor: aTransactions
	transferNet := aTransactions.! !
!TransferNetCalculator class methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:19:45' prior: 50908458!
for: anAccount

	^self new initializeFor: anAccount! !

!methodRemoval: TransferNetCalculator #initializeDeleteme: stamp: 'jn 6/3/2021 00:19:45'!
initializeDeleteme: aTransactions
	transferNet := aTransactions.!
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:20:07' prior: 50908463!
initializeFor: anAccount
	transferNet := anAccount.! !

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 00:20:43'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:20:43' prior: 50908427!
evaluate
	
	^account 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
		
! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:20:43' prior: 50908479!
initializeFor: anAccount
	account := anAccount.! !
!TransferNetCalculator methodsFor: 'evaluating' stamp: 'jn 6/3/2021 00:21:33' prior: 50908492!
evaluate
	
	^ account doTransferNet: self.
	
		
! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:22:19'!
doTransferNet: aTransferNetCalculator

	| account |
	^account 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
! !
!ReceptiveAccount methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:22:36' prior: 50908447!
transferNet
	^(TransferNetCalculator for: self) evaluate! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:23:00' prior: 50908509!
doTransferNet: aTransferNetCalculator

	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:24:10' prior: 50908523!
doTransferNet: aTransferNetCalculator

	^ transactions do: [:aTransaction | aTransaction affectTransferNet: aTransferNetCalculator ].

	
		
! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:25:20' prior: 50908343 overrides: 50908293!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetDeposit: self value.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:25:38' prior: 50908349 overrides: 50908293!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetWithdraw: self value.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:26:40' prior: 50908355 overrides: 50908311!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetDepositLeg: self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:26:57' prior: 50908361 overrides: 50908311!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetWithdrawLeg: self value.! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:27:40'!
affectTransferNetWithdrawLeg: aValue

	! !

Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 00:27:49'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:27:57' prior: 50908500!
initializeFor: anAccount
	account := anAccount.
	transferNet := 0.! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:23' prior: 50908568!
affectTransferNetWithdrawLeg: aValue

	transferNet := transferNet - aValue.

	! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:31'!
affectTransferNetDepositLeg: aValue

	transferNet := transferNet + aValue.

	! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:43'!
affectTransferNetDeposit: aValue


	! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:48'!
affectTransferNetWithdraw: aValue


	! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:28:50'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:28:51'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:28:51'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:28:51'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:28:51'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:28:51'!
FAILURE!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:28:51'!
FAILURE!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:28:51'!
FAILURE!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:28:51'!
FAILURE!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:28:51'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:28:51'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:28:51'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:28:51'!
FAILURE!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:28:58'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:28:58'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:28:58'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:28:58'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:28:58'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:28:58'!
FAILURE!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:28:58'!
FAILURE!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:28:58'!
FAILURE!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:28:58'!
FAILURE!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:28:58'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:28:59'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:28:59'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:28:59'!
FAILURE!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:29:05'!
FAILURE!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:29:05'!
FAILURE!
!TransferNetCalculator methodsFor: 'evaluating' stamp: 'jn 6/3/2021 00:29:43' prior: 50908505!
evaluate
	
	account doTransferNet: self.
	^transferNet 
	
		
! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:29:46'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:29:46'!
PASSED!
!Portfolio methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:30:30' prior: 50906639!
transferNet

	^(TransferNetCalculator for: self) evaluate		! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:30:37'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:30:37'!
ERROR!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:30:37'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:31:01'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:31:01'!
ERROR!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:31:01'!
ERROR!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:31:05'!
ERROR!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:31:05'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:32:01'!
doTransferNet: aTransferNetCalculator

	^ accounts do: [:anAccount | anAccount affectTransferNet: aTransferNetCalculator ].
! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:32:04'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:32:04'!
ERROR!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:32:04'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:32:56' prior: 50908845!
doTransferNet: aTransferNetCalculator

	^ accounts do: [:anAccount | anAccount doTransferNet: aTransferNetCalculator ].
! !

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:32:59'!
PASSED!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 00:34:34'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 00:34:34'!
Report subclass: #Summarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 00:34:42'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 00:34:48'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 00:34:58'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:35:19'!
initializeFor: anAccount
	account := anAccount.
	summary := OrderedCollection new.! !
!Summarizer class methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:35:19' prior: 50907580!
account: anAccount
	^self new initializeFor: anAccount! !

!methodRemoval: Summarizer #initializeAccount: stamp: 'jn 6/3/2021 00:35:19'!
initializeAccount: anAccount
	account := anAccount.
	summary := OrderedCollection new.!
!Summarizer class methodsFor: 'instance creation' stamp: 'jn 6/3/2021 00:36:06'!
for: anAccount
	^self new initializeFor: anAccount! !
!Account methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:36:06' prior: 50908132!
accountSummary
	
	^(Summarizer for: self) evaluate! !

!methodRemoval: Summarizer class #account: stamp: 'jn 6/3/2021 00:36:06'!
account: anAccount
	^self new initializeFor: anAccount!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 00:36:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 00:36:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 00:36:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 00:36:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 00:36:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 00:36:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 00:36:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 00:36:27'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:36:30'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 00:36:33'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 00:36:33'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 00:36:33'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 00:36:33'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 00:36:33'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 00:36:42'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 00:36:42'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 00:36:42'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 00:36:42'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 00:36:42'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 00:36:48'!
PASSED!

!classRenamed: #TransferNetCalculator as: #TransferNetReporter stamp: 'jn 6/3/2021 10:39:40'!
Smalltalk renameClassNamed: #TransferNetCalculator as: #TransferNetReporter!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:39:41' prior: 50908751!
transferNet

	^(TransferNetReporter for: self) evaluate		! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:39:41' prior: 50908518!
transferNet
	^(TransferNetReporter for: self) evaluate! !

!classRenamed: #Summarizer as: #SummaryReporter stamp: 'jn 6/3/2021 10:40:24'!
Smalltalk renameClassNamed: #Summarizer as: #SummaryReporter!
!Account methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:40:24' prior: 50909021!
accountSummary
	
	^(SummaryReporter for: self) evaluate! !
!Account methodsFor: 'report' stamp: 'jn 6/3/2021 10:42:46'!
transferNet

	^(TransferNetReporter for: self) evaluate! !

!methodRemoval: Portfolio #transferNet stamp: 'jn 6/3/2021 10:42:56'!
transferNet

	^(TransferNetReporter for: self) evaluate		!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'jn 6/3/2021 10:43:04'!
transferNet
	^(TransferNetReporter for: self) evaluate!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 10:43:07'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 10:43:07'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 10:43:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 10:43:08'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 10:43:08'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 10:44:43'!
doSummary: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].
! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 10:44:43'!
doSummary: aSummarizer

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: aSummarizer ].! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:44:43' prior: 50907737!
evaluate
	
	account doSummary: self.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !

!methodRemoval: ReceptiveAccount #doOperation: stamp: 'jn 6/3/2021 10:44:43'!
doOperation: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].
!

!methodRemoval: Portfolio #doOperation: stamp: 'jn 6/3/2021 10:44:43'!
doOperation: aSummarizer

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: aSummarizer ].!
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 10:47:33' prior: 50909513!
doSummary: aSummarizer

	accounts do: [ :anAccount | anAccount doSummary: aSummarizer ].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 10:47:39'!
PASSED!

!methodRemoval: Portfolio #addTransactionsLinesTo: stamp: 'jn 6/3/2021 10:48:48'!
addTransactionsLinesTo: summary

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 10:48:53'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 10:48:53'!
PASSED!
!Withdraw methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	aSummarizer addWithdrawLineWithValue: self value.! !
!Deposit methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	aSummarizer addDepositLineWithValue: self value.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	self subclassResponsibility.! !
!WithdrawLeg methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22' overrides: 50909842!
addTransactionLineTo: aSummarizer

	aSummarizer addWithdrawLegLineWithValue: self value.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
! !
!DepositLeg methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22' overrides: 50909842!
addTransactionLineTo: aSummarizer

	aSummarizer addDepositLegLineWithValue: self value.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:49:22' prior: 50907015!
addTransactionsLinesTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: summary ].
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:49:22' prior: 50909507!
doSummary: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: aSummarizer ].
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:49:22' prior: 50909853!
addTransactionLineTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: summary ].
! !

!methodRemoval: Withdraw #addTransactionsLinesTo: stamp: 'jn 6/3/2021 10:49:22'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLineWithValue: self value.!

!methodRemoval: Deposit #addTransactionsLinesTo: stamp: 'jn 6/3/2021 10:49:22'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLineWithValue: self value.!

!methodRemoval: TransferLeg #addTransactionsLinesTo: stamp: 'jn 6/3/2021 10:49:22'!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.!

!methodRemoval: WithdrawLeg #addTransactionsLinesTo: stamp: 'jn 6/3/2021 10:49:22'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLegLineWithValue: self value.!

!methodRemoval: ReceptiveAccount #addTransactionsLinesTo: stamp: 'jn 6/3/2021 10:49:22'!
addTransactionsLinesTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: summary ].
!

!methodRemoval: DepositLeg #addTransactionsLinesTo: stamp: 'jn 6/3/2021 10:49:22'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLegLineWithValue: self value.!

!methodRemoval: AccountTransaction #addTransactionsLinesTo: stamp: 'jn 6/3/2021 10:49:22'!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 10:49:24'!
PASSED!

AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 10:52:49'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 10:53:48'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----STARTUP---- (3 June 2021 15:43:55) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:58'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:58'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04'!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'tests' stamp: 'jn 5/30/2021 20:05:35'!
test01transferAffectsBalanceFromAccounts

	| accountSender accountReciever |
	
	accountSender := ReceptiveAccount new.
	accountReciever := ReceptiveAccount new.
	
	Transfer from: accountSender to: accountReciever value: 50.

	self assert: (accountSender balance = -50 and: accountReciever balance = 50)

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 5/30/2021 20:29:25'!
test02receptiveAccountKnowsRegisteredTransactionLeg

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	transfer :=		Transfer from: account to: anotherAccount value: 100.

	self assert: (transfer isRegisteredAsFromIn: account andToIn: anotherAccount).

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 5/30/2021 20:18:39'!
test03transferHasTwoNavegableLegs 

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	transfer :=		Transfer from: account to: anotherAccount value: 100.

	self assert: (transfer legsBelongsTo: transfer).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50910547!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50910551!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50910556!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50910560!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50910539!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50910543!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:43:59'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' overrides: 50910551!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50910556!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50910547!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50910539!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50910543!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50910560!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50910788!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50910792!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50910788!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50910792!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'getters' stamp: 'jn 5/30/2021 20:20:07'!
legsBelongsTo: aTransfer
	
	^ (withdrawLeg belongsTo: aTransfer) and: (depositLeg belongsTo: aTransfer).! !
!Transfer methodsFor: 'getters' stamp: 'jn 5/30/2021 20:13:21' overrides: 16881508!
value
	
	^ value ! !
!Transfer methodsFor: 'initialization' stamp: 'jn 5/30/2021 20:12:04'!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !
!Transfer methodsFor: 'balance' stamp: 'jn 5/30/2021 20:22:56'!
addToBalance: aBalance

	^ aBalance + value.! !
!Transfer methodsFor: 'balance' stamp: 'jn 5/30/2021 20:23:03'!
substractToBalance: aBalance

	^ aBalance - value.! !
!Transfer methodsFor: 'testing' stamp: 'jn 5/30/2021 20:30:09'!
isRegisteredAsFromIn: anAccount andToIn: anotherAccount

	^ (anAccount hasRegistered: withdrawLeg) and: 
          (anotherAccount hasRegistered: depositLeg)
! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'instance creation' stamp: 'jn 5/30/2021 20:07:13'!
from: anAccountSending to: anAccountRecieving value: aValue

	^ self new initializeFrom: anAccountSending to: anAccountRecieving value: aValue
	


	! !

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferLeg methodsFor: 'testing' stamp: 'jn 5/30/2021 20:19:17'!
belongsTo: aTransfer

	^ transfer = aTransfer.
! !
!TransferLeg methodsFor: 'initialization' stamp: 'jn 5/30/2021 20:09:32'!
initializeFor: aTransfer and: aReceptiveAccount

	transfer := aTransfer.
	receptiveAccount := aReceptiveAccount.
	
	aReceptiveAccount register: self.
! !
!TransferLeg methodsFor: 'balance' stamp: 'jn 5/30/2021 20:15:01'!
affectBalance: aBalance
	
	self subclassResponsibility.! !

!classDefinition: 'TransferLeg class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
TransferLeg class
	instanceVariableNames: ''!

!classDefinition: 'TransferLeg class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
TransferLeg class
	instanceVariableNames: ''!
!TransferLeg class methodsFor: 'instance creation' stamp: 'jn 5/30/2021 19:56:31'!
for: aTransfer and: aTransaction

	^ self new initializeFor: aTransfer and: aTransaction. ! !

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
TransferLeg subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
TransferLeg subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'balance' stamp: 'jn 5/30/2021 20:21:41' overrides: 50910991!
affectBalance: aBalance
	
	^ transfer addToBalance: aBalance.! !

!classDefinition: #WithdrawLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
TransferLeg subclass: #WithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
TransferLeg subclass: #WithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawLeg methodsFor: 'balance' stamp: 'jn 5/30/2021 20:22:25' overrides: 50910991!
affectBalance: aBalance
	
	^ transfer substractToBalance: aBalance.! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:20:07'!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self should: [	 Transfer from: account to: anotherAccount value: -100 ]
		raise: Error
		description: 	'sd'

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:22:37' prior: 50911051!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		description: [ :anError |
			self assert: Transfer canNotTransferNegativeValueErrorMessage equals: anError messageText.
			 ]

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:23:31' prior: 50911062!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferNegativeValueErrorMessage equals: anError messageText.
			 ]
		
		

! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:25:22' prior: 50910957!
from: anAccountSending to: anAccountRecieving value: aValue

	aValue >= 0 ifTrue: [ Transfer canNotTransferInvalidValue ].
	
	^ self new initializeFrom: anAccountSending to: anAccountRecieving value: aValue
	


	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:26:48'!
canNotTransferInvalidValue

	self error: 'Can not transfer invalid value'.
	


	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:27:33' prior: 50911093!
from: anAccountSending to: anAccountRecieving value: aValue
	
	^ self new initializeFrom: anAccountSending to: anAccountRecieving value: aValue
	


	! !
!Transfer methodsFor: 'initialization' stamp: 'jn 6/2/2021 20:28:47' prior: 50910923!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	aValue >= 0 ifTrue: [ self error: Transfer canNotTransferInvalidValue ].

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:29:03' prior: 50911103!
canNotTransferInvalidValue

	^  'Can not transfer invalid value'.
	


	! !
!Transfer methodsFor: 'initialization' stamp: 'jn 6/2/2021 20:29:31' prior: 50911117!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	aValue <= 0 ifTrue: [ self error: Transfer canNotTransferInvalidValue ].

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:29:47' prior: 50911077!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferInvalidValue equals: anError messageText.
			 ]
		
		

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:30:00' prior: 50911148!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: 0 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferInvalidValue equals: anError messageText.
			 ].
		
	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferInvalidValue equals: anError messageText.
			 ]
		
		

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:30:46'!
test04transferToSameAccountMustFail

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: account value: 100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferToSameAccount equals: anError messageText.
			 ].
	

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:30:58'!
test05transferToSameAccountMustFail

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: account value: 100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferToSameAccount equals: anError messageText.
			 ].
	

! !

!methodRemoval: TransferTest #test04transferToSameAccountMustFail stamp: 'jn 6/3/2021 15:44:00'!
test04transferToSameAccountMustFail

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: account value: 100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferToSameAccount equals: anError messageText.
			 ].
	

!
!Transfer methodsFor: 'initialization' stamp: 'jn 6/2/2021 20:31:42' prior: 50911136!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	aValue <= 0 ifTrue: [ self error: Transfer canNotTransferInvalidValue ].
	anAccountSending == anAccountRecieving ifTrue: [ self error: Transfer canNotTransferToSameAccount ].

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:32:00'!
canNotTransferToSameAccount

	^  'Can not transfer to same account'.
	


	! !

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:00'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'no messages' stamp: 'jn 6/2/2021 20:33:15'!
test01! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:34:39'!
test01accountSummaryWithNoneTransactions

	! !

!methodRemoval: ReportTest #test01 stamp: 'jn 6/3/2021 15:44:00'!
test01!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:36:25' prior: 50911261!
test01accountSummaryWithNoneTransactions

		| account |
	account := ReceptiveAccount new.
		
		self assert: account accountSummary equals: #('Balance = 0').


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:36:31' prior: 50911268!
test01accountSummaryWithNoneTransactions

		| account |
		account := ReceptiveAccount new.
		
		self assert: account accountSummary equals: #('Balance = 0').


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:37:01'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:37:35' prior: 50911284!
accountSummary
	
	^ #('Balance = 0').! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:38:27'!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		
		
		self assert: account accountSummary equals: #('Balance = 0').


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:39:24' prior: 50911293!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 100.' 'Balance = 100').


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:40:48' prior: 50911289!
accountSummary
	
	^ #('Balance = ', (self balance asString)).! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:42:19' prior: 50911311!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:42:42' prior: 50911276!
test01accountSummaryWithNoneTransactions

		| account |
		account := ReceptiveAccount new.
		
		self assert: account accountSummary equals: #('Balance = 0') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:42:53' prior: 50911301!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 100.' 'Balance = 100') asOrderedCollection.


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:45:45' prior: 50911316!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Dep�sito por ', (transactions at: 1) value asString.
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:47:13' prior: 50911343!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	self addToSummary: summary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:50:09' prior: 50911353!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Dep�sito por 100'.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !

!methodRemoval: ReportTest #test02accountSummaryWithTransaction stamp: 'jn 6/3/2021 15:44:00'!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 100.' 'Balance = 100') asOrderedCollection.


	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:52:26'!
test02accountSummaryWithDeposits

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 50' 'Dep�sito por 100' 'Balance = 150') asOrderedCollection .


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:53:27' prior: 50911361!
accountSummary
	
	| summary |
	
	summary := self createSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:54:42'!
createSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToReport: summary.
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:55:56'!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		aSummary add: 'Dep�sito por', aTransaction value asString.
		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:56:40' prior: 50911379!
test02accountSummaryWithDeposits

		| account bla |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.
		
		bla := account accountSummary .
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Dep�sito por 100' 'Balance = 150') asOrderedCollection .


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:57:13' prior: 50911405!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		aSummary add: 'Dep�sito por ', aTransaction value asString.
		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:57:21' prior: 50911412!
test02accountSummaryWithDeposits

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Dep�sito por 100' 'Balance = 150') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:58:17'!
test02accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Extracci�n por 25' 'Balance = 25') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:58:27'!
test03accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Extracci�n por 25' 'Balance = 25') asOrderedCollection .


	! !

!methodRemoval: ReportTest #test02accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 15:44:00'!
test02accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Extracci�n por 25' 'Balance = 25') asOrderedCollection .


	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:00:05' prior: 50911425!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ aSummary add: 'Dep�sito por ', aTransaction value asString. ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ aSummary add: 'Extracci�n por ', aTransaction value asString. ].
	
		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:02:54'!
test03accountSummaryWithTransferWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Balance = 20') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:03:06'!
test04accountSummaryWithTransferWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Balance = 20') asOrderedCollection .


	! !

!methodRemoval: ReportTest #test03accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 15:44:01'!
test03accountSummaryWithTransferWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Balance = 20') asOrderedCollection .


	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:04:02' prior: 50911481!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ aSummary add: 'Dep�sito por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ aSummary add: 'Extracci�n por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: WithdrawLeg) ifTrue: [ aSummary add: 'Salida por transferencia de ', aTransaction value asString, '.' ].

		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:04:17' prior: 50911432!
test02accountSummaryWithDeposits

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Dep�sito por 100.' 'Balance = 150') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:04:24' prior: 50911456!
test03accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 25') asOrderedCollection .


	! !
!TransferLeg methodsFor: 'balance' stamp: 'jn 6/2/2021 21:05:37' overrides: 16881508!
value 
	
	^ transfer value.! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:06:26'!
test05accountSummaryWithTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.

		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.''Balance = 20') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:06:35' prior: 50911588!
test05accountSummaryWithTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.

		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 20') asOrderedCollection .


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:06:59' prior: 50911543!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ aSummary add: 'Dep�sito por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ aSummary add: 'Extracci�n por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: WithdrawLeg) ifTrue: [ aSummary add: 'Salida por transferencia de ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: DepositLeg) ifTrue: [ aSummary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ].

		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:07:55' prior: 50911608!
test05accountSummaryWithTransferDeposit

		| account anotherAccount asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.
asd := account accountSummary .
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 20') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:08:37' prior: 50911649!
test05accountSummaryWithTransferDeposit

		| account anotherAccount asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.
asd := account accountSummary .
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 30') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:08:42' prior: 50911670!
test05accountSummaryWithTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.

		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 30') asOrderedCollection .


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:10:41' prior: 50911628!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 21:11:24'!
asSummaryLine

	self subclassResponsibility .! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 21:11:26' prior: 50911718!
asSummaryLine

	self subclassResponsibility.! !
!Deposit methodsFor: 'summary' stamp: 'jn 6/2/2021 21:12:06' overrides: 50911723!
asSummaryLine

	^ 'Dep�sito por ', self value asString, '.'.
		! !
!Withdraw methodsFor: 'summary' stamp: 'jn 6/2/2021 21:13:01' overrides: 50911723!
asSummaryLine

	^ 'Extracci�n por ', self value asString, '.'.
		
! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:13:36'!
asSummaryLine

	self subclassResponsibility.
		! !
!DepositLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:14:06' overrides: 50911738!
asSummaryLine

		^ 'Entrada por transferencia de ', self value asString, '.'.! !
!WithdrawLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:14:25' overrides: 50911738!
asSummaryLine

	^ 'Salida por transferencia de ', self value asString, '.'.
! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:17:07'!
addTransactionsToSummary: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 21:17:07' prior: 50911398!
createSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToSummary: summary.
	
	^ summary.! !

!methodRemoval: ReceptiveAccount #addTransactionsToReport: stamp: 'jn 6/3/2021 15:44:01'!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:17:39'!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToSummary: summary.
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 21:17:39' prior: 50911391!
accountSummary
	
	| summary |
	
	summary := self createAccountSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !

!methodRemoval: ReceptiveAccount #createSummary stamp: 'jn 6/3/2021 15:44:01'!
createSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToSummary: summary.
	
	^ summary.!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:17:52'!
addTransactionsToAccountSummary: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 21:17:52' prior: 50911774!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToAccountSummary: summary.
	
	^ summary.! !

!methodRemoval: ReceptiveAccount #addTransactionsToSummary: stamp: 'jn 6/3/2021 15:44:01'!
addTransactionsToSummary: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:49:00'!
test06transferNetWithNoneTransfers

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 21:49:25'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 21:49:34' prior: 50911824!
transferNet
	
	^0.! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:50:09'!
test06transferNetWithOneTransferDeposit

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:50:17'!
test07transferNetWithOneTransferDeposit

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	! !

!methodRemoval: ReportTest #test06transferNetWithOneTransferDeposit stamp: 'jn 6/3/2021 15:44:01'!
test06transferNetWithOneTransferDeposit

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:50:56' prior: 50911839!
test07transferNetWithOneTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:51:19'!
test07transferNetWithOneTransfer

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.


	! !

!methodRemoval: ReportTest #test07transferNetWithOneTransferDeposit stamp: 'jn 6/3/2021 15:44:01'!
test07transferNetWithOneTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.


	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:51:38' prior: 50911865!
test07transferNetWithOneTransfer

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.
		self assert: anotherAccount transferNet equals: -5.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:53:15'!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.
		self assert: anotherAccount transferNet equals: -5.



	! !

!methodRemoval: ReportTest #test07transferNetWithOneTransfer stamp: 'jn 6/3/2021 15:44:01'!
test07transferNetWithOneTransfer

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.
		self assert: anotherAccount transferNet equals: -5.



	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:53:36' prior: 50911899!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 35.



	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 21:55:40' prior: 50911829!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !
!DepositLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:57:46'!
affectTransferNet: currentTransferNet

	^ currentTransferNet + transfer value.! !
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 21:58:10'!
affectTransferNet: currentTransferNet

	self subclassResponsibility ! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:00:21'!
test07transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:00:29'!
test08transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !

!methodRemoval: ReportTest #test07transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 15:44:01'!
test07transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	!
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:00:57' overrides: 50911953!
affectTransferNet: currentTransferNet

	^ currentTransferNet - transfer value.! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:02:02' prior: 50911939!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:02:29' prior: 50911924!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.
asd := account transferNet.
		self assert: account transferNet equals: 35.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:02:53' prior: 50912026!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 35.



	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:03:47' prior: 50912014!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:05:38' prior: 50912042!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		"Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20."

		self assert: account transferNet equals: 35.



	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:10:32' prior: 50912057!
transferNet
	| currentTransferNet |
	currentTransferNet := 0.
	^transactions do: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:11:03' prior: 50912084!
transferNet
	| currentTransferNet |
	currentTransferNet := 0.
	
	transactions do: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			].
		
	^currentTransferNet.! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:11:18' prior: 50912069!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 35.



	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:13:04' prior: 50912097!
transferNet

	^transactions sum: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction valueForTransferNet ]
			].
		
! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:13:13' prior: 50912125!
transferNet

	^transactions sum: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction valueForTransferNet ].
			].
		
! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:13:35'!
valueForTransferNet

	^ transfer value.! !

!methodRemoval: DepositLeg #affectTransferNet: stamp: 'jn 6/3/2021 15:44:01'!
affectTransferNet: currentTransferNet

	^ currentTransferNet + transfer value.!
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:13:51'!
valueForTransferNet

	self subclassResponsibility ! !

!methodRemoval: TransferLeg #affectTransferNet: stamp: 'jn 6/3/2021 15:44:01'!
affectTransferNet: currentTransferNet

	self subclassResponsibility !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:14:33' overrides: 50912154!
valueForTransferNet

	^ transfer value negated.! !

!methodRemoval: WithdrawLeg #affectTransferNet: stamp: 'jn 6/3/2021 15:44:01'!
affectTransferNet: currentTransferNet

	^ currentTransferNet - transfer value.!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:15:09' prior: 50912135!
transferNet

	^transactions sum: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction valueForTransferNet ].
			] ifEmpty: [0].
		
! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:17:05' prior: 50912174!
transferNet
	| transferNet |
	transferNet := 0.
	transactions do: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transferNet := transferNet + transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transferNet := transferNet + transaction valueForTransferNet ].
			].
		
	^transferNet .
		
! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:18:05'!
test08transferNetWithMultipleTransactions

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:18:17' prior: 50911974!
test08transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:18:24'!
test09transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !

!methodRemoval: ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 15:44:01'!
test08transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:19:15' prior: 50912185!
transferNet

	^ transactions sum: [ :transaction | transaction valueForTransferNet ] ifEmpty: [0].
		
		
! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:20:06'!
valueForTransferNet

	^ 0.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:20:20'!
valueForTransferNet

	^ 0.! !
!AccountTransaction methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:20:35'!
valueForTransferNet

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:26:01' prior: 50912145 overrides: 50912154!
valueForTransferNet

	^ self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:26:17' prior: 50912164 overrides: 50912154!
valueForTransferNet

	^ self value negated.! !
!Portfolio methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:43:01'!
transferNet

	^ accounts sum: [ :anAccount | anAccount transferNet ] ifEmpty: [0].
		! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:14'!
accountSummary
	
	| summary |
	
	summary := self createAccountSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:22'!
createAccountSummary! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:47' prior: 50912312!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToAccountSummary: summary.
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:57' prior: 50911796!
addTransactionsToAccountSummary: aSummary

	
	! !

!methodRemoval: ReceptiveAccount #addTransactionsToAccountSummary: stamp: 'jn 6/3/2021 15:44:01'!
addTransactionsToAccountSummary: aSummary

	
	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:47:21' prior: 50911804!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | summary add: aTransaction asSummaryLine. ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:48:22' prior: 50912316!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	accounts do: [:anAccount | anAccount createAccountSummary ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:51:34' prior: 50912341!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	accounts do: [:anAccount | anAccount addToAccountSummary: summary ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:55:26' prior: 50912349!
createAccountSummary
	
	| summary |
	
	
	accounts do: [:anAccount | anAccount addToAccountSummary: summary ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:56:00' prior: 50912305!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.

	summary := self createAccountSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:57:02' prior: 50912364!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.
! !

!methodRemoval: Portfolio #createAccountSummary stamp: 'jn 6/3/2021 15:44:01'!
createAccountSummary
	
	| summary |
	
	
	accounts do: [:anAccount | anAccount addToAccountSummary: summary ].
	
	^ summary.!
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:58:26'!
addTransactionsLinesTo: summary

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].! !

!methodRemoval: ReceptiveAccount #createAccountSummary stamp: 'jn 6/3/2021 15:44:01'!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | summary add: aTransaction asSummaryLine. ].
	
	^ summary.!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:59:06' prior: 50911782!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | summary add: aTransaction asSummaryLine. ].
		
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:59:56' prior: 50912404!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!Deposit methodsFor: 'summary' stamp: 'jn 6/2/2021 23:01:25'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.! !

!methodRemoval: Deposit #addTransactionsLinesTo: stamp: 'jn 6/3/2021 15:44:02'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.!
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:01:45'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 23:02:04'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:03:10'!
test10PortfolioAccountSummary

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:05:04' prior: 50912443!
test10PortfolioAccountSummary

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:18:50'!
test10AccountSummaryInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new

		self assert: portfolio accountSummary equals: 15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:19:09' prior: 50912480!
test10AccountSummaryInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:20:10'!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:22:16' prior: 50912496!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 30') asOrderedCollection .




	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 23:23:39'!
addTransactionsLinesTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:23:59' prior: 50912516!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.
asd := portfolio accountSummary .
		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 30') asOrderedCollection .




	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:24:35' prior: 50912547!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.
asd := portfolio accountSummary .
		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 40') asOrderedCollection .




	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:24:41' prior: 50912572!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 40') asOrderedCollection .




	! !

!methodRemoval: ReportTest #test10PortfolioAccountSummary stamp: 'jn 6/3/2021 15:44:02'!
test10PortfolioAccountSummary

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:25:25'!
test10TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:25:30'!
test12TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	! !

!methodRemoval: ReportTest #test10TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 15:44:02'!
test10TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:25:46' prior: 50912648!
test12TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio transferNet equals: 0.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:26:22'!
test11transferNetInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio transferNet equals: 15 .




	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:26:27'!
test13transferNetInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio transferNet equals: 15 .




	! !

!methodRemoval: ReportTest #test11transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 15:44:02'!
test11transferNetInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio transferNet equals: 15 .




	!
!FormSection methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:30:49' prior: 50814657!
initializeWithTitle: aTitle withExplanation: anExplanation withColor: aColor

	| titleLayoutSpec |

	title := aTitle.
	explanation := anExplanation.

	self separation: 3.
	self color: aColor.

	titleMorph := LabelMorph
		contents: title
		font: Preferences windowTitleFont
		emphasis: 1.
	titleLayoutSpec := LayoutSpec
		fixedWidth: titleMorph morphWidth
		fixedHeight: titleMorph morphHeight.
	titleLayoutSpec offAxisEdgeWeight: 0.03.

	self addMorph: titleMorph layoutSpec: titleLayoutSpec.

	explanation isEmpty ifFalse: [
		explanationMorph := ImmutableTextModelMorph
			withText: anExplanation
			withColor: aColor
			withWidth: self fixedWidthForTexts.
		self addMorph: explanationMorph.
	].! !
!LabeledInput methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:31:07' prior: 50814774!
withLabel: aLabel withWidth: aWidth withModel: aTextModel usingAs: focusMover

	| labelLayoutSpec inputMorphLayoutSpec |

	self separation: 5.
	self layoutSpec: (LayoutSpec proportionalWidth: 0.95 fixedHeight: LabeledInput recommendedHeight).

	labelMorph := LabelMorph contents: aLabel.
	labelLayoutSpec := LayoutSpec
		fixedWidth: aWidth
		fixedHeight: labelMorph morphHeight
		offAxisEdgeWeight: #center.
	self addMorph: labelMorph layoutSpec: labelLayoutSpec.

	inputMorph := TabPassingTextModelMorph withModel: aTextModel.
	inputMorph textMorph focusMover: focusMover.
	focusMover addFocusReceiver: inputMorph textMorph.
	inputMorph hideScrollBarsIndefinitely.
	inputMorphLayoutSpec :=
		LayoutSpec
			fixedWidth: LabeledInput inputWidth * 0.7
			fixedHeight: labelMorph morphHeight + 2.
	self addMorph: inputMorph layoutSpec: inputMorphLayoutSpec.



	! !
!MessageKeywordsAndParametersTable methodsFor: 'GUI building' stamp: 'jn 6/2/2021 23:31:25' prior: 50815089!
buildColumnTitlesRowFor: inputColumnsTitles

	| columnsTitles row |

	row := LayoutMorph newRow.
	row color: self backgroundColor.
	row separation: self columnSeparation.

	columnsTitles := OrderedCollection newFrom: inputColumnsTitles.
	columnsTitles addFirst: ''.
	self needsToReorderRows ifTrue: [columnsTitles addLast: 'Change order'].
	columnsTitles withIndexDo: [:aColumnTitle :columnIndex | | columnTitleLayoutSpec titleLayout |
		titleLayout := LayoutMorph newRow.
		titleLayout color: self backgroundColor .
		titleLayout axisEdgeWeight: #center.
		titleLayout addMorph: (LabelMorph contents: aColumnTitle).
		columnTitleLayoutSpec := LayoutSpec fixedWidth: (columnWidths at: columnIndex).
		row
			addMorph: titleLayout
			layoutSpec: columnTitleLayoutSpec].

	^row

	! !
!MessageKeywordsAndParametersTable methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:31:41' prior: 50814979!
withRows: rowsTitles withColor: aColor withPreviewModel: aPreviewModel withRefactoringModel: aRefactoringModel

	| rowsSeparation recommendedHeight numberOfRows columnsTitlesRow changeOrderButtons tableWidth inputColumnsTitles |

	backgroundColor := aColor.
	rowModels := OrderedCollection new.
	previewModel := aPreviewModel.
	refactoringModel := aRefactoringModel.
	variablesToParametrize := rowsTitles.

	rowsSeparation := 4.
	self separation: rowsSeparation.

	"Calculate table height"
	numberOfRows := (rowsTitles size + 1).
	recommendedHeight :=  self rowHeight * numberOfRows + (rowsSeparation * (numberOfRows + 1)) * 1.1.

	"Calculate column widths"
	inputColumnsTitles := #('Keyword' 'Parameter name').
	columnWidths := self columnWidthsRequiredForRowTitles: rowsTitles forInputColumns: inputColumnsTitles size.

	"Calculate table width"
	tableWidth := columnWidths sum + (self columnSeparation * (columnWidths size + 1)) * 1.1.

	self layoutSpec: (LayoutSpec fixedWidth: tableWidth fixedHeight: recommendedHeight).

	"Buid the columns titles row"
	columnsTitlesRow := self buildColumnTitlesRowFor: inputColumnsTitles.
	self addMorph: columnsTitlesRow layoutSpec: self rowsLayoutSpec.

	"Build the input rows"
	rowsTitles withIndexDo: [:aRowTitle :index | | aRow changeOrderModel keywordInputMorph inputMorphLayoutSpec parameternameInputMorph |
		aRow := LayoutMorph newRow.
		aRow color: self backgroundColor; separation: self columnSeparation.

		aRow
			addMorph: (LabelMorph contents: aRowTitle)
			layoutSpec: (LayoutSpec fixedWidth: (columnWidths at: 1)).

		inputMorphLayoutSpec := LayoutSpec fixedWidth: (columnWidths at: 2) fixedHeight: self rowHeight.

		keywordInputMorph := self buildInputMorphWith: (aRefactoringModel keywordModelOf: aRowTitle).
		aRow addMorph: keywordInputMorph layoutSpec: inputMorphLayoutSpec.

		parameternameInputMorph := self buildInputMorphWith: (aRefactoringModel parameterModelOf: aRowTitle).
		aRow addMorph: parameternameInputMorph layoutSpec: inputMorphLayoutSpec.

		self needsToReorderRows ifTrue: [
			changeOrderModel := ChangeRowOrderButtonModel for: (rowsTitles size - (index - 1)) notifying: self.
			rowModels addFirst: changeOrderModel.
			changeOrderButtons := self buildChangeOrderButtonsWith: changeOrderModel.
			aRow addMorph: changeOrderButtons layoutSpec: (LayoutSpec fixedWidth: (columnWidths last))].

		self addMorph: aRow layoutSpec: self rowsLayoutSpec.
	].! !

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:02'!
Object subclass: #Summarizer
	instanceVariableNames: 'removethis account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer class methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44'!
account: aSelf removethis: aTransactions
	^self new initializeAccount: aSelf removethis: aTransactions! !
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44'!
initializeAccount: aSelf removethis: aTransactions
	removethis := aTransactions.
	account := aSelf.! !
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44'!
summarize
	
	| summary |
	
	summary := OrderedCollection  new.
	
	removethis do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44' prior: 50912414!
accountSummary
	^(Summarizer account: self removethis: transactions) summarize! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 23:35:19' prior: 50912921!
accountSummary

	^(Summarizer account: self removethis: transactions) summarize! !
!Summarizer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 23:35:38'!
account: anAccount
	^self new initializeAccount: anAccount! !

!methodRemoval: Summarizer class #account:removethis: stamp: 'jn 6/3/2021 15:44:02'!
account: aSelf removethis: aTransactions
	^self new initializeAccount: aSelf removethis: aTransactions!
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:35:59'!
initializeAccount: anAccount
	account := anAccount.! !

!methodRemoval: Summarizer #initializeAccount:removethis: stamp: 'jn 6/3/2021 15:44:02'!
initializeAccount: aSelf removethis: aTransactions
	removethis := aTransactions.
	account := aSelf.!
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:36:54' prior: 50912910!
summarize
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account accountSummary
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 23:37:04' prior: 50912927!
accountSummary

	^(Summarizer account: self) summarize! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:38:18'!
evaluate
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account accountSummary
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:38:18' prior: 50912966!
accountSummary

	^(Summarizer account: self) evaluate! !

!methodRemoval: Summarizer #summarize stamp: 'jn 6/3/2021 15:44:02'!
summarize
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account accountSummary
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.!
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:46:05' prior: 50912970!
evaluate
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account doOperation.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/2/2021 23:47:03'!
doOperation: summary

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:47:14' prior: 50912996!
evaluate
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account doOperation: summary.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:02'!
Object subclass: #Summarizer
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:02'!
Object subclass: #Summarizer
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:02'!
Object subclass: #Summarizer
	instanceVariableNames: 'account summaryReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:02'!
Object subclass: #Summarizer
	instanceVariableNames: 'account summaryReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:52:29' prior: 50912944!
initializeAccount: anAccount
	account := anAccount.
	summaryReport := OrderedCollection new.! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:52:58' prior: 50913011!
evaluate
	
	account doOperation: summaryReport .
		
	summaryReport add: 'Balance = ', (account balance asString).
	
	^ summaryReport.! !

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:02'!
Object subclass: #Summarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:53:07' prior: 50913050!
initializeAccount: anAccount
	account := anAccount.
	summary := OrderedCollection new.! !
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:53:07' prior: 50913056!
evaluate
	
	account doOperation: summary .
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:53:28' prior: 50913077!
evaluate
	
	account doOperation: summary.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:53:34' prior: 50913084!
evaluate
	
	account doOperation: self.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:55:45' prior: 50912433!
addTransactionsLinesTo: summary

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:56:18' prior: 50913098!
addTransactionsLinesTo: summary

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:56:34' prior: 50913103!
addTransactionsLinesTo: summary

	self subclassResponsibility.! !
!Deposit methodsFor: 'report' stamp: 'jn 6/2/2021 23:57:25' overrides: 50913108!
addTransactionsLinesTo: summary

	summary addDepositLineWithValue: self value.! !
!Withdraw methodsFor: 'report' stamp: 'jn 6/2/2021 23:57:55' overrides: 50913108!
addTransactionsLinesTo: summary

	summary addWithdrawLineWithValue: self value.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:59:15'!
addWithdrawLineWithValue: aValue

	summary add: 'Extracci�n por ', aValue asString, '.'.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:59:33'!
addDepositLineWithValue: aValue

	summary add: 'Dep�sito por ', aValue asString, '.'.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:00:05'!
addDepositLegLineWithValue: aValue

	summary add: 'Entrada por transferencia de ', aValue asString, '.'.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:00:18'!
addWithdrawLegLineWithValue: aValue

	summary add: 'Salida por transferencia de ', aValue asString, '.'.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/3/2021 00:00:58' prior: 50912438!
addTransactionsLinesTo: summary

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:01:15' overrides: 50913148!
addTransactionsLinesTo: summary

	summary addDepositLegLineWithValue: self value.! !
!WithdrawLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:01:36' overrides: 50913148!
addTransactionsLinesTo: summary

	summary addWithdrawLegLineWithValue: self value.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:02:37' prior: 50913004!
doOperation: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].
! !
!Deposit methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:00' prior: 50913113 overrides: 50913108!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLineWithValue: self value.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/3/2021 00:03:15' prior: 50913108!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.! !
!Withdraw methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:25' prior: 50913119 overrides: 50913178!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLineWithValue: self value.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/3/2021 00:03:31' prior: 50913148!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:39' prior: 50913153 overrides: 50913190!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLegLineWithValue: self value.! !
!WithdrawLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:46' prior: 50913159 overrides: 50913190!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLegLineWithValue: self value.! !

!methodRemoval: Portfolio #accountSummary stamp: 'jn 6/3/2021 15:44:02'!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.
!
!Account methodsFor: 'report' stamp: 'jn 6/3/2021 00:05:36'!
accountSummary
	
	^(Summarizer account: self) evaluate! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'jn 6/3/2021 15:44:03'!
accountSummary

	^(Summarizer account: self) evaluate!
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:06:31'!
doOperation: aSummarizer

	| transactions |
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:07:27' prior: 50913226!
doOperation: aSummarizer

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: aSummarizer ].! !
!ReceptiveAccount methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:13:52' prior: 50912272!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
		
! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	^ 0.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	^ self value.! !
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	self subclassResponsibility ! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31' overrides: 50913255!
affectTransferNet

	^ self value negated.! !
!AccountTransaction methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	self subclassResponsibility.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31' overrides: 50913264!
affectTransferNet

	^ 0.! !

!methodRemoval: Deposit #valueForTransferNet stamp: 'jn 6/3/2021 15:44:03'!
valueForTransferNet

	^ 0.!

!methodRemoval: DepositLeg #valueForTransferNet stamp: 'jn 6/3/2021 15:44:03'!
valueForTransferNet

	^ self value.!

!methodRemoval: TransferLeg #valueForTransferNet stamp: 'jn 6/3/2021 15:44:03'!
valueForTransferNet

	self subclassResponsibility !

!methodRemoval: WithdrawLeg #valueForTransferNet stamp: 'jn 6/3/2021 15:44:03'!
valueForTransferNet

	^ self value negated.!

!methodRemoval: AccountTransaction #valueForTransferNet stamp: 'jn 6/3/2021 15:44:03'!
valueForTransferNet

	self subclassResponsibility.!

!methodRemoval: Withdraw #valueForTransferNet stamp: 'jn 6/3/2021 15:44:03'!
valueForTransferNet

	^ 0.!
!AccountTransaction methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	^ self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	^ self value negated.! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31' overrides: 50913295!
affectTransferNet: currentTransferNet

	^ 0.! !
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	self subclassResponsibility ! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:32' overrides: 50913295!
affectTransferNet: currentTransferNet

	^ 0.! !

!methodRemoval: AccountTransaction #affectTransferNet stamp: 'jn 6/3/2021 15:44:03'!
affectTransferNet

	self subclassResponsibility.!

!methodRemoval: DepositLeg #affectTransferNet stamp: 'jn 6/3/2021 15:44:03'!
affectTransferNet

	^ self value.!

!methodRemoval: WithdrawLeg #affectTransferNet stamp: 'jn 6/3/2021 15:44:03'!
affectTransferNet

	^ self value negated.!

!methodRemoval: Deposit #affectTransferNet stamp: 'jn 6/3/2021 15:44:03'!
affectTransferNet

	^ 0.!

!methodRemoval: TransferLeg #affectTransferNet stamp: 'jn 6/3/2021 15:44:03'!
affectTransferNet

	self subclassResponsibility !

!methodRemoval: Withdraw #affectTransferNet stamp: 'jn 6/3/2021 15:44:03'!
affectTransferNet

	^ 0.!
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:41' prior: 50913309 overrides: 50913295!
affectTransferNet: currentTransferNet

	^ currentTransferNet.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:55' prior: 50913318 overrides: 50913295!
affectTransferNet: currentTransferNet

	^ currentTransferNet.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:16:05' prior: 50913300 overrides: 50913313!
affectTransferNet: currentTransferNet

	^ currentTransferNet + self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:16:15' prior: 50913304 overrides: 50913313!
affectTransferNet: currentTransferNet

	^ currentTransferNet - self value.! !

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:03'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetCalculator class methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26'!
deleteme: aTransactions
	^self new initializeDeleteme: aTransactions! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26'!
initializeDeleteme: aTransactions
	transferNet := aTransactions.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26'!
evaluate
	
	^transferNet 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
		
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26' prior: 50913240!
transferNet
	^(TransferNetCalculator deleteme: transactions) evaluate! !
!TransferNetCalculator class methodsFor: 'instance creation' stamp: 'jn 6/3/2021 00:19:13'!
for: aTransactions
	^self new initializeDeleteme: aTransactions! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:19:13' prior: 50913395!
transferNet
	^(TransferNetCalculator for: transactions) evaluate! !

!methodRemoval: TransferNetCalculator class #deleteme: stamp: 'jn 6/3/2021 15:44:03'!
deleteme: aTransactions
	^self new initializeDeleteme: aTransactions!
!TransferNetCalculator class methodsFor: 'instance creation' stamp: 'jn 6/3/2021 00:19:27' prior: 50913401!
for: anAccount

	^self new initializeDeleteme: anAccount! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:19:45'!
initializeFor: aTransactions
	transferNet := aTransactions.! !
!TransferNetCalculator class methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:19:45' prior: 50913418!
for: anAccount

	^self new initializeFor: anAccount! !

!methodRemoval: TransferNetCalculator #initializeDeleteme: stamp: 'jn 6/3/2021 15:44:03'!
initializeDeleteme: aTransactions
	transferNet := aTransactions.!
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:20:07' prior: 50913423!
initializeFor: anAccount
	transferNet := anAccount.! !

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:03'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:20:43' prior: 50913387!
evaluate
	
	^account 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
		
! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:20:43' prior: 50913439!
initializeFor: anAccount
	account := anAccount.! !
!TransferNetCalculator methodsFor: 'evaluating' stamp: 'jn 6/3/2021 00:21:33' prior: 50913452!
evaluate
	
	^ account doTransferNet: self.
	
		
! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:22:19'!
doTransferNet: aTransferNetCalculator

	| account |
	^account 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
! !
!ReceptiveAccount methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:22:36' prior: 50913407!
transferNet
	^(TransferNetCalculator for: self) evaluate! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:23:00' prior: 50913469!
doTransferNet: aTransferNetCalculator

	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:24:10' prior: 50913483!
doTransferNet: aTransferNetCalculator

	^ transactions do: [:aTransaction | aTransaction affectTransferNet: aTransferNetCalculator ].

	
		
! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:25:20' prior: 50913345 overrides: 50913295!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetDeposit: self value.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:25:38' prior: 50913351 overrides: 50913295!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetWithdraw: self value.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:26:40' prior: 50913357 overrides: 50913313!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetDepositLeg: self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:26:57' prior: 50913363 overrides: 50913313!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetWithdrawLeg: self value.! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:27:40'!
affectTransferNetWithdrawLeg: aValue

	! !

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:03'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:03'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:27:57' prior: 50913460!
initializeFor: anAccount
	account := anAccount.
	transferNet := 0.! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:23' prior: 50913528!
affectTransferNetWithdrawLeg: aValue

	transferNet := transferNet - aValue.

	! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:31'!
affectTransferNetDepositLeg: aValue

	transferNet := transferNet + aValue.

	! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:43'!
affectTransferNetDeposit: aValue


	! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:48'!
affectTransferNetWithdraw: aValue


	! !
!TransferNetCalculator methodsFor: 'evaluating' stamp: 'jn 6/3/2021 00:29:43' prior: 50913465!
evaluate
	
	account doTransferNet: self.
	^transferNet 
	
		
! !
!Portfolio methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:30:30' prior: 50912300!
transferNet

	^(TransferNetCalculator for: self) evaluate		! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:32:01'!
doTransferNet: aTransferNetCalculator

	^ accounts do: [:anAccount | anAccount affectTransferNet: aTransferNetCalculator ].
! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:32:56' prior: 50913586!
doTransferNet: aTransferNetCalculator

	^ accounts do: [:anAccount | anAccount doTransferNet: aTransferNetCalculator ].
! !

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:03'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:03'!
Report subclass: #Summarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:04'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:04'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:04'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:04'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:04'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:04'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:35:19'!
initializeFor: anAccount
	account := anAccount.
	summary := OrderedCollection new.! !
!Summarizer class methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:35:19' prior: 50912933!
account: anAccount
	^self new initializeFor: anAccount! !

!methodRemoval: Summarizer #initializeAccount: stamp: 'jn 6/3/2021 15:44:04'!
initializeAccount: anAccount
	account := anAccount.
	summary := OrderedCollection new.!
!Summarizer class methodsFor: 'instance creation' stamp: 'jn 6/3/2021 00:36:06'!
for: anAccount
	^self new initializeFor: anAccount! !
!Account methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:36:06' prior: 50913217!
accountSummary
	
	^(Summarizer for: self) evaluate! !

!methodRemoval: Summarizer class #account: stamp: 'jn 6/3/2021 15:44:04'!
account: anAccount
	^self new initializeFor: anAccount!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:39:41' prior: 50913582!
transferNet

	^(TransferNetReporter for: self) evaluate		! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:39:41' prior: 50913478!
transferNet
	^(TransferNetReporter for: self) evaluate! !
!Account methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:40:24' prior: 50913685!
accountSummary
	
	^(SummaryReporter for: self) evaluate! !
!Account methodsFor: 'report' stamp: 'jn 6/3/2021 10:42:46'!
transferNet

	^(TransferNetReporter for: self) evaluate! !

!methodRemoval: Portfolio #transferNet stamp: 'jn 6/3/2021 15:44:04'!
transferNet

	^(TransferNetReporter for: self) evaluate		!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'jn 6/3/2021 15:44:04'!
transferNet
	^(TransferNetReporter for: self) evaluate!
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 10:44:43'!
doSummary: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].
! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 10:44:43'!
doSummary: aSummarizer

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: aSummarizer ].! !

!methodRemoval: ReceptiveAccount #doOperation: stamp: 'jn 6/3/2021 15:44:04'!
doOperation: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].
!

!methodRemoval: Portfolio #doOperation: stamp: 'jn 6/3/2021 15:44:04'!
doOperation: aSummarizer

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: aSummarizer ].!
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 10:47:33' prior: 50913727!
doSummary: aSummarizer

	accounts do: [ :anAccount | anAccount doSummary: aSummarizer ].! !

!methodRemoval: Portfolio #addTransactionsLinesTo: stamp: 'jn 6/3/2021 15:44:04'!
addTransactionsLinesTo: summary

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].!
!Withdraw methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	aSummarizer addWithdrawLineWithValue: self value.! !
!Deposit methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	aSummarizer addDepositLineWithValue: self value.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	self subclassResponsibility.! !
!WithdrawLeg methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22' overrides: 50913766!
addTransactionLineTo: aSummarizer

	aSummarizer addWithdrawLegLineWithValue: self value.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
! !
!DepositLeg methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22' overrides: 50913766!
addTransactionLineTo: aSummarizer

	aSummarizer addDepositLegLineWithValue: self value.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:49:22' prior: 50912540!
addTransactionsLinesTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: summary ].
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:49:22' prior: 50913721!
doSummary: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: aSummarizer ].
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:49:22' prior: 50913777!
addTransactionLineTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: summary ].
! !

!methodRemoval: Withdraw #addTransactionsLinesTo: stamp: 'jn 6/3/2021 15:44:04'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLineWithValue: self value.!

!methodRemoval: Deposit #addTransactionsLinesTo: stamp: 'jn 6/3/2021 15:44:04'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLineWithValue: self value.!

!methodRemoval: TransferLeg #addTransactionsLinesTo: stamp: 'jn 6/3/2021 15:44:04'!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.!

!methodRemoval: WithdrawLeg #addTransactionsLinesTo: stamp: 'jn 6/3/2021 15:44:04'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLegLineWithValue: self value.!

!methodRemoval: ReceptiveAccount #addTransactionsLinesTo: stamp: 'jn 6/3/2021 15:44:04'!
addTransactionsLinesTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: summary ].
!

!methodRemoval: DepositLeg #addTransactionsLinesTo: stamp: 'jn 6/3/2021 15:44:04'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLegLineWithValue: self value.!

!methodRemoval: AccountTransaction #addTransactionsLinesTo: stamp: 'jn 6/3/2021 15:44:04'!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:04'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:04'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:04'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 15:44:04'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 15:44:42'!
ERROR!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 15:44:42'!
PASSED!

----STARTUP---- (3 June 2021 16:05:46) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:53'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:53'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 5/27/2021 17:36:04'!
test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:53'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:53'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:54'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:21:24'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1.
		
	self assert: 1 equals: account1 transactions size .
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'tests' stamp: 'jn 5/30/2021 20:05:35'!
test01transferAffectsBalanceFromAccounts

	| accountSender accountReciever |
	
	accountSender := ReceptiveAccount new.
	accountReciever := ReceptiveAccount new.
	
	Transfer from: accountSender to: accountReciever value: 50.

	self assert: (accountSender balance = -50 and: accountReciever balance = 50)

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 5/30/2021 20:29:25'!
test02receptiveAccountKnowsRegisteredTransactionLeg

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	transfer :=		Transfer from: account to: anotherAccount value: 100.

	self assert: (transfer isRegisteredAsFromIn: account andToIn: anotherAccount).

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 5/30/2021 20:18:39'!
test03transferHasTwoNavegableLegs 

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	transfer :=		Transfer from: account to: anotherAccount value: 100.

	self assert: (transfer legsBelongsTo: transfer).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50910547!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50910551!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50910556!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50910560!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50910539!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50910543!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:52' overrides: 50910551!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50910556!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50910547!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50910539!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50910543!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50910560!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50910788!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50910792!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50910788!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50910792!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'getters' stamp: 'jn 5/30/2021 20:20:07'!
legsBelongsTo: aTransfer
	
	^ (withdrawLeg belongsTo: aTransfer) and: (depositLeg belongsTo: aTransfer).! !
!Transfer methodsFor: 'getters' stamp: 'jn 5/30/2021 20:13:21' overrides: 16881508!
value
	
	^ value ! !
!Transfer methodsFor: 'initialization' stamp: 'jn 5/30/2021 20:12:04'!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !
!Transfer methodsFor: 'balance' stamp: 'jn 5/30/2021 20:22:56'!
addToBalance: aBalance

	^ aBalance + value.! !
!Transfer methodsFor: 'balance' stamp: 'jn 5/30/2021 20:23:03'!
substractToBalance: aBalance

	^ aBalance - value.! !
!Transfer methodsFor: 'testing' stamp: 'jn 5/30/2021 20:30:09'!
isRegisteredAsFromIn: anAccount andToIn: anotherAccount

	^ (anAccount hasRegistered: withdrawLeg) and: 
          (anotherAccount hasRegistered: depositLeg)
! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'instance creation' stamp: 'jn 5/30/2021 20:07:13'!
from: anAccountSending to: anAccountRecieving value: aValue

	^ self new initializeFrom: anAccountSending to: anAccountRecieving value: aValue
	


	! !

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferLeg methodsFor: 'testing' stamp: 'jn 5/30/2021 20:19:17'!
belongsTo: aTransfer

	^ transfer = aTransfer.
! !
!TransferLeg methodsFor: 'initialization' stamp: 'jn 5/30/2021 20:09:32'!
initializeFor: aTransfer and: aReceptiveAccount

	transfer := aTransfer.
	receptiveAccount := aReceptiveAccount.
	
	aReceptiveAccount register: self.
! !
!TransferLeg methodsFor: 'balance' stamp: 'jn 5/30/2021 20:15:01'!
affectBalance: aBalance
	
	self subclassResponsibility.! !

!classDefinition: 'TransferLeg class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
TransferLeg class
	instanceVariableNames: ''!

!classDefinition: 'TransferLeg class' category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
TransferLeg class
	instanceVariableNames: ''!
!TransferLeg class methodsFor: 'instance creation' stamp: 'jn 5/30/2021 19:56:31'!
for: aTransfer and: aTransaction

	^ self new initializeFor: aTransfer and: aTransaction. ! !

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
TransferLeg subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
TransferLeg subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'balance' stamp: 'jn 5/30/2021 20:21:41' overrides: 50910991!
affectBalance: aBalance
	
	^ transfer addToBalance: aBalance.! !

!classDefinition: #WithdrawLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
TransferLeg subclass: #WithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:54'!
TransferLeg subclass: #WithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawLeg methodsFor: 'balance' stamp: 'jn 5/30/2021 20:22:25' overrides: 50910991!
affectBalance: aBalance
	
	^ transfer substractToBalance: aBalance.! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:20:07'!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self should: [	 Transfer from: account to: anotherAccount value: -100 ]
		raise: Error
		description: 	'sd'

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:22:37' prior: 50911051!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		description: [ :anError |
			self assert: Transfer canNotTransferNegativeValueErrorMessage equals: anError messageText.
			 ]

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:23:31' prior: 50911062!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferNegativeValueErrorMessage equals: anError messageText.
			 ]
		
		

! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:25:22' prior: 50910957!
from: anAccountSending to: anAccountRecieving value: aValue

	aValue >= 0 ifTrue: [ Transfer canNotTransferInvalidValue ].
	
	^ self new initializeFrom: anAccountSending to: anAccountRecieving value: aValue
	


	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:26:48'!
canNotTransferInvalidValue

	self error: 'Can not transfer invalid value'.
	


	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:27:33' prior: 50911093!
from: anAccountSending to: anAccountRecieving value: aValue
	
	^ self new initializeFrom: anAccountSending to: anAccountRecieving value: aValue
	


	! !
!Transfer methodsFor: 'initialization' stamp: 'jn 6/2/2021 20:28:47' prior: 50910923!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	aValue >= 0 ifTrue: [ self error: Transfer canNotTransferInvalidValue ].

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:29:03' prior: 50911103!
canNotTransferInvalidValue

	^  'Can not transfer invalid value'.
	


	! !
!Transfer methodsFor: 'initialization' stamp: 'jn 6/2/2021 20:29:31' prior: 50911117!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	aValue <= 0 ifTrue: [ self error: Transfer canNotTransferInvalidValue ].

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:29:47' prior: 50911077!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferInvalidValue equals: anError messageText.
			 ]
		
		

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:30:00' prior: 50911148!
test04transferNegativeValueMustFail

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: anotherAccount value: 0 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferInvalidValue equals: anError messageText.
			 ].
		
	self 
		should: [ Transfer from: account to: anotherAccount value: -100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferInvalidValue equals: anError messageText.
			 ]
		
		

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:30:46'!
test04transferToSameAccountMustFail

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: account value: 100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferToSameAccount equals: anError messageText.
			 ].
	

! !
!TransferTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:30:58'!
test05transferToSameAccountMustFail

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: account value: 100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferToSameAccount equals: anError messageText.
			 ].
	

! !

!methodRemoval: TransferTest #test04transferToSameAccountMustFail stamp: 'jn 6/3/2021 16:05:55'!
test04transferToSameAccountMustFail

	| account |
	
	account := ReceptiveAccount new.

	self 
		should: [ Transfer from: account to: account value: 100 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer canNotTransferToSameAccount equals: anError messageText.
			 ].
	

!
!Transfer methodsFor: 'initialization' stamp: 'jn 6/2/2021 20:31:42' prior: 50911136!
initializeFrom: anAccountSending to: anAccountRecieving value: aValue

	aValue <= 0 ifTrue: [ self error: Transfer canNotTransferInvalidValue ].
	anAccountSending == anAccountRecieving ifTrue: [ self error: Transfer canNotTransferToSameAccount ].

	withdrawLeg := WithdrawLeg for: self and: anAccountSending.
	depositLeg := DepositLeg for: self and: anAccountRecieving.
	value := aValue.

	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 20:32:00'!
canNotTransferToSameAccount

	^  'Can not transfer to same account'.
	


	! !

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:55'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:55'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'no messages' stamp: 'jn 6/2/2021 20:33:15'!
test01! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:34:39'!
test01accountSummaryWithNoneTransactions

	! !

!methodRemoval: ReportTest #test01 stamp: 'jn 6/3/2021 16:05:55'!
test01!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:36:25' prior: 50911261!
test01accountSummaryWithNoneTransactions

		| account |
	account := ReceptiveAccount new.
		
		self assert: account accountSummary equals: #('Balance = 0').


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:36:31' prior: 50911268!
test01accountSummaryWithNoneTransactions

		| account |
		account := ReceptiveAccount new.
		
		self assert: account accountSummary equals: #('Balance = 0').


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:37:01'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:37:35' prior: 50911284!
accountSummary
	
	^ #('Balance = 0').! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:38:27'!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		
		
		self assert: account accountSummary equals: #('Balance = 0').


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:39:24' prior: 50911293!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 100.' 'Balance = 100').


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:40:48' prior: 50911289!
accountSummary
	
	^ #('Balance = ', (self balance asString)).! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:42:19' prior: 50911311!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:42:42' prior: 50911276!
test01accountSummaryWithNoneTransactions

		| account |
		account := ReceptiveAccount new.
		
		self assert: account accountSummary equals: #('Balance = 0') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:42:53' prior: 50911301!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 100.' 'Balance = 100') asOrderedCollection.


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:45:45' prior: 50911316!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Dep�sito por ', (transactions at: 1) value asString.
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:47:13' prior: 50911343!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	self addToSummary: summary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:50:09' prior: 50911353!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Dep�sito por 100'.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !

!methodRemoval: ReportTest #test02accountSummaryWithTransaction stamp: 'jn 6/3/2021 16:05:55'!
test02accountSummaryWithTransaction

		| account |
		account := ReceptiveAccount new.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 100.' 'Balance = 100') asOrderedCollection.


	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:52:26'!
test02accountSummaryWithDeposits

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.

		self assert: account accountSummary equals: #('Dep�sito por 50' 'Dep�sito por 100' 'Balance = 150') asOrderedCollection .


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:53:27' prior: 50911361!
accountSummary
	
	| summary |
	
	summary := self createSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:54:42'!
createSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToReport: summary.
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:55:56'!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		aSummary add: 'Dep�sito por', aTransaction value asString.
		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:56:40' prior: 50911379!
test02accountSummaryWithDeposits

		| account bla |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.
		
		bla := account accountSummary .
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Dep�sito por 100' 'Balance = 150') asOrderedCollection .


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 20:57:13' prior: 50911405!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		aSummary add: 'Dep�sito por ', aTransaction value asString.
		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:57:21' prior: 50911412!
test02accountSummaryWithDeposits

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Dep�sito por 100' 'Balance = 150') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:58:17'!
test02accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Extracci�n por 25' 'Balance = 25') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 20:58:27'!
test03accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Extracci�n por 25' 'Balance = 25') asOrderedCollection .


	! !

!methodRemoval: ReportTest #test02accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 16:05:55'!
test02accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50' 'Extracci�n por 25' 'Balance = 25') asOrderedCollection .


	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:00:05' prior: 50911425!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ aSummary add: 'Dep�sito por ', aTransaction value asString. ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ aSummary add: 'Extracci�n por ', aTransaction value asString. ].
	
		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:02:54'!
test03accountSummaryWithTransferWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Balance = 20') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:03:06'!
test04accountSummaryWithTransferWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Balance = 20') asOrderedCollection .


	! !

!methodRemoval: ReportTest #test03accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 16:05:55'!
test03accountSummaryWithTransferWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Balance = 20') asOrderedCollection .


	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:04:02' prior: 50911481!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ aSummary add: 'Dep�sito por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ aSummary add: 'Extracci�n por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: WithdrawLeg) ifTrue: [ aSummary add: 'Salida por transferencia de ', aTransaction value asString, '.' ].

		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:04:17' prior: 50911432!
test02accountSummaryWithDeposits

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Deposit register: 100 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Dep�sito por 100.' 'Balance = 150') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:04:24' prior: 50911456!
test03accountSummaryWithDepositsAndWithdraws

		| account |
		account := ReceptiveAccount new.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 25') asOrderedCollection .


	! !
!TransferLeg methodsFor: 'balance' stamp: 'jn 6/2/2021 21:05:37' overrides: 16881508!
value 
	
	^ transfer value.! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:06:26'!
test05accountSummaryWithTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.

		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.''Balance = 20') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:06:35' prior: 50911588!
test05accountSummaryWithTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.

		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 20') asOrderedCollection .


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:06:59' prior: 50911543!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ aSummary add: 'Dep�sito por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ aSummary add: 'Extracci�n por ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: WithdrawLeg) ifTrue: [ aSummary add: 'Salida por transferencia de ', aTransaction value asString, '.' ].
		(aTransaction isKindOf: DepositLeg) ifTrue: [ aSummary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ].

		]
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:07:55' prior: 50911608!
test05accountSummaryWithTransferDeposit

		| account anotherAccount asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.
asd := account accountSummary .
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 20') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:08:37' prior: 50911649!
test05accountSummaryWithTransferDeposit

		| account anotherAccount asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.
asd := account accountSummary .
		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 30') asOrderedCollection .


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:08:42' prior: 50911670!
test05accountSummaryWithTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.

		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		Transfer from: account to: anotherAccount value: 5.
		Transfer from: anotherAccount to: account value: 10.

		self assert: account accountSummary equals: #('Dep�sito por 50.' 'Extracci�n por 25.' 'Salida por transferencia de 5.' 'Entrada por transferencia de 10.' 'Balance = 30') asOrderedCollection .


	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:10:41' prior: 50911628!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 21:11:24'!
asSummaryLine

	self subclassResponsibility .! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 21:11:26' prior: 50911718!
asSummaryLine

	self subclassResponsibility.! !
!Deposit methodsFor: 'summary' stamp: 'jn 6/2/2021 21:12:06' overrides: 50911723!
asSummaryLine

	^ 'Dep�sito por ', self value asString, '.'.
		! !
!Withdraw methodsFor: 'summary' stamp: 'jn 6/2/2021 21:13:01' overrides: 50911723!
asSummaryLine

	^ 'Extracci�n por ', self value asString, '.'.
		
! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:13:36'!
asSummaryLine

	self subclassResponsibility.
		! !
!DepositLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:14:06' overrides: 50911738!
asSummaryLine

		^ 'Entrada por transferencia de ', self value asString, '.'.! !
!WithdrawLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:14:25' overrides: 50911738!
asSummaryLine

	^ 'Salida por transferencia de ', self value asString, '.'.
! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:17:07'!
addTransactionsToSummary: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 21:17:07' prior: 50911398!
createSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToSummary: summary.
	
	^ summary.! !

!methodRemoval: ReceptiveAccount #addTransactionsToReport: stamp: 'jn 6/3/2021 16:05:55'!
addTransactionsToReport: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:17:39'!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToSummary: summary.
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 21:17:39' prior: 50911391!
accountSummary
	
	| summary |
	
	summary := self createAccountSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !

!methodRemoval: ReceptiveAccount #createSummary stamp: 'jn 6/3/2021 16:05:55'!
createSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToSummary: summary.
	
	^ summary.!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 21:17:52'!
addTransactionsToAccountSummary: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 21:17:52' prior: 50911774!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToAccountSummary: summary.
	
	^ summary.! !

!methodRemoval: ReceptiveAccount #addTransactionsToSummary: stamp: 'jn 6/3/2021 16:05:55'!
addTransactionsToSummary: aSummary

	transactions do: [:aTransaction | aSummary add: aTransaction asSummaryLine. ]
	
	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:49:00'!
test06transferNetWithNoneTransfers

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 21:49:25'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 21:49:34' prior: 50911824!
transferNet
	
	^0.! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:50:09'!
test06transferNetWithOneTransferDeposit

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:50:17'!
test07transferNetWithOneTransferDeposit

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	! !

!methodRemoval: ReportTest #test06transferNetWithOneTransferDeposit stamp: 'jn 6/3/2021 16:05:55'!
test06transferNetWithOneTransferDeposit

		| account |
		account := ReceptiveAccount new.
		
		self assert: account transferNet equals: 0.


	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:50:56' prior: 50911839!
test07transferNetWithOneTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.


	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:51:19'!
test07transferNetWithOneTransfer

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.


	! !

!methodRemoval: ReportTest #test07transferNetWithOneTransferDeposit stamp: 'jn 6/3/2021 16:05:55'!
test07transferNetWithOneTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.


	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:51:38' prior: 50911865!
test07transferNetWithOneTransfer

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.
		self assert: anotherAccount transferNet equals: -5.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:53:15'!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.
		self assert: anotherAccount transferNet equals: -5.



	! !

!methodRemoval: ReportTest #test07transferNetWithOneTransfer stamp: 'jn 6/3/2021 16:05:55'!
test07transferNetWithOneTransfer

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		
		self assert: account transferNet equals: 5.
		self assert: anotherAccount transferNet equals: -5.



	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 21:53:36' prior: 50911899!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 35.



	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 21:55:40' prior: 50911829!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !
!DepositLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 21:57:46'!
affectTransferNet: currentTransferNet

	^ currentTransferNet + transfer value.! !
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 21:58:10'!
affectTransferNet: currentTransferNet

	self subclassResponsibility ! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:00:21'!
test07transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:00:29'!
test08transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !

!methodRemoval: ReportTest #test07transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 16:05:55'!
test07transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	!
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:00:57' overrides: 50911953!
affectTransferNet: currentTransferNet

	^ currentTransferNet - transfer value.! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:02:02' prior: 50911939!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:02:29' prior: 50911924!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.
asd := account transferNet.
		self assert: account transferNet equals: 35.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:02:53' prior: 50912026!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 35.



	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:03:47' prior: 50912014!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:05:38' prior: 50912042!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		"Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20."

		self assert: account transferNet equals: 35.



	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:10:32' prior: 50912057!
transferNet
	| currentTransferNet |
	currentTransferNet := 0.
	^transactions do: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			]! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:11:03' prior: 50912084!
transferNet
	| currentTransferNet |
	currentTransferNet := 0.
	
	transactions do: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction affectTransferNet: currentTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction affectTransferNet: currentTransferNet ]
			].
		
	^currentTransferNet.! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:11:18' prior: 50912069!
test07transferNetWithMultipleTransferDeposit

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: anotherAccount to: account value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 35.



	! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:13:04' prior: 50912097!
transferNet

	^transactions sum: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction valueForTransferNet ]
			].
		
! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:13:13' prior: 50912125!
transferNet

	^transactions sum: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction valueForTransferNet ].
			].
		
! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:13:35'!
valueForTransferNet

	^ transfer value.! !

!methodRemoval: DepositLeg #affectTransferNet: stamp: 'jn 6/3/2021 16:05:56'!
affectTransferNet: currentTransferNet

	^ currentTransferNet + transfer value.!
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:13:51'!
valueForTransferNet

	self subclassResponsibility ! !

!methodRemoval: TransferLeg #affectTransferNet: stamp: 'jn 6/3/2021 16:05:56'!
affectTransferNet: currentTransferNet

	self subclassResponsibility !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:14:33' overrides: 50912154!
valueForTransferNet

	^ transfer value negated.! !

!methodRemoval: WithdrawLeg #affectTransferNet: stamp: 'jn 6/3/2021 16:05:56'!
affectTransferNet: currentTransferNet

	^ currentTransferNet - transfer value.!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:15:09' prior: 50912135!
transferNet

	^transactions sum: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transaction valueForTransferNet ].
			] ifEmpty: [0].
		
! !
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:17:05' prior: 50912174!
transferNet
	| transferNet |
	transferNet := 0.
	transactions do: [ :transaction | 
			(transaction isKindOf: DepositLeg) ifTrue: [transferNet := transferNet + transaction valueForTransferNet ].
			(transaction isKindOf: WithdrawLeg ) ifTrue: [transferNet := transferNet + transaction valueForTransferNet ].
			].
		
	^transferNet .
		
! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:18:05'!
test08transferNetWithMultipleTransactions

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:18:17' prior: 50911974!
test08transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 22:18:24'!
test09transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !

!methodRemoval: ReportTest #test08transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 16:05:56'!
test08transferNetWithMultipleTransferDepositAndWithdraw

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	!
!ReceptiveAccount methodsFor: 'TransferNet' stamp: 'jn 6/2/2021 22:19:15' prior: 50912185!
transferNet

	^ transactions sum: [ :transaction | transaction valueForTransferNet ] ifEmpty: [0].
		
		
! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:20:06'!
valueForTransferNet

	^ 0.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:20:20'!
valueForTransferNet

	^ 0.! !
!AccountTransaction methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:20:35'!
valueForTransferNet

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:26:01' prior: 50912145 overrides: 50912154!
valueForTransferNet

	^ self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:26:17' prior: 50912164 overrides: 50912154!
valueForTransferNet

	^ self value negated.! !
!Portfolio methodsFor: 'transferNet' stamp: 'jn 6/2/2021 22:43:01'!
transferNet

	^ accounts sum: [ :anAccount | anAccount transferNet ] ifEmpty: [0].
		! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:14'!
accountSummary
	
	| summary |
	
	summary := self createAccountSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:22'!
createAccountSummary! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:47' prior: 50912312!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	self addTransactionsToAccountSummary: summary.
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:46:57' prior: 50911796!
addTransactionsToAccountSummary: aSummary

	
	! !

!methodRemoval: ReceptiveAccount #addTransactionsToAccountSummary: stamp: 'jn 6/3/2021 16:05:56'!
addTransactionsToAccountSummary: aSummary

	
	!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:47:21' prior: 50911804!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | summary add: aTransaction asSummaryLine. ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:48:22' prior: 50912316!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	accounts do: [:anAccount | anAccount createAccountSummary ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:51:34' prior: 50912341!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	accounts do: [:anAccount | anAccount addToAccountSummary: summary ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:55:26' prior: 50912349!
createAccountSummary
	
	| summary |
	
	
	accounts do: [:anAccount | anAccount addToAccountSummary: summary ].
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:56:00' prior: 50912305!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.

	summary := self createAccountSummary.
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:57:02' prior: 50912364!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.
! !

!methodRemoval: Portfolio #createAccountSummary stamp: 'jn 6/3/2021 16:05:56'!
createAccountSummary
	
	| summary |
	
	
	accounts do: [:anAccount | anAccount addToAccountSummary: summary ].
	
	^ summary.!
!Portfolio methodsFor: 'summary' stamp: 'jn 6/2/2021 22:58:26'!
addTransactionsLinesTo: summary

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].! !

!methodRemoval: ReceptiveAccount #createAccountSummary stamp: 'jn 6/3/2021 16:05:56'!
createAccountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | summary add: aTransaction asSummaryLine. ].
	
	^ summary.!
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:59:06' prior: 50911782!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | summary add: aTransaction asSummaryLine. ].
		
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 22:59:56' prior: 50912404!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.
	
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.! !
!Deposit methodsFor: 'summary' stamp: 'jn 6/2/2021 23:01:25'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.! !

!methodRemoval: Deposit #addTransactionsLinesTo: stamp: 'jn 6/3/2021 16:05:56'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.!
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:01:45'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/2/2021 23:02:04'!
addTransactionsLinesTo: summary

	summary add: self asSummaryLine.! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:03:10'!
test10PortfolioAccountSummary

		| account anotherAccount |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:05:04' prior: 50912443!
test10PortfolioAccountSummary

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:18:50'!
test10AccountSummaryInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new

		self assert: portfolio accountSummary equals: 15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:19:09' prior: 50912480!
test10AccountSummaryInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:20:10'!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:22:16' prior: 50912496!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 30') asOrderedCollection .




	! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 23:23:39'!
addTransactionsLinesTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:23:59' prior: 50912516!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.
asd := portfolio accountSummary .
		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 30') asOrderedCollection .




	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:24:35' prior: 50912547!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio asd |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.
asd := portfolio accountSummary .
		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 40') asOrderedCollection .




	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:24:41' prior: 50912572!
test11accountSummaryInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio accountSummary equals: #('Entrada por transferencia de 5.' 'Salida por transferencia de 10.' 'Entrada por transferencia de 20.' 'Dep�sito por 50.' 'Extracci�n por 25.' 'Balance = 40') asOrderedCollection .




	! !

!methodRemoval: ReportTest #test10PortfolioAccountSummary stamp: 'jn 6/3/2021 16:05:56'!
test10PortfolioAccountSummary

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: account transferNet equals: 15.
		self assert: anotherAccount transferNet equals: -15.



	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:25:25'!
test10TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:25:30'!
test12TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	! !

!methodRemoval: ReportTest #test10TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 16:05:56'!
test10TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio accountSummary equals: #('Balance = 0') asOrderedCollection .



	!
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:25:46' prior: 50912648!
test12TransferNetInEmptyPortfolio

		| portfolio |
	
		portfolio := Portfolio new.

		self assert: portfolio transferNet equals: 0.



	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:26:22'!
test11transferNetInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio transferNet equals: 15 .




	! !
!ReportTest methodsFor: 'tests' stamp: 'jn 6/2/2021 23:26:27'!
test13transferNetInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio transferNet equals: 15 .




	! !

!methodRemoval: ReportTest #test11transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:05:56'!
test11transferNetInNonEmptyPortfolio

		| account anotherAccount portfolio |
		account := ReceptiveAccount new.
		anotherAccount := ReceptiveAccount new.
		
		Transfer from: anotherAccount to: account value: 5.
		Transfer from: account to: anotherAccount value: 10.
		Transfer from: anotherAccount to: account value: 20.
		Deposit register: 50 on: account.
		Withdraw register: 25 on: account.
		
		portfolio := Portfolio with: account.

		self assert: portfolio transferNet equals: 15 .




	!
!FormSection methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:30:49' prior: 50814657!
initializeWithTitle: aTitle withExplanation: anExplanation withColor: aColor

	| titleLayoutSpec |

	title := aTitle.
	explanation := anExplanation.

	self separation: 3.
	self color: aColor.

	titleMorph := LabelMorph
		contents: title
		font: Preferences windowTitleFont
		emphasis: 1.
	titleLayoutSpec := LayoutSpec
		fixedWidth: titleMorph morphWidth
		fixedHeight: titleMorph morphHeight.
	titleLayoutSpec offAxisEdgeWeight: 0.03.

	self addMorph: titleMorph layoutSpec: titleLayoutSpec.

	explanation isEmpty ifFalse: [
		explanationMorph := ImmutableTextModelMorph
			withText: anExplanation
			withColor: aColor
			withWidth: self fixedWidthForTexts.
		self addMorph: explanationMorph.
	].! !
!LabeledInput methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:31:07' prior: 50814774!
withLabel: aLabel withWidth: aWidth withModel: aTextModel usingAs: focusMover

	| labelLayoutSpec inputMorphLayoutSpec |

	self separation: 5.
	self layoutSpec: (LayoutSpec proportionalWidth: 0.95 fixedHeight: LabeledInput recommendedHeight).

	labelMorph := LabelMorph contents: aLabel.
	labelLayoutSpec := LayoutSpec
		fixedWidth: aWidth
		fixedHeight: labelMorph morphHeight
		offAxisEdgeWeight: #center.
	self addMorph: labelMorph layoutSpec: labelLayoutSpec.

	inputMorph := TabPassingTextModelMorph withModel: aTextModel.
	inputMorph textMorph focusMover: focusMover.
	focusMover addFocusReceiver: inputMorph textMorph.
	inputMorph hideScrollBarsIndefinitely.
	inputMorphLayoutSpec :=
		LayoutSpec
			fixedWidth: LabeledInput inputWidth * 0.7
			fixedHeight: labelMorph morphHeight + 2.
	self addMorph: inputMorph layoutSpec: inputMorphLayoutSpec.



	! !
!MessageKeywordsAndParametersTable methodsFor: 'GUI building' stamp: 'jn 6/2/2021 23:31:25' prior: 50815089!
buildColumnTitlesRowFor: inputColumnsTitles

	| columnsTitles row |

	row := LayoutMorph newRow.
	row color: self backgroundColor.
	row separation: self columnSeparation.

	columnsTitles := OrderedCollection newFrom: inputColumnsTitles.
	columnsTitles addFirst: ''.
	self needsToReorderRows ifTrue: [columnsTitles addLast: 'Change order'].
	columnsTitles withIndexDo: [:aColumnTitle :columnIndex | | columnTitleLayoutSpec titleLayout |
		titleLayout := LayoutMorph newRow.
		titleLayout color: self backgroundColor .
		titleLayout axisEdgeWeight: #center.
		titleLayout addMorph: (LabelMorph contents: aColumnTitle).
		columnTitleLayoutSpec := LayoutSpec fixedWidth: (columnWidths at: columnIndex).
		row
			addMorph: titleLayout
			layoutSpec: columnTitleLayoutSpec].

	^row

	! !
!MessageKeywordsAndParametersTable methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:31:41' prior: 50814979!
withRows: rowsTitles withColor: aColor withPreviewModel: aPreviewModel withRefactoringModel: aRefactoringModel

	| rowsSeparation recommendedHeight numberOfRows columnsTitlesRow changeOrderButtons tableWidth inputColumnsTitles |

	backgroundColor := aColor.
	rowModels := OrderedCollection new.
	previewModel := aPreviewModel.
	refactoringModel := aRefactoringModel.
	variablesToParametrize := rowsTitles.

	rowsSeparation := 4.
	self separation: rowsSeparation.

	"Calculate table height"
	numberOfRows := (rowsTitles size + 1).
	recommendedHeight :=  self rowHeight * numberOfRows + (rowsSeparation * (numberOfRows + 1)) * 1.1.

	"Calculate column widths"
	inputColumnsTitles := #('Keyword' 'Parameter name').
	columnWidths := self columnWidthsRequiredForRowTitles: rowsTitles forInputColumns: inputColumnsTitles size.

	"Calculate table width"
	tableWidth := columnWidths sum + (self columnSeparation * (columnWidths size + 1)) * 1.1.

	self layoutSpec: (LayoutSpec fixedWidth: tableWidth fixedHeight: recommendedHeight).

	"Buid the columns titles row"
	columnsTitlesRow := self buildColumnTitlesRowFor: inputColumnsTitles.
	self addMorph: columnsTitlesRow layoutSpec: self rowsLayoutSpec.

	"Build the input rows"
	rowsTitles withIndexDo: [:aRowTitle :index | | aRow changeOrderModel keywordInputMorph inputMorphLayoutSpec parameternameInputMorph |
		aRow := LayoutMorph newRow.
		aRow color: self backgroundColor; separation: self columnSeparation.

		aRow
			addMorph: (LabelMorph contents: aRowTitle)
			layoutSpec: (LayoutSpec fixedWidth: (columnWidths at: 1)).

		inputMorphLayoutSpec := LayoutSpec fixedWidth: (columnWidths at: 2) fixedHeight: self rowHeight.

		keywordInputMorph := self buildInputMorphWith: (aRefactoringModel keywordModelOf: aRowTitle).
		aRow addMorph: keywordInputMorph layoutSpec: inputMorphLayoutSpec.

		parameternameInputMorph := self buildInputMorphWith: (aRefactoringModel parameterModelOf: aRowTitle).
		aRow addMorph: parameternameInputMorph layoutSpec: inputMorphLayoutSpec.

		self needsToReorderRows ifTrue: [
			changeOrderModel := ChangeRowOrderButtonModel for: (rowsTitles size - (index - 1)) notifying: self.
			rowModels addFirst: changeOrderModel.
			changeOrderButtons := self buildChangeOrderButtonsWith: changeOrderModel.
			aRow addMorph: changeOrderButtons layoutSpec: (LayoutSpec fixedWidth: (columnWidths last))].

		self addMorph: aRow layoutSpec: self rowsLayoutSpec.
	].! !

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:56'!
Object subclass: #Summarizer
	instanceVariableNames: 'removethis account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer class methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44'!
account: aSelf removethis: aTransactions
	^self new initializeAccount: aSelf removethis: aTransactions! !
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44'!
initializeAccount: aSelf removethis: aTransactions
	removethis := aTransactions.
	account := aSelf.! !
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44'!
summarize
	
	| summary |
	
	summary := OrderedCollection  new.
	
	removethis do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:34:44' prior: 50912414!
accountSummary
	^(Summarizer account: self removethis: transactions) summarize! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 23:35:19' prior: 50912921!
accountSummary

	^(Summarizer account: self removethis: transactions) summarize! !
!Summarizer class methodsFor: 'instance creation' stamp: 'jn 6/2/2021 23:35:38'!
account: anAccount
	^self new initializeAccount: anAccount! !

!methodRemoval: Summarizer class #account:removethis: stamp: 'jn 6/3/2021 16:05:56'!
account: aSelf removethis: aTransactions
	^self new initializeAccount: aSelf removethis: aTransactions!
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:35:59'!
initializeAccount: anAccount
	account := anAccount.! !

!methodRemoval: Summarizer #initializeAccount:removethis: stamp: 'jn 6/3/2021 16:05:56'!
initializeAccount: aSelf removethis: aTransactions
	removethis := aTransactions.
	account := aSelf.!
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:36:54' prior: 50912910!
summarize
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account accountSummary
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'summary' stamp: 'jn 6/2/2021 23:37:04' prior: 50912927!
accountSummary

	^(Summarizer account: self) summarize! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:38:18'!
evaluate
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account accountSummary
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:38:18' prior: 50912966!
accountSummary

	^(Summarizer account: self) evaluate! !

!methodRemoval: Summarizer #summarize stamp: 'jn 6/3/2021 16:05:56'!
summarize
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account accountSummary
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.!
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:46:05' prior: 50912970!
evaluate
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account doOperation.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/2/2021 23:47:03'!
doOperation: summary

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:47:14' prior: 50912996!
evaluate
	
	| summary |
	
	summary := OrderedCollection  new.
	
	account doOperation: summary.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:56'!
Object subclass: #Summarizer
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:57'!
Object subclass: #Summarizer
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:57'!
Object subclass: #Summarizer
	instanceVariableNames: 'account summaryReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:57'!
Object subclass: #Summarizer
	instanceVariableNames: 'account summaryReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:52:29' prior: 50912944!
initializeAccount: anAccount
	account := anAccount.
	summaryReport := OrderedCollection new.! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:52:58' prior: 50913011!
evaluate
	
	account doOperation: summaryReport .
		
	summaryReport add: 'Balance = ', (account balance asString).
	
	^ summaryReport.! !

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:57'!
Object subclass: #Summarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:53:07' prior: 50913050!
initializeAccount: anAccount
	account := anAccount.
	summary := OrderedCollection new.! !
!Summarizer methodsFor: 'as yet unclassified' stamp: 'jn 6/2/2021 23:53:07' prior: 50913056!
evaluate
	
	account doOperation: summary .
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:53:28' prior: 50913077!
evaluate
	
	account doOperation: summary.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!Summarizer methodsFor: 'evaluating' stamp: 'jn 6/2/2021 23:53:34' prior: 50913084!
evaluate
	
	account doOperation: self.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:55:45' prior: 50912433!
addTransactionsLinesTo: summary

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:56:18' prior: 50913098!
addTransactionsLinesTo: summary

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/2/2021 23:56:34' prior: 50913103!
addTransactionsLinesTo: summary

	self subclassResponsibility.! !
!Deposit methodsFor: 'report' stamp: 'jn 6/2/2021 23:57:25' overrides: 50913108!
addTransactionsLinesTo: summary

	summary addDepositLineWithValue: self value.! !
!Withdraw methodsFor: 'report' stamp: 'jn 6/2/2021 23:57:55' overrides: 50913108!
addTransactionsLinesTo: summary

	summary addWithdrawLineWithValue: self value.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:59:15'!
addWithdrawLineWithValue: aValue

	summary add: 'Extracci�n por ', aValue asString, '.'.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/2/2021 23:59:33'!
addDepositLineWithValue: aValue

	summary add: 'Dep�sito por ', aValue asString, '.'.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:00:05'!
addDepositLegLineWithValue: aValue

	summary add: 'Entrada por transferencia de ', aValue asString, '.'.! !
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:00:18'!
addWithdrawLegLineWithValue: aValue

	summary add: 'Salida por transferencia de ', aValue asString, '.'.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/3/2021 00:00:58' prior: 50912438!
addTransactionsLinesTo: summary

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:01:15' overrides: 50913148!
addTransactionsLinesTo: summary

	summary addDepositLegLineWithValue: self value.! !
!WithdrawLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:01:36' overrides: 50913148!
addTransactionsLinesTo: summary

	summary addWithdrawLegLineWithValue: self value.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:02:37' prior: 50913004!
doOperation: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].
! !
!Deposit methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:00' prior: 50913113 overrides: 50913108!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLineWithValue: self value.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/3/2021 00:03:15' prior: 50913108!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.! !
!Withdraw methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:25' prior: 50913119 overrides: 50913178!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLineWithValue: self value.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/3/2021 00:03:31' prior: 50913148!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:39' prior: 50913153 overrides: 50913190!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLegLineWithValue: self value.! !
!WithdrawLeg methodsFor: 'report' stamp: 'jn 6/3/2021 00:03:46' prior: 50913159 overrides: 50913190!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLegLineWithValue: self value.! !

!methodRemoval: Portfolio #accountSummary stamp: 'jn 6/3/2021 16:05:57'!
accountSummary
	
	| summary |
	
	summary := OrderedCollection  new.

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].
	
	summary add: 'Balance = ', (self balance asString).
	
	^ summary.
!
!Account methodsFor: 'report' stamp: 'jn 6/3/2021 00:05:36'!
accountSummary
	
	^(Summarizer account: self) evaluate! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'jn 6/3/2021 16:05:57'!
accountSummary

	^(Summarizer account: self) evaluate!
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:06:31'!
doOperation: aSummarizer

	| transactions |
	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:07:27' prior: 50913226!
doOperation: aSummarizer

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: aSummarizer ].! !
!ReceptiveAccount methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:13:52' prior: 50912272!
transferNet
	
	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
		
! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	^ 0.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	^ self value.! !
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	self subclassResponsibility ! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31' overrides: 50913255!
affectTransferNet

	^ self value negated.! !
!AccountTransaction methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31'!
affectTransferNet

	self subclassResponsibility.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:14:31' overrides: 50913264!
affectTransferNet

	^ 0.! !

!methodRemoval: Deposit #valueForTransferNet stamp: 'jn 6/3/2021 16:05:57'!
valueForTransferNet

	^ 0.!

!methodRemoval: DepositLeg #valueForTransferNet stamp: 'jn 6/3/2021 16:05:57'!
valueForTransferNet

	^ self value.!

!methodRemoval: TransferLeg #valueForTransferNet stamp: 'jn 6/3/2021 16:05:57'!
valueForTransferNet

	self subclassResponsibility !

!methodRemoval: WithdrawLeg #valueForTransferNet stamp: 'jn 6/3/2021 16:05:57'!
valueForTransferNet

	^ self value negated.!

!methodRemoval: AccountTransaction #valueForTransferNet stamp: 'jn 6/3/2021 16:05:57'!
valueForTransferNet

	self subclassResponsibility.!

!methodRemoval: Withdraw #valueForTransferNet stamp: 'jn 6/3/2021 16:05:57'!
valueForTransferNet

	^ 0.!
!AccountTransaction methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	self subclassResponsibility.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	^ self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	^ self value negated.! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31' overrides: 50913295!
affectTransferNet: currentTransferNet

	^ 0.! !
!TransferLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:31'!
affectTransferNet: currentTransferNet

	self subclassResponsibility ! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:32' overrides: 50913295!
affectTransferNet: currentTransferNet

	^ 0.! !

!methodRemoval: AccountTransaction #affectTransferNet stamp: 'jn 6/3/2021 16:05:57'!
affectTransferNet

	self subclassResponsibility.!

!methodRemoval: DepositLeg #affectTransferNet stamp: 'jn 6/3/2021 16:05:57'!
affectTransferNet

	^ self value.!

!methodRemoval: WithdrawLeg #affectTransferNet stamp: 'jn 6/3/2021 16:05:57'!
affectTransferNet

	^ self value negated.!

!methodRemoval: Deposit #affectTransferNet stamp: 'jn 6/3/2021 16:05:57'!
affectTransferNet

	^ 0.!

!methodRemoval: TransferLeg #affectTransferNet stamp: 'jn 6/3/2021 16:05:57'!
affectTransferNet

	self subclassResponsibility !

!methodRemoval: Withdraw #affectTransferNet stamp: 'jn 6/3/2021 16:05:57'!
affectTransferNet

	^ 0.!
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:41' prior: 50913309 overrides: 50913295!
affectTransferNet: currentTransferNet

	^ currentTransferNet.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:15:55' prior: 50913318 overrides: 50913295!
affectTransferNet: currentTransferNet

	^ currentTransferNet.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:16:05' prior: 50913300 overrides: 50913313!
affectTransferNet: currentTransferNet

	^ currentTransferNet + self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:16:15' prior: 50913304 overrides: 50913313!
affectTransferNet: currentTransferNet

	^ currentTransferNet - self value.! !

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:57'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetCalculator class methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26'!
deleteme: aTransactions
	^self new initializeDeleteme: aTransactions! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26'!
initializeDeleteme: aTransactions
	transferNet := aTransactions.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26'!
evaluate
	
	^transferNet 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
		
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:18:26' prior: 50913240!
transferNet
	^(TransferNetCalculator deleteme: transactions) evaluate! !
!TransferNetCalculator class methodsFor: 'instance creation' stamp: 'jn 6/3/2021 00:19:13'!
for: aTransactions
	^self new initializeDeleteme: aTransactions! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:19:13' prior: 50913395!
transferNet
	^(TransferNetCalculator for: transactions) evaluate! !

!methodRemoval: TransferNetCalculator class #deleteme: stamp: 'jn 6/3/2021 16:05:57'!
deleteme: aTransactions
	^self new initializeDeleteme: aTransactions!
!TransferNetCalculator class methodsFor: 'instance creation' stamp: 'jn 6/3/2021 00:19:27' prior: 50913401!
for: anAccount

	^self new initializeDeleteme: anAccount! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:19:45'!
initializeFor: aTransactions
	transferNet := aTransactions.! !
!TransferNetCalculator class methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:19:45' prior: 50913418!
for: anAccount

	^self new initializeFor: anAccount! !

!methodRemoval: TransferNetCalculator #initializeDeleteme: stamp: 'jn 6/3/2021 16:05:57'!
initializeDeleteme: aTransactions
	transferNet := aTransactions.!
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:20:07' prior: 50913423!
initializeFor: anAccount
	transferNet := anAccount.! !

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:57'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:20:43' prior: 50913387!
evaluate
	
	^account 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
		
! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:20:43' prior: 50913439!
initializeFor: anAccount
	account := anAccount.! !
!TransferNetCalculator methodsFor: 'evaluating' stamp: 'jn 6/3/2021 00:21:33' prior: 50913452!
evaluate
	
	^ account doTransferNet: self.
	
		
! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:22:19'!
doTransferNet: aTransferNetCalculator

	| account |
	^account 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
! !
!ReceptiveAccount methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:22:36' prior: 50913407!
transferNet
	^(TransferNetCalculator for: self) evaluate! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:23:00' prior: 50913469!
doTransferNet: aTransferNetCalculator

	^transactions 
		inject: 0
		into: [ :currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet ].
		
! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 00:24:10' prior: 50913483!
doTransferNet: aTransferNetCalculator

	^ transactions do: [:aTransaction | aTransaction affectTransferNet: aTransferNetCalculator ].

	
		
! !
!Deposit methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:25:20' prior: 50913345 overrides: 50913295!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetDeposit: self value.! !
!Withdraw methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:25:38' prior: 50913351 overrides: 50913295!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetWithdraw: self value.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:26:40' prior: 50913357 overrides: 50913313!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetDepositLeg: self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:26:57' prior: 50913363 overrides: 50913313!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator affectTransferNetWithdrawLeg: self value.! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:27:40'!
affectTransferNetWithdrawLeg: aValue

	! !

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:58'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:58'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:27:57' prior: 50913460!
initializeFor: anAccount
	account := anAccount.
	transferNet := 0.! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:23' prior: 50913528!
affectTransferNetWithdrawLeg: aValue

	transferNet := transferNet - aValue.

	! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:31'!
affectTransferNetDepositLeg: aValue

	transferNet := transferNet + aValue.

	! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:43'!
affectTransferNetDeposit: aValue


	! !
!TransferNetCalculator methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:28:48'!
affectTransferNetWithdraw: aValue


	! !
!TransferNetCalculator methodsFor: 'evaluating' stamp: 'jn 6/3/2021 00:29:43' prior: 50913465!
evaluate
	
	account doTransferNet: self.
	^transferNet 
	
		
! !
!Portfolio methodsFor: 'transferNet' stamp: 'jn 6/3/2021 00:30:30' prior: 50912300!
transferNet

	^(TransferNetCalculator for: self) evaluate		! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:32:01'!
doTransferNet: aTransferNetCalculator

	^ accounts do: [:anAccount | anAccount affectTransferNet: aTransferNetCalculator ].
! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 00:32:56' prior: 50913586!
doTransferNet: aTransferNetCalculator

	^ accounts do: [:anAccount | anAccount doTransferNet: aTransferNetCalculator ].
! !

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:58'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summarizer category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:58'!
Report subclass: #Summarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:58'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:58'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:58'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:58'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:58'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetCalculator category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:58'!
Report subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summarizer methodsFor: 'initialization' stamp: 'jn 6/3/2021 00:35:19'!
initializeFor: anAccount
	account := anAccount.
	summary := OrderedCollection new.! !
!Summarizer class methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:35:19' prior: 50912933!
account: anAccount
	^self new initializeFor: anAccount! !

!methodRemoval: Summarizer #initializeAccount: stamp: 'jn 6/3/2021 16:05:58'!
initializeAccount: anAccount
	account := anAccount.
	summary := OrderedCollection new.!
!Summarizer class methodsFor: 'instance creation' stamp: 'jn 6/3/2021 00:36:06'!
for: anAccount
	^self new initializeFor: anAccount! !
!Account methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 00:36:06' prior: 50913217!
accountSummary
	
	^(Summarizer for: self) evaluate! !

!methodRemoval: Summarizer class #account: stamp: 'jn 6/3/2021 16:05:58'!
account: anAccount
	^self new initializeFor: anAccount!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:39:41' prior: 50913582!
transferNet

	^(TransferNetReporter for: self) evaluate		! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:39:41' prior: 50913478!
transferNet
	^(TransferNetReporter for: self) evaluate! !
!Account methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:40:24' prior: 50913685!
accountSummary
	
	^(SummaryReporter for: self) evaluate! !
!Account methodsFor: 'report' stamp: 'jn 6/3/2021 10:42:46'!
transferNet

	^(TransferNetReporter for: self) evaluate! !

!methodRemoval: Portfolio #transferNet stamp: 'jn 6/3/2021 16:05:58'!
transferNet

	^(TransferNetReporter for: self) evaluate		!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'jn 6/3/2021 16:05:58'!
transferNet
	^(TransferNetReporter for: self) evaluate!
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 10:44:43'!
doSummary: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].
! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 10:44:43'!
doSummary: aSummarizer

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: aSummarizer ].! !

!methodRemoval: ReceptiveAccount #doOperation: stamp: 'jn 6/3/2021 16:05:58'!
doOperation: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: aSummarizer ].
!

!methodRemoval: Portfolio #doOperation: stamp: 'jn 6/3/2021 16:05:58'!
doOperation: aSummarizer

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: aSummarizer ].!
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 10:47:33' prior: 50913727!
doSummary: aSummarizer

	accounts do: [ :anAccount | anAccount doSummary: aSummarizer ].! !

!methodRemoval: Portfolio #addTransactionsLinesTo: stamp: 'jn 6/3/2021 16:05:58'!
addTransactionsLinesTo: summary

	accounts do: [ :anAccount | anAccount addTransactionsLinesTo: summary ].!
!Withdraw methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	aSummarizer addWithdrawLineWithValue: self value.! !
!Deposit methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	aSummarizer addDepositLineWithValue: self value.! !
!TransferLeg methodsFor: 'summary' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	self subclassResponsibility.! !
!WithdrawLeg methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22' overrides: 50913766!
addTransactionLineTo: aSummarizer

	aSummarizer addWithdrawLegLineWithValue: self value.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionsLinesTo: summary ].
! !
!DepositLeg methodsFor: 'report' stamp: 'jn 6/3/2021 10:49:22' overrides: 50913766!
addTransactionLineTo: aSummarizer

	aSummarizer addDepositLegLineWithValue: self value.! !
!AccountTransaction methodsFor: 'summary' stamp: 'jn 6/3/2021 10:49:22'!
addTransactionLineTo: aSummarizer

	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:49:22' prior: 50912540!
addTransactionsLinesTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: summary ].
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:49:22' prior: 50913721!
doSummary: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: aSummarizer ].
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 10:49:22' prior: 50913777!
addTransactionLineTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: summary ].
! !

!methodRemoval: Withdraw #addTransactionsLinesTo: stamp: 'jn 6/3/2021 16:05:58'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLineWithValue: self value.!

!methodRemoval: Deposit #addTransactionsLinesTo: stamp: 'jn 6/3/2021 16:05:58'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLineWithValue: self value.!

!methodRemoval: TransferLeg #addTransactionsLinesTo: stamp: 'jn 6/3/2021 16:05:58'!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.!

!methodRemoval: WithdrawLeg #addTransactionsLinesTo: stamp: 'jn 6/3/2021 16:05:58'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addWithdrawLegLineWithValue: self value.!

!methodRemoval: ReceptiveAccount #addTransactionsLinesTo: stamp: 'jn 6/3/2021 16:05:58'!
addTransactionsLinesTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: summary ].
!

!methodRemoval: DepositLeg #addTransactionsLinesTo: stamp: 'jn 6/3/2021 16:05:58'!
addTransactionsLinesTo: aSummarizer

	aSummarizer addDepositLegLineWithValue: self value.!

!methodRemoval: AccountTransaction #addTransactionsLinesTo: stamp: 'jn 6/3/2021 16:05:58'!
addTransactionsLinesTo: aSummarizer

	self subclassResponsibility.!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:59'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:59'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:59'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:05:59'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:06:11'!
ERROR!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 16:06:11'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:06:21'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:06:21'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:06:50'!
ERROR!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:06:50'!
ERROR!

Report subclass: #SummaryReporter
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SummaryReporter category: 'Portfolio-Solucion' stamp: 'jn 6/3/2021 16:08:29'!
Report subclass: #SummaryReporter
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----STARTUP---- (3 June 2021 16:09:38) as /Users/joaco/Desktop/Computacion/Inge I/macos64/CuisUniversity-4532.image!


----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/macos64/Portfolio-Solucion.st----!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 16:10:23'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 16:10:23'!
PASSED!
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 16:13:07'!
doReport: aSummarizer

	accounts do: [ :anAccount | anAccount doSummary: aSummarizer ].! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 16:13:07'!
doReport: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: aSummarizer ].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:13:07' prior: 50910903!
doSummary: aSummarizer

	accounts do: [ :anAccount | anAccount doReport: aSummarizer ].! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:13:07' prior: 50911235!
evaluate
	
	account doReport: self.
		
	summary add: 'Balance = ', (account balance asString).
	
	^ summary.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:13:07' prior: 50911665!
doReport: aSummarizer

	accounts do: [ :anAccount | anAccount doReport: aSummarizer ].! !

!methodRemoval: Portfolio #doSummary: stamp: 'jn 6/3/2021 16:13:07'!
doSummary: aSummarizer

	accounts do: [ :anAccount | anAccount doReport: aSummarizer ].!

!methodRemoval: ReceptiveAccount #doSummary: stamp: 'jn 6/3/2021 16:13:07'!
doSummary: aSummarizer

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: aSummarizer ].
!
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 16:13:33' prior: 50911671!
doReport: aReporter

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: aReporter ].
! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 16:13:42' prior: 50911691!
doReport: aReporter

	accounts do: [ :anAccount | anAccount doReport: aReporter ].! !
!Portfolio methodsFor: 'report' stamp: 'jn 6/3/2021 16:14:04' prior: 50910908!
doTransferNet: aTransferNetCalculator

	accounts do: [:anAccount | anAccount doTransferNet: aTransferNetCalculator ].
! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 16:14:11'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 16:14:11'!
PASSED!
!TransferNetReporter methodsFor: 'evaluating' stamp: 'jn 6/3/2021 16:15:23' prior: 50911293!
evaluate
	
	account doReport: self.
	^transferNet 
	
		
! !

!methodRemoval: Portfolio #doTransferNet: stamp: 'jn 6/3/2021 16:15:37'!
doTransferNet: aTransferNetCalculator

	accounts do: [:anAccount | anAccount doTransferNet: aTransferNetCalculator ].
!
!ReceptiveAccount methodsFor: 'report' stamp: 'jn 6/3/2021 16:20:05' prior: 50911708!
doReport: aReporter

	transactions do: [:aTransaction | aTransaction doReport: aReporter ].
! !
!Deposit methodsFor: 'report' stamp: 'jn 6/3/2021 16:21:21'!
doReport: aReporter

	aReporter doReportForDeposit: self value.! !
!Withdraw methodsFor: 'report' stamp: 'jn 6/3/2021 16:21:45'!
doReport: aReporter

	aReporter doReportForWithdraw: self value.! !
!DepositLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 16:22:04'!
doReport: aReporter

	aReporter doReportForDepositLeg: self value.! !
!WithdrawLeg methodsFor: 'transferNet' stamp: 'jn 6/3/2021 16:22:18'!
doReport: aReporter

	aReporter doReportForWithdrawLeg: self value.! !
!TransferNetReporter methodsFor: 'initialization' stamp: 'jn 6/3/2021 16:22:42'!
doReportForDeposit: aValue


	! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:22:42' prior: 50911107 overrides: 50911044!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator doReportForDeposit: self value.! !

!methodRemoval: TransferNetReporter #affectTransferNetDeposit: stamp: 'jn 6/3/2021 16:22:42'!
affectTransferNetDeposit: aValue


	!
!TransferNetReporter methodsFor: 'initialization' stamp: 'jn 6/3/2021 16:22:55'!
doReportForWithdrawLeg: aValue

	transferNet := transferNet - aValue.

	! !
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:22:55' prior: 50911515 overrides: 50911422!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator doReportForWithdrawLeg: self value.! !

!methodRemoval: TransferNetReporter #affectTransferNetWithdrawLeg: stamp: 'jn 6/3/2021 16:22:55'!
affectTransferNetWithdrawLeg: aValue

	transferNet := transferNet - aValue.

	!
!TransferNetReporter methodsFor: 'initialization' stamp: 'jn 6/3/2021 16:23:07'!
doReportForWithdraw: aValue


	! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:23:07' prior: 50911152 overrides: 50911044!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator doReportForWithdraw: self value.! !

!methodRemoval: TransferNetReporter #affectTransferNetWithdraw: stamp: 'jn 6/3/2021 16:23:07'!
affectTransferNetWithdraw: aValue


	!
!TransferNetReporter methodsFor: 'initialization' stamp: 'jn 6/3/2021 16:23:18'!
doReportForDepositLeg: aValue

	transferNet := transferNet + aValue.

	! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:23:18' prior: 50911480 overrides: 50911422!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator doReportForDepositLeg: self value.! !

!methodRemoval: TransferNetReporter #affectTransferNetDepositLeg: stamp: 'jn 6/3/2021 16:23:18'!
affectTransferNetDepositLeg: aValue

	transferNet := transferNet + aValue.

	!
!SummaryReporter methodsFor: 'initialization' stamp: 'jn 6/3/2021 16:23:59'!
doReportForWithdraw: aValue

	summary add: 'Extracci�n por ', aValue asString, '.'.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:23:59' prior: 50911164 overrides: 50911035!
addTransactionLineTo: aSummarizer

	aSummarizer doReportForWithdraw: self value.! !

!methodRemoval: SummaryReporter #addWithdrawLineWithValue: stamp: 'jn 6/3/2021 16:23:59'!
addWithdrawLineWithValue: aValue

	summary add: 'Extracci�n por ', aValue asString, '.'.!
!SummaryReporter methodsFor: 'initialization' stamp: 'jn 6/3/2021 16:24:15'!
doReportForWithdrawLeg: aValue

	summary add: 'Salida por transferencia de ', aValue asString, '.'.! !
!WithdrawLeg methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:24:15' prior: 50911509 overrides: 50911427!
addTransactionLineTo: aSummarizer

	aSummarizer doReportForWithdrawLeg: self value.! !

!methodRemoval: SummaryReporter #addWithdrawLegLineWithValue: stamp: 'jn 6/3/2021 16:24:15'!
addWithdrawLegLineWithValue: aValue

	summary add: 'Salida por transferencia de ', aValue asString, '.'.!
!SummaryReporter methodsFor: 'initialization' stamp: 'jn 6/3/2021 16:24:35'!
doReportForDeposit: aValue

	summary add: 'Dep�sito por ', aValue asString, '.'.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:24:35' prior: 50911101 overrides: 50911035!
addTransactionLineTo: aSummarizer

	aSummarizer doReportForDeposit: self value.! !

!methodRemoval: SummaryReporter #addDepositLineWithValue: stamp: 'jn 6/3/2021 16:24:35'!
addDepositLineWithValue: aValue

	summary add: 'Dep�sito por ', aValue asString, '.'.!
!SummaryReporter methodsFor: 'initialization' stamp: 'jn 6/3/2021 16:24:48'!
doReportForDepositLeg: aValue

	summary add: 'Entrada por transferencia de ', aValue asString, '.'.! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'jn 6/3/2021 16:24:48' prior: 50911474 overrides: 50911427!
addTransactionLineTo: aSummarizer

	aSummarizer doReportForDepositLeg: self value.! !

!methodRemoval: SummaryReporter #addDepositLegLineWithValue: stamp: 'jn 6/3/2021 16:24:48'!
addDepositLegLineWithValue: aValue

	summary add: 'Entrada por transferencia de ', aValue asString, '.'.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 16:24:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 16:24:51'!
PASSED!

!methodRemoval: ReceptiveAccount #doTransferNet: stamp: 'jn 6/3/2021 16:25:25'!
doTransferNet: aTransferNetCalculator

	^ transactions do: [:aTransaction | aTransaction affectTransferNet: aTransferNetCalculator ].

	
		
!

!methodRemoval: ReceptiveAccount #addTransactionLineTo: stamp: 'jn 6/3/2021 16:25:35'!
addTransactionLineTo: summary 

	transactions do: [:aTransaction | aTransaction addTransactionLineTo: summary ].
!

!methodRemoval: Deposit #asSummaryLine stamp: 'jn 6/3/2021 16:26:20'!
asSummaryLine

	^ 'Dep�sito por ', self value asString, '.'.
		!

!methodRemoval: Deposit #affectTransferNet: stamp: 'jn 6/3/2021 16:26:24'!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator doReportForDeposit: self value.!

!methodRemoval: Deposit #addTransactionLineTo: stamp: 'jn 6/3/2021 16:26:29'!
addTransactionLineTo: aSummarizer

	aSummarizer doReportForDeposit: self value.!

!methodRemoval: Withdraw #addTransactionLineTo: stamp: 'jn 6/3/2021 16:26:35'!
addTransactionLineTo: aSummarizer

	aSummarizer doReportForWithdraw: self value.!

!methodRemoval: Withdraw #affectTransferNet: stamp: 'jn 6/3/2021 16:26:39'!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator doReportForWithdraw: self value.!

!methodRemoval: Withdraw #asSummaryLine stamp: 'jn 6/3/2021 16:26:42'!
asSummaryLine

	^ 'Extracci�n por ', self value asString, '.'.
		
!

!methodRemoval: AccountTransaction #addTransactionLineTo: stamp: 'jn 6/3/2021 16:26:47'!
addTransactionLineTo: aSummarizer

	self subclassResponsibility.!

!methodRemoval: AccountTransaction #affectTransferNet: stamp: 'jn 6/3/2021 16:26:50'!
affectTransferNet: currentTransferNet

	self subclassResponsibility.!

!methodRemoval: AccountTransaction #asSummaryLine stamp: 'jn 6/3/2021 16:26:53'!
asSummaryLine

	self subclassResponsibility.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 16:26:56'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 16:26:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 16:26:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 16:26:57'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 16:26:57'!
PASSED!
!Account methodsFor: 'report' stamp: 'jn 6/3/2021 16:27:53'!
doReport: aReporter

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'report' stamp: 'jn 6/3/2021 16:28:54'!
doReport: aReporter

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'initialization' stamp: 'jn 6/3/2021 16:29:49'!
initializeFor: aValue

	self subclassResponsibility.! !
!Report methodsFor: 'evaluating' stamp: 'jn 6/3/2021 16:31:19'!
evaluate
	
	self subclassResponsibility.! !
!Report methodsFor: 'initialization' stamp: 'jn 6/3/2021 16:31:37'!
initializeFor: anAccount
	
	self subclassResponsibility.! !
!Report methodsFor: 'report' stamp: 'jn 6/3/2021 16:32:07'!
doReportForDeposit: aDepositValue

	self subclassResponsibility.! !
!Report methodsFor: 'report' stamp: 'jn 6/3/2021 16:32:15'!
doReportForDepositLeg: aDepositLegValue

	self subclassResponsibility.! !
!Report methodsFor: 'report' stamp: 'jn 6/3/2021 16:32:27'!
doReportForWithdrawLeg: aWithdrawLegValue

	self subclassResponsibility.! !
!Report methodsFor: 'report' stamp: 'jn 6/3/2021 16:32:32'!
doReportForWithdraw: aWithdrawValue

	self subclassResponsibility.! !
!SummaryReporter methodsFor: 'report' stamp: 'jn 6/3/2021 16:32:48' prior: 50912007 overrides: 50912404!
doReportForDeposit: aDepositValue

	summary add: 'Dep�sito por ', aDepositValue asString, '.'.! !
!SummaryReporter methodsFor: 'report' stamp: 'jn 6/3/2021 16:32:57' prior: 50912025 overrides: 50912408!
doReportForDepositLeg: aDepositLegValue

	summary add: 'Entrada por transferencia de ', aDepositLegValue asString, '.'.! !
!SummaryReporter methodsFor: 'report' stamp: 'jn 6/3/2021 16:33:06' prior: 50911970 overrides: 50912418!
doReportForWithdraw: aWithdrawValue

	summary add: 'Extracci�n por ', aWithdrawValue asString, '.'.! !
!SummaryReporter methodsFor: 'report' stamp: 'jn 6/3/2021 16:33:14' prior: 50911988 overrides: 50912413!
doReportForWithdrawLeg: aWithdrawLegValue

	summary add: 'Salida por transferencia de ', aWithdrawLegValue asString, '.'.! !
!TransferNetReporter methodsFor: 'report' stamp: 'jn 6/3/2021 16:33:22' prior: 50911919 overrides: 50912413!
doReportForWithdrawLeg: aWithdrawLegValue

	transferNet := transferNet - aWithdrawLegValue.

	! !
!TransferNetReporter methodsFor: 'report' stamp: 'jn 6/3/2021 16:33:28' prior: 50911937 overrides: 50912418!
doReportForWithdraw: aWithdrawValue


	! !
!TransferNetReporter methodsFor: 'report' stamp: 'jn 6/3/2021 16:33:37' prior: 50911952 overrides: 50912408!
doReportForDepositLeg: aDepositLegValue

	transferNet := transferNet + aDepositLegValue.

	! !
!TransferNetReporter methodsFor: 'report' stamp: 'jn 6/3/2021 16:33:42' prior: 50911904 overrides: 50912404!
doReportForDeposit: aDepositValue


	! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 16:33:45'!
PASSED!

!methodRemoval: WithdrawLeg #addTransactionLineTo: stamp: 'jn 6/3/2021 16:34:03'!
addTransactionLineTo: aSummarizer

	aSummarizer doReportForWithdrawLeg: self value.!

!methodRemoval: WithdrawLeg #affectTransferNet: stamp: 'jn 6/3/2021 16:34:08'!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator doReportForWithdrawLeg: self value.!

!methodRemoval: WithdrawLeg #asSummaryLine stamp: 'jn 6/3/2021 16:34:11'!
asSummaryLine

	^ 'Salida por transferencia de ', self value asString, '.'.
!

!methodRemoval: DepositLeg #affectTransferNet: stamp: 'jn 6/3/2021 16:34:37'!
affectTransferNet: aTransferNetCalculator

	aTransferNetCalculator doReportForDepositLeg: self value.!

!methodRemoval: DepositLeg #asSummaryLine stamp: 'jn 6/3/2021 16:34:42'!
asSummaryLine

		^ 'Entrada por transferencia de ', self value asString, '.'.!

!methodRemoval: DepositLeg #addTransactionLineTo: stamp: 'jn 6/3/2021 16:34:49'!
addTransactionLineTo: aSummarizer

	aSummarizer doReportForDepositLeg: self value.!

!methodRemoval: TransferLeg #addTransactionLineTo: stamp: 'jn 6/3/2021 16:35:00'!
addTransactionLineTo: aSummarizer

	self subclassResponsibility.!

!methodRemoval: TransferLeg #asSummaryLine stamp: 'jn 6/3/2021 16:35:00'!
asSummaryLine

	self subclassResponsibility.
		!

!methodRemoval: TransferLeg #affectTransferNet: stamp: 'jn 6/3/2021 16:35:07'!
affectTransferNet: currentTransferNet

	self subclassResponsibility !
!TransferLeg methodsFor: 'report' stamp: 'jn 6/3/2021 16:35:36'!
doReport: aReporter

	self subclassResponsibility.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test01accountSummaryWithNoneTransactions stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test02accountSummaryWithDeposits stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test03accountSummaryWithDepositsAndWithdraws stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test04accountSummaryWithTransferWithdraw stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test05accountSummaryWithTransferDeposit stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test06transferNetWithNoneTransfers stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test07transferNetWithMultipleTransferDeposit stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test08transferNetWithMultipleTransactions stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test09transferNetWithMultipleTransferDepositAndWithdraw stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test10AccountSummaryInEmptyPortfolio stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test11accountSummaryInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test12TransferNetInEmptyPortfolio stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #ReportTest #test13transferNetInNonEmptyPortfolio stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #TransferTest #test01transferAffectsBalanceFromAccounts stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #TransferTest #test02receptiveAccountKnowsRegisteredTransactionLeg stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #TransferTest #test03transferHasTwoNavegableLegs stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #TransferTest #test04transferNegativeValueMustFail stamp: 'jn 6/3/2021 16:37:52'!
PASSED!

!testRun: #TransferTest #test05transferToSameAccountMustFail stamp: 'jn 6/3/2021 16:37:52'!
PASSED!