----STARTUP---- (13 June 2021 16:18:50) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!


----End fileIn of C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\TusLibros-18 actual.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'Ciro 6/13/2021 16:35:55'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'Ciro 6/13/2021 16:37:03'!
test01CreateCashier

	| cart |
	
	cart _ Cart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:37:23'!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:37:31'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:37:38'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Ciro 6/13/2021 16:46:10'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Ciro 6/13/2021 16:46:51'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:47:23' prior: 50936478!
test01CreateCashier

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:48:27'!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard ]! !

!methodRemoval: CashierTest #test01CreateCashier stamp: 'Ciro 6/13/2021 16:48:30'!
test01CreateCashier

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard ]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:48:55' prior: 50936518!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:49:17' prior: 50936537!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 16:49:17'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:49:44' prior: 50936552!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: cart isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 16:49:57'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:50:12'!
canNotCheckoutWithAnEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:50:47' prior: 50936589!
canNotCheckoutWithAnEmptyCartErrorDescription
	
	^ 'Can not checkout with an empty cart'! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 16:50:48'!
FAILURE!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:51:09'!
checkout: aCart chargingOn: aCreditCard! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:51:51' prior: 50936604!
checkout: aCart chargingOn: aCreditCard

	self new initializeToCheckout: aCart chargingOn: aCreditCard! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Ciro 6/13/2021 16:52:23'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Ciro 6/13/2021 16:52:24'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'no messages' stamp: 'Ciro 6/13/2021 16:52:18'!
initializeToCheckout: aCart chargingOn: aCreditCard

	cart _ aCart.
	creditCard _ aCreditCard ! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 16:52:33'!
FAILURE!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:53:54' prior: 50936609!
checkout: aCart chargingOn: aCreditCard

	(aCart isEmpty) ifTrue: [ self error: self canNotCheckoutWithAnEmptyCartErrorDescription ].

	self new initializeToCheckout: aCart chargingOn: aCreditCard! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 16:54:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 16:54:00'!
PASSED!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:54:45'!
assertCartNotEmpty: aCart

	^ (aCart isEmpty) ifTrue: [ self error: self canNotCheckoutWithAnEmptyCartErrorDescription ]! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:54:45' prior: 50936638!
checkout: aCart chargingOn: aCreditCard

	self assertCartNotEmpty: aCart.

	self new initializeToCheckout: aCart chargingOn: aCreditCard! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:54:55' prior: 50936654!
assertCartNotEmpty: aCart

	aCart isEmpty ifTrue: [ self error: self canNotCheckoutWithAnEmptyCartErrorDescription ]! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 16:55:20' prior: 50936661!
checkout: aCart chargingOn: aCreditCard

	self assertCartNotEmpty: aCart.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 16:55:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 16:55:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:01:51'!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:02:15' prior: 50936690!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:05:31' prior: 50936706!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard today |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	today _ DateAndTime now.
	creditCard _ CreditCard expireOn: (Month month: today monthIndex year: today yearNumber -1).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:06:15' prior: 50936723!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard today |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	today _ DateAndTime now.
	creditCard _ CreditCard expireOn: (Month month: today monthIndex -1 year: today yearNumber).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: cart isEmpty ]! !

Month!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:08:24' prior: 50936743!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard today |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	today _ DateAndTime now.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:08:29' prior: 50936763!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: cart isEmpty ]! !

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:08:30'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:08:37'!
expireOn: aDate 
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:08:57' prior: 50936803!
expireOn: aDate 
	
	^ self new initializeExpiringOn: aDate! !

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:08:59'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Ciro 6/13/2021 17:09:06'!
Object subclass: #CreditCard
	instanceVariableNames: 'date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'Ciro 6/13/2021 17:09:06'!
initializeExpiringOn: aDate 
	self shouldBeImplemented.
	date := aDate.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Ciro 6/13/2021 17:09:17'!
Object subclass: #CreditCard
	instanceVariableNames: 'date expiredDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'Ciro 6/13/2021 17:09:16' prior: 50936823!
initializeExpiringOn: aDate 
	
	expiredDate _ aDate.! !
!CreditCard methodsFor: 'initialization' stamp: 'Ciro 6/13/2021 17:09:19' prior: 50936836!
initializeExpiringOn: aDate 
	
	expiredDate _ aDate! !

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:09:20'!
FAILURE!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:10:06' prior: 50936676!
checkout: aCart chargingOn: aCreditCard

	self assertCartNotEmpty: aCart.
	
	(aCreditCard isExpired) ifTrue: [self error: self canNotCheckoutWithAnInvalidCreditCardErrorDescription]

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:10:09' prior: 50936850!
checkout: aCart chargingOn: aCreditCard

	self assertCartNotEmpty: aCart.
	
	(aCreditCard isExpired) ifTrue: [self error: self canNotCheckoutWithAnInvalidCreditCardErrorDescription].

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:10:30'!
canNotCheckoutWithAnInvalidCreditCardErrorDescription
	
	^ 'Can not checkout with an invalid credit card'! !
!CreditCard methodsFor: 'initialization' stamp: 'Ciro 6/13/2021 17:11:35'!
isExpired

	^ expiredDate < DateAndTime now! !

DateAndTime now!
!CreditCard methodsFor: 'initialization' stamp: 'Ciro 6/13/2021 17:13:12' prior: 50936878!
isExpired

	^ expiredDate < DateAndTime now date! !

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:13:17'!
FAILURE!

DateAndTime now date!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:13:58'!
FAILURE!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:14:10'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:14:12'!
FAILURE!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:14:12'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:14:30' prior: 50936782!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self deny: cart isEmpty ]! !

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:14:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 17:14:32'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:14:32'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:14:55' prior: 50936906!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:14:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 17:14:56'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:14:56'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:15:01' prior: 50936571!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription]! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 17:15:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 17:15:01'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:15:01'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:15:20' prior: 50936934!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:26:02'!
assertValidCreditCard: aCreditCard

	^ (aCreditCard isExpired) ifTrue: [self error: self canNotCheckoutWithAnInvalidCreditCardErrorDescription]! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:26:02' prior: 50936861!
checkout: aCart chargingOn: aCreditCard

	self assertCartNotEmpty: aCart.
	
	self assertValidCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:26:08' prior: 50937001!
assertValidCreditCard: aCreditCard

	^ aCreditCard isExpired ifTrue: [self error: self canNotCheckoutWithAnInvalidCreditCardErrorDescription]! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:26:10' prior: 50937018!
assertValidCreditCard: aCreditCard

	aCreditCard isExpired ifTrue: [self error: self canNotCheckoutWithAnInvalidCreditCardErrorDescription]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:27:04'!
test03CalculateCartCheckoutIsCorrect

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:28:34'!
test03CalculateCheckoutIsCorrect

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !

!methodRemoval: CashierTest #test03CalculateCartCheckoutIsCorrect stamp: 'Ciro 6/13/2021 17:28:37'!
test03CalculateCartCheckoutIsCorrect

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:29:11' prior: 50937049!
test03CalculateCheckoutIsCorrect

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date tomorrow ).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:29:12' prior: 50937082!
test03CalculateCheckoutIsCorrect

	| cart creditCard |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:32:36' prior: 50937099!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier |
	
	cart _ Cart acceptingItemsOf: self defaultCatalog.
	cart add: 3 of: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard.
	
	self assert: cashier checkOut equals: 0! !

Object subclass: #StoreTestSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestSimulator category: 'TusLibros' stamp: 'Ciro 6/13/2021 17:37:08'!
Object subclass: #StoreTestSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestSimulator methodsFor: 'no messages' stamp: 'Ciro 6/13/2021 17:37:17'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!StoreTestSimulator methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:37:25'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!StoreTestSimulator methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:37:33'!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestSimulator methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:39:09' prior: 50937140!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemNotSellByTheStorePrice! !
!StoreTestSimulator methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:39:19'!
itemNotSellByTheStorePrice

	^ 10! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:40:31' prior: 50936961!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard storeTestSimulator |
	
	storeTestSimulator _ StoreTestSimulator new.
	cart _ Cart acceptingItemsOf: storeTestSimulator defaultCatalog.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:40:47' prior: 50936985!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard storeTestSimulator|
	
	storeTestSimulator _ StoreTestSimulator new.
	cart _ Cart acceptingItemsOf: storeTestSimulator defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:40:48' prior: 50937184!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard storeTestSimulator |
	
	storeTestSimulator _ StoreTestSimulator new.
	cart _ Cart acceptingItemsOf: storeTestSimulator defaultCatalog.
	cart add: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !

!methodRemoval: CashierTest #defaultCatalog stamp: 'Ciro 6/13/2021 17:40:54'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CashierTest #itemNotSellByTheStore stamp: 'Ciro 6/13/2021 17:40:57'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'Ciro 6/13/2021 17:41:00'!
itemSellByTheStore
	
	^ 'validBook'!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 17:41:02'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:41:04'!
ERROR!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:41:04'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 17:41:12'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:41:19' prior: 50937203!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard storeTestSimulator |
	
	storeTestSimulator _ StoreTestSimulator new.
	cart _ Cart acceptingItemsOf: storeTestSimulator defaultCatalog.
	cart add: storeTestSimulator itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:41:21'!
ERROR!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:41:21'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Ciro 6/13/2021 17:42:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Ciro 6/13/2021 17:42:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Ciro 6/13/2021 17:42:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Ciro 6/13/2021 17:42:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Ciro 6/13/2021 17:42:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Ciro 6/13/2021 17:42:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Ciro 6/13/2021 17:42:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Ciro 6/13/2021 17:42:28'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:42:41'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'Ciro 6/13/2021 17:43:26' prior: 50936303!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Ciro 6/13/2021 17:43:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Ciro 6/13/2021 17:43:34'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Ciro 6/13/2021 17:43:34'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Ciro 6/13/2021 17:43:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Ciro 6/13/2021 17:43:34'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Ciro 6/13/2021 17:43:34'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Ciro 6/13/2021 17:43:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Ciro 6/13/2021 17:43:34'!
ERROR!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:43:50'!
ERROR!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:43:50'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 17:44:34'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:44:36'!
ERROR!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:44:36'!
ERROR!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:44:58'!
ERROR!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:46:33'!
ERROR!
!StoreTestSimulator methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:47:20' prior: 50937155!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemNotSellByTheStorePrice;
		yourself ! !

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:47:23'!
PASSED!
!StoreTestSimulator methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:49:18'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:49:42' prior: 50937167!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard storeTestSimulator |
	
	storeTestSimulator _ StoreTestSimulator new.
	cart _ StoreTestSimulator createCart.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:49:49' prior: 50937375!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard storeTestSimulator |
	
	storeTestSimulator _ StoreTestSimulator new.
	cart _ storeTestSimulator createCart.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:50:03' prior: 50937248!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard storeTestSimulator |
	
	storeTestSimulator _ StoreTestSimulator new.
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 17:50:04'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:50:06'!
PASSED!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'Ciro 6/13/2021 17:51:41'!
TestCase subclass: #CartTest
	instanceVariableNames: 'storeTestSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'support' stamp: 'Ciro 6/13/2021 17:51:39' overrides: 16927572!
setUp

	storeTestSimulator _ StoreTestSimulator new! !
!CartTest methodsFor: 'tests' stamp: 'Ciro 6/13/2021 17:51:47' prior: 50936405!
test01NewCartsAreCreatedEmpty

	self assert: storeTestSimulator createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'Ciro 6/13/2021 17:51:49' prior: 50936383!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := storeTestSimulator createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'Ciro 6/13/2021 17:51:54' prior: 50936410!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := storeTestSimulator createCart.
	
	cart add: storeTestSimulator itemSellByTheStore.
	self deny: cart isEmpty ! !

!methodRemoval: CartTest #createCart stamp: 'Ciro 6/13/2021 17:51:58'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'Ciro 6/13/2021 17:52:02'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'Ciro 6/13/2021 17:52:06'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'Ciro 6/13/2021 17:52:09'!
itemSellByTheStore
	
	^ 'validBook'!
!CartTest methodsFor: 'tests' stamp: 'Ciro 6/13/2021 17:52:14' prior: 50937450!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := storeTestSimulator createCart.
	
	self 
		should: [ cart add: storeTestSimulator itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'Ciro 6/13/2021 17:52:19' prior: 50936370!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := storeTestSimulator createCart.
	
	self 
		should: [cart add: 0 of: storeTestSimulator itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'Ciro 6/13/2021 17:52:22' prior: 50936425!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := storeTestSimulator createCart.
	
	self 
		should: [cart add: 2 of: storeTestSimulator itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'Ciro 6/13/2021 17:52:27' prior: 50936438!
test06CartRemembersAddedItems

	| cart |
	
	cart := storeTestSimulator createCart.
	
	cart add: storeTestSimulator itemSellByTheStore.
	self assert: (cart includes: storeTestSimulator itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'Ciro 6/13/2021 17:52:30' prior: 50936418!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := storeTestSimulator createCart.
	
	self deny: (cart includes: storeTestSimulator itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'Ciro 6/13/2021 17:52:34' prior: 50936396!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := storeTestSimulator createCart.
	
	cart add: 2 of: storeTestSimulator itemSellByTheStore.
	self assert: (cart occurrencesOf: storeTestSimulator itemSellByTheStore) = 2! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Ciro 6/13/2021 17:52:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Ciro 6/13/2021 17:52:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Ciro 6/13/2021 17:52:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Ciro 6/13/2021 17:52:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Ciro 6/13/2021 17:52:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Ciro 6/13/2021 17:52:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Ciro 6/13/2021 17:52:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Ciro 6/13/2021 17:52:36'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:53:20' prior: 50937391!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard storeTestSimulator1 |
	
	storeTestSimulator1 _ StoreTestSimulator new.
	cart _ storeTestSimulator1 createCart.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:53:28' prior: 50937407!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard storeTestSimulator1 |
	
	storeTestSimulator1 _ StoreTestSimulator new.
	cart _ storeTestSimulator1 createCart.
	cart add: storeTestSimulator1 itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'Ciro 6/13/2021 17:53:50'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'storeTestSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:53:49' overrides: 16927572!
setUp

	storeTestSimulator _ StoreTestSimulator new! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:54:02' prior: 50937583!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard |
	
	cart _ storeTestSimulator createCart.
	creditCard _ CreditCard new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:54:09' prior: 50937599!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard  ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 17:54:12'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:54:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:54:27' prior: 50937116!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: self itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard.
	
	self assert: cashier checkOut equals: 0! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:54:29' prior: 50937669!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard.
	
	self assert: cashier checkOut equals: 0! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:54:45' prior: 50937682!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard.
	
	self assert: cashier checkOut equals: 30! !

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/13/2021 17:54:46'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:54:53'!
checkOut
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 17:55:12' prior: 50937711!
checkOut

	^ 30! !

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/13/2021 17:55:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 17:55:16'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 17:55:16'!
PASSED!

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/13/2021 17:55:16'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:00:57'!
test03ValidCheckoutRegistersASale

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	
	self assert: cashier checkOut equals: 30! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:01:39'!
initializeToCheckout: aCart chargingOn: aCreditCard registerOn: aSalesSequence

	cart _ aCart.
	creditCard _ aCreditCard ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:01:47' prior: 50937748!
initializeToCheckout: aCart chargingOn: aCreditCard registerOn: aSalesCollection

	cart _ aCart.
	creditCard _ aCreditCard ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Ciro 6/13/2021 18:02:43'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:02:42' prior: 50937755!
initializeToCheckout: aCart chargingOn: aCreditCard registerOn: aSalesCollection

	cart _ aCart.
	creditCard _ aCreditCard.
	salesCollection _ aSalesCollection! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:03:01' prior: 50937695!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard.
	
	self assert: cashier checkOut equals: 30! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:03:20' prior: 50937779!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard.
	
	self assert: cashier checkOut equals: 30! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:03:28' prior: 50937793!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	
	self assert: cashier checkOut equals: 30! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:03:48'!
checkout: aCart chargingOn: aCreditCard registerOn: aSalesCollecion

	self assertCartNotEmpty: aCart.
	
	self assertValidCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:03:54' prior: 50937823!
checkout: aCart chargingOn: aCreditCard registerOn: aSalesCollecion

	self assertCartNotEmpty: aCart.
	
	self assertValidCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard registerOn: aSalesCollecion! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:04:36' prior: 50937645!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:04:52' prior: 50937631!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	creditCard _ CreditCard new.
	sales _ OrderedCollection new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription]! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 18:04:54'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 18:04:56'!
PASSED!

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/13/2021 18:04:57'!
PASSED!

!testRun: #CashierTest #test03ValidCheckoutRegistersASale stamp: 'Ciro 6/13/2021 18:04:58'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:05:25' prior: 50937733!
test03ValidCheckoutRegistersASale

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	
	self assert: cashier checkOut equals: 30.
	self deny: sales isEmpty! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:06:53' prior: 50937892!
test03ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self deny: sales first .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:06:57' prior: 50937908!
test03ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self deny: sales first.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:07:44' prior: 50937925!
test03ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: (total + sales first).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:07:45' prior: 50937942!
test03ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: (total = sales first).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:07:48' prior: 50937959!
test03ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !

!testRun: #CashierTest #test03ValidCheckoutRegistersASale stamp: 'Ciro 6/13/2021 18:07:54'!
FAILURE!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Ciro 6/13/2021 18:08:54'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesCollection total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:08:50' prior: 50937716!
checkOut

	self calculateTotal.
	self registerSale.
	
	^ total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:09:08'!
calculateTotal

	total _ cart total! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:09:25'!
registerSale

	^ salesCollection add: total! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:09:42' prior: 50938013!
registerSale

	salesCollection add: total! !
!Cart methodsFor: 'queries' stamp: 'Ciro 6/13/2021 18:11:12'!
total

	^ items sum: [ :anItem | catalog at: anItem ]! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 18:11:40'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 18:11:41'!
PASSED!

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/13/2021 18:11:43'!
PASSED!

!testRun: #CashierTest #test03ValidCheckoutRegistersASale stamp: 'Ciro 6/13/2021 18:11:45'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Ciro 6/13/2021 18:11:51'!
test04ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !

!methodRemoval: CashierTest #test03ValidCheckoutRegistersASale stamp: 'Ciro 6/13/2021 18:11:54'!
test03ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 18:11:59'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 18:11:59'!
PASSED!

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/13/2021 18:11:59'!
PASSED!

!testRun: #CashierTest #test04ValidCheckoutRegistersASale stamp: 'Ciro 6/13/2021 18:11:59'!
PASSED!

!methodRemoval: Cashier class #checkout:chargingOn: stamp: 'Ciro 6/13/2021 18:14:57'!
checkout: aCart chargingOn: aCreditCard

	self assertCartNotEmpty: aCart.
	
	self assertValidCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard!

!methodRemoval: Cashier #initializeToCheckout:chargingOn: stamp: 'Ciro 6/13/2021 18:15:14'!
initializeToCheckout: aCart chargingOn: aCreditCard

	cart _ aCart.
	creditCard _ aCreditCard !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/13/2021 18:16:04'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/13/2021 18:16:04'!
PASSED!

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/13/2021 18:16:04'!
PASSED!

!testRun: #CashierTest #test04ValidCheckoutRegistersASale stamp: 'Ciro 6/13/2021 18:16:04'!
PASSED!

----SNAPSHOT----(13 June 2021 18:19:07) CuisUniversity-4532.image priorSource: 19347980!

----QUIT----(13 June 2021 18:19:13) CuisUniversity-4532.image priorSource: 19406783!

----STARTUP---- (14 June 2021 18:51:49) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!


----QUIT----(14 June 2021 20:00:31) CuisUniversity-4532.image priorSource: 19406873!

----STARTUP---- (14 June 2021 19:18:50) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!


----QUIT----(14 June 2021 20:00:36) CuisUniversity-4532.image priorSource: 19406873!

----STARTUP---- (15 June 2021 14:59:10) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!


----QUIT----(15 June 2021 14:59:20) CuisUniversity-4532.image priorSource: 19406873!

----STARTUP---- (15 June 2021 16:49:02) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!

!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 16:51:21'!
numbered: aNumber owner: anOwner expireOn: aDate 
	
	^ self new initializeExpiringOn: aDate! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 16:59:21' prior: 50938137!
numbered: aNumber owner: anOwner expireOn: aDate 
	
	(aNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self invalidNumberOfDigitsOfCreditCardErrorDescription].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: self invalidOwnerOfCreditCardErrorDescription].
	
	^ self new initializeWithNumber: aNumber owner: anOwner expiringOn: aDate! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 16:59:57'!
invalidNumberOfDigitsOfCreditCardErrorDescription

	^ 'Invalid number of digits of credit card'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:00:20'!
invalidOwnerOfCreditCardErrorDescription

	^ 'Invalid owner of credit card'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:01:08'!
assertNumberOfDigits: aNumber

	^ (aNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self invalidNumberOfDigitsOfCreditCardErrorDescription]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:01:08' prior: 50938144!
numbered: aNumber owner: anOwner expireOn: aDate 
	
	self assertNumberOfDigits: aNumber.
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: self invalidOwnerOfCreditCardErrorDescription].
	
	^ self new initializeWithNumber: aNumber owner: anOwner expiringOn: aDate! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:01:37' prior: 50938178!
numbered: aNumber owner: anOwner expireOn: aDate 
	
	(aNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self invalidNumberOfDigitsOfCreditCardErrorDescription].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: self invalidOwnerOfCreditCardErrorDescription].
	
	^ self new initializeWithNumber: aNumber owner: anOwner expiringOn: aDate! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:02:16' prior: 50938164!
invalidOwnerOfCreditCardErrorDescription

	^ 'Invalid owner of credit card'! !

----STARTUP---- (15 June 2021 17:03:30) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!

!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:04:20'!
numbered: aNumber owner: anOwnder expireOn: aDate 
	
	^ self new initializeExpiringOn: aDate! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:04:39' prior: 50938215!
numbered: aNumber owner: anOwner expireOn: aDate 
	
	^ self new initializeWithNumber: aNumber ownder: anOwner ExpiringOn: aDate! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:05:11' prior: 50938222!
numbered: aNumber owner: anOwner expireOn: aDate 

	self assertNumberOfDigits: aNumber.
	self assertOwner: anOwner.
	
	^ self new initializeWithNumber: aNumber owner: anOwner ExpiringOn: aDate! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:06:01'!
assertNumberOfDigits: aNumber

	(aNumber numberOfDigitsInBase: 10) = 16 ifFalse: [self error: self invalidNumberOfDigitsOfCreditCardErrorDescription]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:06:25'!
invalidNumberOfDigitsOfCreditCardErrorDescription

	^ 'Invalid number of digits of credit card'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:07:38'!
invalidOwnerOfCreditCardErrorDescription

	^ 'Invalid owner of creditc ard'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:08:18'!
assertOwner: anOwner

	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: self invalidOwnerOfCreditCardErrorDescription ]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:08:34' prior: 50938230!
numbered: aNumber owner: anOwner expireOn: aDate 

	self assertNumberOfDigits: aNumber.
	self assertOwner: anOwner.
	
	^ self new initializeWithNumber: aNumber owner: anOwner expiringOn: aDate! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Ciro 6/15/2021 17:08:57'!
Object subclass: #CreditCard
	instanceVariableNames: 'date expiredDate number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Ciro 6/15/2021 17:08:57'!
Object subclass: #CreditCard
	instanceVariableNames: 'date expiredDate number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'Ciro 6/15/2021 17:08:55'!
initializeWithNumber: aNumber owner: anOwner expiringOn: aDate
	
	number _ aNumber.
	owner _ anOwner.
	expiredDate _ aDate! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:10:09' prior: 50937863!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	creditCard _ CreditCard new.
	sales _ OrderedCollection new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:10:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:10:11'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/15/2021 17:10:11'!
PASSED!

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:10:11'!
PASSED!

!testRun: #CashierTest #test04ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:10:11'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:10:25' prior: 50937844!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date yesterday).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/15/2021 17:10:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:10:26'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/15/2021 17:10:26'!
PASSED!

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:10:26'!
PASSED!

!testRun: #CashierTest #test04ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:10:26'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:10:40' prior: 50937808!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ CreditCard expireOn: (Date tomorrow).
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	
	self assert: cashier checkOut equals: 30.
	self deny: sales isEmpty! !

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:10:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:10:41'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/15/2021 17:10:41'!
PASSED!

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:10:41'!
PASSED!

!testRun: #CashierTest #test04ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:10:41'!
PASSED!
!StoreTestSimulator methodsFor: 'items' stamp: 'Ciro 6/15/2021 17:13:06'!
createCreditCardWithNumber: aNumber owner: anOwner expireDate: aDate
	
	^ CreditCard numbered: aNumber owner: anOwner expireOn: aDate! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:14:03' prior: 50938298!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime today.
	sales _ OrderedCollection new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:14:36' prior: 50938331!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime yesterday .
	
	self should: [ Cashier checkout: cart chargingOn: creditCard registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:14:45' prior: 50938424!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime yesterday.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:15:09' prior: 50938367!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime tomorrow.
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	
	self assert: cashier checkOut equals: 30.
	self deny: sales isEmpty! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:15:17' prior: 50938040!
test04ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime tomorrow.
	cashier _ Cashier checkout: cart chargingOn: creditCard registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'Ciro 6/15/2021 17:15:25'!
initializeExpiringOn: aDate 
	
	expiredDate _ aDate!

!methodRemoval: CreditCard class #expireOn: stamp: 'Ciro 6/15/2021 17:15:30'!
expireOn: aDate 
	
	^ self new initializeExpiringOn: aDate!
!CreditCard methodsFor: 'expired' stamp: 'Ciro 6/15/2021 17:15:51'!
isExpiredOn: aDate

	^ expiredDate < aDate! !
!Cashier class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:16:25'!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion

	self assertCartNotEmpty: aCart.
	
	self assertValidCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Ciro 6/15/2021 17:16:42'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesCollection total date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'Ciro 6/15/2021 17:16:41'!
initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollection

	cart _ aCart.
	creditCard _ aCreditCard.
	date _ aDate.
	salesCollection _ aSalesCollection! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:17:07' prior: 50938405!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime today.
	sales _ OrderedCollection new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard on: DateAndTime today registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:17:16' prior: 50938543!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime today.
	sales _ OrderedCollection new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:17:20' prior: 50938445!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime yesterday.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:17:23' prior: 50938466!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime tomorrow.
	cashier _ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales.
	
	self assert: cashier checkOut equals: 30.
	self deny: sales isEmpty! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:17:26' prior: 50938484!
test04ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime tomorrow.
	cashier _ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !

!methodRemoval: Cashier class #checkout:chargingOn:registerOn: stamp: 'Ciro 6/15/2021 17:17:33'!
checkout: aCart chargingOn: aCreditCard registerOn: aSalesCollecion

	self assertCartNotEmpty: aCart.
	
	self assertValidCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard registerOn: aSalesCollecion!

!methodRemoval: Cashier #initializeToCheckout:chargingOn:registerOn: stamp: 'Ciro 6/15/2021 17:17:38'!
initializeToCheckout: aCart chargingOn: aCreditCard registerOn: aSalesCollection

	cart _ aCart.
	creditCard _ aCreditCard.
	salesCollection _ aSalesCollection!
!Cashier class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:17:51' prior: 50938515!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion

	self assertCartNotEmpty: aCart.
	
	self assertValidCreditCard: aCreditCard on: aDate.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion! !
!Cashier class methodsFor: 'assertion' stamp: 'Ciro 6/15/2021 17:18:00'!
assertValidCreditCard: aCreditCard on: aDate

	aCreditCard isExpired ifTrue: [self error: self canNotCheckoutWithAnInvalidCreditCardErrorDescription]! !

!methodRemoval: Cashier class #assertValidCreditCard: stamp: 'Ciro 6/15/2021 17:18:03'!
assertValidCreditCard: aCreditCard

	aCreditCard isExpired ifTrue: [self error: self canNotCheckoutWithAnInvalidCreditCardErrorDescription]!
!Cashier class methodsFor: 'assertion' stamp: 'Ciro 6/15/2021 17:18:15' prior: 50938674!
assertValidCreditCard: aCreditCard on: aDate

	aCreditCard isExpiredOn: aDate ifTrue: [self error: self canNotCheckoutWithAnInvalidCreditCardErrorDescription]! !
!Cashier class methodsFor: 'assertion' stamp: 'Ciro 6/15/2021 17:18:29' prior: 50938689!
assertValidCreditCard: aCreditCard on: aDate

	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self canNotCheckoutWithAnInvalidCreditCardErrorDescription]! !

!methodRemoval: CreditCard #isExpired stamp: 'Ciro 6/15/2021 17:18:52'!
isExpired

	^ expiredDate < DateAndTime now date!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:19:04'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/15/2021 17:19:04'!
PASSED!

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:19:04'!
PASSED!

!testRun: #CashierTest #test04ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:19:04'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:24:47' prior: 50938563!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: DateAndTime today.
	sales _ OrderedCollection new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !
!CreditCard methodsFor: 'expired' stamp: 'Ciro 6/15/2021 17:24:52' prior: 50938511!
isExpiredOn: aDate

	^ expiredDate < (Month month: aDate monthIndex year: aDate yearNumber) start! !
!CreditCard methodsFor: 'expired' stamp: 'Ciro 6/15/2021 17:25:40' prior: 50938742!
isExpiredOn: aDate

	^ expiredDate start < (Month month: aDate monthIndex year: aDate yearNumber) start! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:26:32' prior: 50938583!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:26:46' prior: 50938605!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1).
	cashier _ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales.
	
	self assert: cashier checkOut equals: 30.
	self deny: sales isEmpty! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:26:49' prior: 50938624!
test04ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1).
	cashier _ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:26:54' prior: 50938722!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1).
	sales _ OrderedCollection new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:27:00'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/15/2021 17:27:00'!
PASSED!

!testRun: #CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:27:00'!
PASSED!

!testRun: #CashierTest #test04ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:27:00'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:27:33'!
test02CanNotCheckoutWithAnExpiredCreditCard

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !

!methodRemoval: CashierTest #test02CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/15/2021 17:27:43'!
test02CanNotCheckoutWithAnInvalidCreditCard

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1).
	
	self should: [ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 17:27:44'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:28:03'!
test06CalculateCheckoutIsCorrect

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1).
	cashier _ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales.
	
	self assert: cashier checkOut equals: 30.
	self deny: sales isEmpty! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:28:06'!
test07ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1).
	cashier _ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !

!methodRemoval: CashierTest #test04ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:28:10'!
test04ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1).
	cashier _ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.!

!methodRemoval: CashierTest #test03CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:28:13'!
test03CalculateCheckoutIsCorrect

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1).
	cashier _ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales.
	
	self assert: cashier checkOut equals: 30.
	self deny: sales isEmpty!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:30:23'!
test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator createCreditCardWithNumber: 1111111111111111 owner: 'Ciro' expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1).
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: (storeTestSimulator 
				createCreditCardWithNumber: 1111111111111111 
				owner: 'Ciro' 
				expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1)) 
				on: (DateAndTime today) 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:31:46' prior: 50938989!
test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: (storeTestSimulator 
				createCreditCardWithNumber: 1111111111111111 
				owner: 'Ciro' 
				expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1)) 
				on: (DateAndTime today) 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:31:50' prior: 50939020!
test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: (storeTestSimulator 
				createCreditCardWithNumber: 1111111111111111 
				owner: 'Ciro' 
				expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1)) 
				on: (DateAndTime today) 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:32:31'!
validCreditCard
	
	^ CreditCard numbered: 1111111111111111 owner: 'Ciro' expireOn: 1! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:32:57' prior: 50939069!
validCreditCard
	
	^ CreditCard numbered: 1111111111111111 owner: 'Ciro' expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:33:07' prior: 50938906!
test06CalculateCheckoutIsCorrect

	| cart creditCard cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator validCreditCard.
	cashier _ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales.
	
	self assert: cashier checkOut equals: 30.
	self deny: sales isEmpty! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:33:11' prior: 50938926!
test07ValidCheckoutRegistersASale

	| cart creditCard cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator validCreditCard.
	cashier _ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:33:15' prior: 50938820!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	creditCard _ storeTestSimulator validCreditCard.
	sales _ OrderedCollection new.
	
	self should: [ Cashier checkout: cart chargingOn: creditCard on: (DateAndTime today) registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:33:49' prior: 50939116!
test01CanNotCheckoutWithAnEmptyCart

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	creditCard _ storeTestSimulator validCreditCard.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: storeTestSimulator createCart 
			chargingOn: storeTestSimulator validCreditCard 
			on: DateAndTime today 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:33:57' prior: 50939134!
test01CanNotCheckoutWithAnEmptyCart

	| sales |
	
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: storeTestSimulator createCart 
			chargingOn: storeTestSimulator validCreditCard 
			on: DateAndTime today 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:34:29' prior: 50939083!
test06CalculateCheckoutIsCorrect

	| cart cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: storeTestSimulator validCreditCard
		on: DateAndTime today 
		registerOn: sales.
	
	self assert: cashier checkOut equals: 30.
	self deny: sales isEmpty! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:34:55' prior: 50939099!
test07ValidCheckoutRegistersASale

	| cart cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: storeTestSimulator validCreditCard 
		on: DateAndTime today 
		registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:35:51' prior: 50938855!
test02CanNotCheckoutWithAnExpiredCreditCard

	| cart creditCard sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator 
		createCreditCardWithNumber: 1111111111111111 
		owner: 'Ciro' 
		expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1).
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: creditCard 
			on: (DateAndTime today) 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:36:09'!
expiredCreditCard
	
	^ CreditCard numbered: 1111111111111111 owner: 'Ciro' expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1)! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:36:42' prior: 50939201!
test02CanNotCheckoutWithAnExpiredCreditCard

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator expiredCreditCard
			on: (DateAndTime today) 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 17:36:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:36:43'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 17:36:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 17:36:43'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:36:43'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:36:43'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:37:05' prior: 50939045!
test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: (storeTestSimulator 
				createCreditCardWithNumber: 1111111111111111 
				owner: 'Ciro' 
				expireDate: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1)) 
				on: (DateAndTime today) 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:37:43'!
creditCardWithInvalidNumberOfDigits
	
	^ CreditCard 
		numbered: 1 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:37:49' prior: 50939226!
expiredCreditCard
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1)! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:37:57' prior: 50939075!
validCreditCard
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:38:35'!
creditCardWithInvalidOwner
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: '' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:38:56' prior: 50939274!
test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator creditCardWithInvalidNumberOfDigits 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:39:16' prior: 50939334!
test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator creditCardWithInvalidNumberOfDigits 
			on: (DateAndTime today) 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:39:36' prior: 50939353!
test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator creditCardWithInvalidNumberOfDigits 
			on: (DateAndTime today) 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberOfDigitsOfCreditCardErrorDescription .
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 17:39:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:39:37'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 17:39:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 17:39:37'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:39:37'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:39:37'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:39:42' prior: 50939373!
test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator creditCardWithInvalidNumberOfDigits 
			on: DateAndTime today
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberOfDigitsOfCreditCardErrorDescription .
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:39:47' prior: 50939234!
test02CanNotCheckoutWithAnExpiredCreditCard

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator expiredCreditCard
			on: DateAndTime today
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnInvalidCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:40:11'!
test04CanNotCheckoutWithACreditCardWithInvalidOwner

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator creditCardWithInvalidOwner
			on: DateAndTime today
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidOwnerOfCreditCardErrorDescription.
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 17:40:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:40:12'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 17:40:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 17:40:12'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 17:40:12'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:40:12'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:40:12'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:41:19'!
test05CanNotCheckoutWithAStolenCreditCard

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator stolenCreditCard
			on: DateAndTime today
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidOwnerOfCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:41:43' prior: 50939496!
test05CanNotCheckoutWithAStolenCreditCard

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator stolenCreditCard
			on: DateAndTime today
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnStolenCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!Cashier class methodsFor: 'assertion' stamp: 'Ciro 6/15/2021 17:42:11'!
assertNotExpiredCreditCard: aCreditCard on: aDate

	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self canNotCheckoutWithAnExpiredCreditCardErrorDescription]! !
!Cashier class methodsFor: 'error description' stamp: 'Ciro 6/15/2021 17:42:25'!
canNotCheckoutWithAnExpiredCreditCardErrorDescription
	
	^ 'Can not checkout with an expired credit card'! !
!Cashier class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:42:35' prior: 50938663!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion

	self assertCartNotEmpty: aCart.
	
	self assertNotExpiredCreditCard: aCreditCard on: aDate.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion! !

!methodRemoval: Cashier class #assertValidCreditCard:on: stamp: 'Ciro 6/15/2021 17:42:40'!
assertValidCreditCard: aCreditCard on: aDate

	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: self canNotCheckoutWithAnInvalidCreditCardErrorDescription]!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 17:43:00' prior: 50939434!
test02CanNotCheckoutWithAnExpiredCreditCard

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator expiredCreditCard
			on: DateAndTime today
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnExpiredCreditCardErrorDescription.
			self assert: sales isEmpty]! !

!methodRemoval: Cashier class #canNotCheckoutWithAnInvalidCreditCardErrorDescription stamp: 'Ciro 6/15/2021 17:43:09'!
canNotCheckoutWithAnInvalidCreditCardErrorDescription
	
	^ 'Can not checkout with an invalid credit card'!
!Cashier class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:43:30' prior: 50939549!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion

	self assertCartNotEmpty: aCart.
	
	self assertNotExpiredCreditCard: aCreditCard on: aDate.

	self assertNotStolenCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion! !
!Cashier class methodsFor: 'assertion' stamp: 'Ciro 6/15/2021 17:43:56'!
assertNotStolenCreditCard: aCreditCard

	(aCreditCard isStolen) ifTrue: [self error: self canNotCheckoutWithAnStolenCreditCardErrorDescription]! !
!Cashier class methodsFor: 'error description' stamp: 'Ciro 6/15/2021 17:44:09'!
canNotCheckoutWithAnStolenCreditCardErrorDescription
	
	^ 'Can not checkout with an stolen credit card'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 17:47:33'!
numbered: aNumber owner: anOwner expireOn: aDate stolen: aBoolean

	self assertNumberOfDigits: aNumber.
	self assertOwner: anOwner.
	
	^ self new initializeWithNumber: aNumber owner: anOwner expiringOn: aDate stolen: aBoolean! !
!CreditCard methodsFor: 'initialization' stamp: 'Ciro 6/15/2021 17:47:44'!
initializeWithNumber: aNumber owner: anOwner expiringOn: aDate stolen: aBoolean
	
	number _ aNumber.
	owner _ anOwner.
	expiredDate _ aDate! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Ciro 6/15/2021 17:47:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'date expiredDate number owner stolen'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'Ciro 6/15/2021 17:47:51' prior: 50939633!
initializeWithNumber: aNumber owner: anOwner expiringOn: aDate stolen: aBoolean
	
	number _ aNumber.
	owner _ anOwner.
	expiredDate _ aDate.
	stolen _ aBoolean.! !
!CreditCard methodsFor: 'stolen' stamp: 'Ciro 6/15/2021 17:48:23'!
isStolen

	^ stolen! !

!methodRemoval: StoreTestSimulator #createCreditCardWithNumber:owner:expireDate: stamp: 'Ciro 6/15/2021 17:48:35'!
createCreditCardWithNumber: aNumber owner: anOwner expireDate: aDate
	
	^ CreditCard numbered: aNumber owner: anOwner expireOn: aDate!
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:48:57' prior: 50939298!
creditCardWithInvalidNumberOfDigits
	
	^ CreditCard 
		numbered: 1 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)
		stolen: false! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:49:01' prior: 50939325!
creditCardWithInvalidOwner
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: '' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)
		stolen: false! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:49:03' prior: 50939307!
expiredCreditCard
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1)
		stolen: false! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:49:06' prior: 50939316!
validCreditCard
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)
		stolen: false! !

!methodRemoval: CreditCard class #numbered:owner:expireOn: stamp: 'Ciro 6/15/2021 17:49:17'!
numbered: aNumber owner: anOwner expireOn: aDate 

	self assertNumberOfDigits: aNumber.
	self assertOwner: anOwner.
	
	^ self new initializeWithNumber: aNumber owner: anOwner expiringOn: aDate!

!methodRemoval: CreditCard #initializeWithNumber:owner:expiringOn: stamp: 'Ciro 6/15/2021 17:49:23'!
initializeWithNumber: aNumber owner: anOwner expiringOn: aDate
	
	number _ aNumber.
	owner _ anOwner.
	expiredDate _ aDate!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:49:26'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 17:49:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 17:49:26'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 17:49:26'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 17:49:26'!
FAILURE!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:49:26'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:49:26'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 17:49:26'!
FAILURE!
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 17:49:48'!
stolenCreditCard
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)
		stolen: true! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 17:50:02'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 17:50:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 17:50:02'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 17:50:02'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 17:50:02'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 17:50:02'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 17:50:02'!
PASSED!
!Cashier class methodsFor: 'assertion' stamp: 'Ciro 6/15/2021 17:51:42' prior: 50939609!
assertNotStolenCreditCard: aCreditCard

	(aCreditCard isStolen) ifTrue: [self error: self canNotCheckoutWithAnStolenCreditCardErrorDescription]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:01:38' prior: 50939185!
test07ValidCheckoutRegistersASale

	| cart cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: storeTestSimulator validCreditCard 
		on: DateAndTime today 
		registerOn: sales.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !

Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesCollection total date merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Ciro 6/15/2021 18:01:59'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesCollection total date merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 18:02:58'!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion withMerchantProcesor: aMerchantProcesort

	self assertCartNotEmpty: aCart.
	
	self assertNotExpiredCreditCard: aCreditCard on: aDate.

	self assertNotStolenCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion! !
!Cashier class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 18:03:10' prior: 50939823!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion withMerchantProcesor: aMerchantProcessor

	self assertCartNotEmpty: aCart.
	
	self assertNotExpiredCreditCard: aCreditCard on: aDate.

	self assertNotStolenCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:03:35' prior: 50939154!
test01CanNotCheckoutWithAnEmptyCart

	| sales |
	
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: storeTestSimulator createCart 
			chargingOn: storeTestSimulator validCreditCard 
			on: DateAndTime today 
			registerOn: sales ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !
!Cashier class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 18:03:54'!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion withMerchantProcessor: aMerchantProcessor

	self assertCartNotEmpty: aCart.
	
	self assertNotExpiredCreditCard: aCreditCard on: aDate.

	self assertNotStolenCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion! !

!methodRemoval: Cashier class #checkout:chargingOn:on:registerOn:withMerchantProcesor: stamp: 'Ciro 6/15/2021 18:03:57'!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion withMerchantProcesor: aMerchantProcessor

	self assertCartNotEmpty: aCart.
	
	self assertNotExpiredCreditCard: aCreditCard on: aDate.

	self assertNotStolenCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:04:12' prior: 50939852!
test01CanNotCheckoutWithAnEmptyCart

	| sales |
	
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: storeTestSimulator createCart 
			chargingOn: storeTestSimulator validCreditCard 
			on: DateAndTime today 
			registerOn: sales
			withMerchantProcessor: self ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnEmptyCartErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:04:16' prior: 50939569!
test02CanNotCheckoutWithAnExpiredCreditCard

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator expiredCreditCard
			on: DateAndTime today
			registerOn: sales
			withMerchantProcessor: self ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnExpiredCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:04:20' prior: 50939414!
test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator creditCardWithInvalidNumberOfDigits 
			on: DateAndTime today
			registerOn: sales
			withMerchantProcessor: self ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidNumberOfDigitsOfCreditCardErrorDescription .
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:04:23' prior: 50939453!
test04CanNotCheckoutWithACreditCardWithInvalidOwner

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator creditCardWithInvalidOwner
			on: DateAndTime today
			registerOn: sales
			withMerchantProcessor: self ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidOwnerOfCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:04:27' prior: 50939515!
test05CanNotCheckoutWithAStolenCreditCard

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator stolenCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnStolenCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:04:30' prior: 50939170!
test06CalculateCheckoutIsCorrect

	| cart cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: storeTestSimulator validCreditCard
		on: DateAndTime today 
		registerOn: sales
		withMerchantProcessor: self.
	
	self assert: cashier checkOut equals: 30.
	self deny: sales isEmpty! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:04:34' prior: 50939793!
test07ValidCheckoutRegistersASale

	| cart cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: storeTestSimulator validCreditCard 
		on: DateAndTime today 
		registerOn: sales
		withMerchantProcessor: self.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 18:04:38'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 18:04:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 18:04:38'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 18:04:38'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:04:38'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 18:04:38'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 18:04:38'!
PASSED!

!methodRemoval: Cashier class #checkout:chargingOn:on:registerOn: stamp: 'Ciro 6/15/2021 18:04:45'!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion

	self assertCartNotEmpty: aCart.
	
	self assertNotExpiredCreditCard: aCreditCard on: aDate.

	self assertNotStolenCreditCard: aCreditCard.

	^ self new initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion!
!Cashier class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 18:05:09' prior: 50939868!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion withMerchantProcessor: aMerchantProcessor

	self assertCartNotEmpty: aCart.
	
	self assertNotExpiredCreditCard: aCreditCard on: aDate.

	self assertNotStolenCreditCard: aCreditCard.

	^ self new 
		initializeToCheckout: aCart 
		chargingOn: aCreditCard 
		on: aDate 
		registerOn: aSalesCollecion 
		withMerchantProcessor: aMerchantProcessor ! !
!Cashier methodsFor: 'initialization' stamp: 'Ciro 6/15/2021 18:05:17'!
initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollection withMerchantProcessor: aMerchantProcessor 

	cart _ aCart.
	creditCard _ aCreditCard.
	date _ aDate.
	salesCollection _ aSalesCollection! !

!methodRemoval: Cashier #initializeToCheckout:chargingOn:on:registerOn: stamp: 'Ciro 6/15/2021 18:05:20'!
initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollection

	cart _ aCart.
	creditCard _ aCreditCard.
	date _ aDate.
	salesCollection _ aSalesCollection!
!Cashier methodsFor: 'initialization' stamp: 'Ciro 6/15/2021 18:05:29' prior: 50940083!
initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollection withMerchantProcessor: aMerchantProcessor 

	cart _ aCart.
	creditCard _ aCreditCard.
	date _ aDate.
	salesCollection _ aSalesCollection.
	merchantProcessor _ aMerchantProcessor! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 18:05:32'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 18:05:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 18:05:32'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 18:05:32'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:05:32'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 18:05:32'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 18:05:32'!
PASSED!
!Cashier methodsFor: 'check out' stamp: 'Ciro 6/15/2021 18:07:26' prior: 50938004!
checkOut

	self calculateTotal.
	self debitFromCreditCard.
	self registerSale.
	
	^ total.! !
!Cashier methodsFor: 'check out' stamp: 'Ciro 6/15/2021 18:07:32'!
debitFromCreditCard

	! !
!Cashier methodsFor: 'private' stamp: 'Ciro 6/15/2021 18:07:58' prior: 50940145!
debitFromCreditCard

	merchantProcessor debit: total from: creditCard! !
!CashierTest methodsFor: 'debit' stamp: 'Ciro 6/15/2021 18:08:27'!
debit: aNumber from: aCreditCard! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'storeTestSimulator isAStolenCreditCard creditCardCanDebitTheAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'Ciro 6/15/2021 18:26:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'storeTestSimulator isAStolenCreditCard creditCardCanDebitTheAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'set up' stamp: 'Ciro 6/15/2021 18:26:50' prior: 50937626 overrides: 16927572!
setUp

	storeTestSimulator _ StoreTestSimulator new.
	isAStolenCreditCard _ false.
	! !
!CashierTest methodsFor: 'set up' stamp: 'Ciro 6/15/2021 18:27:06' prior: 50940174 overrides: 16927572!
setUp

	storeTestSimulator _ StoreTestSimulator new.
	isAStolenCreditCard _ false.
	creditCardCanDebitTheAmount _ true! !
!CashierTest methodsFor: 'debit' stamp: 'Ciro 6/15/2021 18:28:14' prior: 50940154!
debit: aNumber from: aCreditCard

	isAStolenCreditCard ifTrue: [self error: Cashier ].
	
	creditCardCanDebitTheAmount ifFalse: []! !
!CashierTest methodsFor: 'debit' stamp: 'Ciro 6/15/2021 18:28:47' prior: 50940187!
debit: aNumber from: aCreditCard

	isAStolenCreditCard ifTrue: [self error: Cashier canNotDebitFromAStolenCreditCardErrorDescription].
	
	creditCardCanDebitTheAmount ifFalse: []! !
!CashierTest methodsFor: 'debit' stamp: 'Ciro 6/15/2021 18:29:30' prior: 50940194!
debit: aNumber from: aCreditCard

	isAStolenCreditCard ifTrue: [self error: Cashier canNotDebitFromAStolenCreditCardErrorDescription].
	
	creditCardCanDebitTheAmount ifFalse: [self error: Cashier canNotDebitFromACreditCardWithNoBalanceErrorDescription]! !
!Cashier class methodsFor: 'error description' stamp: 'Ciro 6/15/2021 18:29:58'!
canNotDebitFromAStolenCreditCardErrorDescription
	
	^ 'Can not debit from a stolen credit card'! !
!Cashier class methodsFor: 'error description' stamp: 'Ciro 6/15/2021 18:30:25'!
canNotDebitFromACreditCardWithNoBalanceErrorDescription
	
	^ 'Can not debit from a credit card with no balance'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 18:30:38'!
numbered: aNumber owner: anOwner expireOn: aDate

	self assertNumberOfDigits: aNumber.
	self assertOwner: anOwner.
	
	^ self new initializeWithNumber: aNumber owner: anOwner expiringOn: aDate! !
!CreditCard methodsFor: 'initialization' stamp: 'Ciro 6/15/2021 18:30:48'!
initializeWithNumber: aNumber owner: anOwner expiringOn: aDate
	
	number _ aNumber.
	owner _ anOwner.
	expiredDate _ aDate! !

!methodRemoval: CreditCard #isStolen stamp: 'Ciro 6/15/2021 18:30:59'!
isStolen

	^ stolen!

!methodRemoval: StoreTestSimulator #stolenCreditCard stamp: 'Ciro 6/15/2021 18:31:22'!
stolenCreditCard
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)
		stolen: true!
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 18:31:25' prior: 50939699!
validCreditCard
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 18:31:28' prior: 50939689!
expiredCreditCard
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1)! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 18:31:30' prior: 50939679!
creditCardWithInvalidOwner
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: '' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)! !
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 18:31:34' prior: 50939669!
creditCardWithInvalidNumberOfDigits
	
	^ CreditCard 
		numbered: 1 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)! !
!Cashier class methodsFor: 'instance creation' stamp: 'Ciro 6/15/2021 18:31:47' prior: 50940067!
checkout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollecion withMerchantProcessor: aMerchantProcessor

	self assertCartNotEmpty: aCart.
	
	self assertNotExpiredCreditCard: aCreditCard on: aDate.

	^ self new 
		initializeToCheckout: aCart 
		chargingOn: aCreditCard 
		on: aDate 
		registerOn: aSalesCollecion 
		withMerchantProcessor: aMerchantProcessor ! !

!methodRemoval: Cashier class #assertNotStolenCreditCard: stamp: 'Ciro 6/15/2021 18:31:54'!
assertNotStolenCreditCard: aCreditCard

	(aCreditCard isStolen) ifTrue: [self error: self canNotCheckoutWithAnStolenCreditCardErrorDescription]!

!methodRemoval: Cashier class #canNotCheckoutWithAnStolenCreditCardErrorDescription stamp: 'Ciro 6/15/2021 18:32:00'!
canNotCheckoutWithAnStolenCreditCardErrorDescription
	
	^ 'Can not checkout with an stolen credit card'!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:32:22' prior: 50939976!
test05CanNotCheckoutWithAStolenCreditCard

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator validCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCheckoutWithAnStolenCreditCardErrorDescription.
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:32:32' prior: 50940320!
test05CanNotCheckoutWithAStolenCreditCard

	| cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	
	self should: [ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator validCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotDebitFromAStolenCreditCardErrorDescription .
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:32:34'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:33:16' prior: 50940340!
test05CanNotCheckoutWithAStolenCreditCard

	| cashier cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator validCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self.
	
	self should: [ cashier checkOut ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotDebitFromAStolenCreditCardErrorDescription .
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:33:17'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:33:40' prior: 50940363!
test05CanNotCheckoutWithAStolenCreditCard

	| cashier cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator validCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self.
	isAStolenCreditCard _ true.
	
	self should: [ cashier checkOut ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotDebitFromAStolenCreditCardErrorDescription .
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:33:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 18:33:41'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 18:33:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 18:33:41'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 18:33:41'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:33:41'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 18:33:41'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 18:33:41'!
PASSED!

!methodRemoval: CreditCard class #numbered:owner:expireOn:stolen: stamp: 'Ciro 6/15/2021 18:33:49'!
numbered: aNumber owner: anOwner expireOn: aDate stolen: aBoolean

	self assertNumberOfDigits: aNumber.
	self assertOwner: anOwner.
	
	^ self new initializeWithNumber: aNumber owner: anOwner expiringOn: aDate stolen: aBoolean!

!methodRemoval: CreditCard #initializeWithNumber:owner:expiringOn:stolen: stamp: 'Ciro 6/15/2021 18:33:54'!
initializeWithNumber: aNumber owner: anOwner expiringOn: aDate stolen: aBoolean
	
	number _ aNumber.
	owner _ anOwner.
	expiredDate _ aDate.
	stolen _ aBoolean.!

Object subclass: #CreditCard
	instanceVariableNames: 'date expiredDate number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Ciro 6/15/2021 18:34:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'date expiredDate number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 18:34:25'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 18:34:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 18:34:25'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 18:34:25'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:34:25'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 18:34:25'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 18:34:25'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:35:04'!
test08CanNotCheckoutWithACreditCardWithNoBalance

	| cart cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: storeTestSimulator validCreditCard 
		on: DateAndTime today 
		registerOn: sales
		withMerchantProcessor: self.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:35:23' prior: 50940491!
test08CanNotCheckoutWithACreditCardWithNoBalance

	| cart cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator validCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self.
	creditCardCanDebitTheAmount _ false.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:35:43' prior: 50940509!
test08CanNotCheckoutWithACreditCardWithNoBalance

	| cart cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator validCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self.
	creditCardCanDebitTheAmount _ false.
	total _ cashier checkOut.
	
	self should: [ cashier checkOut ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotDebitFromACreditCardWithNoBalanceErrorDescription .
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:35:54' prior: 50940528!
test08CanNotCheckoutWithACreditCardWithNoBalance

	| cart cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator validCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self.
	creditCardCanDebitTheAmount _ false.
	
	self should: [ cashier checkOut ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotDebitFromACreditCardWithNoBalanceErrorDescription .
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test08CanNotCheckoutWithACreditCardWithNoBalance stamp: 'Ciro 6/15/2021 18:35:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 18:35:55'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 18:35:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 18:35:55'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 18:35:55'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:35:55'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 18:35:55'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 18:35:55'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithACreditCardWithNoBalance stamp: 'Ciro 6/15/2021 18:35:55'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:36:42'!
test09ValidCheckoutCorrectlyDebitFromCreditCard

	| cart cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: storeTestSimulator validCreditCard 
		on: DateAndTime today 
		registerOn: sales
		withMerchantProcessor: self.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:37:46'!
test09ValidCheckoutDebitFromCreditCard

	| cart cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: storeTestSimulator validCreditCard 
		on: DateAndTime today 
		registerOn: sales
		withMerchantProcessor: self.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !

!methodRemoval: CashierTest #test09ValidCheckoutCorrectlyDebitFromCreditCard stamp: 'Ciro 6/15/2021 18:37:49'!
test09ValidCheckoutCorrectlyDebitFromCreditCard

	| cart cashier sales total |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: storeTestSimulator validCreditCard 
		on: DateAndTime today 
		registerOn: sales
		withMerchantProcessor: self.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'Ciro 6/15/2021 18:40:05'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'storeTestSimulator isAStolenCreditCard creditCardCanDebitTheAmount debitedAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'Ciro 6/15/2021 18:40:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'storeTestSimulator isAStolenCreditCard creditCardCanDebitTheAmount debitedAmount debitedCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'debit' stamp: 'Ciro 6/15/2021 18:40:04' prior: 50940203!
debit: aNumber from: aCreditCard

	isAStolenCreditCard ifTrue: [self error: Cashier canNotDebitFromAStolenCreditCardErrorDescription].
	
	creditCardCanDebitTheAmount ifFalse: [self error: Cashier canNotDebitFromACreditCardWithNoBalanceErrorDescription].
	
	debitedAmount _ aNumber.
	
	debitedCreditCard _ aCreditCard! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:40:46' prior: 50940623!
test09ValidCheckoutDebitFromCreditCard

	| cart cashier sales total creditCard |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator validCreditCard.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: creditCard
		on: DateAndTime today 
		registerOn: sales
		withMerchantProcessor: self.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = sales first.! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 18:41:14' prior: 50940690!
test09ValidCheckoutDebitFromCreditCard

	| cart cashier sales total creditCard |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator validCreditCard.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: creditCard
		on: DateAndTime today 
		registerOn: sales
		withMerchantProcessor: self.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = debitedAmount.
	self assert: creditCard = debitedCreditCard ! !

!testRun: #CashierTest #test09ValidCheckoutDebitFromCreditCard stamp: 'Ciro 6/15/2021 18:41:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 18:41:15'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 18:41:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 18:41:15'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 18:41:15'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:41:15'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 18:41:15'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 18:41:15'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithACreditCardWithNoBalance stamp: 'Ciro 6/15/2021 18:41:15'!
PASSED!

!testRun: #CashierTest #test09ValidCheckoutDebitFromCreditCard stamp: 'Ciro 6/15/2021 18:41:15'!
PASSED!
!Cashier methodsFor: 'private' stamp: 'Ciro 6/15/2021 18:52:05' prior: 50938009!
calculateTotal

	total _ cart total! !
!StoreTestSimulator methodsFor: 'items' stamp: 'Ciro 6/15/2021 18:53:38'!
itemSellByTheStorePrice

	^ 10! !
!StoreTestSimulator methodsFor: 'as yet unclassified' stamp: 'Ciro 6/15/2021 18:53:38' prior: 50937360!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		yourself ! !

!methodRemoval: StoreTestSimulator #itemNotSellByTheStorePrice stamp: 'Ciro 6/15/2021 18:53:38'!
itemNotSellByTheStorePrice

	^ 10!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 18:53:39'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 18:53:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 18:53:39'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 18:53:39'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:53:39'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 18:53:39'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 18:53:39'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithACreditCardWithNoBalance stamp: 'Ciro 6/15/2021 18:53:39'!
PASSED!

!testRun: #CashierTest #test09ValidCheckoutDebitFromCreditCard stamp: 'Ciro 6/15/2021 18:53:39'!
PASSED!
!Cashier methodsFor: 'private' stamp: 'Ciro 6/15/2021 18:56:36' prior: 50940762!
calculateTotal

	| sumaParcial |
	
	cart xxx: self.
	
	total _ cart total! !
!Cart methodsFor: 'total' stamp: 'Ciro 6/15/2021 18:57:47'!
xxx: aCashier

	items do: [ :anItem | aCashier zzz: (catalog at: anItem)]! !
!Cashier methodsFor: 'private' stamp: 'Ciro 6/15/2021 18:58:14'!
zzz: aPrice

	total _ total + aPrice! !
!Cashier methodsFor: 'private' stamp: 'Ciro 6/15/2021 18:58:23' prior: 50940813!
calculateTotal
	
	cart xxx: self! !
!Cashier methodsFor: 'initialization' stamp: 'Ciro 6/15/2021 18:58:37' prior: 50940103!
initializeToCheckout: aCart chargingOn: aCreditCard on: aDate registerOn: aSalesCollection withMerchantProcessor: aMerchantProcessor 

	cart _ aCart.
	creditCard _ aCreditCard.
	date _ aDate.
	salesCollection _ aSalesCollection.
	merchantProcessor _ aMerchantProcessor.
	total _ 0! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 18:58:43'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 18:58:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 18:58:43'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 18:58:43'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 18:58:43'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 18:58:43'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 18:58:43'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithACreditCardWithNoBalance stamp: 'Ciro 6/15/2021 18:58:43'!
PASSED!

!testRun: #CashierTest #test09ValidCheckoutDebitFromCreditCard stamp: 'Ciro 6/15/2021 18:58:43'!
PASSED!

!methodRemoval: Cart #total stamp: 'Ciro 6/15/2021 18:58:50'!
total

	^ items sum: [ :anItem | catalog at: anItem ]!
!Cart methodsFor: 'total' stamp: 'Ciro 6/15/2021 19:00:35'!
priceFromItemsFor: aCashier

	items do: [ :anItem | aCashier zzz: (catalog at: anItem)]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'Ciro 6/15/2021 19:00:35' prior: 50940827!
calculateTotal
	
	cart priceFromItemsFor: self! !

!methodRemoval: Cart #xxx: stamp: 'Ciro 6/15/2021 19:00:35'!
xxx: aCashier

	items do: [ :anItem | aCashier zzz: (catalog at: anItem)]!
!Cashier methodsFor: 'private' stamp: 'Ciro 6/15/2021 19:01:02'!
addToTotal: aPrice

	total _ total + aPrice! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Ciro 6/15/2021 19:01:02' prior: 50940877!
priceFromItemsFor: aCashier

	items do: [ :anItem | aCashier addToTotal: (catalog at: anItem)]! !

!methodRemoval: Cashier #zzz: stamp: 'Ciro 6/15/2021 19:01:02'!
zzz: aPrice

	total _ total + aPrice!

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 19:01:29'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 19:01:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 19:01:29'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 19:01:29'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 19:01:29'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 19:01:29'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 19:01:29'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithACreditCardWithNoBalance stamp: 'Ciro 6/15/2021 19:01:29'!
PASSED!

!testRun: #CashierTest #test09ValidCheckoutDebitFromCreditCard stamp: 'Ciro 6/15/2021 19:01:29'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 19:02:34'!
test09ValidCheckoutDebitFromCreditCardCorrectly

	| cart cashier sales total creditCard |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator validCreditCard.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: creditCard
		on: DateAndTime today 
		registerOn: sales
		withMerchantProcessor: self.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = debitedAmount.
	self assert: creditCard = debitedCreditCard ! !

!methodRemoval: CashierTest #test09ValidCheckoutDebitFromCreditCard stamp: 'Ciro 6/15/2021 19:02:34'!
test09ValidCheckoutDebitFromCreditCard

	| cart cashier sales total creditCard |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	creditCard _ storeTestSimulator validCreditCard.
	cashier _ Cashier 
		checkout: cart 
		chargingOn: creditCard
		on: DateAndTime today 
		registerOn: sales
		withMerchantProcessor: self.
	total _ cashier checkOut.
	
	self deny: sales isEmpty.
	self assert: total = debitedAmount.
	self assert: creditCard = debitedCreditCard !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'Ciro 6/15/2021 19:08:50'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'storeTestSimulator isAStolenCreditCard creditCardCanDebitTheAmount debitedAmount debitedCreditCard isAnInvalidCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 19:08:46'!
test10CanNotCheckoutWithAnInvalidCreditCard

	| cashier cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator validCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self.
	isAnInvalidCreditCard _ true.
	
	self should: [ cashier checkOut ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotDebitFromAnInvalidCreditCardErrorDescription .
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'debit' stamp: 'Ciro 6/15/2021 19:09:30' prior: 50940677!
debit: aNumber from: aCreditCard

	isAStolenCreditCard ifTrue: [self error: Cashier canNotDebitFromAStolenCreditCardErrorDescription].
	
	creditCardCanDebitTheAmount ifFalse: [self error: Cashier canNotDebitFromACreditCardWithNoBalanceErrorDescription].
	
	isAnInvalidCreditCard ifTrue: [self error: Cashier canNotDebitFromAnInvalidCreditCardErrorDescription].
	
	debitedAmount _ aNumber.
	
	debitedCreditCard _ aCreditCard! !
!CashierTest methodsFor: 'set up' stamp: 'Ciro 6/15/2021 19:09:45' prior: 50940180 overrides: 16927572!
setUp

	storeTestSimulator _ StoreTestSimulator new.
	isAStolenCreditCard _ false.
	creditCardCanDebitTheAmount _ true.
	isAnInvalidCreditCard _ false.! !
!Cashier class methodsFor: 'error description' stamp: 'Ciro 6/15/2021 19:10:07'!
canNotDebitFromAnInvalidCreditCardErrorDescription
	
	^ 'Can not an invalid from a stolen credit card'! !
!Cashier class methodsFor: 'error description' stamp: 'Ciro 6/15/2021 19:10:11' prior: 50940214!
canNotDebitFromAStolenCreditCardErrorDescription
	
	^ 'Can not a debit from a stolen credit card'! !
!Cashier class methodsFor: 'error description' stamp: 'Ciro 6/15/2021 19:10:21' prior: 50941040!
canNotDebitFromAStolenCreditCardErrorDescription
	
	^ 'Can not debit from a stolen credit card'! !
!Cashier class methodsFor: 'error description' stamp: 'Ciro 6/15/2021 19:10:32' prior: 50941033!
canNotDebitFromAnInvalidCreditCardErrorDescription
	
	^ 'Can not debit from an invalid credit card'! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 19:10:34'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 19:10:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 19:10:34'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 19:10:34'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 19:10:34'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 19:10:34'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 19:10:34'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithACreditCardWithNoBalance stamp: 'Ciro 6/15/2021 19:10:34'!
PASSED!

!testRun: #CashierTest #test09ValidCheckoutDebitFromCreditCardCorrectly stamp: 'Ciro 6/15/2021 19:10:34'!
PASSED!

!testRun: #CashierTest #test10CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/15/2021 19:10:34'!
PASSED!
!StoreTestSimulator methodsFor: 'credit card' stamp: 'Ciro 6/15/2021 19:11:11'!
invalidCreditCard
	
	^ CreditCard 
		numbered: 1111111111111111 
		owner: 'Ciro' 
		expireOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1)! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 19:11:18' prior: 50940387!
test05CanNotCheckoutWithAStolenCreditCard

	| cashier cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator invalidCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self.
	isAStolenCreditCard _ true.
	
	self should: [ cashier checkOut ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotDebitFromAStolenCreditCardErrorDescription .
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 19:11:24' prior: 50940986!
test10CanNotCheckoutWithAnInvalidCreditCard

	| cashier cart sales |
	
	cart _ storeTestSimulator createCart.
	cart add: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator invalidCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self.
	isAnInvalidCreditCard _ true.
	
	self should: [ cashier checkOut ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotDebitFromAnInvalidCreditCardErrorDescription .
			self assert: sales isEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'Ciro 6/15/2021 19:11:30' prior: 50940552!
test08CanNotCheckoutWithACreditCardWithNoBalance

	| cart cashier sales |
	
	cart _ storeTestSimulator createCart.
	cart add: 3 of: storeTestSimulator itemSellByTheStore.
	sales _ OrderedCollection new.
	cashier _ Cashier 
			checkout: cart 
			chargingOn: storeTestSimulator invalidCreditCard
			on: DateAndTime today
			registerOn: sales 
			withMerchantProcessor: self.
	creditCardCanDebitTheAmount _ false.
	
	self should: [ cashier checkOut ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotDebitFromACreditCardWithNoBalanceErrorDescription .
			self assert: sales isEmpty]! !

!testRun: #CashierTest #test01CanNotCheckoutWithAnEmptyCart stamp: 'Ciro 6/15/2021 19:11:39'!
PASSED!

!testRun: #CashierTest #test02CanNotCheckoutWithAnExpiredCreditCard stamp: 'Ciro 6/15/2021 19:11:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithACreditCardWithInvalidNumberOfDigits stamp: 'Ciro 6/15/2021 19:11:39'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithACreditCardWithInvalidOwner stamp: 'Ciro 6/15/2021 19:11:39'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithAStolenCreditCard stamp: 'Ciro 6/15/2021 19:11:39'!
PASSED!

!testRun: #CashierTest #test06CalculateCheckoutIsCorrect stamp: 'Ciro 6/15/2021 19:11:39'!
PASSED!

!testRun: #CashierTest #test07ValidCheckoutRegistersASale stamp: 'Ciro 6/15/2021 19:11:39'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutWithACreditCardWithNoBalance stamp: 'Ciro 6/15/2021 19:11:39'!
PASSED!

!testRun: #CashierTest #test09ValidCheckoutDebitFromCreditCardCorrectly stamp: 'Ciro 6/15/2021 19:11:39'!
PASSED!

!testRun: #CashierTest #test10CanNotCheckoutWithAnInvalidCreditCard stamp: 'Ciro 6/15/2021 19:11:39'!
PASSED!

----QUIT----(15 June 2021 19:13:05) CuisUniversity-4532.image priorSource: 19407329!

----STARTUP---- (17 June 2021 13:10:32) as C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\windows64\CuisUniversity-4532.image!


!classRenamed: #CashierTest as: #CheckOutTest stamp: 'Ciro 6/17/2021 13:14:21'!
Smalltalk renameClassNamed: #CashierTest as: #CheckOutTest!

----QUIT----(17 June 2021 13:14:34) CuisUniversity-4532.image priorSource: 19505745!