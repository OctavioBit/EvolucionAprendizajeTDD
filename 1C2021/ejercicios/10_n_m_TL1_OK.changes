Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excercise'!

!classDefinition: #Cart category: 'LosLibros- Excercise' stamp: 'ms 6/7/2021 20:32:44'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excercise'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excercise'!

!classDefinition: #CartTest category: 'LosLibros- Excercise' stamp: 'ms 6/7/2021 20:32:57'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excercise'!
!CartTest methodsFor: 'nil' stamp: 'ms 6/7/2021 20:39:40'!
test01CreateAnEmptyCart

	|cart aClientId |
	
	"preg: hace falta una clase para el client?"
	
	cart := Cart new initializeWith: aClientId.
	
	self assert: (cart listCart) size equals: 0.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/7/2021 20:42:14'!
test02CreateCartIfNoneExistedUser

	"|cart aClientId |
	
	preg: hace falta una clase para el client?
	
	cart := Cart new initializeWith: aClientId.
	
	self assert: (cart listCart) size equals: 0."! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/7/2021 20:42:25'!
test03CreateCartIfExistedUserWithoutPasward

	"|cart aClientId |
	
	preg: hace falta una clase para el client?
	
	cart := Cart new initializeWith: aClientId.
	
	self assert: (cart listCart) size equals: 0."! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/7/2021 20:43:09'!
test03CreateCartWithRegisteredUserWithInvalidPasward

	"|cart aClientId |
	
	preg: hace falta una clase para el client?
	
	cart := Cart new initializeWith: aClientId.
	
	self assert: (cart listCart) size equals: 0."! !

!methodRemoval: CartTest #test03CreateCartIfExistedUserWithoutPasward stamp: 'ms 6/7/2021 20:43:13'!
test03CreateCartIfExistedUserWithoutPasward

	"|cart aClientId |
	
	preg: hace falta una clase para el client?
	
	cart := Cart new initializeWith: aClientId.
	
	self assert: (cart listCart) size equals: 0."!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/7/2021 20:47:14'!
test04CreateCartWithRegisteredUserWithInvalidPasward
"crear dos carritos con distintos Ids"
	"|cart aClientId |
	
	preg: hace falta una clase para el client?
	
	cart := Cart new initializeWith: aClientId.
	
	self assert: (cart listCart) size equals: 0."! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/7/2021 21:31:02'!
test05ComprarCosasQueEstanEnLaEditorial
"crear dos carritos con distintos Ids"
	"|cart aClientId |
	
	preg: hace falta una clase para el client?
	
	cart := Cart new initializeWith: aClientId.
	
	self assert: (cart listCart) size equals: 0."! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/7/2021 21:32:37'!
test05NoAgregar0oMenosTresCosas
"crear dos carritos con distintos Ids"
	"|cart aClientId |
	
	preg: hace falta una clase para el client?
	
	cart := Cart new initializeWith: aClientId.
	
	self assert: (cart listCart) size equals: 0."! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/7/2021 21:39:58'!
test06
"Existe en mi lista de productos?"! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/7/2021 21:59:03' prior: 51041823!
test06
"Existe en mi lista de productos? es valido? es de mi editorial? la editorial lo quiere vender"! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/7/2021 22:04:09'!
test07
"Carrito puede: -estar vacio
			-agregar un producto valido
			-no agrega un producto que no este en el catalogo
			-Lista los productos del carrito
			-sacar libros del carrito
			-ListPurches
			"! !

!classRenamed: #Cart as: #CartHernan stamp: 'ms 6/8/2021 15:17:26'!
Smalltalk renameClassNamed: #Cart as: #CartHernan!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:17:26' prior: 51041746!
test01CreateAnEmptyCart

	|cart aClientId |
	
	"preg: hace falta una clase para el client?"
	
	cart := CartHernan new initializeWith: aClientId.
	
	self assert: (cart listCart) size equals: 0.! !

!classRenamed: #CartTest as: #CartHernanTest stamp: 'ms 6/8/2021 15:17:37'!
Smalltalk renameClassNamed: #CartTest as: #CartHernanTest!

!classRemoval: #CartHernan stamp: 'ms 6/8/2021 15:18:10'!
Object subclass: #CartHernan
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- ExcerciseComHernan'!

!classRemoval: #CartHernanTest stamp: 'ms 6/8/2021 15:18:10'!
TestCase subclass: #CartHernanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- ExcerciseComHernan'!

Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!

!classDefinition: #Cart category: 'LosLibros- Excersice' stamp: 'ms 6/8/2021 15:18:34'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!

!classDefinition: #CartTest category: 'LosLibros- Excersice' stamp: 'ms 6/8/2021 15:18:44'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!
!CartTest methodsFor: 'nil' stamp: 'ms 6/8/2021 15:20:53'!
test01

	|cart|
	
	cart := Cart new
	
	assert: (cart listCart) size equals: 0.! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:20:57'!
ERROR!

Object subclass: #NameOfSubclass
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!

!classDefinition: #NameOfSubclass category: 'LosLibros- Excersice' stamp: 'ms 6/8/2021 15:21:46'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!

!classRemoval: #NameOfSubclass stamp: 'ms 6/8/2021 15:21:54'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!

Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!

!classDefinition: #Cart category: 'LosLibros- Excersice' stamp: 'ms 6/8/2021 15:21:58'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!
!Cart methodsFor: 'no messages' stamp: 'ms 6/8/2021 15:22:13' overrides: 16896425!
initialize

	books := OrderedCollection new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:22:38'!
listCart

	^books! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:22:45'!
ERROR!

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:22:45'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:22:56' prior: 51041896!
test01

	|cart|
	
	cart := Cart new initialize 
	
	assert: (cart listCart) size equals: 0.! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:23:01'!
ERROR!

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:23:01'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:23:19' prior: 51041946!
test01

	|cart|
	
	cart := Cart new initialize.
	
	self assert: (cart listCart) isEmpty ! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:23:21'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:24:39'!
test02

	|cart book|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	cart addToCart: book.
	
	self assert: (cart listCart) isEmpty ! !

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:24:44'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:24:58' prior: 51041964!
test02

	|cart book|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	cart addToCart: book.
	
	self assert: (cart listCart) isEmpty ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:25:57'!
addToCart: aBook

	books add: aBook ! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:26:00'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:26:00'!
FAILURE!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:26:00'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:26:38' prior: 51041974!
test02

	|cart book|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	cart addToCart: book.
	
	self assert: (cart listCart) size equals: 1.
	self assert: (cart listCart) includes: book.! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:26:40'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:26:40'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:28:12'!
test03

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := 2.
	cart addToCart: book withQuantity: bookQuantity.
	
	self assert: (cart listCart) size equals: 1.
	self assert: (cart listCart) includes: book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:28:54' prior: 51042005!
test03

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := 2.
	cart addToCart: book withQuantity: bookQuantity.
	
	self assert: (cart listCart) size equals: 2.
	self assert: ((cart listCart) at:1) equals: book.
	self assert: ((cart listCart) at:2) equals: book.! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:28:57'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:28:57'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:28:57'!
ERROR!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:28:57'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:30:09'!
addToCart: aBook withQuantity: bookQuantity.

	bookQuantity timesRepeat: [books add: aBook ]! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:30:16'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:30:16'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:30:16'!
PASSED!

!methodRemoval: Cart #addToCart: stamp: 'ms 6/8/2021 15:30:24'!
addToCart: aBook

	books add: aBook !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:30:56' prior: 51041992!
test02

	|cart book|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	cart addToCart: book withQuantity: 1.
	
	self assert: (cart listCart) size equals: 1.
	self assert: (cart listCart) includes: book.! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:30:58'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:30:58'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:30:58'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:32:54'!
test04

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := -1.
	cart addToCart: book withQuantity: bookQuantity.
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:34:26' prior: 51042069!
test04

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := -1.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withExceptionDo: [ Cart new errorCanNotAddProductsWithNegativeQuantity ]! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:34:35'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:34:35'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:34:35'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:34:35'!
FAILURE!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:34:35'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:35:19' prior: 51042078!
test04

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := -1.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorCanNotAddProductsWithNegativeQuantity! !

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:35:21'!
ERROR!
!Cart class methodsFor: 'nil' stamp: 'ms 6/8/2021 15:35:49'!
errorCanNotAddProductsWithNegativeQuantity

	^'Can Not Add Products With Negative Quantity'! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:35:52'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:35:52'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:35:52'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:35:52'!
FAILURE!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:35:52'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:36:47' prior: 51042037!
addToCart: aBook withQuantity: bookQuantity.

	(bookQuantity <= 0) ifTrue: [^Error signal self class errorCanNotAddProductsWithNegativeQuantity ].

	bookQuantity timesRepeat: [books add: aBook ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:36:53' prior: 51042131!
addToCart: aBook withQuantity: bookQuantity.

	(bookQuantity <= 0) ifTrue: [^Error signal: self class errorCanNotAddProductsWithNegativeQuantity ].

	bookQuantity timesRepeat: [books add: aBook ]! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:36:58'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:36:58'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:36:58'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:36:58'!
PASSED!
!Cart class methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:37:25'!
errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity

	^'Can Not Add Products With Negative Quantity'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:37:25' prior: 51042140!
addToCart: aBook withQuantity: bookQuantity.

	(bookQuantity <= 0) ifTrue: [^Error signal: self class errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity ].

	bookQuantity timesRepeat: [books add: aBook ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:37:25' prior: 51042101!
test04

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := -1.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity! !

!methodRemoval: Cart class #errorCanNotAddProductsWithNegativeQuantity stamp: 'ms 6/8/2021 15:37:25'!
errorCanNotAddProductsWithNegativeQuantity

	^'Can Not Add Products With Negative Quantity'!

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:37:27'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:37:27'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:37:27'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:37:27'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:38:03'!
test05

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := 0.5.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsWithDecimalQuantity! !

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:38:09'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:38:43' prior: 51042201!
test05

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := 2/3.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsWithDecimalQuantity! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:38:46' prior: 51042215!
test05

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := 1/2.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsWithDecimalQuantity! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:38:54' prior: 51042227!
test05

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := 1/2.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsWithFractionQuantity! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:38:57'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:38:57'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:38:57'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:38:57'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:38:57'!
ERROR!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:38:57'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:39:17'!
errorDescribesCanNotAddProductsWithFractionQuantity

	^'Can Not Add Products With Fraction Quantity'! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:39:22' prior: 51042158!
errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity

	^'Can Not Add Products With Negative or Zero Quantity'! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:39:27'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:39:27'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:39:27'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:39:27'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:39:27'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:39:27'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:42:17' prior: 51042165!
addToCart: aBook withQuantity: bookQuantity.

	(bookQuantity <= 0) ifTrue: [^Error signal: self class errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity ].
	(bookQuantity denominator ~= 1 ) ifTrue: [^Error signal: self class errorDescribesCanNotAddProductsWithFractionQuantity ].

	bookQuantity timesRepeat: [books add: aBook ]! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:42:20'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:42:20'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:42:20'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:42:20'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:42:20'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:45:52' prior: 51042239!
test05

	|cart book bookQuantity catalogue|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := 1.
	catalogue := OrderedCollection new.
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsWithFractionQuantity! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:47:59' prior: 51042315!
test05

	|cart book bookQuantity catalogue|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := 1.
	catalogue := OrderedCollection new.
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsThatDoNotBelongeToTheCatalogue! !

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:48:04'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:48:14' prior: 51042329!
test05

	|cart book bookQuantity|
	
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := 1.
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsThatDoNotBelongeToTheCatalogue! !

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:48:17'!
ERROR!
!Cart class methodsFor: 'nil' stamp: 'ms 6/8/2021 15:48:47'!
errorDescribesCanNotAddProductsThatDoNotBelongeToTheCatalogue

	^'Can Not Add Books That Do Not Belonge To The Catalogue'! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:48:54' prior: 51042263!
errorDescribesCanNotAddProductsWithFractionQuantity

	^'Can Not Add books With Fraction Quantity'! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:49:01' prior: 51042270!
errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity

	^'Can Not Add Books With Negative or Zero Quantity'! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:49:05' prior: 51042366!
errorDescribesCanNotAddProductsWithFractionQuantity

	^'Can Not Add Books With Fraction Quantity'! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:49:06'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:49:06'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:49:06'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:49:06'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:49:06'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:49:06'!
FAILURE!

Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!

!classDefinition: #Cart category: 'LosLibros- Excersice' stamp: 'ms 6/8/2021 15:49:28'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LosLibros- Excersice'!
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:49:39' prior: 51041934 overrides: 16896425!
initialize

	books := OrderedCollection new.
	catalogue := OrderedCollection new! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:49:41'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:49:41'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:49:41'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:49:41'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:49:41'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:49:41'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:50:55' prior: 51042290!
addToCart: aBook withQuantity: bookQuantity.

	(bookQuantity <= 0) ifTrue: [^Error signal: self class errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity ].
	(bookQuantity denominator ~= 1 ) ifTrue: [^Error signal: self class errorDescribesCanNotAddProductsWithFractionQuantity ].

	bookQuantity timesRepeat: [ (catalogue includes: aBook)  ifTrue: [books add: aBook ]]! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:50:58'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:50:58'!
FAILURE!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:50:58'!
FAILURE!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:50:58'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:50:58'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:53:42' prior: 51042053!
test02

	|cart book catalogue|
	
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	
	cart := Cart new initialize.
	cart addToCart: book withQuantity: 1.
	
	self assert: (cart listCart) size equals: 1.
	self assert: (cart listCart) includes: book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:54:50' prior: 51042457!
test02

	|cart book catalogue|
	
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	
	cart := Cart new initializeWith: catalogue .
	cart addToCart: book withQuantity: 1.
	
	self assert: (cart listCart) size equals: 1.
	self assert: (cart listCart) includes: book.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:55:06'!
initializeWith: aCatalogue

	books := OrderedCollection new.
	catalogue := aCatalogue! !

!methodRemoval: Cart #initialize stamp: 'ms 6/8/2021 15:55:18'!
initialize

	books := OrderedCollection new.
	catalogue := OrderedCollection new!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:55:52' prior: 51041956!
test01

	|cart|
	
	cart := Cart new initializeWith: OrderedCollection new.
	
	self assert: (cart listCart) isEmpty ! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:55:54'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:55:54'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:55:54'!
ERROR!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:55:54'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:55:54'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:56:06' prior: 51042016!
test03

	|cart book bookQuantity|
	
	cart := Cart new initializeWith: OrderedCollection new.
	book := 'Desing Patterns'.
	bookQuantity := 2.
	cart addToCart: book withQuantity: bookQuantity.
	
	self assert: (cart listCart) size equals: 2.
	self assert: ((cart listCart) at:1) equals: book.
	self assert: ((cart listCart) at:2) equals: book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:56:52' prior: 51042510!
test03

	|cart book bookQuantity catalogue|
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	cart := Cart new initializeWith: catalogue.
	
	bookQuantity := 2.
	cart addToCart: book withQuantity: bookQuantity.
	
	self assert: (cart listCart) size equals: 2.
	self assert: ((cart listCart) at:1) equals: book.
	self assert: ((cart listCart) at:2) equals: book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:57:34' prior: 51042175!
test04

	|cart book bookQuantity catalogue |
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	cart := Cart new initialize.
	bookQuantity := -1.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:57:40' prior: 51042345!
test05

	|cart book bookQuantity catalogue |
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	cart := Cart new initialize.
	book := 'Desing Patterns'.
	bookQuantity := 1.
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsThatDoNotBelongeToTheCatalogue! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:57:44'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:57:44'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:57:44'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:57:44'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:57:44'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:57:44'!
FAILURE!

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:57:46'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:57:46'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:57:46'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:57:46'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:57:46'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:57:46'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:58:12' prior: 51042554!
test05

	|cart book bookQuantity catalogue |
	
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	cart := Cart new initialize.
	bookQuantity := 1.
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsThatDoNotBelongeToTheCatalogue! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:59:01' prior: 51042595!
test05

	|cart book bookQuantity  |
	
	cart := Cart new initializeWith: OrderedCollection new.
	book := 'Design Patterns'.
	bookQuantity:= 1.
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsThatDoNotBelongeToTheCatalogue! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:59:03'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:59:03'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:59:03'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:59:03'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:59:03'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:59:03'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:59:19' prior: 51042540!
test04

	|cart book bookQuantity catalogue |
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	cart := Cart new initializeWith: catalogue .
	bookQuantity := -1.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 15:59:24' prior: 51042636!
test04

	|cart book bookQuantity catalogue |
	
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	
	cart := Cart new initializeWith: catalogue .
	bookQuantity := -1.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity! !

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 15:59:31'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 15:59:31'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 15:59:31'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 15:59:31'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:59:31'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 15:59:31'!
FAILURE!

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 16:00:09'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 16:00:09'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 16:00:09'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 16:00:09'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 16:00:09'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 16:00:09'!
FAILURE!

(catalogue includes: aBook)!
!Cart methodsFor: 'as yet unclassified' stamp: 'ms 6/8/2021 16:01:17' prior: 51042431!
addToCart: aBook withQuantity: bookQuantity.

	(bookQuantity <= 0) ifTrue: [^Error signal: self class errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity ].
	(bookQuantity denominator ~= 1 ) ifTrue: [^Error signal: self class errorDescribesCanNotAddProductsWithFractionQuantity ].

	bookQuantity timesRepeat: [ (catalogue includes: aBook)  ifTrue: [books add: aBook ] ifFalse:[Error signal: self class errorDescribesCanNotAddProductsThatDoNotBelongeToTheCatalogue ] ]! !

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 16:01:18'!
PASSED!

!testRun: #CartTest #test01 stamp: 'ms 6/8/2021 16:01:19'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/8/2021 16:01:19'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/8/2021 16:01:19'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/8/2021 16:01:19'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/8/2021 16:01:19'!
PASSED!

!testRun: #CartTest #test01 stamp: 'ms 6/9/2021 14:00:23'!
PASSED!

!testRun: #CartTest #test02 stamp: 'ms 6/9/2021 14:00:23'!
PASSED!

!testRun: #CartTest #test03 stamp: 'ms 6/9/2021 14:00:23'!
PASSED!

!testRun: #CartTest #test04 stamp: 'ms 6/9/2021 14:00:23'!
PASSED!

!testRun: #CartTest #test05 stamp: 'ms 6/9/2021 14:00:23'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/9/2021 14:01:03'!
test01AssertTheCartIsEmpty

	|cart|
	
	cart := Cart new initializeWith: OrderedCollection new.
	
	self assert: (cart listCart) isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/9/2021 14:01:39'!
test02AssertTheCartAddOneProduct

	|cart book catalogue|
	
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	
	cart := Cart new initializeWith: catalogue .
	cart addToCart: book withQuantity: 1.
	
	self assert: (cart listCart) size equals: 1.
	self assert: (cart listCart) includes: book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/9/2021 14:01:53'!
test03AssertTheCartAddMoreThanOneProduct

	|cart book bookQuantity catalogue|
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	cart := Cart new initializeWith: catalogue.
	
	bookQuantity := 2.
	cart addToCart: book withQuantity: bookQuantity.
	
	self assert: (cart listCart) size equals: 2.
	self assert: ((cart listCart) at:1) equals: book.
	self assert: ((cart listCart) at:2) equals: book.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/9/2021 14:02:57'!
test04CanNotAddProductsWithNegativeOrZeroQuantity

	|cart book bookQuantity catalogue |
	
	catalogue := OrderedCollection new.
	book := 'Desing Patterns'.
	catalogue add: book.
	
	cart := Cart new initializeWith: catalogue .
	bookQuantity := -1.
	
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsWithNegativeOrZeroQuantity! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ms 6/9/2021 14:03:11'!
test05CanNotAddProductsThatDoNotBelongeToTheCatalogue

	|cart book bookQuantity  |
	
	cart := Cart new initializeWith: OrderedCollection new.
	book := 'Design Patterns'.
	bookQuantity:= 1.
	
	self 	should: [ cart addToCart: book withQuantity: bookQuantity. ]
		raise: Error
		withMessageText: Cart  errorDescribesCanNotAddProductsThatDoNotBelongeToTheCatalogue! !