!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/17/2021 20:52:45'!
TestCase subclass: #XXXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!XXXTest methodsFor: 'no messages' stamp: 'G.L.S 6/17/2021 20:52:59'!
test01
! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/17/2021 20:59:52' prior: 50873901!
test01

	| invalidID |
	invalidID := '00000000' ! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/17/2021 21:00:00' prior: 50873904!
test01

	| invalidID |
	
	invalidID := '00000000' ! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/17/2021 21:00:52' prior: 50873909!
test01

	| invalidID |
	
	invalidID := '0000000000'.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/17/2021 21:02:19' prior: 50873914!
test01

	| invalidID |
	
	invalidID := '0000000000'.
	
	self should: [] 
		raise: Error  
		withExceptionDo: [
			:anError |
			] ! !

!classDefinition: #XXX category: 'Ejercicio-Libros' stamp: 'G.L.S 6/17/2021 21:21:12'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/17/2021 21:22:44' prior: 50873919!
test01

	| mockInterface password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	mockInterface := XXX new.
	
	self should: [mockInterface createCartUser: usuario password: password] 
		raise: Error  
		withExceptionDo: [
			:anError |
			self assert: anError errorMessage = XXX errorWrongUserCredentials.
			].! !

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/17/2021 21:23:15'!
ERROR!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/17/2021 21:23:35' prior: 50873933!
test01

	| mockInterface password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	mockInterface := XXX new.
	
	self should: [mockInterface createCartUser: usuario password: password] 
		raise: Error  
		withExceptionDo: [
			:anError |
			self assert: anError messageText = XXX errorWrongUserCredentials.
			].! !

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/17/2021 21:23:37'!
ERROR!
!XXX class methodsFor: 'error handling' stamp: 'G.L.S 6/17/2021 21:23:58'!
errorWrongUserCredentials
	self shouldBeImplemented.! !
!XXX class methodsFor: 'error handling' stamp: 'G.L.S 6/17/2021 21:24:23' prior: 50873963!
errorWrongUserCredentials
	^'Error - Las credenciales del usuario no son correctas'.! !

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/17/2021 21:24:30'!
FAILURE!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/17/2021 21:24:45' prior: 50873948!
test01

	| mockInterface password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	mockInterface := XXX new.
	
	self should: [mockInterface createCartUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText = XXX errorWrongUserCredentials.
			].! !

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/17/2021 21:24:46'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/17/2021 21:24:56'!
createCartUser: aString password: aString2 
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/17/2021 21:25:11' prior: 50873992!
createCartUser: aUser password: aPassword 
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/17/2021 21:29:28' prior: 50873998!
createCartUser: aUser password: aPassword 
	
	self error: [self class errorWrongUserCredentials].! !

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/17/2021 21:29:40'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/17/2021 21:30:15'!
createCartForUser: aUser password: aPassword 
	
	self error: [self class errorWrongUserCredentials].! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/17/2021 21:30:15' prior: 50873976!
test01

	| mockInterface password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	mockInterface := XXX new.
	
	self should: [mockInterface createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText = XXX errorWrongUserCredentials.
			].! !

!methodRemoval: XXX #createCartUser:password: stamp: 'G.L.S 6/17/2021 21:30:15'!
createCartUser: aUser password: aPassword 
	
	self error: [self class errorWrongUserCredentials].!

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/17/2021 21:30:23'!
FAILURE!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/17/2021 21:32:02' prior: 50874019!
test01

	| mockInterface password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	mockInterface := XXX new.
	
	self should: [mockInterface createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].! !

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/17/2021 21:32:02'!
FAILURE!

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/17/2021 21:32:20'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/17/2021 21:33:23' prior: 50874012!
createCartForUser: aUser password: aPassword 
	
	self error: self class errorWrongUserCredentials.! !

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/17/2021 21:33:27'!
PASSED!

----QUIT----(17 June 2021 22:08:36) CuisUniversity-4532.image priorSource: 17351466!

----STARTUP---- (20 June 2021 16:49:08) as /media/Datos/Cuis/Ej-Libros/linux64/CuisUniversity-4532.image!


!testRun: #XXXTest #test01 stamp: 'G.L.S 6/20/2021 16:51:31'!
PASSED!

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/20/2021 16:51:32'!
PASSED!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 16:52:03'!
test02

	| mockInterface password usuario |
	
	usuario := 'pepe'.
	password := '5678'.
	
	mockInterface := XXX new.
	
	self should: [mockInterface createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 16:53:37' prior: 50874078!
test02

	| mockInterface password usuario huboError |
	
	usuario := 'pepe'.
	password := '5678'.
	
	mockInterface := XXX new.
	
	huboError := #No.
	
	[mockInterface createCartForUser: usuario password: password] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !

!testRun: #XXXTest #test02 stamp: 'G.L.S 6/20/2021 16:53:45'!
FAILURE!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 16:55:36' prior: 50874092!
test02

	| mockInterface password usuario huboError |
	
	usuario := 'pepe'.
	password := '5678'.
	
	mockInterface := XXX new.
	
	huboError := #No.
	
	[mockInterface createCartForUser: usuario password: password] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !

!classDefinition: #XXX category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 16:56:55'!
Object subclass: #XXX
	instanceVariableNames: 'datosUsuarios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 16:56:53' prior: 50874060!
createCartForUser: aUser password: aPassword 
	
	(datosUsuarios at:aUser = aPassword) ifFalse: [self error: self class errorWrongUserCredentials].! !
!XXX methodsFor: 'nil' stamp: 'G.L.S 6/20/2021 16:57:13' overrides: 16896425!
initialize

	datosUsuarios := Dictionary new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 16:57:37' prior: 50874127!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios at:aUser) = aPassword) ifFalse: [self error: self class errorWrongUserCredentials].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 16:58:09' prior: 50874135 overrides: 16896425!
initialize

	datosUsuarios := Dictionary new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 16:59:26'!
initializeWith: aUserDataDictionary

	datosUsuarios := Dictionary new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 16:59:31' prior: 50874153!
initializeWith: aUserDataDictionary

	datosUsuarios := aUserDataDictionary.! !

!methodRemoval: XXX #initialize stamp: 'G.L.S 6/20/2021 16:59:39'!
initialize

	datosUsuarios := Dictionary new.!
!XXX class methodsFor: 'error handling' stamp: 'G.L.S 6/20/2021 17:00:55'!
createWith: aUserDataDictionary

	^self initializeWith: aUserDataDictionary.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:01:43' prior: 50874041!
test01

	| mockInterface password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockInterface createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:01:52' prior: 50874107!
test02

	| mockInterface password usuario huboError |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	[mockInterface createCartForUser: usuario password: password] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !

!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 17:02:17'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'mockXXX'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!XXXTest methodsFor: 'nil' stamp: 'G.L.S 6/20/2021 17:02:16' overrides: 16927572!
setUp
	
	mockXXX := XXX new.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:02:43' prior: 50874174!
test01

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockXXX createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:02:52' prior: 50874187!
test02

	| password usuario huboError |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	[mockXXX createCartForUser: usuario password: password] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !

!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 17:03:19'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'mockXXX userData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!XXXTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 6/20/2021 17:03:25' prior: 50874206 overrides: 16927572!
setUp
	
	userData := Dictionary new.
	
	mockXXX := XXX createWith: userData.! !
!XXXTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 6/20/2021 17:04:06' prior: 50874242 overrides: 16927572!
setUp
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	
	mockXXX := XXX createWith: userData.! !

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe at: 'jorge'!

pepe at: 'jorge' ifAbsent: [nil.] !

nil = nil.!

 true !

 true !

nil = 0.!

nil = nil.!

nil = 0.!

nil = 0.!

nil !

nil = 0.!

nil = 0.
!

nil!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 17:10:51' prior: 50874140!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios includesKey: aUser) and: [datosUsuarios at:aUser = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 17:11:22' prior: 50874262!
createCartForUser: aUser password: aPassword 
	
	(datosUsuarios at:aUser = aPassword) ifFalse: [self error: self class errorWrongUserCredentials].! !
!XXX class methodsFor: 'error handling' stamp: 'G.L.S 6/20/2021 17:12:00' prior: 50874168!
createWith: aUserDataDictionary

	^self new initializeWith: aUserDataDictionary.! !

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/20/2021 17:12:06'!
FAILURE!

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/20/2021 17:12:06'!
FAILURE!

!testRun: #XXXTest #test02 stamp: 'G.L.S 6/20/2021 17:12:15'!
FAILURE!

!testRun: #XXXTest #test02 stamp: 'G.L.S 6/20/2021 17:12:15'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 17:12:33' prior: 50874271!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios at:aUser) = aPassword) ifFalse: [self error: self class errorWrongUserCredentials].! !

!testRun: #XXXTest #test01 stamp: 'G.L.S 6/20/2021 17:12:35'!
PASSED!

!testRun: #XXXTest #test02 stamp: 'G.L.S 6/20/2021 17:12:37'!
PASSED!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:13:02'!
test03

	| password usuario |
	
	usuario := 'Jorge'.
	password := '1234'.
	
	self should: [mockXXX createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].! !

!testRun: #XXXTest #test03 stamp: 'G.L.S 6/20/2021 17:13:04'!
FAILURE!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:13:50'!
test01CannotCreateCartWithTheWrongUserPassword

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockXXX createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].! !

!methodRemoval: XXXTest #test01 stamp: 'G.L.S 6/20/2021 17:13:50'!
test01

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockXXX createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:14:28'!
test02CreateCartForAnExistingUserDoesNotFail

	| password usuario huboError |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	[mockXXX createCartForUser: usuario password: password] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !

!methodRemoval: XXXTest #test02 stamp: 'G.L.S 6/20/2021 17:14:28'!
test02

	| password usuario huboError |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	[mockXXX createCartForUser: usuario password: password] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:14:53'!
test03CannotCreateCartForAUserThatDoesntExist

	| password usuario |
	
	usuario := 'Jorge'.
	password := '1234'.
	
	self should: [mockXXX createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].! !

!methodRemoval: XXXTest #test03 stamp: 'G.L.S 6/20/2021 17:14:53'!
test03

	| password usuario |
	
	usuario := 'Jorge'.
	password := '1234'.
	
	self should: [mockXXX createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 17:15:07' prior: 50874294!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios includesKey: aUser) and: [datosUsuarios at:aUser = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].! !

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 17:15:11'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 17:15:16'!
FAILURE!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 17:15:16'!
FAILURE!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 17:15:16'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 17:15:23'!
FAILURE!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 17:15:23'!
FAILURE!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe add: 'jorge' -> 2324254.!

pepe add: 'jorge' -> 2324254.!

pepe includesKey: 'jorge'.!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 17:16:17' prior: 50874392!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios includesKey: aUser) and: [(datosUsuarios at:aUser) = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].! !

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 17:16:22'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 17:16:24'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 17:16:26'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 17:16:30'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 17:16:30'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 17:16:30'!
PASSED!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:20:17' prior: 50874366!
test03CannotCreateCartForAUserThatDoesntExist

	| password usuarioNoExistente |
	
	usuarioNoExistente := 'Jorge'.
	password := '1234'.
	
	self should: [mockXXX createCartForUser: usuarioNoExistente password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:32:09'!
test04CannotAddItemToAnUnexistentCart

	| password usuarioNoExistente |
	
	usuarioNoExistente := 'Jorge'.
	password := '1234'.
	
	self should: [mockXXX createCartForUser: usuarioNoExistente password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:33:09' prior: 50874472!
test04CannotAddItemToAnUnexistentCart
	
	self should: [mockXXX addItem: '12345678' toCart: '00000000'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorWrongUserCredentials.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:40:29' prior: 50874487!
test04CannotAddItemToAnUnexistentCart
	
	self should: [mockXXX addItem: '12345678' toCart: '00000000'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:41:06' prior: 50874498!
test04CannotAddItemToAnUnexistentCart
	
	self should: [mockXXX add: '' ofItem: '12345678' toCart: '00000000'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:41:14' prior: 50874509!
test04CannotAddItemToAnUnexistentCart
	
	self should: [mockXXX add: 17 ofItem: '12345678' toCart: '00000000'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:48:42' prior: 50874520!
test04CannotAddItemToAnUnexistentCart
	
	self should: [mockXXX add: 17 ofItem: '9780201113723' toCart: '00000000'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 17:57:28' prior: 50874531!
test04CannotAddItemToAnUnexistentCart
	
	self should: [mockXXX add: 17 ofItem: '9780201113723' toCart: '00000000']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 17:58:25'!
ERROR!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 17:58:35'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 17:58:46'!
add: aSmallInteger ofItem: aString toCart: aString3 
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 17:59:10' prior: 50874561!
add: anAmount ofItem: anItemID toCart: aCartID 
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 17:59:56' prior: 50874567!
add: anAmount ofItem: anItemID toCart: aCartID 
	self error: self class errorCartIdDoesntExist.! !

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 17:59:59'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 18:00:18' prior: 50874573!
add: anAmount ofItem: anItemID toCart: aCartID 
	self error: self class errorCartIdDoesNotExist.! !

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 18:00:27'!
ERROR!
!XXX class methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 18:01:09'!
errorCartIdDoesNotExist
	self shouldBeImplemented.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 18:01:47' prior: 50874592!
errorCartIdDoesNotExist
	^'Error - No existe un carrito con esa ID'.! !

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 18:01:48'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 18:01:48'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 18:01:48'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 18:01:48'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 18:01:48'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 18:01:54'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 18:01:54'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 18:01:54'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 18:01:54'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 18:01:54'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 18:38:04'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 18:38:04'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 18:38:04'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 18:38:04'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 18:38:04'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:05:49'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 19:05:49'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 19:05:49'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 19:05:49'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:05:49'!
PASSED!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:06:28' prior: 50874583!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	self error: self class errorCartIdDoesNotExist.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:09:01'!
test05
	
	self should: [mockXXX add: 17 ofItem: '9780201113723' toCart: '00000000']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:09:08' prior: 50874675!
test05
	
	
	
	self should: [mockXXX add: 17 ofItem: '9780201113723' toCart: '00000000']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:09:21' prior: 50874686!
test05
	
	| password usuario |
	usuario := 'pepe'.
	password := '5678'.
	
	self should: [mockXXX add: 17 ofItem: '9780201113723' toCart: '00000000']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:09:47' prior: 50874697!
test05
	
	| password usuario cartId |
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	self should: [mockXXX add: 17 ofItem: '9780201113723' toCart: '00000000']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:10:23' prior: 50874710!
test05
	
	| password usuario cartId |
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	self should: [mockXXX add: 17 ofItem: '9780201113723' toCart: cartId]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:10:40' prior: 50874725!
test05
	
	| password usuario cartId |
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	mockXXX add: 17 ofItem: '9780201113723' toCart: cartId.
		! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:11:00' prior: 50874740!
test05
	
	| password usuario cartId huboError |
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	huboError := #No.
	
	[mockXXX add: 17 ofItem: '9780201113723' toCart: cartId.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
		! !

!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:13:48'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'mockXXX userData sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!

!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:13:50'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'mockXXX userData sales smalltalk80'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!

!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:13:51'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'mockXXX userData sales smalltalk80 designPatterns'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!

!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:13:52'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'mockXXX userData sales smalltalk80 designPatterns objectThinking'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!

!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:13:53'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'mockXXX userData sales smalltalk80 designPatterns objectThinking donQuixote'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!

!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:13:54'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'mockXXX userData sales smalltalk80 designPatterns objectThinking donQuixote emptyCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!

!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:13:56'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'mockXXX userData sales smalltalk80 designPatterns objectThinking donQuixote emptyCatalog catalog1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!

!classDefinition: #XXXTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:13:57'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'mockXXX userData sales smalltalk80 designPatterns objectThinking donQuixote emptyCatalog catalog1 catalog2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!XXXTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 6/20/2021 19:13:26' prior: 50874248 overrides: 16927572!
setUp
	
	sales := OrderedCollection new.
	
	smalltalk80 := '9780201113723'.
	designPatterns := '9780201184624'.
	objectThinking := '9780735619654'.
	donQuixote := '9781400132171'.
	
	emptyCatalog := Dictionary new.
	
	catalog1 := Dictionary new.
	catalog1 add: smalltalk80 -> 10.
	catalog1 add: designPatterns -> 100.
	catalog1 add: objectThinking -> 50.
	
	catalog2 := Dictionary new.
	catalog2 add: donQuixote -> 50.
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	
	mockXXX := XXX createWith: userData.! !
!XXXTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 6/20/2021 19:14:00' prior: 50874837 overrides: 16927572!
setUp
	
	sales := OrderedCollection new.
	
	smalltalk80 := '9780201113723'.
	designPatterns := '9780201184624'.
	objectThinking := '9780735619654'.
	donQuixote := '9781400132171'.
	
	emptyCatalog := Dictionary new.
	
	catalog1 := Dictionary new.
	catalog1 add: smalltalk80 -> 10.
	catalog1 add: designPatterns -> 100.
	catalog1 add: objectThinking -> 50.
	
	catalog2 := Dictionary new.
	catalog2 add: donQuixote -> 50.
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	
	mockXXX := XXX createWith: userData.
	! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:15:17' prior: 50874750!
test05
	
	| password usuario cartId huboError |
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	huboError := #No.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
		! !

!methodRemoval: XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:15:38'!
test05
	
	| password usuario cartId huboError |
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	huboError := #No.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
		!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:17:21'!
test05

	| password usuario huboError cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:18:00' prior: 50874902!
test05

	| password usuario huboError cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: '9780201113723' toCart: '00000000'] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:18:10' prior: 50874913!
test05

	| password usuario huboError cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: '9780201113723' toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:18:23' prior: 50874926!
test05

	| password usuario huboError cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:18:41'!
FAILURE!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:19:12' prior: 50874345!
test02CreateCartForAnExistingUserDoesNotFail

	| password usuario huboError |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	[mockXXX createCartForUser: usuario password: password] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 19:19:15'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 19:19:15'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 19:19:15'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 19:19:15'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:19:15'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:19:15'!
FAILURE!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:19:15'!
FAILURE!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 19:19:20'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:19:23'!
FAILURE!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:19:23'!
FAILURE!
!XXX class methodsFor: 'error handling' stamp: 'G.L.S 6/20/2021 19:20:38'!
createWith: aUserDataDictionary withCatalog: aCatalog 

	^self new initializeWith: aUserDataDictionary.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:20:38' prior: 50874857 overrides: 16927572!
setUp
	
	sales := OrderedCollection new.
	
	smalltalk80 := '9780201113723'.
	designPatterns := '9780201184624'.
	objectThinking := '9780735619654'.
	donQuixote := '9781400132171'.
	
	emptyCatalog := Dictionary new.
	
	catalog1 := Dictionary new.
	catalog1 add: smalltalk80 -> 10.
	catalog1 add: designPatterns -> 100.
	catalog1 add: objectThinking -> 50.
	
	catalog2 := Dictionary new.
	catalog2 add: donQuixote -> 50.
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	
	mockXXX := XXX createWith: userData withCatalog: catalog1.
	! !

!methodRemoval: XXX class #createWith: stamp: 'G.L.S 6/20/2021 19:20:38'!
createWith: aUserDataDictionary

	^self new initializeWith: aUserDataDictionary.!
!XXX class methodsFor: 'error handling' stamp: 'G.L.S 6/20/2021 19:21:06'!
createFor: aUserDataDictionary withCatalog: aCatalog 

	^self new initializeWith: aUserDataDictionary.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:21:06' prior: 50875002 overrides: 16927572!
setUp
	
	sales := OrderedCollection new.
	
	smalltalk80 := '9780201113723'.
	designPatterns := '9780201184624'.
	objectThinking := '9780735619654'.
	donQuixote := '9781400132171'.
	
	emptyCatalog := Dictionary new.
	
	catalog1 := Dictionary new.
	catalog1 add: smalltalk80 -> 10.
	catalog1 add: designPatterns -> 100.
	catalog1 add: objectThinking -> 50.
	
	catalog2 := Dictionary new.
	catalog2 add: donQuixote -> 50.
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	
	mockXXX := XXX createFor: userData withCatalog: catalog1.
	! !

!methodRemoval: XXX class #createWith:withCatalog: stamp: 'G.L.S 6/20/2021 19:21:06'!
createWith: aUserDataDictionary withCatalog: aCatalog 

	^self new initializeWith: aUserDataDictionary.!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 19:21:10'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 19:21:12'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 19:21:14'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:21:16'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:21:20'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:22:33'!
initializeWith: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:22:33' prior: 50875027!
createFor: aUserDataDictionary withCatalog: aCatalog 

	^self new initializeWith: aUserDataDictionary withCatalog: aCatalog.! !

!methodRemoval: XXX #initializeWith: stamp: 'G.L.S 6/20/2021 19:22:33'!
initializeWith: aUserDataDictionary

	datosUsuarios := aUserDataDictionary.!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:22:56'!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:22:56' prior: 50875083!
createFor: aUserDataDictionary withCatalog: aCatalog 

	^self new initializeFor: aUserDataDictionary withCatalog: aCatalog.! !

!methodRemoval: XXX #initializeWith:withCatalog: stamp: 'G.L.S 6/20/2021 19:22:56'!
initializeWith: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.!

!classDefinition: #XXX category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:23:12'!
Object subclass: #XXX
	instanceVariableNames: 'datosUsuarios catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:23:11' prior: 50875094!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog .! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:23:13' prior: 50875121!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.! !

!testRun: #CartTest #test01CartThatWasJustCreatedIsEmpty stamp: 'G.L.S 6/20/2021 19:23:20'!
PASSED!

!testRun: #CartTest #test02CartWithAnItemIsNotEmpty stamp: 'G.L.S 6/20/2021 19:23:20'!
PASSED!

!testRun: #CartTest #test03CartWithSeveralItemsAddedContainsTheRightItemsAndAmounts stamp: 'G.L.S 6/20/2021 19:23:20'!
PASSED!

!testRun: #CartTest #test04CartCannotAddItemsThatAreNotAllowed stamp: 'G.L.S 6/20/2021 19:23:20'!
PASSED!

!testRun: #CartTest #test05CartCannotAddANonIntegerAmountOfAnItem stamp: 'G.L.S 6/20/2021 19:23:20'!
PASSED!

!testRun: #CartTest #test06CartCannotAddANegativeAmountOfAnItem stamp: 'G.L.S 6/20/2021 19:23:20'!
PASSED!

!testRun: #CartTest #test07CartCannotAddAZeroAmountOfAnItem stamp: 'G.L.S 6/20/2021 19:23:20'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutWithAnEmptyCart stamp: 'G.L.S 6/20/2021 19:23:22'!
PASSED!

!testRun: #CashierTest #test02CashierCannotCheckoutWithACartWithThatDoesntHaveAMatchingCatalog stamp: 'G.L.S 6/20/2021 19:23:22'!
PASSED!

!testRun: #CashierTest #test03CheckoutReturnsTheRightAmount stamp: 'G.L.S 6/20/2021 19:23:22'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckOutWithAnExpiredCard stamp: 'G.L.S 6/20/2021 19:23:22'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutRegistersSale stamp: 'G.L.S 6/20/2021 19:23:22'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAStolenCard stamp: 'G.L.S 6/20/2021 19:23:22'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutWithAFakeCard stamp: 'G.L.S 6/20/2021 19:23:22'!
PASSED!

!testRun: #CashierTest #test08CashierCannotCheckoutWithACardWithoutMoney stamp: 'G.L.S 6/20/2021 19:23:22'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardCannotHaveEmptyOwner stamp: 'G.L.S 6/20/2021 19:23:24'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberForACreditCardCannotHaveLessThan16Digits stamp: 'G.L.S 6/20/2021 19:23:24'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberForACreditCardCannotHaveMoreThan16Digits stamp: 'G.L.S 6/20/2021 19:23:24'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 19:23:27'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 19:23:29'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 19:23:31'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:23:32'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:23:41'!
FAILURE!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:24:54' prior: 50874939!
test05

	| password usuario huboError cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockXXX listCart: cartId) isEmpty. ! !

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:24:57'!
FAILURE!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:25:13' prior: 50875214!
test05

	| password usuario huboError cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockXXX listCart: cartId) isEmpty.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:31:22' prior: 50874428!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios includesKey: aUser) and: [(datosUsuarios at:aUser) = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].! !

!classDefinition: #XXX category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:31:45'!
Object subclass: #XXX
	instanceVariableNames: 'datosUsuarios catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:31:43' prior: 50875128!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.! !

!classDefinition: #XXX category: 'Ejercicio-Libros' stamp: 'G.L.S 6/20/2021 19:32:20'!
Object subclass: #XXX
	instanceVariableNames: 'datosUsuarios catalog carts lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:32:13' prior: 50875263!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.! !

pepe add: 23 -> 25.!

pepe at:23.!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:33:34' prior: 50874543!
test04CannotAddItemToAnUnexistentCart
	
	self should: [mockXXX add: 17 ofItem: '9780201113723' toCart: 0]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:33:35'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 19:33:35'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 19:33:35'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 19:33:35'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:33:35'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:33:35'!
FAILURE!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:33:35'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:33:47' prior: 50875279!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 1.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:33:51' prior: 50875321!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 19:34:34' prior: 50875288!
test04CannotAddItemToAnUnexistentCart
	
	self should: [mockXXX add: 17 ofItem: smalltalk80 toCart: 0]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartIdDoesNotExist.
			].! !

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:34:36'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 19:34:36'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 19:34:36'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 19:34:36'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:34:36'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:34:36'!
FAILURE!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:34:36'!
FAILURE!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 19:34:42'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:34:44'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:34:47'!
FAILURE!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:34:47'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:35:41' prior: 50875246!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios includesKey: aUser) and: [(datosUsuarios at:aUser) = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].
	
	carts add:(lastId + 1)! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:36:21' prior: 50875381!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios includesKey: aUser) and: [(datosUsuarios at:aUser) = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].
	
	carts add:(lastId + 1) -> (Cart createNewWithCatalog: catalog)
	lastId = lastId +1.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:36:28' prior: 50875391!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios includesKey: aUser) and: [(datosUsuarios at:aUser) = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].
	
	carts add:(lastId + 1) -> (Cart createNewWithCatalog: catalog).
	lastId = lastId +1.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:37:27' prior: 50875403!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios includesKey: aUser) and: [(datosUsuarios at:aUser) = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].
	
	carts add:1000 -> (Cart createNewWithCatalog: catalog).! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:37:34' prior: 50875329!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new..! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:37:36' prior: 50875426!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:49:55' prior: 50874669!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	self assertCartExists: aCartID.
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:50:00' prior: 50875442!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	self assertCartExists: aCartID.
	
	
	self error: self class errorCartIdDoesNotExist.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:50:09'!
assertCartExists: aCartID. 

	self error: self class errorCartIdDoesNotExist.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:50:20' prior: 50875448!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	self assertCartExists: aCartID.
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:50:50' prior: 50875455!
assertCartExists: aCartID. 

	(carts includesKey: aCartID) ifFalse: [self error: self class errorCartIdDoesNotExist.]! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:50:53' prior: 50875467!
assertCartExists: aCartID. 

	(carts includesKey: aCartID) ifFalse: [self error: self class errorCartIdDoesNotExist.].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:51:22' prior: 50875415!
createCartForUser: aUser password: aPassword 
	
	((datosUsuarios includesKey: aUser) and: [(datosUsuarios at:aUser) = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].
	
	carts add:1000 -> (Cart createNewWithCatalog: catalog).
	
	^1000.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:52:02' prior: 50875461!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	| cart |
	self assertCartExists: aCartID.
	
	cart := carts at: aCartID. 
	
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:52:23' prior: 50875493!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	| cart |
	self assertCartExists: aCartID.
	
	cart := carts at: aCartID. 
	cart add: anItemID amount: anAmount.
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:52:24' prior: 50875500!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	| cart |
	self assertCartExists: aCartID.
	
	cart := carts at: aCartID.
	cart add: anItemID amount: anAmount.
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:52:32' prior: 50875509!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	| cart |
	self assertCartExists: aCartID.
	
	cart := carts at: aCartID.
	cart add: anItemID amount: anAmount.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:52:33' prior: 50875518!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	| cart |
	self assertCartExists: aCartID.
	
	cart := carts at: aCartID.
	cart add: anItemID amount: anAmount.
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:52:45'!
listCart: aCartID 

	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:53:15' prior: 50875534!
listCart: aCartID 

	^(carts at: aCartID)
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:55:26' prior: 50875538!
listCart: aCartID 

	^(carts at: aCartID) itemListFor: self.
	! !
!Cart methodsFor: 'nil' stamp: 'G.L.S 6/20/2021 19:57:06'!
itemListFor: aXXX! !
!Cart methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:57:53'!
itemList
	^cartItems! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 19:58:02' prior: 50875543!
listCart: aCartID 

	^(carts at: aCartID) itemList.
	! !

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 19:58:12'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 19:58:14'!
PASSED!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 20:00:07'!
test06

	| password usuario huboError cartId1 cartId2 password2 usuario2 |
	
	usuario := 'pepe'.
	password := '5678'.
	
	usuario2 := 'ramon'.
	password2 := '1234'.
	
	huboError := #No.
	
	cartId1 := mockXXX createCartForUser: usuario password: password.
	cartId2 := mockXXX createCartForUser: usuario2 password: password2.
	
	self deny: (cartId1 = cartId2).! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/20/2021 20:00:22' prior: 50875564!
test06

	| password usuario cartId1 cartId2 password2 usuario2 |
	
	usuario := 'pepe'.
	password := '5678'.
	
	usuario2 := 'ramon'.
	password2 := '1234'.
	
	cartId1 := mockXXX createCartForUser: usuario password: password.
	cartId2 := mockXXX createCartForUser: usuario2 password: password2.
	
	self deny: (cartId1 = cartId2).! !
!XXXTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 6/20/2021 20:00:46' prior: 50875034 overrides: 16927572!
setUp
	
	sales := OrderedCollection new.
	
	smalltalk80 := '9780201113723'.
	designPatterns := '9780201184624'.
	objectThinking := '9780735619654'.
	donQuixote := '9781400132171'.
	
	emptyCatalog := Dictionary new.
	
	catalog1 := Dictionary new.
	catalog1 add: smalltalk80 -> 10.
	catalog1 add: designPatterns -> 100.
	catalog1 add: objectThinking -> 50.
	
	catalog2 := Dictionary new.
	catalog2 add: donQuixote -> 50.
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	userData add: 'ramon' -> '1234'.
	
	mockXXX := XXX createFor: userData withCatalog: catalog1.
	! !

!testRun: #XXXTest #test06 stamp: 'G.L.S 6/20/2021 20:00:52'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 20:02:01' prior: 50875481!
createCartForUser: aUser password: aPassword 
	
	| newId |
	((datosUsuarios includesKey: aUser) and: [(datosUsuarios at:aUser) = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].
	
	newId := lastId+1.
	carts add:(newId) -> (Cart createNewWithCatalog: catalog).
	
	lastId := lastId + 1.
	
	^newId.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 20:02:19' prior: 50875616!
createCartForUser: aUser password: aPassword 
	
	| newId |
	((datosUsuarios includesKey: aUser) and: [(datosUsuarios at:aUser) = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].
	
	newId := lastId + 1.
	carts add:(newId) -> (Cart createNewWithCatalog: catalog).
	
	lastId := newId.
	
	^newId.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/20/2021 20:02:38' prior: 50875434!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.! !

!testRun: #XXXTest #test06 stamp: 'G.L.S 6/20/2021 20:02:43'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/20/2021 20:02:46'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/20/2021 20:02:47'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/20/2021 20:02:49'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/20/2021 20:02:51'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/20/2021 20:02:52'!
PASSED!

!testRun: #CartTest #test01CartThatWasJustCreatedIsEmpty stamp: 'G.L.S 6/20/2021 20:02:54'!
PASSED!

!testRun: #CartTest #test02CartWithAnItemIsNotEmpty stamp: 'G.L.S 6/20/2021 20:02:54'!
PASSED!

!testRun: #CartTest #test03CartWithSeveralItemsAddedContainsTheRightItemsAndAmounts stamp: 'G.L.S 6/20/2021 20:02:54'!
PASSED!

!testRun: #CartTest #test04CartCannotAddItemsThatAreNotAllowed stamp: 'G.L.S 6/20/2021 20:02:54'!
PASSED!

!testRun: #CartTest #test05CartCannotAddANonIntegerAmountOfAnItem stamp: 'G.L.S 6/20/2021 20:02:54'!
PASSED!

!testRun: #CartTest #test06CartCannotAddANegativeAmountOfAnItem stamp: 'G.L.S 6/20/2021 20:02:54'!
PASSED!

!testRun: #CartTest #test07CartCannotAddAZeroAmountOfAnItem stamp: 'G.L.S 6/20/2021 20:02:54'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutWithAnEmptyCart stamp: 'G.L.S 6/20/2021 20:02:56'!
PASSED!

!testRun: #CashierTest #test02CashierCannotCheckoutWithACartWithThatDoesntHaveAMatchingCatalog stamp: 'G.L.S 6/20/2021 20:02:56'!
PASSED!

!testRun: #CashierTest #test03CheckoutReturnsTheRightAmount stamp: 'G.L.S 6/20/2021 20:02:56'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckOutWithAnExpiredCard stamp: 'G.L.S 6/20/2021 20:02:56'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutRegistersSale stamp: 'G.L.S 6/20/2021 20:02:56'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAStolenCard stamp: 'G.L.S 6/20/2021 20:02:56'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutWithAFakeCard stamp: 'G.L.S 6/20/2021 20:02:56'!
PASSED!

!testRun: #CashierTest #test08CashierCannotCheckoutWithACardWithoutMoney stamp: 'G.L.S 6/20/2021 20:02:56'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardCannotHaveEmptyOwner stamp: 'G.L.S 6/20/2021 20:03:04'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberForACreditCardCannotHaveLessThan16Digits stamp: 'G.L.S 6/20/2021 20:03:04'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberForACreditCardCannotHaveMoreThan16Digits stamp: 'G.L.S 6/20/2021 20:03:04'!
PASSED!

!methodRemoval: Cart #itemListFor: stamp: 'G.L.S 6/20/2021 20:04:06'!
itemListFor: aXXX!

----QUIT----(20 June 2021 20:06:33) CuisUniversity-4532.image priorSource: 17357356!

----STARTUP---- (21 June 2021 15:17:56) as /media/Datos/Cuis/Ej-Libros/linux64/CuisUniversity-4532.image!


!testRun: #XXXTest #test06 stamp: 'G.L.S 6/21/2021 15:20:25'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 15:20:25'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 15:20:25'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 15:20:25'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:20:25'!
PASSED!

!testRun: #XXXTest #test05 stamp: 'G.L.S 6/21/2021 15:20:25'!
PASSED!

!testRun: #XXXTest #test06 stamp: 'G.L.S 6/21/2021 15:20:25'!
PASSED!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:21:53' prior: 50875578!
test06

	| password usuario cartId1 cartId2 password2 usuario2 |
	
	usuario := 'pepe'.
	password := '5678'.
	
	usuario2 := 'ramon'.
	password2 := '1234'.
	
	cartId1 := mockXXX createCartForUser: usuario password: password.
	cartId2 := mockXXX createCartForUser: usuario2 password: password2.
	
	self deny: (cartId1 = cartId2).! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:22:13'!
test06DifferentCartsCannotHaveTheSameId

	| password usuario cartId1 cartId2 password2 usuario2 |
	
	usuario := 'pepe'.
	password := '5678'.
	
	usuario2 := 'ramon'.
	password2 := '1234'.
	
	cartId1 := mockXXX createCartForUser: usuario password: password.
	cartId2 := mockXXX createCartForUser: usuario2 password: password2.
	
	self deny: (cartId1 = cartId2).! !

!methodRemoval: XXXTest #test06 stamp: 'G.L.S 6/21/2021 15:22:13'!
test06

	| password usuario cartId1 cartId2 password2 usuario2 |
	
	usuario := 'pepe'.
	password := '5678'.
	
	usuario2 := 'ramon'.
	password2 := '1234'.
	
	cartId1 := mockXXX createCartForUser: usuario password: password.
	cartId2 := mockXXX createCartForUser: usuario2 password: password2.
	
	self deny: (cartId1 = cartId2).!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:23:08'!
test05AddingItemsToCartWorksAsExpected

	| password usuario huboError cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockXXX listCart: cartId) isEmpty.! !

!methodRemoval: XXXTest #test05 stamp: 'G.L.S 6/21/2021 15:23:08'!
test05

	| password usuario huboError cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockXXX listCart: cartId) isEmpty.!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:29:13'!
test07

	| password usuario huboError cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockXXX listCart: cartId) isEmpty.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:30:18' prior: 50875828!
test07
	
	self should: [mockXXX listCart: 0] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:30:30' prior: 50875842!
test07
	
	self should: [mockXXX listCart: 0] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartDoesNotExist.
			].! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:30:52'!
test07CannotListItemsOfUnexistentCart
	
	self should: [mockXXX listCart: 0] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartDoesNotExist.
			].! !

!methodRemoval: XXXTest #test07 stamp: 'G.L.S 6/21/2021 15:30:52'!
test07
	
	self should: [mockXXX listCart: 0] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartDoesNotExist.
			].!

!testRun: #XXXTest #test07CannotListItemsOfUnexistentCart stamp: 'G.L.S 6/21/2021 15:30:58'!
ERROR!
!XXX class methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:31:07'!
errorCartDoesNotExist
	self shouldBeImplemented.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:31:28' prior: 50875882!
errorCartDoesNotExist
	^'Error - No existe un carrito con ese Id'.! !

!testRun: #XXXTest #test07CannotListItemsOfUnexistentCart stamp: 'G.L.S 6/21/2021 15:31:29'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:32:20' prior: 50875554!
listCart: aCartID 

	^(carts at: aCartID ifAbsent: [self class errorCartDoesNotExist]) itemList.
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:32:28' prior: 50875896!
listCart: aCartID 

	^(carts at: aCartID ifAbsent: [self error: self class errorCartDoesNotExist]) itemList.
	! !

!testRun: #XXXTest #test07CannotListItemsOfUnexistentCart stamp: 'G.L.S 6/21/2021 15:32:36'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 15:32:46'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 15:32:46'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 15:32:46'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:32:46'!
PASSED!

!testRun: #XXXTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:32:46'!
PASSED!

!testRun: #XXXTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 15:32:46'!
PASSED!

!testRun: #XXXTest #test07CannotListItemsOfUnexistentCart stamp: 'G.L.S 6/21/2021 15:32:46'!
PASSED!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:34:08'!
test07CannotListCartAnUnexistentCart
	
	self should: [mockXXX listCart: 0] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartDoesNotExist.
			].! !

!methodRemoval: XXXTest #test07CannotListItemsOfUnexistentCart stamp: 'G.L.S 6/21/2021 15:34:08'!
test07CannotListItemsOfUnexistentCart
	
	self should: [mockXXX listCart: 0] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: XXX errorCartDoesNotExist.
			].!

!testRun: #XXXTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:34:18'!
PASSED!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:35:44' prior: 50875800!
test05AddingItemsToCartWorksAsExpected

	| password usuario huboError cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockXXX listCart: cartId) isEmpty.
	
	cartList := (mockXXX listCart: cartId).! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:36:54' prior: 50875958!
test05AddingItemsToCartWorksAsExpected

	| password usuario huboError cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockXXX listCart: cartId) isEmpty.
	
	cartList := (mockXXX listCart: cartId).
	
	self assert: 17 equals: cartList first first.
	self assert: smalltalk80 equals: cartList first second.! !

!testRun: #XXXTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:36:56'!
FAILURE!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:37:09' prior: 50875975!
test05AddingItemsToCartWorksAsExpected

	| password usuario huboError cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockXXX listCart: cartId) isEmpty.
	
	cartList := (mockXXX listCart: cartId).
	
	self assert: 17 equals: cartList first second.
	self assert: smalltalk80 equals: cartList first first.! !

!testRun: #XXXTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:37:12'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 15:37:12'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 15:37:12'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 15:37:12'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:37:12'!
PASSED!

!testRun: #XXXTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:37:12'!
PASSED!

!testRun: #XXXTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 15:37:12'!
PASSED!

!testRun: #XXXTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:37:12'!
PASSED!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:37:48' prior: 50875999!
test05AddingItemsToCartWorksAsExpected

	| password usuario huboError cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
	
	cartList := (mockXXX listCart: cartId).
	
	self assert: #No equals: huboError.
	self deny: (cartList ) isEmpty.
	
	self assert: 17 equals: cartList first second.
	self assert: smalltalk80 equals: cartList first first.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:37:49' prior: 50876046!
test05AddingItemsToCartWorksAsExpected

	| password usuario huboError cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
	
	cartList := (mockXXX listCart: cartId).
	
	self assert: #No equals: huboError.
	self deny: (cartList ) isEmpty.
	self assert: 17 equals: cartList first second.
	self assert: smalltalk80 equals: cartList first first.! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:37:52' prior: 50876066!
test05AddingItemsToCartWorksAsExpected

	| password usuario huboError cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
	
	cartList := (mockXXX listCart: cartId).
	
	self assert: #No equals: huboError.
	self deny: (cartList ) isEmpty.
	self assert: 17 equals: cartList first second.
	self assert: smalltalk80 equals: cartList first first.
	! !

!testRun: #XXXTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:37:54'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 15:37:54'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 15:37:54'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 15:37:54'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:37:54'!
PASSED!

!testRun: #XXXTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:37:54'!
PASSED!

!testRun: #XXXTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 15:37:54'!
PASSED!

!testRun: #XXXTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:37:54'!
PASSED!
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:38:00' prior: 50876086!
test05AddingItemsToCartWorksAsExpected

	| password usuario huboError cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
	
	cartList := (mockXXX listCart: cartId).
	
	self assert: #No equals: huboError.
	self deny: (cartList) isEmpty.
	self assert: 17 equals: cartList first second.
	self assert: smalltalk80 equals: cartList first first.
	! !
!XXXTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 15:38:19' prior: 50876132!
test05AddingItemsToCartWorksAsExpected

	| password usuario huboError cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockXXX createCartForUser: usuario password: password.
	
	[mockXXX add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
	
	cartList := (mockXXX listCart: cartId).
	
	self assert: #No equals: huboError.
	self deny: (cartList) isEmpty.
	self assert: smalltalk80 equals: cartList first first.
	self assert: 17 equals: cartList first second.
	! !

!testRun: #XXXTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:38:20'!
PASSED!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 15:38:20'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 15:38:20'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 15:38:20'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:38:20'!
PASSED!

!testRun: #XXXTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:38:20'!
PASSED!

!testRun: #XXXTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 15:38:20'!
PASSED!

!testRun: #XXXTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:38:20'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:42:12'!
itemListFor: aXXX
	^aXXX listCartItemsFor: cartItems.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:42:30' prior: 50875902!
listCart: aCartID 

	^(carts at: aCartID ifAbsent: [self error: self class errorCartDoesNotExist]) itemListFor: self.
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:42:57'!
listCartItemsFor: aCartItemList
	^aCartItemList
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:42:58' prior: 50876210!
listCartItemsFor: aCartItemList
	^aCartItemList.
	! !

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 15:43:15'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 15:43:15'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 15:43:15'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:43:15'!
PASSED!

!testRun: #XXXTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:43:15'!
PASSED!

!testRun: #XXXTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 15:43:15'!
PASSED!

!testRun: #XXXTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:43:15'!
PASSED!

!methodRemoval: Cart #itemList stamp: 'G.L.S 6/21/2021 15:43:33'!
itemList
	^cartItems!

!testRun: #XXXTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 15:43:36'!
PASSED!

!testRun: #XXXTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 15:43:36'!
PASSED!

!testRun: #XXXTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 15:43:36'!
PASSED!

!testRun: #XXXTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:43:36'!
PASSED!

!testRun: #XXXTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:43:36'!
PASSED!

!testRun: #XXXTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 15:43:36'!
PASSED!

!testRun: #XXXTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:43:36'!
PASSED!

!classRenamed: #XXX as: #MockRestInterface stamp: 'G.L.S 6/21/2021 15:46:00'!
Smalltalk renameClassNamed: #XXX as: #MockRestInterface!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:46:00' prior: 50875337!
test04CannotAddItemToAnUnexistentCart
	
	self should: [mockXXX add: 17 ofItem: smalltalk80 toCart: 0]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:46:00' prior: 50874320!
test01CannotCreateCartWithTheWrongUserPassword

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockXXX createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:46:00' prior: 50874458!
test03CannotCreateCartForAUserThatDoesntExist

	| password usuarioNoExistente |
	
	usuarioNoExistente := 'Jorge'.
	password := '1234'.
	
	self should: [mockXXX createCartForUser: usuarioNoExistente password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:46:00' prior: 50875592 overrides: 16927572!
setUp
	
	sales := OrderedCollection new.
	
	smalltalk80 := '9780201113723'.
	designPatterns := '9780201184624'.
	objectThinking := '9780735619654'.
	donQuixote := '9781400132171'.
	
	emptyCatalog := Dictionary new.
	
	catalog1 := Dictionary new.
	catalog1 add: smalltalk80 -> 10.
	catalog1 add: designPatterns -> 100.
	catalog1 add: objectThinking -> 50.
	
	catalog2 := Dictionary new.
	catalog2 add: donQuixote -> 50.
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	userData add: 'ramon' -> '1234'.
	
	mockXXX := MockRestInterface createFor: userData withCatalog: catalog1.
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:46:00' prior: 50875934!
test07CannotListCartAnUnexistentCart
	
	self should: [mockXXX listCart: 0] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartDoesNotExist.
			].! !

!classRenamed: #XXXTest as: #MockRestInterfaceTest stamp: 'G.L.S 6/21/2021 15:46:26'!
Smalltalk renameClassNamed: #XXXTest as: #MockRestInterfaceTest!
!Cart methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:46:50' prior: 50876198!
itemListFor: aMockRestInterface
	^aMockRestInterface listCartItemsFor: cartItems.! !

!classDefinition: #MockRestInterfaceTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/21/2021 15:47:11'!
TestCase subclass: #MockRestInterfaceTest
	instanceVariableNames: 'mockInterface userData sales smalltalk80 designPatterns objectThinking donQuixote emptyCatalog catalog1 catalog2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:47:11' prior: 50876285!
test01CannotCreateCartWithTheWrongUserPassword

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockInterface createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:47:11' prior: 50876300!
test03CannotCreateCartForAUserThatDoesntExist

	| password usuarioNoExistente |
	
	usuarioNoExistente := 'Jorge'.
	password := '1234'.
	
	self should: [mockInterface createCartForUser: usuarioNoExistente password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:47:11' prior: 50874954!
test02CreateCartForAnExistingUserDoesNotFail

	| password usuario huboError |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	[mockInterface createCartForUser: usuario password: password] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:47:11' prior: 50876273!
test04CannotAddItemToAnUnexistentCart
	
	self should: [mockInterface add: 17 ofItem: smalltalk80 toCart: 0]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:47:11' prior: 50876338!
test07CannotListCartAnUnexistentCart
	
	self should: [mockInterface listCart: 0] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartDoesNotExist.
			].! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:47:11' prior: 50876316 overrides: 16927572!
setUp
	
	sales := OrderedCollection new.
	
	smalltalk80 := '9780201113723'.
	designPatterns := '9780201184624'.
	objectThinking := '9780735619654'.
	donQuixote := '9781400132171'.
	
	emptyCatalog := Dictionary new.
	
	catalog1 := Dictionary new.
	catalog1 add: smalltalk80 -> 10.
	catalog1 add: designPatterns -> 100.
	catalog1 add: objectThinking -> 50.
	
	catalog2 := Dictionary new.
	catalog2 add: donQuixote -> 50.
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	userData add: 'ramon' -> '1234'.
	
	mockInterface := MockRestInterface createFor: userData withCatalog: catalog1.
	! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:47:11' prior: 50875774!
test06DifferentCartsCannotHaveTheSameId

	| password usuario cartId1 cartId2 password2 usuario2 |
	
	usuario := 'pepe'.
	password := '5678'.
	
	usuario2 := 'ramon'.
	password2 := '1234'.
	
	cartId1 := mockInterface createCartForUser: usuario password: password.
	cartId2 := mockInterface createCartForUser: usuario2 password: password2.
	
	self deny: (cartId1 = cartId2).! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:47:11' prior: 50876152!
test05AddingItemsToCartWorksAsExpected

	| password usuario huboError cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	[mockInterface add: 17 ofItem: smalltalk80 toCart: cartId] 
		on: Error 
		do: [huboError := #Si].
	
	cartList := (mockInterface listCart: cartId).
	
	self assert: #No equals: huboError.
	self deny: (cartList) isEmpty.
	self assert: smalltalk80 equals: cartList first first.
	self assert: 17 equals: cartList first second.
	! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 15:47:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 15:47:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 15:47:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:47:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:47:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 15:47:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:47:18'!
PASSED!

!testRun: #CartTest #test01CartThatWasJustCreatedIsEmpty stamp: 'G.L.S 6/21/2021 15:47:21'!
PASSED!

!testRun: #CartTest #test02CartWithAnItemIsNotEmpty stamp: 'G.L.S 6/21/2021 15:47:21'!
PASSED!

!testRun: #CartTest #test03CartWithSeveralItemsAddedContainsTheRightItemsAndAmounts stamp: 'G.L.S 6/21/2021 15:47:21'!
PASSED!

!testRun: #CartTest #test04CartCannotAddItemsThatAreNotAllowed stamp: 'G.L.S 6/21/2021 15:47:21'!
PASSED!

!testRun: #CartTest #test05CartCannotAddANonIntegerAmountOfAnItem stamp: 'G.L.S 6/21/2021 15:47:21'!
PASSED!

!testRun: #CartTest #test06CartCannotAddANegativeAmountOfAnItem stamp: 'G.L.S 6/21/2021 15:47:21'!
PASSED!

!testRun: #CartTest #test07CartCannotAddAZeroAmountOfAnItem stamp: 'G.L.S 6/21/2021 15:47:21'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutWithAnEmptyCart stamp: 'G.L.S 6/21/2021 15:47:23'!
PASSED!

!testRun: #CashierTest #test02CashierCannotCheckoutWithACartWithThatDoesntHaveAMatchingCatalog stamp: 'G.L.S 6/21/2021 15:47:23'!
PASSED!

!testRun: #CashierTest #test03CheckoutReturnsTheRightAmount stamp: 'G.L.S 6/21/2021 15:47:23'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckOutWithAnExpiredCard stamp: 'G.L.S 6/21/2021 15:47:23'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutRegistersSale stamp: 'G.L.S 6/21/2021 15:47:23'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAStolenCard stamp: 'G.L.S 6/21/2021 15:47:23'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutWithAFakeCard stamp: 'G.L.S 6/21/2021 15:47:23'!
PASSED!

!testRun: #CashierTest #test08CashierCannotCheckoutWithACardWithoutMoney stamp: 'G.L.S 6/21/2021 15:47:23'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardCannotHaveEmptyOwner stamp: 'G.L.S 6/21/2021 15:47:25'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberForACreditCardCannotHaveLessThan16Digits stamp: 'G.L.S 6/21/2021 15:47:25'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberForACreditCardCannotHaveMoreThan16Digits stamp: 'G.L.S 6/21/2021 15:47:25'!
PASSED!
!Behavior method!
createNewWithCatalog: anOrderedCollection
	^ [
	([
	(self coverAll:
		{46 to: 49}) new ] valueCoveringAll:
		{51 to: 53}) initializeWith:
		(anOrderedCollection
			cover: (71 to: 89)
			declaredAt: (23 to: 41)) ] valueCoveringAll:
		{55 to: 69}.! !
!Behavior method!
initializeWith: anOrderedCollection
	(catalog _ anOrderedCollection
		cover: (49 to: 67)
		declaredAt: (17 to: 35))
		cover: (38 to: 44)
		declaredAt: (38 to: 44).
	(cartItems _ [
	(OrderedCollection
		cover: (84 to: 100)
		declaredAt: (84 to: 100)) new ] valueCoveringAll:
		{102 to: 104})
		cover: (71 to: 79)
		declaredAt: (71 to: 79).! !
!Behavior method!
isEmpty
	^ [
	(cartItems
		cover: (11 to: 19)
		declaredAt: (11 to: 19)) isEmpty ] valueCoveringAll:
		{21 to: 27}.! !

!testRun: #CartTest #test01CartThatWasJustCreatedIsEmpty stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
add: aBook
	[
	(self coverAll:
		{14 to: 17})
		add:
			(aBook
				cover: (24 to: 28)
				declaredAt: (6 to: 10))
		amount:
			(1 coverAll:
				{38 to: 38}) ] valueCoveringAll:
		{19 to: 22. 30 to: 36}.! !
!Behavior method!
add: aBook amount: anAmount
	| tuplaLibroCant |
	[
	(self coverAll:
		{53 to: 56}) assertBookIsAllowed:
		(aBook
			cover: (79 to: 83)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{58 to: 77}.
	[
	(self coverAll:
		{87 to: 90}) assertAmountIsValid:
		(anAmount
			cover: (113 to: 120)
			declaredAt: (20 to: 27)) ] valueCoveringAll:
		{92 to: 111}.
	(tuplaLibroCant _ [
	(OrderedCollection
		cover: (144 to: 160)
		declaredAt: (144 to: 160)) new ] valueCoveringAll:
		{162 to: 164})
		cover: (126 to: 139)
		declaredAt: (33 to: 46).
	[
	(tuplaLibroCant
		cover: (168 to: 181)
		declaredAt: (33 to: 46)) add:
		(aBook
			cover: (188 to: 192)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{183 to: 186}.
	[
	(tuplaLibroCant
		cover: (196 to: 209)
		declaredAt: (33 to: 46)) add:
		(anAmount
			cover: (216 to: 223)
			declaredAt: (20 to: 27)) ] valueCoveringAll:
		{211 to: 214}.
	[
	(cartItems
		cover: (229 to: 237)
		declaredAt: (229 to: 237)) add:
		(tuplaLibroCant
			cover: (244 to: 257)
			declaredAt: (33 to: 46)) ] valueCoveringAll:
		{239 to: 242}.! !
!Behavior method!
assertBookIsAllowed: aBook
	[
	([
	([
	(catalog
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) keys ] valueCoveringAll:
		{39 to: 42}) includes:
		(aBook
			cover: (54 to: 58)
			declaredAt: (22 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			([
			(self coverAll:
				{82 to: 85}) class ] valueCoveringAll:
				{87 to: 91}) errorBookNotInAllowedList ] valueCoveringAll:
				{93 to: 117}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{61 to: 68}.! !
!Behavior method!
assertAmountIsValid: anAmount
	self coverAll:
		{65 to: 68}.
	[
	([
	(anAmount
		cover: (35 to: 42)
		declaredAt: (22 to: 29)) isInteger ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{77 to: 80}) error:
			([
			([
			(self coverAll:
				{137 to: 140}) class ] valueCoveringAll:
				{82 to: 86}) errorAmountNotInteger ] valueCoveringAll:
				{88 to: 108}) ] valueCoveringAll:
			{70 to: 75} ]] valueCoveringAll:
		{55 to: 62}.
	[
	([
	(anAmount
		cover: (114 to: 121)
		declaredAt: (22 to: 29)) <
		(0 coverAll:
			{125 to: 125}) ] valueCoveringAll:
		{123 to: 123}) ifTrue: [
		[
		(self coverAll:
			{149 to: 152}) error:
			([
			([
			(self coverAll:
				{207 to: 210}) class ] valueCoveringAll:
				{154 to: 158}) errorAmountNegative ] valueCoveringAll:
				{160 to: 178}) ] valueCoveringAll:
			{142 to: 147} ]] valueCoveringAll:
		{128 to: 134}.
	[
	([
	(anAmount
		cover: (184 to: 191)
		declaredAt: (22 to: 29)) =
		(0 coverAll:
			{195 to: 195}) ] valueCoveringAll:
		{193 to: 193}) ifTrue: [
		[
		(self coverAll:
			{219 to: 222}) error:
			([
			([ self class ] valueCoveringAll:
				{224 to: 228}) errorAmountZero ] valueCoveringAll:
				{230 to: 244}) ] valueCoveringAll:
			{212 to: 217} ]] valueCoveringAll:
		{198 to: 204}.! !

!testRun: #CartTest #test02CartWithAnItemIsNotEmpty stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
size
	^ [
	(cartItems
		cover: (8 to: 16)
		declaredAt: (8 to: 16)) size ] valueCoveringAll:
		{18 to: 21}.! !
!Behavior method!
first
	^ [
	(cartItems
		cover: (9 to: 17)
		declaredAt: (9 to: 17)) first ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
second
	^ [
	(cartItems
		cover: (10 to: 18)
		declaredAt: (10 to: 18)) second ] valueCoveringAll:
		{20 to: 25}.! !

!testRun: #CartTest #test03CartWithSeveralItemsAddedContainsTheRightItemsAndAmounts stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorBookNotInAllowedList
	^ 'Error - El Libro no est� en la lista de productos permitidos' coverAll:
		{29 to: 90}.! !

!testRun: #CartTest #test04CartCannotAddItemsThatAreNotAllowed stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorAmountNotInteger
	^ 'Error - La cantidad tiene que ser un n�mero entero' coverAll:
		{25 to: 76}.! !

!testRun: #CartTest #test05CartCannotAddANonIntegerAmountOfAnItem stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorAmountNegative
	^ 'Error - La cantidad no puede ser negativa' coverAll:
		{23 to: 65}.! !

!testRun: #CartTest #test06CartCannotAddANegativeAmountOfAnItem stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorAmountZero
	^ 'Error - La cantidad de libros no puede ser 0' coverAll:
		{19 to: 64}.! !

!testRun: #CartTest #test07CartCannotAddAZeroAmountOfAnItem stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeForOwner:
			(anOwner
				cover: (106 to: 112)
				declaredAt: (11 to: 17))
		withNumber:
			(aCreditCardNumber
				cover: (126 to: 142)
				declaredAt: (31 to: 47))
		withExpirationDate:
			(aDate
				cover: (164 to: 168)
				declaredAt: (69 to: 73)) ] valueCoveringAll:
		{86 to: 104. 114 to: 124. 144 to: 162}.! !
!Behavior method!
initializeForOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate
	[
	(self coverAll:
		{88 to: 91}) assertNameNotEmpty:
		(anOwner
			cover: (113 to: 119)
			declaredAt: (21 to: 27)) ] valueCoveringAll:
		{93 to: 111}.
	[
	(self coverAll:
		{123 to: 126}) assertCardNumberIsCorrect:
		(aCreditCardNumber
			cover: (155 to: 171)
			declaredAt: (41 to: 57)) ] valueCoveringAll:
		{128 to: 153}.
	(owner _ anOwner
		cover: (185 to: 191)
		declaredAt: (21 to: 27))
		cover: (176 to: 180)
		declaredAt: (176 to: 180).
	(creditCardNumber _ aCreditCardNumber
		cover: (215 to: 231)
		declaredAt: (41 to: 57))
		cover: (195 to: 210)
		declaredAt: (195 to: 210).
	(expirationDate _ aDate
		cover: (253 to: 257)
		declaredAt: (79 to: 83))
		cover: (235 to: 248)
		declaredAt: (235 to: 248).! !
!Behavior method!
assertNameNotEmpty: anOwner
	[
	([
	([
	(anOwner
		cover: (32 to: 38)
		declaredAt: (21 to: 27)) withBlanksTrimmed ] valueCoveringAll:
		{40 to: 56}) isEmpty ] valueCoveringAll:
		{58 to: 64}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			([
			(self coverAll:
				{87 to: 90}) class ] valueCoveringAll:
				{92 to: 96}) errorOwnerEmpty ] valueCoveringAll:
				{98 to: 112}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{66 to: 72}.! !
!Behavior method!
assertCardNumberIsCorrect: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (49 to: 65)
		declaredAt: (28 to: 44)) size ] valueCoveringAll:
		{67 to: 70}) <
		(16 coverAll:
			{74 to: 75}) ] valueCoveringAll:
		{72 to: 72}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) error:
			([
			([
			(self coverAll:
				{99 to: 102}) class ] valueCoveringAll:
				{104 to: 108}) errorCardNumberLessThan16Digits ] valueCoveringAll:
				{110 to: 140}) ] valueCoveringAll:
			{92 to: 97} ]] valueCoveringAll:
		{78 to: 84}.
	[
	([
	([
	(aCreditCardNumber
		cover: (146 to: 162)
		declaredAt: (28 to: 44)) size ] valueCoveringAll:
		{164 to: 167}) >
		(16 coverAll:
			{171 to: 172}) ] valueCoveringAll:
		{169 to: 169}) ifTrue: [
		[
		(self coverAll:
			{184 to: 187}) error:
			([
			([
			(self coverAll:
				{196 to: 199}) class ] valueCoveringAll:
				{201 to: 205}) errorCardNumberMoreThan16Digits ] valueCoveringAll:
				{207 to: 237}) ] valueCoveringAll:
			{189 to: 194} ]] valueCoveringAll:
		{175 to: 181}.! !
!Behavior method!
initialize
	(stolenCards _ [
	(OrderedCollection
		cover: (29 to: 45)
		declaredAt: (29 to: 45)) new ] valueCoveringAll:
		{47 to: 49})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).
	(registeredCards _ [
	(Dictionary
		cover: (72 to: 81)
		declaredAt: (72 to: 81)) new ] valueCoveringAll:
		{83 to: 85})
		cover: (53 to: 67)
		declaredAt: (53 to: 67).! !
!Behavior method!
registerStolenCard: aCreditCard
	[
	(stolenCards
		cover: (36 to: 46)
		declaredAt: (36 to: 46)) add:
		(aCreditCard
			cover: (53 to: 63)
			declaredAt: (21 to: 31)) ] valueCoveringAll:
		{48 to: 51}.! !
!Behavior method!
registerCard: aCreditCard withBalance: aBalance
	[
	(registeredCards
		cover: (52 to: 66)
		declaredAt: (52 to: 66)) add:
		([
		(aCreditCard
			cover: (73 to: 83)
			declaredAt: (15 to: 25)) ->
			(aBalance
				cover: (88 to: 95)
				declaredAt: (40 to: 47)) ] valueCoveringAll:
			{85 to: 86}) ] valueCoveringAll:
		{68 to: 71}.! !
!Behavior method!
errorCannotCheckoutEmptyCart
	^ 'Error - No se puede hacer checkout de un carrito vac�o' coverAll:
		{32 to: 87}.! !
!Behavior method!
withCatalog: aDictionary
	^ [
	([
	(self coverAll:
		{29 to: 32}) new ] valueCoveringAll:
		{34 to: 36}) initializeWithCatalog:
		(aDictionary
			cover: (61 to: 71)
			declaredAt: (14 to: 24)) ] valueCoveringAll:
		{38 to: 59}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).! !
!Behavior method!
checkout: aCart withCreditCard: aCreditCard onDate: aDate registerOn: aSalesBook forMerchantProcessor: aMerchantProcessor
	| total |
	[
	(self coverAll:
		{143 to: 146}) assertCartIsNotEmpty:
		(aCart
			cover: (170 to: 174)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{148 to: 168}.
	[
	(self coverAll:
		{178 to: 181}) assertCartHasTheSameCatalog:
		(aCart
			cover: (212 to: 216)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{183 to: 210}.
	[
	(self coverAll:
		{220 to: 223})
		assertCard:
			(aCreditCard
				cover: (237 to: 247)
				declaredAt: (33 to: 43))
		hasNotExpiredOn:
			(aDate
				cover: (266 to: 270)
				declaredAt: (53 to: 57)) ] valueCoveringAll:
		{225 to: 235. 249 to: 264}.
	[
	(self coverAll:
		{274 to: 277})
		assertCard:
			(aCreditCard
				cover: (291 to: 301)
				declaredAt: (33 to: 43))
		isNotStolenFor:
			(aMerchantProcessor
				cover: (319 to: 336)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{279 to: 289. 303 to: 317}.
	[
	(self coverAll:
		{340 to: 343})
		assertCard:
			(aCreditCard
				cover: (357 to: 367)
				declaredAt: (33 to: 43))
		isRegisteredOn:
			(aMerchantProcessor
				cover: (385 to: 402)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{345 to: 355. 369 to: 383}.
	(total _ [
	(aCart
		cover: (417 to: 421)
		declaredAt: (11 to: 15)) totalItemPrice ] valueCoveringAll:
		{423 to: 436})
		cover: (408 to: 412)
		declaredAt: (132 to: 136).
	[
	(self coverAll:
		{442 to: 445})
		assertCard:
			(aCreditCard
				cover: (459 to: 469)
				declaredAt: (33 to: 43))
		canSpend:
			(total
				cover: (481 to: 485)
				declaredAt: (132 to: 136))
		on:
			(aMerchantProcessor
				cover: (491 to: 508)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{447 to: 457. 471 to: 479. 487 to: 489}.
	[
	(aSalesBook
		cover: (514 to: 523)
		declaredAt: (71 to: 80)) add:
		(total
			cover: (530 to: 534)
			declaredAt: (132 to: 136)) ] valueCoveringAll:
		{525 to: 528}.
	^ total
		cover: (541 to: 545)
		declaredAt: (132 to: 136).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (32 to: 36)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{38 to: 44}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			([
			(self coverAll:
				{67 to: 70}) class ] valueCoveringAll:
				{72 to: 76}) errorCannotCheckoutEmptyCart ] valueCoveringAll:
				{78 to: 105}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !

!testRun: #CashierTest #test01CashierCannotCheckoutWithAnEmptyCart stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorCannotCheckoutACartWithADifferentCatalog
	^ 'Error - No se puede hacer checkout de un carrito con un cat�logo diferente' coverAll:
		{49 to: 124}.! !
!Behavior method!
assertCartHasTheSameCatalog: aCart
	[
	([
	(aCart
		cover: (39 to: 43)
		declaredAt: (30 to: 34)) hasCatalog:
		(catalog
			cover: (57 to: 63)
			declaredAt: (57 to: 63)) ] valueCoveringAll:
		{45 to: 55}) ifFalse: [
		[
		(self coverAll:
			{76 to: 79}) error:
			([
			([
			(self coverAll:
				{88 to: 91}) class ] valueCoveringAll:
				{93 to: 97}) errorCannotCheckoutACartWithADifferentCatalog ] valueCoveringAll:
				{99 to: 143}) ] valueCoveringAll:
			{81 to: 86} ]] valueCoveringAll:
		{66 to: 73}.! !
!Behavior method!
hasCatalog: aCatalog
	^ [
	(catalog
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) =
		(aCatalog
			cover: (34 to: 41)
			declaredAt: (13 to: 20)) ] valueCoveringAll:
		{32 to: 32}.! !

!testRun: #CashierTest #test02CashierCannotCheckoutWithACartWithThatDoesntHaveAMatchingCatalog stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
assertCard: aCreditCard hasNotExpiredOn: aDate
	self coverAll:
		{94 to: 97}.
	[
	([
	(aCreditCard
		cover: (53 to: 63)
		declaredAt: (13 to: 23)) isExpiredOn:
		(aDate
			cover: (78 to: 82)
			declaredAt: (42 to: 46)) ] valueCoveringAll:
		{65 to: 76}) ifTrue: [
		[
		(self coverAll:
			{106 to: 109}) error:
			([
			([ self class ] valueCoveringAll:
				{111 to: 115}) errorExpiredCard ] valueCoveringAll:
				{117 to: 132}) ] valueCoveringAll:
			{99 to: 104} ]] valueCoveringAll:
		{85 to: 91}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	(expirationDate
		cover: (23 to: 36)
		declaredAt: (23 to: 36)) <
		(aDate
			cover: (40 to: 44)
			declaredAt: (14 to: 18)) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
assertCard: aCreditCard isNotStolenFor: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (63 to: 80)
		declaredAt: (41 to: 58)) isCardStolen:
		(aCreditCard
			cover: (96 to: 106)
			declaredAt: (13 to: 23)) ] valueCoveringAll:
		{82 to: 94}) ifTrue: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			([
			(self coverAll:
				{130 to: 133}) class ] valueCoveringAll:
				{135 to: 139}) errorStolenCard ] valueCoveringAll:
				{141 to: 155}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{109 to: 115}.! !
!Behavior method!
isCardStolen: aCreditCard
	^ [
	(stolenCards
		cover: (30 to: 40)
		declaredAt: (30 to: 40)) includes:
		(aCreditCard
			cover: (52 to: 62)
			declaredAt: (15 to: 25)) ] valueCoveringAll:
		{42 to: 50}.! !
!Behavior method!
assertCard: aCreditCard isRegisteredOn: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (64 to: 81)
		declaredAt: (41 to: 58)) isCardRegistered:
		(aCreditCard
			cover: (101 to: 111)
			declaredAt: (13 to: 23)) ] valueCoveringAll:
		{83 to: 99}) ifFalse: [
		[
		(self coverAll:
			{124 to: 127}) error:
			([
			([
			(self coverAll:
				{136 to: 139}) class ] valueCoveringAll:
				{141 to: 145}) errorNotARegisteredCard ] valueCoveringAll:
				{147 to: 169}) ] valueCoveringAll:
			{129 to: 134} ]] valueCoveringAll:
		{114 to: 121}.! !
!Behavior method!
isCardRegistered: aCreditCard
	^ [
	([
	(registeredCards
		cover: (33 to: 47)
		declaredAt: (33 to: 47)) keys ] valueCoveringAll:
		{49 to: 52}) includes:
		(aCreditCard
			cover: (64 to: 74)
			declaredAt: (19 to: 29)) ] valueCoveringAll:
		{54 to: 62}.! !
!Behavior method!
totalItemPrice
	^ [
	(cartItems
		cover: (20 to: 28)
		declaredAt: (20 to: 28)) sum: [ :bookAmountTuple |
		[
		([
		(catalog
			cover: (56 to: 62)
			declaredAt: (56 to: 62)) at:
			([
			(bookAmountTuple
				cover: (68 to: 82)
				declaredAt: (37 to: 51)) first ] valueCoveringAll:
				{84 to: 88}) ] valueCoveringAll:
			{64 to: 66}) *
			([
			(bookAmountTuple
				cover: (93 to: 107)
				declaredAt: (37 to: 51)) second ] valueCoveringAll:
				{109 to: 114}) ] valueCoveringAll:
			{91 to: 91} ]] valueCoveringAll:
		{30 to: 33}.! !
!Behavior method!
assertCard: aCreditCard canSpend: aTotal on: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (69 to: 86)
		declaredAt: (46 to: 63))
		can:
			(aCreditCard
				cover: (93 to: 103)
				declaredAt: (13 to: 23))
		spend:
			(aTotal
				cover: (112 to: 117)
				declaredAt: (35 to: 40)) ] valueCoveringAll:
		{88 to: 91. 105 to: 110}) ifFalse: [
		[
		(self coverAll:
			{130 to: 133}) error:
			([
			([
			(self coverAll:
				{142 to: 145}) class ] valueCoveringAll:
				{147 to: 151}) errorCardDoesNotHaveEnoughBalance ] valueCoveringAll:
				{153 to: 185}) ] valueCoveringAll:
			{135 to: 140} ]] valueCoveringAll:
		{120 to: 127}.! !
!Behavior method!
can: aCreditCard spend: aTotal
	^ [
	([
	(registeredCards
		cover: (37 to: 51)
		declaredAt: (37 to: 51)) at:
		(aCreditCard
			cover: (56 to: 66)
			declaredAt: (6 to: 16)) ] valueCoveringAll:
		{53 to: 55}) >=
		(aTotal
			cover: (72 to: 77)
			declaredAt: (25 to: 30)) ] valueCoveringAll:
		{69 to: 70}.! !

!testRun: #CashierTest #test03CheckoutReturnsTheRightAmount stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorExpiredCard
	^ 'Error - No se puede hacer checkout con una tarjeta de cr�dito vac�a' coverAll:
		{20 to: 88}.! !

!testRun: #CashierTest #test04CashierCannotCheckOutWithAnExpiredCard stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutRegistersSale stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorStolenCard
	^ 'Error - No se puede realizar una transacci�n con una tarjeta robada' coverAll:
		{19 to: 87}.! !

!testRun: #CashierTest #test06CashierCannotCheckoutAStolenCard stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorNotARegisteredCard
	^ 'Error - La tarjeta utilizada no se encuentra registrada' coverAll:
		{27 to: 83}.! !

!testRun: #CashierTest #test07CashierCannotCheckoutWithAFakeCard stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorCardDoesNotHaveEnoughBalance
	^ 'Error - La tarjeta de cr�dito no tiene suficiente saldo' coverAll:
		{38 to: 94}.! !

!testRun: #CashierTest #test08CashierCannotCheckoutWithACardWithoutMoney stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorOwnerEmpty
	^ 'Error - El nombre due�o de la tarjeta de cr�dito no puede estar vac�o' coverAll:
		{19 to: 89}.! !

!testRun: #CreditCardTest #test01CreditCardCannotHaveEmptyOwner stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorCardNumberLessThan16Digits
	^ 'Error - El n�mero de la tarjeta de cr�dito tiene menos de 16 d�gitos' coverAll:
		{35 to: 104}.! !

!testRun: #CreditCardTest #test02CreditCardNumberForACreditCardCannotHaveLessThan16Digits stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorCardNumberMoreThan16Digits
	^ 'Error - El n�mero de la tarjeta de cr�dito tiene m�s de 16 d�gitos' coverAll:
		{35 to: 102}.! !

!testRun: #CreditCardTest #test03CreditCardNumberForACreditCardCannotHaveMoreThan16Digits stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
createFor: aUserDataDictionary withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{58 to: 61}) new ] valueCoveringAll:
		{63 to: 65})
		initializeFor:
			(aUserDataDictionary
				cover: (82 to: 100)
				declaredAt: (12 to: 30))
		withCatalog:
			(aCatalog
				cover: (115 to: 122)
				declaredAt: (45 to: 52)) ] valueCoveringAll:
		{67 to: 80. 102 to: 113}.! !
!Behavior method!
initializeFor: aUserDataDictionary withCatalog: aCatalog
	(datosUsuarios _ aUserDataDictionary
		cover: (78 to: 96)
		declaredAt: (16 to: 34))
		cover: (61 to: 73)
		declaredAt: (61 to: 73).
	(catalog _ aCatalog
		cover: (111 to: 118)
		declaredAt: (49 to: 56))
		cover: (100 to: 106)
		declaredAt: (100 to: 106).
	(carts _ [
	(Dictionary
		cover: (131 to: 140)
		declaredAt: (131 to: 140)) new ] valueCoveringAll:
		{142 to: 144})
		cover: (122 to: 126)
		declaredAt: (122 to: 126).
	(lastId _ 0 coverAll:
		{158 to: 158})
		cover: (148 to: 153)
		declaredAt: (148 to: 153).! !
!Behavior method!
createCartForUser: aUser password: aPassword
	| newId |
	[
	([
	([
	(datosUsuarios
		cover: (63 to: 75)
		declaredAt: (63 to: 75)) includesKey:
		(aUser
			cover: (90 to: 94)
			declaredAt: (20 to: 24)) ] valueCoveringAll:
		{77 to: 88}) and: [
		[
		([
		(datosUsuarios
			cover: (104 to: 116)
			declaredAt: (63 to: 75)) at:
			(aUser
				cover: (121 to: 125)
				declaredAt: (20 to: 24)) ] valueCoveringAll:
			{118 to: 120}) =
			(aPassword
				cover: (130 to: 138)
				declaredAt: (36 to: 44)) ] valueCoveringAll:
			{128 to: 128} ]] valueCoveringAll:
		{97 to: 100}) ifFalse: [
		[
		(self coverAll:
			{152 to: 155}) error:
			([
			([
			(self coverAll:
				{164 to: 167}) class ] valueCoveringAll:
				{169 to: 173}) errorWrongUserCredentials ] valueCoveringAll:
				{175 to: 199}) ] valueCoveringAll:
			{157 to: 162} ]] valueCoveringAll:
		{142 to: 149}.
	(newId _ [
	(lastId
		cover: (215 to: 220)
		declaredAt: (215 to: 220)) +
		(1 coverAll:
			{224 to: 224}) ] valueCoveringAll:
		{222 to: 222})
		cover: (206 to: 210)
		declaredAt: (52 to: 56).
	[
	(carts
		cover: (228 to: 232)
		declaredAt: (228 to: 232)) add:
		([
		(newId
			cover: (239 to: 243)
			declaredAt: (52 to: 56)) ->
			([
			(Cart
				cover: (250 to: 253)
				declaredAt: (250 to: 253)) createNewWithCatalog:
				(catalog
					cover: (277 to: 283)
					declaredAt: (277 to: 283)) ] valueCoveringAll:
				{255 to: 275}) ] valueCoveringAll:
			{246 to: 247}) ] valueCoveringAll:
		{234 to: 237}.
	(lastId _ newId
		cover: (300 to: 304)
		declaredAt: (52 to: 56))
		cover: (290 to: 295)
		declaredAt: (215 to: 220).
	^ newId
		cover: (311 to: 315)
		declaredAt: (52 to: 56).! !
!Behavior method!
errorWrongUserCredentials
	^ 'Error - Las credenciales del usuario no son correctas' coverAll:
		{29 to: 83}.! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
add: anAmount ofItem: anItemID toCart: aCartID
	| cart |
	[
	(self coverAll:
		{62 to: 65}) assertCartExists:
		(aCartID
			cover: (85 to: 91)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{67 to: 83}.
	(cart _ [
	(carts
		cover: (105 to: 109)
		declaredAt: (105 to: 109)) at:
		(aCartID
			cover: (115 to: 121)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{111 to: 113})
		cover: (97 to: 100)
		declaredAt: (54 to: 57).
	[
	(cart
		cover: (125 to: 128)
		declaredAt: (54 to: 57))
		add:
			(anItemID
				cover: (135 to: 142)
				declaredAt: (23 to: 30))
		amount:
			(anAmount
				cover: (152 to: 159)
				declaredAt: (6 to: 13)) ] valueCoveringAll:
		{130 to: 133. 144 to: 150}.! !
!Behavior method!
assertCartExists: aCartID
	self coverAll:
		{70 to: 73}.
	[
	([
	(carts
		cover: (32 to: 36)
		declaredAt: (32 to: 36)) includesKey:
		(aCartID
			cover: (51 to: 57)
			declaredAt: (19 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{82 to: 85}) error:
			([
			([ self class ] valueCoveringAll:
				{87 to: 91}) errorCartIdDoesNotExist ] valueCoveringAll:
				{93 to: 115}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 67}.! !
!Behavior method!
errorCartIdDoesNotExist
	^ 'Error - No existe un carrito con esa ID' coverAll:
		{27 to: 67}.! !

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
listCart: aCartID
	^ [
	([
	(carts
		cover: (24 to: 28)
		declaredAt: (24 to: 28))
		at:
			(aCartID
				cover: (34 to: 40)
				declaredAt: (11 to: 17))
		ifAbsent: [
			[
			(self coverAll:
				{53 to: 56}) error:
				([
				([
				(self coverAll:
					{65 to: 68}) class ] valueCoveringAll:
					{70 to: 74}) errorCartDoesNotExist ] valueCoveringAll:
					{76 to: 96}) ] valueCoveringAll:
				{58 to: 63} ]] valueCoveringAll:
		{30 to: 32. 42 to: 50}) itemListFor:
		(self coverAll:
			{113 to: 116}) ] valueCoveringAll:
		{100 to: 111}.! !
!Behavior method!
itemListFor: aMockRestInterface
	^ [
	(aMockRestInterface
		cover: (35 to: 52)
		declaredAt: (14 to: 31)) listCartItemsFor:
		(cartItems
			cover: (72 to: 80)
			declaredAt: (72 to: 80)) ] valueCoveringAll:
		{54 to: 70}.! !
!Behavior method!
listCartItemsFor: aCartItemList
	^ aCartItemList
		cover: (35 to: 47)
		declaredAt: (19 to: 31).! !

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!Behavior method!
errorCartDoesNotExist
	^ 'Error - No existe un carrito con ese Id' coverAll:
		{25 to: 65}.! !

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 15:47:43'!
PASSED!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:55:13'!
assertUser: aUser existsWithPassword: aPassword.

	((datosUsuarios includesKey: aUser) and: [(datosUsuarios at:aUser) = aPassword]) ifFalse: [self error: self class errorWrongUserCredentials].! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 15:55:46' prior: 50875629!
createCartForUser: aUser password: aPassword 
	
	| newId |
	self assertUser: aUser existsWithPassword: aPassword.
	
	newId := lastId + 1.
	carts add:(newId) -> (Cart createNewWithCatalog: catalog).
	
	lastId := newId.
	
	^newId.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 16:02:38'!
test08CannotListPurchasesWithAnUserThatDoesntExist

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockInterface createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 16:03:17' prior: 50877430!
test08CannotListPurchasesWithAnUserThatDoesntExist

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockInterface listPurchasesForUser: usuario withPassword: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 16:16:13' prior: 50877445!
test08CannotListPurchasesWithAnUserThatDoesntExist

	| password usuarioNoExistente |
	
	usuarioNoExistente := 'Jorge'.
	password := '1234'.
	
	self should: [mockInterface listPurchasesForUser: usuarioNoExistente withPassword: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 16:16:14'!
ERROR!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 16:16:24'!
listPurchasesForUser: aString withPassword: aString2 
	self shouldBeImplemented.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 16:16:55' prior: 50877480!
listPurchasesForUser: aUser withPassword: aPassword 
	
	self assertUser: aUser existsWithPassword: aPassword.! !

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 16:16:57'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 16:16:57'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 16:16:57'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 16:16:57'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 16:16:57'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 16:16:57'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 16:16:57'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 16:16:57'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 16:16:57'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 16:17:10'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 16:17:10'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 16:17:10'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 16:17:10'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 16:17:10'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 16:17:10'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 16:17:10'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 16:17:10'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 16:17:10'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 16:17:42'!
test09CannotListPurchasesWithAnUserWithWrongPassword

	| password usuarioNoExistente |
	
	usuarioNoExistente := 'Jorge'.
	password := '1234'.
	
	self should: [mockInterface listPurchasesForUser: usuarioNoExistente withPassword: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 16:18:08' prior: 50877561!
test09CannotListPurchasesWithAnUserWithWrongPassword

	| password usuario |
	
	usuario := 'pepe'.
	password := '5678'.
	
	self should: [mockInterface listPurchasesForUser: usuario withPassword: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !

!testRun: #MockRestInterfaceTest #test09CannotListPurchasesWithAnUserWithWrongPassword stamp: 'G.L.S 6/21/2021 16:18:10'!
FAILURE!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 16:18:38' prior: 50877577!
test09CannotListPurchasesWithAnUserWithWrongPassword

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockInterface listPurchasesForUser: usuario withPassword: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !

!testRun: #MockRestInterfaceTest #test09CannotListPurchasesWithAnUserWithWrongPassword stamp: 'G.L.S 6/21/2021 16:18:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 16:18:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 16:18:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 16:18:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 16:18:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 16:18:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 16:18:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 16:18:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 16:18:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotListPurchasesWithAnUserWithWrongPassword stamp: 'G.L.S 6/21/2021 16:18:38'!
PASSED!

!methodRemoval: MockRestInterfaceTest #test09CannotListPurchasesWithAnUserWithWrongPassword stamp: 'G.L.S 6/21/2021 16:18:44'!
test09CannotListPurchasesWithAnUserWithWrongPassword

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockInterface listPurchasesForUser: usuario withPassword: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 16:22:46' prior: 50876403!
test02CreateCartForAnExistingUserDoesNotFail

	| password usuario huboError |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	[mockInterface createCartForUser: usuario password: password] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 16:48:00'!
test09

	| password usuarioNoExistente |
	
	usuarioNoExistente := 'Jorge'.
	password := '1234'.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 16:48:24' prior: 50877677!
test09

	| password usuario|
	
	usuario := 'pepe'.
	password := '5678'.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:03:57' prior: 50877684!
test09

	| password usuario|
	
	usuario := 'pepe'.
	password := '1234'.
	
	
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:04:11' prior: 50877690!
test09

	| password usuario|
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockInterface createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:04:45' prior: 50877696!
test09

	| password |
	
	self should: [mockInterface ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartDoesNotExist.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:04:52' prior: 50877710!
test09

	self should: [mockInterface ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartDoesNotExist.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:06:16' prior: 50877720!
test09

	self should: [mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: ''] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartDoesNotExist.
			].! !

!classDefinition: #MockRestInterfaceTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/21/2021 17:07:50'!
TestCase subclass: #MockRestInterfaceTest
	instanceVariableNames: 'mockInterface userData sales smalltalk80 designPatterns objectThinking donQuixote emptyCatalog catalog1 catalog2 workingCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!

!classDefinition: #MockRestInterfaceTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/21/2021 17:07:51'!
TestCase subclass: #MockRestInterfaceTest
	instanceVariableNames: 'mockInterface userData sales smalltalk80 designPatterns objectThinking donQuixote emptyCatalog catalog1 catalog2 workingCreditCard merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!MockRestInterfaceTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 6/21/2021 17:07:43' prior: 50876441 overrides: 16927572!
setUp
	
	sales := OrderedCollection new.
	
	smalltalk80 := '9780201113723'.
	designPatterns := '9780201184624'.
	objectThinking := '9780735619654'.
	donQuixote := '9781400132171'.
	
	emptyCatalog := Dictionary new.
	
	catalog1 := Dictionary new.
	catalog1 add: smalltalk80 -> 10.
	catalog1 add: designPatterns -> 100.
	catalog1 add: objectThinking -> 50.
	
	catalog2 := Dictionary new.
	catalog2 add: donQuixote -> 50.
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	userData add: 'ramon' -> '1234'.
	
	mockInterface := MockRestInterface createFor: userData withCatalog: catalog1.
	
	workingCreditCard := CreditCard forOwner: 'Marco' withNumber: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow.
	
	merchantProcessor := MockMerchantProcesor new.
	merchantProcessor registerCard: workingCreditCard withBalance: 1000.
	! !

!testRun: #MockRestInterfaceTest #test09 stamp: 'G.L.S 6/21/2021 17:08:32'!
ERROR!

!testRun: #MockRestInterfaceTest #test09 stamp: 'G.L.S 6/21/2021 17:08:32'!
ERROR!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:08:41'!
checkOutCart: aSmallInteger withCreditCard: aString withExpirationDate: aString3 withOwner: aString4 
	self shouldBeImplemented.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:09:23' prior: 50877802!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner 
	self assertCartExists: aCartId.! !

!testRun: #MockRestInterfaceTest #test09 stamp: 'G.L.S 6/21/2021 17:09:27'!
FAILURE!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:10:32' prior: 50876203!
listCart: aCartID 

	^(carts at: aCartID ifAbsent: [self error: self class errorCartIdDoesNotExist]) itemListFor: self.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:10:37' prior: 50876429!
test07CannotListCartAnUnexistentCart
	
	self should: [mockInterface listCart: 0] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:10:42' prior: 50877730!
test09

	self should: [mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: ''] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !

!methodRemoval: MockRestInterface class #errorCartDoesNotExist stamp: 'G.L.S 6/21/2021 17:10:47'!
errorCartDoesNotExist
	^'Error - No existe un carrito con ese Id'.!

!testRun: #MockRestInterfaceTest #test09 stamp: 'G.L.S 6/21/2021 17:10:51'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 17:10:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 17:10:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 17:10:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 17:10:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 17:10:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 17:10:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 17:10:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 17:10:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test09 stamp: 'G.L.S 6/21/2021 17:10:54'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:11:24'!
test09CannotCheckOutWithACartThatDoesNotExist

	self should: [mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: ''] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !

!methodRemoval: MockRestInterfaceTest #test09 stamp: 'G.L.S 6/21/2021 17:11:24'!
test09

	self should: [mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: ''] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:22:49'!
test10
	
	mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: ''.! !

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/21/2021 17:22:53'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:23:51' prior: 50877916!
test10
	
	| password usuario|
	
	usuario := 'pepe'.
	password := '5678'.
	
	mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: ''.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:25:01' prior: 50877926!
test10
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: ''.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:25:31' prior: 50877935!
test10
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface checkOutCart: cartId withCreditCard: '' withExpirationDate: '' withOwner: ''.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:25:49' prior: 50877946!
test10
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: '' withOwner: ''.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:26:11' prior: 50877957!
test10
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:27:24' prior: 50877969!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError = #No.
	
	mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:27:50' prior: 50877982!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:29:02' prior: 50877996!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self assert: (mockInterface listPurchasesForUser: usuario withPassword: password) ! !

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe isEmpty .!

pepe isEmpty.!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:29:40' prior: 50878012!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockInterface listPurchasesForUser: usuario withPassword: password) isEmpty ! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:29:43' prior: 50878037!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockInterface listPurchasesForUser: usuario withPassword: password) isEmpty. ! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:29:56' prior: 50878056!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockInterface listPurchasesForUser: usuario withPassword: password) isEmpty.! !

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 17:32:10'!
ERROR!

!classDefinition: #MockRestInterface category: 'Ejercicio-Libros' stamp: 'G.L.S 6/21/2021 17:33:51'!
Object subclass: #MockRestInterface
	instanceVariableNames: 'datosUsuarios catalog carts lastId userPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:33:33' prior: 50877486!
listPurchasesForUser: aUser withPassword: aPassword 
	
	self assertUser: aUser existsWithPassword: aPassword.
	
	^userPurchases at: aUser.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:34:45' prior: 50875642!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [:aUser | userPurchases add: aUser -> Dictionary new.]! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:34:46' prior: 50878114!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [:aUser | userPurchases add: aUser -> Dictionary new.].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:38:20' prior: 50878075!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: (mockInterface listPurchasesForUser: usuario withPassword: password) isEmpty.! !

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 17:38:29'!
FAILURE!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:41:02' prior: 50878126!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [
			:aUser | 
			userPurchases add: aUser -> Dictionary new.
			aCatalog do:[
				:aCatalogItem |			
				(userPurchases at: aUser).
				]
		].! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:42:24' prior: 50878162!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [
			:aUser | 
			userPurchases add: aUser -> Dictionary new.
			(userPurchases at: aUser) add: 'total' -> 0.
		].! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:42:44' prior: 50878177!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [
			:aUserId | 
			userPurchases add: aUserId -> Dictionary new.
			(userPurchases at: aUserId) add: 'total' -> 0.
		].! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:43:11' prior: 50878191!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [
			:aUserId | 
			userPurchases add: aUserId -> Dictionary new.
			(userPurchases at: aUserId) add: 'total' -> 0.
		].
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:46:54' prior: 50878138!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'total') = 0.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:47:00' prior: 50878220!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'total') = 0.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:48:13' prior: 50878206!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [
			:aUserId | 
			userPurchases add: aUserId -> Dictionary new.
			(userPurchases at: aUserId) add: 'totalBooks' -> 0.
		].
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:48:20' prior: 50878241!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBook') = 0.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:48:21' prior: 50878277!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco'.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:48:36' prior: 50877810!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner 
	
	self assertCartExists: aCartId.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:51:32'!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner aMerchantProcesor: aMerchantProcessor  
	
	self assertCartExists: aCartId.! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:51:32' prior: 50878298!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId withCreditCard: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow withOwner: 'Marco' aMerchantProcesor: merchantProcessor.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:51:32' prior: 50877892!
test09CannotCheckOutWithACartThatDoesNotExist

	self should: [mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: '' aMerchantProcesor: merchantProcessor] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !

!methodRemoval: MockRestInterface #checkOutCart:withCreditCard:withExpirationDate:withOwner: stamp: 'G.L.S 6/21/2021 17:51:32'!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner 
	
	self assertCartExists: aCartId.!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/21/2021 17:51:41'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:52:01' prior: 50878337!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				aMerchantProcesor: merchantProcessor.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 17:52:15' prior: 50878387!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				aMerchantProcesor: merchantProcessor.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:53:41' prior: 50878328!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner aMerchantProcesor: aMerchantProcessor  
	
	| cartToCheckout |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:54:22' prior: 50878434!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner aMerchantProcesor: aMerchantProcessor  
	
	| cartToCheckout creditCard |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:54:43' prior: 50878445!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner aMerchantProcesor: aMerchantProcessor  
	
	| cartToCheckout creditCard |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:55:01'!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor  
	
	| cartToCheckout creditCard |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:55:01' prior: 50878410!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:55:01' prior: 50878360!
test09CannotCheckOutWithACartThatDoesNotExist

	self should: [mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: '' withMerchantProcesor: merchantProcessor] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !

!methodRemoval: MockRestInterface #checkOutCart:withCreditCard:withExpirationDate:withOwner:aMerchantProcesor: stamp: 'G.L.S 6/21/2021 17:55:01'!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner aMerchantProcesor: aMerchantProcessor  
	
	| cartToCheckout creditCard |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:56:15' prior: 50878474!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor  
	
	| cartToCheckout creditCard |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:57:21' prior: 50878543!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor  
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 17:58:46' prior: 50878558!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor  
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: ''
		forMerchantProcessor: aMerchantProcessor.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:00:49'!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: ''
		forMerchantProcessor: aMerchantProcessor.! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:00:49' prior: 50878489!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor registerOn: salesbook.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:00:49' prior: 50878513!
test09CannotCheckOutWithACartThatDoesNotExist

	self should: [mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: '' withMerchantProcesor: merchantProcessor registerOn: salesbook] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !

!methodRemoval: MockRestInterface #checkOutCart:withCreditCard:withExpirationDate:withOwner:withMerchantProcesor: stamp: 'G.L.S 6/21/2021 18:00:49'!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor  
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: ''
		forMerchantProcessor: aMerchantProcessor.!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:00:56' prior: 50878596!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 18:01:10' prior: 50878642!
test09CannotCheckOutWithACartThatDoesNotExist

	self should: [mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: '' withMerchantProcesor: merchantProcessor registerOn: sales] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 18:01:17' prior: 50878618!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor registerOn: sales.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 18:01:22' prior: 50878717!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:03:04' prior: 50878680!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [].! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:04:21' prior: 50878765!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		userPurchases
		].! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:10:15' prior: 50877420!
createCartForUser: aUser password: aPassword 
	
	| newId |
	self assertUser: aUser existsWithPassword: aPassword.
	
	newId := lastId + 1.
	carts add:(newId) -> OrderedCollection new.
	
	(carts at: newId).
	
	lastId := newId.
	
	^newId.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:10:27' prior: 50878813!
createCartForUser: aUser password: aPassword 
	
	| newId |
	self assertUser: aUser existsWithPassword: aPassword.
	
	newId := lastId + 1.
	carts add:(newId) -> OrderedCollection new.
	
	(carts at: newId) add: (Cart createNewWithCatalog: catalog).
	
	lastId := newId.
	
	^newId.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:12:23' prior: 50878824!
createCartForUser: aUser password: aPassword 
	
	| newId |
	self assertUser: aUser existsWithPassword: aPassword.
	
	newId := lastId + 1.
	carts add:(newId) -> (Cart createNewWithCatalog: catalog).
	
	lastId := newId.
	
	^newId.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:13:21'!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		userPurchases
		].! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:13:21' prior: 50878702!
test09CannotCheckOutWithACartThatDoesNotExist

	self should: [mockInterface checkOutCart: 0 forUser: usuario withCreditCard: '' withExpirationDate: '' withOwner: '' withMerchantProcesor: merchantProcessor registerOn: sales] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:13:21' prior: 50878741!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				forUser: usuario withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !

!methodRemoval: MockRestInterface #checkOutCart:withCreditCard:withExpirationDate:withOwner:withMerchantProcesor:registerOn: stamp: 'G.L.S 6/21/2021 18:13:21'!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		userPurchases
		].!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 18:13:31' prior: 50878872!
test09CannotCheckOutWithACartThatDoesNotExist

	self should: [mockInterface checkOutCart: 0 forUser: '' withCreditCard: '' withExpirationDate: '' withOwner: '' withMerchantProcesor: merchantProcessor registerOn: sales] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartIdDoesNotExist.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 18:13:38' prior: 50878888!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/21/2021 18:13:40'!
PASSED!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:13:56' prior: 50878847!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		userPurchases at: aUser
		].! !

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe at: 10 put: 20.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe at: 10 put: 20.!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:17:39' prior: 50878983!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		((userPurchases at: aUser) at: aBookAmountTuple first put: ((userPurchases at: aUser) at: aBookAmountTuple ifAbsent:[0]) + aBookAmountTuple second)
		].! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:18:07' prior: 50879015!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		((userPurchases at: aUser) at: aBookAmountTuple first 
			put: ((userPurchases at: aUser) at: aBookAmountTuple first ifAbsent:[0]) + aBookAmountTuple second)
		].! !

pepe _ Dictionary new.!

pepe at: 10 
	put: (pepe at:10 ifAbsent: [0] + (pepe at:10)).
!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:20:23' prior: 50879044!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		((userPurchases at: aUser) at: aBookAmountTuple first ifAbsentPut: aBookAmountTuple second). 
		].! !

pepe _ Dictionary new.!

pepe at: 10 ifAbsentPut: 0.!

pepe at: 10.!

pepe at: 'jorge' put: 10.!

pepe at: 10 ifAbsentPut: 0.!

pepe at: 10.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe at: 'jorge' put: 10.!

pepe at: 'jorge' put: 10.!

pepe at: 'jorge' put: 10.!

pepe at: 'jorge' put: 10.!

pepe at: 'jorge' put: 10.!

pepe !

pepe at: 10 put: 245.!

pepe at: 10 put: 245.!

pepe at: 10 put: 245.!

pepe at: 10 put: 245.!

pepe at: 10 ifAbsentPut: 0.!

pepe at: 10.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe at: 10 
	ifPresent: [pepe at: 10 put: 355]  
	ifAbsent: [pepe add: 10->4].!

pepe at: 10.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe at: 10 
	ifPresent: [pepe at: 10 put: 355]  
	ifAbsent: [pepe add: 10->4].!

pepe !

pepe at: 10.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe add: 10 ->0.!

pepe add: 10 ->0.!

pepe at: 10 
	ifPresent: [pepe at: 10 put: 355]  
	ifAbsent: [pepe add: 10->4].!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe at: 10 
	ifPresent: [pepe at: 10 put: 355]  
	ifAbsent: [pepe add: 10->4].!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe _ Dictionary new.!

pepe add: 10 -> 0.!

pepe at: 10 
	ifPresent: [pepe at: 10 put: 355]  
	ifAbsent: [pepe add: 10->4].!

pepe _ Dictionary new.!

pepe add: 10 -> 0.!

pepe at: 10 
	ifPresent: [:v | pepe at: 10 put: 355]  
	ifAbsent: [pepe add: 10->4].!

pepe at: 10.!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:30:31' prior: 50879076!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		].! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:32:34' prior: 50879160!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:33:05' prior: 50879193!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:33:37'!
FAILURE!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 18:36:01' prior: 50878954!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:46:14' prior: 50879230!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	aMerchantProcessor registerCard: creditCard withBalance: 1000. 
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !
!MockMerchantProcesor methodsFor: 'operations' stamp: 'G.L.S 6/21/2021 18:47:23' prior: 50868509!
isCardRegistered: aCreditCard

	^registeredCards keys includes: aCreditCard.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:47:51' prior: 50879294!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !
!CreditCard methodsFor: 'nil' stamp: 'G.L.S 6/21/2021 18:48:15' overrides: 16881029!
= aCreditCard
	
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 18:49:48' prior: 50879374 overrides: 16881029!
= aCreditCard
	
	^ aCreditCard isNumber: creditCardNumber.! !
!CreditCard methodsFor: 'private' stamp: 'G.L.S 6/21/2021 18:50:24'!
isNumber: aCreditCardNumber.
	
	aCreditCardNumber = creditCardNumber.! !

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:50:45'!
FAILURE!

registeredCards keys!

self at: 1!

registeredCards keys includes: aCreditCard!

registeredCards keys!

self at: 1.!

(self at: 1) includes: (CreditCard forOwner: 'Marco' withNumber: '0000000000000000'  withExpirationDate: FixedGregorianDate today)!

self includes: (CreditCard forOwner: 'Marco' withNumber: '0000000000000000'  withExpirationDate: FixedGregorianDate today)!
!CreditCard methodsFor: 'private' stamp: 'G.L.S 6/21/2021 18:58:58' prior: 50879384!
isNumber: aCreditCardNumber.
	
	^ aCreditCardNumber = creditCardNumber.! !

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:59:03'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:59:03'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:59:10'!
PASSED!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:59:16'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:59:16'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:59:19'!
FAILURE!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 18:59:23'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 18:59:23'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 18:59:23'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 18:59:23'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 18:59:23'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 18:59:23'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 18:59:23'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 18:59:23'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/21/2021 18:59:23'!
PASSED!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:59:23'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:59:23'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:59:35'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 18:59:35'!
FAILURE!

self listCart: aCartId!

userPurchases at: aUser!

aBookAmountTuple first !

userPurchases at:aUser!

(mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks'!

((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:03:26'!
PASSED!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:03:32'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:03:32'!
FAILURE!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/21/2021 19:03:45'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 19:03:47'!
PASSED!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:04:26'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:04:26'!
FAILURE!

----QUIT----(21 June 2021 19:06:45) CuisUniversity-4532.image priorSource: 17410667!

----STARTUP---- (21 June 2021 19:06:50) as /media/Datos/Cuis/Ej-Libros/linux64/CuisUniversity-4532.image!


!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:06:53'!
FAILURE!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 19:07:15' prior: 50879269!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	"self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0."
	! !

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:07:16'!
FAILURE!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 19:07:23' prior: 50879510!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 19:08:48' prior: 50879538!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		on: Error 
		do: [huboError := #No].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 19:08:57' prior: 50879563!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 19:09:08' prior: 50879588!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] value
		"on: Error 
		do: [huboError := #Si]."
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:09:10'!
ERROR!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 19:09:26' prior: 50879613!
test10
	
	| password usuario cartId huboError|
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	huboError := #No.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	[mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.]
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/21/2021 19:09:42' prior: 50879641!
test10
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
		
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:09:46'!
ERROR!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:10:52'!
ERROR!

registeredCards at:aCreditCard!

registeredCards!

self keys.!

self keys at: 1!

self keys at: 1!

(self keys at: 1) = (CreditCard forOwner: '' withNumber: '0000000000000000'  withExpirationDate: '')!

(self keys at: 1) = (CreditCard forOwner: 'Marco' withNumber: '0000000000000000'  withExpirationDate: '')!

self keys includes: (CreditCard forOwner: 'Marco' withNumber: '0000000000000000'  withExpirationDate: '').!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:18:25'!
ERROR!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:18:40'!
ERROR!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:18:40'!
ERROR!

aMerchantProcessor isCardRegistered: aCreditCard!

aMerchantProcessor isCardRegistered: aCreditCard!

CreditCard!

(registeredCards keys at:1)!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:26:03'!
ERROR!

self at:(CreditCard forOwner: 't' withNumber: '0000000000000000' withExpirationDate: 'e')!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 19:30:40' prior: 50879338!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	aMerchantProcessor registerCard: creditCard withBalance: 1000. 
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:30:49'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 19:30:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 19:30:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 19:30:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 19:30:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 19:30:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 19:30:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 19:30:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 19:30:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/21/2021 19:30:54'!
PASSED!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:30:54'!
PASSED!
!MockMerchantProcesor methodsFor: 'operations' stamp: 'G.L.S 6/21/2021 19:34:40' prior: 50868566!
can: aCreditCard spend: aTotal
	
	| storedCard |
	registeredCards keysDo: [
		:storedCreditCard |
		storedCreditCard  = aCreditCard ifTrue: [storedCard := storedCreditCard].
		].
	
	^ (registeredCards at:storedCard) >= aTotal.! !
!MockMerchantProcesor methodsFor: 'operations' stamp: 'G.L.S 6/21/2021 19:34:46' prior: 50879802!
can: aCreditCard spend: aTotal
	
	| storedCard |
	
	registeredCards keysDo: [
		:storedCreditCard |
		storedCreditCard  = aCreditCard ifTrue: [storedCard := storedCreditCard].
		].
	
	^ (registeredCards at:storedCard) >= aTotal.! !
!MockMerchantProcesor methodsFor: 'operations' stamp: 'G.L.S 6/21/2021 19:35:03' prior: 50879813!
can: aCreditCard spend: aTotal
	
	| storedCard |
	
	registeredCards keysDo: [
		:storedCreditCard |
		storedCreditCard = aCreditCard ifTrue: [storedCard := storedCreditCard].
		].
	
	^ (registeredCards at:storedCard) >= aTotal.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/21/2021 19:36:40' prior: 50879724!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aXXX   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aXXX
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:36:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/21/2021 19:36:47'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/21/2021 19:36:47'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/21/2021 19:36:47'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/21/2021 19:36:47'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/21/2021 19:36:47'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/21/2021 19:36:47'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/21/2021 19:36:47'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/21/2021 19:36:47'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/21/2021 19:36:47'!
PASSED!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/21/2021 19:36:47'!
PASSED!

!testRun: #CartTest #test01CartThatWasJustCreatedIsEmpty stamp: 'G.L.S 6/21/2021 19:36:49'!
PASSED!

!testRun: #CartTest #test02CartWithAnItemIsNotEmpty stamp: 'G.L.S 6/21/2021 19:36:49'!
PASSED!

!testRun: #CartTest #test03CartWithSeveralItemsAddedContainsTheRightItemsAndAmounts stamp: 'G.L.S 6/21/2021 19:36:49'!
PASSED!

!testRun: #CartTest #test04CartCannotAddItemsThatAreNotAllowed stamp: 'G.L.S 6/21/2021 19:36:49'!
PASSED!

!testRun: #CartTest #test05CartCannotAddANonIntegerAmountOfAnItem stamp: 'G.L.S 6/21/2021 19:36:49'!
PASSED!

!testRun: #CartTest #test06CartCannotAddANegativeAmountOfAnItem stamp: 'G.L.S 6/21/2021 19:36:49'!
PASSED!

!testRun: #CartTest #test07CartCannotAddAZeroAmountOfAnItem stamp: 'G.L.S 6/21/2021 19:36:49'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutWithAnEmptyCart stamp: 'G.L.S 6/21/2021 19:36:51'!
PASSED!

!testRun: #CashierTest #test02CashierCannotCheckoutWithACartWithThatDoesntHaveAMatchingCatalog stamp: 'G.L.S 6/21/2021 19:36:51'!
PASSED!

!testRun: #CashierTest #test03CheckoutReturnsTheRightAmount stamp: 'G.L.S 6/21/2021 19:36:51'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckOutWithAnExpiredCard stamp: 'G.L.S 6/21/2021 19:36:51'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutRegistersSale stamp: 'G.L.S 6/21/2021 19:36:51'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAStolenCard stamp: 'G.L.S 6/21/2021 19:36:51'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutWithAFakeCard stamp: 'G.L.S 6/21/2021 19:36:51'!
PASSED!

!testRun: #CashierTest #test08CashierCannotCheckoutWithACardWithoutMoney stamp: 'G.L.S 6/21/2021 19:36:51'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardCannotHaveEmptyOwner stamp: 'G.L.S 6/21/2021 19:36:54'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberForACreditCardCannotHaveLessThan16Digits stamp: 'G.L.S 6/21/2021 19:36:54'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberForACreditCardCannotHaveMoreThan16Digits stamp: 'G.L.S 6/21/2021 19:36:54'!
PASSED!

----QUIT----(21 June 2021 19:42:16) CuisUniversity-4532.image priorSource: 17531182!

----STARTUP---- (22 June 2021 16:11:06) as /media/Datos/Cuis/Ej-Libros/linux64/CuisUniversity-4532.image!

!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:00:01' prior: 50879835!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:09:32' prior: 50879981!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	cartUser := aUser.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
		
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:10:14' prior: 50880018!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	cartUser := aUser.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
		
	self updatePurchasesFor: cartUser withCart: aCartId.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:10:26' prior: 50880056!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	cartUser := aUser.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
		
	self updatePurchasesFor: cartUser withCart: aCartId.
	
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:10:33' prior: 50880082!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	cartUser := aUser.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:10:55'!
updatePurchasesFor: aUser withCart: aCartId.
	
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:11:26' prior: 50880122!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	cartUser := aUser.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId.
! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/22/2021 17:11:28'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/22/2021 17:11:28'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/22/2021 17:11:28'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/22/2021 17:11:28'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/22/2021 17:11:28'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/22/2021 17:11:28'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/22/2021 17:11:28'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/22/2021 17:11:28'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/22/2021 17:11:28'!
PASSED!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/22/2021 17:11:28'!
PASSED!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:23:33' prior: 50880178!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	self assertCartExists: aCartId.
	
	cartToCheckout := carts at: aCartId.
	cartUser := self userOfCart: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:24:12'!
userOfCart: aCartId
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:25:18' prior: 50878837!
createCartForUser: aUser password: aPassword 
	
	| newId |
	self assertUser: aUser existsWithPassword: aPassword.
	
	newId := lastId + 1.
	carts add: newId -> OrderedCollection new.
	
	(carts at: newId) add: (Cart createNewWithCatalog: catalog).
	(carts at: newId) add: aUser.
	
	lastId := newId.
	
	^newId.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:28:25' prior: 50880266!
userOfCart: aCartId

	^(carts at: aCartId) second.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:28:46' prior: 50877821!
listCart: aCartID 

	^(carts at: aCartID ifAbsent: [self error: self class errorCartIdDoesNotExist]) first itemListFor: self.
	! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:29:06' prior: 50880240!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	self assertCartExists: aCartId.
	
	cartToCheckout := (carts at: aCartId) first.
	cartUser := self userOfCart: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:29:29' prior: 50880296!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	self assertCartExists: aCartId.
	
	cartToCheckout := self cartForId: aCartId.
	cartUser := self userOfCart: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:29:47'!
cartForId: aCartId

	^(carts at: aCartId) first.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:31:33' prior: 50880323!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	
	cartToCheckout := self cartForId: aCartId.
	cartUser := self userOfCart: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:31:38' prior: 50880283!
userOfCart: aCartId
	self assertCartExists: aCartId.
	^(carts at: aCartId) second.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:31:39' prior: 50880379!
userOfCart: aCartId

	self assertCartExists: aCartId.
	^(carts at: aCartId) second.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:31:45' prior: 50880349!
cartForId: aCartId
	
	self assertCartExists: aCartId.
	^(carts at: aCartId) first.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:32:34' prior: 50880288!
listCart: aCartID 

	^(self cartForId: aCartID) itemListFor: self.
	! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:32:38' prior: 50880397!
listCart: aCartId 

	^(self cartForId: aCartId) itemListFor: self.
	! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/22/2021 17:33:00'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/22/2021 17:33:00'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/22/2021 17:33:00'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/22/2021 17:33:00'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/22/2021 17:33:00'!
FAILURE!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/22/2021 17:33:00'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/22/2021 17:33:00'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/22/2021 17:33:00'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/22/2021 17:33:00'!
PASSED!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/22/2021 17:33:00'!
ERROR!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/22/2021 17:33:08'!
FAILURE!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/22/2021 17:33:08'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/22/2021 17:33:15'!
ERROR!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/22/2021 17:33:15'!
ERROR!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:33:43' prior: 50875526!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	| cart |
	self assertCartExists: aCartID.
	
	cart := self cartForId: aCartID.
	cart add: anItemID amount: anAmount.
	! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:33:49' prior: 50880458!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	| cart |
	
	cart := self cartForId: aCartID.
	cart add: anItemID amount: anAmount.
	! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/22/2021 17:33:55'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/22/2021 17:33:55'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/22/2021 17:33:55'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/22/2021 17:33:55'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/22/2021 17:33:55'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/22/2021 17:33:55'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/22/2021 17:33:55'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/22/2021 17:33:55'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/22/2021 17:33:55'!
PASSED!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/22/2021 17:33:55'!
PASSED!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:35:41'!
updatePurchasesFor: aUser withCart: aCartId withTotal: aTotal .
	
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:35:41' prior: 50880354!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	
	cartToCheckout := self cartForId: aCartId.
	cartUser := self userOfCart: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId withTotal: total.
! !

!methodRemoval: MockRestInterface #updatePurchasesFor:withCart: stamp: 'G.L.S 6/22/2021 17:35:41'!
updatePurchasesFor: aUser withCart: aCartId.
	
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aBookAmountTuple second.
		].
!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:36:29' prior: 50880531!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	
	cartToCheckout := self cartForId: aCartId.
	cartUser := self userOfCart: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId withTotal: cartToCheckout.
! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:36:43' prior: 50880576!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	
	cartToCheckout := self cartForId: aCartId.
	cartUser := self userOfCart: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId withTotal: cartToCheckout totalItemPrice.
! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/22/2021 17:36:46'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/22/2021 17:36:46'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/22/2021 17:36:46'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/22/2021 17:36:46'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/22/2021 17:36:46'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/22/2021 17:36:46'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/22/2021 17:36:46'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/22/2021 17:36:46'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/22/2021 17:36:46'!
PASSED!

!testRun: #MockRestInterfaceTest #test10 stamp: 'G.L.S 6/22/2021 17:36:46'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 17:40:06'!
test10CheckoutWorksAsExpected
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
		
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !

!methodRemoval: MockRestInterfaceTest #test10 stamp: 'G.L.S 6/22/2021 17:40:06'!
test10
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
		
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 17:42:38'!
test11CannotUseACartAfterItExpired

	| password usuario huboError |
	
	usuario := 'pepe'.
	password := '5678'.
	
	huboError := #No.
	
	[mockInterface createCartForUser: usuario password: password] 
		on: Error 
		do: [huboError := #Si].
		
	self assert: #No equals: huboError.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 17:44:16'!
test10SuccessfulCheckoutAltersUserListPurchase
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
		
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	! !

!methodRemoval: MockRestInterfaceTest #test10CheckoutWorksAsExpected stamp: 'G.L.S 6/22/2021 17:44:16'!
test10CheckoutWorksAsExpected
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
		
	self deny: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 0.
	!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 17:44:50' prior: 50880707!
test11CannotUseACartAfterItExpired

	| password usuario |
	
	usuario := 'pepe'.
	password := '5678'.
	
	mockInterface createCartForUser: usuario password: password.
! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 17:47:55' prior: 50880764!
test11CannotUseACartAfterItExpired

	| password usuario |
	
	usuario := 'pepe'.
	password := '5678'.
	
	mockInterface createCartForUser: usuario password: password.
! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 17:49:36' prior: 50880773!
test11CannotUseACartAfterItExpired

	| password usuario |
	
	usuario := 'pepe'.
	password := '5678'.
	
	mockInterface createCartForUser: usuario password: password.
	
	"pasa el tiempo"
	
	
! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 17:50:00' prior: 50880782!
test11CannotUseACartAfterItExpired

	| password usuario |
	
	usuario := 'pepe'.
	password := '5678'.
	
	mockInterface createCartForUser: usuario password: password.
	
	"pasa el tiempo"
	
	self should: [mockInterface add: 17 ofItem: smalltalk80 toCart: 0]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartExpired.
			].
! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 17:50:17' prior: 50880792!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	"pasa el tiempo"
	
	self should: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartExpired.
			].
! !

!classDefinition: #MockRestInterfaceTest category: 'Ejercicio-Libros' stamp: 'G.L.S 6/22/2021 17:52:25'!
TestCase subclass: #MockRestInterfaceTest
	instanceVariableNames: 'mockInterface userData sales smalltalk80 designPatterns objectThinking donQuixote emptyCatalog catalog1 catalog2 workingCreditCard merchantProcessor timer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!

!classDefinition: #MockTimer category: 'Ejercicio-Libros' stamp: 'G.L.S 6/22/2021 17:52:30'!
Object subclass: #MockTimer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!MockRestInterfaceTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 6/22/2021 17:52:23' prior: 50877767 overrides: 16927572!
setUp
	
	sales := OrderedCollection new.
	
	smalltalk80 := '9780201113723'.
	designPatterns := '9780201184624'.
	objectThinking := '9780735619654'.
	donQuixote := '9781400132171'.
	
	emptyCatalog := Dictionary new.
	
	catalog1 := Dictionary new.
	catalog1 add: smalltalk80 -> 10.
	catalog1 add: designPatterns -> 100.
	catalog1 add: objectThinking -> 50.
	
	catalog2 := Dictionary new.
	catalog2 add: donQuixote -> 50.
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	userData add: 'ramon' -> '1234'.
	
	timer := MockTimer new.
	
	mockInterface := MockRestInterface createFor: userData withCatalog: catalog1.
	
	workingCreditCard := CreditCard forOwner: 'Marco' withNumber: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow.
	
	merchantProcessor := MockMerchantProcesor new.
	merchantProcessor registerCard: workingCreditCard withBalance: 1000.
	! !
!MockTimer methodsFor: 'no messages' stamp: 'G.L.S 6/22/2021 17:52:39' overrides: 16896425!
initialize! !

!classDefinition: #MockTimer category: 'Ejercicio-Libros' stamp: 'G.L.S 6/22/2021 17:52:50'!
Object subclass: #MockTimer
	instanceVariableNames: 'currentTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!MockTimer methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:52:49' prior: 50880878 overrides: 16896425!
initialize

	currentTime := 0.! !
!MockTimer methodsFor: 'nil' stamp: 'G.L.S 6/22/2021 17:53:37'!
passTime: anAmontOfTime

	currentTime + anAmontOfTime.! !
!MockTimer methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:54:03'!
currentTime

	^currentTime.! !
!MockRestInterface class methodsFor: 'error handling' stamp: 'G.L.S 6/22/2021 17:55:24'!
createFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer  

	^self new initializeFor: aUserDataDictionary withCatalog: aCatalog.! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:55:24' prior: 50880847 overrides: 16927572!
setUp
	
	sales := OrderedCollection new.
	
	smalltalk80 := '9780201113723'.
	designPatterns := '9780201184624'.
	objectThinking := '9780735619654'.
	donQuixote := '9781400132171'.
	
	emptyCatalog := Dictionary new.
	
	catalog1 := Dictionary new.
	catalog1 add: smalltalk80 -> 10.
	catalog1 add: designPatterns -> 100.
	catalog1 add: objectThinking -> 50.
	
	catalog2 := Dictionary new.
	catalog2 add: donQuixote -> 50.
	
	userData := Dictionary new.
	userData add: 'pepe' -> '5678'.
	userData add: 'ramon' -> '1234'.
	
	timer := MockTimer new.
	
	mockInterface := MockRestInterface createFor: userData withCatalog: catalog1 withTimer: timer.
	
	workingCreditCard := CreditCard forOwner: 'Marco' withNumber: '0000000000000000' withExpirationDate: FixedGregorianDate tomorrow.
	
	merchantProcessor := MockMerchantProcesor new.
	merchantProcessor registerCard: workingCreditCard withBalance: 1000.
	! !

!methodRemoval: MockRestInterface class #createFor:withCatalog: stamp: 'G.L.S 6/22/2021 17:55:24'!
createFor: aUserDataDictionary withCatalog: aCatalog 

	^self new initializeFor: aUserDataDictionary withCatalog: aCatalog.!
!MockRestInterface methodsFor: 'initialization' stamp: 'G.L.S 6/22/2021 17:56:19'!
initializeFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer  

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [
			:aUserId | 
			userPurchases add: aUserId -> Dictionary new.
			(userPurchases at: aUserId) add: 'totalBooks' -> 0.
		].
	! !
!MockRestInterface class methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:56:19' prior: 50880903!
createFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer  

	^self new initializeFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer.! !

!methodRemoval: MockRestInterface #initializeFor:withCatalog: stamp: 'G.L.S 6/22/2021 17:56:19'!
initializeFor: aUserDataDictionary withCatalog: aCatalog 

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [
			:aUserId | 
			userPurchases add: aUserId -> Dictionary new.
			(userPurchases at: aUserId) add: 'totalBooks' -> 0.
		].
	!

!classDefinition: #MockRestInterface category: 'Ejercicio-Libros' stamp: 'G.L.S 6/22/2021 17:56:41'!
Object subclass: #MockRestInterface
	instanceVariableNames: 'datosUsuarios catalog carts lastId userPurchases timer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!MockRestInterface methodsFor: 'initialization' stamp: 'G.L.S 6/22/2021 17:56:34' prior: 50880950!
initializeFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer  

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	lastId := 0.
	timer := aTimer.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [
			:aUserId | 
			userPurchases add: aUserId -> Dictionary new.
			(userPurchases at: aUserId) add: 'totalBooks' -> 0.
		].
	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 17:57:03' prior: 50880809!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	timer passTime: 30.
	
	self should: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartExpired.
			].
! !
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 17:58:14' prior: 50880467!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	| cart |
	
	self assertCartTimerDidNotExpireFor: aCartID.
	
	cart := self cartForId: aCartID.
	cart add: anItemID amount: anAmount.
	! !
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 17:58:46' prior: 50881031!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	| cart |
	
	self assertCartTimerDidNotExpireFor: aCartID.
	
	cart := self cartForId: aCartID.
	cart add: anItemID amount: anAmount.
	
	self updateCartTimerFor: aCartID.
	! !

!classDefinition: #MockRestInterface category: 'Ejercicio-Libros' stamp: 'G.L.S 6/22/2021 17:59:17'!
Object subclass: #MockRestInterface
	instanceVariableNames: 'datosUsuarios catalog carts lastId userPurchases timer cartTimer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 17:59:15' prior: 50880270!
createCartForUser: aUser password: aPassword 
	
	| newId |
	self assertUser: aUser existsWithPassword: aPassword.
	
	newId := lastId + 1.
	carts add: newId -> OrderedCollection new.
	cartTimer add: newId -> timer currentTime.
	
	(carts at: newId) add: (Cart createNewWithCatalog: catalog).
	(carts at: newId) add: aUser.
	
	lastId := newId.
	
	^newId.! !
!MockRestInterface methodsFor: 'initialization' stamp: 'G.L.S 6/22/2021 17:59:33' prior: 50880998!
initializeFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer  

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	cartTimer := Dictionary new.
	lastId := 0.
	timer := aTimer.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [
			:aUserId | 
			userPurchases add: aUserId -> Dictionary new.
			(userPurchases at: aUserId) add: 'totalBooks' -> 0.
		].
	! !

!classDefinition: #MockRestInterface category: 'Ejercicio-Libros' stamp: 'G.L.S 6/22/2021 17:59:38'!
Object subclass: #MockRestInterface
	instanceVariableNames: 'datosUsuarios catalog carts lastId userPurchases timer cartTimers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:59:38' prior: 50881060!
createCartForUser: aUser password: aPassword 
	
	| newId |
	self assertUser: aUser existsWithPassword: aPassword.
	
	newId := lastId + 1.
	carts add: newId -> OrderedCollection new.
	cartTimers add: newId -> timer currentTime.
	
	(carts at: newId) add: (Cart createNewWithCatalog: catalog).
	(carts at: newId) add: aUser.
	
	lastId := newId.
	
	^newId.! !
!MockRestInterface methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 17:59:38' prior: 50881075!
initializeFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer  

	datosUsuarios := aUserDataDictionary.
	catalog := aCatalog.
	carts := Dictionary new.
	cartTimers := Dictionary new.
	lastId := 0.
	timer := aTimer.
	
	userPurchases := Dictionary new.
	
	datosUsuarios keysDo: [
			:aUserId | 
			userPurchases add: aUserId -> Dictionary new.
			(userPurchases at: aUserId) add: 'totalBooks' -> 0.
		].
	! !
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:02:24'!
assertCartTimerDidNotExpireFor: aCartID

	| cartTimer |
	cartTimer := cartTimers at: aCartID.
	
	^ timer isDifferenceWith: cartTimer biggerThan: 30.
! !
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:02:35' prior: 50881132!
assertCartTimerDidNotExpireFor: aCartID

	| cartTimer |
	
	cartTimer := cartTimers at: aCartID.
	
	^ timer isDifferenceWith: cartTimer biggerThan: 30.
! !
!MockTimer methodsFor: 'nil' stamp: 'G.L.S 6/22/2021 18:03:03'!
isDifferenceWith: aTimer biggerThan: anAmountOfTime

	! !
!MockTimer methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 18:04:53' prior: 50881147!
isDifferenceWith: aTime biggerThan: anAmountOfTime

	^ (currentTime - aTime) abs > anAmountOfTime.! !
!MockTimer methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 18:05:01' prior: 50881152!
isDifferenceWith: aTime biggerThan: anAmountOfTime

	^ ((currentTime - aTime) abs > anAmountOfTime).! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 18:05:33' prior: 50881014!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	timer passTime: 35.
	
	self should: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartExpired.
			].
! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:05:42'!
ERROR!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:05:42'!
ERROR!
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:06:33'!
updateCartTimerFor: aCartID

	cartTimers at: aCartID put: timer currentTime.
	! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:06:45'!
FAILURE!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:06:45'!
FAILURE!
!MockRestInterface class methodsFor: 'error handling' stamp: 'G.L.S 6/22/2021 18:07:18'!
errorCartExpired
	^ 'Error - El carrito utilizado expir�'.! !
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:07:55' prior: 50881140!
assertCartTimerDidNotExpireFor: aCartID

	| cartTimer |
	
	cartTimer := cartTimers at: aCartID.
	
	(timer isDifferenceWith: cartTimer biggerThan: 30) ifTrue: [self error: self class errorCartExpired].
! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:07:59'!
FAILURE!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:07:59'!
FAILURE!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/22/2021 18:08:06'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:08:08'!
FAILURE!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:08:08'!
FAILURE!
!MockTimer methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/22/2021 18:09:16' prior: 50880894!
passTime: anAmontOfTime

	currentTime := currentTime + anAmontOfTime.! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:09:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/22/2021 18:09:22'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 18:09:47' prior: 50881166!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	timer passTime: 35.
	
	self should: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartExpired.
			].
		
	self should: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartExpired.
			].
! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 18:10:31' prior: 50881249!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	timer passTime: 35.
	
	self should: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartExpired.
			].
		
	self should: [mockInterface listCart: cartId]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorCartExpired.
			].
! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:10:32'!
FAILURE!

!classDefinition: #MockRestInterface category: 'Ejercicio-Libros' stamp: 'G.L.S 6/22/2021 18:11:20'!
Object subclass: #MockRestInterface
	instanceVariableNames: 'datosUsuarios catalog carts lastId userPurchases timer cartTimers itemList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:11:18' prior: 50880403!
listCart: aCartId 
	
	self assertCartTimerDidNotExpireFor: aCartId.
	
	itemList := (self cartForId: aCartId) itemListFor: self.
	
	self updateCartTimerFor: aCartId.
	
	^itemList.! !
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:12:35' prior: 50881311!
listCart: aCartId 
	
	| cartItemList |
	self assertCartTimerDidNotExpireFor: aCartId.
	
	cartItemList := (self cartForId: aCartId) itemListFor: self.
	
	self updateCartTimerFor: aCartId.
	
	^cartItemList.! !

!classDefinition: #MockRestInterface category: 'Ejercicio-Libros' stamp: 'G.L.S 6/22/2021 18:12:50'!
Object subclass: #MockRestInterface
	instanceVariableNames: 'datosUsuarios catalog carts lastId userPurchases timer cartTimers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-Libros'!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:12:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/22/2021 18:13:01'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/22/2021 18:13:01'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/22/2021 18:13:01'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/22/2021 18:13:01'!
FAILURE!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/22/2021 18:13:01'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/22/2021 18:13:01'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/22/2021 18:13:01'!
FAILURE!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/22/2021 18:13:01'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/22/2021 18:13:01'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/22/2021 18:13:01'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:13:01'!
PASSED!
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:14:16' prior: 50881040!
add: anAmount ofItem: anItemID toCart: aCartID 
	
	| cart |
	
	cart := self cartForId: aCartID.
	
	self assertCartTimerDidNotExpireFor: aCartID.
	
	cart add: anItemID amount: anAmount.
	
	self updateCartTimerFor: aCartID.
	! !
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:14:31' prior: 50881320!
listCart: aCartId 
	
	| cartItemList |
	
	cartItemList := (self cartForId: aCartId) itemListFor: self.
	
	self assertCartTimerDidNotExpireFor: aCartId.
	
	self updateCartTimerFor: aCartId.
	
	^cartItemList.! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:14:38'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/22/2021 18:18:12' prior: 50880719!
test10SuccessfulCheckoutAltersUserListPurchase
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
		
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 170.
	! !

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/22/2021 18:18:16'!
FAILURE!

((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks')!
!MockRestInterface methodsFor: 'private' stamp: 'G.L.S 6/22/2021 18:19:07' prior: 50880511!
updatePurchasesFor: aUser withCart: aCartId withTotal: aTotal .
	
	(self listCart: aCartId) do: [
		:aBookAmountTuple |
		(userPurchases at: aUser) at: aBookAmountTuple first 
			ifPresent:[:cant | (userPurchases at: aUser) at: aBookAmountTuple first put: cant + aBookAmountTuple second] 
			ifAbsent:[(userPurchases at: aUser) at: aBookAmountTuple first put: aBookAmountTuple second].
		(userPurchases at:aUser) at: 'totalBooks' put: ((userPurchases at:aUser) at: 'totalBooks') + aTotal.
		].
! !

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/22/2021 18:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:19:20'!
PASSED!
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:20:29' prior: 50881396!
listCart: aCartId 
	
	| cartItemList |
	
	cartItemList := (self cartForId: aCartId) itemListFor: self.
	
	self assertCartTimerDidNotExpireFor: aCartId.
	
	self updateCartTimerFor: aCartId.
	
	^cartItemList.! !
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:21:19' prior: 50881541!
listCart: aCartId 
	
	| cartItemList cart |
	
	cart := (self cartForId: aCartId). 
	
	cartItemList := cart itemListFor: self.
	
	self assertCartTimerDidNotExpireFor: aCartId.
	
	self updateCartTimerFor: aCartId.
	
	^cartItemList.! !
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:21:52' prior: 50881551!
listCart: aCartId 
	
	| cartItemList cart |
	
	cart := (self cartForId: aCartId). 
	
	self assertCartTimerDidNotExpireFor: aCartId.
	
	cartItemList := cart itemListFor: self.
	
	self updateCartTimerFor: aCartId.
	
	^cartItemList.! !
!MockRestInterface methodsFor: 'operations' stamp: 'G.L.S 6/22/2021 18:23:13' prior: 50881562!
listCart: aCartId 
	
	| cartItemList cart |
	
	cart := self cartForId: aCartId. 
	
	self assertCartTimerDidNotExpireFor: aCartId.
	
	cartItemList := cart itemListFor: self.
	
	self updateCartTimerFor: aCartId.
	
	^cartItemList.! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/22/2021 18:23:18'!
PASSED!

----QUIT----(22 June 2021 18:32:30) CuisUniversity-4532.image priorSource: 17546330!

----STARTUP---- (24 June 2021 15:09:22) as /media/Datos/Cuis/Ej-Libros/linux64/CuisUniversity-4532.image!

!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:17:53'!
testFail: aBlock withErrorMessage: anErrorMessage

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self should: [mockInterface createCartForUser: usuario password: password] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:18:12' prior: 50881631!
testFail: aBlock withErrorMessage: anErrorMessage
	
	self should: aBlock 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: MockRestInterface errorWrongUserCredentials.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:18:27' prior: 50881646!
testFail: aBlock withErrorMessage: anErrorMessage
	
	self should: aBlock 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [
			:anError |
			self assert: anError messageText equals: anErrorMessage.
			].! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:19:09' prior: 50876372!
test01CannotCreateCartWithTheWrongUserPassword

	| password usuario |
	
	usuario := 'pepe'.
	password := '1234'.
	
	self testFail: [mockInterface createCartForUser: usuario password: password] withErrorMessage: MockRestInterface errorWrongUserCredentials.! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:19:17'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:19:38' prior: 50876387!
test03CannotCreateCartForAUserThatDoesntExist

	| password usuarioNoExistente |
	
	usuarioNoExistente := 'Jorge'.
	password := '1234'.
		
	self testFail: [mockInterface createCartForUser: usuarioNoExistente password: password] withErrorMessage: MockRestInterface errorWrongUserCredentials.	! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:20:41' prior: 50876416!
test04CannotAddItemToAnUnexistentCart

	self testFail: [mockInterface add: 17 ofItem: smalltalk80 toCart: 0]  withErrorMessage: MockRestInterface errorCartIdDoesNotExist.! !

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:20:42'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:20:49' prior: 50881737!
test04CannotAddItemToAnUnexistentCart

	self testFail: [mockInterface add: 17 ofItem: smalltalk80 toCart: 0] withErrorMessage: MockRestInterface errorCartIdDoesNotExist.! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:23:55' prior: 50877828!
test07CannotListCartAnUnexistentCart

	self testFail: [mockInterface listCart: 0] withErrorMessage: MockRestInterface errorCartIdDoesNotExist.! !

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:23:58'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:24:35' prior: 50877460!
test08CannotListPurchasesWithAnUserThatDoesntExist

	| password usuarioNoExistente |
	
	usuarioNoExistente := 'Jorge'.
	password := '1234'.
	
	self testFail: [mockInterface listPurchasesForUser: usuarioNoExistente withPassword: password] withErrorMessage: MockRestInterface errorWrongUserCredentials.
			! !

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:24:37'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:25:18' prior: 50878938!
test09CannotCheckOutWithACartThatDoesNotExist

		
	self testFail: [mockInterface checkOutCart: 0 forUser: '' withCreditCard: '' withExpirationDate: '' withOwner: '' withMerchantProcesor: merchantProcessor registerOn: sales]  		withErrorMessage: MockRestInterface errorCartIdDoesNotExist.! !

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:25:19'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:26:11' prior: 50881274!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	timer passTime: 35.
	
	self testFail: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface listCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:26:12'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:26:12'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:26:13'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:26:13'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:26:13'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:26:13'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:26:13'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:26:13'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:26:13'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:26:13'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:26:13'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:26:13'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:29:35'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:33:45' prior: 50881448!
test10SuccessfulCheckoutAltersUserListPurchase
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
	
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: smalltalk80) = 17.
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 170.
	! !

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:34:16'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:35:08' prior: 50881970!
test11CannotUseACartAfterItExpired

	| password usuario cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	cartList := mockInterface listCart: cartId.
	
	timer passTime: 35.
	
	self testFail: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface listCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:35:14'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:36:17' prior: 50882146!
test11CannotUseACartAfterItExpired

	| password usuario cartId cartList |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	cartList := mockInterface listCart: cartId.
	
	timer passTime: 35.
	
	self testFail: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface listCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:36:27' prior: 50882210!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface listCart: cartId.
	
	timer passTime: 35.
	
	self testFail: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface listCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:36:33'!
PASSED!
!MockRestInterface methodsFor: 'checkout' stamp: 'G.L.S 6/24/2021 15:37:38' prior: 50880602!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	
	cartToCheckout := self cartForId: aCartId.
	cartUser := self userOfCart: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	self assertCartTimerDidNotExpireFor: aCartId.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId withTotal: cartToCheckout totalItemPrice.
! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:37:43'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:38:09' prior: 50882231!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface listCart: cartId.
	
	timer passTime: 35.
	
	self testFail: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId] withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface listCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:39:17' prior: 50882366!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface listCart: cartId.
	
	timer passTime: 35.
	
	self testFail: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId] withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface listCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		withErrorMessage: MockRestInterface errorCartExpired.
! !
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:39:21' prior: 50882386!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface listCart: cartId.
	
	timer passTime: 35.
	
	self testFail: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId] withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface listCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		withErrorMessage: MockRestInterface errorCartExpired.
	
! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:39:44'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:40:53'!
PASSED!
!Behavior method!
initialize
	(currentTime _ 0 coverAll:
		{29 to: 29})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).! !
!Behavior method!
createFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeFor:
			(aUserDataDictionary
				cover: (101 to: 119)
				declaredAt: (12 to: 30))
		withCatalog:
			(aCatalog
				cover: (134 to: 141)
				declaredAt: (45 to: 52))
		withTimer:
			(aTimer
				cover: (154 to: 159)
				declaredAt: (65 to: 70)) ] valueCoveringAll:
		{86 to: 99. 121 to: 132. 143 to: 152}.! !
!Behavior method!
initializeFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer
	(datosUsuarios _ aUserDataDictionary
		cover: (97 to: 115)
		declaredAt: (16 to: 34))
		cover: (80 to: 92)
		declaredAt: (80 to: 92).
	(catalog _ aCatalog
		cover: (130 to: 137)
		declaredAt: (49 to: 56))
		cover: (119 to: 125)
		declaredAt: (119 to: 125).
	(carts _ [
	(Dictionary
		cover: (150 to: 159)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{161 to: 163})
		cover: (141 to: 145)
		declaredAt: (141 to: 145).
	(cartTimers _ [
	(Dictionary
		cover: (181 to: 190)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{192 to: 194})
		cover: (167 to: 176)
		declaredAt: (167 to: 176).
	(lastId _ 0 coverAll:
		{208 to: 208})
		cover: (198 to: 203)
		declaredAt: (198 to: 203).
	(timer _ aTimer
		cover: (221 to: 226)
		declaredAt: (69 to: 74))
		cover: (212 to: 216)
		declaredAt: (212 to: 216).
	(userPurchases _ [
	(Dictionary
		cover: (249 to: 258)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{260 to: 262})
		cover: (232 to: 244)
		declaredAt: (232 to: 244).
	[
	(datosUsuarios
		cover: (268 to: 280)
		declaredAt: (80 to: 92)) keysDo: [ :aUserId |
		[
		(userPurchases
			cover: (310 to: 322)
			declaredAt: (232 to: 244)) add:
			([
			(aUserId
				cover: (329 to: 335)
				declaredAt: (296 to: 302)) ->
				([
				(Dictionary
					cover: (340 to: 349)
					declaredAt: (150 to: 159)) new ] valueCoveringAll:
					{351 to: 353}) ] valueCoveringAll:
				{337 to: 338}) ] valueCoveringAll:
			{324 to: 327}.
		[
		([
		(userPurchases
			cover: (360 to: 372)
			declaredAt: (232 to: 244)) at:
			(aUserId
				cover: (378 to: 384)
				declaredAt: (296 to: 302)) ] valueCoveringAll:
			{374 to: 376}) add:
			([
			('totalBooks' coverAll:
				{392 to: 403}) ->
				(0 coverAll:
					{408 to: 408}) ] valueCoveringAll:
				{405 to: 406}) ] valueCoveringAll:
			{387 to: 390} ]] valueCoveringAll:
		{282 to: 288}.! !
!Behavior method!
forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeForOwner:
			(anOwner
				cover: (106 to: 112)
				declaredAt: (11 to: 17))
		withNumber:
			(aCreditCardNumber
				cover: (126 to: 142)
				declaredAt: (31 to: 47))
		withExpirationDate:
			(aDate
				cover: (164 to: 168)
				declaredAt: (69 to: 73)) ] valueCoveringAll:
		{86 to: 104. 114 to: 124. 144 to: 162}.! !
!Behavior method!
initializeForOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate
	[
	(self coverAll:
		{88 to: 91}) assertNameNotEmpty:
		(anOwner
			cover: (113 to: 119)
			declaredAt: (21 to: 27)) ] valueCoveringAll:
		{93 to: 111}.
	[
	(self coverAll:
		{123 to: 126}) assertCardNumberIsCorrect:
		(aCreditCardNumber
			cover: (155 to: 171)
			declaredAt: (41 to: 57)) ] valueCoveringAll:
		{128 to: 153}.
	(owner _ anOwner
		cover: (185 to: 191)
		declaredAt: (21 to: 27))
		cover: (176 to: 180)
		declaredAt: (176 to: 180).
	(creditCardNumber _ aCreditCardNumber
		cover: (215 to: 231)
		declaredAt: (41 to: 57))
		cover: (195 to: 210)
		declaredAt: (195 to: 210).
	(expirationDate _ aDate
		cover: (253 to: 257)
		declaredAt: (79 to: 83))
		cover: (235 to: 248)
		declaredAt: (235 to: 248).! !
!Behavior method!
assertNameNotEmpty: anOwner
	[
	([
	([
	(anOwner
		cover: (32 to: 38)
		declaredAt: (21 to: 27)) withBlanksTrimmed ] valueCoveringAll:
		{40 to: 56}) isEmpty ] valueCoveringAll:
		{58 to: 64}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			([
			(self coverAll:
				{87 to: 90}) class ] valueCoveringAll:
				{92 to: 96}) errorOwnerEmpty ] valueCoveringAll:
				{98 to: 112}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{66 to: 72}.! !
!Behavior method!
assertCardNumberIsCorrect: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (49 to: 65)
		declaredAt: (28 to: 44)) size ] valueCoveringAll:
		{67 to: 70}) <
		(16 coverAll:
			{74 to: 75}) ] valueCoveringAll:
		{72 to: 72}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) error:
			([
			([
			(self coverAll:
				{99 to: 102}) class ] valueCoveringAll:
				{104 to: 108}) errorCardNumberLessThan16Digits ] valueCoveringAll:
				{110 to: 140}) ] valueCoveringAll:
			{92 to: 97} ]] valueCoveringAll:
		{78 to: 84}.
	[
	([
	([
	(aCreditCardNumber
		cover: (146 to: 162)
		declaredAt: (28 to: 44)) size ] valueCoveringAll:
		{164 to: 167}) >
		(16 coverAll:
			{171 to: 172}) ] valueCoveringAll:
		{169 to: 169}) ifTrue: [
		[
		(self coverAll:
			{184 to: 187}) error:
			([
			([
			(self coverAll:
				{196 to: 199}) class ] valueCoveringAll:
				{201 to: 205}) errorCardNumberMoreThan16Digits ] valueCoveringAll:
				{207 to: 237}) ] valueCoveringAll:
			{189 to: 194} ]] valueCoveringAll:
		{175 to: 181}.! !
!Behavior method!
initialize
	(stolenCards _ [
	(OrderedCollection
		cover: (29 to: 45)
		declaredAt: (29 to: 45)) new ] valueCoveringAll:
		{47 to: 49})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).
	(registeredCards _ [
	(Dictionary
		cover: (72 to: 81)
		declaredAt: (72 to: 81)) new ] valueCoveringAll:
		{83 to: 85})
		cover: (53 to: 67)
		declaredAt: (53 to: 67).! !
!Behavior method!
registerCard: aCreditCard withBalance: aBalance
	[
	(registeredCards
		cover: (52 to: 66)
		declaredAt: (52 to: 66)) add:
		([
		(aCreditCard
			cover: (73 to: 83)
			declaredAt: (15 to: 25)) ->
			(aBalance
				cover: (88 to: 95)
				declaredAt: (40 to: 47)) ] valueCoveringAll:
			{85 to: 86}) ] valueCoveringAll:
		{68 to: 71}.! !
!Behavior method!
errorWrongUserCredentials
	^ 'Error - Las credenciales del usuario no son correctas' coverAll:
		{29 to: 83}.! !
!Behavior method!
createCartForUser: aUser password: aPassword
	| newId |
	[
	(self coverAll:
		{61 to: 64})
		assertUser:
			(aUser
				cover: (78 to: 82)
				declaredAt: (20 to: 24))
		existsWithPassword:
			(aPassword
				cover: (104 to: 112)
				declaredAt: (36 to: 44)) ] valueCoveringAll:
		{66 to: 76. 84 to: 102}.
	(newId _ [
	(lastId
		cover: (127 to: 132)
		declaredAt: (127 to: 132)) +
		(1 coverAll:
			{136 to: 136}) ] valueCoveringAll:
		{134 to: 134})
		cover: (118 to: 122)
		declaredAt: (52 to: 56).
	[
	(carts
		cover: (140 to: 144)
		declaredAt: (140 to: 144)) add:
		([
		(newId
			cover: (151 to: 155)
			declaredAt: (52 to: 56)) ->
			([
			(OrderedCollection
				cover: (160 to: 176)
				declaredAt: (160 to: 176)) new ] valueCoveringAll:
				{178 to: 180}) ] valueCoveringAll:
			{157 to: 158}) ] valueCoveringAll:
		{146 to: 149}.
	[
	(cartTimers
		cover: (184 to: 193)
		declaredAt: (184 to: 193)) add:
		([
		(newId
			cover: (200 to: 204)
			declaredAt: (52 to: 56)) ->
			([
			(timer
				cover: (209 to: 213)
				declaredAt: (209 to: 213)) currentTime ] valueCoveringAll:
				{215 to: 225}) ] valueCoveringAll:
			{206 to: 207}) ] valueCoveringAll:
		{195 to: 198}.
	[
	([
	(carts
		cover: (232 to: 236)
		declaredAt: (140 to: 144)) at:
		(newId
			cover: (242 to: 246)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{238 to: 240}) add:
		([
		(Cart
			cover: (255 to: 258)
			declaredAt: (255 to: 258)) createNewWithCatalog:
			(catalog
				cover: (282 to: 288)
				declaredAt: (282 to: 288)) ] valueCoveringAll:
			{260 to: 280}) ] valueCoveringAll:
		{249 to: 252}.
	[
	([
	(carts
		cover: (294 to: 298)
		declaredAt: (140 to: 144)) at:
		(newId
			cover: (304 to: 308)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{300 to: 302}) add:
		(aUser
			cover: (316 to: 320)
			declaredAt: (20 to: 24)) ] valueCoveringAll:
		{311 to: 314}.
	(lastId _ newId
		cover: (336 to: 340)
		declaredAt: (52 to: 56))
		cover: (326 to: 331)
		declaredAt: (127 to: 132).
	^ newId
		cover: (347 to: 351)
		declaredAt: (52 to: 56).! !
!Behavior method!
assertUser: aUser existsWithPassword: aPassword
	self coverAll:
		{143 to: 146}.
	[
	([
	([
	(datosUsuarios
		cover: (54 to: 66)
		declaredAt: (54 to: 66)) includesKey:
		(aUser
			cover: (81 to: 85)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{68 to: 79}) and: [
		[
		([
		(datosUsuarios
			cover: (95 to: 107)
			declaredAt: (54 to: 66)) at:
			(aUser
				cover: (112 to: 116)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{109 to: 111}) =
			(aPassword
				cover: (121 to: 129)
				declaredAt: (39 to: 47)) ] valueCoveringAll:
			{119 to: 119} ]] valueCoveringAll:
		{88 to: 91}) ifFalse: [
		[
		(self coverAll:
			{155 to: 158}) error:
			([
			([ self class ] valueCoveringAll:
				{160 to: 164}) errorWrongUserCredentials ] valueCoveringAll:
				{166 to: 190}) ] valueCoveringAll:
			{148 to: 153} ]] valueCoveringAll:
		{133 to: 140}.! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!
!Behavior method!
currentTime
	^ currentTime
		cover: (16 to: 26)
		declaredAt: (16 to: 26).! !
!Behavior method!
createNewWithCatalog: anOrderedCollection
	^ [
	([
	(self coverAll:
		{46 to: 49}) new ] valueCoveringAll:
		{51 to: 53}) initializeWith:
		(anOrderedCollection
			cover: (71 to: 89)
			declaredAt: (23 to: 41)) ] valueCoveringAll:
		{55 to: 69}.! !
!Behavior method!
initializeWith: anOrderedCollection
	(catalog _ anOrderedCollection
		cover: (49 to: 67)
		declaredAt: (17 to: 35))
		cover: (38 to: 44)
		declaredAt: (38 to: 44).
	(cartItems _ [
	(OrderedCollection
		cover: (84 to: 100)
		declaredAt: (84 to: 100)) new ] valueCoveringAll:
		{102 to: 104})
		cover: (71 to: 79)
		declaredAt: (71 to: 79).! !

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!
!Behavior method!
errorCartIdDoesNotExist
	^ 'Error - No existe un carrito con esa ID' coverAll:
		{27 to: 67}.! !
!Behavior method!
add: anAmount ofItem: anItemID toCart: aCartID
	| cart |
	(cart _ [
	(self coverAll:
		{72 to: 75}) cartForId:
		(aCartID
			cover: (88 to: 94)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{77 to: 86})
		cover: (64 to: 67)
		declaredAt: (54 to: 57).
	[
	(self coverAll:
		{100 to: 103}) assertCartTimerDidNotExpireFor:
		(aCartID
			cover: (137 to: 143)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{105 to: 135}.
	[
	(cart
		cover: (149 to: 152)
		declaredAt: (54 to: 57))
		add:
			(anItemID
				cover: (159 to: 166)
				declaredAt: (23 to: 30))
		amount:
			(anAmount
				cover: (176 to: 183)
				declaredAt: (6 to: 13)) ] valueCoveringAll:
		{154 to: 157. 168 to: 174}.
	[
	(self coverAll:
		{189 to: 192}) updateCartTimerFor:
		(aCartID
			cover: (214 to: 220)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{194 to: 212}.! !
!Behavior method!
cartForId: aCartId
	[
	(self coverAll:
		{23 to: 26}) assertCartExists:
		(aCartId
			cover: (46 to: 52)
			declaredAt: (12 to: 18)) ] valueCoveringAll:
		{28 to: 44}.
	^ [
	([
	(carts
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) at:
		(aCartId
			cover: (68 to: 74)
			declaredAt: (12 to: 18)) ] valueCoveringAll:
		{64 to: 66}) first ] valueCoveringAll:
		{77 to: 81}.! !
!Behavior method!
assertCartExists: aCartID
	self coverAll:
		{70 to: 73}.
	[
	([
	(carts
		cover: (32 to: 36)
		declaredAt: (32 to: 36)) includesKey:
		(aCartID
			cover: (51 to: 57)
			declaredAt: (19 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{82 to: 85}) error:
			([
			([ self class ] valueCoveringAll:
				{87 to: 91}) errorCartIdDoesNotExist ] valueCoveringAll:
				{93 to: 115}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 67}.! !

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!
!Behavior method!
assertCartTimerDidNotExpireFor: aCartID
	| cartTimer |
	(cartTimer _ [
	(cartTimers
		cover: (73 to: 82)
		declaredAt: (73 to: 82)) at:
		(aCartID
			cover: (88 to: 94)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{84 to: 86})
		cover: (60 to: 68)
		declaredAt: (45 to: 53).
	[
	([
	(timer
		cover: (101 to: 105)
		declaredAt: (101 to: 105))
		isDifferenceWith:
			(cartTimer
				cover: (125 to: 133)
				declaredAt: (45 to: 53))
		biggerThan:
			(30 coverAll:
				{147 to: 148}) ] valueCoveringAll:
		{107 to: 123. 135 to: 145}) ifTrue: [
		[
		(self coverAll:
			{160 to: 163}) error:
			([
			([
			(self coverAll:
				{172 to: 175}) class ] valueCoveringAll:
				{177 to: 181}) errorCartExpired ] valueCoveringAll:
				{183 to: 198}) ] valueCoveringAll:
			{165 to: 170} ]] valueCoveringAll:
		{151 to: 157}.! !
!Behavior method!
isDifferenceWith: aTime biggerThan: anAmountOfTime
	^ [
	([
	([
	(currentTime
		cover: (58 to: 68)
		declaredAt: (58 to: 68)) -
		(aTime
			cover: (72 to: 76)
			declaredAt: (19 to: 23)) ] valueCoveringAll:
		{70 to: 70}) abs ] valueCoveringAll:
		{79 to: 81}) >
		(anAmountOfTime
			cover: (85 to: 98)
			declaredAt: (37 to: 50)) ] valueCoveringAll:
		{83 to: 83}.! !
!Behavior method!
add: aBook amount: anAmount
	| tuplaLibroCant |
	[
	(self coverAll:
		{53 to: 56}) assertBookIsAllowed:
		(aBook
			cover: (79 to: 83)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{58 to: 77}.
	[
	(self coverAll:
		{87 to: 90}) assertAmountIsValid:
		(anAmount
			cover: (113 to: 120)
			declaredAt: (20 to: 27)) ] valueCoveringAll:
		{92 to: 111}.
	(tuplaLibroCant _ [
	(OrderedCollection
		cover: (144 to: 160)
		declaredAt: (144 to: 160)) new ] valueCoveringAll:
		{162 to: 164})
		cover: (126 to: 139)
		declaredAt: (33 to: 46).
	[
	(tuplaLibroCant
		cover: (168 to: 181)
		declaredAt: (33 to: 46)) add:
		(aBook
			cover: (188 to: 192)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{183 to: 186}.
	[
	(tuplaLibroCant
		cover: (196 to: 209)
		declaredAt: (33 to: 46)) add:
		(anAmount
			cover: (216 to: 223)
			declaredAt: (20 to: 27)) ] valueCoveringAll:
		{211 to: 214}.
	[
	(cartItems
		cover: (229 to: 237)
		declaredAt: (229 to: 237)) add:
		(tuplaLibroCant
			cover: (244 to: 257)
			declaredAt: (33 to: 46)) ] valueCoveringAll:
		{239 to: 242}.! !
!Behavior method!
assertBookIsAllowed: aBook
	[
	([
	([
	(catalog
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) keys ] valueCoveringAll:
		{39 to: 42}) includes:
		(aBook
			cover: (54 to: 58)
			declaredAt: (22 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			([
			(self coverAll:
				{82 to: 85}) class ] valueCoveringAll:
				{87 to: 91}) errorBookNotInAllowedList ] valueCoveringAll:
				{93 to: 117}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{61 to: 68}.! !
!Behavior method!
assertAmountIsValid: anAmount
	self coverAll:
		{65 to: 68}.
	[
	([
	(anAmount
		cover: (35 to: 42)
		declaredAt: (22 to: 29)) isInteger ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{77 to: 80}) error:
			([
			([
			(self coverAll:
				{137 to: 140}) class ] valueCoveringAll:
				{82 to: 86}) errorAmountNotInteger ] valueCoveringAll:
				{88 to: 108}) ] valueCoveringAll:
			{70 to: 75} ]] valueCoveringAll:
		{55 to: 62}.
	[
	([
	(anAmount
		cover: (114 to: 121)
		declaredAt: (22 to: 29)) <
		(0 coverAll:
			{125 to: 125}) ] valueCoveringAll:
		{123 to: 123}) ifTrue: [
		[
		(self coverAll:
			{149 to: 152}) error:
			([
			([
			(self coverAll:
				{207 to: 210}) class ] valueCoveringAll:
				{154 to: 158}) errorAmountNegative ] valueCoveringAll:
				{160 to: 178}) ] valueCoveringAll:
			{142 to: 147} ]] valueCoveringAll:
		{128 to: 134}.
	[
	([
	(anAmount
		cover: (184 to: 191)
		declaredAt: (22 to: 29)) =
		(0 coverAll:
			{195 to: 195}) ] valueCoveringAll:
		{193 to: 193}) ifTrue: [
		[
		(self coverAll:
			{219 to: 222}) error:
			([
			([ self class ] valueCoveringAll:
				{224 to: 228}) errorAmountZero ] valueCoveringAll:
				{230 to: 244}) ] valueCoveringAll:
			{212 to: 217} ]] valueCoveringAll:
		{198 to: 204}.! !
!Behavior method!
updateCartTimerFor: aCartID
	[
	(cartTimers
		cover: (31 to: 40)
		declaredAt: (31 to: 40))
		at:
			(aCartID
				cover: (46 to: 52)
				declaredAt: (21 to: 27))
		put:
			([
			(timer
				cover: (59 to: 63)
				declaredAt: (59 to: 63)) currentTime ] valueCoveringAll:
				{65 to: 75}) ] valueCoveringAll:
		{42 to: 44. 54 to: 57}.! !
!Behavior method!
listCart: aCartId
	| cartItemList cart |
	(cart _ [
	(self coverAll:
		{56 to: 59}) cartForId:
		(aCartId
			cover: (72 to: 78)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{61 to: 70})
		cover: (48 to: 51)
		declaredAt: (38 to: 41).
	[
	(self coverAll:
		{85 to: 88}) assertCartTimerDidNotExpireFor:
		(aCartId
			cover: (122 to: 128)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{90 to: 120}.
	(cartItemList _ [
	(cart
		cover: (150 to: 153)
		declaredAt: (38 to: 41)) itemListFor:
		(self coverAll:
			{168 to: 171}) ] valueCoveringAll:
		{155 to: 166})
		cover: (134 to: 145)
		declaredAt: (25 to: 36).
	[
	(self coverAll:
		{177 to: 180}) updateCartTimerFor:
		(aCartId
			cover: (202 to: 208)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{182 to: 200}.
	^ cartItemList
		cover: (215 to: 226)
		declaredAt: (25 to: 36).! !
!Behavior method!
itemListFor: aMockRestInterface
	^ [
	(aMockRestInterface
		cover: (35 to: 52)
		declaredAt: (14 to: 31)) listCartItemsFor:
		(cartItems
			cover: (72 to: 80)
			declaredAt: (72 to: 80)) ] valueCoveringAll:
		{54 to: 70}.! !
!Behavior method!
listCartItemsFor: aCartItemList
	^ aCartItemList
		cover: (35 to: 47)
		declaredAt: (19 to: 31).! !

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!
!Behavior method!
listPurchasesForUser: aUser withPassword: aPassword
	[
	(self coverAll:
		{57 to: 60})
		assertUser:
			(aUser
				cover: (74 to: 78)
				declaredAt: (23 to: 27))
		existsWithPassword:
			(aPassword
				cover: (100 to: 108)
				declaredAt: (43 to: 51)) ] valueCoveringAll:
		{62 to: 72. 80 to: 98}.
	^ [
	(userPurchases
		cover: (115 to: 127)
		declaredAt: (115 to: 127)) at:
		(aUser
			cover: (133 to: 137)
			declaredAt: (23 to: 27)) ] valueCoveringAll:
		{129 to: 131}.! !

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!
!Behavior method!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook
	| cartToCheckout creditCard cashier cartUser |
	(cartToCheckout _ [
	(self coverAll:
		{255 to: 258}) cartForId:
		(aCartId
			cover: (271 to: 277)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{260 to: 269})
		cover: (237 to: 250)
		declaredAt: (189 to: 202).
	(cartUser _ [
	(self coverAll:
		{293 to: 296}) userOfCart:
		(aCartId
			cover: (310 to: 316)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{298 to: 308})
		cover: (281 to: 288)
		declaredAt: (223 to: 230).
	(creditCard _ [
	(CreditCard
		cover: (334 to: 343)
		declaredAt: (334 to: 343))
		forOwner:
			(anOwner
				cover: (355 to: 361)
				declaredAt: (109 to: 115))
		withNumber:
			(aCreditCardNumber
				cover: (375 to: 391)
				declaredAt: (54 to: 70))
		withExpirationDate:
			(aDate
				cover: (413 to: 417)
				declaredAt: (92 to: 96)) ] valueCoveringAll:
		{345 to: 353. 363 to: 373. 393 to: 411})
		cover: (320 to: 329)
		declaredAt: (204 to: 213).
	(cashier _ [
	(Cashier
		cover: (434 to: 440)
		declaredAt: (434 to: 440)) withCatalog:
		(catalog
			cover: (455 to: 461)
			declaredAt: (455 to: 461)) ] valueCoveringAll:
		{442 to: 453})
		cover: (423 to: 429)
		declaredAt: (215 to: 221).
	[
	(self coverAll:
		{467 to: 470}) assertCartTimerDidNotExpireFor:
		(aCartId
			cover: (504 to: 510)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{472 to: 502}.
	[
	(cashier
		cover: (516 to: 522)
		declaredAt: (215 to: 221))
		checkout:
			(cartToCheckout
				cover: (534 to: 547)
				declaredAt: (189 to: 202))
		withCreditCard:
			(creditCard
				cover: (568 to: 577)
				declaredAt: (204 to: 213))
		onDate:
			([
			(FixedGregorianDate
				cover: (590 to: 607)
				declaredAt: (590 to: 607)) today ] valueCoveringAll:
				{609 to: 613})
		registerOn:
			(aSalesBook
				cover: (629 to: 638)
				declaredAt: (170 to: 179))
		forMerchantProcessor:
			(aMerchantProcessor
				cover: (664 to: 681)
				declaredAt: (139 to: 156)) ] valueCoveringAll:
		{524 to: 532. 552 to: 566. 582 to: 588. 617 to: 627. 642 to: 662}.
	[
	(self coverAll:
		{687 to: 690})
		updatePurchasesFor:
			(cartUser
				cover: (712 to: 719)
				declaredAt: (223 to: 230))
		withCart:
			(aCartId
				cover: (731 to: 737)
				declaredAt: (15 to: 21))
		withTotal:
			([
			(cartToCheckout
				cover: (750 to: 763)
				declaredAt: (189 to: 202)) totalItemPrice ] valueCoveringAll:
				{765 to: 778}) ] valueCoveringAll:
		{692 to: 710. 721 to: 729. 739 to: 748}.! !

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!
!Behavior method!
userOfCart: aCartId
	[
	(self coverAll:
		{23 to: 26}) assertCartExists:
		(aCartId
			cover: (46 to: 52)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{28 to: 44}.
	^ [
	([
	(carts
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) at:
		(aCartId
			cover: (68 to: 74)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{64 to: 66}) second ] valueCoveringAll:
		{77 to: 82}.! !
!Behavior method!
withCatalog: aDictionary
	^ [
	([
	(self coverAll:
		{29 to: 32}) new ] valueCoveringAll:
		{34 to: 36}) initializeWithCatalog:
		(aDictionary
			cover: (61 to: 71)
			declaredAt: (14 to: 24)) ] valueCoveringAll:
		{38 to: 59}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).! !
!Behavior method!
checkout: aCart withCreditCard: aCreditCard onDate: aDate registerOn: aSalesBook forMerchantProcessor: aMerchantProcessor
	| total |
	[
	(self coverAll:
		{143 to: 146}) assertCartIsNotEmpty:
		(aCart
			cover: (170 to: 174)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{148 to: 168}.
	[
	(self coverAll:
		{178 to: 181}) assertCartHasTheSameCatalog:
		(aCart
			cover: (212 to: 216)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{183 to: 210}.
	[
	(self coverAll:
		{220 to: 223})
		assertCard:
			(aCreditCard
				cover: (237 to: 247)
				declaredAt: (33 to: 43))
		hasNotExpiredOn:
			(aDate
				cover: (266 to: 270)
				declaredAt: (53 to: 57)) ] valueCoveringAll:
		{225 to: 235. 249 to: 264}.
	[
	(self coverAll:
		{274 to: 277})
		assertCard:
			(aCreditCard
				cover: (291 to: 301)
				declaredAt: (33 to: 43))
		isNotStolenFor:
			(aMerchantProcessor
				cover: (319 to: 336)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{279 to: 289. 303 to: 317}.
	[
	(self coverAll:
		{340 to: 343})
		assertCard:
			(aCreditCard
				cover: (357 to: 367)
				declaredAt: (33 to: 43))
		isRegisteredOn:
			(aMerchantProcessor
				cover: (385 to: 402)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{345 to: 355. 369 to: 383}.
	(total _ [
	(aCart
		cover: (417 to: 421)
		declaredAt: (11 to: 15)) totalItemPrice ] valueCoveringAll:
		{423 to: 436})
		cover: (408 to: 412)
		declaredAt: (132 to: 136).
	[
	(self coverAll:
		{442 to: 445})
		assertCard:
			(aCreditCard
				cover: (459 to: 469)
				declaredAt: (33 to: 43))
		canSpend:
			(total
				cover: (481 to: 485)
				declaredAt: (132 to: 136))
		on:
			(aMerchantProcessor
				cover: (491 to: 508)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{447 to: 457. 471 to: 479. 487 to: 489}.
	[
	(aSalesBook
		cover: (514 to: 523)
		declaredAt: (71 to: 80)) add:
		(total
			cover: (530 to: 534)
			declaredAt: (132 to: 136)) ] valueCoveringAll:
		{525 to: 528}.
	^ total
		cover: (541 to: 545)
		declaredAt: (132 to: 136).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (32 to: 36)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{38 to: 44}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			([
			(self coverAll:
				{67 to: 70}) class ] valueCoveringAll:
				{72 to: 76}) errorCannotCheckoutEmptyCart ] valueCoveringAll:
				{78 to: 105}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
isEmpty
	^ [
	(cartItems
		cover: (11 to: 19)
		declaredAt: (11 to: 19)) isEmpty ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
assertCartHasTheSameCatalog: aCart
	[
	([
	(aCart
		cover: (39 to: 43)
		declaredAt: (30 to: 34)) hasCatalog:
		(catalog
			cover: (57 to: 63)
			declaredAt: (57 to: 63)) ] valueCoveringAll:
		{45 to: 55}) ifFalse: [
		[
		(self coverAll:
			{76 to: 79}) error:
			([
			([
			(self coverAll:
				{88 to: 91}) class ] valueCoveringAll:
				{93 to: 97}) errorCannotCheckoutACartWithADifferentCatalog ] valueCoveringAll:
				{99 to: 143}) ] valueCoveringAll:
			{81 to: 86} ]] valueCoveringAll:
		{66 to: 73}.! !
!Behavior method!
hasCatalog: aCatalog
	^ [
	(catalog
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) =
		(aCatalog
			cover: (34 to: 41)
			declaredAt: (13 to: 20)) ] valueCoveringAll:
		{32 to: 32}.! !
!Behavior method!
assertCard: aCreditCard hasNotExpiredOn: aDate
	self coverAll:
		{94 to: 97}.
	[
	([
	(aCreditCard
		cover: (53 to: 63)
		declaredAt: (13 to: 23)) isExpiredOn:
		(aDate
			cover: (78 to: 82)
			declaredAt: (42 to: 46)) ] valueCoveringAll:
		{65 to: 76}) ifTrue: [
		[
		(self coverAll:
			{106 to: 109}) error:
			([
			([ self class ] valueCoveringAll:
				{111 to: 115}) errorExpiredCard ] valueCoveringAll:
				{117 to: 132}) ] valueCoveringAll:
			{99 to: 104} ]] valueCoveringAll:
		{85 to: 91}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	(expirationDate
		cover: (23 to: 36)
		declaredAt: (23 to: 36)) <
		(aDate
			cover: (40 to: 44)
			declaredAt: (14 to: 18)) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
assertCard: aCreditCard isNotStolenFor: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (63 to: 80)
		declaredAt: (41 to: 58)) isCardStolen:
		(aCreditCard
			cover: (96 to: 106)
			declaredAt: (13 to: 23)) ] valueCoveringAll:
		{82 to: 94}) ifTrue: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			([
			(self coverAll:
				{130 to: 133}) class ] valueCoveringAll:
				{135 to: 139}) errorStolenCard ] valueCoveringAll:
				{141 to: 155}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{109 to: 115}.! !
!Behavior method!
isCardStolen: aCreditCard
	^ [
	(stolenCards
		cover: (30 to: 40)
		declaredAt: (30 to: 40)) includes:
		(aCreditCard
			cover: (52 to: 62)
			declaredAt: (15 to: 25)) ] valueCoveringAll:
		{42 to: 50}.! !
!Behavior method!
assertCard: aCreditCard isRegisteredOn: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (64 to: 81)
		declaredAt: (41 to: 58)) isCardRegistered:
		(aCreditCard
			cover: (101 to: 111)
			declaredAt: (13 to: 23)) ] valueCoveringAll:
		{83 to: 99}) ifFalse: [
		[
		(self coverAll:
			{124 to: 127}) error:
			([
			([
			(self coverAll:
				{136 to: 139}) class ] valueCoveringAll:
				{141 to: 145}) errorNotARegisteredCard ] valueCoveringAll:
				{147 to: 169}) ] valueCoveringAll:
			{129 to: 134} ]] valueCoveringAll:
		{114 to: 121}.! !
!Behavior method!
isCardRegistered: aCreditCard
	^ [
	([
	(registeredCards
		cover: (34 to: 48)
		declaredAt: (34 to: 48)) keys ] valueCoveringAll:
		{50 to: 53}) includes:
		(aCreditCard
			cover: (65 to: 75)
			declaredAt: (19 to: 29)) ] valueCoveringAll:
		{55 to: 63}.! !
!Behavior method!
= aCreditCard
	^ [
	(aCreditCard
		cover: (20 to: 30)
		declaredAt: (3 to: 13)) isNumber:
		(creditCardNumber
			cover: (42 to: 57)
			declaredAt: (42 to: 57)) ] valueCoveringAll:
		{32 to: 40}.! !
!Behavior method!
isNumber: aCreditCardNumber
	self.
	^ [
	(aCreditCardNumber
		cover: (35 to: 51)
		declaredAt: (11 to: 27)) =
		(creditCardNumber
			cover: (55 to: 70)
			declaredAt: (55 to: 70)) ] valueCoveringAll:
		{53 to: 53}.! !
!Behavior method!
totalItemPrice
	^ [
	(cartItems
		cover: (20 to: 28)
		declaredAt: (20 to: 28)) sum: [ :bookAmountTuple |
		[
		([
		(catalog
			cover: (56 to: 62)
			declaredAt: (56 to: 62)) at:
			([
			(bookAmountTuple
				cover: (68 to: 82)
				declaredAt: (37 to: 51)) first ] valueCoveringAll:
				{84 to: 88}) ] valueCoveringAll:
			{64 to: 66}) *
			([
			(bookAmountTuple
				cover: (93 to: 107)
				declaredAt: (37 to: 51)) second ] valueCoveringAll:
				{109 to: 114}) ] valueCoveringAll:
			{91 to: 91} ]] valueCoveringAll:
		{30 to: 33}.! !
!Behavior method!
assertCard: aCreditCard canSpend: aTotal on: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (69 to: 86)
		declaredAt: (46 to: 63))
		can:
			(aCreditCard
				cover: (93 to: 103)
				declaredAt: (13 to: 23))
		spend:
			(aTotal
				cover: (112 to: 117)
				declaredAt: (35 to: 40)) ] valueCoveringAll:
		{88 to: 91. 105 to: 110}) ifFalse: [
		[
		(self coverAll:
			{130 to: 133}) error:
			([
			([
			(self coverAll:
				{142 to: 145}) class ] valueCoveringAll:
				{147 to: 151}) errorCardDoesNotHaveEnoughBalance ] valueCoveringAll:
				{153 to: 185}) ] valueCoveringAll:
			{135 to: 140} ]] valueCoveringAll:
		{120 to: 127}.! !
!Behavior method!
can: aCreditCard spend: aTotal
	| storedCard |
	[
	(registeredCards
		cover: (53 to: 67)
		declaredAt: (53 to: 67)) keysDo: [ :storedCreditCard |
		[
		([
		(storedCreditCard
			cover: (103 to: 118)
			declaredAt: (82 to: 97)) =
			(aCreditCard
				cover: (122 to: 132)
				declaredAt: (6 to: 16)) ] valueCoveringAll:
			{120 to: 120}) ifTrue: [
			(storedCard _ storedCreditCard
				cover: (157 to: 172)
				declaredAt: (82 to: 97))
				cover: (143 to: 152)
				declaredAt: (37 to: 46) ]] valueCoveringAll:
			{134 to: 140} ]] valueCoveringAll:
		{69 to: 75}.
	^ [
	([
	(registeredCards
		cover: (187 to: 201)
		declaredAt: (53 to: 67)) at:
		(storedCard
			cover: (206 to: 215)
			declaredAt: (37 to: 46)) ] valueCoveringAll:
		{203 to: 205}) >=
		(aTotal
			cover: (221 to: 226)
			declaredAt: (25 to: 30)) ] valueCoveringAll:
		{218 to: 219}.! !
!Behavior method!
updatePurchasesFor: aUser withCart: aCartId withTotal: aTotal
	self coverAll:
		{69 to: 72}.
	[
	([
	self listCart:
		(aCartId
			cover: (84 to: 90)
			declaredAt: (37 to: 43)) ] valueCoveringAll:
		{74 to: 82}) do: [ :aBookAmountTuple |
		[
		([
		(userPurchases
			cover: (124 to: 136)
			declaredAt: (124 to: 136)) at:
			(aUser
				cover: (142 to: 146)
				declaredAt: (21 to: 25)) ] valueCoveringAll:
			{138 to: 140})
			at:
				([
				(aBookAmountTuple
					cover: (153 to: 168)
					declaredAt: (102 to: 117)) first ] valueCoveringAll:
					{170 to: 174})
			ifPresent: [ :cant |
				[
				([
				(userPurchases
					cover: (200 to: 212)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (218 to: 222)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{214 to: 216})
					at:
						([
						(aBookAmountTuple
							cover: (229 to: 244)
							declaredAt: (102 to: 117)) first ] valueCoveringAll:
							{246 to: 250})
					put:
						([
						(cant
							cover: (257 to: 260)
							declaredAt: (192 to: 195)) +
							([
							(aBookAmountTuple
								cover: (264 to: 279)
								declaredAt: (102 to: 117)) second ] valueCoveringAll:
								{281 to: 286}) ] valueCoveringAll:
							{262 to: 262}) ] valueCoveringAll:
					{225 to: 227. 252 to: 255} ]
			ifAbsent: [
				[
				([
				(userPurchases
					cover: (304 to: 316)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (322 to: 326)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{318 to: 320})
					at:
						([
						(aBookAmountTuple
							cover: (333 to: 348)
							declaredAt: (102 to: 117)) first ] valueCoveringAll:
							{350 to: 354})
					put:
						([
						(aBookAmountTuple
							cover: (361 to: 376)
							declaredAt: (102 to: 117)) second ] valueCoveringAll:
							{378 to: 383}) ] valueCoveringAll:
					{329 to: 331. 356 to: 359} ]] valueCoveringAll:
			{149 to: 151. 180 to: 189. 293 to: 301}.
		[
		([
		(userPurchases
			cover: (390 to: 402)
			declaredAt: (124 to: 136)) at:
			(aUser
				cover: (407 to: 411)
				declaredAt: (21 to: 25)) ] valueCoveringAll:
			{404 to: 406})
			at:
				('totalBooks' coverAll:
					{418 to: 429})
			put:
				([
				([
				([
				(userPurchases
					cover: (438 to: 450)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (455 to: 459)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{452 to: 454}) at:
					('totalBooks' coverAll:
						{466 to: 477}) ] valueCoveringAll:
					{462 to: 464}) +
					(aTotal
						cover: (482 to: 487)
						declaredAt: (56 to: 61)) ] valueCoveringAll:
					{480 to: 480}) ] valueCoveringAll:
			{414 to: 416. 431 to: 434} ]] valueCoveringAll:
		{93 to: 95}.! !

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!
!Behavior method!
passTime: anAmontOfTime
	(currentTime _ [
	(currentTime
		cover: (27 to: 37)
		declaredAt: (27 to: 37)) +
		(anAmontOfTime
			cover: (56 to: 68)
			declaredAt: (11 to: 23)) ] valueCoveringAll:
		{54 to: 54})
		cover: (42 to: 52)
		declaredAt: (27 to: 37).! !
!Behavior method!
errorCartExpired
	^ 'Error - El carrito utilizado expir�' coverAll:
		{21 to: 57}.! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:58:26'!
PASSED!
!Behavior method!
createNewWithCatalog: anOrderedCollection
	^ [
	([
	(self coverAll:
		{46 to: 49}) new ] valueCoveringAll:
		{51 to: 53}) initializeWith:
		(anOrderedCollection
			cover: (71 to: 89)
			declaredAt: (23 to: 41)) ] valueCoveringAll:
		{55 to: 69}.! !
!Behavior method!
initializeWith: anOrderedCollection
	(catalog _ anOrderedCollection
		cover: (49 to: 67)
		declaredAt: (17 to: 35))
		cover: (38 to: 44)
		declaredAt: (38 to: 44).
	(cartItems _ [
	(OrderedCollection
		cover: (84 to: 100)
		declaredAt: (84 to: 100)) new ] valueCoveringAll:
		{102 to: 104})
		cover: (71 to: 79)
		declaredAt: (71 to: 79).! !
!Behavior method!
isEmpty
	^ [
	(cartItems
		cover: (11 to: 19)
		declaredAt: (11 to: 19)) isEmpty ] valueCoveringAll:
		{21 to: 27}.! !

!testRun: #CartTest #test01CartThatWasJustCreatedIsEmpty stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
add: aBook
	[
	(self coverAll:
		{14 to: 17})
		add:
			(aBook
				cover: (24 to: 28)
				declaredAt: (6 to: 10))
		amount:
			(1 coverAll:
				{38 to: 38}) ] valueCoveringAll:
		{19 to: 22. 30 to: 36}.! !
!Behavior method!
add: aBook amount: anAmount
	| tuplaLibroCant |
	[
	(self coverAll:
		{53 to: 56}) assertBookIsAllowed:
		(aBook
			cover: (79 to: 83)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{58 to: 77}.
	[
	(self coverAll:
		{87 to: 90}) assertAmountIsValid:
		(anAmount
			cover: (113 to: 120)
			declaredAt: (20 to: 27)) ] valueCoveringAll:
		{92 to: 111}.
	(tuplaLibroCant _ [
	(OrderedCollection
		cover: (144 to: 160)
		declaredAt: (144 to: 160)) new ] valueCoveringAll:
		{162 to: 164})
		cover: (126 to: 139)
		declaredAt: (33 to: 46).
	[
	(tuplaLibroCant
		cover: (168 to: 181)
		declaredAt: (33 to: 46)) add:
		(aBook
			cover: (188 to: 192)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{183 to: 186}.
	[
	(tuplaLibroCant
		cover: (196 to: 209)
		declaredAt: (33 to: 46)) add:
		(anAmount
			cover: (216 to: 223)
			declaredAt: (20 to: 27)) ] valueCoveringAll:
		{211 to: 214}.
	[
	(cartItems
		cover: (229 to: 237)
		declaredAt: (229 to: 237)) add:
		(tuplaLibroCant
			cover: (244 to: 257)
			declaredAt: (33 to: 46)) ] valueCoveringAll:
		{239 to: 242}.! !
!Behavior method!
assertBookIsAllowed: aBook
	[
	([
	([
	(catalog
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) keys ] valueCoveringAll:
		{39 to: 42}) includes:
		(aBook
			cover: (54 to: 58)
			declaredAt: (22 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			([
			(self coverAll:
				{82 to: 85}) class ] valueCoveringAll:
				{87 to: 91}) errorBookNotInAllowedList ] valueCoveringAll:
				{93 to: 117}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{61 to: 68}.! !
!Behavior method!
assertAmountIsValid: anAmount
	self coverAll:
		{65 to: 68}.
	[
	([
	(anAmount
		cover: (35 to: 42)
		declaredAt: (22 to: 29)) isInteger ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{77 to: 80}) error:
			([
			([
			(self coverAll:
				{137 to: 140}) class ] valueCoveringAll:
				{82 to: 86}) errorAmountNotInteger ] valueCoveringAll:
				{88 to: 108}) ] valueCoveringAll:
			{70 to: 75} ]] valueCoveringAll:
		{55 to: 62}.
	[
	([
	(anAmount
		cover: (114 to: 121)
		declaredAt: (22 to: 29)) <
		(0 coverAll:
			{125 to: 125}) ] valueCoveringAll:
		{123 to: 123}) ifTrue: [
		[
		(self coverAll:
			{149 to: 152}) error:
			([
			([
			(self coverAll:
				{207 to: 210}) class ] valueCoveringAll:
				{154 to: 158}) errorAmountNegative ] valueCoveringAll:
				{160 to: 178}) ] valueCoveringAll:
			{142 to: 147} ]] valueCoveringAll:
		{128 to: 134}.
	[
	([
	(anAmount
		cover: (184 to: 191)
		declaredAt: (22 to: 29)) =
		(0 coverAll:
			{195 to: 195}) ] valueCoveringAll:
		{193 to: 193}) ifTrue: [
		[
		(self coverAll:
			{219 to: 222}) error:
			([
			([ self class ] valueCoveringAll:
				{224 to: 228}) errorAmountZero ] valueCoveringAll:
				{230 to: 244}) ] valueCoveringAll:
			{212 to: 217} ]] valueCoveringAll:
		{198 to: 204}.! !

!testRun: #CartTest #test02CartWithAnItemIsNotEmpty stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
size
	^ [
	(cartItems
		cover: (8 to: 16)
		declaredAt: (8 to: 16)) size ] valueCoveringAll:
		{18 to: 21}.! !
!Behavior method!
first
	^ [
	(cartItems
		cover: (9 to: 17)
		declaredAt: (9 to: 17)) first ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
second
	^ [
	(cartItems
		cover: (10 to: 18)
		declaredAt: (10 to: 18)) second ] valueCoveringAll:
		{20 to: 25}.! !

!testRun: #CartTest #test03CartWithSeveralItemsAddedContainsTheRightItemsAndAmounts stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorBookNotInAllowedList
	^ 'Error - El Libro no est� en la lista de productos permitidos' coverAll:
		{29 to: 90}.! !

!testRun: #CartTest #test04CartCannotAddItemsThatAreNotAllowed stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorAmountNotInteger
	^ 'Error - La cantidad tiene que ser un n�mero entero' coverAll:
		{25 to: 76}.! !

!testRun: #CartTest #test05CartCannotAddANonIntegerAmountOfAnItem stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorAmountNegative
	^ 'Error - La cantidad no puede ser negativa' coverAll:
		{23 to: 65}.! !

!testRun: #CartTest #test06CartCannotAddANegativeAmountOfAnItem stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorAmountZero
	^ 'Error - La cantidad de libros no puede ser 0' coverAll:
		{19 to: 64}.! !

!testRun: #CartTest #test07CartCannotAddAZeroAmountOfAnItem stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeForOwner:
			(anOwner
				cover: (106 to: 112)
				declaredAt: (11 to: 17))
		withNumber:
			(aCreditCardNumber
				cover: (126 to: 142)
				declaredAt: (31 to: 47))
		withExpirationDate:
			(aDate
				cover: (164 to: 168)
				declaredAt: (69 to: 73)) ] valueCoveringAll:
		{86 to: 104. 114 to: 124. 144 to: 162}.! !
!Behavior method!
initializeForOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate
	[
	(self coverAll:
		{88 to: 91}) assertNameNotEmpty:
		(anOwner
			cover: (113 to: 119)
			declaredAt: (21 to: 27)) ] valueCoveringAll:
		{93 to: 111}.
	[
	(self coverAll:
		{123 to: 126}) assertCardNumberIsCorrect:
		(aCreditCardNumber
			cover: (155 to: 171)
			declaredAt: (41 to: 57)) ] valueCoveringAll:
		{128 to: 153}.
	(owner _ anOwner
		cover: (185 to: 191)
		declaredAt: (21 to: 27))
		cover: (176 to: 180)
		declaredAt: (176 to: 180).
	(creditCardNumber _ aCreditCardNumber
		cover: (215 to: 231)
		declaredAt: (41 to: 57))
		cover: (195 to: 210)
		declaredAt: (195 to: 210).
	(expirationDate _ aDate
		cover: (253 to: 257)
		declaredAt: (79 to: 83))
		cover: (235 to: 248)
		declaredAt: (235 to: 248).! !
!Behavior method!
assertNameNotEmpty: anOwner
	[
	([
	([
	(anOwner
		cover: (32 to: 38)
		declaredAt: (21 to: 27)) withBlanksTrimmed ] valueCoveringAll:
		{40 to: 56}) isEmpty ] valueCoveringAll:
		{58 to: 64}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			([
			(self coverAll:
				{87 to: 90}) class ] valueCoveringAll:
				{92 to: 96}) errorOwnerEmpty ] valueCoveringAll:
				{98 to: 112}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{66 to: 72}.! !
!Behavior method!
assertCardNumberIsCorrect: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (49 to: 65)
		declaredAt: (28 to: 44)) size ] valueCoveringAll:
		{67 to: 70}) <
		(16 coverAll:
			{74 to: 75}) ] valueCoveringAll:
		{72 to: 72}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) error:
			([
			([
			(self coverAll:
				{99 to: 102}) class ] valueCoveringAll:
				{104 to: 108}) errorCardNumberLessThan16Digits ] valueCoveringAll:
				{110 to: 140}) ] valueCoveringAll:
			{92 to: 97} ]] valueCoveringAll:
		{78 to: 84}.
	[
	([
	([
	(aCreditCardNumber
		cover: (146 to: 162)
		declaredAt: (28 to: 44)) size ] valueCoveringAll:
		{164 to: 167}) >
		(16 coverAll:
			{171 to: 172}) ] valueCoveringAll:
		{169 to: 169}) ifTrue: [
		[
		(self coverAll:
			{184 to: 187}) error:
			([
			([
			(self coverAll:
				{196 to: 199}) class ] valueCoveringAll:
				{201 to: 205}) errorCardNumberMoreThan16Digits ] valueCoveringAll:
				{207 to: 237}) ] valueCoveringAll:
			{189 to: 194} ]] valueCoveringAll:
		{175 to: 181}.! !
!Behavior method!
initialize
	(stolenCards _ [
	(OrderedCollection
		cover: (29 to: 45)
		declaredAt: (29 to: 45)) new ] valueCoveringAll:
		{47 to: 49})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).
	(registeredCards _ [
	(Dictionary
		cover: (72 to: 81)
		declaredAt: (72 to: 81)) new ] valueCoveringAll:
		{83 to: 85})
		cover: (53 to: 67)
		declaredAt: (53 to: 67).! !
!Behavior method!
registerStolenCard: aCreditCard
	[
	(stolenCards
		cover: (36 to: 46)
		declaredAt: (36 to: 46)) add:
		(aCreditCard
			cover: (53 to: 63)
			declaredAt: (21 to: 31)) ] valueCoveringAll:
		{48 to: 51}.! !
!Behavior method!
registerCard: aCreditCard withBalance: aBalance
	[
	(registeredCards
		cover: (52 to: 66)
		declaredAt: (52 to: 66)) add:
		([
		(aCreditCard
			cover: (73 to: 83)
			declaredAt: (15 to: 25)) ->
			(aBalance
				cover: (88 to: 95)
				declaredAt: (40 to: 47)) ] valueCoveringAll:
			{85 to: 86}) ] valueCoveringAll:
		{68 to: 71}.! !
!Behavior method!
= aCreditCard
	^ [
	(aCreditCard
		cover: (20 to: 30)
		declaredAt: (3 to: 13)) isNumber:
		(creditCardNumber
			cover: (42 to: 57)
			declaredAt: (42 to: 57)) ] valueCoveringAll:
		{32 to: 40}.! !
!Behavior method!
isNumber: aCreditCardNumber
	self.
	^ [
	(aCreditCardNumber
		cover: (35 to: 51)
		declaredAt: (11 to: 27)) =
		(creditCardNumber
			cover: (55 to: 70)
			declaredAt: (55 to: 70)) ] valueCoveringAll:
		{53 to: 53}.! !
!Behavior method!
errorCannotCheckoutEmptyCart
	^ 'Error - No se puede hacer checkout de un carrito vac�o' coverAll:
		{32 to: 87}.! !
!Behavior method!
withCatalog: aDictionary
	^ [
	([
	(self coverAll:
		{29 to: 32}) new ] valueCoveringAll:
		{34 to: 36}) initializeWithCatalog:
		(aDictionary
			cover: (61 to: 71)
			declaredAt: (14 to: 24)) ] valueCoveringAll:
		{38 to: 59}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).! !
!Behavior method!
checkout: aCart withCreditCard: aCreditCard onDate: aDate registerOn: aSalesBook forMerchantProcessor: aMerchantProcessor
	| total |
	[
	(self coverAll:
		{143 to: 146}) assertCartIsNotEmpty:
		(aCart
			cover: (170 to: 174)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{148 to: 168}.
	[
	(self coverAll:
		{178 to: 181}) assertCartHasTheSameCatalog:
		(aCart
			cover: (212 to: 216)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{183 to: 210}.
	[
	(self coverAll:
		{220 to: 223})
		assertCard:
			(aCreditCard
				cover: (237 to: 247)
				declaredAt: (33 to: 43))
		hasNotExpiredOn:
			(aDate
				cover: (266 to: 270)
				declaredAt: (53 to: 57)) ] valueCoveringAll:
		{225 to: 235. 249 to: 264}.
	[
	(self coverAll:
		{274 to: 277})
		assertCard:
			(aCreditCard
				cover: (291 to: 301)
				declaredAt: (33 to: 43))
		isNotStolenFor:
			(aMerchantProcessor
				cover: (319 to: 336)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{279 to: 289. 303 to: 317}.
	[
	(self coverAll:
		{340 to: 343})
		assertCard:
			(aCreditCard
				cover: (357 to: 367)
				declaredAt: (33 to: 43))
		isRegisteredOn:
			(aMerchantProcessor
				cover: (385 to: 402)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{345 to: 355. 369 to: 383}.
	(total _ [
	(aCart
		cover: (417 to: 421)
		declaredAt: (11 to: 15)) totalItemPrice ] valueCoveringAll:
		{423 to: 436})
		cover: (408 to: 412)
		declaredAt: (132 to: 136).
	[
	(self coverAll:
		{442 to: 445})
		assertCard:
			(aCreditCard
				cover: (459 to: 469)
				declaredAt: (33 to: 43))
		canSpend:
			(total
				cover: (481 to: 485)
				declaredAt: (132 to: 136))
		on:
			(aMerchantProcessor
				cover: (491 to: 508)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{447 to: 457. 471 to: 479. 487 to: 489}.
	[
	(aSalesBook
		cover: (514 to: 523)
		declaredAt: (71 to: 80)) add:
		(total
			cover: (530 to: 534)
			declaredAt: (132 to: 136)) ] valueCoveringAll:
		{525 to: 528}.
	^ total
		cover: (541 to: 545)
		declaredAt: (132 to: 136).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (32 to: 36)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{38 to: 44}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			([
			(self coverAll:
				{67 to: 70}) class ] valueCoveringAll:
				{72 to: 76}) errorCannotCheckoutEmptyCart ] valueCoveringAll:
				{78 to: 105}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !

!testRun: #CashierTest #test01CashierCannotCheckoutWithAnEmptyCart stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorCannotCheckoutACartWithADifferentCatalog
	^ 'Error - No se puede hacer checkout de un carrito con un cat�logo diferente' coverAll:
		{49 to: 124}.! !
!Behavior method!
assertCartHasTheSameCatalog: aCart
	[
	([
	(aCart
		cover: (39 to: 43)
		declaredAt: (30 to: 34)) hasCatalog:
		(catalog
			cover: (57 to: 63)
			declaredAt: (57 to: 63)) ] valueCoveringAll:
		{45 to: 55}) ifFalse: [
		[
		(self coverAll:
			{76 to: 79}) error:
			([
			([
			(self coverAll:
				{88 to: 91}) class ] valueCoveringAll:
				{93 to: 97}) errorCannotCheckoutACartWithADifferentCatalog ] valueCoveringAll:
				{99 to: 143}) ] valueCoveringAll:
			{81 to: 86} ]] valueCoveringAll:
		{66 to: 73}.! !
!Behavior method!
hasCatalog: aCatalog
	^ [
	(catalog
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) =
		(aCatalog
			cover: (34 to: 41)
			declaredAt: (13 to: 20)) ] valueCoveringAll:
		{32 to: 32}.! !

!testRun: #CashierTest #test02CashierCannotCheckoutWithACartWithThatDoesntHaveAMatchingCatalog stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
assertCard: aCreditCard hasNotExpiredOn: aDate
	self coverAll:
		{94 to: 97}.
	[
	([
	(aCreditCard
		cover: (53 to: 63)
		declaredAt: (13 to: 23)) isExpiredOn:
		(aDate
			cover: (78 to: 82)
			declaredAt: (42 to: 46)) ] valueCoveringAll:
		{65 to: 76}) ifTrue: [
		[
		(self coverAll:
			{106 to: 109}) error:
			([
			([ self class ] valueCoveringAll:
				{111 to: 115}) errorExpiredCard ] valueCoveringAll:
				{117 to: 132}) ] valueCoveringAll:
			{99 to: 104} ]] valueCoveringAll:
		{85 to: 91}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	(expirationDate
		cover: (23 to: 36)
		declaredAt: (23 to: 36)) <
		(aDate
			cover: (40 to: 44)
			declaredAt: (14 to: 18)) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
assertCard: aCreditCard isNotStolenFor: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (63 to: 80)
		declaredAt: (41 to: 58)) isCardStolen:
		(aCreditCard
			cover: (96 to: 106)
			declaredAt: (13 to: 23)) ] valueCoveringAll:
		{82 to: 94}) ifTrue: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			([
			(self coverAll:
				{130 to: 133}) class ] valueCoveringAll:
				{135 to: 139}) errorStolenCard ] valueCoveringAll:
				{141 to: 155}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{109 to: 115}.! !
!Behavior method!
isCardStolen: aCreditCard
	^ [
	(stolenCards
		cover: (30 to: 40)
		declaredAt: (30 to: 40)) includes:
		(aCreditCard
			cover: (52 to: 62)
			declaredAt: (15 to: 25)) ] valueCoveringAll:
		{42 to: 50}.! !
!Behavior method!
assertCard: aCreditCard isRegisteredOn: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (64 to: 81)
		declaredAt: (41 to: 58)) isCardRegistered:
		(aCreditCard
			cover: (101 to: 111)
			declaredAt: (13 to: 23)) ] valueCoveringAll:
		{83 to: 99}) ifFalse: [
		[
		(self coverAll:
			{124 to: 127}) error:
			([
			([
			(self coverAll:
				{136 to: 139}) class ] valueCoveringAll:
				{141 to: 145}) errorNotARegisteredCard ] valueCoveringAll:
				{147 to: 169}) ] valueCoveringAll:
			{129 to: 134} ]] valueCoveringAll:
		{114 to: 121}.! !
!Behavior method!
isCardRegistered: aCreditCard
	^ [
	([
	(registeredCards
		cover: (34 to: 48)
		declaredAt: (34 to: 48)) keys ] valueCoveringAll:
		{50 to: 53}) includes:
		(aCreditCard
			cover: (65 to: 75)
			declaredAt: (19 to: 29)) ] valueCoveringAll:
		{55 to: 63}.! !
!Behavior method!
totalItemPrice
	^ [
	(cartItems
		cover: (20 to: 28)
		declaredAt: (20 to: 28)) sum: [ :bookAmountTuple |
		[
		([
		(catalog
			cover: (56 to: 62)
			declaredAt: (56 to: 62)) at:
			([
			(bookAmountTuple
				cover: (68 to: 82)
				declaredAt: (37 to: 51)) first ] valueCoveringAll:
				{84 to: 88}) ] valueCoveringAll:
			{64 to: 66}) *
			([
			(bookAmountTuple
				cover: (93 to: 107)
				declaredAt: (37 to: 51)) second ] valueCoveringAll:
				{109 to: 114}) ] valueCoveringAll:
			{91 to: 91} ]] valueCoveringAll:
		{30 to: 33}.! !
!Behavior method!
assertCard: aCreditCard canSpend: aTotal on: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (69 to: 86)
		declaredAt: (46 to: 63))
		can:
			(aCreditCard
				cover: (93 to: 103)
				declaredAt: (13 to: 23))
		spend:
			(aTotal
				cover: (112 to: 117)
				declaredAt: (35 to: 40)) ] valueCoveringAll:
		{88 to: 91. 105 to: 110}) ifFalse: [
		[
		(self coverAll:
			{130 to: 133}) error:
			([
			([
			(self coverAll:
				{142 to: 145}) class ] valueCoveringAll:
				{147 to: 151}) errorCardDoesNotHaveEnoughBalance ] valueCoveringAll:
				{153 to: 185}) ] valueCoveringAll:
			{135 to: 140} ]] valueCoveringAll:
		{120 to: 127}.! !
!Behavior method!
can: aCreditCard spend: aTotal
	| storedCard |
	[
	(registeredCards
		cover: (53 to: 67)
		declaredAt: (53 to: 67)) keysDo: [ :storedCreditCard |
		[
		([
		(storedCreditCard
			cover: (103 to: 118)
			declaredAt: (82 to: 97)) =
			(aCreditCard
				cover: (122 to: 132)
				declaredAt: (6 to: 16)) ] valueCoveringAll:
			{120 to: 120}) ifTrue: [
			(storedCard _ storedCreditCard
				cover: (157 to: 172)
				declaredAt: (82 to: 97))
				cover: (143 to: 152)
				declaredAt: (37 to: 46) ]] valueCoveringAll:
			{134 to: 140} ]] valueCoveringAll:
		{69 to: 75}.
	^ [
	([
	(registeredCards
		cover: (187 to: 201)
		declaredAt: (53 to: 67)) at:
		(storedCard
			cover: (206 to: 215)
			declaredAt: (37 to: 46)) ] valueCoveringAll:
		{203 to: 205}) >=
		(aTotal
			cover: (221 to: 226)
			declaredAt: (25 to: 30)) ] valueCoveringAll:
		{218 to: 219}.! !

!testRun: #CashierTest #test03CheckoutReturnsTheRightAmount stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorExpiredCard
	^ 'Error - No se puede hacer checkout con una tarjeta de cr�dito vac�a' coverAll:
		{20 to: 88}.! !

!testRun: #CashierTest #test04CashierCannotCheckOutWithAnExpiredCard stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutRegistersSale stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorStolenCard
	^ 'Error - No se puede realizar una transacci�n con una tarjeta robada' coverAll:
		{19 to: 87}.! !

!testRun: #CashierTest #test06CashierCannotCheckoutAStolenCard stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorNotARegisteredCard
	^ 'Error - La tarjeta utilizada no se encuentra registrada' coverAll:
		{27 to: 83}.! !

!testRun: #CashierTest #test07CashierCannotCheckoutWithAFakeCard stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorCardDoesNotHaveEnoughBalance
	^ 'Error - La tarjeta de cr�dito no tiene suficiente saldo' coverAll:
		{38 to: 94}.! !

!testRun: #CashierTest #test08CashierCannotCheckoutWithACardWithoutMoney stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorOwnerEmpty
	^ 'Error - El nombre due�o de la tarjeta de cr�dito no puede estar vac�o' coverAll:
		{19 to: 89}.! !

!testRun: #CreditCardTest #test01CreditCardCannotHaveEmptyOwner stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorCardNumberLessThan16Digits
	^ 'Error - El n�mero de la tarjeta de cr�dito tiene menos de 16 d�gitos' coverAll:
		{35 to: 104}.! !

!testRun: #CreditCardTest #test02CreditCardNumberForACreditCardCannotHaveLessThan16Digits stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorCardNumberMoreThan16Digits
	^ 'Error - El n�mero de la tarjeta de cr�dito tiene m�s de 16 d�gitos' coverAll:
		{35 to: 102}.! !

!testRun: #CreditCardTest #test03CreditCardNumberForACreditCardCannotHaveMoreThan16Digits stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
initialize
	(currentTime _ 0 coverAll:
		{29 to: 29})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).! !
!Behavior method!
createFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeFor:
			(aUserDataDictionary
				cover: (101 to: 119)
				declaredAt: (12 to: 30))
		withCatalog:
			(aCatalog
				cover: (134 to: 141)
				declaredAt: (45 to: 52))
		withTimer:
			(aTimer
				cover: (154 to: 159)
				declaredAt: (65 to: 70)) ] valueCoveringAll:
		{86 to: 99. 121 to: 132. 143 to: 152}.! !
!Behavior method!
initializeFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer
	(datosUsuarios _ aUserDataDictionary
		cover: (97 to: 115)
		declaredAt: (16 to: 34))
		cover: (80 to: 92)
		declaredAt: (80 to: 92).
	(catalog _ aCatalog
		cover: (130 to: 137)
		declaredAt: (49 to: 56))
		cover: (119 to: 125)
		declaredAt: (119 to: 125).
	(carts _ [
	(Dictionary
		cover: (150 to: 159)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{161 to: 163})
		cover: (141 to: 145)
		declaredAt: (141 to: 145).
	(cartTimers _ [
	(Dictionary
		cover: (181 to: 190)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{192 to: 194})
		cover: (167 to: 176)
		declaredAt: (167 to: 176).
	(lastId _ 0 coverAll:
		{208 to: 208})
		cover: (198 to: 203)
		declaredAt: (198 to: 203).
	(timer _ aTimer
		cover: (221 to: 226)
		declaredAt: (69 to: 74))
		cover: (212 to: 216)
		declaredAt: (212 to: 216).
	(userPurchases _ [
	(Dictionary
		cover: (249 to: 258)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{260 to: 262})
		cover: (232 to: 244)
		declaredAt: (232 to: 244).
	[
	(datosUsuarios
		cover: (268 to: 280)
		declaredAt: (80 to: 92)) keysDo: [ :aUserId |
		[
		(userPurchases
			cover: (310 to: 322)
			declaredAt: (232 to: 244)) add:
			([
			(aUserId
				cover: (329 to: 335)
				declaredAt: (296 to: 302)) ->
				([
				(Dictionary
					cover: (340 to: 349)
					declaredAt: (150 to: 159)) new ] valueCoveringAll:
					{351 to: 353}) ] valueCoveringAll:
				{337 to: 338}) ] valueCoveringAll:
			{324 to: 327}.
		[
		([
		(userPurchases
			cover: (360 to: 372)
			declaredAt: (232 to: 244)) at:
			(aUserId
				cover: (378 to: 384)
				declaredAt: (296 to: 302)) ] valueCoveringAll:
			{374 to: 376}) add:
			([
			('totalBooks' coverAll:
				{392 to: 403}) ->
				(0 coverAll:
					{408 to: 408}) ] valueCoveringAll:
				{405 to: 406}) ] valueCoveringAll:
			{387 to: 390} ]] valueCoveringAll:
		{282 to: 288}.! !
!Behavior method!
errorWrongUserCredentials
	^ 'Error - Las credenciales del usuario no son correctas' coverAll:
		{29 to: 83}.! !
!Behavior method!
createCartForUser: aUser password: aPassword
	| newId |
	[
	(self coverAll:
		{61 to: 64})
		assertUser:
			(aUser
				cover: (78 to: 82)
				declaredAt: (20 to: 24))
		existsWithPassword:
			(aPassword
				cover: (104 to: 112)
				declaredAt: (36 to: 44)) ] valueCoveringAll:
		{66 to: 76. 84 to: 102}.
	(newId _ [
	(lastId
		cover: (127 to: 132)
		declaredAt: (127 to: 132)) +
		(1 coverAll:
			{136 to: 136}) ] valueCoveringAll:
		{134 to: 134})
		cover: (118 to: 122)
		declaredAt: (52 to: 56).
	[
	(carts
		cover: (140 to: 144)
		declaredAt: (140 to: 144)) add:
		([
		(newId
			cover: (151 to: 155)
			declaredAt: (52 to: 56)) ->
			([
			(OrderedCollection
				cover: (160 to: 176)
				declaredAt: (160 to: 176)) new ] valueCoveringAll:
				{178 to: 180}) ] valueCoveringAll:
			{157 to: 158}) ] valueCoveringAll:
		{146 to: 149}.
	[
	(cartTimers
		cover: (184 to: 193)
		declaredAt: (184 to: 193)) add:
		([
		(newId
			cover: (200 to: 204)
			declaredAt: (52 to: 56)) ->
			([
			(timer
				cover: (209 to: 213)
				declaredAt: (209 to: 213)) currentTime ] valueCoveringAll:
				{215 to: 225}) ] valueCoveringAll:
			{206 to: 207}) ] valueCoveringAll:
		{195 to: 198}.
	[
	([
	(carts
		cover: (232 to: 236)
		declaredAt: (140 to: 144)) at:
		(newId
			cover: (242 to: 246)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{238 to: 240}) add:
		([
		(Cart
			cover: (255 to: 258)
			declaredAt: (255 to: 258)) createNewWithCatalog:
			(catalog
				cover: (282 to: 288)
				declaredAt: (282 to: 288)) ] valueCoveringAll:
			{260 to: 280}) ] valueCoveringAll:
		{249 to: 252}.
	[
	([
	(carts
		cover: (294 to: 298)
		declaredAt: (140 to: 144)) at:
		(newId
			cover: (304 to: 308)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{300 to: 302}) add:
		(aUser
			cover: (316 to: 320)
			declaredAt: (20 to: 24)) ] valueCoveringAll:
		{311 to: 314}.
	(lastId _ newId
		cover: (336 to: 340)
		declaredAt: (52 to: 56))
		cover: (326 to: 331)
		declaredAt: (127 to: 132).
	^ newId
		cover: (347 to: 351)
		declaredAt: (52 to: 56).! !
!Behavior method!
assertUser: aUser existsWithPassword: aPassword
	self coverAll:
		{143 to: 146}.
	[
	([
	([
	(datosUsuarios
		cover: (54 to: 66)
		declaredAt: (54 to: 66)) includesKey:
		(aUser
			cover: (81 to: 85)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{68 to: 79}) and: [
		[
		([
		(datosUsuarios
			cover: (95 to: 107)
			declaredAt: (54 to: 66)) at:
			(aUser
				cover: (112 to: 116)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{109 to: 111}) =
			(aPassword
				cover: (121 to: 129)
				declaredAt: (39 to: 47)) ] valueCoveringAll:
			{119 to: 119} ]] valueCoveringAll:
		{88 to: 91}) ifFalse: [
		[
		(self coverAll:
			{155 to: 158}) error:
			([
			([ self class ] valueCoveringAll:
				{160 to: 164}) errorWrongUserCredentials ] valueCoveringAll:
				{166 to: 190}) ] valueCoveringAll:
			{148 to: 153} ]] valueCoveringAll:
		{133 to: 140}.! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
currentTime
	^ currentTime
		cover: (16 to: 26)
		declaredAt: (16 to: 26).! !

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
errorCartIdDoesNotExist
	^ 'Error - No existe un carrito con esa ID' coverAll:
		{27 to: 67}.! !
!Behavior method!
add: anAmount ofItem: anItemID toCart: aCartID
	| cart |
	(cart _ [
	(self coverAll:
		{72 to: 75}) cartForId:
		(aCartID
			cover: (88 to: 94)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{77 to: 86})
		cover: (64 to: 67)
		declaredAt: (54 to: 57).
	[
	(self coverAll:
		{100 to: 103}) assertCartTimerDidNotExpireFor:
		(aCartID
			cover: (137 to: 143)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{105 to: 135}.
	[
	(cart
		cover: (149 to: 152)
		declaredAt: (54 to: 57))
		add:
			(anItemID
				cover: (159 to: 166)
				declaredAt: (23 to: 30))
		amount:
			(anAmount
				cover: (176 to: 183)
				declaredAt: (6 to: 13)) ] valueCoveringAll:
		{154 to: 157. 168 to: 174}.
	[
	(self coverAll:
		{189 to: 192}) updateCartTimerFor:
		(aCartID
			cover: (214 to: 220)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{194 to: 212}.! !
!Behavior method!
cartForId: aCartId
	[
	(self coverAll:
		{23 to: 26}) assertCartExists:
		(aCartId
			cover: (46 to: 52)
			declaredAt: (12 to: 18)) ] valueCoveringAll:
		{28 to: 44}.
	^ [
	([
	(carts
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) at:
		(aCartId
			cover: (68 to: 74)
			declaredAt: (12 to: 18)) ] valueCoveringAll:
		{64 to: 66}) first ] valueCoveringAll:
		{77 to: 81}.! !
!Behavior method!
assertCartExists: aCartID
	self coverAll:
		{70 to: 73}.
	[
	([
	(carts
		cover: (32 to: 36)
		declaredAt: (32 to: 36)) includesKey:
		(aCartID
			cover: (51 to: 57)
			declaredAt: (19 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{82 to: 85}) error:
			([
			([ self class ] valueCoveringAll:
				{87 to: 91}) errorCartIdDoesNotExist ] valueCoveringAll:
				{93 to: 115}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 67}.! !

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:58:35'!
PASSED!
!Behavior method!
assertCartTimerDidNotExpireFor: aCartID
	| cartTimer |
	(cartTimer _ [
	(cartTimers
		cover: (73 to: 82)
		declaredAt: (73 to: 82)) at:
		(aCartID
			cover: (88 to: 94)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{84 to: 86})
		cover: (60 to: 68)
		declaredAt: (45 to: 53).
	[
	([
	(timer
		cover: (101 to: 105)
		declaredAt: (101 to: 105))
		isDifferenceWith:
			(cartTimer
				cover: (125 to: 133)
				declaredAt: (45 to: 53))
		biggerThan:
			(30 coverAll:
				{147 to: 148}) ] valueCoveringAll:
		{107 to: 123. 135 to: 145}) ifTrue: [
		[
		(self coverAll:
			{160 to: 163}) error:
			([
			([
			(self coverAll:
				{172 to: 175}) class ] valueCoveringAll:
				{177 to: 181}) errorCartExpired ] valueCoveringAll:
				{183 to: 198}) ] valueCoveringAll:
			{165 to: 170} ]] valueCoveringAll:
		{151 to: 157}.! !
!Behavior method!
isDifferenceWith: aTime biggerThan: anAmountOfTime
	^ [
	([
	([
	(currentTime
		cover: (58 to: 68)
		declaredAt: (58 to: 68)) -
		(aTime
			cover: (72 to: 76)
			declaredAt: (19 to: 23)) ] valueCoveringAll:
		{70 to: 70}) abs ] valueCoveringAll:
		{79 to: 81}) >
		(anAmountOfTime
			cover: (85 to: 98)
			declaredAt: (37 to: 50)) ] valueCoveringAll:
		{83 to: 83}.! !
!Behavior method!
updateCartTimerFor: aCartID
	[
	(cartTimers
		cover: (31 to: 40)
		declaredAt: (31 to: 40))
		at:
			(aCartID
				cover: (46 to: 52)
				declaredAt: (21 to: 27))
		put:
			([
			(timer
				cover: (59 to: 63)
				declaredAt: (59 to: 63)) currentTime ] valueCoveringAll:
				{65 to: 75}) ] valueCoveringAll:
		{42 to: 44. 54 to: 57}.! !
!Behavior method!
listCart: aCartId
	| cartItemList cart |
	(cart _ [
	(self coverAll:
		{56 to: 59}) cartForId:
		(aCartId
			cover: (72 to: 78)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{61 to: 70})
		cover: (48 to: 51)
		declaredAt: (38 to: 41).
	[
	(self coverAll:
		{85 to: 88}) assertCartTimerDidNotExpireFor:
		(aCartId
			cover: (122 to: 128)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{90 to: 120}.
	(cartItemList _ [
	(cart
		cover: (150 to: 153)
		declaredAt: (38 to: 41)) itemListFor:
		(self coverAll:
			{168 to: 171}) ] valueCoveringAll:
		{155 to: 166})
		cover: (134 to: 145)
		declaredAt: (25 to: 36).
	[
	(self coverAll:
		{177 to: 180}) updateCartTimerFor:
		(aCartId
			cover: (202 to: 208)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{182 to: 200}.
	^ cartItemList
		cover: (215 to: 226)
		declaredAt: (25 to: 36).! !
!Behavior method!
itemListFor: aMockRestInterface
	^ [
	(aMockRestInterface
		cover: (35 to: 52)
		declaredAt: (14 to: 31)) listCartItemsFor:
		(cartItems
			cover: (72 to: 80)
			declaredAt: (72 to: 80)) ] valueCoveringAll:
		{54 to: 70}.! !
!Behavior method!
listCartItemsFor: aCartItemList
	^ aCartItemList
		cover: (35 to: 47)
		declaredAt: (19 to: 31).! !

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:58:36'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:58:36'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:58:36'!
PASSED!
!Behavior method!
listPurchasesForUser: aUser withPassword: aPassword
	[
	(self coverAll:
		{57 to: 60})
		assertUser:
			(aUser
				cover: (74 to: 78)
				declaredAt: (23 to: 27))
		existsWithPassword:
			(aPassword
				cover: (100 to: 108)
				declaredAt: (43 to: 51)) ] valueCoveringAll:
		{62 to: 72. 80 to: 98}.
	^ [
	(userPurchases
		cover: (115 to: 127)
		declaredAt: (115 to: 127)) at:
		(aUser
			cover: (133 to: 137)
			declaredAt: (23 to: 27)) ] valueCoveringAll:
		{129 to: 131}.! !

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:58:36'!
PASSED!
!Behavior method!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook
	| cartToCheckout creditCard cashier cartUser |
	(cartToCheckout _ [
	(self coverAll:
		{255 to: 258}) cartForId:
		(aCartId
			cover: (271 to: 277)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{260 to: 269})
		cover: (237 to: 250)
		declaredAt: (189 to: 202).
	(cartUser _ [
	(self coverAll:
		{293 to: 296}) userOfCart:
		(aCartId
			cover: (310 to: 316)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{298 to: 308})
		cover: (281 to: 288)
		declaredAt: (223 to: 230).
	(creditCard _ [
	(CreditCard
		cover: (334 to: 343)
		declaredAt: (334 to: 343))
		forOwner:
			(anOwner
				cover: (355 to: 361)
				declaredAt: (109 to: 115))
		withNumber:
			(aCreditCardNumber
				cover: (375 to: 391)
				declaredAt: (54 to: 70))
		withExpirationDate:
			(aDate
				cover: (413 to: 417)
				declaredAt: (92 to: 96)) ] valueCoveringAll:
		{345 to: 353. 363 to: 373. 393 to: 411})
		cover: (320 to: 329)
		declaredAt: (204 to: 213).
	(cashier _ [
	(Cashier
		cover: (434 to: 440)
		declaredAt: (434 to: 440)) withCatalog:
		(catalog
			cover: (455 to: 461)
			declaredAt: (455 to: 461)) ] valueCoveringAll:
		{442 to: 453})
		cover: (423 to: 429)
		declaredAt: (215 to: 221).
	[
	(self coverAll:
		{467 to: 470}) assertCartTimerDidNotExpireFor:
		(aCartId
			cover: (504 to: 510)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{472 to: 502}.
	[
	(cashier
		cover: (516 to: 522)
		declaredAt: (215 to: 221))
		checkout:
			(cartToCheckout
				cover: (534 to: 547)
				declaredAt: (189 to: 202))
		withCreditCard:
			(creditCard
				cover: (568 to: 577)
				declaredAt: (204 to: 213))
		onDate:
			([
			(FixedGregorianDate
				cover: (590 to: 607)
				declaredAt: (590 to: 607)) today ] valueCoveringAll:
				{609 to: 613})
		registerOn:
			(aSalesBook
				cover: (629 to: 638)
				declaredAt: (170 to: 179))
		forMerchantProcessor:
			(aMerchantProcessor
				cover: (664 to: 681)
				declaredAt: (139 to: 156)) ] valueCoveringAll:
		{524 to: 532. 552 to: 566. 582 to: 588. 617 to: 627. 642 to: 662}.
	[
	(self coverAll:
		{687 to: 690})
		updatePurchasesFor:
			(cartUser
				cover: (712 to: 719)
				declaredAt: (223 to: 230))
		withCart:
			(aCartId
				cover: (731 to: 737)
				declaredAt: (15 to: 21))
		withTotal:
			([
			(cartToCheckout
				cover: (750 to: 763)
				declaredAt: (189 to: 202)) totalItemPrice ] valueCoveringAll:
				{765 to: 778}) ] valueCoveringAll:
		{692 to: 710. 721 to: 729. 739 to: 748}.! !

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:58:36'!
PASSED!
!Behavior method!
userOfCart: aCartId
	[
	(self coverAll:
		{23 to: 26}) assertCartExists:
		(aCartId
			cover: (46 to: 52)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{28 to: 44}.
	^ [
	([
	(carts
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) at:
		(aCartId
			cover: (68 to: 74)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{64 to: 66}) second ] valueCoveringAll:
		{77 to: 82}.! !
!Behavior method!
updatePurchasesFor: aUser withCart: aCartId withTotal: aTotal
	self coverAll:
		{69 to: 72}.
	[
	([
	self listCart:
		(aCartId
			cover: (84 to: 90)
			declaredAt: (37 to: 43)) ] valueCoveringAll:
		{74 to: 82}) do: [ :aBookAmountTuple |
		[
		([
		(userPurchases
			cover: (124 to: 136)
			declaredAt: (124 to: 136)) at:
			(aUser
				cover: (142 to: 146)
				declaredAt: (21 to: 25)) ] valueCoveringAll:
			{138 to: 140})
			at:
				([
				(aBookAmountTuple
					cover: (153 to: 168)
					declaredAt: (102 to: 117)) first ] valueCoveringAll:
					{170 to: 174})
			ifPresent: [ :cant |
				[
				([
				(userPurchases
					cover: (200 to: 212)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (218 to: 222)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{214 to: 216})
					at:
						([
						(aBookAmountTuple
							cover: (229 to: 244)
							declaredAt: (102 to: 117)) first ] valueCoveringAll:
							{246 to: 250})
					put:
						([
						(cant
							cover: (257 to: 260)
							declaredAt: (192 to: 195)) +
							([
							(aBookAmountTuple
								cover: (264 to: 279)
								declaredAt: (102 to: 117)) second ] valueCoveringAll:
								{281 to: 286}) ] valueCoveringAll:
							{262 to: 262}) ] valueCoveringAll:
					{225 to: 227. 252 to: 255} ]
			ifAbsent: [
				[
				([
				(userPurchases
					cover: (304 to: 316)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (322 to: 326)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{318 to: 320})
					at:
						([
						(aBookAmountTuple
							cover: (333 to: 348)
							declaredAt: (102 to: 117)) first ] valueCoveringAll:
							{350 to: 354})
					put:
						([
						(aBookAmountTuple
							cover: (361 to: 376)
							declaredAt: (102 to: 117)) second ] valueCoveringAll:
							{378 to: 383}) ] valueCoveringAll:
					{329 to: 331. 356 to: 359} ]] valueCoveringAll:
			{149 to: 151. 180 to: 189. 293 to: 301}.
		[
		([
		(userPurchases
			cover: (390 to: 402)
			declaredAt: (124 to: 136)) at:
			(aUser
				cover: (407 to: 411)
				declaredAt: (21 to: 25)) ] valueCoveringAll:
			{404 to: 406})
			at:
				('totalBooks' coverAll:
					{418 to: 429})
			put:
				([
				([
				([
				(userPurchases
					cover: (438 to: 450)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (455 to: 459)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{452 to: 454}) at:
					('totalBooks' coverAll:
						{466 to: 477}) ] valueCoveringAll:
					{462 to: 464}) +
					(aTotal
						cover: (482 to: 487)
						declaredAt: (56 to: 61)) ] valueCoveringAll:
					{480 to: 480}) ] valueCoveringAll:
			{414 to: 416. 431 to: 434} ]] valueCoveringAll:
		{93 to: 95}.! !

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:58:36'!
PASSED!
!Behavior method!
passTime: anAmontOfTime
	(currentTime _ [
	(currentTime
		cover: (27 to: 37)
		declaredAt: (27 to: 37)) +
		(anAmontOfTime
			cover: (56 to: 68)
			declaredAt: (11 to: 23)) ] valueCoveringAll:
		{54 to: 54})
		cover: (42 to: 52)
		declaredAt: (27 to: 37).! !
!Behavior method!
errorCartExpired
	^ 'Error - El carrito utilizado expir�' coverAll:
		{21 to: 57}.! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:58:36'!
PASSED!
!MockRestInterfaceTest methodsFor: 'testing' stamp: 'G.L.S 6/24/2021 15:59:42' prior: 50882074!
test10SuccessfulCheckoutAltersUserListPurchase
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
	
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: smalltalk80) = 17.
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 170.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				forUser: usuario 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
	
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: smalltalk80) = 34.
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 340.! !

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:59:50'!
PASSED!
!Behavior method!
createNewWithCatalog: anOrderedCollection
	^ [
	([
	(self coverAll:
		{46 to: 49}) new ] valueCoveringAll:
		{51 to: 53}) initializeWith:
		(anOrderedCollection
			cover: (71 to: 89)
			declaredAt: (23 to: 41)) ] valueCoveringAll:
		{55 to: 69}.! !
!Behavior method!
initializeWith: anOrderedCollection
	(catalog _ anOrderedCollection
		cover: (49 to: 67)
		declaredAt: (17 to: 35))
		cover: (38 to: 44)
		declaredAt: (38 to: 44).
	(cartItems _ [
	(OrderedCollection
		cover: (84 to: 100)
		declaredAt: (84 to: 100)) new ] valueCoveringAll:
		{102 to: 104})
		cover: (71 to: 79)
		declaredAt: (71 to: 79).! !
!Behavior method!
isEmpty
	^ [
	(cartItems
		cover: (11 to: 19)
		declaredAt: (11 to: 19)) isEmpty ] valueCoveringAll:
		{21 to: 27}.! !

!testRun: #CartTest #test01CartThatWasJustCreatedIsEmpty stamp: 'G.L.S 6/24/2021 15:59:55'!
PASSED!
!Behavior method!
add: aBook
	[
	(self coverAll:
		{14 to: 17})
		add:
			(aBook
				cover: (24 to: 28)
				declaredAt: (6 to: 10))
		amount:
			(1 coverAll:
				{38 to: 38}) ] valueCoveringAll:
		{19 to: 22. 30 to: 36}.! !
!Behavior method!
add: aBook amount: anAmount
	| tuplaLibroCant |
	[
	(self coverAll:
		{53 to: 56}) assertBookIsAllowed:
		(aBook
			cover: (79 to: 83)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{58 to: 77}.
	[
	(self coverAll:
		{87 to: 90}) assertAmountIsValid:
		(anAmount
			cover: (113 to: 120)
			declaredAt: (20 to: 27)) ] valueCoveringAll:
		{92 to: 111}.
	(tuplaLibroCant _ [
	(OrderedCollection
		cover: (144 to: 160)
		declaredAt: (144 to: 160)) new ] valueCoveringAll:
		{162 to: 164})
		cover: (126 to: 139)
		declaredAt: (33 to: 46).
	[
	(tuplaLibroCant
		cover: (168 to: 181)
		declaredAt: (33 to: 46)) add:
		(aBook
			cover: (188 to: 192)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{183 to: 186}.
	[
	(tuplaLibroCant
		cover: (196 to: 209)
		declaredAt: (33 to: 46)) add:
		(anAmount
			cover: (216 to: 223)
			declaredAt: (20 to: 27)) ] valueCoveringAll:
		{211 to: 214}.
	[
	(cartItems
		cover: (229 to: 237)
		declaredAt: (229 to: 237)) add:
		(tuplaLibroCant
			cover: (244 to: 257)
			declaredAt: (33 to: 46)) ] valueCoveringAll:
		{239 to: 242}.! !
!Behavior method!
assertBookIsAllowed: aBook
	[
	([
	([
	(catalog
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) keys ] valueCoveringAll:
		{39 to: 42}) includes:
		(aBook
			cover: (54 to: 58)
			declaredAt: (22 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			([
			(self coverAll:
				{82 to: 85}) class ] valueCoveringAll:
				{87 to: 91}) errorBookNotInAllowedList ] valueCoveringAll:
				{93 to: 117}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{61 to: 68}.! !
!Behavior method!
assertAmountIsValid: anAmount
	self coverAll:
		{65 to: 68}.
	[
	([
	(anAmount
		cover: (35 to: 42)
		declaredAt: (22 to: 29)) isInteger ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{77 to: 80}) error:
			([
			([
			(self coverAll:
				{137 to: 140}) class ] valueCoveringAll:
				{82 to: 86}) errorAmountNotInteger ] valueCoveringAll:
				{88 to: 108}) ] valueCoveringAll:
			{70 to: 75} ]] valueCoveringAll:
		{55 to: 62}.
	[
	([
	(anAmount
		cover: (114 to: 121)
		declaredAt: (22 to: 29)) <
		(0 coverAll:
			{125 to: 125}) ] valueCoveringAll:
		{123 to: 123}) ifTrue: [
		[
		(self coverAll:
			{149 to: 152}) error:
			([
			([
			(self coverAll:
				{207 to: 210}) class ] valueCoveringAll:
				{154 to: 158}) errorAmountNegative ] valueCoveringAll:
				{160 to: 178}) ] valueCoveringAll:
			{142 to: 147} ]] valueCoveringAll:
		{128 to: 134}.
	[
	([
	(anAmount
		cover: (184 to: 191)
		declaredAt: (22 to: 29)) =
		(0 coverAll:
			{195 to: 195}) ] valueCoveringAll:
		{193 to: 193}) ifTrue: [
		[
		(self coverAll:
			{219 to: 222}) error:
			([
			([ self class ] valueCoveringAll:
				{224 to: 228}) errorAmountZero ] valueCoveringAll:
				{230 to: 244}) ] valueCoveringAll:
			{212 to: 217} ]] valueCoveringAll:
		{198 to: 204}.! !

!testRun: #CartTest #test02CartWithAnItemIsNotEmpty stamp: 'G.L.S 6/24/2021 15:59:55'!
PASSED!
!Behavior method!
size
	^ [
	(cartItems
		cover: (8 to: 16)
		declaredAt: (8 to: 16)) size ] valueCoveringAll:
		{18 to: 21}.! !
!Behavior method!
first
	^ [
	(cartItems
		cover: (9 to: 17)
		declaredAt: (9 to: 17)) first ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
second
	^ [
	(cartItems
		cover: (10 to: 18)
		declaredAt: (10 to: 18)) second ] valueCoveringAll:
		{20 to: 25}.! !

!testRun: #CartTest #test03CartWithSeveralItemsAddedContainsTheRightItemsAndAmounts stamp: 'G.L.S 6/24/2021 15:59:55'!
PASSED!
!Behavior method!
errorBookNotInAllowedList
	^ 'Error - El Libro no est� en la lista de productos permitidos' coverAll:
		{29 to: 90}.! !

!testRun: #CartTest #test04CartCannotAddItemsThatAreNotAllowed stamp: 'G.L.S 6/24/2021 15:59:55'!
PASSED!
!Behavior method!
errorAmountNotInteger
	^ 'Error - La cantidad tiene que ser un n�mero entero' coverAll:
		{25 to: 76}.! !

!testRun: #CartTest #test05CartCannotAddANonIntegerAmountOfAnItem stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorAmountNegative
	^ 'Error - La cantidad no puede ser negativa' coverAll:
		{23 to: 65}.! !

!testRun: #CartTest #test06CartCannotAddANegativeAmountOfAnItem stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorAmountZero
	^ 'Error - La cantidad de libros no puede ser 0' coverAll:
		{19 to: 64}.! !

!testRun: #CartTest #test07CartCannotAddAZeroAmountOfAnItem stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeForOwner:
			(anOwner
				cover: (106 to: 112)
				declaredAt: (11 to: 17))
		withNumber:
			(aCreditCardNumber
				cover: (126 to: 142)
				declaredAt: (31 to: 47))
		withExpirationDate:
			(aDate
				cover: (164 to: 168)
				declaredAt: (69 to: 73)) ] valueCoveringAll:
		{86 to: 104. 114 to: 124. 144 to: 162}.! !
!Behavior method!
initializeForOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate
	[
	(self coverAll:
		{88 to: 91}) assertNameNotEmpty:
		(anOwner
			cover: (113 to: 119)
			declaredAt: (21 to: 27)) ] valueCoveringAll:
		{93 to: 111}.
	[
	(self coverAll:
		{123 to: 126}) assertCardNumberIsCorrect:
		(aCreditCardNumber
			cover: (155 to: 171)
			declaredAt: (41 to: 57)) ] valueCoveringAll:
		{128 to: 153}.
	(owner _ anOwner
		cover: (185 to: 191)
		declaredAt: (21 to: 27))
		cover: (176 to: 180)
		declaredAt: (176 to: 180).
	(creditCardNumber _ aCreditCardNumber
		cover: (215 to: 231)
		declaredAt: (41 to: 57))
		cover: (195 to: 210)
		declaredAt: (195 to: 210).
	(expirationDate _ aDate
		cover: (253 to: 257)
		declaredAt: (79 to: 83))
		cover: (235 to: 248)
		declaredAt: (235 to: 248).! !
!Behavior method!
assertNameNotEmpty: anOwner
	[
	([
	([
	(anOwner
		cover: (32 to: 38)
		declaredAt: (21 to: 27)) withBlanksTrimmed ] valueCoveringAll:
		{40 to: 56}) isEmpty ] valueCoveringAll:
		{58 to: 64}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			([
			(self coverAll:
				{87 to: 90}) class ] valueCoveringAll:
				{92 to: 96}) errorOwnerEmpty ] valueCoveringAll:
				{98 to: 112}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{66 to: 72}.! !
!Behavior method!
assertCardNumberIsCorrect: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (49 to: 65)
		declaredAt: (28 to: 44)) size ] valueCoveringAll:
		{67 to: 70}) <
		(16 coverAll:
			{74 to: 75}) ] valueCoveringAll:
		{72 to: 72}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) error:
			([
			([
			(self coverAll:
				{99 to: 102}) class ] valueCoveringAll:
				{104 to: 108}) errorCardNumberLessThan16Digits ] valueCoveringAll:
				{110 to: 140}) ] valueCoveringAll:
			{92 to: 97} ]] valueCoveringAll:
		{78 to: 84}.
	[
	([
	([
	(aCreditCardNumber
		cover: (146 to: 162)
		declaredAt: (28 to: 44)) size ] valueCoveringAll:
		{164 to: 167}) >
		(16 coverAll:
			{171 to: 172}) ] valueCoveringAll:
		{169 to: 169}) ifTrue: [
		[
		(self coverAll:
			{184 to: 187}) error:
			([
			([
			(self coverAll:
				{196 to: 199}) class ] valueCoveringAll:
				{201 to: 205}) errorCardNumberMoreThan16Digits ] valueCoveringAll:
				{207 to: 237}) ] valueCoveringAll:
			{189 to: 194} ]] valueCoveringAll:
		{175 to: 181}.! !
!Behavior method!
initialize
	(stolenCards _ [
	(OrderedCollection
		cover: (29 to: 45)
		declaredAt: (29 to: 45)) new ] valueCoveringAll:
		{47 to: 49})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).
	(registeredCards _ [
	(Dictionary
		cover: (72 to: 81)
		declaredAt: (72 to: 81)) new ] valueCoveringAll:
		{83 to: 85})
		cover: (53 to: 67)
		declaredAt: (53 to: 67).! !
!Behavior method!
registerStolenCard: aCreditCard
	[
	(stolenCards
		cover: (36 to: 46)
		declaredAt: (36 to: 46)) add:
		(aCreditCard
			cover: (53 to: 63)
			declaredAt: (21 to: 31)) ] valueCoveringAll:
		{48 to: 51}.! !
!Behavior method!
registerCard: aCreditCard withBalance: aBalance
	[
	(registeredCards
		cover: (52 to: 66)
		declaredAt: (52 to: 66)) add:
		([
		(aCreditCard
			cover: (73 to: 83)
			declaredAt: (15 to: 25)) ->
			(aBalance
				cover: (88 to: 95)
				declaredAt: (40 to: 47)) ] valueCoveringAll:
			{85 to: 86}) ] valueCoveringAll:
		{68 to: 71}.! !
!Behavior method!
errorCannotCheckoutEmptyCart
	^ 'Error - No se puede hacer checkout de un carrito vac�o' coverAll:
		{32 to: 87}.! !
!Behavior method!
withCatalog: aDictionary
	^ [
	([
	(self coverAll:
		{29 to: 32}) new ] valueCoveringAll:
		{34 to: 36}) initializeWithCatalog:
		(aDictionary
			cover: (61 to: 71)
			declaredAt: (14 to: 24)) ] valueCoveringAll:
		{38 to: 59}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).! !
!Behavior method!
checkout: aCart withCreditCard: aCreditCard onDate: aDate registerOn: aSalesBook forMerchantProcessor: aMerchantProcessor
	| total |
	[
	(self coverAll:
		{143 to: 146}) assertCartIsNotEmpty:
		(aCart
			cover: (170 to: 174)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{148 to: 168}.
	[
	(self coverAll:
		{178 to: 181}) assertCartHasTheSameCatalog:
		(aCart
			cover: (212 to: 216)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{183 to: 210}.
	[
	(self coverAll:
		{220 to: 223})
		assertCard:
			(aCreditCard
				cover: (237 to: 247)
				declaredAt: (33 to: 43))
		hasNotExpiredOn:
			(aDate
				cover: (266 to: 270)
				declaredAt: (53 to: 57)) ] valueCoveringAll:
		{225 to: 235. 249 to: 264}.
	[
	(self coverAll:
		{274 to: 277})
		assertCard:
			(aCreditCard
				cover: (291 to: 301)
				declaredAt: (33 to: 43))
		isNotStolenFor:
			(aMerchantProcessor
				cover: (319 to: 336)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{279 to: 289. 303 to: 317}.
	[
	(self coverAll:
		{340 to: 343})
		assertCard:
			(aCreditCard
				cover: (357 to: 367)
				declaredAt: (33 to: 43))
		isRegisteredOn:
			(aMerchantProcessor
				cover: (385 to: 402)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{345 to: 355. 369 to: 383}.
	(total _ [
	(aCart
		cover: (417 to: 421)
		declaredAt: (11 to: 15)) totalItemPrice ] valueCoveringAll:
		{423 to: 436})
		cover: (408 to: 412)
		declaredAt: (132 to: 136).
	[
	(self coverAll:
		{442 to: 445})
		assertCard:
			(aCreditCard
				cover: (459 to: 469)
				declaredAt: (33 to: 43))
		canSpend:
			(total
				cover: (481 to: 485)
				declaredAt: (132 to: 136))
		on:
			(aMerchantProcessor
				cover: (491 to: 508)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{447 to: 457. 471 to: 479. 487 to: 489}.
	[
	(aSalesBook
		cover: (514 to: 523)
		declaredAt: (71 to: 80)) add:
		(total
			cover: (530 to: 534)
			declaredAt: (132 to: 136)) ] valueCoveringAll:
		{525 to: 528}.
	^ total
		cover: (541 to: 545)
		declaredAt: (132 to: 136).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (32 to: 36)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{38 to: 44}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			([
			(self coverAll:
				{67 to: 70}) class ] valueCoveringAll:
				{72 to: 76}) errorCannotCheckoutEmptyCart ] valueCoveringAll:
				{78 to: 105}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !

!testRun: #CashierTest #test01CashierCannotCheckoutWithAnEmptyCart stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorCannotCheckoutACartWithADifferentCatalog
	^ 'Error - No se puede hacer checkout de un carrito con un cat�logo diferente' coverAll:
		{49 to: 124}.! !
!Behavior method!
assertCartHasTheSameCatalog: aCart
	[
	([
	(aCart
		cover: (39 to: 43)
		declaredAt: (30 to: 34)) hasCatalog:
		(catalog
			cover: (57 to: 63)
			declaredAt: (57 to: 63)) ] valueCoveringAll:
		{45 to: 55}) ifFalse: [
		[
		(self coverAll:
			{76 to: 79}) error:
			([
			([
			(self coverAll:
				{88 to: 91}) class ] valueCoveringAll:
				{93 to: 97}) errorCannotCheckoutACartWithADifferentCatalog ] valueCoveringAll:
				{99 to: 143}) ] valueCoveringAll:
			{81 to: 86} ]] valueCoveringAll:
		{66 to: 73}.! !
!Behavior method!
hasCatalog: aCatalog
	^ [
	(catalog
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) =
		(aCatalog
			cover: (34 to: 41)
			declaredAt: (13 to: 20)) ] valueCoveringAll:
		{32 to: 32}.! !

!testRun: #CashierTest #test02CashierCannotCheckoutWithACartWithThatDoesntHaveAMatchingCatalog stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
= aCreditCard
	^ [
	(aCreditCard
		cover: (20 to: 30)
		declaredAt: (3 to: 13)) isNumber:
		(creditCardNumber
			cover: (42 to: 57)
			declaredAt: (42 to: 57)) ] valueCoveringAll:
		{32 to: 40}.! !
!Behavior method!
isNumber: aCreditCardNumber
	self.
	^ [
	(aCreditCardNumber
		cover: (35 to: 51)
		declaredAt: (11 to: 27)) =
		(creditCardNumber
			cover: (55 to: 70)
			declaredAt: (55 to: 70)) ] valueCoveringAll:
		{53 to: 53}.! !
!Behavior method!
assertCard: aCreditCard hasNotExpiredOn: aDate
	self coverAll:
		{94 to: 97}.
	[
	([
	(aCreditCard
		cover: (53 to: 63)
		declaredAt: (13 to: 23)) isExpiredOn:
		(aDate
			cover: (78 to: 82)
			declaredAt: (42 to: 46)) ] valueCoveringAll:
		{65 to: 76}) ifTrue: [
		[
		(self coverAll:
			{106 to: 109}) error:
			([
			([ self class ] valueCoveringAll:
				{111 to: 115}) errorExpiredCard ] valueCoveringAll:
				{117 to: 132}) ] valueCoveringAll:
			{99 to: 104} ]] valueCoveringAll:
		{85 to: 91}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	(expirationDate
		cover: (23 to: 36)
		declaredAt: (23 to: 36)) <
		(aDate
			cover: (40 to: 44)
			declaredAt: (14 to: 18)) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
assertCard: aCreditCard isNotStolenFor: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (63 to: 80)
		declaredAt: (41 to: 58)) isCardStolen:
		(aCreditCard
			cover: (96 to: 106)
			declaredAt: (13 to: 23)) ] valueCoveringAll:
		{82 to: 94}) ifTrue: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			([
			(self coverAll:
				{130 to: 133}) class ] valueCoveringAll:
				{135 to: 139}) errorStolenCard ] valueCoveringAll:
				{141 to: 155}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{109 to: 115}.! !
!Behavior method!
isCardStolen: aCreditCard
	^ [
	(stolenCards
		cover: (30 to: 40)
		declaredAt: (30 to: 40)) includes:
		(aCreditCard
			cover: (52 to: 62)
			declaredAt: (15 to: 25)) ] valueCoveringAll:
		{42 to: 50}.! !
!Behavior method!
assertCard: aCreditCard isRegisteredOn: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (64 to: 81)
		declaredAt: (41 to: 58)) isCardRegistered:
		(aCreditCard
			cover: (101 to: 111)
			declaredAt: (13 to: 23)) ] valueCoveringAll:
		{83 to: 99}) ifFalse: [
		[
		(self coverAll:
			{124 to: 127}) error:
			([
			([
			(self coverAll:
				{136 to: 139}) class ] valueCoveringAll:
				{141 to: 145}) errorNotARegisteredCard ] valueCoveringAll:
				{147 to: 169}) ] valueCoveringAll:
			{129 to: 134} ]] valueCoveringAll:
		{114 to: 121}.! !
!Behavior method!
isCardRegistered: aCreditCard
	^ [
	([
	(registeredCards
		cover: (34 to: 48)
		declaredAt: (34 to: 48)) keys ] valueCoveringAll:
		{50 to: 53}) includes:
		(aCreditCard
			cover: (65 to: 75)
			declaredAt: (19 to: 29)) ] valueCoveringAll:
		{55 to: 63}.! !
!Behavior method!
totalItemPrice
	^ [
	(cartItems
		cover: (20 to: 28)
		declaredAt: (20 to: 28)) sum: [ :bookAmountTuple |
		[
		([
		(catalog
			cover: (56 to: 62)
			declaredAt: (56 to: 62)) at:
			([
			(bookAmountTuple
				cover: (68 to: 82)
				declaredAt: (37 to: 51)) first ] valueCoveringAll:
				{84 to: 88}) ] valueCoveringAll:
			{64 to: 66}) *
			([
			(bookAmountTuple
				cover: (93 to: 107)
				declaredAt: (37 to: 51)) second ] valueCoveringAll:
				{109 to: 114}) ] valueCoveringAll:
			{91 to: 91} ]] valueCoveringAll:
		{30 to: 33}.! !
!Behavior method!
assertCard: aCreditCard canSpend: aTotal on: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (69 to: 86)
		declaredAt: (46 to: 63))
		can:
			(aCreditCard
				cover: (93 to: 103)
				declaredAt: (13 to: 23))
		spend:
			(aTotal
				cover: (112 to: 117)
				declaredAt: (35 to: 40)) ] valueCoveringAll:
		{88 to: 91. 105 to: 110}) ifFalse: [
		[
		(self coverAll:
			{130 to: 133}) error:
			([
			([
			(self coverAll:
				{142 to: 145}) class ] valueCoveringAll:
				{147 to: 151}) errorCardDoesNotHaveEnoughBalance ] valueCoveringAll:
				{153 to: 185}) ] valueCoveringAll:
			{135 to: 140} ]] valueCoveringAll:
		{120 to: 127}.! !
!Behavior method!
can: aCreditCard spend: aTotal
	| storedCard |
	[
	(registeredCards
		cover: (53 to: 67)
		declaredAt: (53 to: 67)) keysDo: [ :storedCreditCard |
		[
		([
		(storedCreditCard
			cover: (103 to: 118)
			declaredAt: (82 to: 97)) =
			(aCreditCard
				cover: (122 to: 132)
				declaredAt: (6 to: 16)) ] valueCoveringAll:
			{120 to: 120}) ifTrue: [
			(storedCard _ storedCreditCard
				cover: (157 to: 172)
				declaredAt: (82 to: 97))
				cover: (143 to: 152)
				declaredAt: (37 to: 46) ]] valueCoveringAll:
			{134 to: 140} ]] valueCoveringAll:
		{69 to: 75}.
	^ [
	([
	(registeredCards
		cover: (187 to: 201)
		declaredAt: (53 to: 67)) at:
		(storedCard
			cover: (206 to: 215)
			declaredAt: (37 to: 46)) ] valueCoveringAll:
		{203 to: 205}) >=
		(aTotal
			cover: (221 to: 226)
			declaredAt: (25 to: 30)) ] valueCoveringAll:
		{218 to: 219}.! !

!testRun: #CashierTest #test03CheckoutReturnsTheRightAmount stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorExpiredCard
	^ 'Error - No se puede hacer checkout con una tarjeta de cr�dito vac�a' coverAll:
		{20 to: 88}.! !

!testRun: #CashierTest #test04CashierCannotCheckOutWithAnExpiredCard stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutRegistersSale stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorStolenCard
	^ 'Error - No se puede realizar una transacci�n con una tarjeta robada' coverAll:
		{19 to: 87}.! !

!testRun: #CashierTest #test06CashierCannotCheckoutAStolenCard stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorNotARegisteredCard
	^ 'Error - La tarjeta utilizada no se encuentra registrada' coverAll:
		{27 to: 83}.! !

!testRun: #CashierTest #test07CashierCannotCheckoutWithAFakeCard stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorCardDoesNotHaveEnoughBalance
	^ 'Error - La tarjeta de cr�dito no tiene suficiente saldo' coverAll:
		{38 to: 94}.! !

!testRun: #CashierTest #test08CashierCannotCheckoutWithACardWithoutMoney stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorOwnerEmpty
	^ 'Error - El nombre due�o de la tarjeta de cr�dito no puede estar vac�o' coverAll:
		{19 to: 89}.! !

!testRun: #CreditCardTest #test01CreditCardCannotHaveEmptyOwner stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorCardNumberLessThan16Digits
	^ 'Error - El n�mero de la tarjeta de cr�dito tiene menos de 16 d�gitos' coverAll:
		{35 to: 104}.! !

!testRun: #CreditCardTest #test02CreditCardNumberForACreditCardCannotHaveLessThan16Digits stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorCardNumberMoreThan16Digits
	^ 'Error - El n�mero de la tarjeta de cr�dito tiene m�s de 16 d�gitos' coverAll:
		{35 to: 102}.! !

!testRun: #CreditCardTest #test03CreditCardNumberForACreditCardCannotHaveMoreThan16Digits stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
initialize
	(currentTime _ 0 coverAll:
		{29 to: 29})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).! !
!Behavior method!
createFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeFor:
			(aUserDataDictionary
				cover: (101 to: 119)
				declaredAt: (12 to: 30))
		withCatalog:
			(aCatalog
				cover: (134 to: 141)
				declaredAt: (45 to: 52))
		withTimer:
			(aTimer
				cover: (154 to: 159)
				declaredAt: (65 to: 70)) ] valueCoveringAll:
		{86 to: 99. 121 to: 132. 143 to: 152}.! !
!Behavior method!
initializeFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer
	(datosUsuarios _ aUserDataDictionary
		cover: (97 to: 115)
		declaredAt: (16 to: 34))
		cover: (80 to: 92)
		declaredAt: (80 to: 92).
	(catalog _ aCatalog
		cover: (130 to: 137)
		declaredAt: (49 to: 56))
		cover: (119 to: 125)
		declaredAt: (119 to: 125).
	(carts _ [
	(Dictionary
		cover: (150 to: 159)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{161 to: 163})
		cover: (141 to: 145)
		declaredAt: (141 to: 145).
	(cartTimers _ [
	(Dictionary
		cover: (181 to: 190)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{192 to: 194})
		cover: (167 to: 176)
		declaredAt: (167 to: 176).
	(lastId _ 0 coverAll:
		{208 to: 208})
		cover: (198 to: 203)
		declaredAt: (198 to: 203).
	(timer _ aTimer
		cover: (221 to: 226)
		declaredAt: (69 to: 74))
		cover: (212 to: 216)
		declaredAt: (212 to: 216).
	(userPurchases _ [
	(Dictionary
		cover: (249 to: 258)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{260 to: 262})
		cover: (232 to: 244)
		declaredAt: (232 to: 244).
	[
	(datosUsuarios
		cover: (268 to: 280)
		declaredAt: (80 to: 92)) keysDo: [ :aUserId |
		[
		(userPurchases
			cover: (310 to: 322)
			declaredAt: (232 to: 244)) add:
			([
			(aUserId
				cover: (329 to: 335)
				declaredAt: (296 to: 302)) ->
				([
				(Dictionary
					cover: (340 to: 349)
					declaredAt: (150 to: 159)) new ] valueCoveringAll:
					{351 to: 353}) ] valueCoveringAll:
				{337 to: 338}) ] valueCoveringAll:
			{324 to: 327}.
		[
		([
		(userPurchases
			cover: (360 to: 372)
			declaredAt: (232 to: 244)) at:
			(aUserId
				cover: (378 to: 384)
				declaredAt: (296 to: 302)) ] valueCoveringAll:
			{374 to: 376}) add:
			([
			('totalBooks' coverAll:
				{392 to: 403}) ->
				(0 coverAll:
					{408 to: 408}) ] valueCoveringAll:
				{405 to: 406}) ] valueCoveringAll:
			{387 to: 390} ]] valueCoveringAll:
		{282 to: 288}.! !
!Behavior method!
errorWrongUserCredentials
	^ 'Error - Las credenciales del usuario no son correctas' coverAll:
		{29 to: 83}.! !
!Behavior method!
createCartForUser: aUser password: aPassword
	| newId |
	[
	(self coverAll:
		{61 to: 64})
		assertUser:
			(aUser
				cover: (78 to: 82)
				declaredAt: (20 to: 24))
		existsWithPassword:
			(aPassword
				cover: (104 to: 112)
				declaredAt: (36 to: 44)) ] valueCoveringAll:
		{66 to: 76. 84 to: 102}.
	(newId _ [
	(lastId
		cover: (127 to: 132)
		declaredAt: (127 to: 132)) +
		(1 coverAll:
			{136 to: 136}) ] valueCoveringAll:
		{134 to: 134})
		cover: (118 to: 122)
		declaredAt: (52 to: 56).
	[
	(carts
		cover: (140 to: 144)
		declaredAt: (140 to: 144)) add:
		([
		(newId
			cover: (151 to: 155)
			declaredAt: (52 to: 56)) ->
			([
			(OrderedCollection
				cover: (160 to: 176)
				declaredAt: (160 to: 176)) new ] valueCoveringAll:
				{178 to: 180}) ] valueCoveringAll:
			{157 to: 158}) ] valueCoveringAll:
		{146 to: 149}.
	[
	(cartTimers
		cover: (184 to: 193)
		declaredAt: (184 to: 193)) add:
		([
		(newId
			cover: (200 to: 204)
			declaredAt: (52 to: 56)) ->
			([
			(timer
				cover: (209 to: 213)
				declaredAt: (209 to: 213)) currentTime ] valueCoveringAll:
				{215 to: 225}) ] valueCoveringAll:
			{206 to: 207}) ] valueCoveringAll:
		{195 to: 198}.
	[
	([
	(carts
		cover: (232 to: 236)
		declaredAt: (140 to: 144)) at:
		(newId
			cover: (242 to: 246)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{238 to: 240}) add:
		([
		(Cart
			cover: (255 to: 258)
			declaredAt: (255 to: 258)) createNewWithCatalog:
			(catalog
				cover: (282 to: 288)
				declaredAt: (282 to: 288)) ] valueCoveringAll:
			{260 to: 280}) ] valueCoveringAll:
		{249 to: 252}.
	[
	([
	(carts
		cover: (294 to: 298)
		declaredAt: (140 to: 144)) at:
		(newId
			cover: (304 to: 308)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{300 to: 302}) add:
		(aUser
			cover: (316 to: 320)
			declaredAt: (20 to: 24)) ] valueCoveringAll:
		{311 to: 314}.
	(lastId _ newId
		cover: (336 to: 340)
		declaredAt: (52 to: 56))
		cover: (326 to: 331)
		declaredAt: (127 to: 132).
	^ newId
		cover: (347 to: 351)
		declaredAt: (52 to: 56).! !
!Behavior method!
assertUser: aUser existsWithPassword: aPassword
	self coverAll:
		{143 to: 146}.
	[
	([
	([
	(datosUsuarios
		cover: (54 to: 66)
		declaredAt: (54 to: 66)) includesKey:
		(aUser
			cover: (81 to: 85)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{68 to: 79}) and: [
		[
		([
		(datosUsuarios
			cover: (95 to: 107)
			declaredAt: (54 to: 66)) at:
			(aUser
				cover: (112 to: 116)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{109 to: 111}) =
			(aPassword
				cover: (121 to: 129)
				declaredAt: (39 to: 47)) ] valueCoveringAll:
			{119 to: 119} ]] valueCoveringAll:
		{88 to: 91}) ifFalse: [
		[
		(self coverAll:
			{155 to: 158}) error:
			([
			([ self class ] valueCoveringAll:
				{160 to: 164}) errorWrongUserCredentials ] valueCoveringAll:
				{166 to: 190}) ] valueCoveringAll:
			{148 to: 153} ]] valueCoveringAll:
		{133 to: 140}.! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
currentTime
	^ currentTime
		cover: (16 to: 26)
		declaredAt: (16 to: 26).! !

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
errorCartIdDoesNotExist
	^ 'Error - No existe un carrito con esa ID' coverAll:
		{27 to: 67}.! !
!Behavior method!
add: anAmount ofItem: anItemID toCart: aCartID
	| cart |
	(cart _ [
	(self coverAll:
		{72 to: 75}) cartForId:
		(aCartID
			cover: (88 to: 94)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{77 to: 86})
		cover: (64 to: 67)
		declaredAt: (54 to: 57).
	[
	(self coverAll:
		{100 to: 103}) assertCartTimerDidNotExpireFor:
		(aCartID
			cover: (137 to: 143)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{105 to: 135}.
	[
	(cart
		cover: (149 to: 152)
		declaredAt: (54 to: 57))
		add:
			(anItemID
				cover: (159 to: 166)
				declaredAt: (23 to: 30))
		amount:
			(anAmount
				cover: (176 to: 183)
				declaredAt: (6 to: 13)) ] valueCoveringAll:
		{154 to: 157. 168 to: 174}.
	[
	(self coverAll:
		{189 to: 192}) updateCartTimerFor:
		(aCartID
			cover: (214 to: 220)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{194 to: 212}.! !
!Behavior method!
cartForId: aCartId
	[
	(self coverAll:
		{23 to: 26}) assertCartExists:
		(aCartId
			cover: (46 to: 52)
			declaredAt: (12 to: 18)) ] valueCoveringAll:
		{28 to: 44}.
	^ [
	([
	(carts
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) at:
		(aCartId
			cover: (68 to: 74)
			declaredAt: (12 to: 18)) ] valueCoveringAll:
		{64 to: 66}) first ] valueCoveringAll:
		{77 to: 81}.! !
!Behavior method!
assertCartExists: aCartID
	self coverAll:
		{70 to: 73}.
	[
	([
	(carts
		cover: (32 to: 36)
		declaredAt: (32 to: 36)) includesKey:
		(aCartID
			cover: (51 to: 57)
			declaredAt: (19 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{82 to: 85}) error:
			([
			([ self class ] valueCoveringAll:
				{87 to: 91}) errorCartIdDoesNotExist ] valueCoveringAll:
				{93 to: 115}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 67}.! !

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
assertCartTimerDidNotExpireFor: aCartID
	| cartTimer |
	(cartTimer _ [
	(cartTimers
		cover: (73 to: 82)
		declaredAt: (73 to: 82)) at:
		(aCartID
			cover: (88 to: 94)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{84 to: 86})
		cover: (60 to: 68)
		declaredAt: (45 to: 53).
	[
	([
	(timer
		cover: (101 to: 105)
		declaredAt: (101 to: 105))
		isDifferenceWith:
			(cartTimer
				cover: (125 to: 133)
				declaredAt: (45 to: 53))
		biggerThan:
			(30 coverAll:
				{147 to: 148}) ] valueCoveringAll:
		{107 to: 123. 135 to: 145}) ifTrue: [
		[
		(self coverAll:
			{160 to: 163}) error:
			([
			([
			(self coverAll:
				{172 to: 175}) class ] valueCoveringAll:
				{177 to: 181}) errorCartExpired ] valueCoveringAll:
				{183 to: 198}) ] valueCoveringAll:
			{165 to: 170} ]] valueCoveringAll:
		{151 to: 157}.! !
!Behavior method!
isDifferenceWith: aTime biggerThan: anAmountOfTime
	^ [
	([
	([
	(currentTime
		cover: (58 to: 68)
		declaredAt: (58 to: 68)) -
		(aTime
			cover: (72 to: 76)
			declaredAt: (19 to: 23)) ] valueCoveringAll:
		{70 to: 70}) abs ] valueCoveringAll:
		{79 to: 81}) >
		(anAmountOfTime
			cover: (85 to: 98)
			declaredAt: (37 to: 50)) ] valueCoveringAll:
		{83 to: 83}.! !
!Behavior method!
updateCartTimerFor: aCartID
	[
	(cartTimers
		cover: (31 to: 40)
		declaredAt: (31 to: 40))
		at:
			(aCartID
				cover: (46 to: 52)
				declaredAt: (21 to: 27))
		put:
			([
			(timer
				cover: (59 to: 63)
				declaredAt: (59 to: 63)) currentTime ] valueCoveringAll:
				{65 to: 75}) ] valueCoveringAll:
		{42 to: 44. 54 to: 57}.! !
!Behavior method!
listCart: aCartId
	| cartItemList cart |
	(cart _ [
	(self coverAll:
		{56 to: 59}) cartForId:
		(aCartId
			cover: (72 to: 78)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{61 to: 70})
		cover: (48 to: 51)
		declaredAt: (38 to: 41).
	[
	(self coverAll:
		{85 to: 88}) assertCartTimerDidNotExpireFor:
		(aCartId
			cover: (122 to: 128)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{90 to: 120}.
	(cartItemList _ [
	(cart
		cover: (150 to: 153)
		declaredAt: (38 to: 41)) itemListFor:
		(self coverAll:
			{168 to: 171}) ] valueCoveringAll:
		{155 to: 166})
		cover: (134 to: 145)
		declaredAt: (25 to: 36).
	[
	(self coverAll:
		{177 to: 180}) updateCartTimerFor:
		(aCartId
			cover: (202 to: 208)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{182 to: 200}.
	^ cartItemList
		cover: (215 to: 226)
		declaredAt: (25 to: 36).! !
!Behavior method!
itemListFor: aMockRestInterface
	^ [
	(aMockRestInterface
		cover: (35 to: 52)
		declaredAt: (14 to: 31)) listCartItemsFor:
		(cartItems
			cover: (72 to: 80)
			declaredAt: (72 to: 80)) ] valueCoveringAll:
		{54 to: 70}.! !
!Behavior method!
listCartItemsFor: aCartItemList
	^ aCartItemList
		cover: (35 to: 47)
		declaredAt: (19 to: 31).! !

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
listPurchasesForUser: aUser withPassword: aPassword
	[
	(self coverAll:
		{57 to: 60})
		assertUser:
			(aUser
				cover: (74 to: 78)
				declaredAt: (23 to: 27))
		existsWithPassword:
			(aPassword
				cover: (100 to: 108)
				declaredAt: (43 to: 51)) ] valueCoveringAll:
		{62 to: 72. 80 to: 98}.
	^ [
	(userPurchases
		cover: (115 to: 127)
		declaredAt: (115 to: 127)) at:
		(aUser
			cover: (133 to: 137)
			declaredAt: (23 to: 27)) ] valueCoveringAll:
		{129 to: 131}.! !

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook
	| cartToCheckout creditCard cashier cartUser |
	(cartToCheckout _ [
	(self coverAll:
		{255 to: 258}) cartForId:
		(aCartId
			cover: (271 to: 277)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{260 to: 269})
		cover: (237 to: 250)
		declaredAt: (189 to: 202).
	(cartUser _ [
	(self coverAll:
		{293 to: 296}) userOfCart:
		(aCartId
			cover: (310 to: 316)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{298 to: 308})
		cover: (281 to: 288)
		declaredAt: (223 to: 230).
	(creditCard _ [
	(CreditCard
		cover: (334 to: 343)
		declaredAt: (334 to: 343))
		forOwner:
			(anOwner
				cover: (355 to: 361)
				declaredAt: (109 to: 115))
		withNumber:
			(aCreditCardNumber
				cover: (375 to: 391)
				declaredAt: (54 to: 70))
		withExpirationDate:
			(aDate
				cover: (413 to: 417)
				declaredAt: (92 to: 96)) ] valueCoveringAll:
		{345 to: 353. 363 to: 373. 393 to: 411})
		cover: (320 to: 329)
		declaredAt: (204 to: 213).
	(cashier _ [
	(Cashier
		cover: (434 to: 440)
		declaredAt: (434 to: 440)) withCatalog:
		(catalog
			cover: (455 to: 461)
			declaredAt: (455 to: 461)) ] valueCoveringAll:
		{442 to: 453})
		cover: (423 to: 429)
		declaredAt: (215 to: 221).
	[
	(self coverAll:
		{467 to: 470}) assertCartTimerDidNotExpireFor:
		(aCartId
			cover: (504 to: 510)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{472 to: 502}.
	[
	(cashier
		cover: (516 to: 522)
		declaredAt: (215 to: 221))
		checkout:
			(cartToCheckout
				cover: (534 to: 547)
				declaredAt: (189 to: 202))
		withCreditCard:
			(creditCard
				cover: (568 to: 577)
				declaredAt: (204 to: 213))
		onDate:
			([
			(FixedGregorianDate
				cover: (590 to: 607)
				declaredAt: (590 to: 607)) today ] valueCoveringAll:
				{609 to: 613})
		registerOn:
			(aSalesBook
				cover: (629 to: 638)
				declaredAt: (170 to: 179))
		forMerchantProcessor:
			(aMerchantProcessor
				cover: (664 to: 681)
				declaredAt: (139 to: 156)) ] valueCoveringAll:
		{524 to: 532. 552 to: 566. 582 to: 588. 617 to: 627. 642 to: 662}.
	[
	(self coverAll:
		{687 to: 690})
		updatePurchasesFor:
			(cartUser
				cover: (712 to: 719)
				declaredAt: (223 to: 230))
		withCart:
			(aCartId
				cover: (731 to: 737)
				declaredAt: (15 to: 21))
		withTotal:
			([
			(cartToCheckout
				cover: (750 to: 763)
				declaredAt: (189 to: 202)) totalItemPrice ] valueCoveringAll:
				{765 to: 778}) ] valueCoveringAll:
		{692 to: 710. 721 to: 729. 739 to: 748}.! !

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
userOfCart: aCartId
	[
	(self coverAll:
		{23 to: 26}) assertCartExists:
		(aCartId
			cover: (46 to: 52)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{28 to: 44}.
	^ [
	([
	(carts
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) at:
		(aCartId
			cover: (68 to: 74)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{64 to: 66}) second ] valueCoveringAll:
		{77 to: 82}.! !
!Behavior method!
updatePurchasesFor: aUser withCart: aCartId withTotal: aTotal
	self coverAll:
		{69 to: 72}.
	[
	([
	self listCart:
		(aCartId
			cover: (84 to: 90)
			declaredAt: (37 to: 43)) ] valueCoveringAll:
		{74 to: 82}) do: [ :aBookAmountTuple |
		[
		([
		(userPurchases
			cover: (124 to: 136)
			declaredAt: (124 to: 136)) at:
			(aUser
				cover: (142 to: 146)
				declaredAt: (21 to: 25)) ] valueCoveringAll:
			{138 to: 140})
			at:
				([
				(aBookAmountTuple
					cover: (153 to: 168)
					declaredAt: (102 to: 117)) first ] valueCoveringAll:
					{170 to: 174})
			ifPresent: [ :cant |
				[
				([
				(userPurchases
					cover: (200 to: 212)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (218 to: 222)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{214 to: 216})
					at:
						([
						(aBookAmountTuple
							cover: (229 to: 244)
							declaredAt: (102 to: 117)) first ] valueCoveringAll:
							{246 to: 250})
					put:
						([
						(cant
							cover: (257 to: 260)
							declaredAt: (192 to: 195)) +
							([
							(aBookAmountTuple
								cover: (264 to: 279)
								declaredAt: (102 to: 117)) second ] valueCoveringAll:
								{281 to: 286}) ] valueCoveringAll:
							{262 to: 262}) ] valueCoveringAll:
					{225 to: 227. 252 to: 255} ]
			ifAbsent: [
				[
				([
				(userPurchases
					cover: (304 to: 316)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (322 to: 326)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{318 to: 320})
					at:
						([
						(aBookAmountTuple
							cover: (333 to: 348)
							declaredAt: (102 to: 117)) first ] valueCoveringAll:
							{350 to: 354})
					put:
						([
						(aBookAmountTuple
							cover: (361 to: 376)
							declaredAt: (102 to: 117)) second ] valueCoveringAll:
							{378 to: 383}) ] valueCoveringAll:
					{329 to: 331. 356 to: 359} ]] valueCoveringAll:
			{149 to: 151. 180 to: 189. 293 to: 301}.
		[
		([
		(userPurchases
			cover: (390 to: 402)
			declaredAt: (124 to: 136)) at:
			(aUser
				cover: (407 to: 411)
				declaredAt: (21 to: 25)) ] valueCoveringAll:
			{404 to: 406})
			at:
				('totalBooks' coverAll:
					{418 to: 429})
			put:
				([
				([
				([
				(userPurchases
					cover: (438 to: 450)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (455 to: 459)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{452 to: 454}) at:
					('totalBooks' coverAll:
						{466 to: 477}) ] valueCoveringAll:
					{462 to: 464}) +
					(aTotal
						cover: (482 to: 487)
						declaredAt: (56 to: 61)) ] valueCoveringAll:
					{480 to: 480}) ] valueCoveringAll:
			{414 to: 416. 431 to: 434} ]] valueCoveringAll:
		{93 to: 95}.! !

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!Behavior method!
passTime: anAmontOfTime
	(currentTime _ [
	(currentTime
		cover: (27 to: 37)
		declaredAt: (27 to: 37)) +
		(anAmontOfTime
			cover: (56 to: 68)
			declaredAt: (11 to: 23)) ] valueCoveringAll:
		{54 to: 54})
		cover: (42 to: 52)
		declaredAt: (27 to: 37).! !
!Behavior method!
errorCartExpired
	^ 'Error - El carrito utilizado expir�' coverAll:
		{21 to: 57}.! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 15:59:56'!
PASSED!
!MockRestInterface methodsFor: 'checkout' stamp: 'G.L.S 6/24/2021 16:00:44'!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	
	cartToCheckout := self cartForId: aCartId.
	cartUser := self userOfCart: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	self assertCartTimerDidNotExpireFor: aCartId.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId withTotal: cartToCheckout totalItemPrice.
! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/24/2021 16:00:44' prior: 50881912!
test09CannotCheckOutWithACartThatDoesNotExist

		
	self testFail: [mockInterface checkOutCart: 0 withCreditCard: '' withExpirationDate: '' withOwner: '' withMerchantProcesor: merchantProcessor registerOn: sales]  		withErrorMessage: MockRestInterface errorCartIdDoesNotExist.! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/24/2021 16:00:44' prior: 50884869!
test10SuccessfulCheckoutAltersUserListPurchase
	
	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
	
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: smalltalk80) = 17.
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 170.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface checkOutCart: cartId 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.
	
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: smalltalk80) = 34.
	self assert: ((mockInterface listPurchasesForUser: usuario withPassword: password) at: 'totalBooks') = 340.! !
!MockRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 6/24/2021 16:00:44' prior: 50882416!
test11CannotUseACartAfterItExpired

	| password usuario cartId |
	
	usuario := 'pepe'.
	password := '5678'.
	
	cartId := mockInterface createCartForUser: usuario password: password.
	
	mockInterface add: 17 ofItem: smalltalk80 toCart: cartId.
	
	mockInterface listCart: cartId.
	
	timer passTime: 35.
	
	self testFail: [mockInterface add: 17 ofItem: smalltalk80 toCart: cartId] withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface listCart: cartId]  withErrorMessage: MockRestInterface errorCartExpired.
	
	self testFail: [mockInterface checkOutCart: cartId 
				withCreditCard: '0000000000000000' 
				withExpirationDate: FixedGregorianDate tomorrow 
				withOwner: 'Marco' 
				withMerchantProcesor: merchantProcessor 
				registerOn: sales.] 
		withErrorMessage: MockRestInterface errorCartExpired.
	
! !

!methodRemoval: MockRestInterface #checkOutCart:forUser:withCreditCard:withExpirationDate:withOwner:withMerchantProcesor:registerOn: stamp: 'G.L.S 6/24/2021 16:00:44'!
checkOutCart: aCartId forUser: aUser withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook   
	
	| cartToCheckout creditCard cashier cartUser |
	
	cartToCheckout := self cartForId: aCartId.
	cartUser := self userOfCart: aCartId.
	creditCard := CreditCard forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate.
	
	cashier := Cashier withCatalog: catalog.
	
	self assertCartTimerDidNotExpireFor: aCartId.
	
	cashier checkout: cartToCheckout 
		withCreditCard: creditCard 
		onDate: FixedGregorianDate today
		registerOn: aSalesBook
		forMerchantProcessor: aMerchantProcessor.
	
	self updatePurchasesFor: cartUser withCart: aCartId withTotal: cartToCheckout totalItemPrice.
!

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 16:01:03'!
PASSED!
!Behavior method!
createNewWithCatalog: anOrderedCollection
	^ [
	([
	(self coverAll:
		{46 to: 49}) new ] valueCoveringAll:
		{51 to: 53}) initializeWith:
		(anOrderedCollection
			cover: (71 to: 89)
			declaredAt: (23 to: 41)) ] valueCoveringAll:
		{55 to: 69}.! !
!Behavior method!
initializeWith: anOrderedCollection
	(catalog _ anOrderedCollection
		cover: (49 to: 67)
		declaredAt: (17 to: 35))
		cover: (38 to: 44)
		declaredAt: (38 to: 44).
	(cartItems _ [
	(OrderedCollection
		cover: (84 to: 100)
		declaredAt: (84 to: 100)) new ] valueCoveringAll:
		{102 to: 104})
		cover: (71 to: 79)
		declaredAt: (71 to: 79).! !
!Behavior method!
isEmpty
	^ [
	(cartItems
		cover: (11 to: 19)
		declaredAt: (11 to: 19)) isEmpty ] valueCoveringAll:
		{21 to: 27}.! !

!testRun: #CartTest #test01CartThatWasJustCreatedIsEmpty stamp: 'G.L.S 6/24/2021 16:01:08'!
PASSED!
!Behavior method!
add: aBook
	[
	(self coverAll:
		{14 to: 17})
		add:
			(aBook
				cover: (24 to: 28)
				declaredAt: (6 to: 10))
		amount:
			(1 coverAll:
				{38 to: 38}) ] valueCoveringAll:
		{19 to: 22. 30 to: 36}.! !
!Behavior method!
add: aBook amount: anAmount
	| tuplaLibroCant |
	[
	(self coverAll:
		{53 to: 56}) assertBookIsAllowed:
		(aBook
			cover: (79 to: 83)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{58 to: 77}.
	[
	(self coverAll:
		{87 to: 90}) assertAmountIsValid:
		(anAmount
			cover: (113 to: 120)
			declaredAt: (20 to: 27)) ] valueCoveringAll:
		{92 to: 111}.
	(tuplaLibroCant _ [
	(OrderedCollection
		cover: (144 to: 160)
		declaredAt: (144 to: 160)) new ] valueCoveringAll:
		{162 to: 164})
		cover: (126 to: 139)
		declaredAt: (33 to: 46).
	[
	(tuplaLibroCant
		cover: (168 to: 181)
		declaredAt: (33 to: 46)) add:
		(aBook
			cover: (188 to: 192)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{183 to: 186}.
	[
	(tuplaLibroCant
		cover: (196 to: 209)
		declaredAt: (33 to: 46)) add:
		(anAmount
			cover: (216 to: 223)
			declaredAt: (20 to: 27)) ] valueCoveringAll:
		{211 to: 214}.
	[
	(cartItems
		cover: (229 to: 237)
		declaredAt: (229 to: 237)) add:
		(tuplaLibroCant
			cover: (244 to: 257)
			declaredAt: (33 to: 46)) ] valueCoveringAll:
		{239 to: 242}.! !
!Behavior method!
assertBookIsAllowed: aBook
	[
	([
	([
	(catalog
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) keys ] valueCoveringAll:
		{39 to: 42}) includes:
		(aBook
			cover: (54 to: 58)
			declaredAt: (22 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			([
			(self coverAll:
				{82 to: 85}) class ] valueCoveringAll:
				{87 to: 91}) errorBookNotInAllowedList ] valueCoveringAll:
				{93 to: 117}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{61 to: 68}.! !
!Behavior method!
assertAmountIsValid: anAmount
	self coverAll:
		{65 to: 68}.
	[
	([
	(anAmount
		cover: (35 to: 42)
		declaredAt: (22 to: 29)) isInteger ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{77 to: 80}) error:
			([
			([
			(self coverAll:
				{137 to: 140}) class ] valueCoveringAll:
				{82 to: 86}) errorAmountNotInteger ] valueCoveringAll:
				{88 to: 108}) ] valueCoveringAll:
			{70 to: 75} ]] valueCoveringAll:
		{55 to: 62}.
	[
	([
	(anAmount
		cover: (114 to: 121)
		declaredAt: (22 to: 29)) <
		(0 coverAll:
			{125 to: 125}) ] valueCoveringAll:
		{123 to: 123}) ifTrue: [
		[
		(self coverAll:
			{149 to: 152}) error:
			([
			([
			(self coverAll:
				{207 to: 210}) class ] valueCoveringAll:
				{154 to: 158}) errorAmountNegative ] valueCoveringAll:
				{160 to: 178}) ] valueCoveringAll:
			{142 to: 147} ]] valueCoveringAll:
		{128 to: 134}.
	[
	([
	(anAmount
		cover: (184 to: 191)
		declaredAt: (22 to: 29)) =
		(0 coverAll:
			{195 to: 195}) ] valueCoveringAll:
		{193 to: 193}) ifTrue: [
		[
		(self coverAll:
			{219 to: 222}) error:
			([
			([ self class ] valueCoveringAll:
				{224 to: 228}) errorAmountZero ] valueCoveringAll:
				{230 to: 244}) ] valueCoveringAll:
			{212 to: 217} ]] valueCoveringAll:
		{198 to: 204}.! !

!testRun: #CartTest #test02CartWithAnItemIsNotEmpty stamp: 'G.L.S 6/24/2021 16:01:08'!
PASSED!
!Behavior method!
size
	^ [
	(cartItems
		cover: (8 to: 16)
		declaredAt: (8 to: 16)) size ] valueCoveringAll:
		{18 to: 21}.! !
!Behavior method!
first
	^ [
	(cartItems
		cover: (9 to: 17)
		declaredAt: (9 to: 17)) first ] valueCoveringAll:
		{19 to: 23}.! !
!Behavior method!
second
	^ [
	(cartItems
		cover: (10 to: 18)
		declaredAt: (10 to: 18)) second ] valueCoveringAll:
		{20 to: 25}.! !

!testRun: #CartTest #test03CartWithSeveralItemsAddedContainsTheRightItemsAndAmounts stamp: 'G.L.S 6/24/2021 16:01:08'!
PASSED!
!Behavior method!
errorBookNotInAllowedList
	^ 'Error - El Libro no est� en la lista de productos permitidos' coverAll:
		{29 to: 90}.! !

!testRun: #CartTest #test04CartCannotAddItemsThatAreNotAllowed stamp: 'G.L.S 6/24/2021 16:01:08'!
PASSED!
!Behavior method!
errorAmountNotInteger
	^ 'Error - La cantidad tiene que ser un n�mero entero' coverAll:
		{25 to: 76}.! !

!testRun: #CartTest #test05CartCannotAddANonIntegerAmountOfAnItem stamp: 'G.L.S 6/24/2021 16:01:08'!
PASSED!
!Behavior method!
errorAmountNegative
	^ 'Error - La cantidad no puede ser negativa' coverAll:
		{23 to: 65}.! !

!testRun: #CartTest #test06CartCannotAddANegativeAmountOfAnItem stamp: 'G.L.S 6/24/2021 16:01:08'!
PASSED!
!Behavior method!
errorAmountZero
	^ 'Error - La cantidad de libros no puede ser 0' coverAll:
		{19 to: 64}.! !

!testRun: #CartTest #test07CartCannotAddAZeroAmountOfAnItem stamp: 'G.L.S 6/24/2021 16:01:08'!
PASSED!
!Behavior method!
forOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeForOwner:
			(anOwner
				cover: (106 to: 112)
				declaredAt: (11 to: 17))
		withNumber:
			(aCreditCardNumber
				cover: (126 to: 142)
				declaredAt: (31 to: 47))
		withExpirationDate:
			(aDate
				cover: (164 to: 168)
				declaredAt: (69 to: 73)) ] valueCoveringAll:
		{86 to: 104. 114 to: 124. 144 to: 162}.! !
!Behavior method!
initializeForOwner: anOwner withNumber: aCreditCardNumber withExpirationDate: aDate
	[
	(self coverAll:
		{88 to: 91}) assertNameNotEmpty:
		(anOwner
			cover: (113 to: 119)
			declaredAt: (21 to: 27)) ] valueCoveringAll:
		{93 to: 111}.
	[
	(self coverAll:
		{123 to: 126}) assertCardNumberIsCorrect:
		(aCreditCardNumber
			cover: (155 to: 171)
			declaredAt: (41 to: 57)) ] valueCoveringAll:
		{128 to: 153}.
	(owner _ anOwner
		cover: (185 to: 191)
		declaredAt: (21 to: 27))
		cover: (176 to: 180)
		declaredAt: (176 to: 180).
	(creditCardNumber _ aCreditCardNumber
		cover: (215 to: 231)
		declaredAt: (41 to: 57))
		cover: (195 to: 210)
		declaredAt: (195 to: 210).
	(expirationDate _ aDate
		cover: (253 to: 257)
		declaredAt: (79 to: 83))
		cover: (235 to: 248)
		declaredAt: (235 to: 248).! !
!Behavior method!
assertNameNotEmpty: anOwner
	[
	([
	([
	(anOwner
		cover: (32 to: 38)
		declaredAt: (21 to: 27)) withBlanksTrimmed ] valueCoveringAll:
		{40 to: 56}) isEmpty ] valueCoveringAll:
		{58 to: 64}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) error:
			([
			([
			(self coverAll:
				{87 to: 90}) class ] valueCoveringAll:
				{92 to: 96}) errorOwnerEmpty ] valueCoveringAll:
				{98 to: 112}) ] valueCoveringAll:
			{80 to: 85} ]] valueCoveringAll:
		{66 to: 72}.! !
!Behavior method!
assertCardNumberIsCorrect: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (49 to: 65)
		declaredAt: (28 to: 44)) size ] valueCoveringAll:
		{67 to: 70}) <
		(16 coverAll:
			{74 to: 75}) ] valueCoveringAll:
		{72 to: 72}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) error:
			([
			([
			(self coverAll:
				{99 to: 102}) class ] valueCoveringAll:
				{104 to: 108}) errorCardNumberLessThan16Digits ] valueCoveringAll:
				{110 to: 140}) ] valueCoveringAll:
			{92 to: 97} ]] valueCoveringAll:
		{78 to: 84}.
	[
	([
	([
	(aCreditCardNumber
		cover: (146 to: 162)
		declaredAt: (28 to: 44)) size ] valueCoveringAll:
		{164 to: 167}) >
		(16 coverAll:
			{171 to: 172}) ] valueCoveringAll:
		{169 to: 169}) ifTrue: [
		[
		(self coverAll:
			{184 to: 187}) error:
			([
			([
			(self coverAll:
				{196 to: 199}) class ] valueCoveringAll:
				{201 to: 205}) errorCardNumberMoreThan16Digits ] valueCoveringAll:
				{207 to: 237}) ] valueCoveringAll:
			{189 to: 194} ]] valueCoveringAll:
		{175 to: 181}.! !
!Behavior method!
initialize
	(stolenCards _ [
	(OrderedCollection
		cover: (29 to: 45)
		declaredAt: (29 to: 45)) new ] valueCoveringAll:
		{47 to: 49})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).
	(registeredCards _ [
	(Dictionary
		cover: (72 to: 81)
		declaredAt: (72 to: 81)) new ] valueCoveringAll:
		{83 to: 85})
		cover: (53 to: 67)
		declaredAt: (53 to: 67).! !
!Behavior method!
registerStolenCard: aCreditCard
	[
	(stolenCards
		cover: (36 to: 46)
		declaredAt: (36 to: 46)) add:
		(aCreditCard
			cover: (53 to: 63)
			declaredAt: (21 to: 31)) ] valueCoveringAll:
		{48 to: 51}.! !
!Behavior method!
registerCard: aCreditCard withBalance: aBalance
	[
	(registeredCards
		cover: (52 to: 66)
		declaredAt: (52 to: 66)) add:
		([
		(aCreditCard
			cover: (73 to: 83)
			declaredAt: (15 to: 25)) ->
			(aBalance
				cover: (88 to: 95)
				declaredAt: (40 to: 47)) ] valueCoveringAll:
			{85 to: 86}) ] valueCoveringAll:
		{68 to: 71}.! !
!Behavior method!
= aCreditCard
	^ [
	(aCreditCard
		cover: (20 to: 30)
		declaredAt: (3 to: 13)) isNumber:
		(creditCardNumber
			cover: (42 to: 57)
			declaredAt: (42 to: 57)) ] valueCoveringAll:
		{32 to: 40}.! !
!Behavior method!
isNumber: aCreditCardNumber
	self.
	^ [
	(aCreditCardNumber
		cover: (35 to: 51)
		declaredAt: (11 to: 27)) =
		(creditCardNumber
			cover: (55 to: 70)
			declaredAt: (55 to: 70)) ] valueCoveringAll:
		{53 to: 53}.! !
!Behavior method!
errorCannotCheckoutEmptyCart
	^ 'Error - No se puede hacer checkout de un carrito vac�o' coverAll:
		{32 to: 87}.! !
!Behavior method!
withCatalog: aDictionary
	^ [
	([
	(self coverAll:
		{29 to: 32}) new ] valueCoveringAll:
		{34 to: 36}) initializeWithCatalog:
		(aDictionary
			cover: (61 to: 71)
			declaredAt: (14 to: 24)) ] valueCoveringAll:
		{38 to: 59}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).! !
!Behavior method!
checkout: aCart withCreditCard: aCreditCard onDate: aDate registerOn: aSalesBook forMerchantProcessor: aMerchantProcessor
	| total |
	[
	(self coverAll:
		{143 to: 146}) assertCartIsNotEmpty:
		(aCart
			cover: (170 to: 174)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{148 to: 168}.
	[
	(self coverAll:
		{178 to: 181}) assertCartHasTheSameCatalog:
		(aCart
			cover: (212 to: 216)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{183 to: 210}.
	[
	(self coverAll:
		{220 to: 223})
		assertCard:
			(aCreditCard
				cover: (237 to: 247)
				declaredAt: (33 to: 43))
		hasNotExpiredOn:
			(aDate
				cover: (266 to: 270)
				declaredAt: (53 to: 57)) ] valueCoveringAll:
		{225 to: 235. 249 to: 264}.
	[
	(self coverAll:
		{274 to: 277})
		assertCard:
			(aCreditCard
				cover: (291 to: 301)
				declaredAt: (33 to: 43))
		isNotStolenFor:
			(aMerchantProcessor
				cover: (319 to: 336)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{279 to: 289. 303 to: 317}.
	[
	(self coverAll:
		{340 to: 343})
		assertCard:
			(aCreditCard
				cover: (357 to: 367)
				declaredAt: (33 to: 43))
		isRegisteredOn:
			(aMerchantProcessor
				cover: (385 to: 402)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{345 to: 355. 369 to: 383}.
	(total _ [
	(aCart
		cover: (417 to: 421)
		declaredAt: (11 to: 15)) totalItemPrice ] valueCoveringAll:
		{423 to: 436})
		cover: (408 to: 412)
		declaredAt: (132 to: 136).
	[
	(self coverAll:
		{442 to: 445})
		assertCard:
			(aCreditCard
				cover: (459 to: 469)
				declaredAt: (33 to: 43))
		canSpend:
			(total
				cover: (481 to: 485)
				declaredAt: (132 to: 136))
		on:
			(aMerchantProcessor
				cover: (491 to: 508)
				declaredAt: (104 to: 121)) ] valueCoveringAll:
		{447 to: 457. 471 to: 479. 487 to: 489}.
	[
	(aSalesBook
		cover: (514 to: 523)
		declaredAt: (71 to: 80)) add:
		(total
			cover: (530 to: 534)
			declaredAt: (132 to: 136)) ] valueCoveringAll:
		{525 to: 528}.
	^ total
		cover: (541 to: 545)
		declaredAt: (132 to: 136).! !
!Behavior method!
assertCartIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (32 to: 36)
		declaredAt: (23 to: 27)) isEmpty ] valueCoveringAll:
		{38 to: 44}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			([
			(self coverAll:
				{67 to: 70}) class ] valueCoveringAll:
				{72 to: 76}) errorCannotCheckoutEmptyCart ] valueCoveringAll:
				{78 to: 105}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !

!testRun: #CashierTest #test01CashierCannotCheckoutWithAnEmptyCart stamp: 'G.L.S 6/24/2021 16:01:08'!
PASSED!
!Behavior method!
errorCannotCheckoutACartWithADifferentCatalog
	^ 'Error - No se puede hacer checkout de un carrito con un cat�logo diferente' coverAll:
		{49 to: 124}.! !
!Behavior method!
assertCartHasTheSameCatalog: aCart
	[
	([
	(aCart
		cover: (39 to: 43)
		declaredAt: (30 to: 34)) hasCatalog:
		(catalog
			cover: (57 to: 63)
			declaredAt: (57 to: 63)) ] valueCoveringAll:
		{45 to: 55}) ifFalse: [
		[
		(self coverAll:
			{76 to: 79}) error:
			([
			([
			(self coverAll:
				{88 to: 91}) class ] valueCoveringAll:
				{93 to: 97}) errorCannotCheckoutACartWithADifferentCatalog ] valueCoveringAll:
				{99 to: 143}) ] valueCoveringAll:
			{81 to: 86} ]] valueCoveringAll:
		{66 to: 73}.! !
!Behavior method!
hasCatalog: aCatalog
	^ [
	(catalog
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) =
		(aCatalog
			cover: (34 to: 41)
			declaredAt: (13 to: 20)) ] valueCoveringAll:
		{32 to: 32}.! !

!testRun: #CashierTest #test02CashierCannotCheckoutWithACartWithThatDoesntHaveAMatchingCatalog stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
assertCard: aCreditCard hasNotExpiredOn: aDate
	self coverAll:
		{94 to: 97}.
	[
	([
	(aCreditCard
		cover: (53 to: 63)
		declaredAt: (13 to: 23)) isExpiredOn:
		(aDate
			cover: (78 to: 82)
			declaredAt: (42 to: 46)) ] valueCoveringAll:
		{65 to: 76}) ifTrue: [
		[
		(self coverAll:
			{106 to: 109}) error:
			([
			([ self class ] valueCoveringAll:
				{111 to: 115}) errorExpiredCard ] valueCoveringAll:
				{117 to: 132}) ] valueCoveringAll:
			{99 to: 104} ]] valueCoveringAll:
		{85 to: 91}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	(expirationDate
		cover: (23 to: 36)
		declaredAt: (23 to: 36)) <
		(aDate
			cover: (40 to: 44)
			declaredAt: (14 to: 18)) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
assertCard: aCreditCard isNotStolenFor: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (63 to: 80)
		declaredAt: (41 to: 58)) isCardStolen:
		(aCreditCard
			cover: (96 to: 106)
			declaredAt: (13 to: 23)) ] valueCoveringAll:
		{82 to: 94}) ifTrue: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			([
			(self coverAll:
				{130 to: 133}) class ] valueCoveringAll:
				{135 to: 139}) errorStolenCard ] valueCoveringAll:
				{141 to: 155}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{109 to: 115}.! !
!Behavior method!
isCardStolen: aCreditCard
	^ [
	(stolenCards
		cover: (30 to: 40)
		declaredAt: (30 to: 40)) includes:
		(aCreditCard
			cover: (52 to: 62)
			declaredAt: (15 to: 25)) ] valueCoveringAll:
		{42 to: 50}.! !
!Behavior method!
assertCard: aCreditCard isRegisteredOn: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (64 to: 81)
		declaredAt: (41 to: 58)) isCardRegistered:
		(aCreditCard
			cover: (101 to: 111)
			declaredAt: (13 to: 23)) ] valueCoveringAll:
		{83 to: 99}) ifFalse: [
		[
		(self coverAll:
			{124 to: 127}) error:
			([
			([
			(self coverAll:
				{136 to: 139}) class ] valueCoveringAll:
				{141 to: 145}) errorNotARegisteredCard ] valueCoveringAll:
				{147 to: 169}) ] valueCoveringAll:
			{129 to: 134} ]] valueCoveringAll:
		{114 to: 121}.! !
!Behavior method!
isCardRegistered: aCreditCard
	^ [
	([
	(registeredCards
		cover: (34 to: 48)
		declaredAt: (34 to: 48)) keys ] valueCoveringAll:
		{50 to: 53}) includes:
		(aCreditCard
			cover: (65 to: 75)
			declaredAt: (19 to: 29)) ] valueCoveringAll:
		{55 to: 63}.! !
!Behavior method!
totalItemPrice
	^ [
	(cartItems
		cover: (20 to: 28)
		declaredAt: (20 to: 28)) sum: [ :bookAmountTuple |
		[
		([
		(catalog
			cover: (56 to: 62)
			declaredAt: (56 to: 62)) at:
			([
			(bookAmountTuple
				cover: (68 to: 82)
				declaredAt: (37 to: 51)) first ] valueCoveringAll:
				{84 to: 88}) ] valueCoveringAll:
			{64 to: 66}) *
			([
			(bookAmountTuple
				cover: (93 to: 107)
				declaredAt: (37 to: 51)) second ] valueCoveringAll:
				{109 to: 114}) ] valueCoveringAll:
			{91 to: 91} ]] valueCoveringAll:
		{30 to: 33}.! !
!Behavior method!
assertCard: aCreditCard canSpend: aTotal on: aMerchantProcessor
	[
	([
	(aMerchantProcessor
		cover: (69 to: 86)
		declaredAt: (46 to: 63))
		can:
			(aCreditCard
				cover: (93 to: 103)
				declaredAt: (13 to: 23))
		spend:
			(aTotal
				cover: (112 to: 117)
				declaredAt: (35 to: 40)) ] valueCoveringAll:
		{88 to: 91. 105 to: 110}) ifFalse: [
		[
		(self coverAll:
			{130 to: 133}) error:
			([
			([
			(self coverAll:
				{142 to: 145}) class ] valueCoveringAll:
				{147 to: 151}) errorCardDoesNotHaveEnoughBalance ] valueCoveringAll:
				{153 to: 185}) ] valueCoveringAll:
			{135 to: 140} ]] valueCoveringAll:
		{120 to: 127}.! !
!Behavior method!
can: aCreditCard spend: aTotal
	| storedCard |
	[
	(registeredCards
		cover: (53 to: 67)
		declaredAt: (53 to: 67)) keysDo: [ :storedCreditCard |
		[
		([
		(storedCreditCard
			cover: (103 to: 118)
			declaredAt: (82 to: 97)) =
			(aCreditCard
				cover: (122 to: 132)
				declaredAt: (6 to: 16)) ] valueCoveringAll:
			{120 to: 120}) ifTrue: [
			(storedCard _ storedCreditCard
				cover: (157 to: 172)
				declaredAt: (82 to: 97))
				cover: (143 to: 152)
				declaredAt: (37 to: 46) ]] valueCoveringAll:
			{134 to: 140} ]] valueCoveringAll:
		{69 to: 75}.
	^ [
	([
	(registeredCards
		cover: (187 to: 201)
		declaredAt: (53 to: 67)) at:
		(storedCard
			cover: (206 to: 215)
			declaredAt: (37 to: 46)) ] valueCoveringAll:
		{203 to: 205}) >=
		(aTotal
			cover: (221 to: 226)
			declaredAt: (25 to: 30)) ] valueCoveringAll:
		{218 to: 219}.! !

!testRun: #CashierTest #test03CheckoutReturnsTheRightAmount stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
errorExpiredCard
	^ 'Error - No se puede hacer checkout con una tarjeta de cr�dito vac�a' coverAll:
		{20 to: 88}.! !

!testRun: #CashierTest #test04CashierCannotCheckOutWithAnExpiredCard stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!

!testRun: #CashierTest #test05CashierCheckoutRegistersSale stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
errorStolenCard
	^ 'Error - No se puede realizar una transacci�n con una tarjeta robada' coverAll:
		{19 to: 87}.! !

!testRun: #CashierTest #test06CashierCannotCheckoutAStolenCard stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
errorNotARegisteredCard
	^ 'Error - La tarjeta utilizada no se encuentra registrada' coverAll:
		{27 to: 83}.! !

!testRun: #CashierTest #test07CashierCannotCheckoutWithAFakeCard stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
errorCardDoesNotHaveEnoughBalance
	^ 'Error - La tarjeta de cr�dito no tiene suficiente saldo' coverAll:
		{38 to: 94}.! !

!testRun: #CashierTest #test08CashierCannotCheckoutWithACardWithoutMoney stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
errorOwnerEmpty
	^ 'Error - El nombre due�o de la tarjeta de cr�dito no puede estar vac�o' coverAll:
		{19 to: 89}.! !

!testRun: #CreditCardTest #test01CreditCardCannotHaveEmptyOwner stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
errorCardNumberLessThan16Digits
	^ 'Error - El n�mero de la tarjeta de cr�dito tiene menos de 16 d�gitos' coverAll:
		{35 to: 104}.! !

!testRun: #CreditCardTest #test02CreditCardNumberForACreditCardCannotHaveLessThan16Digits stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
errorCardNumberMoreThan16Digits
	^ 'Error - El n�mero de la tarjeta de cr�dito tiene m�s de 16 d�gitos' coverAll:
		{35 to: 102}.! !

!testRun: #CreditCardTest #test03CreditCardNumberForACreditCardCannotHaveMoreThan16Digits stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
initialize
	(currentTime _ 0 coverAll:
		{29 to: 29})
		cover: (14 to: 24)
		declaredAt: (14 to: 24).! !
!Behavior method!
createFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeFor:
			(aUserDataDictionary
				cover: (101 to: 119)
				declaredAt: (12 to: 30))
		withCatalog:
			(aCatalog
				cover: (134 to: 141)
				declaredAt: (45 to: 52))
		withTimer:
			(aTimer
				cover: (154 to: 159)
				declaredAt: (65 to: 70)) ] valueCoveringAll:
		{86 to: 99. 121 to: 132. 143 to: 152}.! !
!Behavior method!
initializeFor: aUserDataDictionary withCatalog: aCatalog withTimer: aTimer
	(datosUsuarios _ aUserDataDictionary
		cover: (97 to: 115)
		declaredAt: (16 to: 34))
		cover: (80 to: 92)
		declaredAt: (80 to: 92).
	(catalog _ aCatalog
		cover: (130 to: 137)
		declaredAt: (49 to: 56))
		cover: (119 to: 125)
		declaredAt: (119 to: 125).
	(carts _ [
	(Dictionary
		cover: (150 to: 159)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{161 to: 163})
		cover: (141 to: 145)
		declaredAt: (141 to: 145).
	(cartTimers _ [
	(Dictionary
		cover: (181 to: 190)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{192 to: 194})
		cover: (167 to: 176)
		declaredAt: (167 to: 176).
	(lastId _ 0 coverAll:
		{208 to: 208})
		cover: (198 to: 203)
		declaredAt: (198 to: 203).
	(timer _ aTimer
		cover: (221 to: 226)
		declaredAt: (69 to: 74))
		cover: (212 to: 216)
		declaredAt: (212 to: 216).
	(userPurchases _ [
	(Dictionary
		cover: (249 to: 258)
		declaredAt: (150 to: 159)) new ] valueCoveringAll:
		{260 to: 262})
		cover: (232 to: 244)
		declaredAt: (232 to: 244).
	[
	(datosUsuarios
		cover: (268 to: 280)
		declaredAt: (80 to: 92)) keysDo: [ :aUserId |
		[
		(userPurchases
			cover: (310 to: 322)
			declaredAt: (232 to: 244)) add:
			([
			(aUserId
				cover: (329 to: 335)
				declaredAt: (296 to: 302)) ->
				([
				(Dictionary
					cover: (340 to: 349)
					declaredAt: (150 to: 159)) new ] valueCoveringAll:
					{351 to: 353}) ] valueCoveringAll:
				{337 to: 338}) ] valueCoveringAll:
			{324 to: 327}.
		[
		([
		(userPurchases
			cover: (360 to: 372)
			declaredAt: (232 to: 244)) at:
			(aUserId
				cover: (378 to: 384)
				declaredAt: (296 to: 302)) ] valueCoveringAll:
			{374 to: 376}) add:
			([
			('totalBooks' coverAll:
				{392 to: 403}) ->
				(0 coverAll:
					{408 to: 408}) ] valueCoveringAll:
				{405 to: 406}) ] valueCoveringAll:
			{387 to: 390} ]] valueCoveringAll:
		{282 to: 288}.! !
!Behavior method!
errorWrongUserCredentials
	^ 'Error - Las credenciales del usuario no son correctas' coverAll:
		{29 to: 83}.! !
!Behavior method!
createCartForUser: aUser password: aPassword
	| newId |
	[
	(self coverAll:
		{61 to: 64})
		assertUser:
			(aUser
				cover: (78 to: 82)
				declaredAt: (20 to: 24))
		existsWithPassword:
			(aPassword
				cover: (104 to: 112)
				declaredAt: (36 to: 44)) ] valueCoveringAll:
		{66 to: 76. 84 to: 102}.
	(newId _ [
	(lastId
		cover: (127 to: 132)
		declaredAt: (127 to: 132)) +
		(1 coverAll:
			{136 to: 136}) ] valueCoveringAll:
		{134 to: 134})
		cover: (118 to: 122)
		declaredAt: (52 to: 56).
	[
	(carts
		cover: (140 to: 144)
		declaredAt: (140 to: 144)) add:
		([
		(newId
			cover: (151 to: 155)
			declaredAt: (52 to: 56)) ->
			([
			(OrderedCollection
				cover: (160 to: 176)
				declaredAt: (160 to: 176)) new ] valueCoveringAll:
				{178 to: 180}) ] valueCoveringAll:
			{157 to: 158}) ] valueCoveringAll:
		{146 to: 149}.
	[
	(cartTimers
		cover: (184 to: 193)
		declaredAt: (184 to: 193)) add:
		([
		(newId
			cover: (200 to: 204)
			declaredAt: (52 to: 56)) ->
			([
			(timer
				cover: (209 to: 213)
				declaredAt: (209 to: 213)) currentTime ] valueCoveringAll:
				{215 to: 225}) ] valueCoveringAll:
			{206 to: 207}) ] valueCoveringAll:
		{195 to: 198}.
	[
	([
	(carts
		cover: (232 to: 236)
		declaredAt: (140 to: 144)) at:
		(newId
			cover: (242 to: 246)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{238 to: 240}) add:
		([
		(Cart
			cover: (255 to: 258)
			declaredAt: (255 to: 258)) createNewWithCatalog:
			(catalog
				cover: (282 to: 288)
				declaredAt: (282 to: 288)) ] valueCoveringAll:
			{260 to: 280}) ] valueCoveringAll:
		{249 to: 252}.
	[
	([
	(carts
		cover: (294 to: 298)
		declaredAt: (140 to: 144)) at:
		(newId
			cover: (304 to: 308)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{300 to: 302}) add:
		(aUser
			cover: (316 to: 320)
			declaredAt: (20 to: 24)) ] valueCoveringAll:
		{311 to: 314}.
	(lastId _ newId
		cover: (336 to: 340)
		declaredAt: (52 to: 56))
		cover: (326 to: 331)
		declaredAt: (127 to: 132).
	^ newId
		cover: (347 to: 351)
		declaredAt: (52 to: 56).! !
!Behavior method!
assertUser: aUser existsWithPassword: aPassword
	self coverAll:
		{143 to: 146}.
	[
	([
	([
	(datosUsuarios
		cover: (54 to: 66)
		declaredAt: (54 to: 66)) includesKey:
		(aUser
			cover: (81 to: 85)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{68 to: 79}) and: [
		[
		([
		(datosUsuarios
			cover: (95 to: 107)
			declaredAt: (54 to: 66)) at:
			(aUser
				cover: (112 to: 116)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{109 to: 111}) =
			(aPassword
				cover: (121 to: 129)
				declaredAt: (39 to: 47)) ] valueCoveringAll:
			{119 to: 119} ]] valueCoveringAll:
		{88 to: 91}) ifFalse: [
		[
		(self coverAll:
			{155 to: 158}) error:
			([
			([ self class ] valueCoveringAll:
				{160 to: 164}) errorWrongUserCredentials ] valueCoveringAll:
				{166 to: 190}) ] valueCoveringAll:
			{148 to: 153} ]] valueCoveringAll:
		{133 to: 140}.! !

!testRun: #MockRestInterfaceTest #test01CannotCreateCartWithTheWrongUserPassword stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
currentTime
	^ currentTime
		cover: (16 to: 26)
		declaredAt: (16 to: 26).! !

!testRun: #MockRestInterfaceTest #test02CreateCartForAnExistingUserDoesNotFail stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!

!testRun: #MockRestInterfaceTest #test03CannotCreateCartForAUserThatDoesntExist stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
errorCartIdDoesNotExist
	^ 'Error - No existe un carrito con esa ID' coverAll:
		{27 to: 67}.! !
!Behavior method!
add: anAmount ofItem: anItemID toCart: aCartID
	| cart |
	(cart _ [
	(self coverAll:
		{72 to: 75}) cartForId:
		(aCartID
			cover: (88 to: 94)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{77 to: 86})
		cover: (64 to: 67)
		declaredAt: (54 to: 57).
	[
	(self coverAll:
		{100 to: 103}) assertCartTimerDidNotExpireFor:
		(aCartID
			cover: (137 to: 143)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{105 to: 135}.
	[
	(cart
		cover: (149 to: 152)
		declaredAt: (54 to: 57))
		add:
			(anItemID
				cover: (159 to: 166)
				declaredAt: (23 to: 30))
		amount:
			(anAmount
				cover: (176 to: 183)
				declaredAt: (6 to: 13)) ] valueCoveringAll:
		{154 to: 157. 168 to: 174}.
	[
	(self coverAll:
		{189 to: 192}) updateCartTimerFor:
		(aCartID
			cover: (214 to: 220)
			declaredAt: (40 to: 46)) ] valueCoveringAll:
		{194 to: 212}.! !
!Behavior method!
cartForId: aCartId
	[
	(self coverAll:
		{23 to: 26}) assertCartExists:
		(aCartId
			cover: (46 to: 52)
			declaredAt: (12 to: 18)) ] valueCoveringAll:
		{28 to: 44}.
	^ [
	([
	(carts
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) at:
		(aCartId
			cover: (68 to: 74)
			declaredAt: (12 to: 18)) ] valueCoveringAll:
		{64 to: 66}) first ] valueCoveringAll:
		{77 to: 81}.! !
!Behavior method!
assertCartExists: aCartID
	self coverAll:
		{70 to: 73}.
	[
	([
	(carts
		cover: (32 to: 36)
		declaredAt: (32 to: 36)) includesKey:
		(aCartID
			cover: (51 to: 57)
			declaredAt: (19 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{82 to: 85}) error:
			([
			([ self class ] valueCoveringAll:
				{87 to: 91}) errorCartIdDoesNotExist ] valueCoveringAll:
				{93 to: 115}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{60 to: 67}.! !

!testRun: #MockRestInterfaceTest #test04CannotAddItemToAnUnexistentCart stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
assertCartTimerDidNotExpireFor: aCartID
	| cartTimer |
	(cartTimer _ [
	(cartTimers
		cover: (73 to: 82)
		declaredAt: (73 to: 82)) at:
		(aCartID
			cover: (88 to: 94)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{84 to: 86})
		cover: (60 to: 68)
		declaredAt: (45 to: 53).
	[
	([
	(timer
		cover: (101 to: 105)
		declaredAt: (101 to: 105))
		isDifferenceWith:
			(cartTimer
				cover: (125 to: 133)
				declaredAt: (45 to: 53))
		biggerThan:
			(30 coverAll:
				{147 to: 148}) ] valueCoveringAll:
		{107 to: 123. 135 to: 145}) ifTrue: [
		[
		(self coverAll:
			{160 to: 163}) error:
			([
			([
			(self coverAll:
				{172 to: 175}) class ] valueCoveringAll:
				{177 to: 181}) errorCartExpired ] valueCoveringAll:
				{183 to: 198}) ] valueCoveringAll:
			{165 to: 170} ]] valueCoveringAll:
		{151 to: 157}.! !
!Behavior method!
isDifferenceWith: aTime biggerThan: anAmountOfTime
	^ [
	([
	([
	(currentTime
		cover: (58 to: 68)
		declaredAt: (58 to: 68)) -
		(aTime
			cover: (72 to: 76)
			declaredAt: (19 to: 23)) ] valueCoveringAll:
		{70 to: 70}) abs ] valueCoveringAll:
		{79 to: 81}) >
		(anAmountOfTime
			cover: (85 to: 98)
			declaredAt: (37 to: 50)) ] valueCoveringAll:
		{83 to: 83}.! !
!Behavior method!
updateCartTimerFor: aCartID
	[
	(cartTimers
		cover: (31 to: 40)
		declaredAt: (31 to: 40))
		at:
			(aCartID
				cover: (46 to: 52)
				declaredAt: (21 to: 27))
		put:
			([
			(timer
				cover: (59 to: 63)
				declaredAt: (59 to: 63)) currentTime ] valueCoveringAll:
				{65 to: 75}) ] valueCoveringAll:
		{42 to: 44. 54 to: 57}.! !
!Behavior method!
listCart: aCartId
	| cartItemList cart |
	(cart _ [
	(self coverAll:
		{56 to: 59}) cartForId:
		(aCartId
			cover: (72 to: 78)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{61 to: 70})
		cover: (48 to: 51)
		declaredAt: (38 to: 41).
	[
	(self coverAll:
		{85 to: 88}) assertCartTimerDidNotExpireFor:
		(aCartId
			cover: (122 to: 128)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{90 to: 120}.
	(cartItemList _ [
	(cart
		cover: (150 to: 153)
		declaredAt: (38 to: 41)) itemListFor:
		(self coverAll:
			{168 to: 171}) ] valueCoveringAll:
		{155 to: 166})
		cover: (134 to: 145)
		declaredAt: (25 to: 36).
	[
	(self coverAll:
		{177 to: 180}) updateCartTimerFor:
		(aCartId
			cover: (202 to: 208)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{182 to: 200}.
	^ cartItemList
		cover: (215 to: 226)
		declaredAt: (25 to: 36).! !
!Behavior method!
itemListFor: aMockRestInterface
	^ [
	(aMockRestInterface
		cover: (35 to: 52)
		declaredAt: (14 to: 31)) listCartItemsFor:
		(cartItems
			cover: (72 to: 80)
			declaredAt: (72 to: 80)) ] valueCoveringAll:
		{54 to: 70}.! !
!Behavior method!
listCartItemsFor: aCartItemList
	^ aCartItemList
		cover: (35 to: 47)
		declaredAt: (19 to: 31).! !

!testRun: #MockRestInterfaceTest #test05AddingItemsToCartWorksAsExpected stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!

!testRun: #MockRestInterfaceTest #test06DifferentCartsCannotHaveTheSameId stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!

!testRun: #MockRestInterfaceTest #test07CannotListCartAnUnexistentCart stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
listPurchasesForUser: aUser withPassword: aPassword
	[
	(self coverAll:
		{57 to: 60})
		assertUser:
			(aUser
				cover: (74 to: 78)
				declaredAt: (23 to: 27))
		existsWithPassword:
			(aPassword
				cover: (100 to: 108)
				declaredAt: (43 to: 51)) ] valueCoveringAll:
		{62 to: 72. 80 to: 98}.
	^ [
	(userPurchases
		cover: (115 to: 127)
		declaredAt: (115 to: 127)) at:
		(aUser
			cover: (133 to: 137)
			declaredAt: (23 to: 27)) ] valueCoveringAll:
		{129 to: 131}.! !

!testRun: #MockRestInterfaceTest #test08CannotListPurchasesWithAnUserThatDoesntExist stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
checkOutCart: aCartId withCreditCard: aCreditCardNumber withExpirationDate: aDate withOwner: anOwner withMerchantProcesor: aMerchantProcessor registerOn: aSalesBook
	| cartToCheckout creditCard cashier cartUser |
	(cartToCheckout _ [
	(self coverAll:
		{240 to: 243}) cartForId:
		(aCartId
			cover: (256 to: 262)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{245 to: 254})
		cover: (222 to: 235)
		declaredAt: (174 to: 187).
	(cartUser _ [
	(self coverAll:
		{278 to: 281}) userOfCart:
		(aCartId
			cover: (295 to: 301)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{283 to: 293})
		cover: (266 to: 273)
		declaredAt: (208 to: 215).
	(creditCard _ [
	(CreditCard
		cover: (319 to: 328)
		declaredAt: (319 to: 328))
		forOwner:
			(anOwner
				cover: (340 to: 346)
				declaredAt: (94 to: 100))
		withNumber:
			(aCreditCardNumber
				cover: (360 to: 376)
				declaredAt: (39 to: 55))
		withExpirationDate:
			(aDate
				cover: (398 to: 402)
				declaredAt: (77 to: 81)) ] valueCoveringAll:
		{330 to: 338. 348 to: 358. 378 to: 396})
		cover: (305 to: 314)
		declaredAt: (189 to: 198).
	(cashier _ [
	(Cashier
		cover: (419 to: 425)
		declaredAt: (419 to: 425)) withCatalog:
		(catalog
			cover: (440 to: 446)
			declaredAt: (440 to: 446)) ] valueCoveringAll:
		{427 to: 438})
		cover: (408 to: 414)
		declaredAt: (200 to: 206).
	[
	(self coverAll:
		{452 to: 455}) assertCartTimerDidNotExpireFor:
		(aCartId
			cover: (489 to: 495)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{457 to: 487}.
	[
	(cashier
		cover: (501 to: 507)
		declaredAt: (200 to: 206))
		checkout:
			(cartToCheckout
				cover: (519 to: 532)
				declaredAt: (174 to: 187))
		withCreditCard:
			(creditCard
				cover: (553 to: 562)
				declaredAt: (189 to: 198))
		onDate:
			([
			(FixedGregorianDate
				cover: (575 to: 592)
				declaredAt: (575 to: 592)) today ] valueCoveringAll:
				{594 to: 598})
		registerOn:
			(aSalesBook
				cover: (614 to: 623)
				declaredAt: (155 to: 164))
		forMerchantProcessor:
			(aMerchantProcessor
				cover: (649 to: 666)
				declaredAt: (124 to: 141)) ] valueCoveringAll:
		{509 to: 517. 537 to: 551. 567 to: 573. 602 to: 612. 627 to: 647}.
	[
	(self coverAll:
		{672 to: 675})
		updatePurchasesFor:
			(cartUser
				cover: (697 to: 704)
				declaredAt: (208 to: 215))
		withCart:
			(aCartId
				cover: (716 to: 722)
				declaredAt: (15 to: 21))
		withTotal:
			([
			(cartToCheckout
				cover: (735 to: 748)
				declaredAt: (174 to: 187)) totalItemPrice ] valueCoveringAll:
				{750 to: 763}) ] valueCoveringAll:
		{677 to: 695. 706 to: 714. 724 to: 733}.! !

!testRun: #MockRestInterfaceTest #test09CannotCheckOutWithACartThatDoesNotExist stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
userOfCart: aCartId
	[
	(self coverAll:
		{23 to: 26}) assertCartExists:
		(aCartId
			cover: (46 to: 52)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{28 to: 44}.
	^ [
	([
	(carts
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) at:
		(aCartId
			cover: (68 to: 74)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{64 to: 66}) second ] valueCoveringAll:
		{77 to: 82}.! !
!Behavior method!
updatePurchasesFor: aUser withCart: aCartId withTotal: aTotal
	self coverAll:
		{69 to: 72}.
	[
	([
	self listCart:
		(aCartId
			cover: (84 to: 90)
			declaredAt: (37 to: 43)) ] valueCoveringAll:
		{74 to: 82}) do: [ :aBookAmountTuple |
		[
		([
		(userPurchases
			cover: (124 to: 136)
			declaredAt: (124 to: 136)) at:
			(aUser
				cover: (142 to: 146)
				declaredAt: (21 to: 25)) ] valueCoveringAll:
			{138 to: 140})
			at:
				([
				(aBookAmountTuple
					cover: (153 to: 168)
					declaredAt: (102 to: 117)) first ] valueCoveringAll:
					{170 to: 174})
			ifPresent: [ :cant |
				[
				([
				(userPurchases
					cover: (200 to: 212)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (218 to: 222)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{214 to: 216})
					at:
						([
						(aBookAmountTuple
							cover: (229 to: 244)
							declaredAt: (102 to: 117)) first ] valueCoveringAll:
							{246 to: 250})
					put:
						([
						(cant
							cover: (257 to: 260)
							declaredAt: (192 to: 195)) +
							([
							(aBookAmountTuple
								cover: (264 to: 279)
								declaredAt: (102 to: 117)) second ] valueCoveringAll:
								{281 to: 286}) ] valueCoveringAll:
							{262 to: 262}) ] valueCoveringAll:
					{225 to: 227. 252 to: 255} ]
			ifAbsent: [
				[
				([
				(userPurchases
					cover: (304 to: 316)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (322 to: 326)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{318 to: 320})
					at:
						([
						(aBookAmountTuple
							cover: (333 to: 348)
							declaredAt: (102 to: 117)) first ] valueCoveringAll:
							{350 to: 354})
					put:
						([
						(aBookAmountTuple
							cover: (361 to: 376)
							declaredAt: (102 to: 117)) second ] valueCoveringAll:
							{378 to: 383}) ] valueCoveringAll:
					{329 to: 331. 356 to: 359} ]] valueCoveringAll:
			{149 to: 151. 180 to: 189. 293 to: 301}.
		[
		([
		(userPurchases
			cover: (390 to: 402)
			declaredAt: (124 to: 136)) at:
			(aUser
				cover: (407 to: 411)
				declaredAt: (21 to: 25)) ] valueCoveringAll:
			{404 to: 406})
			at:
				('totalBooks' coverAll:
					{418 to: 429})
			put:
				([
				([
				([
				(userPurchases
					cover: (438 to: 450)
					declaredAt: (124 to: 136)) at:
					(aUser
						cover: (455 to: 459)
						declaredAt: (21 to: 25)) ] valueCoveringAll:
					{452 to: 454}) at:
					('totalBooks' coverAll:
						{466 to: 477}) ] valueCoveringAll:
					{462 to: 464}) +
					(aTotal
						cover: (482 to: 487)
						declaredAt: (56 to: 61)) ] valueCoveringAll:
					{480 to: 480}) ] valueCoveringAll:
			{414 to: 416. 431 to: 434} ]] valueCoveringAll:
		{93 to: 95}.! !

!testRun: #MockRestInterfaceTest #test10SuccessfulCheckoutAltersUserListPurchase stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!
!Behavior method!
passTime: anAmontOfTime
	(currentTime _ [
	(currentTime
		cover: (27 to: 37)
		declaredAt: (27 to: 37)) +
		(anAmontOfTime
			cover: (56 to: 68)
			declaredAt: (11 to: 23)) ] valueCoveringAll:
		{54 to: 54})
		cover: (42 to: 52)
		declaredAt: (27 to: 37).! !
!Behavior method!
errorCartExpired
	^ 'Error - El carrito utilizado expir�' coverAll:
		{21 to: 57}.! !

!testRun: #MockRestInterfaceTest #test11CannotUseACartAfterItExpired stamp: 'G.L.S 6/24/2021 16:01:09'!
PASSED!