
----STARTUP---- (10 June 2021 18:34:28) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!


!classRemoval: #Cart stamp: 'sb 6/10/2021 19:30:13'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'sb 6/10/2021 19:30:14'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/TusLibros.st----!
!Cart methodsFor: 'nil' stamp: 'sb 6/10/2021 19:35:07'!
elements! !
!Cart methodsFor: 'accessing' stamp: 'sb 6/10/2021 19:36:43' prior: 50876969!
listCart
	^ self elements.! !
!Cart methodsFor: 'accessing' stamp: 'Am 6/10/2021 12:31:54' prior: 50877025!
listCart
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: {anISBN . anISBNQuantity}].
	^list.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:41:29' prior: 50877022!
elements
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: {anISBN . anISBNQuantity}].
	^list! !
!Cart methodsFor: 'accessing' stamp: 'sb 6/10/2021 19:41:42' prior: 50877029!
listCart
	^self elements.! !
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/10/2021 19:45:12'!
createCart
! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:45:21' prior: 50877048!
createCart
	^ Cart ! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:46:01' prior: 50877052!
createCart
	^ Cart withCatalog: self defaultCatalog.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:46:10'!
defaultCatalog! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:46:22' prior: 50877061!
defaultCatalog
	! !
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/10/2021 19:47:17' overrides: 16927572!
setUp! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:50:16' prior: 50876886!
test02addingBookFromCatalogIsRegistered
	|aCart aCatalog ISBNCormen1|
	
	ISBNCormen1:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen1.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen1 withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen1 withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:50:38' prior: 50877073!
test02addingBookFromCatalogIsRegistered
	|aCart aCatalog ISBNCormen1|
	
	ISBNCormen1:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen1.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen1 withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen1 withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:50:48' prior: 50876900!
test03cantAddBookNotFromCatalog
	|aCart aCatalog ISBNCormen1 ISBNBible|
	
	ISBNCormen1:='9780262033848'.
	ISBNBible:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen1.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:51:00' prior: 50876917!
test04cantAddZeroBooksToCart
	|aCart aCatalog ISBNCormen1|
	
	ISBNCormen1:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen1.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNCormen1 withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:51:14' prior: 50876933!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen1 ISBNWatkins|
	
	ISBNCormen1:='9780262033848'.
	ISBNWatkins:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen1 with: ISBNWatkins .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen1 withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen1 . 3} with: {ISBNWatkins . 2}).! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:51:22' prior: 50877136!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen1 ISBNWatkins1|
	
	ISBNCormen1:='9780262033848'.
	ISBNWatkins1:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen1 with: ISBNWatkins1 .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen1 withQuantity: 3.
	aCart addToCart: ISBNWatkins1 withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen1 . 3} with: {ISBNWatkins1 . 2}).! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:51:32' prior: 50877101!
test03cantAddBookNotFromCatalog
	|aCart aCatalog ISBNCormen1 ISBNBible1|
	
	ISBNCormen1:='9780262033848'.
	ISBNBible1:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen1.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible1 withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:51:50' prior: 50877069 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:52:23' prior: 50877191 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.! !

TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/10/2021 19:52:42'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:53:02' prior: 50877196 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.! !

TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/10/2021 19:53:18'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:53:35' prior: 50877213 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins1:= '9780470528334'.
! !

TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/10/2021 19:53:55'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:54:00' prior: 50877232 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:54:17' prior: 50877087!
test02addingBookFromCatalogIsRegistered
	|aCart aCatalog |
	
	
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:54:28' prior: 50877172!
test03cantAddBookNotFromCatalog
	|aCart aCatalog |
	

	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:54:43' prior: 50877119!
test04cantAddZeroBooksToCart
	|aCart aCatalog|
	

	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNCormen withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:54:57' prior: 50877154!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog |
	

	
	
	aCatalog:= OrderedCollection with: ISBNCormen with: ISBNWatkins .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen . 3} with: {ISBNWatkins . 2}).! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/10/2021 19:55:01'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/10/2021 19:55:01'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/10/2021 19:55:01'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/10/2021 19:55:01'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/10/2021 19:55:01'!
PASSED!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:55:26' prior: 50877065!
defaultCatalog
	^ OrderedCollection  with: ISBNCormen .! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:55:37' prior: 50877338!
defaultCatalog
	^ OrderedCollection  with: ISBNCormen with: ISBNWatkins ! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:56:30' prior: 50876878!
test01createdCartIsInitializedEmpty
	|aCart |
	
	
	aCart:= self createCart.
	self assert: aCart isEmpty equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:56:39' prior: 50877264!
test02addingBookFromCatalogIsRegistered
	|aCart |
	
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen withQuantity: 1) equals: true.! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/10/2021 19:56:46'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/10/2021 19:56:46'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/10/2021 19:56:46'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/10/2021 19:56:46'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/10/2021 19:56:46'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:56:55' prior: 50877277!
test03cantAddBookNotFromCatalog
	|aCart  |
	

	aCart:= self createCart.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:57:07' prior: 50877292!
test04cantAddZeroBooksToCart
	|aCart |
	

	aCart:= self createCart.
	self 
		should: [	aCart addToCart: ISBNCormen withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:57:18' prior: 50877307!
test05CartCanListAllBooksCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen . 3} with: {ISBNWatkins . 2}).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/10/2021 19:57:31'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:57:51'!
testCajero! !

!methodRemoval: TestsTusLibros #testCajero stamp: 'sb 6/10/2021 19:58:21'!
testCajero!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:00:40'!
test1CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'sb 6/10/2021 20:02:28'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:02:22' prior: 50877430!
test1CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !

!testRun: #TestsTusLibros #test1CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/10/2021 20:03:27'!
ERROR!

!testRun: #TestsTusLibros #test1CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/10/2021 20:03:27'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:03:43'!
createCashier
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:04:00' prior: 50877464!
createCashier
	^Cashier new ! !

!testRun: #TestsTusLibros #test1CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/10/2021 20:04:03'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:04:11'!
checkOutCart: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:04:45' prior: 50877476!
checkOutCart: aCart 
	self error: Cashier emptyCartError.! !

!testRun: #TestsTusLibros #test1CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/10/2021 20:04:47'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:04:56'!
emptyCartError
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:05:31' prior: 50877489!
emptyCartError
	^ 'Empty cart cannot be checkout'! !

!testRun: #TestsTusLibros #test1CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/10/2021 20:05:44'!
PASSED!

!testRun: #TestsTusLibros #test1CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/10/2021 20:05:49'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:06:13'!
test01CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !

!methodRemoval: TestsTusLibros #test1CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/10/2021 20:06:13'!
test1CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:08:10'!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:10:51' prior: 50877531!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: 1.  

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:14:56'!
createPricelist
	|pricelist|
	pricelist := Dictionary new  add: ISBNCormen -> 60.
	pricelist add: ISBNWatkins -> 40.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:15:39' prior: 50877258 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
! !

TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice'
	classVariableNames: ' '
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/10/2021 20:16:01'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:16:38' prior: 50877553!
createPricelist
	|pricelist|
	pricelist := Dictionary new  add: ISBNCormen -> CormenPrice .
	pricelist add: ISBNWatkins -> WatkinsPrice.
	^pricelist .! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:17:23' prior: 50877544!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: 1.  

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:18:14' prior: 50877469!
createCashier
	^Cashier withPricelist: self createPricelist   ! !

!testRun: #TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:18:23'!
ERROR!

!testRun: #TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:18:23'!
ERROR!

!testRun: #TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:18:37'!
ERROR!

!testRun: #TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:19:03'!
ERROR!

!testRun: #TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:19:03'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:20:04' prior: 50877584!
createPricelist
	|pricelist|
	pricelist := Dictionary new.
	pricelist add: ISBNCormen -> CormenPrice .
	pricelist add: ISBNWatkins -> WatkinsPrice.
	^pricelist .! !

!testRun: #TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:20:05'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:20:15'!
withPricelist: aDictionary 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:20:47' prior: 50877633!
withPricelist: aPricelist 
	^self new initializeWithPricelist: aPricelist ! !

!testRun: #TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:20:50'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'sb 6/10/2021 20:20:58'!
Object subclass: #Cashier
	instanceVariableNames: 'pricelist'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'sb 6/10/2021 20:20:58'!
initializeWithPricelist: aPricelist 
	self shouldBeImplemented.
	pricelist := aPricelist.! !
!Cashier methodsFor: 'initialization' stamp: 'sb 6/10/2021 20:21:04' prior: 50877653!
initializeWithPricelist: aPricelist 
	pricelist := aPricelist.! !

!testRun: #TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:21:08'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:21:17'!
priceSummaryOfCart: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:21:30' prior: 50877667!
priceSummaryOfCart: aCart 
	^60! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:21:42' prior: 50877672!
priceSummaryOfCart: aCart 
	^60! !

!testRun: #TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:21:43'!
FAILURE!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:21:54' prior: 50877592!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: 60.  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:22:02' prior: 50877683!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !

!testRun: #TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:22:07'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:22:58'!
test02CashierKnowsTotalPriceOfCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !

!methodRemoval: TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/10/2021 20:22:59'!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:23:11'!
test03CashierKnowsTotalPriceOfCartWithManyItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/10/2021 20:24:20'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/10/2021 20:25:19'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:25:46' prior: 50877704!
test02CashierKnowsTotalPriceOfCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:26:17' prior: 50877739!
test02CashierKnowsTotalPriceOfCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:28:05' prior: 50877722!
test03CashierKnowsTotalPriceOfCartWithManyItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 2 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:28:20'!
test02CashierKnowsTotalPriceOfCartWithOneItemAndOneCopy
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !

!methodRemoval: TestsTusLibros #test02CashierKnowsTotalPriceOfCartWithOneItem stamp: 'sb 6/10/2021 20:28:20'!
test02CashierKnowsTotalPriceOfCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:28:49'!
test02CashierKnowsTotalPriceOfCartWithOneCopyOfOneBook
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !

!methodRemoval: TestsTusLibros #test02CashierKnowsTotalPriceOfCartWithOneItemAndOneCopy stamp: 'sb 6/10/2021 20:28:50'!
test02CashierKnowsTotalPriceOfCartWithOneItemAndOneCopy
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:29:16'!
test03CashierKnowsTotalPriceOfCartWithManyCopiesOfOneBook
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 2 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !

!methodRemoval: TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithManyItem stamp: 'sb 6/10/2021 20:29:16'!
test03CashierKnowsTotalPriceOfCartWithManyItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 2 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:29:31' prior: 50877817!
test03CashierKnowsTotalPriceOfCartWithManyCopiesOfOneBook
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 3 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice * 3.  

	
	! !

!testRun: #TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithManyCopiesOfOneBook stamp: 'sb 6/10/2021 20:29:35'!
FAILURE!

!testRun: #TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithManyCopiesOfOneBook stamp: 'sb 6/10/2021 20:29:35'!
FAILURE!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:43:57'!
test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 3 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice * 3.  

	
	! !

!methodRemoval: TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithManyCopiesOfOneBook stamp: 'sb 6/10/2021 20:43:57'!
test03CashierKnowsTotalPriceOfCartWithManyCopiesOfOneBook
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 3 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice * 3.  

	
	!
!Cart methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:46:19' prior: 50877037!
elements
	! !
!Cart methodsFor: 'initialization' stamp: 'sb 6/10/2021 20:51:01' prior: 50876994!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	cartContent:= Bag  new.! !
!Cart methodsFor: 'testing' stamp: 'sb 6/10/2021 20:52:25' prior: 50876961!
contains: anISBN withQuantity: aNumber 
	
	^aNumber= cartContent occurrencesOf: anISBN 
	! !
!Cart methodsFor: 'adding' stamp: 'sb 6/10/2021 20:53:19' prior: 50876982!
addToCart: anISBN withQuantity: aNumber 

	|appearances|
	
	(catalog includes: anISBN) ifFalse:[self error: 	Cart invalidISBNError ].
	(aNumber<1) ifTrue: [self error: 	Cart zeroBooksAddedError ].
	
	appearances:= cartContent add: anISBN withOccurrences: aNumber.

	
	 ! !
!Cart methodsFor: 'adding' stamp: 'sb 6/10/2021 20:54:01'!
assertISBNValid: anISBN

	^ (catalog includes: anISBN) ifFalse:[self error: 	Cart invalidISBNError ]! !
!Cart methodsFor: 'adding' stamp: 'sb 6/10/2021 20:54:01' prior: 50877898!
addToCart: anISBN withQuantity: aNumber 

	|appearances|
	
	self assertISBNValid: anISBN.
	(aNumber<1) ifTrue: [self error: 	Cart zeroBooksAddedError ].
	
	appearances:= cartContent add: anISBN withOccurrences: aNumber.

	
	 ! !
!Cart methodsFor: 'adding' stamp: 'sb 6/10/2021 20:55:04'!
assertValidQuantity: aNumber

	^ (aNumber<1) ifTrue: [self error: 	Cart zeroBooksAddedError ]! !
!Cart methodsFor: 'adding' stamp: 'sb 6/10/2021 20:55:04' prior: 50877915!
addToCart: anISBN withQuantity: aNumber 

	|appearances|
	
	self assertISBNValid: anISBN.
	self assertValidQuantity: aNumber.
	
	appearances:= cartContent add: anISBN withOccurrences: aNumber.

	
	 ! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/10/2021 20:55:11'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/10/2021 20:55:11'!
FAILURE!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/10/2021 20:55:11'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/10/2021 20:55:11'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/10/2021 20:55:11'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'sb 6/10/2021 20:55:33' prior: 50877045!
listCart
	^cartContent ! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/10/2021 20:55:44'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/10/2021 20:55:44'!
FAILURE!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/10/2021 20:55:44'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/10/2021 20:55:44'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/10/2021 20:55:44'!
FAILURE!

----STARTUP---- (11 June 2021 19:08:53) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!


!classRemoval: #Cart stamp: 'sb 6/11/2021 19:08:56'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'sb 6/11/2021 19:08:56'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:13:17'!
test01createdCartIsInitializedEmpty
	|aCart aCatalog|
	
	aCatalog:= OrderedCollection new.
	aCart:= Cart withCatalog: aCatalog.
	self assert: aCart isEmpty equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:22:13'!
test02addingBookFromCatalogIsRegistered
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:43:07'!
test03cantAddBookNotFromCatalog
	|aCart aCatalog ISBNCormen ISBNBible|
	
	ISBNCormen:='9780262033848'.
	ISBNBible:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:06:57'!
test04cantAddZeroBooksToCart
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNCormen withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:31:42'!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen ISBNWatkins|
	
	ISBNCormen:='9780262033848'.
	ISBNWatkins:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen with: ISBNWatkins .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen . 3} with: {ISBNWatkins . 2}).! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
Object subclass: #Cart
	instanceVariableNames: 'catalog cartContent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
Object subclass: #Cart
	instanceVariableNames: 'catalog cartContent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'testing' stamp: 'Am 6/10/2021 12:02:37'!
contains: anISBN withQuantity: aNumber 
	
	^aNumber=(cartContent at: anISBN ifAbsent: [0] ).
	! !
!Cart methodsFor: 'testing' stamp: 'Am 6/10/2021 11:30:41'!
isEmpty
	^(self size = 0).! !
!Cart methodsFor: 'accessing' stamp: 'Am 6/10/2021 12:31:54'!
listCart
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: {anISBN . anISBNQuantity}].
	^list.! !
!Cart methodsFor: 'accessing' stamp: 'Am 6/10/2021 12:01:15' overrides: 16880927!
size
	^cartContent sum:[:anISBNQuantity| anISBNQuantity] ifEmpty:[0].! !
!Cart methodsFor: 'adding' stamp: 'Am 6/10/2021 12:03:41'!
addToCart: anISBN withQuantity: aNumber 

	|appearances|
	
	(catalog includes: anISBN) ifFalse:[self error: 	Cart invalidISBNError ].
	(aNumber<1) ifTrue: [self error: 	Cart zeroBooksAddedError ].

	appearances:= cartContent at: anISBN ifAbsent: [0].
	cartContent add: anISBN-> (appearances+aNumber).
	
	 ! !
!Cart methodsFor: 'initialization' stamp: 'Am 6/10/2021 11:49:15'!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	cartContent:= Dictionary  new.! !

!classDefinition: 'Cart class' category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'initialize' stamp: 'Am 6/10/2021 11:15:00'!
withCatalog: aCatalog 
	^self new initializeWithCatalog: aCatalog.! !
!Cart class methodsFor: 'error' stamp: 'Am 6/10/2021 11:41:16'!
invalidISBNError
	^'Book not in Catalog'! !
!Cart class methodsFor: 'error' stamp: 'Am 6/10/2021 11:46:25'!
zeroBooksAddedError
	^'Must add at least one book'! !
!Cart methodsFor: 'nil' stamp: 'sb 6/10/2021 19:35:07'!
elements! !
!Cart methodsFor: 'accessing' stamp: 'sb 6/10/2021 19:36:43' prior: 50878097!
listCart
	^ self elements.! !
!Cart methodsFor: 'accessing' stamp: 'Am 6/10/2021 12:31:54' prior: 50878151!
listCart
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: {anISBN . anISBNQuantity}].
	^list.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:41:29' prior: 50878148!
elements
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: {anISBN . anISBNQuantity}].
	^list! !
!Cart methodsFor: 'accessing' stamp: 'sb 6/10/2021 19:41:42' prior: 50878155!
listCart
	^self elements.! !
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/10/2021 19:45:12'!
createCart
! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:45:21' prior: 50878174!
createCart
	^ Cart ! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:46:01' prior: 50878178!
createCart
	^ Cart withCatalog: self defaultCatalog.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:46:10'!
defaultCatalog! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:46:22' prior: 50878187!
defaultCatalog
	! !
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/10/2021 19:47:17' overrides: 16927572!
setUp! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:50:16' prior: 50878012!
test02addingBookFromCatalogIsRegistered
	|aCart aCatalog ISBNCormen1|
	
	ISBNCormen1:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen1.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen1 withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen1 withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:50:38' prior: 50878199!
test02addingBookFromCatalogIsRegistered
	|aCart aCatalog ISBNCormen1|
	
	ISBNCormen1:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen1.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen1 withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen1 withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:50:48' prior: 50878026!
test03cantAddBookNotFromCatalog
	|aCart aCatalog ISBNCormen1 ISBNBible|
	
	ISBNCormen1:='9780262033848'.
	ISBNBible:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen1.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:51:00' prior: 50878043!
test04cantAddZeroBooksToCart
	|aCart aCatalog ISBNCormen1|
	
	ISBNCormen1:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen1.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNCormen1 withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:51:14' prior: 50878059!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen1 ISBNWatkins|
	
	ISBNCormen1:='9780262033848'.
	ISBNWatkins:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen1 with: ISBNWatkins .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen1 withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen1 . 3} with: {ISBNWatkins . 2}).! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:51:22' prior: 50878262!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen1 ISBNWatkins1|
	
	ISBNCormen1:='9780262033848'.
	ISBNWatkins1:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen1 with: ISBNWatkins1 .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen1 withQuantity: 3.
	aCart addToCart: ISBNWatkins1 withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen1 . 3} with: {ISBNWatkins1 . 2}).! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:51:32' prior: 50878227!
test03cantAddBookNotFromCatalog
	|aCart aCatalog ISBNCormen1 ISBNBible1|
	
	ISBNCormen1:='9780262033848'.
	ISBNBible1:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen1.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible1 withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:51:50' prior: 50878195 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:52:23' prior: 50878317 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.! !

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:53:02' prior: 50878322 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.! !

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:53:35' prior: 50878342 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins1:= '9780470528334'.
! !

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:54:00' prior: 50878363 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:54:17' prior: 50878213!
test02addingBookFromCatalogIsRegistered
	|aCart aCatalog |
	
	
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:54:28' prior: 50878298!
test03cantAddBookNotFromCatalog
	|aCart aCatalog |
	

	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:54:43' prior: 50878245!
test04cantAddZeroBooksToCart
	|aCart aCatalog|
	

	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNCormen withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:54:57' prior: 50878280!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog |
	

	
	
	aCatalog:= OrderedCollection with: ISBNCormen with: ISBNWatkins .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen . 3} with: {ISBNWatkins . 2}).! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:55:26' prior: 50878191!
defaultCatalog
	^ OrderedCollection  with: ISBNCormen .! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 19:55:37' prior: 50878450!
defaultCatalog
	^ OrderedCollection  with: ISBNCormen with: ISBNWatkins ! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:56:30' prior: 50878004!
test01createdCartIsInitializedEmpty
	|aCart |
	
	
	aCart:= self createCart.
	self assert: aCart isEmpty equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:56:39' prior: 50878392!
test02addingBookFromCatalogIsRegistered
	|aCart |
	
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:56:55' prior: 50878405!
test03cantAddBookNotFromCatalog
	|aCart  |
	

	aCart:= self createCart.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:57:07' prior: 50878420!
test04cantAddZeroBooksToCart
	|aCart |
	

	aCart:= self createCart.
	self 
		should: [	aCart addToCart: ISBNCormen withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:57:18' prior: 50878435!
test05CartCanListAllBooksCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen . 3} with: {ISBNWatkins . 2}).! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:57:51'!
testCajero! !

!methodRemoval: TestsTusLibros #testCajero stamp: 'sb 6/11/2021 19:08:57'!
testCajero!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:00:40'!
test1CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:57'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:02:22' prior: 50878522!
test1CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:03:43'!
createCashier
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:04:00' prior: 50878549!
createCashier
	^Cashier new ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:04:11'!
checkOutCart: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:04:45' prior: 50878558!
checkOutCart: aCart 
	self error: Cashier emptyCartError.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:04:56'!
emptyCartError
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:05:31' prior: 50878568!
emptyCartError
	^ 'Empty cart cannot be checkout'! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:06:13'!
test01CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !

!methodRemoval: TestsTusLibros #test1CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 19:08:58'!
test1CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:08:10'!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:10:51' prior: 50878603!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: 1.  

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:14:56'!
createPricelist
	|pricelist|
	pricelist := Dictionary new  add: ISBNCormen -> 60.
	pricelist add: ISBNWatkins -> 40.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:15:39' prior: 50878386 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
! !

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:58'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:58'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:16:38' prior: 50878625!
createPricelist
	|pricelist|
	pricelist := Dictionary new  add: ISBNCormen -> CormenPrice .
	pricelist add: ISBNWatkins -> WatkinsPrice.
	^pricelist .! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:17:23' prior: 50878616!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: 1.  

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:18:14' prior: 50878554!
createCashier
	^Cashier withPricelist: self createPricelist   ! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:20:04' prior: 50878658!
createPricelist
	|pricelist|
	pricelist := Dictionary new.
	pricelist add: ISBNCormen -> CormenPrice .
	pricelist add: ISBNWatkins -> WatkinsPrice.
	^pricelist .! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:20:15'!
withPricelist: aDictionary 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:20:47' prior: 50878689!
withPricelist: aPricelist 
	^self new initializeWithPricelist: aPricelist ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'sb 6/11/2021 19:08:58'!
Object subclass: #Cashier
	instanceVariableNames: 'pricelist'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'sb 6/10/2021 20:20:58'!
initializeWithPricelist: aPricelist 
	self shouldBeImplemented.
	pricelist := aPricelist.! !
!Cashier methodsFor: 'initialization' stamp: 'sb 6/10/2021 20:21:04' prior: 50878706!
initializeWithPricelist: aPricelist 
	pricelist := aPricelist.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:21:17'!
priceSummaryOfCart: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:21:30' prior: 50878717!
priceSummaryOfCart: aCart 
	^60! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:21:42' prior: 50878722!
priceSummaryOfCart: aCart 
	^60! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:21:54' prior: 50878666!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: 60.  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:22:02' prior: 50878730!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:22:58'!
test02CashierKnowsTotalPriceOfCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !

!methodRemoval: TestsTusLibros #test02CheckoutCartWithOneItem stamp: 'sb 6/11/2021 19:08:58'!
test02CheckoutCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:23:11'!
test03CashierKnowsTotalPriceOfCartWithManyItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:25:46' prior: 50878748!
test02CashierKnowsTotalPriceOfCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:26:17' prior: 50878776!
test02CashierKnowsTotalPriceOfCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:28:05' prior: 50878766!
test03CashierKnowsTotalPriceOfCartWithManyItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 2 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:28:20'!
test02CashierKnowsTotalPriceOfCartWithOneItemAndOneCopy
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !

!methodRemoval: TestsTusLibros #test02CashierKnowsTotalPriceOfCartWithOneItem stamp: 'sb 6/11/2021 19:08:58'!
test02CashierKnowsTotalPriceOfCartWithOneItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:28:49'!
test02CashierKnowsTotalPriceOfCartWithOneCopyOfOneBook
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !

!methodRemoval: TestsTusLibros #test02CashierKnowsTotalPriceOfCartWithOneItemAndOneCopy stamp: 'sb 6/11/2021 19:08:58'!
test02CashierKnowsTotalPriceOfCartWithOneItemAndOneCopy
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:29:16'!
test03CashierKnowsTotalPriceOfCartWithManyCopiesOfOneBook
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 2 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	! !

!methodRemoval: TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithManyItem stamp: 'sb 6/11/2021 19:08:58'!
test03CashierKnowsTotalPriceOfCartWithManyItem
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 2 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:29:31' prior: 50878854!
test03CashierKnowsTotalPriceOfCartWithManyCopiesOfOneBook
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 3 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice * 3.  

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/10/2021 20:43:57'!
test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 3 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice * 3.  

	
	! !

!methodRemoval: TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithManyCopiesOfOneBook stamp: 'sb 6/11/2021 19:08:58'!
test03CashierKnowsTotalPriceOfCartWithManyCopiesOfOneBook
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 3 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice * 3.  

	
	!
!Cart methodsFor: 'as yet unclassified' stamp: 'sb 6/10/2021 20:46:19' prior: 50878163!
elements
	! !
!Cart methodsFor: 'initialization' stamp: 'sb 6/10/2021 20:51:01' prior: 50878122!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	cartContent:= Bag  new.! !
!Cart methodsFor: 'testing' stamp: 'sb 6/10/2021 20:52:25' prior: 50878089!
contains: anISBN withQuantity: aNumber 
	
	^aNumber= cartContent occurrencesOf: anISBN 
	! !
!Cart methodsFor: 'adding' stamp: 'sb 6/10/2021 20:53:19' prior: 50878110!
addToCart: anISBN withQuantity: aNumber 

	|appearances|
	
	(catalog includes: anISBN) ifFalse:[self error: 	Cart invalidISBNError ].
	(aNumber<1) ifTrue: [self error: 	Cart zeroBooksAddedError ].
	
	appearances:= cartContent add: anISBN withOccurrences: aNumber.

	
	 ! !
!Cart methodsFor: 'adding' stamp: 'sb 6/10/2021 20:54:01'!
assertISBNValid: anISBN

	^ (catalog includes: anISBN) ifFalse:[self error: 	Cart invalidISBNError ]! !
!Cart methodsFor: 'adding' stamp: 'sb 6/10/2021 20:54:01' prior: 50878927!
addToCart: anISBN withQuantity: aNumber 

	|appearances|
	
	self assertISBNValid: anISBN.
	(aNumber<1) ifTrue: [self error: 	Cart zeroBooksAddedError ].
	
	appearances:= cartContent add: anISBN withOccurrences: aNumber.

	
	 ! !
!Cart methodsFor: 'adding' stamp: 'sb 6/10/2021 20:55:04'!
assertValidQuantity: aNumber

	^ (aNumber<1) ifTrue: [self error: 	Cart zeroBooksAddedError ]! !
!Cart methodsFor: 'adding' stamp: 'sb 6/10/2021 20:55:04' prior: 50878944!
addToCart: anISBN withQuantity: aNumber 

	|appearances|
	
	self assertISBNValid: anISBN.
	self assertValidQuantity: aNumber.
	
	appearances:= cartContent add: anISBN withOccurrences: aNumber.

	
	 ! !
!Cart methodsFor: 'accessing' stamp: 'sb 6/10/2021 20:55:33' prior: 50878171!
listCart
	^cartContent ! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 19:10:24'!
PASSED!

!testRun: #TestsTusLibros #test02CashierKnowsTotalPriceOfCartWithOneCopyOfOneBook stamp: 'sb 6/11/2021 19:10:24'!
PASSED!

!testRun: #TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks stamp: 'sb 6/11/2021 19:10:24'!
FAILURE!

!testRun: #TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks stamp: 'sb 6/11/2021 19:10:24'!
FAILURE!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/11/2021 19:10:38'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:10:38'!
FAILURE!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/11/2021 19:10:38'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/11/2021 19:10:38'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/11/2021 19:10:38'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'sb 6/11/2021 19:11:35' prior: 50878959!
addToCart: anISBN withQuantity: aNumber 


	
	self assertISBNValid: anISBN.
	self assertValidQuantity: aNumber.
	
	 cartContent add: anISBN withOccurrences: aNumber.

	
	 ! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:11:47'!
FAILURE!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:12:10'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'sb 6/11/2021 19:12:38' prior: 50878105 overrides: 16880927!
size
	^cartContent size.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:12:51'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:13:01'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'sb 6/11/2021 19:13:40' prior: 50878921!
contains: anISBN withQuantity: aNumber 
	
	^aNumber = (cartContent occurrencesOf: anISBN)
	! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/11/2021 19:13:47'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:13:47'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/11/2021 19:13:47'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/11/2021 19:13:47'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/11/2021 19:13:47'!
FAILURE!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/11/2021 19:13:47'!
FAILURE!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:13:56'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'sb 6/11/2021 19:14:28' prior: 50879003!
addToCart: anISBN withQuantity: aNumber 

	self assertISBNValid: anISBN.
	self assertValidQuantity: aNumber.
	
	 cartContent add: anISBN withOccurrences: aNumber.

	
	 ! !

!methodRemoval: Cart #elements stamp: 'sb 6/11/2021 19:14:42'!
elements
	!
!Cart methodsFor: 'accessing' stamp: 'sb 6/11/2021 19:16:19' prior: 50878968!
listCart
	^ cartContent asOrderedCollection.
! !

cartContent asOrderedCollection!

 cartContent asOrderedCollection!

self do: [:item| item print]!

|order|
order := OrderedCollection  new.
self do: [:item| order add:item].
order
!

self asDictionary!

self asSet
!
!Cart methodsFor: 'accessing' stamp: 'sb 6/11/2021 19:26:25' prior: 50879068!
listCart
	|list|
	list := OrderedCollection new.
	cartContent asSet do: [ :aBook| list add: {aBook . cartContent occurrencesOf: aBook}].
	^list 
! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/11/2021 19:26:34'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:26:34'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/11/2021 19:26:34'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/11/2021 19:26:34'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/11/2021 19:26:34'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 19:26:41'!
PASSED!

!testRun: #TestsTusLibros #test02CashierKnowsTotalPriceOfCartWithOneCopyOfOneBook stamp: 'sb 6/11/2021 19:26:41'!
PASSED!

!testRun: #TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks stamp: 'sb 6/11/2021 19:26:41'!
FAILURE!

!testRun: #TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks stamp: 'sb 6/11/2021 19:26:41'!
FAILURE!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 19:29:29' prior: 50878455!
defaultCatalog
	|catalog|
	catalog := Dictionary new .
	catalog add: ISBNCormen->CormenPrice; add: ISBNWatkins->WatkinsPrice.
	^ catalog.! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/11/2021 19:29:36'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:29:36'!
ERROR!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/11/2021 19:29:36'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/11/2021 19:29:36'!
FAILURE!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/11/2021 19:29:36'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:29:46'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'sb 6/11/2021 19:30:19' prior: 50878938!
assertISBNValid: anISBN

	^ (catalog includesKey: anISBN) ifFalse:[self error: 	Cart invalidISBNError ]! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/11/2021 19:30:25'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:30:25'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/11/2021 19:30:25'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/11/2021 19:30:25'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/11/2021 19:30:25'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 19:30:34'!
PASSED!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 19:33:14' prior: 50878675!
createCashier
	^Cashier new.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 19:33:18'!
PASSED!

!testRun: #TestsTusLibros #test02CashierKnowsTotalPriceOfCartWithOneCopyOfOneBook stamp: 'sb 6/11/2021 19:33:18'!
PASSED!

!testRun: #TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks stamp: 'sb 6/11/2021 19:33:18'!
FAILURE!

!testRun: #TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks stamp: 'sb 6/11/2021 19:33:18'!
FAILURE!

!methodRemoval: Cashier class #withPricelist: stamp: 'sb 6/11/2021 19:33:31'!
withPricelist: aPricelist 
	^self new initializeWithPricelist: aPricelist !

!methodRemoval: Cashier #initializeWithPricelist: stamp: 'sb 6/11/2021 19:33:48'!
initializeWithPricelist: aPricelist 
	pricelist := aPricelist.!

!testRun: #TestsTusLibros #test02CashierKnowsTotalPriceOfCartWithOneCopyOfOneBook stamp: 'sb 6/11/2021 19:34:57'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/11/2021 19:38:15'!
test06EmptyCartGivesPriceSummary0
	|aCart |
	
	aCart:= self createCart.
	
	self assert: aCart priceSummary equals:0.! !

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/11/2021 19:38:19'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 19:38:27'!
priceSummary
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 19:38:33' prior: 50879213!
priceSummary
	^ 0! !

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/11/2021 19:38:37'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 19:38:37'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/11/2021 19:38:37'!
PASSED!

!testRun: #TestsTusLibros #test02CashierKnowsTotalPriceOfCartWithOneCopyOfOneBook stamp: 'sb 6/11/2021 19:38:37'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:38:37'!
PASSED!

!testRun: #TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks stamp: 'sb 6/11/2021 19:38:37'!
FAILURE!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/11/2021 19:38:37'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/11/2021 19:38:37'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/11/2021 19:38:37'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/11/2021 19:38:37'!
PASSED!

!testRun: #TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks stamp: 'sb 6/11/2021 19:38:37'!
FAILURE!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/11/2021 19:38:44'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/11/2021 19:39:28'!
test07CartWithOneBookGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.

	self assert: aCart priceSummary equals: 0.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/11/2021 19:40:00' prior: 50879262!
test07CartWithOneBookGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 1. 
	self assert: aCart priceSummary equals: CormenPrice.! !

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:40:03'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 19:41:03' prior: 50879218!
priceSummary
	^ cartContent sum: [ :aBook| catalog at: aBook].! !

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:41:09'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/11/2021 19:41:34'!
test08CartWithManyBooksGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3. 
	self assert: aCart priceSummary equals: CormenPrice.! !

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:41:38'!
FAILURE!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:41:38'!
FAILURE!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/11/2021 19:43:17' prior: 50879290!
test08CartWithManyBooksGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3. 
	self assert: aCart priceSummary equals: CormenPrice * 3.! !

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:43:19'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:43:24'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/11/2021 19:43:55' prior: 50879307!
test08CartWithManyBooksGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3. 
	aCart addToCart: ISBNCormen withQuantity: 3. 
	self assert: aCart priceSummary equals: CormenPrice * 3.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/11/2021 19:44:09' prior: 50879324!
test08CartWithManyBooksGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3. 
	aCart addToCart: ISBNWatkins withQuantity: 3. 
	self assert: aCart priceSummary equals: CormenPrice * 3 + WatkinsPrice  * 3 .! !

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:44:17'!
FAILURE!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:44:18'!
FAILURE!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:45:02'!
FAILURE!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/11/2021 19:45:20' prior: 50879335!
test08CartWithManyBooksGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3. 
	aCart addToCart: ISBNWatkins withQuantity: 3. 
	self assert: aCart priceSummary equals:( CormenPrice * 3 + WatkinsPrice  * 3) .! !

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:45:21'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 19:46:34' prior: 50879282!
priceSummary
	^ cartContent sum: [ :aBook| catalog at: aBook] ifEmpty:[0].! !

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:47:05'!
FAILURE!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:47:05'!
FAILURE!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:47:11'!
FAILURE!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/11/2021 19:47:33' prior: 50879358!
test08CartWithManyBooksGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3. 
	aCart addToCart: ISBNWatkins withQuantity: 3. 
	self assert: aCart priceSummary equals: (CormenPrice * 3) + (WatkinsPrice  * 3) .! !

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:47:36'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/11/2021 19:47:42'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 19:47:42'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/11/2021 19:47:42'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/11/2021 19:47:42'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/11/2021 19:47:42'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/11/2021 19:47:42'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:47:42'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 19:47:42'!
PASSED!

!methodRemoval: TestsTusLibros #test02CashierKnowsTotalPriceOfCartWithOneCopyOfOneBook stamp: 'sb 6/11/2021 19:48:20'!
test02CashierKnowsTotalPriceOfCartWithOneCopyOfOneBook
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 1. 

	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice .  

	
	!

!methodRemoval: TestsTusLibros #test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks stamp: 'sb 6/11/2021 19:48:23'!
test03CashierKnowsTotalPriceOfCartWithOneCopieOfManyBooks
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 3 .
	aCashier := self createCashier.
	self assert: (aCashier priceSummaryOfCart: aCart) equals: CormenPrice * 3.  

	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 19:55:08'!
test02CheckoutOfCartIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart) equals: aCart priceSummary.

	
	! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/11/2021 19:55:08'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 19:56:15' prior: 50878563!
checkOutCart: aCart 
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 19:56:33' prior: 50879471!
checkOutCart: aCart 
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	
	^aCart priceSummary .! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/11/2021 19:56:55'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 20:00:37'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/11/2021 20:00:37'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/11/2021 20:00:37'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 20:00:37'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/11/2021 20:00:37'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/11/2021 20:00:37'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/11/2021 20:00:37'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/11/2021 20:00:37'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 20:00:37'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 20:00:37'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:09:54'!
test03CantCheckoutUsingCreditCardWithInvalidNumber
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:11:14' prior: 50879520!
test03CantCheckoutUsingCreditCardWithInvalidNumber
	|aCart aCashier aCreditCard|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	aCreditCard  := self createCreditCardWithInvalidNumber.
.	self assert: ( aCashier checkOutCart: aCart) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:11:34' prior: 50879532!
test03CantCheckoutUsingCreditCardWithInvalidNumber
	|aCart aCashier aCreditCard|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	aCreditCard  := self createCreditCardWithInvalidNumber.
.	self assert: ( aCashier checkOutCart: aCart) equals: aCart priceSummary.

	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:12:44'!
checkOutCart: aCart usingCreditCard: aCreditCard  
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	
	^aCart priceSummary .! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:12:44' prior: 50878577!
test01CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: aCreditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:12:44' prior: 50879546!
test03CantCheckoutUsingCreditCardWithInvalidNumber
	|aCart aCashier aCreditCard|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	aCreditCard  := self createCreditCardWithInvalidNumber.
.	self assert: ( aCashier checkOutCart: aCart usingCreditCard: aCreditCard) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:12:44' prior: 50879456!
test02CheckoutOfCartIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: aCreditCard) equals: aCart priceSummary.

	
	! !

!methodRemoval: Cashier #checkOutCart: stamp: 'sb 6/11/2021 20:12:44'!
checkOutCart: aCart 
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	
	^aCart priceSummary .!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:13:41' prior: 50879567!
test01CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:13:49' prior: 50879597!
test02CheckoutOfCartIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:13:52' prior: 50879630!
test02CheckoutOfCartIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:14:10' prior: 50879582!
test03CantCheckoutUsingCreditCardWithInvalidNumber
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidNumber) equals: aCart priceSummary.

	
	! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 20:14:19'!
ERROR!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 20:14:19'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:14:31'!
createValidCreditCard
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'sb 6/11/2021 20:16:43'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 20:16:53'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 20:16:56'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 20:16:58'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:16:34' prior: 50879676!
createValidCreditCard
	^ CreditCard withNumber: validCardNumber expiring: validExpiration andName: validName.  ! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 20:17:05'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'sb 6/11/2021 20:17:17'!
withNumber: anUndefinedObject expiring: anUndefinedObject2 andName: anUndefinedObject3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: anUndefinedObject expiring: anUndefinedObject2 andName: anUndefinedObject3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'sb 6/11/2021 20:18:08' prior: 50879727!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 

	^self new initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName ! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 20:18:10'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'sb 6/11/2021 20:18:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'sb 6/11/2021 20:18:24'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'sb 6/11/2021 20:18:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'sb 6/11/2021 20:18:25'!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 
	self shouldBeImplemented.
	creditCardNumber := aCreditCardNumber.
	expirationDate := anExpirationDate.
	name := aName.! !
!CreditCard methodsFor: 'initialization' stamp: 'sb 6/11/2021 20:18:31' prior: 50879774!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 
	creditCardNumber := aCreditCardNumber.
	expirationDate := anExpirationDate.
	name := aName.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 20:18:35'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 20:18:49'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/11/2021 20:18:55'!
PASSED!
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/11/2021 20:22:01' prior: 50878633 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'
! !
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/11/2021 20:22:10' prior: 50879804 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'
	! !

Date month: 12 year: 2020.!

Date!

Date!
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/11/2021 20:34:29' prior: 50879813 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validExpiration := '04'@'3999'.
	validName := 'Alejandro Mercado'
	! !
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/11/2021 20:37:06'!
createCreditCardWithInvalidNumber! !

!methodRemoval: TestsTusLibros #createCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:37:40'!
createCreditCardWithInvalidNumber!
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/11/2021 20:38:25' prior: 50879824 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validExpiration := {'04'.'3999'}.
	validName := 'Alejandro Mercado'
	! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/11/2021 20:38:28'!
PASSED!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:38:31'!
ERROR!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:38:31'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:38:47'!
createCreditCardWithInvalidNumber
	self shouldBeImplemented.! !

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 20:39:36'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:39:33' prior: 50879865!
createCreditCardWithInvalidNumber
	^ CreditCard withNumber: invalidNumber expiring: validExpiration andName: validName .! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:39:38'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:40:40' prior: 50879656!
test03CantCheckoutUsingCreditCardWithInvalidNumber
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier invalidCardName equals: anError messageText.
			
			]

	
	! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:40:47'!
FAILURE!
!Cashier class methodsFor: 'nil' stamp: 'sb 6/11/2021 20:41:21'!
invalidCardName
	' Nombre invalido papa'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:41:38' prior: 50879912!
invalidCardName
	'Introduced invalid name'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:41:59' prior: 50879917!
invalidCardName
	'Invalid card name'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:42:06' prior: 50879922!
invalidCardName
	'Invalid Card Name'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:42:49' prior: 50879559!
checkOutCart: aCart usingCreditCard: aCreditCard  
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	self assertValidCard: aCreditCard.
	
	^aCart priceSummary .! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:42:59'!
ERROR!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:42:59'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:43:09'!
assertValidCard: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:44:28' prior: 50879948!
assertValidCard: aCreditCard 
	aCreditCard number size = 16! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:45:34' prior: 50879953!
assertValidCard: aCreditCard 
	aCreditCard number size = 16 ifFalse: [ self error: Cashier invalidCardNumber ]! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:45:41'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:45:50'!
number
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:46:49' prior: 50879968!
number
	^ creditCardNumber ! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:46:56'!
FAILURE!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:47:30'!
FAILURE!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:47:30'!
FAILURE!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:47:43' prior: 50879892!
test03CantCheckoutUsingCreditCardWithInvalidNumber
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier invalidCardNumber equals: anError messageText.
			
			]

	
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:48:05'!
invalidCardNumber
	'Invalid Card Number'! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'sb 6/11/2021 20:48:27'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:48:27' prior: 50879973!
number
	^ number ! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:48:27' prior: 50879784!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 
	number := aCreditCardNumber.
	expirationDate := anExpirationDate.
	name := aName.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:48:32' prior: 50880018!
number
	^ number copy! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:49:02' prior: 50879958!
assertValidCard: aCreditCard 
	(aCreditCard number size = 16 ) ifFalse: [ self error: Cashier invalidCardNumber ]! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 20:49:18'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/11/2021 20:49:18'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/11/2021 20:49:18'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/11/2021 20:49:18'!
PASSED!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:49:18'!
FAILURE!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/11/2021 20:49:18'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/11/2021 20:49:18'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/11/2021 20:49:18'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/11/2021 20:49:18'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 20:49:18'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/11/2021 20:49:18'!
PASSED!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:49:18'!
FAILURE!
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/11/2021 20:50:22' prior: 50879843 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validExpiration := {'04'.'3999'}.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/11/2021 20:50:26'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/11/2021 20:50:26'!
PASSED!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/11/2021 20:50:26'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:51:08'!
test03CantCheckoutUsingCreditCardWithInvalidName
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier invalidCardNumber equals: anError messageText.
			
			]

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:51:19' prior: 50880105!
test03CantCheckoutUsingCreditCardWithInvalidName
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithName]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier invalidCardNumber equals: anError messageText.
			
			]

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:51:26' prior: 50880122!
test03CantCheckoutUsingCreditCardWithInvalidName
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidName]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier invalidCardNumber equals: anError messageText.
			
			]

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:51:59'!
test04CantCheckoutUsingCreditCardWithInvalidName
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidName]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier invalidCardNumber equals: anError messageText.
			
			]

	
	! !

!methodRemoval: TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/11/2021 20:51:59'!
test03CantCheckoutUsingCreditCardWithInvalidName
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidName]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier invalidCardNumber equals: anError messageText.
			
			]

	
	!

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/11/2021 20:52:04'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:52:10'!
createCreditCardWithInvalidName
	self shouldBeImplemented.! !

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/11/2021 20:52:38'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:52:35' prior: 50880194!
createCreditCardWithInvalidName
	^ CreditCard withNumber: validCardNumber expiring: validExpiration  andName: invalidName.! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/11/2021 20:52:53' prior: 50880156!
test04CantCheckoutUsingCreditCardWithInvalidName
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidName]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier invalidCardName equals: anError messageText.
			
			]

	
	! !

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/11/2021 20:52:54'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:54:01' prior: 50880035!
assertValidCard: aCreditCard 
	(aCreditCard number size = 16 ) ifFalse: [ self error: Cashier invalidCardNumber ].
	(aCreditCard name size > 30) ifTrue: [self error: Cashier invalidCardName ]! !

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/11/2021 20:54:14'!
FAILURE!

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/11/2021 20:54:14'!
FAILURE!
!TestsTusLibros methodsFor: 'nil' stamp: 'sb 6/11/2021 20:54:54' prior: 50880083 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validExpiration := {'04'.'3999'}.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/11/2021 20:55:34' overrides: 16882612!
name
	^ name copy.! !

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/11/2021 20:55:40'!
PASSED!

----QUIT----(11 June 2021 21:01:28) CuisUniversity-4532.image priorSource: 17446333!

----STARTUP---- (13 June 2021 21:17:55) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!

!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/13/2021 21:18:03' prior: 50879989!
test03CantCheckoutUsingCreditCardWithInvalidNumber
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Cashier invalidCardNumber equals: anError messageText.
			
			]

	
	! !

Date dateAndTimeNow!

Date dateAndTimeNow month!

Date dateAndTimeNow monthName!

April name !

April < December !

Month nameOfMonth:'04' !

Month nameOfMonth: 4!

Date today  month!

Date today month !

Date today month  !

Date today month !

month!

month!

Date today month < December!

Date today monthName < December  !

Date dateAndTimeNow month!

Date today!

Date today month!

Date today month!

Date today monthIndex!

Date today year!

Date today yearNumber!

----STARTUP---- (14 June 2021 11:37:47) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!

!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/13/2021 21:18:03' prior: 50879989!
test03CantCheckoutUsingCreditCardWithInvalidNumber
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Cashier invalidCardNumber equals: anError messageText.
			
			]

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 11:37:57' prior: 50880319!
test03CantCheckoutUsingCreditCardWithInvalidNumber
	|aCart aCashier |
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
.
	self 
		should: [aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Cashier invalidCardNumber equals: anError messageText.
			
			]

	
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 11:50:45' prior: 50880336!
test03CantCheckoutUsingCreditCardWithInvalidNumber

.
	self 
		should: [self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumber equals: anError messageText.
			
			]

	
	! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:50:52'!
FAILURE!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:50:52'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'sb 6/14/2021 11:52:42' prior: 50880022!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 

	self assertValidNumber: aCreditCardNumber.

	number := aCreditCardNumber.
	expirationDate := anExpirationDate.
	name := aName.! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:52:53'!
ERROR!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:52:53'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:52:59'!
assertValidNumber: aString 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:53:09' prior: 50880389!
assertValidNumber: aCreditCardNumber
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:53:48' prior: 50880394!
assertValidNumber: aCreditCardNumber
	(aCreditCardNumber number size = 16 ) ifFalse: [ self error: CreditCard invalidCardNumber ].! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:53:50'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:54:05' prior: 50880238!
assertValidCard: aCreditCard 
	
	(aCreditCard name size > 30) ifTrue: [self error: Cashier invalidCardName ]! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:54:12'!
ERROR!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:54:12'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:54:30' prior: 50880400!
assertValidNumber: aCreditCardNumber
	(aCreditCardNumber size = 16 ) ifFalse: [ self error: CreditCard invalidCardNumber ].! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:54:31'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:54:44'!
invalidCardNumber
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:55:00' prior: 50880436!
invalidCardNumber
	^ 'Invalid creditCard Number'! !

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:55:02'!
PASSED!

!testRun: #TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:55:05'!
PASSED!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 11:55:25'!
test03CantCreateCreditCardWithInvalidNumber

.
	self 
		should: [self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumber equals: anError messageText.
			
			]

	
	! !

!methodRemoval: TestsTusLibros #test03CantCheckoutUsingCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:55:36'!
test03CantCheckoutUsingCreditCardWithInvalidNumber

.
	self 
		should: [self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumber equals: anError messageText.
			
			]

	
	!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 11:55:46'!
test01CantCreateCreditCardWithInvalidNumber

.
	self 
		should: [self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumber equals: anError messageText.
			
			]

	
	! !

!methodRemoval: TestsTusLibros #test03CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:55:46'!
test03CantCreateCreditCardWithInvalidNumber

.
	self 
		should: [self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumber equals: anError messageText.
			
			]

	
	!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 11:56:16' prior: 50880217!
test04CantCheckoutUsingCreditCardWithInvalidName

.
	self 
		should: [ self createCreditCardWithInvalidName]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardName equals: anError messageText.
			
			]

	
	! !

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/14/2021 11:56:18'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'sb 6/14/2021 11:56:35' prior: 50880372!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 

	self assertValidNumber: aCreditCardNumber.
	self assertValidName: aName.

	number := aCreditCardNumber.
	expirationDate := anExpirationDate.
	name := aName.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:56:41'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 11:56:41'!
ERROR!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 11:56:41'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 11:56:41'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 11:56:41'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 11:56:41'!
PASSED!

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/14/2021 11:56:41'!
ERROR!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 11:56:41'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 11:56:41'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 11:56:41'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 11:56:41'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 11:56:41'!
PASSED!

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/14/2021 11:56:54'!
ERROR!

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/14/2021 11:56:54'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:57:00'!
assertValidName: aString 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:57:07' prior: 50880572!
assertValidName: aName
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:57:31' prior: 50880577!
assertValidName: aName
	(aName size > 30) ifTrue: [self error: Cashier invalidCardName ]
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:57:38' prior: 50880581!
assertValidName: aName
	(aName size > 30) ifTrue: [self error: CreditCard invalidCardName ]
	! !

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/14/2021 11:57:40'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:57:47'!
invalidCardName
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:57:56' prior: 50880597!
invalidCardName
	^'Invalid Name'! !

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/14/2021 11:57:58'!
PASSED!

!methodRemoval: Cashier #assertValidCard: stamp: 'sb 6/14/2021 11:58:13'!
assertValidCard: aCreditCard 
	
	(aCreditCard name size > 30) ifTrue: [self error: Cashier invalidCardName ]!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 11:58:20' prior: 50879932!
checkOutCart: aCart usingCreditCard: aCreditCard  
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	
	^aCart priceSummary .! !

!testRun: #TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/14/2021 11:58:33'!
PASSED!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 11:59:00'!
test02CantCreateCreditCardWithInvalidName

.
	self 
		should: [ self createCreditCardWithInvalidName]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardName equals: anError messageText.
			
			]

	
	! !

!methodRemoval: TestsTusLibros #test04CantCheckoutUsingCreditCardWithInvalidName stamp: 'sb 6/14/2021 11:59:00'!
test04CantCheckoutUsingCreditCardWithInvalidName

.
	self 
		should: [ self createCreditCardWithInvalidName]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardName equals: anError messageText.
			
			]

	
	!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 11:59:33'!
PASSED!

Date dateAndTimeNow !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:04:21'!
test03CantCreateCreditCardWithInvalidExpirationDate

.
	self 
		should: [ self createCreditCardWithInvalidExpirationDate]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardName equals: anError messageText.
			
			]

	
	! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithInvalidExpirationDate stamp: 'sb 6/14/2021 12:04:27'!
ERROR!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithInvalidExpirationDate stamp: 'sb 6/14/2021 12:04:27'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:04:33'!
createCreditCardWithInvalidExpirationDate
	self shouldBeImplemented.! !

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'sb 6/14/2021 12:05:03'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName invalidExpiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:05:01' prior: 50880710!
createCreditCardWithInvalidExpirationDate
	^ CreditCard withNumber: invalidNumber expiring: invalidExpiration andName: validName .! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:05:50' prior: 50880255 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validExpiration := {'04'.'3999'}.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	invalidExpiration := {'13'.'2025'}.
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:07:40' prior: 50880691!
test03CantCreateCreditCardWithInvalidExpirationDate

.
	self 
		should: [ self createCreditCardWithInvalidExpirationDate]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			
			]

	
	! !

'129' asNumber !

'129' asInteger !

'129A' asNumber  !

'123/129A' asNumber  !

'/1' asNumber !

'1/1' asNumber !

'1/1' size!

'1/' do: [ :aCharacter| aCharacter asNumber ]!

'1' do: [ :aCharacter| aCharacter asNumber ]!

'1' do: [ :aCharacter| aCharacter asString asNumber ]!

'01' asNumber!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:18:06'!
test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues

.
	self 
		should: [ self createCreditCardWithInvalidExpirationDate]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			
			]

	
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:18:32'!
test03CantCreateCreditCardWithExpirationDateHaving

.
	self 
		should: [ self createCreditCardWithInvalidExpirationDate]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			
			]

	
	! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHaving stamp: 'sb 6/14/2021 12:18:32'!
ERROR!

!methodRemoval: TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHaving stamp: 'sb 6/14/2021 12:18:44'!
test03CantCreateCreditCardWithExpirationDateHaving

.
	self 
		should: [ self createCreditCardWithInvalidExpirationDate]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			
			]

	
	!

!methodRemoval: TestsTusLibros #test03CantCreateCreditCardWithInvalidExpirationDate stamp: 'sb 6/14/2021 12:18:47'!
test03CantCreateCreditCardWithInvalidExpirationDate

.
	self 
		should: [ self createCreditCardWithInvalidExpirationDate]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			
			]

	
	!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:19:20' prior: 50880771!
test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues

	self 
		should: [ self createCreditCardWithExpirationDateWithNotNumericValues]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			
			]

	
	! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:19:27'!
ERROR!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:19:27'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:19:35'!
createCreditCardWithExpirationDateWithNotNumericValues
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:20:48' prior: 50880847!
createCreditCardWithExpirationDateWithNotNumericValues
	^ CreditCard withNumber: invalidNumber expiring: {'/1'.'f999'} andName: validName .
	! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:20:52'!
ERROR!
!CreditCard class methodsFor: 'associating' stamp: 'sb 6/14/2021 12:21:04'!
invalidCardExpirationDate
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'associating' stamp: 'sb 6/14/2021 12:21:23' prior: 50880865!
invalidCardExpirationDate
	^ 'Invalid Expiration Date'! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:21:25'!
FAILURE!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:22:09' prior: 50880853!
createCreditCardWithExpirationDateWithNotNumericValues
	^ CreditCard withNumber: validCardNumber expiring: {'/1'.'f999'} andName: validName .
	! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:22:15'!
FAILURE!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:22:15'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'sb 6/14/2021 12:22:38' prior: 50880514!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 

	self assertValidNumber: aCreditCardNumber.
	self assertValidName: aName.
	self assertValidExpirationDate: anExpirationDate .

	number := aCreditCardNumber.
	expirationDate := anExpirationDate.
	name := aName.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:22:52'!
ERROR!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:22:52'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:22:57'!
assertValidExpirationDate: anArray 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:23:08' prior: 50880917!
assertValidExpirationDate: anExperitaionDate 
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:23:52' prior: 50880922!
assertValidExpirationDate: anExperitaionDate 
	self assertJustNumber: anExperitaionDate first.
	self assertJustNumber: anExperitaionDate second.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:23:57'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:24:24'!
assertJustNumber: aString 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:26:09' prior: 50880939!
assertJustNumber: aString
	aString do: [:aCharacter| 
		[aCharacter asString asNumber] on: Error do: [ CreditCard invalidCardExpirationDate ]
		]! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:26:12'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:27:41' prior: 50880944!
assertJustNumber: aString
	aString do: [:aCharacter| 
		[aCharacter asString asNumber] on: Error do: [self error: CreditCard invalidCardExpirationDate ]
		]! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:27:46'!
PASSED!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 12:27:50'!
PASSED!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:28:27'!
test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange

	self 
		should: [ self createCreditCardWithExpirationDateWithNotNumericValues]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			
			]

	
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:29:04' prior: 50880972!
test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange

	self 
		should: [ self createCreditCardWithExpirationDateWithNotNumericValues]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:29:32' prior: 50880985!
test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange

	self 
		should: [ self createCreditCardWithExpirationDateWithValuesNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	! !

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange stamp: 'sb 6/14/2021 12:29:38'!
ERROR!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange stamp: 'sb 6/14/2021 12:29:38'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:29:48'!
createCreditCardWithExpirationDateWithValuesNotInRange
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:31:12' prior: 50881019!
createCreditCardWithExpirationDateWithValuesNotInRange
	^ CreditCard withNumber: validCardNumber expiring: {'222'.'9999'} andName: validName .! !

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange stamp: 'sb 6/14/2021 12:31:20'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:32:52' prior: 50880927!
assertValidExpirationDate: anExperitaionDate 
	|month year|
	month:=  anExperitaionDate first.
	year:= anExperitaionDate second.
	self assertJustNumber: month .
	self assertJustNumber: year.
	
	
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:33:32' prior: 50881037!
assertValidExpirationDate: anExperitaionDate 
	|month year|
	month:=  anExperitaionDate first.
	year:= anExperitaionDate second.
	self assertJustNumber: month .
	self assertJustNumber: year.
	self assertValidMonth: month. 
	
	! !

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange stamp: 'sb 6/14/2021 12:33:53'!
ERROR!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange stamp: 'sb 6/14/2021 12:33:53'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:33:58'!
assertValidMonth: aString 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:36:45' prior: 50881065!
assertValidMonth: aString 
	((aString size = 2) and: (aString asNumber >= 1 and: aString asNumber <= 12))  ifFalse: [self error: CreditCard invalidCardExpirationDate ]! !

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange stamp: 'sb 6/14/2021 12:36:51'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange stamp: 'sb 6/14/2021 12:36:55'!
PASSED!

'-1' asNumber!

'-' asNumber !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:38:21' prior: 50881047!
assertValidExpirationDate: anExperitaionDate 
	|month year|
	month:=  anExperitaionDate first.
	year:= anExperitaionDate second.
	self assertJustNumber: month .
	self assertJustNumber: year.
	self assertValidMonth: month. 
	self assertValidYear: year.
	
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:39:42'!
assertValidYear: aString
	(aString size = 4) ifFalse: [self error: CreditCard invalidCardExpirationDate]! !

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange stamp: 'sb 6/14/2021 12:39:54'!
PASSED!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:40:11'!
test04CantCreateCreditCardWithExpirationDateHavingMonthInRange

	self 
		should: [ self createCreditCardWithExpirationDateWithValuesNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:40:22' prior: 50881109!
test04CantCreateCreditCardWithExpirationDateHavingMonthInRange

	self 
		should: [ self createCreditCardWithExpirationDateWithValuesNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:41:01'!
createCreditCardWithExpirationDateWithMonthNotInRange
	^ CreditCard withNumber: validCardNumber expiring: {'222'.'9999'} andName: validName .! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:41:01' prior: 50881122!
test04CantCreateCreditCardWithExpirationDateHavingMonthInRange

	self 
		should: [ self createCreditCardWithExpirationDateWithMonthNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:41:01' prior: 50880998!
test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange

	self 
		should: [ self createCreditCardWithExpirationDateWithMonthNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	! !

!methodRemoval: TestsTusLibros #createCreditCardWithExpirationDateWithValuesNotInRange stamp: 'sb 6/14/2021 12:41:01'!
createCreditCardWithExpirationDateWithValuesNotInRange
	^ CreditCard withNumber: validCardNumber expiring: {'222'.'9999'} andName: validName .!

!methodRemoval: TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange stamp: 'sb 6/14/2021 12:41:10'!
test04CantCreateCreditCardWithExpirationDateHavingValuesNotInRange

	self 
		should: [ self createCreditCardWithExpirationDateWithMonthNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 12:41:14'!
PASSED!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:42:04'!
test05CantCreateCreditCardWithExpirationDateHavingInvalidYear

	self 
		should: [ self createCreditCardWithExpirationDateWithMonthNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 12:42:12' prior: 50881195!
test05CantCreateCreditCardWithExpirationDateHavingInvalidYear

	self 
		should: [ self createCreditCardWithExpirationDateWithYearNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	! !

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 12:42:18'!
ERROR!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 12:42:18'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:42:24'!
createCreditCardWithExpirationDateWithYearNotInRange
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:42:57' prior: 50881229!
createCreditCardWithExpirationDateWithYearNotInRange
	^ CreditCard withNumber: validCardNumber expiring: {'02'.'99999'}  andName: invalidName.
	! !

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 12:43:01'!
FAILURE!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:43:12' prior: 50880210!
createCreditCardWithInvalidName
	^ CreditCard withNumber: validCardNumber expiring: validExpiration  andName: validName.! !

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 12:43:20'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 12:43:28'!
FAILURE!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 12:43:28'!
FAILURE!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:43:41' prior: 50881235!
createCreditCardWithExpirationDateWithYearNotInRange
	^ CreditCard withNumber: validCardNumber expiring: {'02'.'99999'}  andName: validName.
	! !

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 12:43:47'!
PASSED!

Date dateAndTimeNow year!

Date dateAndTimeNow yearNumber !

Date dateAndTimeNow !

Date dateAndTimeNow date!

Date now!
!CreditCard methodsFor: 'initialization' stamp: 'sb 6/14/2021 12:53:44'!
assertValidExpirationDate: aCreditCardNumber andName: aName andNumber: anExpirationDate

	self assertValidNumber: aCreditCardNumber.
	self assertValidName: aName.
	self assertValidExpirationDate: anExpirationDate! !
!CreditCard methodsFor: 'initialization' stamp: 'sb 6/14/2021 12:53:44' prior: 50880896!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 

	self assertValidExpirationDate: aCreditCardNumber andName: aName andNumber: anExpirationDate .

	number := aCreditCardNumber.
	expirationDate := anExpirationDate.
	name := aName.! !
!CreditCard methodsFor: 'initialization' stamp: 'sb 6/14/2021 12:54:09'!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate

	self assertValidNumber: aCreditCardNumber.
	self assertValidName: aName.
	self assertValidExpirationDate: anExpirationDate! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:54:09' prior: 50881292!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 

	self assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate .

	number := aCreditCardNumber.
	expirationDate := anExpirationDate.
	name := aName.! !

!methodRemoval: CreditCard #assertValidExpirationDate:andName:andNumber: stamp: 'sb 6/14/2021 12:54:09'!
assertValidExpirationDate: aCreditCardNumber andName: aName andNumber: anExpirationDate

	self assertValidNumber: aCreditCardNumber.
	self assertValidName: aName.
	self assertValidExpirationDate: anExpirationDate!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:55:14'!
assertOnlyNumberCharacters: aString
	aString do: [:aCharacter| 
		[aCharacter asString asNumber] on: Error do: [self error: CreditCard invalidCardExpirationDate ]
		]! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:55:14' prior: 50881088!
assertValidExpirationDate: anExperitaionDate 
	|month year|
	month:=  anExperitaionDate first.
	year:= anExperitaionDate second.
	self assertOnlyNumberCharacters: month .
	self assertOnlyNumberCharacters: year.
	self assertValidMonth: month. 
	self assertValidYear: year.
	
	! !

!methodRemoval: CreditCard #assertJustNumber: stamp: 'sb 6/14/2021 12:55:14'!
assertJustNumber: aString
	aString do: [:aCharacter| 
		[aCharacter asString asNumber] on: Error do: [self error: CreditCard invalidCardExpirationDate ]
		]!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:55:43' prior: 50881343!
assertValidExpirationDate: anExperitaionDate 
	|month year|
	month:=  anExperitaionDate first.
	year:= anExperitaionDate second.
	
	self assertOnlyNumberCharacters: month .
	self assertOnlyNumberCharacters: year.
	self assertValidMonth: month. 
	self assertValidYear: year.
	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 12:56:48'!
test03CannotCheckoutWithExpiredCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 12:57:17' prior: 50881375!
test03CannotCheckoutWithExpiredCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard ) equals: aCart priceSummary.

	
	! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 12:57:26'!
ERROR!

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 12:57:26'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:57:33'!
createExpiredCreditCard
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 12:58:20' prior: 50881406!
createExpiredCreditCard
	^ CreditCard withNumber: validCardNumber expiring: {'12'.'1492'} andName: validName.  ! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 12:58:31'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 12:59:43' prior: 50881387!
test03CannotCheckoutWithExpiredCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 13:00:42' prior: 50881421!
test03CannotCheckoutWithExpiredCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]

	
	! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:00:49'!
FAILURE!

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:00:49'!
FAILURE!

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:01:38'!
FAILURE!

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:01:38'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 13:02:22' prior: 50880616!
checkOutCart: aCart usingCreditCard: aCreditCard  
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	self assertNotExpiredCreditCard: aCreditCard .
	
	^aCart priceSummary .! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:02:34'!
ERROR!

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:02:34'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 13:02:41'!
assertNotExpiredCreditCard: aCreditCard 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'sb 6/14/2021 13:04:14'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate name expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'sb 6/14/2021 13:04:15'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate name expirationMonth expirationYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'sb 6/14/2021 13:04:12' prior: 50881313!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 

	self assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate .

	number := aCreditCardNumber.
	expirationMonth := anExpirationDate first.
	expirationYear := anExpirationDate second.
	name := aName.! !

Object subclass: #CreditCard
	instanceVariableNames: 'number name expirationMonth expirationYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'sb 6/14/2021 13:04:31'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expirationMonth expirationYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 13:04:48'!
expirationMonth
	^ expirationMonth copy.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 13:04:57'!
expirationYear
	^ expirationYear copy.! !

Date today!

Date today monthName !

Date today monthNumber!

Date today monthIndex !

Date today year!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 13:11:33' prior: 50881482!
assertNotExpiredCreditCard: aCreditCard 
	|actualDate|
	actualDate := Date today. 
	actualDate yearNumber > aCreditCard expirationYear asNumber ifTrue: [self error: 	Cashier expiredCardError] .
	(actualDate yearNumber = aCreditCard expirationYear asNumber and: actualDate monthIndex  > aCreditCard expirationMonth asNumber ) ifTrue: [self error: 	Cashier expiredCardError] 
	 ! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:11:46'!
ERROR!

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:11:46'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 13:11:53'!
expiredCardError
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 13:12:06' prior: 50881563!
expiredCardError
	^'Expired card'! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:12:08'!
PASSED!

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:12:17'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 13:14:00'!
test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 13:14:13' prior: 50881578!
test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCart addToCart: ISBNWatkins withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard ) equals: aCart priceSummary.

	
	! !

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:14:18'!
PASSED!

!methodRemoval: Cashier #priceSummaryOfCart: stamp: 'sb 6/14/2021 13:15:18'!
priceSummaryOfCart: aCart 
	^60!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (108 to: 124)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (136 to: 151)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (162 to: 166)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{86 to: 106. 126 to: 134. 153 to: 160}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{86 to: 89})
		assertValidExpirationDate:
			(aCreditCardNumber
				cover: (118 to: 134)
				declaredAt: (23 to: 39))
		Name:
			(aName
				cover: (142 to: 146)
				declaredAt: (77 to: 81))
		andNumber:
			(anExpirationDate
				cover: (159 to: 174)
				declaredAt: (51 to: 66)) ] valueCoveringAll:
		{91 to: 116. 136 to: 140. 148 to: 157}.
	(number _ aCreditCardNumber
		cover: (190 to: 206)
		declaredAt: (23 to: 39))
		cover: (180 to: 185)
		declaredAt: (180 to: 185).
	(expirationMonth _ [
	(anExpirationDate
		cover: (229 to: 244)
		declaredAt: (51 to: 66)) first ] valueCoveringAll:
		{246 to: 250})
		cover: (210 to: 224)
		declaredAt: (210 to: 224).
	(expirationYear _ [
	(anExpirationDate
		cover: (272 to: 287)
		declaredAt: (51 to: 66)) second ] valueCoveringAll:
		{289 to: 294})
		cover: (254 to: 267)
		declaredAt: (254 to: 267).
	(name _ aName
		cover: (306 to: 310)
		declaredAt: (77 to: 81))
		cover: (298 to: 301)
		declaredAt: (298 to: 301).! !
!Behavior method!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate
	[
	(self coverAll:
		{88 to: 91}) assertValidNumber:
		(aCreditCardNumber
			cover: (112 to: 128)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{93 to: 110}.
	[
	(self coverAll:
		{132 to: 135}) assertValidName:
		(aName
			cover: (154 to: 158)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{137 to: 152}.
	[
	(self coverAll:
		{162 to: 165}) assertValidExpirationDate:
		(anExpirationDate
			cover: (194 to: 209)
			declaredAt: (69 to: 84)) ] valueCoveringAll:
		{167 to: 192}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(CreditCard
				cover: (93 to: 102)
				declaredAt: (93 to: 102)) invalidCardNumber ] valueCoveringAll:
				{104 to: 120}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 13:26:27'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(CreditCard
				cover: (64 to: 73)
				declaredAt: (64 to: 73)) invalidCardName ] valueCoveringAll:
				{75 to: 89}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
assertValidExpirationDate: anExperitaionDate
	| month year |
	(month _ [
	(anExperitaionDate
		cover: (71 to: 87)
		declaredAt: (28 to: 44)) first ] valueCoveringAll:
		{89 to: 93})
		cover: (62 to: 66)
		declaredAt: (49 to: 53).
	(year _ [
	(anExperitaionDate
		cover: (104 to: 120)
		declaredAt: (28 to: 44)) second ] valueCoveringAll:
		{122 to: 127})
		cover: (97 to: 100)
		declaredAt: (55 to: 58).
	[
	(self coverAll:
		{133 to: 136}) assertOnlyNumberCharacters:
		(month
			cover: (166 to: 170)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{138 to: 164}.
	[
	(self coverAll:
		{175 to: 178}) assertOnlyNumberCharacters:
		(year
			cover: (208 to: 211)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{180 to: 206}.
	[
	(self coverAll:
		{215 to: 218}) assertValidMonth:
		(month
			cover: (238 to: 242)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{220 to: 236}.
	[
	(self coverAll:
		{247 to: 250}) assertValidYear:
		(year
			cover: (269 to: 272)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{252 to: 267}.! !
!Behavior method!
assertOnlyNumberCharacters: aString
	[
	(aString
		cover: (38 to: 44)
		declaredAt: (29 to: 35)) do: [ :aCharacter |
		[
		[
		[
		([
		(aCharacter
			cover: (68 to: 77)
			declaredAt: (52 to: 61)) asString ] valueCoveringAll:
			{79 to: 86}) asNumber ] valueCoveringAll:
			{88 to: 95} ]
			on:
				(Error
					cover: (102 to: 106)
					declaredAt: (102 to: 106))
			do: [
				[
				(self coverAll:
					{113 to: 116}) error:
					([
					(CreditCard
						cover: (125 to: 134)
						declaredAt: (125 to: 134)) invalidCardExpirationDate ] valueCoveringAll:
						{136 to: 160}) ] valueCoveringAll:
					{118 to: 123} ]] valueCoveringAll:
			{98 to: 100. 108 to: 110} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
assertValidMonth: aString
	[
	([
	([
	([
	(aString
		cover: (31 to: 37)
		declaredAt: (19 to: 25)) size ] valueCoveringAll:
		{39 to: 42}) =
		(2 coverAll:
			{46 to: 46}) ] valueCoveringAll:
		{44 to: 44}) and:
		([
		([
		([
		(aString
			cover: (55 to: 61)
			declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
			{63 to: 70}) >=
			(1 coverAll:
				{75 to: 75}) ] valueCoveringAll:
			{72 to: 73}) and:
			([
			([
			(aString
				cover: (82 to: 88)
				declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
				{90 to: 97}) <=
				(12 coverAll:
					{102 to: 103}) ] valueCoveringAll:
				{99 to: 100}) ] valueCoveringAll:
			{77 to: 80}) ] valueCoveringAll:
		{49 to: 52}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			(CreditCard
				cover: (130 to: 139)
				declaredAt: (130 to: 139)) invalidCardExpirationDate ] valueCoveringAll:
				{141 to: 165}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{108 to: 115}.! !
!Behavior method!
assertValidYear: aString
	[
	([
	([
	(aString
		cover: (28 to: 34)
		declaredAt: (18 to: 24)) size ] valueCoveringAll:
		{36 to: 39}) =
		(4 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifFalse: [
		[
		(self coverAll:
			{56 to: 59}) error:
			([
			(CreditCard
				cover: (68 to: 77)
				declaredAt: (68 to: 77)) invalidCardExpirationDate ] valueCoveringAll:
				{79 to: 103}) ] valueCoveringAll:
			{61 to: 66} ]] valueCoveringAll:
		{46 to: 53}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard
	[
	([
	(aCart
		cover: (55 to: 59)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{61 to: 67}) ifTrue: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			(Cashier
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) emptyCartError ] valueCoveringAll:
				{98 to: 111}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 75}.
	[
	(self coverAll:
		{116 to: 119}) assertNotExpiredCreditCard:
		(aCreditCard
			cover: (149 to: 159)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{121 to: 147}.
	^ [
	(aCart
		cover: (167 to: 171)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{173 to: 184}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 13:26:27'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 13:26:27'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:26:27'!
FAILURE!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
assertNotExpiredCreditCard: aCreditCard
	| actualDate |
	(actualDate _ [
	(Date
		cover: (71 to: 74)
		declaredAt: (71 to: 74)) today ] valueCoveringAll:
		{76 to: 80})
		cover: (57 to: 66)
		declaredAt: (44 to: 53).
	[
	([
	([
	(actualDate
		cover: (85 to: 94)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{96 to: 105}) >
		([
		([
		(aCreditCard
			cover: (109 to: 119)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{121 to: 134}) asNumber ] valueCoveringAll:
			{136 to: 143}) ] valueCoveringAll:
		{107 to: 107}) ifTrue: [
		[
		(self coverAll:
			{154 to: 157}) error:
			([
			(Cashier
				cover: (167 to: 173)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{175 to: 190}) ] valueCoveringAll:
			{159 to: 164} ]] valueCoveringAll:
		{145 to: 151}.
	[
	([
	([
	([
	(actualDate
		cover: (197 to: 206)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{208 to: 217}) =
		([
		([
		(aCreditCard
			cover: (221 to: 231)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{233 to: 246}) asNumber ] valueCoveringAll:
			{248 to: 255}) ] valueCoveringAll:
		{219 to: 219}) and:
		([
		([
		(actualDate
			cover: (262 to: 271)
			declaredAt: (44 to: 53)) monthIndex ] valueCoveringAll:
			{273 to: 282}) >
			([
			([
			(aCreditCard
				cover: (287 to: 297)
				declaredAt: (29 to: 39)) expirationMonth ] valueCoveringAll:
				{299 to: 313}) asNumber ] valueCoveringAll:
				{315 to: 322}) ] valueCoveringAll:
			{285 to: 285}) ] valueCoveringAll:
		{257 to: 260}) ifTrue: [
		[
		(self coverAll:
			{335 to: 338}) error:
			([
			(Cashier
				cover: (348 to: 354)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{356 to: 371}) ] valueCoveringAll:
			{340 to: 345} ]] valueCoveringAll:
		{326 to: 332}.! !
!Behavior method!
expirationYear
	^ [
	(expirationYear
		cover: (19 to: 32)
		declaredAt: (19 to: 32)) copy ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
expirationMonth
	^ [
	(expirationMonth
		cover: (20 to: 34)
		declaredAt: (20 to: 34)) copy ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:26:27'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 13:26:27'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:26:27'!
PASSED!
!Behavior method!
invalidCardExpirationDate
	^ 'Invalid Expiration Date' coverAll:
		{30 to: 54}.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 13:26:27'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 13:26:27'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 13:26:27'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:26:27'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 13:26:27'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 13:26:27'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 13:26:27'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 13:26:27'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:26:27'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:26:27'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:26:27'!
FAILURE!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 13:26:44'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:26:44'!
PASSED!

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:26:44'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:26:44'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 13:26:46'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:26:46'!
FAILURE!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 13:26:46'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 13:26:46'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 13:26:46'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:26:46'!
FAILURE!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 13:26:53'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 13:26:58'!
PASSED!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 13:27:04'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 13:27:08'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:27:12'!
FAILURE!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:27:12'!
FAILURE!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 13:27:53' prior: 50879881!
createCreditCardWithInvalidNumber
	^ CreditCard withNumber: invalidNumber expiring: validExpiration andName: invalidName .! !
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (108 to: 124)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (136 to: 151)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (162 to: 166)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{86 to: 106. 126 to: 134. 153 to: 160}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{86 to: 89})
		assertValidExpirationDate:
			(aCreditCardNumber
				cover: (118 to: 134)
				declaredAt: (23 to: 39))
		Name:
			(aName
				cover: (142 to: 146)
				declaredAt: (77 to: 81))
		andNumber:
			(anExpirationDate
				cover: (159 to: 174)
				declaredAt: (51 to: 66)) ] valueCoveringAll:
		{91 to: 116. 136 to: 140. 148 to: 157}.
	(number _ aCreditCardNumber
		cover: (190 to: 206)
		declaredAt: (23 to: 39))
		cover: (180 to: 185)
		declaredAt: (180 to: 185).
	(expirationMonth _ [
	(anExpirationDate
		cover: (229 to: 244)
		declaredAt: (51 to: 66)) first ] valueCoveringAll:
		{246 to: 250})
		cover: (210 to: 224)
		declaredAt: (210 to: 224).
	(expirationYear _ [
	(anExpirationDate
		cover: (272 to: 287)
		declaredAt: (51 to: 66)) second ] valueCoveringAll:
		{289 to: 294})
		cover: (254 to: 267)
		declaredAt: (254 to: 267).
	(name _ aName
		cover: (306 to: 310)
		declaredAt: (77 to: 81))
		cover: (298 to: 301)
		declaredAt: (298 to: 301).! !
!Behavior method!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate
	[
	(self coverAll:
		{88 to: 91}) assertValidNumber:
		(aCreditCardNumber
			cover: (112 to: 128)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{93 to: 110}.
	[
	(self coverAll:
		{132 to: 135}) assertValidName:
		(aName
			cover: (154 to: 158)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{137 to: 152}.
	[
	(self coverAll:
		{162 to: 165}) assertValidExpirationDate:
		(anExpirationDate
			cover: (194 to: 209)
			declaredAt: (69 to: 84)) ] valueCoveringAll:
		{167 to: 192}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(CreditCard
				cover: (93 to: 102)
				declaredAt: (93 to: 102)) invalidCardNumber ] valueCoveringAll:
				{104 to: 120}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 13:27:59'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(CreditCard
				cover: (64 to: 73)
				declaredAt: (64 to: 73)) invalidCardName ] valueCoveringAll:
				{75 to: 89}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
assertValidExpirationDate: anExperitaionDate
	| month year |
	(month _ [
	(anExperitaionDate
		cover: (71 to: 87)
		declaredAt: (28 to: 44)) first ] valueCoveringAll:
		{89 to: 93})
		cover: (62 to: 66)
		declaredAt: (49 to: 53).
	(year _ [
	(anExperitaionDate
		cover: (104 to: 120)
		declaredAt: (28 to: 44)) second ] valueCoveringAll:
		{122 to: 127})
		cover: (97 to: 100)
		declaredAt: (55 to: 58).
	[
	(self coverAll:
		{133 to: 136}) assertOnlyNumberCharacters:
		(month
			cover: (166 to: 170)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{138 to: 164}.
	[
	(self coverAll:
		{175 to: 178}) assertOnlyNumberCharacters:
		(year
			cover: (208 to: 211)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{180 to: 206}.
	[
	(self coverAll:
		{215 to: 218}) assertValidMonth:
		(month
			cover: (238 to: 242)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{220 to: 236}.
	[
	(self coverAll:
		{247 to: 250}) assertValidYear:
		(year
			cover: (269 to: 272)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{252 to: 267}.! !
!Behavior method!
assertOnlyNumberCharacters: aString
	[
	(aString
		cover: (38 to: 44)
		declaredAt: (29 to: 35)) do: [ :aCharacter |
		[
		[
		[
		([
		(aCharacter
			cover: (68 to: 77)
			declaredAt: (52 to: 61)) asString ] valueCoveringAll:
			{79 to: 86}) asNumber ] valueCoveringAll:
			{88 to: 95} ]
			on:
				(Error
					cover: (102 to: 106)
					declaredAt: (102 to: 106))
			do: [
				[
				(self coverAll:
					{113 to: 116}) error:
					([
					(CreditCard
						cover: (125 to: 134)
						declaredAt: (125 to: 134)) invalidCardExpirationDate ] valueCoveringAll:
						{136 to: 160}) ] valueCoveringAll:
					{118 to: 123} ]] valueCoveringAll:
			{98 to: 100. 108 to: 110} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
assertValidMonth: aString
	[
	([
	([
	([
	(aString
		cover: (31 to: 37)
		declaredAt: (19 to: 25)) size ] valueCoveringAll:
		{39 to: 42}) =
		(2 coverAll:
			{46 to: 46}) ] valueCoveringAll:
		{44 to: 44}) and:
		([
		([
		([
		(aString
			cover: (55 to: 61)
			declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
			{63 to: 70}) >=
			(1 coverAll:
				{75 to: 75}) ] valueCoveringAll:
			{72 to: 73}) and:
			([
			([
			(aString
				cover: (82 to: 88)
				declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
				{90 to: 97}) <=
				(12 coverAll:
					{102 to: 103}) ] valueCoveringAll:
				{99 to: 100}) ] valueCoveringAll:
			{77 to: 80}) ] valueCoveringAll:
		{49 to: 52}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			(CreditCard
				cover: (130 to: 139)
				declaredAt: (130 to: 139)) invalidCardExpirationDate ] valueCoveringAll:
				{141 to: 165}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{108 to: 115}.! !
!Behavior method!
assertValidYear: aString
	[
	([
	([
	(aString
		cover: (28 to: 34)
		declaredAt: (18 to: 24)) size ] valueCoveringAll:
		{36 to: 39}) =
		(4 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifFalse: [
		[
		(self coverAll:
			{56 to: 59}) error:
			([
			(CreditCard
				cover: (68 to: 77)
				declaredAt: (68 to: 77)) invalidCardExpirationDate ] valueCoveringAll:
				{79 to: 103}) ] valueCoveringAll:
			{61 to: 66} ]] valueCoveringAll:
		{46 to: 53}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard
	[
	([
	(aCart
		cover: (55 to: 59)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{61 to: 67}) ifTrue: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			(Cashier
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) emptyCartError ] valueCoveringAll:
				{98 to: 111}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 75}.
	[
	(self coverAll:
		{116 to: 119}) assertNotExpiredCreditCard:
		(aCreditCard
			cover: (149 to: 159)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{121 to: 147}.
	^ [
	(aCart
		cover: (167 to: 171)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{173 to: 184}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 13:28:00'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 13:28:00'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:28:00'!
FAILURE!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
assertNotExpiredCreditCard: aCreditCard
	| actualDate |
	(actualDate _ [
	(Date
		cover: (71 to: 74)
		declaredAt: (71 to: 74)) today ] valueCoveringAll:
		{76 to: 80})
		cover: (57 to: 66)
		declaredAt: (44 to: 53).
	[
	([
	([
	(actualDate
		cover: (85 to: 94)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{96 to: 105}) >
		([
		([
		(aCreditCard
			cover: (109 to: 119)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{121 to: 134}) asNumber ] valueCoveringAll:
			{136 to: 143}) ] valueCoveringAll:
		{107 to: 107}) ifTrue: [
		[
		(self coverAll:
			{154 to: 157}) error:
			([
			(Cashier
				cover: (167 to: 173)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{175 to: 190}) ] valueCoveringAll:
			{159 to: 164} ]] valueCoveringAll:
		{145 to: 151}.
	[
	([
	([
	([
	(actualDate
		cover: (197 to: 206)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{208 to: 217}) =
		([
		([
		(aCreditCard
			cover: (221 to: 231)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{233 to: 246}) asNumber ] valueCoveringAll:
			{248 to: 255}) ] valueCoveringAll:
		{219 to: 219}) and:
		([
		([
		(actualDate
			cover: (262 to: 271)
			declaredAt: (44 to: 53)) monthIndex ] valueCoveringAll:
			{273 to: 282}) >
			([
			([
			(aCreditCard
				cover: (287 to: 297)
				declaredAt: (29 to: 39)) expirationMonth ] valueCoveringAll:
				{299 to: 313}) asNumber ] valueCoveringAll:
				{315 to: 322}) ] valueCoveringAll:
			{285 to: 285}) ] valueCoveringAll:
		{257 to: 260}) ifTrue: [
		[
		(self coverAll:
			{335 to: 338}) error:
			([
			(Cashier
				cover: (348 to: 354)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{356 to: 371}) ] valueCoveringAll:
			{340 to: 345} ]] valueCoveringAll:
		{326 to: 332}.! !
!Behavior method!
expirationYear
	^ [
	(expirationYear
		cover: (19 to: 32)
		declaredAt: (19 to: 32)) copy ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
expirationMonth
	^ [
	(expirationMonth
		cover: (20 to: 34)
		declaredAt: (20 to: 34)) copy ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:28:00'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 13:28:00'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:28:00'!
PASSED!
!Behavior method!
invalidCardExpirationDate
	^ 'Invalid Expiration Date' coverAll:
		{30 to: 54}.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 13:28:00'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 13:28:00'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 13:28:00'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:28:00'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 13:28:00'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 13:28:00'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 13:28:00'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 13:28:00'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:28:00'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:28:00'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:28:00'!
FAILURE!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 13:28:07'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 13:28:07'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 13:28:07'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 13:28:07'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 13:28:07'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 13:28:07'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:28:07'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:28:07'!
PASSED!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (108 to: 124)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (136 to: 151)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (162 to: 166)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{86 to: 106. 126 to: 134. 153 to: 160}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{86 to: 89})
		assertValidExpirationDate:
			(aCreditCardNumber
				cover: (118 to: 134)
				declaredAt: (23 to: 39))
		Name:
			(aName
				cover: (142 to: 146)
				declaredAt: (77 to: 81))
		andNumber:
			(anExpirationDate
				cover: (159 to: 174)
				declaredAt: (51 to: 66)) ] valueCoveringAll:
		{91 to: 116. 136 to: 140. 148 to: 157}.
	(number _ aCreditCardNumber
		cover: (190 to: 206)
		declaredAt: (23 to: 39))
		cover: (180 to: 185)
		declaredAt: (180 to: 185).
	(expirationMonth _ [
	(anExpirationDate
		cover: (229 to: 244)
		declaredAt: (51 to: 66)) first ] valueCoveringAll:
		{246 to: 250})
		cover: (210 to: 224)
		declaredAt: (210 to: 224).
	(expirationYear _ [
	(anExpirationDate
		cover: (272 to: 287)
		declaredAt: (51 to: 66)) second ] valueCoveringAll:
		{289 to: 294})
		cover: (254 to: 267)
		declaredAt: (254 to: 267).
	(name _ aName
		cover: (306 to: 310)
		declaredAt: (77 to: 81))
		cover: (298 to: 301)
		declaredAt: (298 to: 301).! !
!Behavior method!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate
	[
	(self coverAll:
		{88 to: 91}) assertValidNumber:
		(aCreditCardNumber
			cover: (112 to: 128)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{93 to: 110}.
	[
	(self coverAll:
		{132 to: 135}) assertValidName:
		(aName
			cover: (154 to: 158)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{137 to: 152}.
	[
	(self coverAll:
		{162 to: 165}) assertValidExpirationDate:
		(anExpirationDate
			cover: (194 to: 209)
			declaredAt: (69 to: 84)) ] valueCoveringAll:
		{167 to: 192}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(CreditCard
				cover: (93 to: 102)
				declaredAt: (93 to: 102)) invalidCardNumber ] valueCoveringAll:
				{104 to: 120}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(CreditCard
				cover: (64 to: 73)
				declaredAt: (64 to: 73)) invalidCardName ] valueCoveringAll:
				{75 to: 89}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
assertValidExpirationDate: anExperitaionDate
	| month year |
	(month _ [
	(anExperitaionDate
		cover: (71 to: 87)
		declaredAt: (28 to: 44)) first ] valueCoveringAll:
		{89 to: 93})
		cover: (62 to: 66)
		declaredAt: (49 to: 53).
	(year _ [
	(anExperitaionDate
		cover: (104 to: 120)
		declaredAt: (28 to: 44)) second ] valueCoveringAll:
		{122 to: 127})
		cover: (97 to: 100)
		declaredAt: (55 to: 58).
	[
	(self coverAll:
		{133 to: 136}) assertOnlyNumberCharacters:
		(month
			cover: (166 to: 170)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{138 to: 164}.
	[
	(self coverAll:
		{175 to: 178}) assertOnlyNumberCharacters:
		(year
			cover: (208 to: 211)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{180 to: 206}.
	[
	(self coverAll:
		{215 to: 218}) assertValidMonth:
		(month
			cover: (238 to: 242)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{220 to: 236}.
	[
	(self coverAll:
		{247 to: 250}) assertValidYear:
		(year
			cover: (269 to: 272)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{252 to: 267}.! !
!Behavior method!
assertOnlyNumberCharacters: aString
	[
	(aString
		cover: (38 to: 44)
		declaredAt: (29 to: 35)) do: [ :aCharacter |
		[
		[
		[
		([
		(aCharacter
			cover: (68 to: 77)
			declaredAt: (52 to: 61)) asString ] valueCoveringAll:
			{79 to: 86}) asNumber ] valueCoveringAll:
			{88 to: 95} ]
			on:
				(Error
					cover: (102 to: 106)
					declaredAt: (102 to: 106))
			do: [
				[
				(self coverAll:
					{113 to: 116}) error:
					([
					(CreditCard
						cover: (125 to: 134)
						declaredAt: (125 to: 134)) invalidCardExpirationDate ] valueCoveringAll:
						{136 to: 160}) ] valueCoveringAll:
					{118 to: 123} ]] valueCoveringAll:
			{98 to: 100. 108 to: 110} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
assertValidMonth: aString
	[
	([
	([
	([
	(aString
		cover: (31 to: 37)
		declaredAt: (19 to: 25)) size ] valueCoveringAll:
		{39 to: 42}) =
		(2 coverAll:
			{46 to: 46}) ] valueCoveringAll:
		{44 to: 44}) and:
		([
		([
		([
		(aString
			cover: (55 to: 61)
			declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
			{63 to: 70}) >=
			(1 coverAll:
				{75 to: 75}) ] valueCoveringAll:
			{72 to: 73}) and:
			([
			([
			(aString
				cover: (82 to: 88)
				declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
				{90 to: 97}) <=
				(12 coverAll:
					{102 to: 103}) ] valueCoveringAll:
				{99 to: 100}) ] valueCoveringAll:
			{77 to: 80}) ] valueCoveringAll:
		{49 to: 52}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			(CreditCard
				cover: (130 to: 139)
				declaredAt: (130 to: 139)) invalidCardExpirationDate ] valueCoveringAll:
				{141 to: 165}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{108 to: 115}.! !
!Behavior method!
assertValidYear: aString
	[
	([
	([
	(aString
		cover: (28 to: 34)
		declaredAt: (18 to: 24)) size ] valueCoveringAll:
		{36 to: 39}) =
		(4 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifFalse: [
		[
		(self coverAll:
			{56 to: 59}) error:
			([
			(CreditCard
				cover: (68 to: 77)
				declaredAt: (68 to: 77)) invalidCardExpirationDate ] valueCoveringAll:
				{79 to: 103}) ] valueCoveringAll:
			{61 to: 66} ]] valueCoveringAll:
		{46 to: 53}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:28:13'!
FAILURE!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:28:13'!
FAILURE!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 13:28:29' prior: 50881247!
createCreditCardWithInvalidName
	^ CreditCard withNumber: validCardNumber expiring: validExpiration  andName: invalidName.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 13:28:34'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:28:34'!
PASSED!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 13:28:34'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 13:28:34'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 13:28:34'!
PASSED!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (108 to: 124)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (136 to: 151)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (162 to: 166)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{86 to: 106. 126 to: 134. 153 to: 160}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{86 to: 89})
		assertValidExpirationDate:
			(aCreditCardNumber
				cover: (118 to: 134)
				declaredAt: (23 to: 39))
		Name:
			(aName
				cover: (142 to: 146)
				declaredAt: (77 to: 81))
		andNumber:
			(anExpirationDate
				cover: (159 to: 174)
				declaredAt: (51 to: 66)) ] valueCoveringAll:
		{91 to: 116. 136 to: 140. 148 to: 157}.
	(number _ aCreditCardNumber
		cover: (190 to: 206)
		declaredAt: (23 to: 39))
		cover: (180 to: 185)
		declaredAt: (180 to: 185).
	(expirationMonth _ [
	(anExpirationDate
		cover: (229 to: 244)
		declaredAt: (51 to: 66)) first ] valueCoveringAll:
		{246 to: 250})
		cover: (210 to: 224)
		declaredAt: (210 to: 224).
	(expirationYear _ [
	(anExpirationDate
		cover: (272 to: 287)
		declaredAt: (51 to: 66)) second ] valueCoveringAll:
		{289 to: 294})
		cover: (254 to: 267)
		declaredAt: (254 to: 267).
	(name _ aName
		cover: (306 to: 310)
		declaredAt: (77 to: 81))
		cover: (298 to: 301)
		declaredAt: (298 to: 301).! !
!Behavior method!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate
	[
	(self coverAll:
		{88 to: 91}) assertValidNumber:
		(aCreditCardNumber
			cover: (112 to: 128)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{93 to: 110}.
	[
	(self coverAll:
		{132 to: 135}) assertValidName:
		(aName
			cover: (154 to: 158)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{137 to: 152}.
	[
	(self coverAll:
		{162 to: 165}) assertValidExpirationDate:
		(anExpirationDate
			cover: (194 to: 209)
			declaredAt: (69 to: 84)) ] valueCoveringAll:
		{167 to: 192}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(CreditCard
				cover: (93 to: 102)
				declaredAt: (93 to: 102)) invalidCardNumber ] valueCoveringAll:
				{104 to: 120}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 13:28:38'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(CreditCard
				cover: (64 to: 73)
				declaredAt: (64 to: 73)) invalidCardName ] valueCoveringAll:
				{75 to: 89}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
assertValidExpirationDate: anExperitaionDate
	| month year |
	(month _ [
	(anExperitaionDate
		cover: (71 to: 87)
		declaredAt: (28 to: 44)) first ] valueCoveringAll:
		{89 to: 93})
		cover: (62 to: 66)
		declaredAt: (49 to: 53).
	(year _ [
	(anExperitaionDate
		cover: (104 to: 120)
		declaredAt: (28 to: 44)) second ] valueCoveringAll:
		{122 to: 127})
		cover: (97 to: 100)
		declaredAt: (55 to: 58).
	[
	(self coverAll:
		{133 to: 136}) assertOnlyNumberCharacters:
		(month
			cover: (166 to: 170)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{138 to: 164}.
	[
	(self coverAll:
		{175 to: 178}) assertOnlyNumberCharacters:
		(year
			cover: (208 to: 211)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{180 to: 206}.
	[
	(self coverAll:
		{215 to: 218}) assertValidMonth:
		(month
			cover: (238 to: 242)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{220 to: 236}.
	[
	(self coverAll:
		{247 to: 250}) assertValidYear:
		(year
			cover: (269 to: 272)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{252 to: 267}.! !
!Behavior method!
assertOnlyNumberCharacters: aString
	[
	(aString
		cover: (38 to: 44)
		declaredAt: (29 to: 35)) do: [ :aCharacter |
		[
		[
		[
		([
		(aCharacter
			cover: (68 to: 77)
			declaredAt: (52 to: 61)) asString ] valueCoveringAll:
			{79 to: 86}) asNumber ] valueCoveringAll:
			{88 to: 95} ]
			on:
				(Error
					cover: (102 to: 106)
					declaredAt: (102 to: 106))
			do: [
				[
				(self coverAll:
					{113 to: 116}) error:
					([
					(CreditCard
						cover: (125 to: 134)
						declaredAt: (125 to: 134)) invalidCardExpirationDate ] valueCoveringAll:
						{136 to: 160}) ] valueCoveringAll:
					{118 to: 123} ]] valueCoveringAll:
			{98 to: 100. 108 to: 110} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
assertValidMonth: aString
	[
	([
	([
	([
	(aString
		cover: (31 to: 37)
		declaredAt: (19 to: 25)) size ] valueCoveringAll:
		{39 to: 42}) =
		(2 coverAll:
			{46 to: 46}) ] valueCoveringAll:
		{44 to: 44}) and:
		([
		([
		([
		(aString
			cover: (55 to: 61)
			declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
			{63 to: 70}) >=
			(1 coverAll:
				{75 to: 75}) ] valueCoveringAll:
			{72 to: 73}) and:
			([
			([
			(aString
				cover: (82 to: 88)
				declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
				{90 to: 97}) <=
				(12 coverAll:
					{102 to: 103}) ] valueCoveringAll:
				{99 to: 100}) ] valueCoveringAll:
			{77 to: 80}) ] valueCoveringAll:
		{49 to: 52}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			(CreditCard
				cover: (130 to: 139)
				declaredAt: (130 to: 139)) invalidCardExpirationDate ] valueCoveringAll:
				{141 to: 165}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{108 to: 115}.! !
!Behavior method!
assertValidYear: aString
	[
	([
	([
	(aString
		cover: (28 to: 34)
		declaredAt: (18 to: 24)) size ] valueCoveringAll:
		{36 to: 39}) =
		(4 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifFalse: [
		[
		(self coverAll:
			{56 to: 59}) error:
			([
			(CreditCard
				cover: (68 to: 77)
				declaredAt: (68 to: 77)) invalidCardExpirationDate ] valueCoveringAll:
				{79 to: 103}) ] valueCoveringAll:
			{61 to: 66} ]] valueCoveringAll:
		{46 to: 53}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard
	[
	([
	(aCart
		cover: (55 to: 59)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{61 to: 67}) ifTrue: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			(Cashier
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) emptyCartError ] valueCoveringAll:
				{98 to: 111}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 75}.
	[
	(self coverAll:
		{116 to: 119}) assertNotExpiredCreditCard:
		(aCreditCard
			cover: (149 to: 159)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{121 to: 147}.
	^ [
	(aCart
		cover: (167 to: 171)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{173 to: 184}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 13:28:39'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 13:28:39'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:28:39'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
assertNotExpiredCreditCard: aCreditCard
	| actualDate |
	(actualDate _ [
	(Date
		cover: (71 to: 74)
		declaredAt: (71 to: 74)) today ] valueCoveringAll:
		{76 to: 80})
		cover: (57 to: 66)
		declaredAt: (44 to: 53).
	[
	([
	([
	(actualDate
		cover: (85 to: 94)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{96 to: 105}) >
		([
		([
		(aCreditCard
			cover: (109 to: 119)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{121 to: 134}) asNumber ] valueCoveringAll:
			{136 to: 143}) ] valueCoveringAll:
		{107 to: 107}) ifTrue: [
		[
		(self coverAll:
			{154 to: 157}) error:
			([
			(Cashier
				cover: (167 to: 173)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{175 to: 190}) ] valueCoveringAll:
			{159 to: 164} ]] valueCoveringAll:
		{145 to: 151}.
	[
	([
	([
	([
	(actualDate
		cover: (197 to: 206)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{208 to: 217}) =
		([
		([
		(aCreditCard
			cover: (221 to: 231)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{233 to: 246}) asNumber ] valueCoveringAll:
			{248 to: 255}) ] valueCoveringAll:
		{219 to: 219}) and:
		([
		([
		(actualDate
			cover: (262 to: 271)
			declaredAt: (44 to: 53)) monthIndex ] valueCoveringAll:
			{273 to: 282}) >
			([
			([
			(aCreditCard
				cover: (287 to: 297)
				declaredAt: (29 to: 39)) expirationMonth ] valueCoveringAll:
				{299 to: 313}) asNumber ] valueCoveringAll:
				{315 to: 322}) ] valueCoveringAll:
			{285 to: 285}) ] valueCoveringAll:
		{257 to: 260}) ifTrue: [
		[
		(self coverAll:
			{335 to: 338}) error:
			([
			(Cashier
				cover: (348 to: 354)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{356 to: 371}) ] valueCoveringAll:
			{340 to: 345} ]] valueCoveringAll:
		{326 to: 332}.! !
!Behavior method!
expirationYear
	^ [
	(expirationYear
		cover: (19 to: 32)
		declaredAt: (19 to: 32)) copy ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
expirationMonth
	^ [
	(expirationMonth
		cover: (20 to: 34)
		declaredAt: (20 to: 34)) copy ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:28:39'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 13:28:39'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:28:39'!
PASSED!
!Behavior method!
invalidCardExpirationDate
	^ 'Invalid Expiration Date' coverAll:
		{30 to: 54}.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 13:28:39'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 13:28:39'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 13:28:39'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:28:39'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 13:28:39'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 13:28:39'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 13:28:39'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 13:28:39'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:28:39'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:28:39'!
PASSED!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'sb 6/14/2021 13:30:19'!
test06CantCreateCreditCardWithExpirationDateHavingSameYearButPriorMonth

	self 
		should: [ self createCreditCardWithExpirationDateWithYearNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	! !

!methodRemoval: TestsTusLibros #test06CantCreateCreditCardWithExpirationDateHavingSameYearButPriorMonth stamp: 'sb 6/14/2021 13:31:20'!
test06CantCreateCreditCardWithExpirationDateHavingSameYearButPriorMonth

	self 
		should: [ self createCreditCardWithExpirationDateWithYearNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (108 to: 124)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (136 to: 151)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (162 to: 166)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{86 to: 106. 126 to: 134. 153 to: 160}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{86 to: 89})
		assertValidExpirationDate:
			(aCreditCardNumber
				cover: (118 to: 134)
				declaredAt: (23 to: 39))
		Name:
			(aName
				cover: (142 to: 146)
				declaredAt: (77 to: 81))
		andNumber:
			(anExpirationDate
				cover: (159 to: 174)
				declaredAt: (51 to: 66)) ] valueCoveringAll:
		{91 to: 116. 136 to: 140. 148 to: 157}.
	(number _ aCreditCardNumber
		cover: (190 to: 206)
		declaredAt: (23 to: 39))
		cover: (180 to: 185)
		declaredAt: (180 to: 185).
	(expirationMonth _ [
	(anExpirationDate
		cover: (229 to: 244)
		declaredAt: (51 to: 66)) first ] valueCoveringAll:
		{246 to: 250})
		cover: (210 to: 224)
		declaredAt: (210 to: 224).
	(expirationYear _ [
	(anExpirationDate
		cover: (272 to: 287)
		declaredAt: (51 to: 66)) second ] valueCoveringAll:
		{289 to: 294})
		cover: (254 to: 267)
		declaredAt: (254 to: 267).
	(name _ aName
		cover: (306 to: 310)
		declaredAt: (77 to: 81))
		cover: (298 to: 301)
		declaredAt: (298 to: 301).! !
!Behavior method!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate
	[
	(self coverAll:
		{88 to: 91}) assertValidNumber:
		(aCreditCardNumber
			cover: (112 to: 128)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{93 to: 110}.
	[
	(self coverAll:
		{132 to: 135}) assertValidName:
		(aName
			cover: (154 to: 158)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{137 to: 152}.
	[
	(self coverAll:
		{162 to: 165}) assertValidExpirationDate:
		(anExpirationDate
			cover: (194 to: 209)
			declaredAt: (69 to: 84)) ] valueCoveringAll:
		{167 to: 192}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(CreditCard
				cover: (93 to: 102)
				declaredAt: (93 to: 102)) invalidCardNumber ] valueCoveringAll:
				{104 to: 120}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 13:31:33'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(CreditCard
				cover: (64 to: 73)
				declaredAt: (64 to: 73)) invalidCardName ] valueCoveringAll:
				{75 to: 89}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
assertValidExpirationDate: anExperitaionDate
	| month year |
	(month _ [
	(anExperitaionDate
		cover: (71 to: 87)
		declaredAt: (28 to: 44)) first ] valueCoveringAll:
		{89 to: 93})
		cover: (62 to: 66)
		declaredAt: (49 to: 53).
	(year _ [
	(anExperitaionDate
		cover: (104 to: 120)
		declaredAt: (28 to: 44)) second ] valueCoveringAll:
		{122 to: 127})
		cover: (97 to: 100)
		declaredAt: (55 to: 58).
	[
	(self coverAll:
		{133 to: 136}) assertOnlyNumberCharacters:
		(month
			cover: (166 to: 170)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{138 to: 164}.
	[
	(self coverAll:
		{175 to: 178}) assertOnlyNumberCharacters:
		(year
			cover: (208 to: 211)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{180 to: 206}.
	[
	(self coverAll:
		{215 to: 218}) assertValidMonth:
		(month
			cover: (238 to: 242)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{220 to: 236}.
	[
	(self coverAll:
		{247 to: 250}) assertValidYear:
		(year
			cover: (269 to: 272)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{252 to: 267}.! !
!Behavior method!
assertOnlyNumberCharacters: aString
	[
	(aString
		cover: (38 to: 44)
		declaredAt: (29 to: 35)) do: [ :aCharacter |
		[
		[
		[
		([
		(aCharacter
			cover: (68 to: 77)
			declaredAt: (52 to: 61)) asString ] valueCoveringAll:
			{79 to: 86}) asNumber ] valueCoveringAll:
			{88 to: 95} ]
			on:
				(Error
					cover: (102 to: 106)
					declaredAt: (102 to: 106))
			do: [
				[
				(self coverAll:
					{113 to: 116}) error:
					([
					(CreditCard
						cover: (125 to: 134)
						declaredAt: (125 to: 134)) invalidCardExpirationDate ] valueCoveringAll:
						{136 to: 160}) ] valueCoveringAll:
					{118 to: 123} ]] valueCoveringAll:
			{98 to: 100. 108 to: 110} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
assertValidMonth: aString
	[
	([
	([
	([
	(aString
		cover: (31 to: 37)
		declaredAt: (19 to: 25)) size ] valueCoveringAll:
		{39 to: 42}) =
		(2 coverAll:
			{46 to: 46}) ] valueCoveringAll:
		{44 to: 44}) and:
		([
		([
		([
		(aString
			cover: (55 to: 61)
			declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
			{63 to: 70}) >=
			(1 coverAll:
				{75 to: 75}) ] valueCoveringAll:
			{72 to: 73}) and:
			([
			([
			(aString
				cover: (82 to: 88)
				declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
				{90 to: 97}) <=
				(12 coverAll:
					{102 to: 103}) ] valueCoveringAll:
				{99 to: 100}) ] valueCoveringAll:
			{77 to: 80}) ] valueCoveringAll:
		{49 to: 52}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			(CreditCard
				cover: (130 to: 139)
				declaredAt: (130 to: 139)) invalidCardExpirationDate ] valueCoveringAll:
				{141 to: 165}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{108 to: 115}.! !
!Behavior method!
assertValidYear: aString
	[
	([
	([
	(aString
		cover: (28 to: 34)
		declaredAt: (18 to: 24)) size ] valueCoveringAll:
		{36 to: 39}) =
		(4 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifFalse: [
		[
		(self coverAll:
			{56 to: 59}) error:
			([
			(CreditCard
				cover: (68 to: 77)
				declaredAt: (68 to: 77)) invalidCardExpirationDate ] valueCoveringAll:
				{79 to: 103}) ] valueCoveringAll:
			{61 to: 66} ]] valueCoveringAll:
		{46 to: 53}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard
	[
	([
	(aCart
		cover: (55 to: 59)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{61 to: 67}) ifTrue: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			(Cashier
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) emptyCartError ] valueCoveringAll:
				{98 to: 111}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 75}.
	[
	(self coverAll:
		{116 to: 119}) assertNotExpiredCreditCard:
		(aCreditCard
			cover: (149 to: 159)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{121 to: 147}.
	^ [
	(aCart
		cover: (167 to: 171)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{173 to: 184}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 13:31:33'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 13:31:33'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:31:33'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
assertNotExpiredCreditCard: aCreditCard
	| actualDate |
	(actualDate _ [
	(Date
		cover: (71 to: 74)
		declaredAt: (71 to: 74)) today ] valueCoveringAll:
		{76 to: 80})
		cover: (57 to: 66)
		declaredAt: (44 to: 53).
	[
	([
	([
	(actualDate
		cover: (85 to: 94)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{96 to: 105}) >
		([
		([
		(aCreditCard
			cover: (109 to: 119)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{121 to: 134}) asNumber ] valueCoveringAll:
			{136 to: 143}) ] valueCoveringAll:
		{107 to: 107}) ifTrue: [
		[
		(self coverAll:
			{154 to: 157}) error:
			([
			(Cashier
				cover: (167 to: 173)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{175 to: 190}) ] valueCoveringAll:
			{159 to: 164} ]] valueCoveringAll:
		{145 to: 151}.
	[
	([
	([
	([
	(actualDate
		cover: (197 to: 206)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{208 to: 217}) =
		([
		([
		(aCreditCard
			cover: (221 to: 231)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{233 to: 246}) asNumber ] valueCoveringAll:
			{248 to: 255}) ] valueCoveringAll:
		{219 to: 219}) and:
		([
		([
		(actualDate
			cover: (262 to: 271)
			declaredAt: (44 to: 53)) monthIndex ] valueCoveringAll:
			{273 to: 282}) >
			([
			([
			(aCreditCard
				cover: (287 to: 297)
				declaredAt: (29 to: 39)) expirationMonth ] valueCoveringAll:
				{299 to: 313}) asNumber ] valueCoveringAll:
				{315 to: 322}) ] valueCoveringAll:
			{285 to: 285}) ] valueCoveringAll:
		{257 to: 260}) ifTrue: [
		[
		(self coverAll:
			{335 to: 338}) error:
			([
			(Cashier
				cover: (348 to: 354)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{356 to: 371}) ] valueCoveringAll:
			{340 to: 345} ]] valueCoveringAll:
		{326 to: 332}.! !
!Behavior method!
expirationYear
	^ [
	(expirationYear
		cover: (19 to: 32)
		declaredAt: (19 to: 32)) copy ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
expirationMonth
	^ [
	(expirationMonth
		cover: (20 to: 34)
		declaredAt: (20 to: 34)) copy ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:31:33'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 13:31:33'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:31:33'!
PASSED!
!Behavior method!
invalidCardExpirationDate
	^ 'Invalid Expiration Date' coverAll:
		{30 to: 54}.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 13:31:33'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 13:31:33'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 13:31:33'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:31:33'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 13:31:33'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 13:31:33'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 13:31:33'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 13:31:33'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:31:33'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:31:33'!
PASSED!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (108 to: 124)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (136 to: 151)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (162 to: 166)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{86 to: 106. 126 to: 134. 153 to: 160}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{86 to: 89})
		assertValidExpirationDate:
			(aCreditCardNumber
				cover: (118 to: 134)
				declaredAt: (23 to: 39))
		Name:
			(aName
				cover: (142 to: 146)
				declaredAt: (77 to: 81))
		andNumber:
			(anExpirationDate
				cover: (159 to: 174)
				declaredAt: (51 to: 66)) ] valueCoveringAll:
		{91 to: 116. 136 to: 140. 148 to: 157}.
	(number _ aCreditCardNumber
		cover: (190 to: 206)
		declaredAt: (23 to: 39))
		cover: (180 to: 185)
		declaredAt: (180 to: 185).
	(expirationMonth _ [
	(anExpirationDate
		cover: (229 to: 244)
		declaredAt: (51 to: 66)) first ] valueCoveringAll:
		{246 to: 250})
		cover: (210 to: 224)
		declaredAt: (210 to: 224).
	(expirationYear _ [
	(anExpirationDate
		cover: (272 to: 287)
		declaredAt: (51 to: 66)) second ] valueCoveringAll:
		{289 to: 294})
		cover: (254 to: 267)
		declaredAt: (254 to: 267).
	(name _ aName
		cover: (306 to: 310)
		declaredAt: (77 to: 81))
		cover: (298 to: 301)
		declaredAt: (298 to: 301).! !
!Behavior method!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate
	[
	(self coverAll:
		{88 to: 91}) assertValidNumber:
		(aCreditCardNumber
			cover: (112 to: 128)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{93 to: 110}.
	[
	(self coverAll:
		{132 to: 135}) assertValidName:
		(aName
			cover: (154 to: 158)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{137 to: 152}.
	[
	(self coverAll:
		{162 to: 165}) assertValidExpirationDate:
		(anExpirationDate
			cover: (194 to: 209)
			declaredAt: (69 to: 84)) ] valueCoveringAll:
		{167 to: 192}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(CreditCard
				cover: (93 to: 102)
				declaredAt: (93 to: 102)) invalidCardNumber ] valueCoveringAll:
				{104 to: 120}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 13:31:50'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(CreditCard
				cover: (64 to: 73)
				declaredAt: (64 to: 73)) invalidCardName ] valueCoveringAll:
				{75 to: 89}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
assertValidExpirationDate: anExperitaionDate
	| month year |
	(month _ [
	(anExperitaionDate
		cover: (71 to: 87)
		declaredAt: (28 to: 44)) first ] valueCoveringAll:
		{89 to: 93})
		cover: (62 to: 66)
		declaredAt: (49 to: 53).
	(year _ [
	(anExperitaionDate
		cover: (104 to: 120)
		declaredAt: (28 to: 44)) second ] valueCoveringAll:
		{122 to: 127})
		cover: (97 to: 100)
		declaredAt: (55 to: 58).
	[
	(self coverAll:
		{133 to: 136}) assertOnlyNumberCharacters:
		(month
			cover: (166 to: 170)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{138 to: 164}.
	[
	(self coverAll:
		{175 to: 178}) assertOnlyNumberCharacters:
		(year
			cover: (208 to: 211)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{180 to: 206}.
	[
	(self coverAll:
		{215 to: 218}) assertValidMonth:
		(month
			cover: (238 to: 242)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{220 to: 236}.
	[
	(self coverAll:
		{247 to: 250}) assertValidYear:
		(year
			cover: (269 to: 272)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{252 to: 267}.! !
!Behavior method!
assertOnlyNumberCharacters: aString
	[
	(aString
		cover: (38 to: 44)
		declaredAt: (29 to: 35)) do: [ :aCharacter |
		[
		[
		[
		([
		(aCharacter
			cover: (68 to: 77)
			declaredAt: (52 to: 61)) asString ] valueCoveringAll:
			{79 to: 86}) asNumber ] valueCoveringAll:
			{88 to: 95} ]
			on:
				(Error
					cover: (102 to: 106)
					declaredAt: (102 to: 106))
			do: [
				[
				(self coverAll:
					{113 to: 116}) error:
					([
					(CreditCard
						cover: (125 to: 134)
						declaredAt: (125 to: 134)) invalidCardExpirationDate ] valueCoveringAll:
						{136 to: 160}) ] valueCoveringAll:
					{118 to: 123} ]] valueCoveringAll:
			{98 to: 100. 108 to: 110} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
assertValidMonth: aString
	[
	([
	([
	([
	(aString
		cover: (31 to: 37)
		declaredAt: (19 to: 25)) size ] valueCoveringAll:
		{39 to: 42}) =
		(2 coverAll:
			{46 to: 46}) ] valueCoveringAll:
		{44 to: 44}) and:
		([
		([
		([
		(aString
			cover: (55 to: 61)
			declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
			{63 to: 70}) >=
			(1 coverAll:
				{75 to: 75}) ] valueCoveringAll:
			{72 to: 73}) and:
			([
			([
			(aString
				cover: (82 to: 88)
				declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
				{90 to: 97}) <=
				(12 coverAll:
					{102 to: 103}) ] valueCoveringAll:
				{99 to: 100}) ] valueCoveringAll:
			{77 to: 80}) ] valueCoveringAll:
		{49 to: 52}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			(CreditCard
				cover: (130 to: 139)
				declaredAt: (130 to: 139)) invalidCardExpirationDate ] valueCoveringAll:
				{141 to: 165}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{108 to: 115}.! !
!Behavior method!
assertValidYear: aString
	[
	([
	([
	(aString
		cover: (28 to: 34)
		declaredAt: (18 to: 24)) size ] valueCoveringAll:
		{36 to: 39}) =
		(4 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifFalse: [
		[
		(self coverAll:
			{56 to: 59}) error:
			([
			(CreditCard
				cover: (68 to: 77)
				declaredAt: (68 to: 77)) invalidCardExpirationDate ] valueCoveringAll:
				{79 to: 103}) ] valueCoveringAll:
			{61 to: 66} ]] valueCoveringAll:
		{46 to: 53}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard
	[
	([
	(aCart
		cover: (55 to: 59)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{61 to: 67}) ifTrue: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			(Cashier
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) emptyCartError ] valueCoveringAll:
				{98 to: 111}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 75}.
	[
	(self coverAll:
		{116 to: 119}) assertNotExpiredCreditCard:
		(aCreditCard
			cover: (149 to: 159)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{121 to: 147}.
	^ [
	(aCart
		cover: (167 to: 171)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{173 to: 184}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 13:31:50'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 13:31:50'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 13:31:50'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
assertNotExpiredCreditCard: aCreditCard
	| actualDate |
	(actualDate _ [
	(Date
		cover: (71 to: 74)
		declaredAt: (71 to: 74)) today ] valueCoveringAll:
		{76 to: 80})
		cover: (57 to: 66)
		declaredAt: (44 to: 53).
	[
	([
	([
	(actualDate
		cover: (85 to: 94)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{96 to: 105}) >
		([
		([
		(aCreditCard
			cover: (109 to: 119)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{121 to: 134}) asNumber ] valueCoveringAll:
			{136 to: 143}) ] valueCoveringAll:
		{107 to: 107}) ifTrue: [
		[
		(self coverAll:
			{154 to: 157}) error:
			([
			(Cashier
				cover: (167 to: 173)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{175 to: 190}) ] valueCoveringAll:
			{159 to: 164} ]] valueCoveringAll:
		{145 to: 151}.
	[
	([
	([
	([
	(actualDate
		cover: (197 to: 206)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{208 to: 217}) =
		([
		([
		(aCreditCard
			cover: (221 to: 231)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{233 to: 246}) asNumber ] valueCoveringAll:
			{248 to: 255}) ] valueCoveringAll:
		{219 to: 219}) and:
		([
		([
		(actualDate
			cover: (262 to: 271)
			declaredAt: (44 to: 53)) monthIndex ] valueCoveringAll:
			{273 to: 282}) >
			([
			([
			(aCreditCard
				cover: (287 to: 297)
				declaredAt: (29 to: 39)) expirationMonth ] valueCoveringAll:
				{299 to: 313}) asNumber ] valueCoveringAll:
				{315 to: 322}) ] valueCoveringAll:
			{285 to: 285}) ] valueCoveringAll:
		{257 to: 260}) ifTrue: [
		[
		(self coverAll:
			{335 to: 338}) error:
			([
			(Cashier
				cover: (348 to: 354)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{356 to: 371}) ] valueCoveringAll:
			{340 to: 345} ]] valueCoveringAll:
		{326 to: 332}.! !
!Behavior method!
expirationYear
	^ [
	(expirationYear
		cover: (19 to: 32)
		declaredAt: (19 to: 32)) copy ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
expirationMonth
	^ [
	(expirationMonth
		cover: (20 to: 34)
		declaredAt: (20 to: 34)) copy ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:31:50'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 13:31:50'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 13:31:50'!
PASSED!
!Behavior method!
invalidCardExpirationDate
	^ 'Invalid Expiration Date' coverAll:
		{30 to: 54}.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 13:31:50'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 13:31:50'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 13:31:50'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 13:31:51'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 13:31:51'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 13:31:51'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 13:31:51'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 13:31:51'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:31:51'!
PASSED!

!testRun: #TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 13:31:51'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/14/2021 14:24:51'!
test08DenyCartWithManyBooksGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3. 
	aCart addToCart: ISBNWatkins withQuantity: 3. 
	self assert: aCart priceSummary equals: 0 .! !

!methodRemoval: TestsTusLibros #test08DenyCartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 14:25:56'!
test08DenyCartWithManyBooksGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3. 
	aCart addToCart: ISBNWatkins withQuantity: 3. 
	self assert: aCart priceSummary equals: 0 .!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/14/2021 14:26:45' prior: 50878468!
test02addingBookFromCatalogIsRegistered
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 10.
	
	self assert: aCart size equals: 1.
	self deny:( aCart contains: ISBNCormen withQuantity: 1) ! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 14:26:45'!
FAILURE!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 14:26:45'!
FAILURE!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/14/2021 14:27:03' prior: 50884497!
test02addingBookFromCatalogIsRegistered
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 10.
	
	self assert: aCart size equals: 10.
	self deny:( aCart contains: ISBNCormen withQuantity: 1) ! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 14:27:05'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/10/2021 19:56:39' prior: 50884514!
test02addingBookFromCatalogIsRegistered
	|aCart |
	
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/14/2021 14:28:03'!
test08addingBookFromCatalogIsRegistered
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 10.
	
	self deny:( aCart contains: ISBNCormen withQuantity: 1)! !

!methodRemoval: TestsTusLibros #test08CartWithManyBooksGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 14:28:07'!
test08CartWithManyBooksGivesPriceSummaryCorrectly
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 3. 
	aCart addToCart: ISBNWatkins withQuantity: 3. 
	self assert: aCart priceSummary equals: (CormenPrice * 3) + (WatkinsPrice  * 3) .!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'sb 6/14/2021 14:28:40'!
test08DenyRegisterOneBookHasDifferentQuantityThanRegistered
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 10.
	
	self deny:( aCart contains: ISBNCormen withQuantity: 1)! !

!methodRemoval: TestsTusLibros #test08addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 14:28:40'!
test08addingBookFromCatalogIsRegistered
	|aCart |
	
	aCart:= self createCart.
	aCart addToCart: ISBNCormen withQuantity: 10.
	
	self deny:( aCart contains: ISBNCormen withQuantity: 1)!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'sb 6/14/2021 14:28:43'!
PASSED!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (108 to: 124)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (136 to: 151)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (162 to: 166)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{86 to: 106. 126 to: 134. 153 to: 160}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{86 to: 89})
		assertValidExpirationDate:
			(aCreditCardNumber
				cover: (118 to: 134)
				declaredAt: (23 to: 39))
		Name:
			(aName
				cover: (142 to: 146)
				declaredAt: (77 to: 81))
		andNumber:
			(anExpirationDate
				cover: (159 to: 174)
				declaredAt: (51 to: 66)) ] valueCoveringAll:
		{91 to: 116. 136 to: 140. 148 to: 157}.
	(number _ aCreditCardNumber
		cover: (190 to: 206)
		declaredAt: (23 to: 39))
		cover: (180 to: 185)
		declaredAt: (180 to: 185).
	(expirationMonth _ [
	(anExpirationDate
		cover: (229 to: 244)
		declaredAt: (51 to: 66)) first ] valueCoveringAll:
		{246 to: 250})
		cover: (210 to: 224)
		declaredAt: (210 to: 224).
	(expirationYear _ [
	(anExpirationDate
		cover: (272 to: 287)
		declaredAt: (51 to: 66)) second ] valueCoveringAll:
		{289 to: 294})
		cover: (254 to: 267)
		declaredAt: (254 to: 267).
	(name _ aName
		cover: (306 to: 310)
		declaredAt: (77 to: 81))
		cover: (298 to: 301)
		declaredAt: (298 to: 301).! !
!Behavior method!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate
	[
	(self coverAll:
		{88 to: 91}) assertValidNumber:
		(aCreditCardNumber
			cover: (112 to: 128)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{93 to: 110}.
	[
	(self coverAll:
		{132 to: 135}) assertValidName:
		(aName
			cover: (154 to: 158)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{137 to: 152}.
	[
	(self coverAll:
		{162 to: 165}) assertValidExpirationDate:
		(anExpirationDate
			cover: (194 to: 209)
			declaredAt: (69 to: 84)) ] valueCoveringAll:
		{167 to: 192}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(CreditCard
				cover: (93 to: 102)
				declaredAt: (93 to: 102)) invalidCardNumber ] valueCoveringAll:
				{104 to: 120}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 14:29:59'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(CreditCard
				cover: (64 to: 73)
				declaredAt: (64 to: 73)) invalidCardName ] valueCoveringAll:
				{75 to: 89}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
assertValidExpirationDate: anExperitaionDate
	| month year |
	(month _ [
	(anExperitaionDate
		cover: (71 to: 87)
		declaredAt: (28 to: 44)) first ] valueCoveringAll:
		{89 to: 93})
		cover: (62 to: 66)
		declaredAt: (49 to: 53).
	(year _ [
	(anExperitaionDate
		cover: (104 to: 120)
		declaredAt: (28 to: 44)) second ] valueCoveringAll:
		{122 to: 127})
		cover: (97 to: 100)
		declaredAt: (55 to: 58).
	[
	(self coverAll:
		{133 to: 136}) assertOnlyNumberCharacters:
		(month
			cover: (166 to: 170)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{138 to: 164}.
	[
	(self coverAll:
		{175 to: 178}) assertOnlyNumberCharacters:
		(year
			cover: (208 to: 211)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{180 to: 206}.
	[
	(self coverAll:
		{215 to: 218}) assertValidMonth:
		(month
			cover: (238 to: 242)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{220 to: 236}.
	[
	(self coverAll:
		{247 to: 250}) assertValidYear:
		(year
			cover: (269 to: 272)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{252 to: 267}.! !
!Behavior method!
assertOnlyNumberCharacters: aString
	[
	(aString
		cover: (38 to: 44)
		declaredAt: (29 to: 35)) do: [ :aCharacter |
		[
		[
		[
		([
		(aCharacter
			cover: (68 to: 77)
			declaredAt: (52 to: 61)) asString ] valueCoveringAll:
			{79 to: 86}) asNumber ] valueCoveringAll:
			{88 to: 95} ]
			on:
				(Error
					cover: (102 to: 106)
					declaredAt: (102 to: 106))
			do: [
				[
				(self coverAll:
					{113 to: 116}) error:
					([
					(CreditCard
						cover: (125 to: 134)
						declaredAt: (125 to: 134)) invalidCardExpirationDate ] valueCoveringAll:
						{136 to: 160}) ] valueCoveringAll:
					{118 to: 123} ]] valueCoveringAll:
			{98 to: 100. 108 to: 110} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
assertValidMonth: aString
	[
	([
	([
	([
	(aString
		cover: (31 to: 37)
		declaredAt: (19 to: 25)) size ] valueCoveringAll:
		{39 to: 42}) =
		(2 coverAll:
			{46 to: 46}) ] valueCoveringAll:
		{44 to: 44}) and:
		([
		([
		([
		(aString
			cover: (55 to: 61)
			declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
			{63 to: 70}) >=
			(1 coverAll:
				{75 to: 75}) ] valueCoveringAll:
			{72 to: 73}) and:
			([
			([
			(aString
				cover: (82 to: 88)
				declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
				{90 to: 97}) <=
				(12 coverAll:
					{102 to: 103}) ] valueCoveringAll:
				{99 to: 100}) ] valueCoveringAll:
			{77 to: 80}) ] valueCoveringAll:
		{49 to: 52}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			(CreditCard
				cover: (130 to: 139)
				declaredAt: (130 to: 139)) invalidCardExpirationDate ] valueCoveringAll:
				{141 to: 165}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{108 to: 115}.! !
!Behavior method!
assertValidYear: aString
	[
	([
	([
	(aString
		cover: (28 to: 34)
		declaredAt: (18 to: 24)) size ] valueCoveringAll:
		{36 to: 39}) =
		(4 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifFalse: [
		[
		(self coverAll:
			{56 to: 59}) error:
			([
			(CreditCard
				cover: (68 to: 77)
				declaredAt: (68 to: 77)) invalidCardExpirationDate ] valueCoveringAll:
				{79 to: 103}) ] valueCoveringAll:
			{61 to: 66} ]] valueCoveringAll:
		{46 to: 53}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard
	[
	([
	(aCart
		cover: (55 to: 59)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{61 to: 67}) ifTrue: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			(Cashier
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) emptyCartError ] valueCoveringAll:
				{98 to: 111}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 75}.
	[
	(self coverAll:
		{116 to: 119}) assertNotExpiredCreditCard:
		(aCreditCard
			cover: (149 to: 159)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{121 to: 147}.
	^ [
	(aCart
		cover: (167 to: 171)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{173 to: 184}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 14:29:59'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 14:29:59'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 14:29:59'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
assertNotExpiredCreditCard: aCreditCard
	| actualDate |
	(actualDate _ [
	(Date
		cover: (71 to: 74)
		declaredAt: (71 to: 74)) today ] valueCoveringAll:
		{76 to: 80})
		cover: (57 to: 66)
		declaredAt: (44 to: 53).
	[
	([
	([
	(actualDate
		cover: (85 to: 94)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{96 to: 105}) >
		([
		([
		(aCreditCard
			cover: (109 to: 119)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{121 to: 134}) asNumber ] valueCoveringAll:
			{136 to: 143}) ] valueCoveringAll:
		{107 to: 107}) ifTrue: [
		[
		(self coverAll:
			{154 to: 157}) error:
			([
			(Cashier
				cover: (167 to: 173)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{175 to: 190}) ] valueCoveringAll:
			{159 to: 164} ]] valueCoveringAll:
		{145 to: 151}.
	[
	([
	([
	([
	(actualDate
		cover: (197 to: 206)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{208 to: 217}) =
		([
		([
		(aCreditCard
			cover: (221 to: 231)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{233 to: 246}) asNumber ] valueCoveringAll:
			{248 to: 255}) ] valueCoveringAll:
		{219 to: 219}) and:
		([
		([
		(actualDate
			cover: (262 to: 271)
			declaredAt: (44 to: 53)) monthIndex ] valueCoveringAll:
			{273 to: 282}) >
			([
			([
			(aCreditCard
				cover: (287 to: 297)
				declaredAt: (29 to: 39)) expirationMonth ] valueCoveringAll:
				{299 to: 313}) asNumber ] valueCoveringAll:
				{315 to: 322}) ] valueCoveringAll:
			{285 to: 285}) ] valueCoveringAll:
		{257 to: 260}) ifTrue: [
		[
		(self coverAll:
			{335 to: 338}) error:
			([
			(Cashier
				cover: (348 to: 354)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{356 to: 371}) ] valueCoveringAll:
			{340 to: 345} ]] valueCoveringAll:
		{326 to: 332}.! !
!Behavior method!
expirationYear
	^ [
	(expirationYear
		cover: (19 to: 32)
		declaredAt: (19 to: 32)) copy ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
expirationMonth
	^ [
	(expirationMonth
		cover: (20 to: 34)
		declaredAt: (20 to: 34)) copy ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 14:29:59'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 14:29:59'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 14:29:59'!
PASSED!
!Behavior method!
invalidCardExpirationDate
	^ 'Invalid Expiration Date' coverAll:
		{30 to: 54}.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 14:29:59'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 14:29:59'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 14:29:59'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 14:29:59'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 14:29:59'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 14:29:59'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 14:29:59'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 14:29:59'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 14:29:59'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'sb 6/14/2021 14:29:59'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 14:32:17' prior: 50881542!
assertNotExpiredCreditCard: aCreditCard 
	|actualDate|
	actualDate := Date today. 
	actualDate yearNumber > aCreditCard expirationYear asNumber ifTrue: [self error: 	Cashier expiredCardError] .
	(actualDate yearNumber = aCreditCard expirationYear asNumber and: actualDate monthIndex  > aCreditCard expirationMonth asNumber ) ifTrue: [self error: 	Cashier expiredCardError] 
	 ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 14:34:01' prior: 50885083!
assertNotExpiredCreditCard: aCreditCard 
	|actualDate|
	actualDate := Date today. 
	actualDate yearNumber > aCreditCard expirationYear asNumber ifTrue: [self error: 	Cashier expiredCardError] .
	(actualDate yearNumber = aCreditCard expirationYear asNumber and: actualDate monthIndex  >= aCreditCard expirationMonth asNumber ) ifTrue: [self error: 	Cashier expiredCardError] 
	 ! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 14:37:19'!
test05CannotCheckoutCartWithExpiredMonth
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCart addToCart: ISBNWatkins withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 14:37:32'!
test03CannotCheckoutWithExpiredCardYear
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]

	
	! !

!methodRemoval: TestsTusLibros #test03CannotCheckoutWithExpiredCard stamp: 'sb 6/14/2021 14:37:32'!
test03CannotCheckoutWithExpiredCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]

	
	!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 14:38:56'!
createExpiredCreditCardYear
	^ CreditCard withNumber: validCardNumber expiring: {'12'.'1492'} andName: validName.  ! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 14:38:56' prior: 50885127!
test03CannotCheckoutWithExpiredCardYear
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCardYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]

	
	! !

!methodRemoval: TestsTusLibros #createExpiredCreditCard stamp: 'sb 6/14/2021 14:38:56'!
createExpiredCreditCard
	^ CreditCard withNumber: validCardNumber expiring: {'12'.'1492'} andName: validName.  !

	year := Date today yearNumber asString!

|month year|
	month := ('0' , Date today monthIndex asString).
	month := month copyFrom: (month size - 1)  to: month size .
	month!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 14:42:52'!
createExpiredCreditCardMonth
	|month year|
	month := ('0' , Date today monthIndex asString).
	month := month copyFrom: (month size - 1)  to: month size .
	year := Date today yearNumber asString .
	^ CreditCard withNumber: validCardNumber expiring: { month . year } andName: validName.  ! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredMonth stamp: 'sb 6/14/2021 14:43:14'!
PASSED!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (108 to: 124)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (136 to: 151)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (162 to: 166)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{86 to: 106. 126 to: 134. 153 to: 160}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{86 to: 89})
		assertValidExpirationDate:
			(aCreditCardNumber
				cover: (118 to: 134)
				declaredAt: (23 to: 39))
		Name:
			(aName
				cover: (142 to: 146)
				declaredAt: (77 to: 81))
		andNumber:
			(anExpirationDate
				cover: (159 to: 174)
				declaredAt: (51 to: 66)) ] valueCoveringAll:
		{91 to: 116. 136 to: 140. 148 to: 157}.
	(number _ aCreditCardNumber
		cover: (190 to: 206)
		declaredAt: (23 to: 39))
		cover: (180 to: 185)
		declaredAt: (180 to: 185).
	(expirationMonth _ [
	(anExpirationDate
		cover: (229 to: 244)
		declaredAt: (51 to: 66)) first ] valueCoveringAll:
		{246 to: 250})
		cover: (210 to: 224)
		declaredAt: (210 to: 224).
	(expirationYear _ [
	(anExpirationDate
		cover: (272 to: 287)
		declaredAt: (51 to: 66)) second ] valueCoveringAll:
		{289 to: 294})
		cover: (254 to: 267)
		declaredAt: (254 to: 267).
	(name _ aName
		cover: (306 to: 310)
		declaredAt: (77 to: 81))
		cover: (298 to: 301)
		declaredAt: (298 to: 301).! !
!Behavior method!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate
	[
	(self coverAll:
		{88 to: 91}) assertValidNumber:
		(aCreditCardNumber
			cover: (112 to: 128)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{93 to: 110}.
	[
	(self coverAll:
		{132 to: 135}) assertValidName:
		(aName
			cover: (154 to: 158)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{137 to: 152}.
	[
	(self coverAll:
		{162 to: 165}) assertValidExpirationDate:
		(anExpirationDate
			cover: (194 to: 209)
			declaredAt: (69 to: 84)) ] valueCoveringAll:
		{167 to: 192}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(CreditCard
				cover: (93 to: 102)
				declaredAt: (93 to: 102)) invalidCardNumber ] valueCoveringAll:
				{104 to: 120}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 14:43:18'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(CreditCard
				cover: (64 to: 73)
				declaredAt: (64 to: 73)) invalidCardName ] valueCoveringAll:
				{75 to: 89}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
assertValidExpirationDate: anExperitaionDate
	| month year |
	(month _ [
	(anExperitaionDate
		cover: (71 to: 87)
		declaredAt: (28 to: 44)) first ] valueCoveringAll:
		{89 to: 93})
		cover: (62 to: 66)
		declaredAt: (49 to: 53).
	(year _ [
	(anExperitaionDate
		cover: (104 to: 120)
		declaredAt: (28 to: 44)) second ] valueCoveringAll:
		{122 to: 127})
		cover: (97 to: 100)
		declaredAt: (55 to: 58).
	[
	(self coverAll:
		{133 to: 136}) assertOnlyNumberCharacters:
		(month
			cover: (166 to: 170)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{138 to: 164}.
	[
	(self coverAll:
		{175 to: 178}) assertOnlyNumberCharacters:
		(year
			cover: (208 to: 211)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{180 to: 206}.
	[
	(self coverAll:
		{215 to: 218}) assertValidMonth:
		(month
			cover: (238 to: 242)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{220 to: 236}.
	[
	(self coverAll:
		{247 to: 250}) assertValidYear:
		(year
			cover: (269 to: 272)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{252 to: 267}.! !
!Behavior method!
assertOnlyNumberCharacters: aString
	[
	(aString
		cover: (38 to: 44)
		declaredAt: (29 to: 35)) do: [ :aCharacter |
		[
		[
		[
		([
		(aCharacter
			cover: (68 to: 77)
			declaredAt: (52 to: 61)) asString ] valueCoveringAll:
			{79 to: 86}) asNumber ] valueCoveringAll:
			{88 to: 95} ]
			on:
				(Error
					cover: (102 to: 106)
					declaredAt: (102 to: 106))
			do: [
				[
				(self coverAll:
					{113 to: 116}) error:
					([
					(CreditCard
						cover: (125 to: 134)
						declaredAt: (125 to: 134)) invalidCardExpirationDate ] valueCoveringAll:
						{136 to: 160}) ] valueCoveringAll:
					{118 to: 123} ]] valueCoveringAll:
			{98 to: 100. 108 to: 110} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
assertValidMonth: aString
	[
	([
	([
	([
	(aString
		cover: (31 to: 37)
		declaredAt: (19 to: 25)) size ] valueCoveringAll:
		{39 to: 42}) =
		(2 coverAll:
			{46 to: 46}) ] valueCoveringAll:
		{44 to: 44}) and:
		([
		([
		([
		(aString
			cover: (55 to: 61)
			declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
			{63 to: 70}) >=
			(1 coverAll:
				{75 to: 75}) ] valueCoveringAll:
			{72 to: 73}) and:
			([
			([
			(aString
				cover: (82 to: 88)
				declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
				{90 to: 97}) <=
				(12 coverAll:
					{102 to: 103}) ] valueCoveringAll:
				{99 to: 100}) ] valueCoveringAll:
			{77 to: 80}) ] valueCoveringAll:
		{49 to: 52}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			(CreditCard
				cover: (130 to: 139)
				declaredAt: (130 to: 139)) invalidCardExpirationDate ] valueCoveringAll:
				{141 to: 165}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{108 to: 115}.! !
!Behavior method!
assertValidYear: aString
	[
	([
	([
	(aString
		cover: (28 to: 34)
		declaredAt: (18 to: 24)) size ] valueCoveringAll:
		{36 to: 39}) =
		(4 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifFalse: [
		[
		(self coverAll:
			{56 to: 59}) error:
			([
			(CreditCard
				cover: (68 to: 77)
				declaredAt: (68 to: 77)) invalidCardExpirationDate ] valueCoveringAll:
				{79 to: 103}) ] valueCoveringAll:
			{61 to: 66} ]] valueCoveringAll:
		{46 to: 53}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard
	[
	([
	(aCart
		cover: (55 to: 59)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{61 to: 67}) ifTrue: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			(Cashier
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) emptyCartError ] valueCoveringAll:
				{98 to: 111}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 75}.
	[
	(self coverAll:
		{116 to: 119}) assertNotExpiredCreditCard:
		(aCreditCard
			cover: (149 to: 159)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{121 to: 147}.
	^ [
	(aCart
		cover: (167 to: 171)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{173 to: 184}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 14:43:19'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 14:43:19'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 14:43:19'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
assertNotExpiredCreditCard: aCreditCard
	| actualDate |
	(actualDate _ [
	(Date
		cover: (71 to: 74)
		declaredAt: (71 to: 74)) today ] valueCoveringAll:
		{76 to: 80})
		cover: (57 to: 66)
		declaredAt: (44 to: 53).
	[
	([
	([
	(actualDate
		cover: (85 to: 94)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{96 to: 105}) >
		([
		([
		(aCreditCard
			cover: (109 to: 119)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{121 to: 134}) asNumber ] valueCoveringAll:
			{136 to: 143}) ] valueCoveringAll:
		{107 to: 107}) ifTrue: [
		[
		(self coverAll:
			{154 to: 157}) error:
			([
			(Cashier
				cover: (167 to: 173)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{175 to: 190}) ] valueCoveringAll:
			{159 to: 164} ]] valueCoveringAll:
		{145 to: 151}.
	[
	([
	([
	([
	(actualDate
		cover: (197 to: 206)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{208 to: 217}) =
		([
		([
		(aCreditCard
			cover: (221 to: 231)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{233 to: 246}) asNumber ] valueCoveringAll:
			{248 to: 255}) ] valueCoveringAll:
		{219 to: 219}) and:
		([
		([
		(actualDate
			cover: (262 to: 271)
			declaredAt: (44 to: 53)) monthIndex ] valueCoveringAll:
			{273 to: 282}) >=
			([
			([
			(aCreditCard
				cover: (288 to: 298)
				declaredAt: (29 to: 39)) expirationMonth ] valueCoveringAll:
				{300 to: 314}) asNumber ] valueCoveringAll:
				{316 to: 323}) ] valueCoveringAll:
			{285 to: 286}) ] valueCoveringAll:
		{257 to: 260}) ifTrue: [
		[
		(self coverAll:
			{336 to: 339}) error:
			([
			(Cashier
				cover: (349 to: 355)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{357 to: 372}) ] valueCoveringAll:
			{341 to: 346} ]] valueCoveringAll:
		{327 to: 333}.! !
!Behavior method!
expirationYear
	^ [
	(expirationYear
		cover: (19 to: 32)
		declaredAt: (19 to: 32)) copy ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
expirationMonth
	^ [
	(expirationMonth
		cover: (20 to: 34)
		declaredAt: (20 to: 34)) copy ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 14:43:19'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 14:43:19'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCardYear stamp: 'sb 6/14/2021 14:43:19'!
PASSED!
!Behavior method!
invalidCardExpirationDate
	^ 'Invalid Expiration Date' coverAll:
		{30 to: 54}.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 14:43:19'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 14:43:19'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 14:43:19'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 14:43:19'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 14:43:19'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredMonth stamp: 'sb 6/14/2021 14:43:19'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 14:43:19'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 14:43:19'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 14:43:19'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 14:43:19'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'sb 6/14/2021 14:43:19'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 14:43:58' prior: 50885113!
test05CannotCheckoutCartWithExpiredMonth
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self  ) equals: aCart .

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 14:44:18' prior: 50885715!
test05CannotCheckoutCartWithExpiredMonth
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCardMonth ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]


	
	! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredMonth stamp: 'sb 6/14/2021 14:44:20'!
PASSED!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (108 to: 124)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (136 to: 151)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (162 to: 166)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{86 to: 106. 126 to: 134. 153 to: 160}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{86 to: 89})
		assertValidExpirationDate:
			(aCreditCardNumber
				cover: (118 to: 134)
				declaredAt: (23 to: 39))
		Name:
			(aName
				cover: (142 to: 146)
				declaredAt: (77 to: 81))
		andNumber:
			(anExpirationDate
				cover: (159 to: 174)
				declaredAt: (51 to: 66)) ] valueCoveringAll:
		{91 to: 116. 136 to: 140. 148 to: 157}.
	(number _ aCreditCardNumber
		cover: (190 to: 206)
		declaredAt: (23 to: 39))
		cover: (180 to: 185)
		declaredAt: (180 to: 185).
	(expirationMonth _ [
	(anExpirationDate
		cover: (229 to: 244)
		declaredAt: (51 to: 66)) first ] valueCoveringAll:
		{246 to: 250})
		cover: (210 to: 224)
		declaredAt: (210 to: 224).
	(expirationYear _ [
	(anExpirationDate
		cover: (272 to: 287)
		declaredAt: (51 to: 66)) second ] valueCoveringAll:
		{289 to: 294})
		cover: (254 to: 267)
		declaredAt: (254 to: 267).
	(name _ aName
		cover: (306 to: 310)
		declaredAt: (77 to: 81))
		cover: (298 to: 301)
		declaredAt: (298 to: 301).! !
!Behavior method!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate
	[
	(self coverAll:
		{88 to: 91}) assertValidNumber:
		(aCreditCardNumber
			cover: (112 to: 128)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{93 to: 110}.
	[
	(self coverAll:
		{132 to: 135}) assertValidName:
		(aName
			cover: (154 to: 158)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{137 to: 152}.
	[
	(self coverAll:
		{162 to: 165}) assertValidExpirationDate:
		(anExpirationDate
			cover: (194 to: 209)
			declaredAt: (69 to: 84)) ] valueCoveringAll:
		{167 to: 192}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(CreditCard
				cover: (93 to: 102)
				declaredAt: (93 to: 102)) invalidCardNumber ] valueCoveringAll:
				{104 to: 120}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 14:44:25'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(CreditCard
				cover: (64 to: 73)
				declaredAt: (64 to: 73)) invalidCardName ] valueCoveringAll:
				{75 to: 89}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
assertValidExpirationDate: anExperitaionDate
	| month year |
	(month _ [
	(anExperitaionDate
		cover: (71 to: 87)
		declaredAt: (28 to: 44)) first ] valueCoveringAll:
		{89 to: 93})
		cover: (62 to: 66)
		declaredAt: (49 to: 53).
	(year _ [
	(anExperitaionDate
		cover: (104 to: 120)
		declaredAt: (28 to: 44)) second ] valueCoveringAll:
		{122 to: 127})
		cover: (97 to: 100)
		declaredAt: (55 to: 58).
	[
	(self coverAll:
		{133 to: 136}) assertOnlyNumberCharacters:
		(month
			cover: (166 to: 170)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{138 to: 164}.
	[
	(self coverAll:
		{175 to: 178}) assertOnlyNumberCharacters:
		(year
			cover: (208 to: 211)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{180 to: 206}.
	[
	(self coverAll:
		{215 to: 218}) assertValidMonth:
		(month
			cover: (238 to: 242)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{220 to: 236}.
	[
	(self coverAll:
		{247 to: 250}) assertValidYear:
		(year
			cover: (269 to: 272)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{252 to: 267}.! !
!Behavior method!
assertOnlyNumberCharacters: aString
	[
	(aString
		cover: (38 to: 44)
		declaredAt: (29 to: 35)) do: [ :aCharacter |
		[
		[
		[
		([
		(aCharacter
			cover: (68 to: 77)
			declaredAt: (52 to: 61)) asString ] valueCoveringAll:
			{79 to: 86}) asNumber ] valueCoveringAll:
			{88 to: 95} ]
			on:
				(Error
					cover: (102 to: 106)
					declaredAt: (102 to: 106))
			do: [
				[
				(self coverAll:
					{113 to: 116}) error:
					([
					(CreditCard
						cover: (125 to: 134)
						declaredAt: (125 to: 134)) invalidCardExpirationDate ] valueCoveringAll:
						{136 to: 160}) ] valueCoveringAll:
					{118 to: 123} ]] valueCoveringAll:
			{98 to: 100. 108 to: 110} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
assertValidMonth: aString
	[
	([
	([
	([
	(aString
		cover: (31 to: 37)
		declaredAt: (19 to: 25)) size ] valueCoveringAll:
		{39 to: 42}) =
		(2 coverAll:
			{46 to: 46}) ] valueCoveringAll:
		{44 to: 44}) and:
		([
		([
		([
		(aString
			cover: (55 to: 61)
			declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
			{63 to: 70}) >=
			(1 coverAll:
				{75 to: 75}) ] valueCoveringAll:
			{72 to: 73}) and:
			([
			([
			(aString
				cover: (82 to: 88)
				declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
				{90 to: 97}) <=
				(12 coverAll:
					{102 to: 103}) ] valueCoveringAll:
				{99 to: 100}) ] valueCoveringAll:
			{77 to: 80}) ] valueCoveringAll:
		{49 to: 52}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			(CreditCard
				cover: (130 to: 139)
				declaredAt: (130 to: 139)) invalidCardExpirationDate ] valueCoveringAll:
				{141 to: 165}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{108 to: 115}.! !
!Behavior method!
assertValidYear: aString
	[
	([
	([
	(aString
		cover: (28 to: 34)
		declaredAt: (18 to: 24)) size ] valueCoveringAll:
		{36 to: 39}) =
		(4 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifFalse: [
		[
		(self coverAll:
			{56 to: 59}) error:
			([
			(CreditCard
				cover: (68 to: 77)
				declaredAt: (68 to: 77)) invalidCardExpirationDate ] valueCoveringAll:
				{79 to: 103}) ] valueCoveringAll:
			{61 to: 66} ]] valueCoveringAll:
		{46 to: 53}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard
	[
	([
	(aCart
		cover: (55 to: 59)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{61 to: 67}) ifTrue: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			(Cashier
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) emptyCartError ] valueCoveringAll:
				{98 to: 111}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 75}.
	[
	(self coverAll:
		{116 to: 119}) assertNotExpiredCreditCard:
		(aCreditCard
			cover: (149 to: 159)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{121 to: 147}.
	^ [
	(aCart
		cover: (167 to: 171)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{173 to: 184}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 14:44:25'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 14:44:25'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 14:44:25'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
assertNotExpiredCreditCard: aCreditCard
	| actualDate |
	(actualDate _ [
	(Date
		cover: (71 to: 74)
		declaredAt: (71 to: 74)) today ] valueCoveringAll:
		{76 to: 80})
		cover: (57 to: 66)
		declaredAt: (44 to: 53).
	[
	([
	([
	(actualDate
		cover: (85 to: 94)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{96 to: 105}) >
		([
		([
		(aCreditCard
			cover: (109 to: 119)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{121 to: 134}) asNumber ] valueCoveringAll:
			{136 to: 143}) ] valueCoveringAll:
		{107 to: 107}) ifTrue: [
		[
		(self coverAll:
			{154 to: 157}) error:
			([
			(Cashier
				cover: (167 to: 173)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{175 to: 190}) ] valueCoveringAll:
			{159 to: 164} ]] valueCoveringAll:
		{145 to: 151}.
	[
	([
	([
	([
	(actualDate
		cover: (197 to: 206)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{208 to: 217}) =
		([
		([
		(aCreditCard
			cover: (221 to: 231)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{233 to: 246}) asNumber ] valueCoveringAll:
			{248 to: 255}) ] valueCoveringAll:
		{219 to: 219}) and:
		([
		([
		(actualDate
			cover: (262 to: 271)
			declaredAt: (44 to: 53)) monthIndex ] valueCoveringAll:
			{273 to: 282}) >=
			([
			([
			(aCreditCard
				cover: (288 to: 298)
				declaredAt: (29 to: 39)) expirationMonth ] valueCoveringAll:
				{300 to: 314}) asNumber ] valueCoveringAll:
				{316 to: 323}) ] valueCoveringAll:
			{285 to: 286}) ] valueCoveringAll:
		{257 to: 260}) ifTrue: [
		[
		(self coverAll:
			{336 to: 339}) error:
			([
			(Cashier
				cover: (349 to: 355)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{357 to: 372}) ] valueCoveringAll:
			{341 to: 346} ]] valueCoveringAll:
		{327 to: 333}.! !
!Behavior method!
expirationYear
	^ [
	(expirationYear
		cover: (19 to: 32)
		declaredAt: (19 to: 32)) copy ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
expirationMonth
	^ [
	(expirationMonth
		cover: (20 to: 34)
		declaredAt: (20 to: 34)) copy ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 14:44:25'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 14:44:25'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCardYear stamp: 'sb 6/14/2021 14:44:25'!
PASSED!
!Behavior method!
invalidCardExpirationDate
	^ 'Invalid Expiration Date' coverAll:
		{30 to: 54}.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 14:44:25'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 14:44:25'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 14:44:25'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 14:44:25'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 14:44:25'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredMonth stamp: 'sb 6/14/2021 14:44:25'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 14:44:25'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 14:44:25'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 14:44:25'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 14:44:25'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'sb 6/14/2021 14:44:25'!
PASSED!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	^ [
	([
	(self coverAll:
		{77 to: 80}) new ] valueCoveringAll:
		{82 to: 84})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (108 to: 124)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (136 to: 151)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (162 to: 166)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{86 to: 106. 126 to: 134. 153 to: 160}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{86 to: 89})
		assertValidExpirationDate:
			(aCreditCardNumber
				cover: (118 to: 134)
				declaredAt: (23 to: 39))
		Name:
			(aName
				cover: (142 to: 146)
				declaredAt: (77 to: 81))
		andNumber:
			(anExpirationDate
				cover: (159 to: 174)
				declaredAt: (51 to: 66)) ] valueCoveringAll:
		{91 to: 116. 136 to: 140. 148 to: 157}.
	(number _ aCreditCardNumber
		cover: (190 to: 206)
		declaredAt: (23 to: 39))
		cover: (180 to: 185)
		declaredAt: (180 to: 185).
	(expirationMonth _ [
	(anExpirationDate
		cover: (229 to: 244)
		declaredAt: (51 to: 66)) first ] valueCoveringAll:
		{246 to: 250})
		cover: (210 to: 224)
		declaredAt: (210 to: 224).
	(expirationYear _ [
	(anExpirationDate
		cover: (272 to: 287)
		declaredAt: (51 to: 66)) second ] valueCoveringAll:
		{289 to: 294})
		cover: (254 to: 267)
		declaredAt: (254 to: 267).
	(name _ aName
		cover: (306 to: 310)
		declaredAt: (77 to: 81))
		cover: (298 to: 301)
		declaredAt: (298 to: 301).! !
!Behavior method!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate
	[
	(self coverAll:
		{88 to: 91}) assertValidNumber:
		(aCreditCardNumber
			cover: (112 to: 128)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{93 to: 110}.
	[
	(self coverAll:
		{132 to: 135}) assertValidName:
		(aName
			cover: (154 to: 158)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{137 to: 152}.
	[
	(self coverAll:
		{162 to: 165}) assertValidExpirationDate:
		(anExpirationDate
			cover: (194 to: 209)
			declaredAt: (69 to: 84)) ] valueCoveringAll:
		{167 to: 192}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(CreditCard
				cover: (93 to: 102)
				declaredAt: (93 to: 102)) invalidCardNumber ] valueCoveringAll:
				{104 to: 120}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 14:44:40'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(CreditCard
				cover: (64 to: 73)
				declaredAt: (64 to: 73)) invalidCardName ] valueCoveringAll:
				{75 to: 89}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
assertValidExpirationDate: anExperitaionDate
	| month year |
	(month _ [
	(anExperitaionDate
		cover: (71 to: 87)
		declaredAt: (28 to: 44)) first ] valueCoveringAll:
		{89 to: 93})
		cover: (62 to: 66)
		declaredAt: (49 to: 53).
	(year _ [
	(anExperitaionDate
		cover: (104 to: 120)
		declaredAt: (28 to: 44)) second ] valueCoveringAll:
		{122 to: 127})
		cover: (97 to: 100)
		declaredAt: (55 to: 58).
	[
	(self coverAll:
		{133 to: 136}) assertOnlyNumberCharacters:
		(month
			cover: (166 to: 170)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{138 to: 164}.
	[
	(self coverAll:
		{175 to: 178}) assertOnlyNumberCharacters:
		(year
			cover: (208 to: 211)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{180 to: 206}.
	[
	(self coverAll:
		{215 to: 218}) assertValidMonth:
		(month
			cover: (238 to: 242)
			declaredAt: (49 to: 53)) ] valueCoveringAll:
		{220 to: 236}.
	[
	(self coverAll:
		{247 to: 250}) assertValidYear:
		(year
			cover: (269 to: 272)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{252 to: 267}.! !
!Behavior method!
assertOnlyNumberCharacters: aString
	[
	(aString
		cover: (38 to: 44)
		declaredAt: (29 to: 35)) do: [ :aCharacter |
		[
		[
		[
		([
		(aCharacter
			cover: (68 to: 77)
			declaredAt: (52 to: 61)) asString ] valueCoveringAll:
			{79 to: 86}) asNumber ] valueCoveringAll:
			{88 to: 95} ]
			on:
				(Error
					cover: (102 to: 106)
					declaredAt: (102 to: 106))
			do: [
				[
				(self coverAll:
					{113 to: 116}) error:
					([
					(CreditCard
						cover: (125 to: 134)
						declaredAt: (125 to: 134)) invalidCardExpirationDate ] valueCoveringAll:
						{136 to: 160}) ] valueCoveringAll:
					{118 to: 123} ]] valueCoveringAll:
			{98 to: 100. 108 to: 110} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
assertValidMonth: aString
	[
	([
	([
	([
	(aString
		cover: (31 to: 37)
		declaredAt: (19 to: 25)) size ] valueCoveringAll:
		{39 to: 42}) =
		(2 coverAll:
			{46 to: 46}) ] valueCoveringAll:
		{44 to: 44}) and:
		([
		([
		([
		(aString
			cover: (55 to: 61)
			declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
			{63 to: 70}) >=
			(1 coverAll:
				{75 to: 75}) ] valueCoveringAll:
			{72 to: 73}) and:
			([
			([
			(aString
				cover: (82 to: 88)
				declaredAt: (19 to: 25)) asNumber ] valueCoveringAll:
				{90 to: 97}) <=
				(12 coverAll:
					{102 to: 103}) ] valueCoveringAll:
				{99 to: 100}) ] valueCoveringAll:
			{77 to: 80}) ] valueCoveringAll:
		{49 to: 52}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) error:
			([
			(CreditCard
				cover: (130 to: 139)
				declaredAt: (130 to: 139)) invalidCardExpirationDate ] valueCoveringAll:
				{141 to: 165}) ] valueCoveringAll:
			{123 to: 128} ]] valueCoveringAll:
		{108 to: 115}.! !
!Behavior method!
assertValidYear: aString
	[
	([
	([
	(aString
		cover: (28 to: 34)
		declaredAt: (18 to: 24)) size ] valueCoveringAll:
		{36 to: 39}) =
		(4 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{41 to: 41}) ifFalse: [
		[
		(self coverAll:
			{56 to: 59}) error:
			([
			(CreditCard
				cover: (68 to: 77)
				declaredAt: (68 to: 77)) invalidCardExpirationDate ] valueCoveringAll:
				{79 to: 103}) ] valueCoveringAll:
			{61 to: 66} ]] valueCoveringAll:
		{46 to: 53}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard
	[
	([
	(aCart
		cover: (55 to: 59)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{61 to: 67}) ifTrue: [
		[
		(self coverAll:
			{78 to: 81}) error:
			([
			(Cashier
				cover: (90 to: 96)
				declaredAt: (90 to: 96)) emptyCartError ] valueCoveringAll:
				{98 to: 111}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{69 to: 75}.
	[
	(self coverAll:
		{116 to: 119}) assertNotExpiredCreditCard:
		(aCreditCard
			cover: (149 to: 159)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{121 to: 147}.
	^ [
	(aCart
		cover: (167 to: 171)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{173 to: 184}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 14:44:40'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 14:44:40'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 14:44:40'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
assertNotExpiredCreditCard: aCreditCard
	| actualDate |
	(actualDate _ [
	(Date
		cover: (71 to: 74)
		declaredAt: (71 to: 74)) today ] valueCoveringAll:
		{76 to: 80})
		cover: (57 to: 66)
		declaredAt: (44 to: 53).
	[
	([
	([
	(actualDate
		cover: (85 to: 94)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{96 to: 105}) >
		([
		([
		(aCreditCard
			cover: (109 to: 119)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{121 to: 134}) asNumber ] valueCoveringAll:
			{136 to: 143}) ] valueCoveringAll:
		{107 to: 107}) ifTrue: [
		[
		(self coverAll:
			{154 to: 157}) error:
			([
			(Cashier
				cover: (167 to: 173)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{175 to: 190}) ] valueCoveringAll:
			{159 to: 164} ]] valueCoveringAll:
		{145 to: 151}.
	[
	([
	([
	([
	(actualDate
		cover: (197 to: 206)
		declaredAt: (44 to: 53)) yearNumber ] valueCoveringAll:
		{208 to: 217}) =
		([
		([
		(aCreditCard
			cover: (221 to: 231)
			declaredAt: (29 to: 39)) expirationYear ] valueCoveringAll:
			{233 to: 246}) asNumber ] valueCoveringAll:
			{248 to: 255}) ] valueCoveringAll:
		{219 to: 219}) and:
		([
		([
		(actualDate
			cover: (262 to: 271)
			declaredAt: (44 to: 53)) monthIndex ] valueCoveringAll:
			{273 to: 282}) >=
			([
			([
			(aCreditCard
				cover: (288 to: 298)
				declaredAt: (29 to: 39)) expirationMonth ] valueCoveringAll:
				{300 to: 314}) asNumber ] valueCoveringAll:
				{316 to: 323}) ] valueCoveringAll:
			{285 to: 286}) ] valueCoveringAll:
		{257 to: 260}) ifTrue: [
		[
		(self coverAll:
			{336 to: 339}) error:
			([
			(Cashier
				cover: (349 to: 355)
				declaredAt: (167 to: 173)) expiredCardError ] valueCoveringAll:
				{357 to: 372}) ] valueCoveringAll:
			{341 to: 346} ]] valueCoveringAll:
		{327 to: 333}.! !
!Behavior method!
expirationYear
	^ [
	(expirationYear
		cover: (19 to: 32)
		declaredAt: (19 to: 32)) copy ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
expirationMonth
	^ [
	(expirationMonth
		cover: (20 to: 34)
		declaredAt: (20 to: 34)) copy ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 14:44:40'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 14:44:40'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCardYear stamp: 'sb 6/14/2021 14:44:40'!
PASSED!
!Behavior method!
invalidCardExpirationDate
	^ 'Invalid Expiration Date' coverAll:
		{30 to: 54}.! !

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 14:44:40'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 14:44:40'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 14:44:40'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 14:44:40'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 14:44:40'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredMonth stamp: 'sb 6/14/2021 14:44:40'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 14:44:40'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 14:44:40'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 14:44:40'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 14:44:40'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'sb 6/14/2021 14:44:40'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 14:57:23'!
test06CannotCheckoutCartWithCreditCardWithoutFunds
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier  equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 14:57:47' prior: 50886753!
test06CannotCheckoutCartWithCreditCardWithoutFunds
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier creditCardWithoutFundsError equals: anError messageText.
			
			]


	
	! !

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 14:57:53'!
ERROR!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 14:57:53'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 14:58:01'!
createCreditCardWithoutFunds
	self shouldBeImplemented.! !

 '0000000000000000' size!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 14:58:58' prior: 50886795!
createCreditCardWithoutFunds
	^ CreditCard withNumber: '0000000000000000' expiring: validExpiration  andName: validName.! !

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 14:58:59'!
FAILURE!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:02:09' prior: 50879171!
createCashier
	^Cashier new.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'sb 6/14/2021 15:03:09'!
Object subclass: #Cashier
	instanceVariableNames: 'pricelist merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'sb 6/14/2021 15:03:32'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'nil' stamp: 'sb 6/14/2021 15:03:25' overrides: 16896425!
initialize
	merchantProcessor := MerchantProcessor new ! !

Object subclass: #MerchantProcessor
	instanceVariableNames: 'stolenCard fakeCard fundlessCard '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'sb 6/14/2021 15:04:50'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'stolenCard fakeCard fundlessCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'nil' stamp: 'sb 6/14/2021 15:05:23' overrides: 16896425!
initialize 
	fundlessCard  := '0000000000000000'! !
!MerchantProcessor methodsFor: 'nil' stamp: 'sb 6/14/2021 15:07:54'!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount ! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:10:24' prior: 50886852!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:21:50' prior: 50881467!
checkOutCart: aCart usingCreditCard: aCreditCard  
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	self assertNotExpiredCreditCard: aCreditCard .
	merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard  andAmount:  0.
	
	^aCart priceSummary .! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'sb 6/14/2021 15:22:21'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expirationMonth expirationYear expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'sb 6/14/2021 15:22:26' prior: 50881504!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 

	self assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate .

	number := aCreditCardNumber.
	expirationDate := anExpirationDate .
	name := aName.! !

Object subclass: #CreditCard
	instanceVariableNames: 'number name expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'sb 6/14/2021 15:22:51'!
Object subclass: #CreditCard
	instanceVariableNames: 'number name expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: CreditCard #expirationMonth stamp: 'sb 6/14/2021 15:24:52'!
expirationMonth
	^ expirationMonth copy.!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:25:04'!
expirationDate
	^ expirationYear copy.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:25:04' prior: 50885098!
assertNotExpiredCreditCard: aCreditCard 
	|actualDate|
	actualDate := Date today. 
	actualDate yearNumber > aCreditCard expirationDate asNumber ifTrue: [self error: 	Cashier expiredCardError] .
	(actualDate yearNumber = aCreditCard expirationDate asNumber and: actualDate monthIndex  >= aCreditCard expirationMonth asNumber ) ifTrue: [self error: 	Cashier expiredCardError] 
	 ! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:25:04' prior: 50881534!
expirationYear
	^ expirationYear copy.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:25:04' prior: 50886916!
expirationDate
	^ expirationYear copy.! !

!methodRemoval: CreditCard #expirationYear stamp: 'sb 6/14/2021 15:25:04'!
expirationYear
	^ expirationYear copy.!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:25:15' prior: 50886941!
expirationDate
	^ expirationDate  copy! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:26:46' prior: 50886921!
assertNotExpiredCreditCard: aCreditCard 
	|actualDate expirationMonth expirationYear|
	expirationMonth  := aCreditCard expirationDate first asNumber.
	expirationYear := aCreditCard expirationDate second asNumber.
	actualDate := Date today.
	actualDate yearNumber > expirationYear  ifTrue: [self error: 	Cashier expiredCardError] .
	(actualDate yearNumber = expirationYear and: actualDate monthIndex  >= expirationMonth ) ifTrue: [self error: 	Cashier expiredCardError] 
	 ! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCardYear stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredMonth stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 15:26:53'!
FAILURE!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'sb 6/14/2021 15:26:53'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 15:26:53'!
FAILURE!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'sb 6/14/2021 15:27:26'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'sb 6/14/2021 15:27:26'!
PASSED!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'sb 6/14/2021 15:27:26'!
PASSED!

!testRun: #TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'sb 6/14/2021 15:27:26'!
PASSED!

!testRun: #TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'sb 6/14/2021 15:27:26'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'sb 6/14/2021 15:27:30'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'sb 6/14/2021 15:27:30'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'sb 6/14/2021 15:27:30'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'sb 6/14/2021 15:27:30'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'sb 6/14/2021 15:27:30'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'sb 6/14/2021 15:27:30'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'sb 6/14/2021 15:27:30'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'sb 6/14/2021 15:27:30'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:28:13' prior: 50886867!
checkOutCart: aCart usingCreditCard: aCreditCard  
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	self assertNotExpiredCreditCard: aCreditCard .
	merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary .
	
	^aCart priceSummary .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:28:19' prior: 50887090!
checkOutCart: aCart usingCreditCard: aCreditCard  
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	self assertNotExpiredCreditCard: aCreditCard .
	merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary.
	
	^aCart priceSummary .! !

self !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:30:31' prior: 50886860!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 ^ [self error: 'tu vieja']! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:30:52' prior: 50887105!
checkOutCart: aCart usingCreditCard: aCreditCard  
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	self assertNotExpiredCreditCard: aCreditCard .
	merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary value.
	
	^aCart priceSummary .! !

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 15:31:01'!
FAILURE!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 15:31:01'!
FAILURE!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 15:31:16' prior: 50886770!
test06CannotCheckoutCartWithCreditCardWithoutFunds
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'tu vieja' equals: anError messageText.
			
			]


	
	! !

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 15:31:19'!
FAILURE!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 15:31:19'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:32:20' prior: 50887128!
checkOutCart: aCart usingCreditCard: aCreditCard  
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	self assertNotExpiredCreditCard: aCreditCard .
	(merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .! !

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 15:32:39'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 15:33:27' prior: 50887150!
test06CannotCheckoutCartWithCreditCardWithoutFunds
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
			
			]


	
	! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:33:51' prior: 50887120!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 ^ [self error: 'Insufficient funds']! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:34:17' prior: 50887209!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 ^ aCreditCardNumber = fundlessCard ifTrue:[self error: 'Insufficient funds']! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:34:35' prior: 50887218!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCardNumber = fundlessCard ifTrue: [^self error: 'Insufficient funds']! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:34:49' prior: 50887228!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCardNumber = fundlessCard ifTrue: [^[self error: 'Insufficient funds']]! !

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 15:34:54'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 15:35:15'!
test06CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 15:35:24'!
test07CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
			
			]


	
	! !

!methodRemoval: TestsTusLibros #test06CannotCheckoutCartWithStolenCreditCard stamp: 'sb 6/14/2021 15:35:24'!
test06CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
			
			]


	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 15:35:37' prior: 50887267!
test07CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createStolenCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 15:35:48' prior: 50887301!
test07CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createStolenCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
			
			]


	
	! !

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'sb 6/14/2021 15:36:00'!
ERROR!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'sb 6/14/2021 15:36:00'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:36:05'!
createStolenCreditCard
	self shouldBeImplemented.! !

 '00000000000000001'!

 '00000000000000001' size !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:37:08' prior: 50887341!
createStolenCreditCard
		^ CreditCard withNumber: '0000000000000001'  expiring: validExpiration andName: validName.  ! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:37:22' prior: 50886848 overrides: 16896425!
initialize 
	fundlessCard  := '0000000000000000'.
	stolenCard :=  '0000000000000001'  .! !

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'sb 6/14/2021 15:37:25'!
FAILURE!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 15:37:53' prior: 50887318!
test07CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createStolenCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Stolen CreditCard' equals: anError messageText.
			
			]


	
	! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:38:37' prior: 50887238!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCardNumber = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCardNumber = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']]! !

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'sb 6/14/2021 15:38:45'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 15:39:09'!
test07CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 15:39:18'!
test08CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	! !

!methodRemoval: TestsTusLibros #test07CannotCheckoutCartWithFakeCreditCard stamp: 'sb 6/14/2021 15:39:18'!
test07CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'sb 6/14/2021 15:39:21'!
ERROR!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'sb 6/14/2021 15:39:21'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:39:27'!
createFakeCreditCard
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:39:52' prior: 50887453!
createFakeCreditCard
	^ CreditCard withNumber: '0000000000000002' expiring: validExpiration andName: validName.  ! !

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'sb 6/14/2021 15:39:56'!
FAILURE!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:40:12' prior: 50887356 overrides: 16896425!
initialize 
	fundlessCard  := '0000000000000000'.
	stolenCard :=  '0000000000000001'  .
	fakeCard  := '0000000000000002'! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:41:01' prior: 50887383!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCardNumber = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCardNumber = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCardNumber = fakeCard ifTrue: [^[self error: 'Fake CreditCard']]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:41:27' prior: 50887477!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCardNumber = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCardNumber = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCardNumber = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^[]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:41:46' prior: 50887492!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCardNumber = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCardNumber = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCardNumber = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:41:56' prior: 50887507!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCardNumber = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCardNumber = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCardNumber = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^anAmount ! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'sb 6/14/2021 15:43:54' prior: 50887522!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCardNumber = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCardNumber = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCardNumber = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^['OK']! !

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'sb 6/14/2021 15:44:08'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'sb 6/14/2021 15:44:50'!
test09CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'sb 6/14/2021 15:44:53'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 15:44:53'!
PASSED!

!testRun: #TestsTusLibros #test03CannotCheckoutWithExpiredCardYear stamp: 'sb 6/14/2021 15:44:53'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'sb 6/14/2021 15:44:53'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredMonth stamp: 'sb 6/14/2021 15:44:53'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'sb 6/14/2021 15:44:53'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'sb 6/14/2021 15:44:53'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'sb 6/14/2021 15:44:53'!
PASSED!

!testRun: #TestsTusLibros #test09CannotCheckoutCartWithFakeCreditCard stamp: 'sb 6/14/2021 15:44:53'!
PASSED!

----QUIT----(14 June 2021 15:46:08) CuisUniversity-4532.image priorSource: 17556010!

----STARTUP---- (14 June 2021 18:35:02) as C:\Users\alejo\Documents\Cosas Facu\Inge 1\windows64\CuisUniversity-4532.image!


----QUIT----(14 June 2021 18:35:57) CuisUniversity-4532.image priorSource: 17790474!

----STARTUP---- (14 June 2021 18:35:59) as C:\Users\alejo\Documents\Cosas Facu\Inge 1\windows64\CuisUniversity-4532.image!


----QUIT----(14 June 2021 18:37:43) CuisUniversity-4532.image priorSource: 17790685!

----STARTUP---- (14 June 2021 18:37:45) as C:\Users\alejo\Documents\Cosas Facu\Inge 1\windows64\CuisUniversity-4532.image!


FixedGregorianDate today!

FixedGregorianDate today monthOfYear !

FixedGregorianDate today monthOfYear  < FixedGregorianDate yesterday monthOfYear!

May!


May of: 2020 !

FixedGregorianDate today monthOfYear  < May of: 2020  !

FixedGregorianDate today monthOfYear !

FixedGregorianDate May of: 2020  
!

Date today monthOfYear  <  May of: 2020  
!

May of: 2020  monthOfYear!

(May of: 2020 ) monthOfYear!

FixedGregorianDate today monthOfYear  <  (May of: 2020 )!

FixedGregorianDate today monthOfYear  >  (May of: 2020 )  !

!methodRemoval: TestsTusLibros #test04CantCreateCreditCardWithExpirationDateHavingMonthInRange stamp: 'AM 6/14/2021 18:50:20'!
test04CantCreateCreditCardWithExpirationDateHavingMonthInRange

	self 
		should: [ self createCreditCardWithExpirationDateWithMonthNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	!

!methodRemoval: TestsTusLibros #test05CantCreateCreditCardWithExpirationDateHavingInvalidYear stamp: 'AM 6/14/2021 18:50:24'!
test05CantCreateCreditCardWithExpirationDateHavingInvalidYear

	self 
		should: [ self createCreditCardWithExpirationDateWithYearNotInRange ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			]

	
	!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/14/2021 18:50:38'!
test03CreditCardKnowsIfExpired

	self 
		should: [ self createCreditCardWithExpirationDateWithNotNumericValues]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			
			]

	
	! !

!methodRemoval: TestsTusLibros #createCreditCardWithExpirationDateWithMonthNotInRange stamp: 'AM 6/14/2021 18:51:02'!
createCreditCardWithExpirationDateWithMonthNotInRange
	^ CreditCard withNumber: validCardNumber expiring: {'222'.'9999'} andName: validName .!

!methodRemoval: TestsTusLibros #createCreditCardWithExpirationDateWithNotNumericValues stamp: 'AM 6/14/2021 18:51:09'!
createCreditCardWithExpirationDateWithNotNumericValues
	^ CreditCard withNumber: validCardNumber expiring: {'/1'.'f999'} andName: validName .
	!

!methodRemoval: TestsTusLibros #createCreditCardWithExpirationDateWithYearNotInRange stamp: 'AM 6/14/2021 18:51:13'!
createCreditCardWithExpirationDateWithYearNotInRange
	^ CreditCard withNumber: validCardNumber expiring: {'02'.'99999'}  andName: validName.
	!

TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName invalidExpiration today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'AM 6/14/2021 18:51:43'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName invalidExpiration today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 18:52:10' prior: 50880735 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validExpiration := {'04'.'3999'}.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	invalidExpiration := {'13'.'2025'}.
	today:= FixedGregorianDate today monthOfYear 
	! !

!methodRemoval: TestsTusLibros #createCreditCardWithInvalidExpirationDate stamp: 'AM 6/14/2021 18:52:37'!
createCreditCardWithInvalidExpirationDate
	^ CreditCard withNumber: invalidNumber expiring: invalidExpiration andName: validName .!

FixedGregorianDate today monthOfYear + 1 month
!

(FixedGregorianDate today monthOfYear) + 1*month!

(FixedGregorianDate today) + 1*month!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 18:55:03' prior: 50885160!
createExpiredCreditCardYear
	^ CreditCard withNumber: validCardNumber expiring: today andName: validName.  ! !

(FixedGregorianDate today monthOfYear) next!

(FixedGregorianDate today monthOfYear) next!

(FixedGregorianDate today monthOfYear) next: 1*year!

(FixedGregorianDate today monthOfYear) next: 1!

(FixedGregorianDate today monthOfYear) next: 13*month!

(FixedGregorianDate today monthOfYear) previous: 13*month!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 18:57:20' prior: 50887754!
createExpiredCreditCardYear
	^ CreditCard withNumber: validCardNumber expiring: (today previous: 25*month) andName: validName.  ! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 18:57:51' prior: 50887725 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validExpiration := {'04'.'3999'}.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	today:= FixedGregorianDate today monthOfYear 
	! !

TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName  today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'AM 6/14/2021 18:58:01'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 18:58:17' prior: 50887779 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validExpiration := today next: 40*month.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	today:= FixedGregorianDate today monthOfYear 
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 18:58:33' prior: 50887814 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	today:= FixedGregorianDate today monthOfYear.
	validExpiration := today next: 40*month.
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 18:59:09'!
createExpiredCreditCard
	^ CreditCard withNumber: validCardNumber expiring: (today previous: 25*month) andName: validName.  ! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 18:59:09' prior: 50885167!
test03CannotCheckoutWithExpiredCardYear
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]

	
	! !

!methodRemoval: TestsTusLibros #createExpiredCreditCardYear stamp: 'AM 6/14/2021 18:59:09'!
createExpiredCreditCardYear
	^ CreditCard withNumber: validCardNumber expiring: (today previous: 25*month) andName: validName.  !

!methodRemoval: TestsTusLibros #createExpiredCreditCardMonth stamp: 'AM 6/14/2021 18:59:15'!
createExpiredCreditCardMonth
	|month year|
	month := ('0' , Date today monthIndex asString).
	month := month copyFrom: (month size - 1)  to: month size .
	year := Date today yearNumber asString .
	^ CreditCard withNumber: validCardNumber expiring: { month . year } andName: validName.  !

!methodRemoval: CreditCard #assertOnlyNumberCharacters: stamp: 'AM 6/14/2021 18:59:31'!
assertOnlyNumberCharacters: aString
	aString do: [:aCharacter| 
		[aCharacter asString asNumber] on: Error do: [self error: CreditCard invalidCardExpirationDate ]
		]!

!methodRemoval: CreditCard #assertValidExpirationDate: stamp: 'AM 6/14/2021 18:59:36'!
assertValidExpirationDate: anExperitaionDate 
	|month year|
	month:=  anExperitaionDate first.
	year:= anExperitaionDate second.
	
	self assertOnlyNumberCharacters: month .
	self assertOnlyNumberCharacters: year.
	self assertValidMonth: month. 
	self assertValidYear: year.
	
	!

!methodRemoval: CreditCard #assertValidMonth: stamp: 'AM 6/14/2021 18:59:40'!
assertValidMonth: aString 
	((aString size = 2) and: (aString asNumber >= 1 and: aString asNumber <= 12))  ifFalse: [self error: CreditCard invalidCardExpirationDate ]!

!methodRemoval: CreditCard #assertValidYear: stamp: 'AM 6/14/2021 18:59:46'!
assertValidYear: aString
	(aString size = 4) ifFalse: [self error: CreditCard invalidCardExpirationDate]!

!methodRemoval: CreditCard class #invalidCardExpirationDate stamp: 'AM 6/14/2021 19:00:05'!
invalidCardExpirationDate
	^ 'Invalid Expiration Date'!
!CreditCard methodsFor: 'initialization' stamp: 'AM 6/14/2021 19:01:00' prior: 50886889!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 

	number := aCreditCardNumber.
	expirationDate := anExpirationDate .
	name := aName.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AM 6/14/2021 19:01:10' prior: 50879740!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName 

	self assertValidNumber: aCreditCardNumber.
	self assertValidName: aName.

	^self new initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName ! !

!methodRemoval: CreditCard #assertValidExpirationDate:Name:andNumber: stamp: 'AM 6/14/2021 19:01:23'!
assertValidExpirationDate: aCreditCardNumber Name: aName andNumber: anExpirationDate

	self assertValidNumber: aCreditCardNumber.
	self assertValidName: aName.
	self assertValidExpirationDate: anExpirationDate!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:01:53'!
assertValidNumber: aCreditCardNumber
	(aCreditCardNumber size = 16 ) ifFalse: [ self error: CreditCard invalidCardNumber ].! !

!methodRemoval: CreditCard #assertValidNumber: stamp: 'AM 6/14/2021 19:01:53'!
assertValidNumber: aCreditCardNumber
	(aCreditCardNumber size = 16 ) ifFalse: [ self error: CreditCard invalidCardNumber ].!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:01:58'!
assertValidName: aName
	(aName size > 30) ifTrue: [self error: CreditCard invalidCardName ]
	! !

!methodRemoval: CreditCard #assertValidName: stamp: 'AM 6/14/2021 19:01:58'!
assertValidName: aName
	(aName size > 30) ifTrue: [self error: CreditCard invalidCardName ]
	!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:02:17' prior: 50887969!
assertValidName: aName
	(aName size > 30) ifTrue: [self error: self invalidCardName ]
	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:02:21' prior: 50887956!
assertValidNumber: aCreditCardNumber
	(aCreditCardNumber size = 16 ) ifFalse: [ self error: self invalidCardNumber ].! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/14/2021 19:02:54' prior: 50887667!
test03CreditCardKnowsIfExpired

! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:02:57'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:02:57'!
PASSED!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'AM 6/14/2021 19:02:57'!
ERROR!

!testRun: #TestsTusLibros #test03CreditCardKnowsIfExpired stamp: 'AM 6/14/2021 19:02:57'!
PASSED!

!testRun: #TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'AM 6/14/2021 19:02:57'!
ERROR!

!methodRemoval: TestsTusLibros #test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues stamp: 'AM 6/14/2021 19:03:06'!
test03CantCreateCreditCardWithExpirationDateHavingNotNumericValues

	self 
		should: [ self createCreditCardWithExpirationDateWithNotNumericValues]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: CreditCard invalidCardExpirationDate equals: anError messageText.
			
			]

	
	!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:03:09'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:03:09'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIfExpired stamp: 'AM 6/14/2021 19:03:09'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 19:03:15'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 19:03:15'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 19:03:15'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 19:03:15'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 19:03:15'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 19:03:15'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 19:03:15'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 19:03:15'!
PASSED!

!methodRemoval: Cashier #assertNotExpiredCreditCard: stamp: 'AM 6/14/2021 19:04:06'!
assertNotExpiredCreditCard: aCreditCard 
	|actualDate expirationMonth expirationYear|
	expirationMonth  := aCreditCard expirationDate first asNumber.
	expirationYear := aCreditCard expirationDate second asNumber.
	actualDate := Date today.
	actualDate yearNumber > expirationYear  ifTrue: [self error: 	Cashier expiredCardError] .
	(actualDate yearNumber = expirationYear and: actualDate monthIndex  >= expirationMonth ) ifTrue: [self error: 	Cashier expiredCardError] 
	 !
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:07:04'!
checkOutCart: aCart usingCreditCard: aCreditCard  onDate: aDate
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aDate) ifTrue:[self error: Cashier expiredCardError].
	
	(merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .! !

!methodRemoval: Cashier #checkOutCart:usingCreditCard:onDate: stamp: 'AM 6/14/2021 19:08:56'!
checkOutCart: aCart usingCreditCard: aCreditCard  onDate: aDate
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aDate) ifTrue:[self error: Cashier expiredCardError].
	
	(merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .!
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:09:26'!
checkOutCart: aCart usingCreditCard: aCreditCard onDate: aDate   
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	self assertNotExpiredCreditCard: aCreditCard .
	(merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:09:26' prior: 50887192!
test06CannotCheckoutCartWithCreditCardWithoutFunds
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds onDate: today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:09:26' prior: 50879615!
test01CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onDate: today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:09:26' prior: 50887555!
test09CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard onDate: today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:09:26' prior: 50885727!
test05CannotCheckoutCartWithExpiredMonth
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCardMonth onDate: today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:09:26' prior: 50887853!
test03CannotCheckoutWithExpiredCardYear
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard onDate: today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:09:26' prior: 50879643!
test02CheckoutOfCartIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onDate: today ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:09:26' prior: 50887366!
test07CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createStolenCreditCard onDate: today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Stolen CreditCard' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:09:26' prior: 50881592!
test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCart addToCart: ISBNWatkins withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onDate: today ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:09:26' prior: 50887414!
test08CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard onDate: today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	! !

!methodRemoval: Cashier #checkOutCart:usingCreditCard: stamp: 'AM 6/14/2021 19:09:26'!
checkOutCart: aCart usingCreditCard: aCreditCard  
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	self assertNotExpiredCreditCard: aCreditCard .
	(merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .!
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:28' prior: 50888117!
checkOutCart: aCart usingCreditCard: aCreditCard onDate: aMonthOfYear   
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:42'!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear   
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:42' prior: 50888249!
test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCart addToCart: ISBNWatkins withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: today ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:42' prior: 50888166!
test09CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard onMonthOfYear: today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:42' prior: 50888232!
test07CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createStolenCreditCard onMonthOfYear: today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Stolen CreditCard' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:42' prior: 50888150!
test01CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:42' prior: 50888218!
test02CheckoutOfCartIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: today ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:42' prior: 50888201!
test03CannotCheckoutWithExpiredCardYear
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard onMonthOfYear: today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:42' prior: 50888265!
test08CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard onMonthOfYear: today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:42' prior: 50888132!
test06CannotCheckoutCartWithCreditCardWithoutFunds
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds onMonthOfYear: today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:10:42' prior: 50888183!
test05CannotCheckoutCartWithExpiredMonth
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCardMonth onMonthOfYear: today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]


	
	! !

!methodRemoval: Cashier #checkOutCart:usingCreditCard:onDate: stamp: 'AM 6/14/2021 19:10:42'!
checkOutCart: aCart usingCreditCard: aCreditCard onDate: aMonthOfYear   
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCardNumber: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .!

!methodRemoval: TestsTusLibros #test03CannotCheckoutWithExpiredCardYear stamp: 'AM 6/14/2021 19:11:06'!
test03CannotCheckoutWithExpiredCardYear
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard onMonthOfYear: today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]

	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:11:48'!
test05CannotCheckoutCartWithExpiredCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCardMonth onMonthOfYear: today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]


	
	! !

!methodRemoval: TestsTusLibros #test05CannotCheckoutCartWithExpiredMonth stamp: 'AM 6/14/2021 19:11:48'!
test05CannotCheckoutCartWithExpiredMonth
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCardMonth onMonthOfYear: today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]


	
	!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:11:54' prior: 50888513!
test05CannotCheckoutCartWithExpiredCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard onMonthOfYear: today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]


	
	! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:12:19'!
ERROR!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:12:19'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:12:25'!
isExpiredOn: aGregorianMonthOfYear 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:13:05' prior: 50888572!
isExpiredOn: aMonthOfYear 
	^ aMonthOfYear>=expirationDate .! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:13:09'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIfExpired stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 19:13:11'!
PASSED!

!testRun: #TestsTusLibros #test09CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:13:11'!
PASSED!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:14' prior: 50887830 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	today := FixedGregorianDate today monthOfYear.
	validExpiration := today next: 40*month.
	! !

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'AM 6/14/2021 19:14:25'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:25' prior: 50888379!
test01CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:25' prior: 50888329!
test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCart addToCart: ISBNWatkins withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:25' prior: 50887845!
createExpiredCreditCard
	^ CreditCard withNumber: validCardNumber expiring: (todayMonthOfYear previous: 25*month) andName: validName.  ! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:25' prior: 50888395!
test02CheckoutOfCartIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:25' prior: 50888656 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	todayMonthOfYear := FixedGregorianDate today monthOfYear.
	validExpiration := todayMonthOfYear next: 40*month.
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:25' prior: 50888345!
test09CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard onMonthOfYear: todayMonthOfYear]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:25' prior: 50888362!
test07CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createStolenCreditCard onMonthOfYear: todayMonthOfYear]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Stolen CreditCard' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:25' prior: 50888548!
test05CannotCheckoutCartWithExpiredCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard onMonthOfYear: todayMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:25' prior: 50888444!
test06CannotCheckoutCartWithCreditCardWithoutFunds
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds onMonthOfYear: todayMonthOfYear]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:14:25' prior: 50888427!
test08CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard onMonthOfYear: todayMonthOfYear]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	! !
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{76 to: 79}) assertValidNumber:
		(aCreditCardNumber
			cover: (100 to: 116)
			declaredAt: (13 to: 29)) ] valueCoveringAll:
		{81 to: 98}.
	[
	(self coverAll:
		{120 to: 123}) assertValidName:
		(aName
			cover: (142 to: 146)
			declaredAt: (67 to: 71)) ] valueCoveringAll:
		{125 to: 140}.
	^ [
	([
	(self coverAll:
		{152 to: 155}) new ] valueCoveringAll:
		{157 to: 159})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (183 to: 199)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (211 to: 226)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (237 to: 241)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{161 to: 181. 201 to: 209. 228 to: 235}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(self coverAll:
				{93 to: 96}) invalidCardNumber ] valueCoveringAll:
				{98 to: 114}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:14:57'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
initialize
	(merchantProcessor _ [
	(MerchantProcessor
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{52 to: 54})
		cover: (13 to: 29)
		declaredAt: (13 to: 29).! !
!Behavior method!
initialize
	(fundlessCard _ '0000000000000000' coverAll:
		{31 to: 48})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).
	(stolenCard _ '0000000000000001' coverAll:
		{67 to: 84})
		cover: (52 to: 61)
		declaredAt: (52 to: 61).
	(fakeCard _ '0000000000000002' coverAll:
		{103 to: 120})
		cover: (90 to: 97)
		declaredAt: (90 to: 97).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) invalidCardName ] valueCoveringAll:
				{69 to: 83}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	(number _ aCreditCardNumber
		cover: (96 to: 112)
		declaredAt: (23 to: 39))
		cover: (86 to: 91)
		declaredAt: (86 to: 91).
	(expirationDate _ anExpirationDate
		cover: (134 to: 149)
		declaredAt: (51 to: 66))
		cover: (116 to: 129)
		declaredAt: (116 to: 129).
	(name _ aName
		cover: (162 to: 166)
		declaredAt: (77 to: 81))
		cover: (154 to: 157)
		declaredAt: (154 to: 157).! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear
	[
	([
	(aCart
		cover: (84 to: 88)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{90 to: 96}) ifTrue: [
		[
		(self coverAll:
			{107 to: 110}) error:
			([
			(Cashier
				cover: (119 to: 125)
				declaredAt: (119 to: 125)) emptyCartError ] valueCoveringAll:
				{127 to: 140}) ] valueCoveringAll:
			{112 to: 117} ]] valueCoveringAll:
		{98 to: 104}.
	[
	([
	(aCreditCard
		cover: (146 to: 156)
		declaredAt: (38 to: 48)) isExpiredOn:
		(aMonthOfYear
			cover: (171 to: 182)
			declaredAt: (65 to: 76)) ] valueCoveringAll:
		{158 to: 169}) ifTrue: [
		[
		(self coverAll:
			{193 to: 196}) error:
			([
			(Cashier
				cover: (205 to: 211)
				declaredAt: (119 to: 125)) expiredCardError ] valueCoveringAll:
				{213 to: 228}) ] valueCoveringAll:
			{198 to: 203} ]] valueCoveringAll:
		{185 to: 191}.
	[
	([
	(merchantProcessor
		cover: (239 to: 255)
		declaredAt: (239 to: 255))
		debitCreditCardNumber:
			([
			(aCreditCard
				cover: (280 to: 290)
				declaredAt: (38 to: 48)) number ] valueCoveringAll:
				{292 to: 297})
		withName:
			([
			(aCreditCard
				cover: (309 to: 319)
				declaredAt: (38 to: 48)) name ] valueCoveringAll:
				{322 to: 325})
		withExpirationDate:
			([
			(aCreditCard
				cover: (347 to: 357)
				declaredAt: (38 to: 48)) expirationDate ] valueCoveringAll:
				{359 to: 372})
		andAmount:
			([
			(aCart
				cover: (386 to: 390)
				declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
				{392 to: 403}) ] valueCoveringAll:
		{257 to: 278. 299 to: 307. 327 to: 345. 374 to: 383}) value ] valueCoveringAll:
		{406 to: 410}.
	^ [
	(aCart
		cover: (417 to: 421)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{423 to: 434}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 19:14:57'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:14:57'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
isExpiredOn: aMonthOfYear
	^ [
	(aMonthOfYear
		cover: (31 to: 42)
		declaredAt: (14 to: 25)) >=
		(expirationDate
			cover: (45 to: 58)
			declaredAt: (45 to: 58)) ] valueCoveringAll:
		{43 to: 44}.! !
!Behavior method!
number
	^ [
	(number
		cover: (11 to: 16)
		declaredAt: (11 to: 16)) copy ] valueCoveringAll:
		{18 to: 21}.! !
!Behavior method!
name
	^ [
	(name
		cover: (9 to: 12)
		declaredAt: (9 to: 12)) copy ] valueCoveringAll:
		{14 to: 17}.! !
!Behavior method!
expirationDate
	^ [
	(expirationDate
		cover: (19 to: 32)
		declaredAt: (19 to: 32)) copy ] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !
!Behavior method!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	[
	([
	(aCreditCardNumber
		cover: (127 to: 143)
		declaredAt: (24 to: 40)) =
		(fundlessCard
			cover: (147 to: 158)
			declaredAt: (147 to: 158)) ] valueCoveringAll:
		{145 to: 145}) ifTrue: [ ^ [
		[
		(self coverAll:
			{171 to: 174}) error:
			('Insufficient funds' coverAll:
				{183 to: 202}) ] valueCoveringAll:
			{176 to: 181} ]]] valueCoveringAll:
		{160 to: 166}.
	[
	([
	(aCreditCardNumber
		cover: (208 to: 224)
		declaredAt: (24 to: 40)) =
		(stolenCard
			cover: (228 to: 237)
			declaredAt: (228 to: 237)) ] valueCoveringAll:
		{226 to: 226}) ifTrue: [ ^ [
		[
		(self coverAll:
			{250 to: 253}) error:
			('Stolen CreditCard' coverAll:
				{262 to: 280}) ] valueCoveringAll:
			{255 to: 260} ]]] valueCoveringAll:
		{239 to: 245}.
	[
	([
	(aCreditCardNumber
		cover: (286 to: 302)
		declaredAt: (24 to: 40)) =
		(fakeCard
			cover: (306 to: 313)
			declaredAt: (306 to: 313)) ] valueCoveringAll:
		{304 to: 304}) ifTrue: [ ^ [
		[
		(self coverAll:
			{326 to: 329}) error:
			('Fake CreditCard' coverAll:
				{338 to: 354}) ] valueCoveringAll:
			{331 to: 336} ]]] valueCoveringAll:
		{315 to: 321}.
	^ [
	'OK' coverAll:
		{362 to: 365} ].! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:14:57'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIfExpired stamp: 'AM 6/14/2021 19:14:57'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:14:57'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 19:14:57'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:14:57'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!testRun: #TestsTusLibros #test09CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:14:57'!
PASSED!

!methodRemoval: Cashier class #invalidCardNumber stamp: 'AM 6/14/2021 19:15:31'!
invalidCardNumber
	'Invalid Card Number'!

!methodRemoval: Cashier class #invalidCardName stamp: 'AM 6/14/2021 19:15:35'!
invalidCardName
	'Invalid Card Name'!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:17:35'!
debitCreditCard: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCardNumber = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCardNumber = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCardNumber = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^['OK']! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:17:35' prior: 50888312!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear   
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCard: aCreditCard number withName: aCreditCard  name withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .! !

!methodRemoval: MerchantProcessor #debitCreditCardNumber:withName:withExpirationDate:andAmount: stamp: 'AM 6/14/2021 19:17:35'!
debitCreditCardNumber: aCreditCardNumber withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCardNumber = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCardNumber = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCardNumber = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^['OK']!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:17:50' prior: 50889269!
debitCreditCard: aCreditCard withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCard number = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCard number = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^['OK']! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:18:01'!
debitCreditCard: aCreditCard withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCard number = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCard number = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^['OK']! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:18:01' prior: 50889284!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear   
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCard: aCreditCard number withExpirationDate: aCreditCard expirationDate andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .! !

!methodRemoval: MerchantProcessor #debitCreditCard:withName:withExpirationDate:andAmount: stamp: 'AM 6/14/2021 19:18:01'!
debitCreditCard: aCreditCard withName: aCreditCardName withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCard number = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCard number = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^['OK']!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:18:10'!
debitCreditCard: aCreditCard andAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCard number = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCard number = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^['OK']! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:18:10' prior: 50889345!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear   
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCard: aCreditCard number andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .! !

!methodRemoval: MerchantProcessor #debitCreditCard:withExpirationDate:andAmount: stamp: 'AM 6/14/2021 19:18:10'!
debitCreditCard: aCreditCard withExpirationDate: anExpirationDate andAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCard number = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCard number = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^['OK']!
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:18:32' prior: 50889389!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear   
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCard: aCreditCard andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIfExpired stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

!testRun: #TestsTusLibros #test09CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:18:38'!
PASSED!

----SNAPSHOT----(14 June 2021 19:18:49) CuisUniversity-4532.image priorSource: 17790896!

!methodRemoval: TestsTusLibros #test09CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:19:42'!
test09CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard onMonthOfYear: todayMonthOfYear]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{76 to: 79}) assertValidNumber:
		(aCreditCardNumber
			cover: (100 to: 116)
			declaredAt: (13 to: 29)) ] valueCoveringAll:
		{81 to: 98}.
	[
	(self coverAll:
		{120 to: 123}) assertValidName:
		(aName
			cover: (142 to: 146)
			declaredAt: (67 to: 71)) ] valueCoveringAll:
		{125 to: 140}.
	^ [
	([
	(self coverAll:
		{152 to: 155}) new ] valueCoveringAll:
		{157 to: 159})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (183 to: 199)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (211 to: 226)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (237 to: 241)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{161 to: 181. 201 to: 209. 228 to: 235}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(self coverAll:
				{93 to: 96}) invalidCardNumber ] valueCoveringAll:
				{98 to: 114}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:19:58'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
initialize
	(merchantProcessor _ [
	(MerchantProcessor
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{52 to: 54})
		cover: (13 to: 29)
		declaredAt: (13 to: 29).! !
!Behavior method!
initialize
	(fundlessCard _ '0000000000000000' coverAll:
		{31 to: 48})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).
	(stolenCard _ '0000000000000001' coverAll:
		{67 to: 84})
		cover: (52 to: 61)
		declaredAt: (52 to: 61).
	(fakeCard _ '0000000000000002' coverAll:
		{103 to: 120})
		cover: (90 to: 97)
		declaredAt: (90 to: 97).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) invalidCardName ] valueCoveringAll:
				{69 to: 83}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	(number _ aCreditCardNumber
		cover: (96 to: 112)
		declaredAt: (23 to: 39))
		cover: (86 to: 91)
		declaredAt: (86 to: 91).
	(expirationDate _ anExpirationDate
		cover: (134 to: 149)
		declaredAt: (51 to: 66))
		cover: (116 to: 129)
		declaredAt: (116 to: 129).
	(name _ aName
		cover: (162 to: 166)
		declaredAt: (77 to: 81))
		cover: (154 to: 157)
		declaredAt: (154 to: 157).! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear
	[
	([
	(aCart
		cover: (84 to: 88)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{90 to: 96}) ifTrue: [
		[
		(self coverAll:
			{107 to: 110}) error:
			([
			(Cashier
				cover: (119 to: 125)
				declaredAt: (119 to: 125)) emptyCartError ] valueCoveringAll:
				{127 to: 140}) ] valueCoveringAll:
			{112 to: 117} ]] valueCoveringAll:
		{98 to: 104}.
	[
	([
	(aCreditCard
		cover: (146 to: 156)
		declaredAt: (38 to: 48)) isExpiredOn:
		(aMonthOfYear
			cover: (171 to: 182)
			declaredAt: (65 to: 76)) ] valueCoveringAll:
		{158 to: 169}) ifTrue: [
		[
		(self coverAll:
			{193 to: 196}) error:
			([
			(Cashier
				cover: (205 to: 211)
				declaredAt: (119 to: 125)) expiredCardError ] valueCoveringAll:
				{213 to: 228}) ] valueCoveringAll:
			{198 to: 203} ]] valueCoveringAll:
		{185 to: 191}.
	[
	([
	(merchantProcessor
		cover: (239 to: 255)
		declaredAt: (239 to: 255))
		debitCreditCard:
			(aCreditCard
				cover: (274 to: 284)
				declaredAt: (38 to: 48))
		andAmount:
			([
			(aCart
				cover: (298 to: 302)
				declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
				{304 to: 315}) ] valueCoveringAll:
		{257 to: 272. 286 to: 295}) value ] valueCoveringAll:
		{318 to: 322}.
	^ [
	(aCart
		cover: (329 to: 333)
		declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
		{335 to: 346}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 19:19:58'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 19:19:58'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:19:58'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
isExpiredOn: aMonthOfYear
	^ [
	(aMonthOfYear
		cover: (31 to: 42)
		declaredAt: (14 to: 25)) >=
		(expirationDate
			cover: (45 to: 58)
			declaredAt: (45 to: 58)) ] valueCoveringAll:
		{43 to: 44}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !
!Behavior method!
debitCreditCard: aCreditCard andAmount: anAmount
	[
	([
	([
	(aCreditCard
		cover: (52 to: 62)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{64 to: 69}) =
		(fundlessCard
			cover: (73 to: 84)
			declaredAt: (73 to: 84)) ] valueCoveringAll:
		{71 to: 71}) ifTrue: [ ^ [
		[
		(self coverAll:
			{97 to: 100}) error:
			('Insufficient funds' coverAll:
				{109 to: 128}) ] valueCoveringAll:
			{102 to: 107} ]]] valueCoveringAll:
		{86 to: 92}.
	[
	([
	([
	(aCreditCard
		cover: (134 to: 144)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{146 to: 151}) =
		(stolenCard
			cover: (155 to: 164)
			declaredAt: (155 to: 164)) ] valueCoveringAll:
		{153 to: 153}) ifTrue: [ ^ [
		[
		(self coverAll:
			{177 to: 180}) error:
			('Stolen CreditCard' coverAll:
				{189 to: 207}) ] valueCoveringAll:
			{182 to: 187} ]]] valueCoveringAll:
		{166 to: 172}.
	[
	([
	([
	(aCreditCard
		cover: (213 to: 223)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{225 to: 230}) =
		(fakeCard
			cover: (234 to: 241)
			declaredAt: (234 to: 241)) ] valueCoveringAll:
		{232 to: 232}) ifTrue: [ ^ [
		[
		(self coverAll:
			{254 to: 257}) error:
			('Fake CreditCard' coverAll:
				{266 to: 282}) ] valueCoveringAll:
			{259 to: 264} ]]] valueCoveringAll:
		{243 to: 249}.
	^ [
	'OK' coverAll:
		{290 to: 293} ].! !
!Behavior method!
number
	^ [
	(number
		cover: (11 to: 16)
		declaredAt: (11 to: 16)) copy ] valueCoveringAll:
		{18 to: 21}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:19:58'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 19:19:58'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIfExpired stamp: 'AM 6/14/2021 19:19:58'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 19:19:58'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:19:58'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 19:19:58'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:19:58'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 19:19:58'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 19:19:58'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 19:19:58'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 19:19:58'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 19:19:58'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:19:58'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 19:19:58'!
PASSED!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'AM 6/14/2021 19:21:11'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/14/2021 19:23:35' prior: 50887994!
test03CreditCardKnowsIfExpired
	self assert: (self createExpiredCreditCard isExpired) equals: true

! !

!testRun: #TestsTusLibros #test03CreditCardKnowsIfExpired stamp: 'AM 6/14/2021 19:23:38'!
ERROR!

!testRun: #TestsTusLibros #test03CreditCardKnowsIfExpired stamp: 'AM 6/14/2021 19:23:38'!
ERROR!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/14/2021 19:23:54' prior: 50889919!
test03CreditCardKnowsIfExpired
	self assert: (self createExpiredCreditCard isExpiredOn: todayMonthOfYear ) equals: true

! !

!testRun: #TestsTusLibros #test03CreditCardKnowsIfExpired stamp: 'AM 6/14/2021 19:23:56'!
PASSED!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/14/2021 19:24:14'!
test03CreditCardKnowsIsExpired
	self assert: (self createExpiredCreditCard isExpiredOn: todayMonthOfYear ) equals: true

! !

!methodRemoval: TestsTusLibros #test03CreditCardKnowsIfExpired stamp: 'AM 6/14/2021 19:24:14'!
test03CreditCardKnowsIfExpired
	self assert: (self createExpiredCreditCard isExpiredOn: todayMonthOfYear ) equals: true

!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/14/2021 19:24:21'!
test03CreditCardKnowsIsExpiredIfExpired
	self assert: (self createExpiredCreditCard isExpiredOn: todayMonthOfYear ) equals: true

! !

!methodRemoval: TestsTusLibros #test03CreditCardKnowsIsExpired stamp: 'AM 6/14/2021 19:24:21'!
test03CreditCardKnowsIsExpired
	self assert: (self createExpiredCreditCard isExpiredOn: todayMonthOfYear ) equals: true

!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/14/2021 19:24:38'!
test04CreditCardKnowsIsNotExpiredIfNotExpired
	self assert: (self createValidCreditCard isExpiredOn: todayMonthOfYear ) equals: true

! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/14/2021 19:24:42' prior: 50889970!
test04CreditCardKnowsIsNotExpiredIfNotExpired
	self assert: (self createValidCreditCard isExpiredOn: todayMonthOfYear ) equals: false

! !

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:24:45'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 19:24:45'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:27:05'!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear andRegisterOn: aSalesList    
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCard: aCreditCard andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:27:05' prior: 50888683!
test01CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
			
			]
	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:27:05' prior: 50888699!
test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCart addToCart: ISBNWatkins withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:27:05' prior: 50888827!
test08CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:27:05' prior: 50888791!
test05CannotCheckoutCartWithExpiredCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:27:05' prior: 50888723!
test02CheckoutOfCartIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:27:05' prior: 50888773!
test07CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createStolenCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Stolen CreditCard' equals: anError messageText.
			
			]


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:27:05' prior: 50888809!
test06CannotCheckoutCartWithCreditCardWithoutFunds
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
			
			]


	
	! !

!methodRemoval: Cashier #checkOutCart:usingCreditCard:onMonthOfYear: stamp: 'AM 6/14/2021 19:27:05'!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear   
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCard: aCreditCard andAmount:  aCart priceSummary) value.
	
	^aCart priceSummary .!

TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'AM 6/14/2021 19:27:41'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:27:57' prior: 50888738 overrides: 16927572!
setUp
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	todayMonthOfYear := FixedGregorianDate today monthOfYear.
	validExpiration := todayMonthOfYear next: 40*month.
	salesList:= OrderedCollection new.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:29:09' prior: 50890055!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear andRegisterOn: aSalesList    
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCard: aCreditCard andAmount:  aCart priceSummary) value.
	aSalesList addLast: aCart priceSummary.! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:30:00' prior: 50890141!
test02CheckoutOfCartIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList.
	self assert: ( salesList first) equals: aCart priceSummary.

	
	! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:30:08'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:30:24' prior: 50890070!
test01CheckoutEmptyCarShouldRaiseError
	|aCart aCashier|
	
	aCart := self createCart .
	aCashier := self createCashier.

	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
				self assert: salesList isEmpty .
			
			]
	
	! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 19:30:28'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:30:39' prior: 50890122!
test05CannotCheckoutCartWithExpiredCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createExpiredCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:30:43' prior: 50890175!
test06CannotCheckoutCartWithCreditCardWithoutFunds
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createCreditCardWithoutFunds onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:30:49' prior: 50890104!
test08CannotCheckoutCartWithFakeCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createFakeCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:30:54' prior: 50890156!
test07CannotCheckoutCartWithStolenCreditCard
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCashier := self createCashier.
	
	self 
		should: [	aCashier checkOutCart: aCart usingCreditCard: self createStolenCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Stolen CreditCard' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:31:32' prior: 50890087!
test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCart addToCart: ISBNWatkins withQuantity: 10. 
	aCashier := self createCashier.
	
	self assert: ( aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ) equals: aCart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:32:14' prior: 50890380!
test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCart addToCart: ISBNWatkins withQuantity: 10. 
	aCashier := self createCashier.
	aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList.

	self assert: ( salesList first) equals: aCart priceSummary.
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 19:32:17' prior: 50890397!
test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice
	|aCart aCashier|
	
	aCart := self createCart .
	aCart addToCart: ISBNCormen withQuantity: 10. 
	aCart addToCart: ISBNWatkins withQuantity: 10. 
	aCashier := self createCashier.
	aCashier checkOutCart: aCart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList.
	self assert: ( salesList first) equals: aCart priceSummary.
	! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:32:25'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 19:32:25'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 19:32:25'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:32:25'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:32:25'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 19:32:25'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/14/2021 19:32:25'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 19:32:25'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:32:25'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/14/2021 19:32:26'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 19:32:26'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:32:26'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 19:32:26'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 19:32:26'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 19:32:26'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 19:32:26'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 19:32:26'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:32:26'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 19:32:26'!
PASSED!
!MerchantProcessor methodsFor: 'debit' stamp: 'AM 6/14/2021 19:34:54'!
debitCreditCard: aCreditCard forAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCard number = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCard number = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^['OK']! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 6/14/2021 19:34:54' prior: 50890246!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear andRegisterOn: aSalesList    
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	(merchantProcessor debitCreditCard: aCreditCard forAmount:  aCart priceSummary) value.
	aSalesList addLast: aCart priceSummary.! !

!methodRemoval: MerchantProcessor #debitCreditCard:andAmount: stamp: 'AM 6/14/2021 19:34:54'!
debitCreditCard: aCreditCard andAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [^[self error: 'Insufficient funds']].
	aCreditCard number = stolenCard ifTrue: [^[self error: 'Stolen CreditCard']].
	aCreditCard number = fakeCard ifTrue: [^[self error: 'Fake CreditCard']].
	^['OK']!
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{76 to: 79}) assertValidNumber:
		(aCreditCardNumber
			cover: (100 to: 116)
			declaredAt: (13 to: 29)) ] valueCoveringAll:
		{81 to: 98}.
	[
	(self coverAll:
		{120 to: 123}) assertValidName:
		(aName
			cover: (142 to: 146)
			declaredAt: (67 to: 71)) ] valueCoveringAll:
		{125 to: 140}.
	^ [
	([
	(self coverAll:
		{152 to: 155}) new ] valueCoveringAll:
		{157 to: 159})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (183 to: 199)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (211 to: 226)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (237 to: 241)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{161 to: 181. 201 to: 209. 228 to: 235}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(self coverAll:
				{93 to: 96}) invalidCardNumber ] valueCoveringAll:
				{98 to: 114}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:35:13'!
PASSED!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
initialize
	(merchantProcessor _ [
	(MerchantProcessor
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{52 to: 54})
		cover: (13 to: 29)
		declaredAt: (13 to: 29).! !
!Behavior method!
initialize
	(fundlessCard _ '0000000000000000' coverAll:
		{31 to: 48})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).
	(stolenCard _ '0000000000000001' coverAll:
		{67 to: 84})
		cover: (52 to: 61)
		declaredAt: (52 to: 61).
	(fakeCard _ '0000000000000002' coverAll:
		{103 to: 120})
		cover: (90 to: 97)
		declaredAt: (90 to: 97).! !
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) invalidCardName ] valueCoveringAll:
				{69 to: 83}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	(number _ aCreditCardNumber
		cover: (96 to: 112)
		declaredAt: (23 to: 39))
		cover: (86 to: 91)
		declaredAt: (86 to: 91).
	(expirationDate _ anExpirationDate
		cover: (134 to: 149)
		declaredAt: (51 to: 66))
		cover: (116 to: 129)
		declaredAt: (116 to: 129).
	(name _ aName
		cover: (162 to: 166)
		declaredAt: (77 to: 81))
		cover: (154 to: 157)
		declaredAt: (154 to: 157).! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear andRegisterOn: aSalesList
	[
	([
	(aCart
		cover: (111 to: 115)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{117 to: 123}) ifTrue: [
		[
		(self coverAll:
			{134 to: 137}) error:
			([
			(Cashier
				cover: (146 to: 152)
				declaredAt: (146 to: 152)) emptyCartError ] valueCoveringAll:
				{154 to: 167}) ] valueCoveringAll:
			{139 to: 144} ]] valueCoveringAll:
		{125 to: 131}.
	[
	([
	(aCreditCard
		cover: (173 to: 183)
		declaredAt: (38 to: 48)) isExpiredOn:
		(aMonthOfYear
			cover: (198 to: 209)
			declaredAt: (65 to: 76)) ] valueCoveringAll:
		{185 to: 196}) ifTrue: [
		[
		(self coverAll:
			{220 to: 223}) error:
			([
			(Cashier
				cover: (232 to: 238)
				declaredAt: (146 to: 152)) expiredCardError ] valueCoveringAll:
				{240 to: 255}) ] valueCoveringAll:
			{225 to: 230} ]] valueCoveringAll:
		{212 to: 218}.
	[
	([
	(merchantProcessor
		cover: (266 to: 282)
		declaredAt: (266 to: 282))
		debitCreditCard:
			(aCreditCard
				cover: (301 to: 311)
				declaredAt: (38 to: 48))
		forAmount:
			([
			(aCart
				cover: (325 to: 329)
				declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
				{331 to: 342}) ] valueCoveringAll:
		{284 to: 299. 313 to: 322}) value ] valueCoveringAll:
		{345 to: 349}.
	[
	(aSalesList
		cover: (353 to: 362)
		declaredAt: (93 to: 102)) addLast:
		([
		(aCart
			cover: (373 to: 377)
			declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
			{379 to: 390}) ] valueCoveringAll:
		{364 to: 371}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 19:35:13'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 19:35:13'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:35:13'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
isExpiredOn: aMonthOfYear
	^ [
	(aMonthOfYear
		cover: (31 to: 42)
		declaredAt: (14 to: 25)) >=
		(expirationDate
			cover: (45 to: 58)
			declaredAt: (45 to: 58)) ] valueCoveringAll:
		{43 to: 44}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !
!Behavior method!
debitCreditCard: aCreditCard forAmount: anAmount
	[
	([
	([
	(aCreditCard
		cover: (52 to: 62)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{64 to: 69}) =
		(fundlessCard
			cover: (73 to: 84)
			declaredAt: (73 to: 84)) ] valueCoveringAll:
		{71 to: 71}) ifTrue: [ ^ [
		[
		(self coverAll:
			{97 to: 100}) error:
			('Insufficient funds' coverAll:
				{109 to: 128}) ] valueCoveringAll:
			{102 to: 107} ]]] valueCoveringAll:
		{86 to: 92}.
	[
	([
	([
	(aCreditCard
		cover: (134 to: 144)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{146 to: 151}) =
		(stolenCard
			cover: (155 to: 164)
			declaredAt: (155 to: 164)) ] valueCoveringAll:
		{153 to: 153}) ifTrue: [ ^ [
		[
		(self coverAll:
			{177 to: 180}) error:
			('Stolen CreditCard' coverAll:
				{189 to: 207}) ] valueCoveringAll:
			{182 to: 187} ]]] valueCoveringAll:
		{166 to: 172}.
	[
	([
	([
	(aCreditCard
		cover: (213 to: 223)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{225 to: 230}) =
		(fakeCard
			cover: (234 to: 241)
			declaredAt: (234 to: 241)) ] valueCoveringAll:
		{232 to: 232}) ifTrue: [ ^ [
		[
		(self coverAll:
			{254 to: 257}) error:
			('Fake CreditCard' coverAll:
				{266 to: 282}) ] valueCoveringAll:
			{259 to: 264} ]]] valueCoveringAll:
		{243 to: 249}.
	^ [
	'OK' coverAll:
		{290 to: 293} ].! !
!Behavior method!
number
	^ [
	(number
		cover: (11 to: 16)
		declaredAt: (11 to: 16)) copy ] valueCoveringAll:
		{18 to: 21}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:35:13'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 19:35:13'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/14/2021 19:35:13'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 19:35:13'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:35:13'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/14/2021 19:35:13'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 19:35:13'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:35:13'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 19:35:13'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 19:35:13'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 19:35:13'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 19:35:13'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 19:35:13'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:35:14'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 19:35:14'!
PASSED!

----SNAPSHOT----(14 June 2021 19:36:34) CuisUniversity-4532.image priorSource: 17851099!

----SNAPSHOT----(14 June 2021 19:52:19) CuisUniversity-4532.image priorSource: 17897246!
!MerchantProcessor methodsFor: 'debit' stamp: 'AM 6/14/2021 19:52:40' prior: 50890497!
debitCreditCard: aCreditCard forAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [self error: 'Insufficient funds'].
	aCreditCard number = stolenCard ifTrue: [self error: 'Stolen CreditCard'].
	aCreditCard number = fakeCard ifTrue: [self error: 'Fake CreditCard'].
	^['OK']! !
!MerchantProcessor methodsFor: 'debit' stamp: 'AM 6/14/2021 19:53:00' prior: 50890946!
debitCreditCard: aCreditCard forAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [self error: 'Insufficient funds'].
	aCreditCard number = stolenCard ifTrue: [self error: 'Stolen CreditCard'].
	aCreditCard number = fakeCard ifTrue: [self error: 'Fake CreditCard'].! !
!Cashier methodsFor: 'checkOut' stamp: 'AM 6/14/2021 19:53:32' prior: 50890510!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear andRegisterOn: aSalesList    
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	[merchantProcessor debitCreditCard: aCreditCard forAmount:  aCart priceSummary].
	aSalesList addLast: aCart priceSummary.! !
!Cashier methodsFor: 'checkOut' stamp: 'AM 6/14/2021 19:55:39' prior: 50890970!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear andRegisterOn: aSalesList    
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	[merchantProcessor debitCreditCard: aCreditCard forAmount:  aCart priceSummary] on: Error do:[:errorText| self error: errorText ].
	aSalesList addLast: aCart priceSummary.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 19:55:49'!
FAILURE!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 19:55:49'!
FAILURE!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 19:55:49'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:55:49'!
FAILURE!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 19:55:49'!
PASSED!
!Cashier methodsFor: 'checkOut' stamp: 'AM 6/14/2021 19:56:21' prior: 50890985!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear andRegisterOn: aSalesList    
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	[merchantProcessor debitCreditCard: aCreditCard forAmount:  aCart priceSummary] on: Error do:[:error| self error: error messageText ].
	aSalesList addLast: aCart priceSummary.! !
!Cashier methodsFor: 'checkOut' stamp: 'AM 6/14/2021 19:56:26' prior: 50891068!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear andRegisterOn: aSalesList    
	
	aCart isEmpty ifTrue: [self error: Cashier emptyCartError].
	(aCreditCard isExpiredOn: aMonthOfYear) ifTrue:[self error: Cashier expiredCardError ].
	
	
	[merchantProcessor debitCreditCard: aCreditCard forAmount:  aCart priceSummary] on: Error do:[:error| self error: (error messageText) ].
	aSalesList addLast: aCart priceSummary.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 19:56:28'!
PASSED!

MessageNotUnderstood!

----SNAPSHOT----(14 June 2021 20:02:52) CuisUniversity-4532.image priorSource: 17897336!

----SNAPSHOT----(14 June 2021 20:04:47) CuisUniversity-4532.image priorSource: 17904571!

----QUIT----(14 June 2021 20:04:50) CuisUniversity-4532.image priorSource: 17904661!

----STARTUP---- (14 June 2021 21:46:48) as C:\Users\alejo\Documents\Cosas Facu\Inge 1\windows64\CuisUniversity-4532.image!


TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'AM 6/14/2021 21:48:24'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: 'cart cashier salesList ISBNCormen ISBNBible ISBNWatkins CormenPrice WatkinsPrice validCardNumber validExpiration validName invalidNumber invalidName todayMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/14/2021 21:48:48' prior: 50890229 overrides: 16927572!
setUp
	cart:= Cart new.
	cashier:= Cashier new.
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	todayMonthOfYear := FixedGregorianDate today monthOfYear.
	validExpiration := todayMonthOfYear next: 40*month.
	salesList:= OrderedCollection new.
	! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/14/2021 21:49:22' prior: 50878461!
test01createdCartIsInitializedEmpty
	|aCart |
	
	
	aCart:= self createCart.
	self assert: aCart isEmpty equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/14/2021 21:49:38' prior: 50884528!
test02addingBookFromCatalogIsRegistered
	cart addToCart: ISBNCormen withQuantity: 1.
	
	self assert: cart size equals: 1.
	self assert:( cart contains: ISBNCormen withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/14/2021 21:49:52' prior: 50878479!
test03cantAddBookNotFromCatalog
	self 
		should: [	cart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: cart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/14/2021 21:50:03' prior: 50878492!
test04cantAddZeroBooksToCart
	self 
		should: [	cart addToCart: ISBNCormen withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: cart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/14/2021 21:50:22' prior: 50878505!
test05CartCanListAllBooksCorrectly

	cart addToCart: ISBNCormen withQuantity: 3.
	cart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: cart listCart equals:( OrderedCollection with: {ISBNCormen . 3} with: {ISBNWatkins . 2}).! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/14/2021 21:50:37' prior: 50879203!
test06EmptyCartGivesPriceSummary0
	
	self assert: cart priceSummary equals:0.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/14/2021 21:50:40' prior: 50891273!
test06EmptyCartGivesPriceSummary0
	
	self assert: cart priceSummary equals:0.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/14/2021 21:50:53' prior: 50879269!
test07CartWithOneBookGivesPriceSummaryCorrectly
	
	cart addToCart: ISBNCormen withQuantity: 1. 
	self assert: cart priceSummary equals: CormenPrice.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/14/2021 21:51:12' prior: 50884559!
test08DenyRegisterOneBookHasDifferentQuantityThanRegistered
	cart addToCart: ISBNCormen withQuantity: 10.
	
	self deny:( cart contains: ISBNCormen withQuantity: 1)! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 21:51:37' prior: 50890281!
test01CheckoutEmptyCarShouldRaiseError


	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier emptyCartError equals: anError messageText.
				self assert: salesList isEmpty .
			
			]
	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 21:51:56' prior: 50890262!
test02CheckoutOfCartIsTheSameAsCartSummaryPrice

	cart addToCart: ISBNCormen withQuantity: 10.
	cashier checkOutCart: cart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList.
	self assert: ( salesList first) equals: cart priceSummary.

	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 21:52:18' prior: 50890414!
test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice

	cart addToCart: ISBNCormen withQuantity: 10. 
	cart addToCart: ISBNWatkins withQuantity: 10. 
	cashier checkOutCart: cart usingCreditCard: self createValidCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList.
	self assert: ( salesList first) equals: cart priceSummary.
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 21:52:45' prior: 50890302!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 
	cashier := self createCashier.
	
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createExpiredCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 21:53:02' prior: 50890322!
test06CannotCheckoutCartWithCreditCardWithoutFunds

	cart addToCart: ISBNCormen withQuantity: 10. 
	
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createCreditCardWithoutFunds onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 21:53:21' prior: 50890361!
test07CannotCheckoutCartWithStolenCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 
	cashier := self createCashier.
	
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createStolenCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Stolen CreditCard' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/14/2021 21:53:49' prior: 50890342!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 
	cashier := self createCashier.
	
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createFakeCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 21:53:50'!
ERROR!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 21:54:00'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 21:54:00'!
ERROR!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 21:54:00'!
ERROR!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 21:54:00'!
ERROR!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 21:54:00'!
ERROR!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 21:54:00'!
ERROR!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 21:54:00'!
ERROR!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 21:54:00'!
ERROR!
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/14/2021 21:54:44' prior: 50891203 overrides: 16927572!
setUp
	cart:= self createCart .
	cashier:= self createCashier .
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	todayMonthOfYear := FixedGregorianDate today monthOfYear.
	validExpiration := todayMonthOfYear next: 40*month.
	salesList:= OrderedCollection new.
	! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 21:54:46'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 21:54:46'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 21:54:46'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 21:54:46'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 21:54:46'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 21:54:46'!
ERROR!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/14/2021 21:54:46'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 21:54:46'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 21:54:46'!
ERROR!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/14/2021 21:54:46'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 21:54:46'!
FAILURE!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 21:54:46'!
ERROR!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 21:54:46'!
ERROR!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 21:54:46'!
ERROR!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 21:54:46'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 21:54:46'!
ERROR!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 21:54:46'!
ERROR!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 21:54:46'!
ERROR!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 21:54:46'!
ERROR!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 21:55:16'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 21:55:16'!
ERROR!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 21:55:16'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 21:55:16'!
FAILURE!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 21:55:16'!
ERROR!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 21:55:16'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 21:55:16'!
ERROR!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 21:55:16'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 21:55:32'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 21:55:40'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 21:55:40'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 21:56:18'!
ERROR!
!TestsTusLibros methodsFor: 'private-create' stamp: 'AM 6/14/2021 21:56:59' prior: 50891445 overrides: 16927572!
setUp
	
	ISBNCormen :='9780262033848'.
	ISBNBible := '9780840700551'.
	ISBNWatkins:= '9780470528334'.
	CormenPrice := 60.
	WatkinsPrice := 30.
	validCardNumber  := '1234456712345678'.
	validName := 'Alejandro Mercado'.
	invalidNumber := '12134' .
	invalidName := 'asjdklsajkldsajlkdasjlkdasjlksajd'.
	todayMonthOfYear := FixedGregorianDate today monthOfYear.
	validExpiration := todayMonthOfYear next: 40*month.
	salesList:= OrderedCollection new.
	cart:= self createCart .
	cashier:= self createCashier .
	! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/14/2021 21:57:04'!
PASSED!

----QUIT----(14 June 2021 21:57:12) CuisUniversity-4532.image priorSource: 17904751!

----STARTUP---- (14 June 2021 23:56:29) as C:\Users\alejo\Documents\Cosas Facu\Inge 1\windows64\CuisUniversity-4532.image!


----QUIT----(14 June 2021 23:56:39) CuisUniversity-4532.image priorSource: 17920166!

----STARTUP---- (17 June 2021 12:38:26) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!

!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/17/2021 12:42:52'!
test07CartWithBooksGivesPriceSummaryCorrectly
	
	cart addToCart: ISBNCormen withQuantity: 1. 
	self assert: cart priceSummary equals: CormenPrice.! !

!methodRemoval: TestsTusLibros #test07CartWithOneBookGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:42:52'!
test07CartWithOneBookGivesPriceSummaryCorrectly
	
	cart addToCart: ISBNCormen withQuantity: 1. 
	self assert: cart priceSummary equals: CormenPrice.!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/17/2021 12:43:03' prior: 50891669!
test07CartWithBooksGivesPriceSummaryCorrectly
	
	cart addToCart: ISBNCormen withQuantity: 2. 
	self assert: cart priceSummary equals: CormenPrice * 2.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/17/2021 12:43:06' prior: 50891685!
test07CartWithBooksGivesPriceSummaryCorrectly
	
	cart addToCart: ISBNCormen withQuantity: 2. 
	self assert: cart priceSummary equals: CormenPrice * 2.! !

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 12:43:06'!
PASSED!

!testRun: #TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/17/2021 12:43:06'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'AM 6/17/2021 12:43:52'!
test08DenyCartHasDifferentQuantityOfBookThanAdded
	cart addToCart: ISBNCormen withQuantity: 10.
	
	self deny:( cart contains: ISBNCormen withQuantity: 1)! !

!methodRemoval: TestsTusLibros #test08DenyRegisterOneBookHasDifferentQuantityThanRegistered stamp: 'AM 6/17/2021 12:43:52'!
test08DenyRegisterOneBookHasDifferentQuantityThanRegistered
	cart addToCart: ISBNCormen withQuantity: 10.
	
	self deny:( cart contains: ISBNCormen withQuantity: 1)!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/17/2021 12:49:17' prior: 50880476!
test01CantCreateCreditCardWithInvalidNumber

self assert: [self createCreditCardWithInvalidNumber] isValidIndexFor: CreditCard invalidCardNumber.


	"self 
		should: [self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumber equals: anError messageText.
			
			]"

	
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/17/2021 12:49:28' prior: 50891787!
test01CantCreateCreditCardWithInvalidNumber

self assertWhen: [self createCreditCardWithInvalidNumber] raiseError: CreditCard invalidCardNumber.


	"self 
		should: [self createCreditCardWithInvalidNumber]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumber equals: anError messageText.
			
			]"

	
	! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:49:35'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 12:49:45'!
assertWhen: aBlockClosure raiseError: aString 
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 12:50:53' prior: 50891820!
assertWhen: aBlockClosure raiseError: anErrorMessage 
	self 
		should: aBlockClosure
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anErrorMessage equals: anError messageText.
			
			]! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 12:51:27' prior: 50891826!
assertWhen: creditCardCreationBlock raiseError: anErrorMessage 
	self 
		should: creditCardCreationBlock
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anErrorMessage equals: anError messageText.
			
			]! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 12:51:29'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 12:51:29'!
PASSED!
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/17/2021 12:51:35' prior: 50891802!
test01CantCreateCreditCardWithInvalidNumber

self assertWhen: [self createCreditCardWithInvalidNumber] raiseError: CreditCard invalidCardNumber.


	
	! !
!TestsTusLibros methodsFor: 'testCreditCard' stamp: 'AM 6/17/2021 12:52:06' prior: 50880627!
test02CantCreateCreditCardWithInvalidName

self assertWhen: [ self createCreditCardWithInvalidName] raiseError: CreditCard invalidCardName.


	
	! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 12:52:07'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 12:52:07'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 12:55:55' prior: 50891397!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createFakeCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Fake CreditCard' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 12:55:56'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 12:55:56'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 12:56:03' prior: 50891379!
test07CannotCheckoutCartWithStolenCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createStolenCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Stolen CreditCard' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 12:56:12' prior: 50891344!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createExpiredCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 12:56:18' prior: 50891362!
test06CannotCheckoutCartWithCreditCardWithoutFunds

	cart addToCart: ISBNCormen withQuantity: 10. 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createCreditCardWithoutFunds onMonthOfYear: todayMonthOfYear andRegisterOn: salesList]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: 'Insufficient funds' equals: anError messageText.
				self assert: salesList isEmpty .
			]


	
	! !
!MerchantProcessor class methodsFor: 'no messages' stamp: 'AM 6/17/2021 12:58:29'!
insufficientFundsError
	^'Insufficient funds'! !
!MerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 12:59:12'!
stolenCardError
^'Stolen CreditCard'! !
!MerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 12:59:38'!
fakeCardError
^'Fake CreditCard'! !
!MerchantProcessor methodsFor: 'debit' stamp: 'AM 6/17/2021 13:00:55' prior: 50890958!
debitCreditCard: aCreditCard forAmount: anAmount
	 aCreditCard number = fundlessCard ifTrue: [self error: self class insufficientFundsError ].
	aCreditCard number = stolenCard ifTrue: [self error: self class stolenCardError ].
	aCreditCard number = fakeCard ifTrue: [self error: self class fakeCardError ].! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:03:48' prior: 50892106!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertWhenCheckoutWith: self createExpiredCreditCard throwsError: Cashier expiredCardError.
	
	"self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createExpiredCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
				self assert: salesList isEmpty .
			]"


	
	! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:03:53'!
ERROR!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:04:00' prior: 50892167!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWith: self createExpiredCreditCard throwsError: Cashier expiredCardError.
	
	"self 
		should: [	cashier checkOutCart: cart usingCreditCard: self createExpiredCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cashier expiredCardError equals: anError messageText.
				self assert: salesList isEmpty .
			]"


	
	! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:04:03'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:04:11'!
assertCheckoutWith: aCreditCard throwsError: aString 
	self shouldBeImplemented.! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:06:51' prior: 50892214!
assertCheckoutWith: aCreditCard throwsError: anErrorMessage 
	self 
		should: ([:creditCard |	cashier checkOutCart: cart usingCreditCard: creditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ] value: aCreditCard)
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:06:58'!
ERROR!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:07:07'!
ERROR!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:10:31' prior: 50892220!
assertCheckoutWith: aCreditCard throwsError: anErrorMessage 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:10:40'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 13:10:40'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:10:48' prior: 50892191!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWith: self createExpiredCreditCard throwsError: Cashier expiredCardError.
	


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:11:42' prior: 50892123!
test06CannotCheckoutCartWithCreditCardWithoutFunds

	cart addToCart: ISBNCormen withQuantity: 10. 
	self assertCheckoutWith: self createCreditCardWithoutFunds throwsError: MerchantProcessor insufficientFundsError.



	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:14:42' prior: 50892089!
test07CannotCheckoutCartWithStolenCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWith: self createStolenCreditCard  throwsError: MerchantProcessor stolenCardError .



	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:15:16' prior: 50892003!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWith: self createFakeCreditCard  throwsError: MerchantProcessor stolenCardError .


	
	! !
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:16:22' prior: 50891302!
test01CheckoutEmptyCarShouldRaiseError

self assertCheckoutWith:  self createValidCreditCard throwsError: Cashier emptyCartError.	
	! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:16:25'!
FAILURE!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 13:16:25'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:16:25'!
FAILURE!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:16:45'!
PASSED!
!TestsTusLibros methodsFor: 'testCashier' stamp: 'AM 6/17/2021 13:16:54' prior: 50892357!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWith: self createFakeCreditCard  throwsError: MerchantProcessor fakeCardError .


	
	! !

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 13:16:55'!
PASSED!

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:16:56'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 13:16:56'!
PASSED!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:50'!
assertCheckoutWithCard: aCreditCard doesntRegisterToSalesListAndthrowsError: anErrorMessage 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:50' prior: 50892347!
test07CannotCheckoutCartWithStolenCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createStolenCreditCard  doesntRegisterToSalesListAndthrowsError: MerchantProcessor stolenCardError .



	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:50' prior: 50892337!
test06CannotCheckoutCartWithCreditCardWithoutFunds

	cart addToCart: ISBNCormen withQuantity: 10. 
	self assertCheckoutWithCard: self createCreditCardWithoutFunds doesntRegisterToSalesListAndthrowsError: MerchantProcessor insufficientFundsError.



	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:51' prior: 50892367!
test01CheckoutEmptyCarShouldRaiseError

self assertCheckoutWithCard:  self createValidCreditCard doesntRegisterToSalesListAndthrowsError: Cashier emptyCartError.	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:51' prior: 50892451!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createFakeCreditCard  doesntRegisterToSalesListAndthrowsError: MerchantProcessor fakeCardError .


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:17:51' prior: 50892327!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createExpiredCreditCard doesntRegisterToSalesListAndthrowsError: Cashier expiredCardError.
	


	
	! !

!methodRemoval: TestsTusLibros #assertCheckoutWith:throwsError: stamp: 'AM 6/17/2021 13:17:51'!
assertCheckoutWith: aCreditCard throwsError: anErrorMessage 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]!
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06'!
assertCheckoutWithCard: aCreditCard doesntRegisterToSalesListAndThrowsError: anErrorMessage 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06' prior: 50892557!
test06CannotCheckoutCartWithCreditCardWithoutFunds

	cart addToCart: ISBNCormen withQuantity: 10. 
	self assertCheckoutWithCard: self createCreditCardWithoutFunds doesntRegisterToSalesListAndThrowsError: MerchantProcessor insufficientFundsError.



	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06' prior: 50892589!
test05CannotCheckoutCartWithExpiredCreditCard
	
	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createExpiredCreditCard doesntRegisterToSalesListAndThrowsError: Cashier expiredCardError.
	


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06' prior: 50892569!
test01CheckoutEmptyCarShouldRaiseError

self assertCheckoutWithCard:  self createValidCreditCard doesntRegisterToSalesListAndThrowsError: Cashier emptyCartError.	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06' prior: 50892578!
test08CannotCheckoutCartWithFakeCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createFakeCreditCard  doesntRegisterToSalesListAndThrowsError: MerchantProcessor fakeCardError .


	
	! !
!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'AM 6/17/2021 13:18:06' prior: 50892546!
test07CannotCheckoutCartWithStolenCreditCard

	cart addToCart: ISBNCormen withQuantity: 10. 	
	self assertCheckoutWithCard: self createStolenCreditCard  doesntRegisterToSalesListAndThrowsError: MerchantProcessor stolenCardError .



	
	! !

!methodRemoval: TestsTusLibros #assertCheckoutWithCard:doesntRegisterToSalesListAndthrowsError: stamp: 'AM 6/17/2021 13:18:06'!
assertCheckoutWithCard: aCreditCard doesntRegisterToSalesListAndthrowsError: anErrorMessage 
	self 
		should: [	cashier checkOutCart: cart usingCreditCard: aCreditCard onMonthOfYear: todayMonthOfYear andRegisterOn: salesList ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anErrorMessage equals: anError messageText.
				self assert: salesList isEmpty .
			]!
!Behavior method!
withCatalog: aCatalog
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithCatalog:
		(aCatalog
			cover: (58 to: 65)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
initializeWithCatalog: aCatalog
	(catalog _ aCatalog
		cover: (46 to: 53)
		declaredAt: (24 to: 31))
		cover: (35 to: 41)
		declaredAt: (35 to: 41).
	(cartContent _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{76 to: 78})
		cover: (57 to: 67)
		declaredAt: (57 to: 67).! !
!Behavior method!
initialize
	(merchantProcessor _ [
	(MerchantProcessor
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{52 to: 54})
		cover: (13 to: 29)
		declaredAt: (13 to: 29).! !
!Behavior method!
initialize
	(fundlessCard _ '0000000000000000' coverAll:
		{31 to: 48})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).
	(stolenCard _ '0000000000000001' coverAll:
		{67 to: 84})
		cover: (52 to: 61)
		declaredAt: (52 to: 61).
	(fakeCard _ '0000000000000002' coverAll:
		{103 to: 120})
		cover: (90 to: 97)
		declaredAt: (90 to: 97).! !
!Behavior method!
invalidCardNumber
	^ 'Invalid creditCard Number' coverAll:
		{22 to: 48}.! !
!Behavior method!
withNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	[
	(self coverAll:
		{76 to: 79}) assertValidNumber:
		(aCreditCardNumber
			cover: (100 to: 116)
			declaredAt: (13 to: 29)) ] valueCoveringAll:
		{81 to: 98}.
	[
	(self coverAll:
		{120 to: 123}) assertValidName:
		(aName
			cover: (142 to: 146)
			declaredAt: (67 to: 71)) ] valueCoveringAll:
		{125 to: 140}.
	^ [
	([
	(self coverAll:
		{152 to: 155}) new ] valueCoveringAll:
		{157 to: 159})
		initializeWithNumber:
			(aCreditCardNumber
				cover: (183 to: 199)
				declaredAt: (13 to: 29))
		expiring:
			(anExpirationDate
				cover: (211 to: 226)
				declaredAt: (41 to: 56))
		andName:
			(aName
				cover: (237 to: 241)
				declaredAt: (67 to: 71)) ] valueCoveringAll:
		{161 to: 181. 201 to: 209. 228 to: 235}.! !
!Behavior method!
assertValidNumber: aCreditCardNumber
	[
	([
	([
	(aCreditCardNumber
		cover: (40 to: 56)
		declaredAt: (20 to: 36)) size ] valueCoveringAll:
		{58 to: 61}) =
		(16 coverAll:
			{65 to: 66}) ] valueCoveringAll:
		{63 to: 63}) ifFalse: [
		[
		(self coverAll:
			{81 to: 84}) error:
			([
			(self coverAll:
				{93 to: 96}) invalidCardNumber ] valueCoveringAll:
				{98 to: 114}) ] valueCoveringAll:
			{86 to: 91} ]] valueCoveringAll:
		{70 to: 77}.! !

!testRun: #TestsTusLibros #test01CantCreateCreditCardWithInvalidNumber stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
assertValidName: aName
	[
	([
	([
	(aName
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) size ] valueCoveringAll:
		{32 to: 35}) >
		(30 coverAll:
			{39 to: 40}) ] valueCoveringAll:
		{37 to: 37}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) invalidCardName ] valueCoveringAll:
				{69 to: 83}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
initializeWithNumber: aCreditCardNumber expiring: anExpirationDate andName: aName
	(number _ aCreditCardNumber
		cover: (96 to: 112)
		declaredAt: (23 to: 39))
		cover: (86 to: 91)
		declaredAt: (86 to: 91).
	(expirationDate _ anExpirationDate
		cover: (134 to: 149)
		declaredAt: (51 to: 66))
		cover: (116 to: 129)
		declaredAt: (116 to: 129).
	(name _ aName
		cover: (162 to: 166)
		declaredAt: (77 to: 81))
		cover: (154 to: 157)
		declaredAt: (154 to: 157).! !
!Behavior method!
emptyCartError
	^ 'Empty cart cannot be checkout' coverAll:
		{19 to: 49}.! !
!Behavior method!
checkOutCart: aCart usingCreditCard: aCreditCard onMonthOfYear: aMonthOfYear andRegisterOn: aSalesList
	[
	([
	(aCart
		cover: (111 to: 115)
		declaredAt: (15 to: 19)) isEmpty ] valueCoveringAll:
		{117 to: 123}) ifTrue: [
		[
		(self coverAll:
			{134 to: 137}) error:
			([
			(Cashier
				cover: (146 to: 152)
				declaredAt: (146 to: 152)) emptyCartError ] valueCoveringAll:
				{154 to: 167}) ] valueCoveringAll:
			{139 to: 144} ]] valueCoveringAll:
		{125 to: 131}.
	[
	([
	(aCreditCard
		cover: (173 to: 183)
		declaredAt: (38 to: 48)) isExpiredOn:
		(aMonthOfYear
			cover: (198 to: 209)
			declaredAt: (65 to: 76)) ] valueCoveringAll:
		{185 to: 196}) ifTrue: [
		[
		(self coverAll:
			{220 to: 223}) error:
			([
			(Cashier
				cover: (232 to: 238)
				declaredAt: (146 to: 152)) expiredCardError ] valueCoveringAll:
				{240 to: 255}) ] valueCoveringAll:
			{225 to: 230} ]] valueCoveringAll:
		{212 to: 218}.
	[
	[
	[
	(merchantProcessor
		cover: (266 to: 282)
		declaredAt: (266 to: 282))
		debitCreditCard:
			(aCreditCard
				cover: (301 to: 311)
				declaredAt: (38 to: 48))
		forAmount:
			([
			(aCart
				cover: (325 to: 329)
				declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
				{331 to: 342}) ] valueCoveringAll:
		{284 to: 299. 313 to: 322} ]
		on:
			(Error
				cover: (349 to: 353)
				declaredAt: (349 to: 353))
		do: [ :error |
			[
			(self coverAll:
				{367 to: 370}) error:
				([
				(error
					cover: (380 to: 384)
					declaredAt: (360 to: 364)) messageText ] valueCoveringAll:
					{386 to: 396}) ] valueCoveringAll:
				{372 to: 377} ]] valueCoveringAll:
		{345 to: 347. 355 to: 357}.
	[
	(aSalesList
		cover: (403 to: 412)
		declaredAt: (93 to: 102)) addLast:
		([
		(aCart
			cover: (423 to: 427)
			declaredAt: (15 to: 19)) priceSummary ] valueCoveringAll:
			{429 to: 440}) ] valueCoveringAll:
		{414 to: 421}.! !
!Behavior method!
isEmpty
	^ [
	([
	(self coverAll:
		{12 to: 15}) size ] valueCoveringAll:
		{17 to: 20}) =
		(0 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}.! !
!Behavior method!
size
	^ [
	(cartContent
		cover: (8 to: 18)
		declaredAt: (8 to: 18)) size ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TestsTusLibros #test01CheckoutEmptyCarShouldRaiseError stamp: 'AM 6/17/2021 13:19:04'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
invalidCardName
	^ 'Invalid Name' coverAll:
		{19 to: 32}.! !

!testRun: #TestsTusLibros #test02CantCreateCreditCardWithInvalidName stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
addToCart: anISBN withQuantity: aNumber
	[
	(self coverAll:
		{44 to: 47}) assertISBNValid:
		(anISBN
			cover: (66 to: 71)
			declaredAt: (12 to: 17)) ] valueCoveringAll:
		{49 to: 64}.
	[
	(self coverAll:
		{75 to: 78}) assertValidQuantity:
		(aNumber
			cover: (101 to: 107)
			declaredAt: (33 to: 39)) ] valueCoveringAll:
		{80 to: 99}.
	[
	(cartContent
		cover: (114 to: 124)
		declaredAt: (114 to: 124))
		add:
			(anISBN
				cover: (131 to: 136)
				declaredAt: (12 to: 17))
		withOccurrences:
			(aNumber
				cover: (155 to: 161)
				declaredAt: (33 to: 39)) ] valueCoveringAll:
		{126 to: 129. 138 to: 153}.! !
!Behavior method!
assertISBNValid: anISBN
	^ [
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anISBN
			cover: (51 to: 56)
			declaredAt: (18 to: 23)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{68 to: 71}) error:
			([
			(Cart
				cover: (81 to: 84)
				declaredAt: (81 to: 84)) invalidISBNError ] valueCoveringAll:
				{86 to: 101}) ] valueCoveringAll:
			{73 to: 78} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
assertValidQuantity: aNumber
	^ [
	([
	(aNumber
		cover: (35 to: 41)
		declaredAt: (22 to: 28)) <
		(1 coverAll:
			{43 to: 43}) ] valueCoveringAll:
		{42 to: 42}) ifTrue: [
		[
		(self coverAll:
			{55 to: 58}) error:
			([
			(Cart
				cover: (68 to: 71)
				declaredAt: (68 to: 71)) zeroBooksAddedError ] valueCoveringAll:
				{73 to: 91}) ] valueCoveringAll:
			{60 to: 65} ]] valueCoveringAll:
		{46 to: 52}.! !
!Behavior method!
isExpiredOn: aMonthOfYear
	^ [
	(aMonthOfYear
		cover: (31 to: 42)
		declaredAt: (14 to: 25)) >=
		(expirationDate
			cover: (45 to: 58)
			declaredAt: (45 to: 58)) ] valueCoveringAll:
		{43 to: 44}.! !
!Behavior method!
priceSummary
	^ [
	(cartContent
		cover: (17 to: 27)
		declaredAt: (17 to: 27))
		sum: [ :aBook |
			[
			(catalog
				cover: (44 to: 50)
				declaredAt: (44 to: 50)) at:
				(aBook
					cover: (56 to: 60)
					declaredAt: (37 to: 41)) ] valueCoveringAll:
				{52 to: 54} ]
		ifEmpty: [
			0 coverAll:
				{72 to: 72} ]] valueCoveringAll:
		{29 to: 32. 63 to: 70}.! !
!Behavior method!
debitCreditCard: aCreditCard forAmount: anAmount
	[
	([
	([
	(aCreditCard
		cover: (52 to: 62)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{64 to: 69}) =
		(fundlessCard
			cover: (73 to: 84)
			declaredAt: (73 to: 84)) ] valueCoveringAll:
		{71 to: 71}) ifTrue: [
		[
		(self coverAll:
			{95 to: 98}) error:
			([
			([
			(self coverAll:
				{107 to: 110}) class ] valueCoveringAll:
				{112 to: 116}) insufficientFundsError ] valueCoveringAll:
				{118 to: 139}) ] valueCoveringAll:
			{100 to: 105} ]] valueCoveringAll:
		{86 to: 92}.
	[
	([
	([
	(aCreditCard
		cover: (145 to: 155)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{157 to: 162}) =
		(stolenCard
			cover: (166 to: 175)
			declaredAt: (166 to: 175)) ] valueCoveringAll:
		{164 to: 164}) ifTrue: [
		[
		(self coverAll:
			{186 to: 189}) error:
			([
			([
			(self coverAll:
				{198 to: 201}) class ] valueCoveringAll:
				{203 to: 207}) stolenCardError ] valueCoveringAll:
				{209 to: 223}) ] valueCoveringAll:
			{191 to: 196} ]] valueCoveringAll:
		{177 to: 183}.
	[
	([
	([
	(aCreditCard
		cover: (229 to: 239)
		declaredAt: (18 to: 28)) number ] valueCoveringAll:
		{241 to: 246}) =
		(fakeCard
			cover: (250 to: 257)
			declaredAt: (250 to: 257)) ] valueCoveringAll:
		{248 to: 248}) ifTrue: [
		[
		(self coverAll:
			{268 to: 271}) error:
			([
			([
			(self coverAll:
				{280 to: 283}) class ] valueCoveringAll:
				{285 to: 289}) fakeCardError ] valueCoveringAll:
				{291 to: 303}) ] valueCoveringAll:
			{273 to: 278} ]] valueCoveringAll:
		{259 to: 265}.! !
!Behavior method!
number
	^ [
	(number
		cover: (11 to: 16)
		declaredAt: (11 to: 16)) copy ] valueCoveringAll:
		{18 to: 21}.! !

!testRun: #TestsTusLibros #test02CheckoutOfCartIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
contains: anISBN withQuantity: aNumber
	^ [
	(aNumber
		cover: (45 to: 51)
		declaredAt: (32 to: 38)) =
		([
		(cartContent
			cover: (56 to: 66)
			declaredAt: (56 to: 66)) occurrencesOf:
			(anISBN
				cover: (83 to: 88)
				declaredAt: (11 to: 16)) ] valueCoveringAll:
			{68 to: 81}) ] valueCoveringAll:
		{53 to: 53}.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'AM 6/17/2021 13:19:04'!
PASSED!

!testRun: #TestsTusLibros #test03CreditCardKnowsIsExpiredIfExpired stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
invalidISBNError
	^ 'Book not in Catalog' coverAll:
		{20 to: 40}.! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'AM 6/17/2021 13:19:04'!
PASSED!

!testRun: #TestsTusLibros #test04CheckoutCartWithManyBooksAndQuantityIsTheSameAsCartSummaryPrice stamp: 'AM 6/17/2021 13:19:04'!
PASSED!

!testRun: #TestsTusLibros #test04CreditCardKnowsIsNotExpiredIfNotExpired stamp: 'AM 6/17/2021 13:19:04'!
PASSED!
!Behavior method!
zeroBooksAddedError
	^ 'Must add at least one book' coverAll:
		{23 to: 50}.! !

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'AM 6/17/2021 13:19:05'!
PASSED!
!Behavior method!
expiredCardError
	^ 'Expired card' coverAll:
		{20 to: 33}.! !

!testRun: #TestsTusLibros #test05CannotCheckoutCartWithExpiredCreditCard stamp: 'AM 6/17/2021 13:19:05'!
PASSED!
!Behavior method!
listCart
	| list |
	(list _ [
	(OrderedCollection
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) new ] valueCoveringAll:
		{45 to: 47})
		cover: (19 to: 22)
		declaredAt: (12 to: 15).
	[
	([
	(cartContent
		cover: (51 to: 61)
		declaredAt: (51 to: 61)) asSet ] valueCoveringAll:
		{63 to: 67}) do: [ :aBook |
		[
		(list
			cover: (83 to: 86)
			declaredAt: (12 to: 15)) add:
			({aBook. cartContent occurrencesOf: aBook} coverAll:
				{93 to: 134}) ] valueCoveringAll:
			{88 to: 91} ]] valueCoveringAll:
		{69 to: 71}.
	^ list
		cover: (140 to: 143)
		declaredAt: (12 to: 15).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'AM 6/17/2021 13:19:05'!
PASSED!
!Behavior method!
insufficientFundsError
	^ 'Insufficient funds' coverAll:
		{26 to: 45}.! !

!testRun: #TestsTusLibros #test06CannotCheckoutCartWithCreditCardWithoutFunds stamp: 'AM 6/17/2021 13:19:05'!
PASSED!

!testRun: #TestsTusLibros #test06EmptyCartGivesPriceSummary0 stamp: 'AM 6/17/2021 13:19:05'!
PASSED!
!Behavior method!
stolenCardError
	^ 'Stolen CreditCard' coverAll:
		{18 to: 36}.! !

!testRun: #TestsTusLibros #test07CannotCheckoutCartWithStolenCreditCard stamp: 'AM 6/17/2021 13:19:05'!
PASSED!

!testRun: #TestsTusLibros #test07CartWithBooksGivesPriceSummaryCorrectly stamp: 'AM 6/17/2021 13:19:05'!
PASSED!
!Behavior method!
fakeCardError
	^ 'Fake CreditCard' coverAll:
		{16 to: 32}.! !

!testRun: #TestsTusLibros #test08CannotCheckoutCartWithFakeCreditCard stamp: 'AM 6/17/2021 13:19:05'!
PASSED!

!testRun: #TestsTusLibros #test08DenyCartHasDifferentQuantityOfBookThanAdded stamp: 'AM 6/17/2021 13:19:05'!
PASSED!

----SNAPSHOT----(17 June 2021 13:24:37) CuisUniversity-4532.image priorSource: 17920377!

----QUIT----(17 June 2021 13:24:40) CuisUniversity-4532.image priorSource: 17967203!