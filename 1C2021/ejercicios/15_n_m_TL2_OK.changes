----STARTUP---- (10 June 2021 18:35:36) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!

!CartTest methodsFor: 'tests' stamp: 'DV 6/10/2021 18:35:51'!
test08CartRememberTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !

!methodRemoval: CartTest #test08CartRememberTheNumberOfAddedItems stamp: 'DV 6/10/2021 18:35:58'!
test08CartRememberTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2!

----SNAPSHOT----(10 June 2021 18:37:30) CuisUniversity-4532.image priorSource: 18008240!

----QUIT----(10 June 2021 18:37:33) CuisUniversity-4532.image priorSource: 18008988!

----STARTUP---- (10 June 2021 18:39:32) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!


TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'DV 6/10/2021 18:46:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Cashier
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/10/2021 18:46:47'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'DV 6/10/2021 19:45:55'!
test01CheckOutOfEmptyCartRaisesErrorCannotCheckoutOfEmptyCart

	|cashier|
	
	cashier :=self createCashierWith: self createEmptyCart
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/10/2021 19:50:23'!
test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart

	|cashier|
	
	cashier :=self createCashierWith: self createEmptyCart.
	
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier CannotCheckoutEmptyCart].! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart stamp: 'DV 6/10/2021 19:50:33'!
ERROR!

!methodRemoval: CashierTest #test01CheckOutOfEmptyCartRaisesErrorCannotCheckoutOfEmptyCart stamp: 'DV 6/10/2021 19:50:50'!
test01CheckOutOfEmptyCartRaisesErrorCannotCheckoutOfEmptyCart

	|cashier|
	
	cashier :=self createCashierWith: self createEmptyCart
	!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 19:52:29' prior: 50894469!
test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart

	| cashier |
	cashier :=self createCashierWith: self createEmptyCart.
	
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier CannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 19:52:58' prior: 50894493!
test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart

	| cashier |
	cashier := self createCashierWith: self createEmptyCart.
	
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier CannotCheckoutEmptyCart].! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart stamp: 'DV 6/10/2021 19:53:04'!
ERROR!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart stamp: 'DV 6/10/2021 19:53:04'!
ERROR!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart stamp: 'DV 6/10/2021 19:53:31'!
ERROR!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart stamp: 'DV 6/10/2021 19:53:31'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 19:54:31'!
createEmptyCart
	^ Cart! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 19:55:02' prior: 50894532!
createEmptyCart
	^ Cart acceptingItemsOf: [].! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart stamp: 'DV 6/10/2021 19:56:45'!
ERROR!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart stamp: 'DV 6/10/2021 19:56:45'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 19:57:34'!
createCashierWith: aDebitCard
	^ Cashier with: aDebitCard ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 20:02:06'!
test01CheckOutEmptyCartRaisesError

	| cashier |
	cashier := self createCashierWith: self createEmptyCart.
	
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier CannotCheckoutEmptyCart].! !

!methodRemoval: CashierTest #test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart stamp: 'DV 6/10/2021 20:02:06'!
test01CheckOutEmptyCartRaisesErrorCannotCheckoutEmptyCart

	| cashier |
	cashier := self createCashierWith: self createEmptyCart.
	
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier CannotCheckoutEmptyCart].!
!CashierTest methodsFor: 'nil' stamp: 'DV 6/10/2021 20:06:12'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/10/2021 20:06:40'!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:07:52'!
createCart
	^Cart acceptingItemsOf: self defaultCatalog! !

!methodRemoval: CashierTest #createEmptyCart stamp: 'DV 6/10/2021 20:08:03'!
createEmptyCart
	^ Cart acceptingItemsOf: [].!
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:08:46' prior: 50894548!
createCashierWith: aPriceChart
	^ Cashier with: aPriceChart! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:11:50'!
defaultPriceChart
	
	^ Dictionary newFromPairs: {self itemSellByTheStore . 100}. ! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:12:09' prior: 50894598!
defaultPriceChart
	
	^ Dictionary newFromPairs: {self itemSellByTheStore . 100}. ! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:12:44'!
createCashier
	^ Cashier with: self defaultPriceChart ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 20:13:43' prior: 50894552!
test01CheckOutEmptyCartRaisesError

	| cashier |
	cashier := self createCashier.
	
	self should: [cashier checkout: self createCart ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier CannotCheckoutEmptyCart].! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:13:50'!
ERROR!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:13:50'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/10/2021 20:14:00'!
with: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/10/2021 20:14:17' prior: 50894631!
with: aDictionary 
	^self new initializeWith: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/10/2021 20:14:33' prior: 50894639!
with: aPriceChart
	^self new initializeWith: aPriceChart ! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:14:38'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/10/2021 20:14:54'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initializa' stamp: 'DV 6/10/2021 20:14:54'!
initializeWith: aPriceChart 
	self shouldBeImplemented.
	priceChart := aPriceChart.! !
!Cashier methodsFor: 'initializa' stamp: 'DV 6/10/2021 20:15:26' prior: 50894659!
initializeWith: aPriceChart 
	priceChart := aPriceChart.! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:15:27'!
ERROR!
!Cashier class methodsFor: 'error' stamp: 'DV 6/10/2021 20:15:45'!
CannotCheckoutEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error' stamp: 'DV 6/10/2021 20:16:16' prior: 50894673!
CannotCheckoutEmptyCart
	'No se puede facturar un carrito vacio'.! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:16:17'!
FAILURE!
!Cashier class methodsFor: 'error' stamp: 'DV 6/10/2021 20:16:39'!
cannotCheckoutEmptyCart
	'No se puede facturar un carrito vacio'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/10/2021 20:16:39' prior: 50894614!
test01CheckOutEmptyCartRaisesError

	| cashier |
	cashier := self createCashier.
	
	self should: [cashier checkout: self createCart ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].! !

!methodRemoval: Cashier class #CannotCheckoutEmptyCart stamp: 'DV 6/10/2021 20:16:39'!
CannotCheckoutEmptyCart
	'No se puede facturar un carrito vacio'.!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 20:16:50' prior: 50894692!
test01CheckOutEmptyCartRaisesError

	| cashier |
	cashier := self createCashier.
	self should: [cashier checkout: self createCart ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].! !
!Cashier methodsFor: 'nil' stamp: 'DV 6/10/2021 20:17:35'!
checkout: aCart
	self error: self class cannotCheckoutEmptyCart ! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:17:42'!
PASSED!
!Cashier class methodsFor: 'error' stamp: 'DV 6/10/2021 20:18:19' prior: 50894686!
cannotCheckoutEmptyCart
	^'No se puede facturar un carrito vacio'.! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:18:34'!
PASSED!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:18:34'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 20:21:49'!
test02CheckOutOneItemCartReturnsItemsPrice

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self .
	self should: [cashier checkout:   oneItemCart] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 20:22:16' prior: 50894737!
test02CheckOutOneItemCartReturnsItemsPrice

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore .
	self should: [cashier checkout: oneItemCart] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 20:23:00' prior: 50894750!
test02CheckOutOneItemCartReturnsItemsPrice

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart).! !

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:23:01'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/10/2021 20:24:03' prior: 50894718!
checkout: aCart
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
! !
!Cart methodsFor: 'assertions' stamp: 'DV 6/10/2021 20:27:11'!
items
	^items ! !
!Cart methodsFor: 'assertions' stamp: 'DV 6/10/2021 20:27:15' prior: 50894782!
items
	^items copy! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/10/2021 20:27:48' prior: 50894777!
checkout: aCart
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	aCart items do:[]
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/10/2021 20:30:37' prior: 50894790!
checkout: aCart
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	aCart items do:[:item| priceChart at: item ifAbsent: 0]
! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:36:18' prior: 50894604!
defaultPriceChart
	
	^ Dictionary new at:self itemSellByTheStore put:100. ! !

!methodRemoval: Cart #items stamp: 'DV 6/10/2021 20:40:31'!
items
	^items copy!
!Cart methodsFor: 'nil' stamp: 'DV 6/10/2021 20:42:11'!
total
	^items sum:[:item| catalog at: item].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DV 6/10/2021 20:42:43' prior: 50894812!
total
	^items sum: [:item| catalog at: item] ifEmpty: [0].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DV 6/10/2021 20:42:50' prior: 50894817!
total
	^items sum: [:item| catalog at: item] ifEmpty: 0.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'DV 6/10/2021 20:42:53' prior: 50894822!
total
	^items sum: [:item| catalog at: item] ifEmpty: 0! !
!CartTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:43:49' prior: 50894391!
defaultCatalog
	
	^ Dictionary new at: self itemSellByTheStore put: 100! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:44:06' prior: 50894575!
defaultCatalog
	
	^ Dictionary new at: self itemSellByTheStore put: 100! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/10/2021 20:44:38' prior: 50894797!
checkout: aCart
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	^ aCart total
! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:44:55'!
PASSED!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:44:55'!
ERROR!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:44:55'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'DV 6/10/2021 20:45:11' prior: 50894239!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:45:13'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/10/2021 20:46:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/10/2021 20:46:19'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/10/2021 20:46:19'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/10/2021 20:46:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/10/2021 20:46:19'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/10/2021 20:46:19'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/10/2021 20:46:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/10/2021 20:46:19'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/10/2021 20:46:21'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:47:33' prior: 50894832!
defaultCatalog
	| dict |
	dict:=  Dictionary new
	dict at: self itemSellByTheStore put: 100.
	^dict! !
!CartTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:47:41' prior: 50894897!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/10/2021 20:47:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/10/2021 20:47:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/10/2021 20:47:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/10/2021 20:47:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/10/2021 20:47:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/10/2021 20:47:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/10/2021 20:47:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/10/2021 20:47:52'!
PASSED!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:47:59'!
PASSED!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:47:59'!
ERROR!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:47:59'!
ERROR!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:48:28'!
PASSED!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:48:28'!
ERROR!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:48:28'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:49:06' prior: 50894837!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:49:09'!
PASSED!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:49:09'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:49:26' prior: 50894609!
createCashier
	^ Cashier! !

!methodRemoval: CashierTest #createCashierWith: stamp: 'DV 6/10/2021 20:49:29'!
createCashierWith: aPriceChart
	^ Cashier with: aPriceChart!

!methodRemoval: CashierTest #defaultPriceChart stamp: 'DV 6/10/2021 20:49:38'!
defaultPriceChart
	
	^ Dictionary new at:self itemSellByTheStore put:100. !

!methodRemoval: Cashier #initializeWith: stamp: 'DV 6/10/2021 20:49:53'!
initializeWith: aPriceChart 
	priceChart := aPriceChart.!

!methodRemoval: Cashier class #with: stamp: 'DV 6/10/2021 20:50:04'!
with: aPriceChart
	^self new initializeWith: aPriceChart !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:50:09'!
FAILURE!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:50:10'!
ERROR!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:50:13'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'DV 6/10/2021 20:50:39' prior: 50894967!
createCashier
	^ Cashier new! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/10/2021 20:50:41'!
PASSED!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/10/2021 20:50:41'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 20:51:20'!
test02CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart).! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 20:51:31'!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart).! !

!methodRemoval: CashierTest #test02CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/10/2021 20:51:31'!
test02CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart).!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/10/2021 20:53:07' prior: 50895018!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: 21/07/98 ).! !

July/24!

July/2024!

----QUIT----(10 June 2021 21:45:17) CuisUniversity-4532.image priorSource: 18009078!

----STARTUP---- (13 June 2021 13:50:20) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!

!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 14:46:10' prior: 50895039!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: July/24 ).! !

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/13/2021 14:46:11'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/13/2021 14:46:56'!
checkout: aCart withCard: aDebitCard
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	^ aCart total
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/13/2021 14:48:57' prior: 50895071!
checkout: aCart withCard: aDebitCard
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	( Date today < aDebitCard ) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]
	^ aCart total
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/13/2021 14:49:02' prior: 50895078!
checkout: aCart withCard: aDebitCard
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	( Date today < aDebitCard ) ifTrue: [self error: self class cannotCheckoutWithExpiredCard].
	^ aCart total
! !
!Cashier class methodsFor: 'error' stamp: 'DV 6/13/2021 14:49:27'!
cannotCheckoutWithExpiredCard
	^'No se puede facturar una tarjeta vencida'.! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 14:51:22' prior: 50895057!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: July/24 ).
	
	self 
		should: [cashier checkout: oneItemCart withCard: July/20 ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 14:51:34' prior: 50895102!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: July/20 ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !

Date today!

July/20 < Date today!

July/20!

July/20!

July/2020!

2020/July!

1/July/2020!

01/07/2020
!

07/2020
!

July!

July!

 GregorianMonthOfYear year: 2020  month: 07!

 GregorianMonthOfYear year: 2020  month: July!

 (GregorianMonthOfYear year: 2020  month: July) < (GregorianMonthOfYear year: 2021  month: July)!

 (GregorianMonthOfYear year: 2020  month: July) < (GregorianMonthOfYear year: 2020  month: July)!

 (GregorianMonthOfYear year: 2020  month: July) < (GregorianMonthOfYear year: 2020  month: June)!

 (GregorianMonthOfYear year: 2020  month: July) < (GregorianMonthOfYear year: 2020  month: September)!


Date today!


Date year!


Date month!

Date today year!


Date today month!

 (GregorianMonthOfYear year: 2020  month: July) < (Date today month)!

 (GregorianMonthOfYear year: 2020  month: July) < (Date today month).!

 (GregorianMonthOfYear year: 2020  month: July) < (GregorianMonthOfYear year: 2021 month: (Date today month))
!


Date today year!

 (GregorianMonthOfYear year: 2020  month: July) < (GregorianMonthOfYear year: Date today year month: (Date today month))
!


Date today yearNumber !


Date today monthNumber!


Date today month!


Date today month index!


Date today month monthIndex!
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/13/2021 15:28:35'!
currentMonthOfYear
	^ GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/13/2021 15:29:48' prior: 50895088!
checkout: aCart withCard: aDebitCard
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	self error: self class cannotCheckoutWithExpiredCard.
	'''( Date today < aDebitCard ) ifTrue: [self error: self class cannotCheckoutWithExpiredCard].'''
	^ aCart total
! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/13/2021 15:29:49'!
PASSED!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/13/2021 15:29:49'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/13/2021 15:29:49'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'DV 6/13/2021 15:31:41'!
expiredDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) - 1 monthNumber: (Date today month monthIndex)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:31:57' prior: 50895119!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredDate ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:33:00'!
test04CheckOutWithNonExpiredCard

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredDate ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:35:17'!
test04CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self expiredDate)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:35:33' prior: 50895235!
test04CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self expiredDate)! !

!testRun: #CashierTest #test04CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/13/2021 15:35:41'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/13/2021 15:36:35' prior: 50895179!
checkout: aCart withCard: aDebitCard
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	(self currentMonthOfYear < aDebitCard ) ifTrue: [self error: self class cannotCheckoutWithExpiredCard].
	^ aCart total
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/13/2021 15:36:49' prior: 50895261!
checkout: aCart withCard: aExpirationDate
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	(self currentMonthOfYear < aExpirationDate ) ifTrue: [self error: self class cannotCheckoutWithExpiredCard].
	^ aCart total
! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/13/2021 15:36:57'!
PASSED!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/13/2021 15:36:57'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/13/2021 15:36:57'!
FAILURE!

!testRun: #CashierTest #test04CheckOutWithNonExpiredCard stamp: 'DV 6/13/2021 15:36:57'!
FAILURE!

!testRun: #CashierTest #test04CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/13/2021 15:36:57'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/13/2021 15:37:03'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/13/2021 15:37:36' prior: 50895272!
checkout: aCart withCard: aExpirationDate
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	(aExpirationDate < self currentMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard].
	^ aCart total
! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/13/2021 15:37:37'!
PASSED!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/13/2021 15:37:37'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/13/2021 15:37:37'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithNonExpiredCard stamp: 'DV 6/13/2021 15:37:37'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/13/2021 15:37:37'!
ERROR!

!testRun: #CashierTest #test04CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/13/2021 15:37:37'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:38:03' prior: 50895246!
test04CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self nonExpiredDate)! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/13/2021 15:38:14'!
nonExpiredDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 1 monthNumber: (Date today month monthIndex)! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/13/2021 15:38:15'!
PASSED!

!testRun: #CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/13/2021 15:38:15'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/13/2021 15:38:16'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithNonExpiredCard stamp: 'DV 6/13/2021 15:38:16'!
PASSED!

!testRun: #CashierTest #test04CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/13/2021 15:38:16'!
PASSED!

!methodRemoval: CashierTest #test04CheckOutWithNonExpiredCard stamp: 'DV 6/13/2021 15:38:30'!
test04CheckOutWithNonExpiredCard

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredDate ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]!

!methodRemoval: CashierTest #test02CheckOutOneItemCartReturnsItemsPrice stamp: 'DV 6/13/2021 15:40:20'!
test02CheckOutOneItemCartReturnsItemsPrice

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart).!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:40:47'!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self nonExpiredDate)! !

!methodRemoval: CashierTest #test04CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/13/2021 15:40:47'!
test04CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self nonExpiredDate)!
!CashierTest methodsFor: 'support' stamp: 'DV 6/13/2021 15:46:13'!
nonExpiredCard
	^self nonExpiredDate! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:46:39' prior: 50895207!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/13/2021 15:47:07'!
expiredCard
	^self expiredDate! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:47:24' prior: 50895391!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self nonExpiredCard)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:51:49'!
test04CheckOutWithNotA16DigitsCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:52:15' prior: 50895446!
test04CheckOutWithNotA16DigitsCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self notA16DigitsCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:53:26' prior: 50895461!
test04CheckOutWithNotA16DigitsCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self notA16DigitsNonExpiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 15:54:03' prior: 50895476!
test04CheckOutWithNotA16DigitsCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self nonExpiredCardwithShortCardNumber ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/13/2021 16:16:16'!
nonExpiredCardwithShortCardNumber
	^ Dictionary at: 'number' put: '...'! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 16:16:30'!
xtest04CheckOutWithNotA16DigitsCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self nonExpiredCardwithShortCardNumber ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !

!methodRemoval: CashierTest #test04CheckOutWithNotA16DigitsCreditCardRaisesError stamp: 'DV 6/13/2021 16:16:30'!
test04CheckOutWithNotA16DigitsCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self nonExpiredCardwithShortCardNumber ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 16:17:23'!
test05CheckOutClearsCart

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/13/2021 16:17:24' prior: 50895542!
test05CheckOutClearsCart

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := self createCart add: self itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty! !
!Cart methodsFor: 'queries' stamp: 'DV 6/13/2021 16:19:42'!
clear
	^items removeAll! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/13/2021 16:22:09' prior: 50895303!
checkout: aCart withCard: aExpirationDate
	| total |
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	(aExpirationDate < self currentMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard].
	total := aCart total.
	aCart clear.
	^ total
! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/13/2021 16:22:15'!
PASSED!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/13/2021 16:22:15'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/13/2021 16:22:15'!
PASSED!

!testRun: #CashierTest #test05CheckOutClearsCart stamp: 'DV 6/13/2021 16:22:15'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/13/2021 16:22:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/13/2021 16:22:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/13/2021 16:22:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/13/2021 16:22:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/13/2021 16:22:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/13/2021 16:22:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/13/2021 16:22:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/13/2021 16:22:57'!
PASSED!

----QUIT----(13 June 2021 17:01:46) CuisUniversity-4532.image priorSource: 18028782!

----STARTUP---- (14 June 2021 10:20:35) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!


Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'DV 6/14/2021 10:23:03'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'DV 6/14/2021 10:23:12'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'DV 6/14/2021 10:32:34'!
test01CreatingACardWithANameLongerThan30CharactersRaisesError

	self should:[self createCard] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard ]

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 10:34:01' prior: 50895645!
test01CreatingACardWithANameLongerThan30CharactersRaisesError

	self should:[self createCard] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage]

	! !
!CreditCard class methodsFor: 'no messages' stamp: 'DV 6/14/2021 10:35:10'!
invalidNameErrorMessage
	'EL nombre debe contener como m�ximo 30 caracteres.'! !


	'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' size!
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 10:37:58'!
createCard
	^ CreditCard withOwner: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: '5555555555554444' withExpirationDate:''
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 10:38:39'!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^ CreditCard withOwner: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: '5555555555554444' withExpirationDate:''
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 10:39:00' prior: 50895673!
createCard
	^ CreditCard withOwner: 'Sim�n Bol�var' withNumber: '5555555555554444' withExpirationDate:''
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 10:39:49'!
nonExpiredDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 1 monthNumber: (Date today month monthIndex)! !

Object subclass: #StoreTestObjects
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjects category: 'TusLibros' stamp: 'DV 6/14/2021 10:40:31'!
Object subclass: #StoreTestObjects
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjects methodsFor: 'nil' stamp: 'DV 6/14/2021 10:40:51'!
nonExpiredDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 1 monthNumber: (Date today month monthIndex)! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 10:41:39' prior: 50895681!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^ CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: '5555555555554444' withExpirationDate:''
! !
!CreditCard class methodsFor: 'nil' stamp: 'DV 6/14/2021 10:43:07'!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self error:[self invalidNameErrorMessage]! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 10:43:15' prior: 50895665!
invalidNameErrorMessage
	'El nombre debe contener como m�ximo 30 caracteres.'! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 10:43:18'!
FAILURE!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 10:43:18'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 10:43:40' prior: 50895655!
test01CreatingACardWithANameLongerThan30CharactersRaisesError

	self should:[self createCardWithInvalidNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage]

	! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 10:43:49' prior: 50895691!
createCard
	^ CreditCard withName: 'Sim�n Bol�var' withNumber: '5555555555554444' withExpirationDate:''
! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 10:44:09'!
FAILURE!

 CreditCard invalidNameErrorMessage!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 10:44:39' prior: 50895738!
invalidNameErrorMessage
	^'El nombre debe contener como m�ximo 30 caracteres.'! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 10:44:41'!
FAILURE!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 10:44:41'!
FAILURE!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 10:46:01'!
FAILURE!

anError messageText!
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 10:46:51' prior: 50895722!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: '5555555555554444' withExpirationDate:''
! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 10:48:06' prior: 50895731!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self error: self invalidNameErrorMessage! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 10:48:10'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:04:03'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:04:03'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:04:27'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:04:27'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:07:32'!
test02CreatingACardWithValidNameIsCorrect

	|card|
	
	card := self createCard.
	
	self assert: 'Simon Bolivar' equals:  card name! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:09:50' prior: 50895805!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:09:57'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:09:57'!
ERROR!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:09:57'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'DV 6/14/2021 11:10:12'!
Object subclass: #CreditCard
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'DV 6/14/2021 11:10:12'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'DV 6/14/2021 11:10:13'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'DV 6/14/2021 11:10:13'!
initializeWithName: aName withNumber: aNumber withDate: aDate 
	self shouldBeImplemented.
	name := aName.
	number := aNumber.
	date := aDate.! !
!CreditCard methodsFor: 'initialization' stamp: 'DV 6/14/2021 11:10:19' prior: 50895880!
initializeWithName: aName withNumber: aNumber withDate: aDate 
	name := aName.
	number := aNumber.
	date := aDate.! !

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:10:21'!
FAILURE!
!CreditCard methodsFor: 'nil' stamp: 'DV 6/14/2021 11:10:49' overrides: 16882612!
name 
	^name! !
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:11:56'!
test03CreatingACardWithANumberDifferentThan16DigitsRaisesError

	self should:[self createCardWithInvalidNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage]

	! !
!StoreTestObjects methodsFor: 'nil' stamp: 'DV 6/14/2021 11:12:31'!
createCard
	^ CreditCard withName: 'Sim�n Bol�var' withNumber: '5555555555554444' withExpirationDate:''
! !

!methodRemoval: CreditCardTest #nonExpiredDate stamp: 'DV 6/14/2021 11:13:07'!
nonExpiredDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 1 monthNumber: (Date today month monthIndex)!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'DV 6/14/2021 11:13:50'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:13:48' overrides: 16927572!
setUp 
	testObjects := StoreTestObjects  new! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:14:17' prior: 50895912!
createCard
	^ CreditCard withName: 'Sim�n Bol�var' withNumber: '5555555555554444' withExpirationDate: self nonExpiredDate
! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:14:41'!
validCardName
	^ 'Sim�n Bol�var'! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:15:03' prior: 50895937!
createCard
	^ CreditCard withName: self validCardName withNumber: '5555555555554444' withExpirationDate: self nonExpiredDate
! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:15:19' prior: 50895949!
createCard
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self nonExpiredDate
! !
!StoreTestObjects methodsFor: 'nil' stamp: 'DV 6/14/2021 11:15:42'!
validCardNumber
	^'5555555555554444' ! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:15:55'!
validCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 1 monthNumber: (Date today month monthIndex)! !

!methodRemoval: StoreTestObjects #nonExpiredDate stamp: 'DV 6/14/2021 11:16:02'!
nonExpiredDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 1 monthNumber: (Date today month monthIndex)!
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:16:15' prior: 50895957!
createCard
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self validCardDate ! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:16:25' prior: 50895968!
validCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 5 monthNumber: (Date today month monthIndex)! !

!methodRemoval: CreditCardTest #createCard stamp: 'DV 6/14/2021 11:16:52'!
createCard
	^ CreditCard withName: 'Sim�n Bol�var' withNumber: '5555555555554444' withExpirationDate:''
!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:17:08' prior: 50895831!
test02CreatingACardWithValidNameIsCorrect

	|card|
	
	card := testObjects  createCard.
	
	self assert: 'Simon Bolivar' equals:  card name! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:17:13'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:17:13'!
FAILURE!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:17:13'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:17:13'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:18:53' prior: 50895901!
test03CreatingACardWithANumberDifferentThan16DigitsRaisesError

	self should:[self createCardWithInvalidNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage]! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 11:20:03'!
createCardWithInvalidShortNumberAndValidNameAndExpirationDate
	^CreditCard withName: 'Sim�n Bol�var' withNumber: '' withExpirationDate:''
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 11:20:17' prior: 50895795!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: '5555555555554444' withExpirationDate: testObjects validCardDate 
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 11:20:24' prior: 50896037!
createCardWithInvalidShortNumberAndValidNameAndExpirationDate
	^CreditCard withName: 'Sim�n Bol�var' withNumber: '' withExpirationDate: testObjects validCardDate
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 11:20:41'!
createCardWithInvalidLongNumberAndValidNameAndExpirationDate
	^CreditCard withName: 'Sim�n Bol�var' withNumber: '' withExpirationDate: testObjects validCardDate
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 11:20:58' prior: 50896064!
createCardWithInvalidLongNumberAndValidNameAndExpirationDate
	^CreditCard withName: 'Sim�n Bol�var' withNumber: '666666666666666666666666' withExpirationDate: testObjects validCardDate
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 11:21:32' prior: 50896072!
createCardWithInvalidLongNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: '666666666666666666666666' withExpirationDate: testObjects validCardDate
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 11:21:41' prior: 50896056!
createCardWithInvalidShortNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: '' withExpirationDate: testObjects validCardDate
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 11:21:57' prior: 50896045!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: testObjects validCardNumber withExpirationDate: testObjects validCardDate 
! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:21:59'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:21:59'!
FAILURE!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:21:59'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:21:59'!
FAILURE!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:22:21'!
PASSED!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:23:59' prior: 50895839!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	(aName size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:24:26'!
invalidNumberErrorMessage
	^'El n�mero de tarjeta  debe contener 16 d�gitos.'! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:24:59'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:24:59'!
ERROR!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:24:59'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:24:59'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 11:25:41' prior: 50896129!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	(aNumber size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !

12 size!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 11:32:49' prior: 50896162!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	(aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 11:34:33' prior: 50895964!
validCardNumber
	^5555555555554444 ! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:34:44'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:34:44'!
FAILURE!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:34:44'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:34:44'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:35:12' prior: 50896003!
test02CreatingACardWithValidNameIsCorrect

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals:  card name! !

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:35:13'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:35:35'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:35:35'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:35:35'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:36:12'!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage]! !
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:36:20' prior: 50896026!
test03CreatingACardWithANumberDifferentThan16DigitsRaisesError

	self should:[self createCardWithInvalidNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage]! !
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:37:22' prior: 50896240!
test03CreatingACardWithANumberDifferentThan16DigitsRaisesError

	self should:[self createCardWithInvalidShortNumberAndValidNameAndExpirationDate ] 		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage].
	
	self should:[self createCardWithInvalidLongNumberAndValidNameAndExpirationDate ] 		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage]! !

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:37:23'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:37:23'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:37:23'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:37:23'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:37:23'!
FAILURE!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:37:23'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:37:44' prior: 50896229!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNumberAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage]! !

'5234-3928-3468AB' size
!
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 11:39:34'!
createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: '5234-3928-3468AB' withExpirationDate: testObjects validCardDate ! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:39:35'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:39:35'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:39:35'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:39:35'!
FAILURE!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:39:35'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:39:56' prior: 50896294!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNonDigitsNumberAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage]! !

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:40:00'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:40:26' prior: 50896335!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNonDigitsNumberAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: CreditCard invalidNumberErrorMessage messageText equals: anError]! !
!CreditCard class methodsFor: 'error messages' stamp: 'DV 6/14/2021 11:40:55' prior: 50896141!
invalidNumberErrorMessage
	^'El n�mero de tarjeta debe ser un N�MERO con 16 d�gitos.'! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:41:11'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:41:11'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:41:11'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:41:11'!
ERROR!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:41:11'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:41:24' prior: 50896351!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNonDigitsNumberAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: CreditCard invalidNumberErrorMessage equals: anError messageText]! !

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:41:25'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 11:45:15' prior: 50896175!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	(aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	(aNumber asString) detect:[:c| c isDigit not] ifFound:[self error: self invalidNumberErrorMessage]ifNone:[].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:45:17'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:45:17'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:45:17'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:45:17'!
FAILURE!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:45:17'!
FAILURE!


	  '5234-3928-3468AB' detect:[:c| c isDigit not]!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 11:46:25' prior: 50896404!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	(aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	(aNumber asString) detect:[:c| c isDigit not] ifFound:[:c|self error: self invalidNumberErrorMessage]ifNone:[].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:46:27'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:46:27'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:46:27'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:46:27'!
FAILURE!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:46:27'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 11:46:53' prior: 50896441!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	(aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	(aNumber asString) detect:[:c| c isDigit not] ifFound:[:c| self error: self invalidNumberErrorMessage] ifNone:[].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 11:46:56' prior: 50896306!
createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: '5234-3928-3468AB' withExpirationDate: testObjects validCardDate 
	
	
	
! !

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:47:16'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 11:47:28' prior: 50896388!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: CreditCard invalidNumberErrorMessage equals: anError messageText]! !

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:47:29'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 11:47:29'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 11:47:29'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 11:47:29'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 11:47:29'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:00:41'!
test05CreatingACardWithAnExpiredDateRaisesError
	self should:[self createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: CreditCard invalidNumberErrorMessage equals: anError messageText]! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 12:01:25'!
createCardWithValidNameAndValidNumberAndInvalidExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: testObjects validCardNumber withExpirationDate: testObjects validCardDate 
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 12:01:43' prior: 50896548!
createCardWithValidNameAndValidNumberAndInvalidExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: testObjects validCardNumber withExpirationDate: self invalidCardDate 
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 12:02:02'!
invalidCardDate 
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) -1 monthNumber: (Date today month monthIndex)! !
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:02:22' prior: 50896537!
test05CreatingACardWithAnExpiredDateRaisesError
	self should:[self createCardWithValidNameAndValidNumberAndInvalidExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: CreditCard invalidDateErrorMessage equals: anError messageText]! !
!CreditCard class methodsFor: 'error messages' stamp: 'DV 6/14/2021 12:03:18'!
invalidDateErrorMessage
	^'La fecha de vencimiento de la tarjeta debe ser un mes y a�o en el futuro.'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:04:09' prior: 50896477!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	(aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	(aNumber asString) detect:[:c| c isDigit not] ifFound:[:c| self error: self invalidNumberErrorMessage] ifNone:[].
	(aDate ) ifTrue: [self error: self invalidDateErrorMessage]
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:04:21' prior: 50896591!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	(aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	(aNumber asString) detect:[:c| c isDigit not] ifFound:[:c| self error: self invalidNumberErrorMessage] ifNone:[].
	(aDate < 0) ifTrue: [self error: self invalidDateErrorMessage]
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:04:23' prior: 50896609!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	(aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	(aNumber asString) detect:[:c| c isDigit not] ifFound:[:c| self error: self invalidNumberErrorMessage] ifNone:[].
	(aDate < 0) ifTrue: [self error: self invalidDateErrorMessage].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!StoreTestObjects class methodsFor: 'nil' stamp: 'DV 6/14/2021 12:05:05'!
currentMonthOfYear
	^ GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !

!methodRemoval: StoreTestObjects class #currentMonthOfYear stamp: 'DV 6/14/2021 12:05:11'!
currentMonthOfYear
	^ GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)!
!StoreTestObjects methodsFor: 'nil' stamp: 'DV 6/14/2021 12:05:18'!
currentMonthOfYear
	^ GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !

!methodRemoval: StoreTestObjects #currentMonthOfYear stamp: 'DV 6/14/2021 12:05:26'!
currentMonthOfYear
	^ GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)!
!CreditCard class methodsFor: 'nil' stamp: 'DV 6/14/2021 12:05:45'!
currentMonthOfYear
	^ GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:06:06' prior: 50896627!
withName: aName withNumber: aNumber withExpirationDate: aDate
	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage].
	(aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	(aNumber asString) detect:[:c| c isDigit not] ifFound:[:c| self error: self invalidNumberErrorMessage] ifNone:[].
	(aDate < self currentMonthOfYear) ifTrue: [self error: self invalidDateErrorMessage].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 12:06:10'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 12:06:10'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 12:06:10'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 12:06:10'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithAnExpiredDateRaisesError stamp: 'DV 6/14/2021 12:06:10'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:07:26'!
assertCardNameIsNotLongerThan30Characters: aName

	^ (aName size > 30) ifTrue: [self error: self invalidNameErrorMessage]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:07:26' prior: 50896678!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsNotLongerThan30Characters: aName.
	(aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage].
	(aNumber asString) detect:[:c| c isDigit not] ifFound:[:c| self error: self invalidNumberErrorMessage] ifNone:[].
	(aDate < self currentMonthOfYear) ifTrue: [self error: self invalidDateErrorMessage].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:08:30'!
assertCardNumberSizeis16Digits: aNumber

	^ (aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:08:30' prior: 50896723!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsNotLongerThan30Characters: aName.
	self assertCardNumberSizeis16Digits: aNumber.
	(aNumber asString) detect:[:c| c isDigit not] ifFound:[:c| self error: self invalidNumberErrorMessage] ifNone:[].
	(aDate < self currentMonthOfYear) ifTrue: [self error: self invalidDateErrorMessage].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:08:56'!
assertCardNumberOnlyHasDigits: aNumber

	^ (aNumber asString) detect:[:c| c isDigit not] ifFound:[:c| self error: self invalidNumberErrorMessage] ifNone:[]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:08:56' prior: 50896749!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsNotLongerThan30Characters: aName.
	self assertCardNumberSizeis16Digits: aNumber.
	self assertCardNumberOnlyHasDigits: aNumber.
	(aDate < self currentMonthOfYear) ifTrue: [self error: self invalidDateErrorMessage].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:09:34'!
assertCardNumberDigitsAndLengthAreValid: aNumber

	self assertCardNumberSizeis16Digits: aNumber.
	self assertCardNumberOnlyHasDigits: aNumber! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:09:34' prior: 50896775!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsNotLongerThan30Characters: aName.
	self assertCardNumberDigitsAndLengthAreValid: aNumber.
	(aDate < self currentMonthOfYear) ifTrue: [self error: self invalidDateErrorMessage].
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:10:52'!
assertCardNumberExpirationDateIsInTheFuture: aDate

	^ (aDate < self currentMonthOfYear) ifTrue: [self error: self invalidDateErrorMessage]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 12:10:52' prior: 50896798!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsNotLongerThan30Characters: aName.
	self assertCardNumberDigitsAndLengthAreValid: aNumber.
	self assertCardNumberExpirationDateIsInTheFuture: aDate.
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:12:39' prior: 50896207!
test02CreatingACardWithValidNameIsCorrect

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals:  card name.
	self assert: testObjects validCardNumber equals:  card number.
	self assert: testObjects validCardDate equals:  card date.! !

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 12:12:41'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 12:12:53'!
number
	self shouldBeImplemented.
	^number! !
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 12:12:58' prior: 50896848!
number
	^number! !

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 12:13:02'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 12:13:08'!
date
	self shouldBeImplemented.
	^date! !
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 12:13:13' prior: 50896860!
date
	^date! !

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 12:13:14'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 12:13:14'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 12:13:14'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 12:13:14'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 12:13:14'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithAnExpiredDateRaisesError stamp: 'DV 6/14/2021 12:13:14'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:14:35'!
test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals:  card name.
	self assert: testObjects validCardNumber equals:  card number.
	self assert: testObjects validCardDate equals:  card date.! !

!methodRemoval: CreditCardTest #test02CreatingACardWithValidNameIsCorrect stamp: 'DV 6/14/2021 12:14:35'!
test02CreatingACardWithValidNameIsCorrect

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals:  card name.
	self assert: testObjects validCardNumber equals:  card number.
	self assert: testObjects validCardDate equals:  card date.!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:16:48' prior: 50896506!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate ] 
	raise: Error 
	withExceptionDo:[:anError |self assert: CreditCard invalidNumberErrorMessage equals: anError messageText]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 12:17:52'!
assertACartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 12:17:52' prior: 50895567!
checkout: aCart withCard: aExpirationDate
	| total |
	self assertACartIsNotEmpty: aCart.
	(aExpirationDate < self currentMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard].
	total := aCart total.
	aCart clear.
	^ total
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 12:18:37'!
asserCardDateIsNotExpired: aExpirationDate

	^ (aExpirationDate < self currentMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 12:18:37' prior: 50896932!
checkout: aCart withCard: aExpirationDate
	| total |
	self assertACartIsNotEmpty: aCart.
	self asserCardDateIsNotExpired: aExpirationDate.
	total := aCart total.
	aCart clear.
	^ total
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 12:19:05' prior: 50896951!
checkout: aCart withCard: aCreditCard
	| total |
	self assertACartIsNotEmpty: aCart.
	self asserCardDateIsNotExpired: aCreditCard.
	total := aCart total.
	aCart clear.
	^ total
! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'DV 6/14/2021 12:20:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:20:07' overrides: 16927572!
setUp 
	testObjects := StoreTestObjects new.! !
!StoreTestObjects methodsFor: 'nil' stamp: 'DV 6/14/2021 12:20:22'!
createCart
	^Cart acceptingItemsOf: self defaultCatalog! !
!StoreTestObjects methodsFor: 'nil' stamp: 'DV 6/14/2021 12:20:35'!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict! !
!StoreTestObjects methodsFor: 'nil' stamp: 'DV 6/14/2021 12:20:54'!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: CashierTest #createCart stamp: 'DV 6/14/2021 12:21:05'!
createCart
	^Cart acceptingItemsOf: self defaultCatalog!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:21:25' prior: 50894708!
test01CheckOutEmptyCartRaisesError

	| cashier |
	cashier := self createCashier.
	self should: [cashier checkout: testObjects createCart ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:21:38' prior: 50895435!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: self itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self nonExpiredCard)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:21:42' prior: 50895417!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:21:49' prior: 50895553!
test05CheckOutClearsCart

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: self itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:21:54' prior: 50895511!
xtest04CheckOutWithNotA16DigitsCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self nonExpiredCardwithShortCardNumber ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]! !

!methodRemoval: CashierTest #defaultCatalog stamp: 'DV 6/14/2021 12:22:31'!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:23:55' prior: 50896998!
test01CheckOutEmptyCartRaisesError

	| cashier |
	cashier := self createCashier.
	self should: [cashier checkout: testObjects createCart withCard: testObjects nonExpiredCard] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/14/2021 12:24:45' prior: 50895413!
nonExpiredCard
	^testObjects createCard ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:25:00' prior: 50897067!
test01CheckOutEmptyCartRaisesError

	| cashier |
	cashier := self createCashier.
	self should: [cashier checkout: testObjects createCart withCard: self nonExpiredCard] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/14/2021 12:25:13'!
PASSED!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 12:25:13'!
ERROR!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 12:25:13'!
PASSED!

!testRun: #CashierTest #test05CheckOutClearsCart stamp: 'DV 6/14/2021 12:25:13'!
ERROR!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 12:25:22'!
ERROR!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 12:25:31'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 12:26:08' prior: 50896943!
asserCardDateIsNotExpired: aCard

	^ (aCard date < self currentMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]! !

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 12:26:14'!
PASSED!

!testRun: #CashierTest #test05CheckOutClearsCart stamp: 'DV 6/14/2021 12:26:15'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 12:30:15' prior: 50897115!
asserCardDateIsNotExpired: aCard

	^ (aCard isExpired) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]! !

!methodRemoval: Cashier #currentMonthOfYear stamp: 'DV 6/14/2021 12:30:23'!
currentMonthOfYear
	^ GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)!
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 12:31:36'!
isExpired
	^(date < self class currentMonthOfYear) not! !
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 12:32:20' prior: 50896890!
test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects validCardDate equals: card date.! !

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 13:39:57'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 13:39:57'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/14/2021 13:39:57'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 13:39:57'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 13:39:57'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithAnExpiredDateRaisesError stamp: 'DV 6/14/2021 13:39:57'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 13:39:59'!
ERROR!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 13:39:59'!
FAILURE!

!testRun: #CashierTest #test05CheckOutClearsCart stamp: 'DV 6/14/2021 13:39:59'!
ERROR!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithAnExpiredDateRaisesError stamp: 'DV 6/14/2021 13:39:59'!
PASSED!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 13:40:06'!
ERROR!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 13:40:30'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 13:41:00' prior: 50897142!
isExpired
	^(date < self class currentMonthOfYear)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 13:41:01'!
FAILURE!

!testRun: #CashierTest #test05CheckOutClearsCart stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithAnExpiredDateRaisesError stamp: 'DV 6/14/2021 13:41:01'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 13:41:01'!
FAILURE!

15 digitLength!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 13:54:04'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/14/2021 13:54:04'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 13:54:04'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 13:54:04'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithAnExpiredDateRaisesError stamp: 'DV 6/14/2021 13:54:04'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 13:55:36' prior: 50896741!
assertCardNumberSizeis16Digits: aNumber
	'''0000-0000-0000-0000 preguntar'''.
	^ (aNumber asString size ~= 16) ifTrue: [self error: self invalidNumberErrorMessage]! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 13:56:01' prior: 50896188!
validCardNumber
	^0555555555554444 ! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 13:56:05'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/14/2021 13:56:05'!
ERROR!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 13:56:05'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 13:56:05'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithAnExpiredDateRaisesError stamp: 'DV 6/14/2021 13:56:05'!
FAILURE!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/14/2021 13:56:05'!
FAILURE!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 13:56:05'!
ERROR!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 13:56:05'!
FAILURE!

!testRun: #CashierTest #test05CheckOutClearsCart stamp: 'DV 6/14/2021 13:56:05'!
ERROR!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 13:56:24'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/14/2021 13:56:24'!
ERROR!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 13:56:24'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 13:56:24'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithAnExpiredDateRaisesError stamp: 'DV 6/14/2021 13:56:24'!
FAILURE!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/14/2021 13:56:27'!
ERROR!
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 13:57:18' prior: 50897349!
validCardNumber
	^5555555555554444 ! !

Object subclass: #Consultas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Consultas category: 'TusLibros' stamp: 'DV 6/14/2021 14:00:52'!
Object subclass: #Consultas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Consultas methodsFor: 'nil' stamp: 'DV 6/14/2021 14:01:41'!
consultas
	"Usar strinsg para los numeros de tarjeta?"
	"Deberia la clase CreditCard revisar la fecha de expiracion antes de crear la tarjeta?"! !
!Consultas methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 14:02:35' prior: 50897425!
consultas
	"Usar strinsg para los numeros de tarjeta?"
	"Deberia la clase CreditCard revisar la fecha de expiracion antes de crear la tarjeta?"
	"Consultar StoreTestObjects cmo clase o instancia"! !

!methodRemoval: CashierTest #xtest04CheckOutWithNotA16DigitsCreditCardRaisesError stamp: 'DV 6/14/2021 14:03:31'!
xtest04CheckOutWithNotA16DigitsCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self nonExpiredCardwithShortCardNumber ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCard ]!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:03:36'!
test04CheckOutClearsCart

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: self itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty! !

!methodRemoval: CashierTest #test05CheckOutClearsCart stamp: 'DV 6/14/2021 14:03:36'!
test05CheckOutClearsCart

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: self itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 14:03:58'!
PASSED!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/14/2021 14:03:58'!
PASSED!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 14:03:58'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 14:03:58'!
FAILURE!

!testRun: #CashierTest #test04CheckOutClearsCart stamp: 'DV 6/14/2021 14:03:58'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 14:03:58'!
FAILURE!
!Consultas methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 14:05:36' prior: 50897433!
consultas
	"Usar strinsg para los numeros de tarjeta?"
	"Deberia la clase CreditCard revisar la fecha de expiracion antes de crear la tarjeta?"
	"Consultar StoreTestObjects cmo clase o instancia"
	"Bad Smell, tener muchas cosas del lado de clase en credit card como currentMonthOfYear "! !

!methodRemoval: Cashier #checkout: stamp: 'DV 6/14/2021 14:06:49'!
checkout: aCart
	aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart].
	^ aCart total
!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/14/2021 14:07:20'!
PASSED!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 14:07:20'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 14:07:20'!
FAILURE!

!testRun: #CashierTest #test04CheckOutClearsCart stamp: 'DV 6/14/2021 14:07:20'!
PASSED!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 14:07:20'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:07:53' prior: 50897020!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: self itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 14:07:54'!
FAILURE!
!Consultas methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 14:11:08' prior: 50897500!
consultas
	"Usar strinsg para los numeros de tarjeta?"
	"Deberia la clase CreditCard revisar la fecha de expiracion antes de crear la tarjeta?"
	"Consultar StoreTestObjects cmo clase o instancia"
	"Bad Smell, tener muchas cosas del lado de clase en credit card como currentMonthOfYear "
	"Preguntar como crear tarjetas de credito vencidas"! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'DV 6/14/2021 14:32:34'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:32:33' overrides: 16927572!
setUp 
	testObjects := StoreTestObjects  new! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:32:53' prior: 50894341!
test01NewCartsAreCreatedEmpty

	self assert: testObjects createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:33:04' prior: 50894319!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjects createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:33:11' prior: 50894346!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjects createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:33:17' prior: 50894306!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjects createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:33:24' prior: 50894361!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjects createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:33:31' prior: 50894374!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjects createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:33:37' prior: 50894354!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjects createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:33:44' prior: 50894332!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjects createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/14/2021 14:33:48'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/14/2021 14:33:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/14/2021 14:33:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/14/2021 14:33:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/14/2021 14:33:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/14/2021 14:33:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/14/2021 14:33:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/14/2021 14:33:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/14/2021 14:33:48'!
PASSED!

!methodRemoval: CartTest #createCart stamp: 'DV 6/14/2021 14:33:59'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'DV 6/14/2021 14:34:13'!
itemNotSellByTheStore
	
	^'invalidBook'!
!CartTest methodsFor: 'support' stamp: 'DV 6/14/2021 14:34:31'!
itemNotSellByTheStore
	
	^ 'validBook'! !
!CartTest methodsFor: 'support' stamp: 'DV 6/14/2021 14:34:34' prior: 50897690!
itemNotSellByTheStore
	
	^ 'InvalidBook'! !

!methodRemoval: CartTest #defaultCatalog stamp: 'DV 6/14/2021 14:34:41'!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/14/2021 14:34:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/14/2021 14:34:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/14/2021 14:34:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/14/2021 14:34:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/14/2021 14:34:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/14/2021 14:34:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/14/2021 14:34:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/14/2021 14:34:44'!
PASSED!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'DV 6/14/2021 14:35:43'!
itemSellByTheStore
	
	^ 'validBook'!
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:35:53' prior: 50897596!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjects createCart.
	
	cart add: testObjects itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:36:00' prior: 50897604!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjects createCart.
	
	self 
		should: [cart add: 0 of: testObjects itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:36:09' prior: 50897630!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjects createCart.
	
	cart add: testObjects itemSellByTheStore.
	self assert: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:36:14' prior: 50897638!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjects createCart.
	
	self deny: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:36:21' prior: 50897645!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjects createCart.
	
	cart add: 2 of: testObjects itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:36:26' prior: 50897770!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjects createCart.
	
	cart add: 2 of: testObjects itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjects itemSellByTheStore) = 2! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/14/2021 14:37:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/14/2021 14:37:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/14/2021 14:37:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/14/2021 14:37:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/14/2021 14:37:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/14/2021 14:37:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/14/2021 14:37:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/14/2021 14:37:55'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:38:15' prior: 50897534!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:38:28' prior: 50897009!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self nonExpiredCard)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:38:37' prior: 50897458!
test04CheckOutClearsCart

	| cashier oneItemCart |
	cashier := self createCashier.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty! !

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'DV 6/14/2021 14:39:03'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CashierTest #nonExpiredCardwithShortCardNumber stamp: 'DV 6/14/2021 14:39:17'!
nonExpiredCardwithShortCardNumber
	^ Dictionary at: 'number' put: '...'!

----QUIT----(14 June 2021 14:41:28) CuisUniversity-4532.image priorSource: 18046914!

----STARTUP---- (14 June 2021 16:05:31) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!

!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 16:06:30'!
test09EmptyCartTotalIsZero

	| cart |
	
	cart := testObjects createCart.
	
	self assert: 0 equals: cart total.! !

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/14/2021 16:06:34'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/14/2021 16:06:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/14/2021 16:06:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/14/2021 16:06:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/14/2021 16:06:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/14/2021 16:06:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/14/2021 16:06:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/14/2021 16:06:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/14/2021 16:06:34'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/14/2021 16:06:34'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 16:07:45' prior: 50897866!
test09EmptyCartTotalIsZero

	| cart |
	
	cart := testObjects createCart.
	50 timesDo: [	cart  add: testObjects itemSellByTheStore].
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 16:06:30' prior: 50897903!
test09EmptyCartTotalIsZero

	| cart |
	
	cart := testObjects createCart.
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 16:08:59'!
test10EmptyCartTotalIsCorrectForMultipleItems

	| cart |
	
	cart := testObjects createCart.
	50 timesRepeat: [	cart  add: testObjects itemSellByTheStore].
	self assert: 5000 equals: cart total. ! !

!testRun: #CartTest #test10EmptyCartTotalIsCorrectForMultipleItems stamp: 'DV 6/14/2021 16:09:00'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/14/2021 16:09:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/14/2021 16:09:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/14/2021 16:09:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/14/2021 16:09:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/14/2021 16:09:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/14/2021 16:09:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/14/2021 16:09:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/14/2021 16:09:01'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/14/2021 16:09:01'!
PASSED!

!testRun: #CartTest #test10EmptyCartTotalIsCorrectForMultipleItems stamp: 'DV 6/14/2021 16:09:01'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 16:10:27'!
test11CartIsEmptyAfterClear

	| cart |
	
	cart := testObjects createCart.
	50 timesRepeat: [	cart  add: testObjects itemSellByTheStore].
	cart clear.
	self assert: cart isEmpty ! !

!testRun: #CartTest #test11CartIsEmptyAfterClear stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test10EmptyCartTotalIsCorrectForMultipleItems stamp: 'DV 6/14/2021 16:10:29'!
PASSED!

!testRun: #CartTest #test11CartIsEmptyAfterClear stamp: 'DV 6/14/2021 16:10:29'!
PASSED!
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 17:46:14'!
isExpiredOn: aMonthOfYear
	^(date < aMonthOfYear)! !
!Cashier methodsFor: 'assertions' stamp: 'DV 6/14/2021 17:49:05'!
asserCardDateIsNotExpired: aCard forDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]! !

!methodRemoval: Cashier #asserCardDateIsNotExpired: stamp: 'DV 6/14/2021 17:52:45'!
asserCardDateIsNotExpired: aCard

	^ (aCard isExpired) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]!
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 17:53:52'!
checkout: aCart withCard: aCreditCard onDate: today
	| total |
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	total := aCart total.
	aCart clear.
	^ total
! !
!Cashier methodsFor: 'assertions' stamp: 'DV 6/14/2021 17:54:58'!
assertCardDateIsNotExpired: aCard forDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]! !

!methodRemoval: Cashier #asserCardDateIsNotExpired:forDate: stamp: 'DV 6/14/2021 17:54:58'!
asserCardDateIsNotExpired: aCard forDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 17:55:45' prior: 50896820!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsNotLongerThan30Characters: aName.
	self assertCardNumberDigitsAndLengthAreValid: aNumber.
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !

!methodRemoval: CreditCard class #assertCardNumberExpirationDateIsInTheFuture: stamp: 'DV 6/14/2021 17:55:53'!
assertCardNumberExpirationDateIsInTheFuture: aDate

	^ (aDate < self currentMonthOfYear) ifTrue: [self error: self invalidDateErrorMessage]!

!methodRemoval: CreditCard class #invalidDateErrorMessage stamp: 'DV 6/14/2021 17:56:05'!
invalidDateErrorMessage
	^'La fecha de vencimiento de la tarjeta debe ser un mes y a�o en el futuro.'!

!methodRemoval: CreditCard class #currentMonthOfYear stamp: 'DV 6/14/2021 17:56:16'!
currentMonthOfYear
	^ GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)!

!methodRemoval: CreditCardTest #createCardWithValidNameAndValidNumberAndInvalidExpirationDate stamp: 'DV 6/14/2021 17:56:42'!
createCardWithValidNameAndValidNumberAndInvalidExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: testObjects validCardNumber withExpirationDate: self invalidCardDate 
!

!methodRemoval: CreditCardTest #test05CreatingACardWithAnExpiredDateRaisesError stamp: 'DV 6/14/2021 17:56:49'!
test05CreatingACardWithAnExpiredDateRaisesError
	self should:[self createCardWithValidNameAndValidNumberAndInvalidExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: CreditCard invalidDateErrorMessage equals: anError messageText]!

!methodRemoval: CreditCard #isExpired stamp: 'DV 6/14/2021 17:57:02'!
isExpired
	^(date < self class currentMonthOfYear)!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/14/2021 18:05:27'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/14/2021 18:05:27'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/14/2021 18:05:27'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/14/2021 18:05:27'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 18:06:40'!
test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects validCardDate equals: card date.! !
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 18:07:03'!
test02CreatingACardWithEmptyNameRaisesError

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects validCardDate equals: card date.! !

!methodRemoval: CreditCardTest #test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/14/2021 18:07:03'!
test02CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects validCardDate equals: card date.!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/14/2021 18:07:12'!
xtest02CreatingACardWithEmptyNameRaisesError

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects validCardDate equals: card date.! !

!methodRemoval: CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'DV 6/14/2021 18:07:12'!
test02CreatingACardWithEmptyNameRaisesError

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects validCardDate equals: card date.!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/14/2021 18:16:36'!
PASSED!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 18:16:36'!
ERROR!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/14/2021 18:16:36'!
FAILURE!

!testRun: #CashierTest #test04CheckOutClearsCart stamp: 'DV 6/14/2021 18:16:36'!
ERROR!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 18:16:41'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 18:17:04' prior: 50896960!
checkout: aCart withCard: aCreditCard
	| total |
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard.
	total := aCart total.
	aCart clear.
	^ total
! !

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/14/2021 18:17:08'!
ERROR!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'DV 6/14/2021 18:18:58'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 18:18:56' prior: 50896976 overrides: 16927572!
setUp 
	testObjects := StoreTestObjects new.
	today  = Date! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 18:20:20' prior: 50898218 overrides: 16927572!
setUp 
	testObjects := StoreTestObjects new.
	today  = GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 18:21:47' prior: 50897083!
test01CheckOutEmptyCartRaisesError

	| cashier salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	self should: [cashier checkout: testObjects createCart withCard: self nonExpiredCard] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 18:22:29' prior: 50897829!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self nonExpiredCard)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 18:23:14' prior: 50897814!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 18:23:28' prior: 50897840!
test04CheckOutClearsCart

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty! !
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/14/2021 18:31:35'!
with:aCart forCard: aCreditCard
! !

!methodRemoval: Cashier class #with:forCard: stamp: 'DV 6/14/2021 18:34:02'!
with:aCart forCard: aCreditCard
!
!Consultas methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 18:36:53' prior: 50897553!
consultas
	"Usar strinsg para los numeros de tarjeta?"
	"Consultar StoreTestObjects como clase o instancia"
	"Preguntar como crear tarjetas de credito vencidas"! !
!Consultas methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 18:37:15' prior: 50898296!
consultas
	"Usar strinsg para los numeros de tarjeta?"
	"Consultar StoreTestObjects como clase o instancia"
! !
!Cashier methodsFor: 'assertions' stamp: 'DV 6/14/2021 18:38:09'!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]! !

!methodRemoval: Cashier #assertCardDateIsNotExpired:forDate: stamp: 'DV 6/14/2021 18:38:09'!
assertCardDateIsNotExpired: aCard forDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]!
!Consultas methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 18:39:31' prior: 50898305!
consultas
	"Usar strings para los numeros de tarjeta?"
	"Consultar StoreTestObjects como clase o instancia"
! !

TestCase subclass: #MPSimulatorTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MPSimulatorTest category: 'TusLibros' stamp: 'DV 6/14/2021 18:41:59'!
TestCase subclass: #MPSimulatorTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjects commentStamp: '<historical>' prior: 0!
Simulador del Merchant Procesor!

Object subclass: #MPSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MPSimulator category: 'TusLibros' stamp: 'DV 6/14/2021 18:42:25'!
Object subclass: #MPSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulator commentStamp: '<historical>' prior: 0!
Merchant Porcesor Simulator!
!MPSimulator commentStamp: '<historical>' prior: 50898359!
Merchant Procesor Simulator!
!MPSimulator methodsFor: 'nil' stamp: 'DV 6/14/2021 18:44:06'!
charge: anAmount on: aCreditCard! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 18:44:10' prior: 50898365!
charge: anAmount on: aCreditCard
	! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 18:46:42' prior: 50898370!
charge: anAmount on: aCreditCard
	"	
		Tarjeta robada
		Fondos Insuficientes
		Tarjeta Falsa
		Ok
	"! !
!Consultas methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 18:54:10' prior: 50898327!
consultas
	"Usar strings para los numeros de tarjeta?"
	"---Consultar StoreTestObjects como clase o instancia"
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 18:55:18' prior: 50896081!
createCardWithInvalidLongNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: 666666666666666666666666 withExpirationDate: testObjects validCardDate
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/14/2021 18:56:31' prior: 50896090!
createCardWithInvalidShortNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: 0 withExpirationDate: testObjects validCardDate
! !
!MPSimulatorTest methodsFor: 'nil' stamp: 'DV 6/14/2021 19:20:44'!
test01! !
!MPSimulatorTest methodsFor: 'nil' stamp: 'DV 6/14/2021 19:26:42'!
createMPSimulator
	^ MPSimulator new! !
!MPSimulatorTest methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 19:27:04' prior: 50898406!
test01
	|mps|
	
	mps := self createMPSimulator.
	! !
!MPSimulatorTest methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 19:31:02' prior: 50898414!
test01
	|mps|
	
	mps := self createMPSimulator.
	
	mps addCard: StoreTestObjects new createCard withBalance: 500! !
!MPSimulatorTest methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 19:31:04' prior: 50898419!
test01
	|mps|
	
	mps := self createMPSimulator.
	
	mps addCard: StoreTestObjects new createCard withBalance: 500.
	! !
!MPSimulatorTest methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 19:33:10' prior: 50898426!
test01
	|mps card |
	
	mps := self createMPSimulator.
	card := StoreTestObjects new createCard.
	
	mps addCard: card withBalance: 500.
	
	self assert: true.
	! !
!MPSimulatorTest methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 19:38:38' prior: 50898433!
test01
	|mps card |
	
	mps := self createMPSimulator.
	card := StoreTestObjects new createCard.
	
	mps addCard: card withBalance: 500.
	mps markCardAsStolen: card.
	mps charge: 100 on: card.! !
!MPSimulatorTest methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 19:39:22' prior: 50898442!
test01
	|mps card |
	
	mps := self createMPSimulator.
	card := StoreTestObjects new createCard.
	
	mps AddStolenCard: card.
	mps charge: 100 on: card.! !

!classDefinition: #MPSimulator category: 'TusLibros' stamp: 'DV 6/14/2021 19:40:27'!
Object subclass: #MPSimulator
	instanceVariableNames: 'stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 19:40:22'!
addStolenCard:aCreditCard
	stolenCards := aCreditCard 
	! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 19:40:32' prior: 50898467!
addStolenCard:aCreditCard
	stolenCards add: aCreditCard 
	! !
!MPSimulator methodsFor: 'initialize' stamp: 'DV 6/14/2021 19:41:02' overrides: 16896425!
initialize
	stolenCards := OrderedCollection new.! !
!MPSimulatorTest methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 19:41:15' prior: 50898452!
test01
	|mps card |
	
	mps := self createMPSimulator.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.
	mps charge: 100 on: card.! !
!MPSimulatorTest methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 19:48:25' prior: 50898482!
test01
	|mps card |
	
	mps := self createMPSimulator.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 19:52:21' prior: 50898232!
test01CheckOutEmptyCartRaisesError

	| cashier salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	self should: [cashier checkout: testObjects createCart withCard: self nonExpiredCard] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 19:57:41'!
test05CheckOutWithStolenCardRaisesError

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	mps := self createMPSimulator.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !

!methodRemoval: MPSimulatorTest #createMPSimulator stamp: 'DV 6/14/2021 19:58:00'!
createMPSimulator
	^ MPSimulator new!
!CashierTest methodsFor: 'support' stamp: 'DV 6/14/2021 19:58:13'!
createMPSimulator
	^ MPSimulator new! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 19:58:53'!
test05CheckOutWithStolenCardRaisesErrorAndLeavesEmptySalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	mps := self createMPSimulator.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !

!methodRemoval: CashierTest #test05CheckOutWithStolenCardRaisesError stamp: 'DV 6/14/2021 19:59:00'!
test05CheckOutWithStolenCardRaisesError

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	mps := self createMPSimulator.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 19:59:25'!
test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	mps := self createMPSimulator.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !

!methodRemoval: CashierTest #test05CheckOutWithStolenCardRaisesErrorAndLeavesEmptySalesBook stamp: 'DV 6/14/2021 19:59:25'!
test05CheckOutWithStolenCardRaisesErrorAndLeavesEmptySalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	mps := self createMPSimulator.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] !
!Consultas methodsFor: 'as yet unclassified' stamp: 'DV 6/14/2021 20:01:09' prior: 50898382!
consultas
	"Usar strings para los numeros de tarjeta?"
	"---Consultar StoreTestObjects como clase o instancia"
	
	
	
	"Reusar cajeros??"
! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/14/2021 20:01:46' prior: 50898589!
test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := testObjects createCart add: testObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
Merchant Procesor Simulator!
Simulador del Merchant Procesor!

----QUIT----(14 June 2021 20:53:47) CuisUniversity-4532.image priorSource: 18118691!

----STARTUP---- (16 June 2021 10:25:43) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!

!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 10:28:44' prior: 50898224 overrides: 16927572!
setUp 
	testObjects := StoreTestObjects new.
	today  := GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/16/2021 10:28:47'!
PASSED!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/16/2021 10:28:49'!
PASSED!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 10:28:49'!
ERROR!

!testRun: #CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 10:28:49'!
FAILURE!

!testRun: #CashierTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 10:28:49'!
ERROR!

!testRun: #CashierTest #test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 10:28:49'!
ERROR!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 10:28:52'!
ERROR!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 10:29:07'!
ERROR!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 10:31:15'!
Cashier class
	instanceVariableNames: 'cart'!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 10:31:16'!
Cashier class
	instanceVariableNames: 'cart creditCard'!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:31:13'!
forCheckoutWith: aCart ChargingTo: aCreditCard

	cart := aCart.
	creditCard := aCreditCard ! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 10:31:43'!
assertACartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart]! !

!methodRemoval: Cashier #assertACartIsNotEmpty: stamp: 'DV 6/16/2021 10:31:43'!
assertACartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart]!
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 10:31:58'!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]! !

!methodRemoval: Cashier #assertCardDateIsNotExpired:onDate: stamp: 'DV 6/16/2021 10:31:58'!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:34:28'!
forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart with: aCreditCard! !

!methodRemoval: Cashier class #forCheckoutWith:ChargingTo: stamp: 'DV 6/16/2021 10:34:44'!
forCheckoutWith: aCart ChargingTo: aCreditCard

	cart := aCart.
	creditCard := aCreditCard !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/16/2021 10:35:34'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/16/2021 10:35:35'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'DV 6/16/2021 10:35:32'!
initializeWith:aCart With: aCreditCard

	cart := aCart.
	creditCard := aCreditCard ! !

Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 10:35:44'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:36:28' prior: 50898751!
forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart With: aCreditCard! !

----STARTUP---- (16 June 2021 13:14:28) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!

!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 10:28:44' prior: 50898224 overrides: 16927572!
setUp 
	testObjects := StoreTestObjects new.
	today  := GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 13:14:30'!
Cashier class
	instanceVariableNames: 'cart'!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 13:14:30'!
Cashier class
	instanceVariableNames: 'cart creditCard'!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:31:13'!
forCheckoutWith: aCart ChargingTo: aCreditCard

	cart := aCart.
	creditCard := aCreditCard ! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 10:31:43'!
assertACartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart]! !

!methodRemoval: Cashier #assertACartIsNotEmpty: stamp: 'DV 6/16/2021 13:14:30'!
assertACartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart]!
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 10:31:58'!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]! !

!methodRemoval: Cashier #assertCardDateIsNotExpired:onDate: stamp: 'DV 6/16/2021 13:14:30'!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:34:28'!
forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart with: aCreditCard! !

!methodRemoval: Cashier class #forCheckoutWith:ChargingTo: stamp: 'DV 6/16/2021 13:14:30'!
forCheckoutWith: aCart ChargingTo: aCreditCard

	cart := aCart.
	creditCard := aCreditCard !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/16/2021 13:14:30'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/16/2021 13:14:30'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'DV 6/16/2021 10:35:32'!
initializeWith:aCart With: aCreditCard

	cart := aCart.
	creditCard := aCreditCard ! !

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 13:14:30'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 13:14:30'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:36:28' prior: 50898858!
forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart With: aCreditCard! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:21:38' prior: 50898807 overrides: 16927572!
setUp 
	today  := GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:22:01' prior: 50898502!
test01CheckOutEmptyCartRaisesError

	| cashier salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	self should: [cashier checkout: StoreTestObjects createCart withCard: self nonExpiredCard] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:19'!
createCard
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self validCardDate ! !

!methodRemoval: StoreTestObjects #createCard stamp: 'DV 6/16/2021 13:22:19'!
createCard
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self validCardDate !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:24'!
createCart
	^Cart acceptingItemsOf: self defaultCatalog! !

!methodRemoval: StoreTestObjects #createCart stamp: 'DV 6/16/2021 13:22:24'!
createCart
	^Cart acceptingItemsOf: self defaultCatalog!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:30'!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict! !

!methodRemoval: StoreTestObjects #defaultCatalog stamp: 'DV 6/16/2021 13:22:30'!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:33'!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: StoreTestObjects #itemSellByTheStore stamp: 'DV 6/16/2021 13:22:33'!
itemSellByTheStore
	
	^ 'validBook'!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:36'!
validCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 5 monthNumber: (Date today month monthIndex)! !

!methodRemoval: StoreTestObjects #validCardDate stamp: 'DV 6/16/2021 13:22:36'!
validCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 5 monthNumber: (Date today month monthIndex)!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:41'!
validCardName
	^ 'Sim�n Bol�var'! !

!methodRemoval: StoreTestObjects #validCardName stamp: 'DV 6/16/2021 13:22:41'!
validCardName
	^ 'Sim�n Bol�var'!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:46'!
validCardNumber
	^5555555555554444 ! !

!methodRemoval: StoreTestObjects #validCardNumber stamp: 'DV 6/16/2021 13:22:46'!
validCardNumber
	^5555555555554444 !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:23:29' prior: 50898245!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self nonExpiredCard)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:23:45' prior: 50898258!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:23:54' prior: 50898275!
test04CheckOutClearsCart

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:24:06' prior: 50898643!
test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:24:51' prior: 50898919!
test01CheckOutEmptyCartRaisesError

	| cashier salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:25:26' prior: 50899071!
test01CheckOutEmptyCartRaisesError

	| cashier salesBook |
	cashier := self createCashierWith:StoreTestObjects createCart With: self nonExpiredCard On:today.
	salesBook := OrderedCollection new.
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/16/2021 13:26:53'!
createCashierWith: aCart with: aCreditCard on: aDate.
	^ Cashier forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: aDate! !
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 13:27:19'!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart With: aCreditCard! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:27:19' prior: 50899096!
createCashierWith: aCart with: aCreditCard on: aDate.
	^ Cashier forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate! !

!methodRemoval: Cashier class #forCheckoutWith:ChargingTo:OnDate: stamp: 'DV 6/16/2021 13:27:19'!
forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart With: aCreditCard!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/16/2021 13:27:36'!
ERROR!

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/16/2021 13:27:36'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'DV 6/16/2021 13:27:52' prior: 50897079!
nonExpiredCard
	^ StoreTestObjects createCard ! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/16/2021 13:27:53'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:28:07' prior: 50899083!
test01CheckOutEmptyCartRaisesError

	| cashier salesBook |
	cashier := self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today.
	salesBook := OrderedCollection new.
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/16/2021 13:28:10'!
ERROR!
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 13:28:30' prior: 50898830!
assertACartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self cannotCheckoutEmptyCart]! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/16/2021 13:28:31'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:29:11' prior: 50899144!
test01CheckOutEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !

!testRun: #CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/16/2021 13:29:15'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:29:42'!
test01CreatingAChashierWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !

!methodRemoval: CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/16/2021 13:29:42'!
test01CheckOutEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	!

!methodRemoval: CashierTest #createCashier stamp: 'DV 6/16/2021 13:30:09'!
createCashier
	^ Cashier new!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:30:59' prior: 50899005!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook |
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	salesBook := OrderedCollection new.
	self assert: 100 equals: (cashier checkout)! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:31:24'!
checkout

	| total |
	total := cart total.
	cart clear.
	^ total
! !

!methodRemoval: Cashier #checkout:withCard: stamp: 'DV 6/16/2021 13:31:33'!
checkout: aCart withCard: aCreditCard
	| total |
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard.
	total := aCart total.
	aCart clear.
	^ total
!

!methodRemoval: Cashier #checkout:withCard:onDate: stamp: 'DV 6/16/2021 13:31:46'!
checkout: aCart withCard: aCreditCard onDate: today
	| total |
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	total := aCart total.
	aCart clear.
	^ total
!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 13:32:21'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:32:58'!
test03CreatingaACashierPerSaleWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !

!methodRemoval: CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 13:32:58'!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:33:09'!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !

!methodRemoval: CashierTest #test03CreatingaACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 13:33:09'!
test03CreatingaACashierPerSaleWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:33:16'!
test01CreatingAChashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !

!methodRemoval: CashierTest #test01CreatingAChashierWithEmptyCartRaisesError stamp: 'DV 6/16/2021 13:33:16'!
test01CreatingAChashierWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:33:51' prior: 50899286!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard on: today ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !

!testRun: #CashierTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 13:33:58'!
FAILURE!

!testRun: #CashierTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 13:33:58'!
FAILURE!
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 13:34:52' prior: 50898842!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self cannotCheckoutWithExpiredCard]! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 13:35:04' prior: 50899373!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	(aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self cannotCheckoutWithExpiredCard]! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 13:35:10' prior: 50899161!
assertACartIsNotEmpty: aCart

	aCart isEmpty ifTrue:[self error: self cannotCheckoutEmptyCart]! !

!testRun: #CashierTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 13:35:17'!
FAILURE!

!testRun: #CashierTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 13:35:17'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:45:25' prior: 50899035!
test04CheckOutClearsCart

	| cashier oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	cashier checkout.
	
	self assert: oneItemCart isEmpty! !

!testRun: #CashierTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 13:45:31'!
PASSED!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:46:23'!
createExpiredCard
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self expiredCardDate ! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:46:40'!
expiredCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) -5 monthNumber: (Date today month monthIndex)! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02'!
nonExpiredCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 5 monthNumber: (Date today month monthIndex)! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50898158!
xtest02CreatingACardWithEmptyNameRaisesError

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects nonExpiredCardDate equals: card date.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50898121!
test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects nonExpiredCardDate equals: card date.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50896099!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: testObjects validCardNumber withExpirationDate: testObjects nonExpiredCardDate 
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50896493!
createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: '5234-3928-3468AB' withExpirationDate: testObjects nonExpiredCardDate 
	
	
	
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50898398!
createCardWithInvalidShortNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: 0 withExpirationDate: testObjects nonExpiredCardDate
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50898389!
createCardWithInvalidLongNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: 666666666666666666666666 withExpirationDate: testObjects nonExpiredCardDate
! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50898933!
createCard
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self nonExpiredCardDate ! !

!methodRemoval: StoreTestObjects class #validCardDate stamp: 'DV 6/16/2021 13:47:02'!
validCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 5 monthNumber: (Date today month monthIndex)!

!testRun: #CashierTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 13:47:24'!
PASSED!

!testRun: #CashierTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 13:47:26'!
FAILURE!

!testRun: #CashierTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 13:47:26'!
FAILURE!
!CashierTest methodsFor: 'support' stamp: 'DV 6/16/2021 13:47:54' prior: 50895431!
expiredCard
	^ StoreTestObjects createExpiredCard ! !

!testRun: #CashierTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 13:47:55'!
PASSED!

!testRun: #CashierTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 13:47:55'!
PASSED!

!testRun: #CashierTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 13:47:55'!
PASSED!

!testRun: #CashierTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 13:47:55'!
PASSED!

!testRun: #CashierTest #test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 13:47:55'!
ERROR!

!testRun: #CashierTest #test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 13:47:55'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 14:29:22' prior: 50898048!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsValid: aName.
	self assertCardNumberDigitsAndLengthAreValid: aNumber.
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/16/2021 14:29:25'!
FAILURE!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/16/2021 14:29:25'!
FAILURE!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/16/2021 14:29:25'!
FAILURE!

!testRun: #CreditCardTest #test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/16/2021 14:29:25'!
ERROR!

!testRun: #CreditCardTest #test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/16/2021 14:29:26'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 14:30:30'!
assertCardNameIsValid: aName
	self assertCardNameIsNotEmpty:aName.
	self assertCardNameIsNotLongerThan30Characters: aName.! !
!CreditCard class methodsFor: 'error messages' stamp: 'DV 6/16/2021 14:30:55' prior: 50895776!
invalidNameErrorMessage
	^'El nombre debe contener como m�ximo 30 caracteres y no ser vac�o.'! !

1 numberOfDigitsInBase: 2!

12222 numberOfDigitsInBase: 10!
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:43:44' prior: 50897340!
assertCardNumberSizeis16Digits: aNumber
	'''0000-0000-0000-0000 preguntar'''.
	^ ((aNumber numberOfDigitsInBase: 10) ~= 16) ifTrue: [self error: self invalidNumberErrorMessage]! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:44:28'!
assertCardNameIsNotEmpty:aName
	aName withBlanksTrimmed isEmpty 
! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:44:36' prior: 50896716!
assertCardNameIsNotLongerThan30Characters: aName

	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage]! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:44:51' prior: 50899615!
assertCardNameIsNotEmpty:aName
	(aName withBlanksTrimmed isEmpty) ifTrue: [self error: self invalidNameErrorMessage]! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:46:27' prior: 50896790!
assertCardNumberDigitsAndLengthAreValid: aNumber

	self assertCardNumberSizeis16Digits: aNumber
! !

!methodRemoval: CreditCard class #assertCardNumberOnlyHasDigits: stamp: 'DV 6/16/2021 14:46:33'!
assertCardNumberOnlyHasDigits: aNumber

	^ (aNumber asString) detect:[:c| c isDigit not] ifFound:[:c| self error: self invalidNumberErrorMessage] ifNone:[]!

!methodRemoval: CreditCard class #assertCardNumberDigitsAndLengthAreValid: stamp: 'DV 6/16/2021 14:46:45'!
assertCardNumberDigitsAndLengthAreValid: aNumber

	self assertCardNumberSizeis16Digits: aNumber
!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 14:46:51' prior: 50899561!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsValid: aName.
	self assertCardNumberSizeis16Digits: aNumber.
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:47:24' prior: 50899607!
assertCardNumberSizeis16Digits: aNumber
	^ ((aNumber numberOfDigitsInBase: 10) ~= 16) ifTrue: [self error: self invalidNumberErrorMessage]! !

!methodRemoval: CreditCardTest #setUp stamp: 'DV 6/16/2021 14:47:52'!
setUp 
	testObjects := StoreTestObjects  new!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:48:22' prior: 50899454!
test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := StoreTestObjects  createCard.
	
	self assert: StoreTestObjects validCardName equals: card name.
	self assert: StoreTestObjects validCardNumber equals: card number.
	self assert: StoreTestObjects nonExpiredCardDate equals: card date.! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/16/2021 14:49:16'!
FAILURE!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/16/2021 14:49:16'!
FAILURE!
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:49:40' prior: 50899498!
createCardWithInvalidLongNumberAndValidNameAndExpirationDate
	^CreditCard withName: StoreTestObjects validCardName withNumber: 666666666666666666666666 withExpirationDate: StoreTestObjects nonExpiredCardDate
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:49:48' prior: 50899467!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: StoreTestObjects validCardNumber withExpirationDate: StoreTestObjects nonExpiredCardDate 
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:49:56' prior: 50899479!
createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate
	^CreditCard withName: StoreTestObjects validCardName withNumber: '5234-3928-3468AB' withExpirationDate: StoreTestObjects nonExpiredCardDate 
	
	
	
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:50:05' prior: 50899489!
createCardWithInvalidShortNumberAndValidNameAndExpirationDate
	^CreditCard withName: StoreTestObjects validCardName withNumber: 0 withExpirationDate: StoreTestObjects nonExpiredCardDate
! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/16/2021 14:50:08'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/16/2021 14:50:08'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/16/2021 14:50:08'!
FAILURE!

!testRun: #CreditCardTest #test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/16/2021 14:50:08'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/16/2021 14:50:08'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:50:38' prior: 50896914!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate ] 
	raise: Error 
	withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage]! !

!methodRemoval: CreditCardTest #createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate stamp: 'DV 6/16/2021 14:51:07'!
createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate
	^CreditCard withName: StoreTestObjects validCardName withNumber: '5234-3928-3468AB' withExpirationDate: StoreTestObjects nonExpiredCardDate 
	
	
	
!

!methodRemoval: CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/16/2021 14:51:15'!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate ] 
	raise: Error 
	withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage]!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/16/2021 14:51:35'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/16/2021 14:51:35'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/16/2021 14:51:35'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:52:31' prior: 50895752!
test01CreatingACardWithANameLongerThan30CharactersRaisesError

	self should:[self createCardWithInvalidLongNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage].
		
	self should:[self createCardWithInvalidShortNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage]

	! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:52:52'!
createCardWithInvalidLongNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: StoreTestObjects validCardNumber withExpirationDate: StoreTestObjects nonExpiredCardDate 
! !

!methodRemoval: CreditCardTest #createCardWithInvalidNameAndValidNumberAndExpirationDate stamp: 'DV 6/16/2021 14:52:52'!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: StoreTestObjects validCardNumber withExpirationDate: StoreTestObjects nonExpiredCardDate 
!
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:53:00'!
createCardWithInvalidShortNameAndValidNumberAndExpirationDate
	^CreditCard withName: '' withNumber: StoreTestObjects validCardNumber withExpirationDate: StoreTestObjects nonExpiredCardDate 
! !

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/16/2021 14:53:02'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/16/2021 14:53:02'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/16/2021 14:53:02'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:54:20'!
test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !

!methodRemoval: CashierTest #test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 14:54:20'!
test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:55:09'!
test04CheckOutRegistersASale
	| cashier oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty! !
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 14:55:54'!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: today registeringOn:aSalesbook
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart with: aCreditCard with: aSalesbook.! !

!methodRemoval: Cashier class #forCheckoutWith:chargingTo:onDate: stamp: 'DV 6/16/2021 14:56:02'!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart With: aCreditCard!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/16/2021 14:56:38'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart creditCard salesbook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'DV 6/16/2021 14:56:37'!
initializeWith:aCart with: aCreditCard with: aSalesbook

	cart := aCart.
	creditCard := aCreditCard. 
	salesbook := aSalesbook ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:58:26' prior: 50899913!
test04CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	total := cashier checkout.
	
	self assert: salesBook isEmpty not.
	self assert: total  first equals: salesBook.! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:59:18'!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook
	^ Cashier forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook! !

!methodRemoval: CashierTest #createCashierWith:with:on: stamp: 'DV 6/16/2021 14:59:27'!
createCashierWith: aCart with: aCreditCard on: aDate.
	^ Cashier forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate!
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 15:16:56' prior: 50899665!
assertCardNumberSizeis16Digits: aNumber
	((aNumber numberOfDigitsInBase: 10) ~= 16) ifTrue: [self error: self invalidNumberErrorMessage]! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 15:20:42'!
assertCardNameIsNotEmptyAndNotLongerThan30Characters: aName
	self assertCardNameIsNotEmpty:aName.
	self assertCardNameIsNotLongerThan30Characters: aName.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:20:42' prior: 50899655!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsNotEmptyAndNotLongerThan30Characters: aName.
	self assertCardNumberSizeis16Digits: aNumber.
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !

!methodRemoval: CreditCard class #assertCardNameIsValid: stamp: 'DV 6/16/2021 15:20:42'!
assertCardNameIsValid: aName
	self assertCardNameIsNotEmpty:aName.
	self assertCardNameIsNotLongerThan30Characters: aName.!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:22:34' prior: 50899321!
test01CreatingAChashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard onDate: today registeringOn: salesBook ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	
	self assert: salesBook isEmpty.
	! !

!classRenamed: #Cashier as: #CashierPerSale stamp: 'DV 6/16/2021 15:24:52'!
Smalltalk renameClassNamed: #Cashier as: #CashierPerSale!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:24:52' prior: 50900028!
test01CreatingAChashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard onDate: today registeringOn: salesBook ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: CashierPerSale cannotCheckoutEmptyCart].
	
	self assert: salesBook isEmpty.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:24:52' prior: 50899348!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard on: today ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:24:52' prior: 50899978!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook
	^ CashierPerSale forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook! !

!classRenamed: #CashierTest as: #CashierPerSaleTest stamp: 'DV 6/16/2021 15:25:06'!
Smalltalk renameClassNamed: #CashierTest as: #CashierPerSaleTest!

!methodRemoval: CashierPerSale #initializeWith:With: stamp: 'DV 6/16/2021 15:26:48'!
initializeWith:aCart With: aCreditCard

	cart := aCart.
	creditCard := aCreditCard !

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 15:27:15'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 15:27:15'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 15:27:15'!
ERROR!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 15:27:15'!
FAILURE!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 15:27:15'!
ERROR!

!testRun: #CashierPerSaleTest #test04CheckOutRegistersASale stamp: 'DV 6/16/2021 15:27:15'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 15:27:15'!
ERROR!

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 15:27:39'!
PASSED!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:29:38' prior: 50898912 overrides: 16927572!
setUp 
	today  := Date today! !
!CashierPerSale class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 15:30:02' prior: 50899927!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn:aSalesbook
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: aDate.
	
	^ self new initializeWith: aCart with: aCreditCard with: aSalesbook.! !
!CashierPerSale class methodsFor: 'assertions' stamp: 'DV 6/16/2021 15:30:41' prior: 50899381!
assertCardDateIsNotExpired: aCard onDate: aDate
	| monthOfYear |
	monthOfYear:= GregorianMonthOfYear yearNumber: (aDate yearNumber) monthNumber: (aDate month monthIndex).
	(aCard isExpiredOn: monthOfYear) ifTrue: [self error: self cannotCheckoutWithExpiredCard]! !

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 15:31:38'!
PASSED!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:33:37' prior: 50899214!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook |
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	salesBook := OrderedCollection new.
	self assert: 100 equals: (cashier checkout).
	self assert: 1 equals: salesBook size.
	self assert: salesBook size includes: StoreTestObjects itemSellByTheStore.
	! !
!CashierPerSale methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:39:30' prior: 50899227!
checkout

	| total |
	total := cart total.
	cart clear.
	
	salesbook add: total.
	^ total
! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:40:55' prior: 50900163!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook total |
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	salesBook := OrderedCollection new.
	total := cashier checkout
	self assert: 100 equals: cashier checkout.
	self assert: 1 equals: salesBook size.
	self assert:  total equals: salesBook first.
	! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:42:51' prior: 50900187!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook total |
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	salesBook := OrderedCollection new.
	total := cashier checkout
	self assert: 100 equals: cashier checkout.
	self assert: 1 equals: salesBook size.
	self assert:  total equals: salesBook first.
	! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:44:07'!
test05CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	total := cashier checkout.
	
	self assert: salesBook isEmpty not.
	self assert: total  first equals: salesBook.! !

!methodRemoval: CashierPerSaleTest #test04CheckOutRegistersASale stamp: 'DV 6/16/2021 15:44:07'!
test04CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	total := cashier checkout.
	
	self assert: salesBook isEmpty not.
	self assert: total  first equals: salesBook.!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:44:38' prior: 50900205!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook total |
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	salesBook := OrderedCollection new.
	total := cashier checkout
	self assert: 100 equals: cashier checkout.
! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:44:56' prior: 50900222!
test05CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	total := cashier checkout.
	
	self assert: 1 equals: salesBook size.
	self assert:  total equals: salesBook first.
	! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:45:33' prior: 50900254!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	total := cashier checkout
	self assert: 100 equals: cashier checkout.
! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:46:20'!
defaultPriceList
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:46:20' prior: 50898947!
createCart
	^Cart acceptingItemsOf: self defaultPriceList! !

!methodRemoval: StoreTestObjects class #defaultCatalog stamp: 'DV 6/16/2021 15:46:20'!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:47:12'!
defaultCatalogue
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:47:12' prior: 50900308!
createCart
	^Cart acceptingItemsOf: self defaultCatalogue! !

!methodRemoval: StoreTestObjects class #defaultPriceList stamp: 'DV 6/16/2021 15:47:12'!
defaultPriceList
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:47:42'!
itemSellByTheStorePrice
	
	^ 100! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:47:56' prior: 50900319!
defaultCatalogue
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: self itemSellByTheStorePrice .
	^dict! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:47:59' prior: 50900342!
defaultCatalogue
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: self itemSellByTheStorePrice.
	^dict! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:48:33' prior: 50900286!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	total := cashier checkout.
	self assert: StoreTestObjects itemSellByTheStorePrice equals: cashier checkout.
! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34'!
createEmptyCart
	^Cart acceptingItemsOf: self defaultCatalogue! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50900048!
test01CreatingAChashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createEmptyCart with: self nonExpiredCard onDate: today registeringOn: salesBook ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: CashierPerSale cannotCheckoutEmptyCart].
	
	self assert: salesBook isEmpty.
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897779!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjects createEmptyCart.
	
	cart add: 2 of: testObjects itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjects itemSellByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897754!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjects createEmptyCart.
	
	cart add: testObjects itemSellByTheStore.
	self assert: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897741!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjects createEmptyCart.
	
	self 
		should: [cart add: 0 of: testObjects itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50900357!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCart add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	total := cashier checkout.
	self assert: StoreTestObjects itemSellByTheStorePrice equals: cashier checkout.
! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50900064!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard on: today ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897960!
test11CartIsEmptyAfterClear

	| cart |
	
	cart := testObjects createEmptyCart.
	50 timesRepeat: [	cart  add: testObjects itemSellByTheStore].
	cart clear.
	self assert: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897617!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjects createEmptyCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50899866!
test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createEmptyCart add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897911!
test09EmptyCartTotalIsZero

	| cart |
	
	cart := testObjects createEmptyCart.
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897578!
test01NewCartsAreCreatedEmpty

	self assert: testObjects createEmptyCart isEmpty! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897733!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjects createEmptyCart.
	
	cart add: testObjects itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897763!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjects createEmptyCart.
	
	self deny: (cart includes: testObjects itemSellByTheStore)! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50899403!
test04CheckOutClearsCart

	| cashier oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	cashier checkout.
	
	self assert: oneItemCart isEmpty! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897583!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjects createEmptyCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50900269!
test05CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	total := cashier checkout.
	
	self assert: 1 equals: salesBook size.
	self assert:  total equals: salesBook first.
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897917!
test10EmptyCartTotalIsCorrectForMultipleItems

	| cart |
	
	cart := testObjects createEmptyCart.
	50 timesRepeat: [	cart  add: testObjects itemSellByTheStore].
	self assert: 5000 equals: cart total. ! !

!methodRemoval: StoreTestObjects class #createCart stamp: 'DV 6/16/2021 15:57:34'!
createCart
	^Cart acceptingItemsOf: self defaultCatalogue!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02'!
createEmptyCartWithDefaultCatalogue
	^Cart acceptingItemsOf: self defaultCatalogue! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900522!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: testObjects itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900584!
test10EmptyCartTotalIsCorrectForMultipleItems

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	50 timesRepeat: [	cart  add: testObjects itemSellByTheStore].
	self assert: 5000 equals: cart total. ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900405!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: testObjects itemSellByTheStore.
	self assert: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900395!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: 2 of: testObjects itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjects itemSellByTheStore) = 2! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900445!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard on: today ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900516!
test01NewCartsAreCreatedEmpty

	self assert: testObjects createEmptyCartWithDefaultCatalogue isEmpty! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900471!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900531!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	self deny: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900509!
test09EmptyCartTotalIsZero

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	self assert: 0 equals: cart total.! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900567!
test05CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	total := cashier checkout.
	
	self assert: 1 equals: salesBook size.
	self assert:  total equals: salesBook first.
	! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900428!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	total := cashier checkout.
	self assert: StoreTestObjects itemSellByTheStorePrice equals: cashier checkout.
! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900485!
test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900539!
test04CheckOutClearsCart

	| cashier oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	cashier checkout.
	
	self assert: oneItemCart isEmpty! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50900553!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:03' prior: 50900414!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 0 of: testObjects itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:03' prior: 50900379!
test01CreatingAChashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createEmptyCartWithDefaultCatalogue with: self nonExpiredCard onDate: today registeringOn: salesBook ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: CashierPerSale cannotCheckoutEmptyCart].
	
	self assert: salesBook isEmpty.
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:03' prior: 50900462!
test11CartIsEmptyAfterClear

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	50 timesRepeat: [	cart  add: testObjects itemSellByTheStore].
	cart clear.
	self assert: cart isEmpty ! !

!methodRemoval: StoreTestObjects class #createEmptyCart stamp: 'DV 6/16/2021 15:58:03'!
createEmptyCart
	^Cart acceptingItemsOf: self defaultCatalogue!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:02:55' prior: 50900719!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook total newCatalgue |

	newCatalgue :=  StoreTestObjects defaultCatalogue at: 'anotherBook' put: 200.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	oneItemCart add: 'anotherBook'.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	total := cashier checkout.
	self assert: StoreTestObjects itemSellByTheStorePrice + 200 equals: cashier checkout.
! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:03:51' prior: 50900835!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook total newCatalgue |

	newCatalgue :=  StoreTestObjects defaultCatalogue at: 'anotherBook' put: 200.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	2 timesRepeat: [oneItemCart add: 'anotherBook'].
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook .
	total := cashier checkout.
	self assert: StoreTestObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:03:56'!
ERROR!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:04:04' prior: 50900856!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook newCatalgue |

	newCatalgue :=  StoreTestObjects defaultCatalogue at: 'anotherBook' put: 200.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	2 timesRepeat: [oneItemCart add: 'anotherBook'].
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook .
	self assert: StoreTestObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:05:08' prior: 50900882!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook newCatalgue |

	newCatalgue :=  StoreTestObjects defaultCatalogue at: 'anotherBook' put: 200.
	salesBook := OrderedCollection new.
	oneItemCart := (Cart acceptingItemsOf: newCatalgue) add: StoreTestObjects itemSellByTheStore.
	2 timesRepeat: [oneItemCart add: 'anotherBook'].
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook .
	self assert: StoreTestObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:05:43' prior: 50900903!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier multipleItemCart salesBook newCatalgue |

	newCatalgue :=  StoreTestObjects defaultCatalogue at: 'anotherBook' put: 200.
	salesBook := OrderedCollection new.
	multipleItemCart := (Cart acceptingItemsOf: newCatalgue) add: StoreTestObjects itemSellByTheStore.
	2 timesRepeat: [multipleItemCart add: 'anotherBook'].
	cashier := self createCashierWith: multipleItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook .
	self assert: StoreTestObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:05:59'!
ERROR!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:07:07' prior: 50900924!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier multipleItemCart salesBook newCatalogue |

	newCatalogue :=  StoreTestObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 200.
	salesBook := OrderedCollection new.
	multipleItemCart := (Cart acceptingItemsOf: newCatalogue) add: StoreTestObjects itemSellByTheStore.
	2 timesRepeat: [multipleItemCart add: 'anotherBook'].
	cashier := self createCashierWith: multipleItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook .
	self assert: StoreTestObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:07:15'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 16:07:15'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:07:15'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 16:07:15'!
FAILURE!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 16:07:15'!
ERROR!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 16:07:15'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 16:07:15'!
ERROR!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:07:52' prior: 50900644!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard onDate: today registeringOn: salesBook ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText]! !

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 16:07:56'!
PASSED!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:08:24' prior: 50900997!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard onDate: today registeringOn: salesBook ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText].
	
	self assert: salesBook isEmpty ! !

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 16:08:27'!
PASSED!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:08:57' prior: 50900761!
test04CheckOutClearsCart

	| cashier oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty! !

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 16:09:06'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 16:09:06'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:09:06'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 16:09:06'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 16:09:06'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 16:09:06'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 16:09:06'!
ERROR!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:09:25' prior: 50900701!
test05CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	total := cashier checkout.
	
	self assert: 1 equals: salesBook size.
	self assert:  total equals: salesBook first.
	! !

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 16:09:28'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 16:09:28'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:09:28'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 16:09:28'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 16:09:28'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 16:09:28'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 16:09:28'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 16:09:28'!
ERROR!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:11:11'!
xtest07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !

!methodRemoval: CashierPerSaleTest #test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 16:11:11'!
test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:11:46'!
test02CheckingOutWIthCashierPerSaleTwiceRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard onDate: today registeringOn: salesBook ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText].
	
	self assert: salesBook isEmpty ! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:11:56'!
test06CheckingOutWIthCashierPerSaleTwiceRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard onDate: today registeringOn: salesBook ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText].
	
	self assert: salesBook isEmpty ! !

!methodRemoval: CashierPerSaleTest #test02CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 16:11:56'!
test02CheckingOutWIthCashierPerSaleTwiceRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard onDate: today registeringOn: salesBook ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText].
	
	self assert: salesBook isEmpty !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:12:53' prior: 50901199!
test06CheckingOutWIthCashierPerSaleTwiceRaisesError

	| oneItemCart salesBook cashier |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	self 
		should: [ cashier checkout ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutTwice equals: anError messageText].
	
	self assert: salesBook isEmpty ! !
!CashierPerSale class methodsFor: 'error' stamp: 'DV 6/16/2021 16:13:20'!
cannotCheckoutTwice
	^'El cajero por venta se puede usar solo una vez'.! !

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 16:13:29'!
FAILURE!

!classDefinition: #CashierPerSale category: 'TusLibros' stamp: 'DV 6/16/2021 16:14:11'!
Object subclass: #CashierPerSale
	instanceVariableNames: 'catalog items priceChart cart creditCard salesbook used'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierPerSale methodsFor: 'initialization' stamp: 'DV 6/16/2021 16:14:09' prior: 50899955!
initializeWith:aCart with: aCreditCard with: aSalesbook

	cart := aCart.
	creditCard := aCreditCard. 
	salesbook := aSalesbook.
	used := false.! !
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 16:14:46' prior: 50900181!
checkout

	| total |
	self assertCashierPerSaleHasNotBeenUsedBefore.
	total := cart total.
	cart clear.
	
	salesbook add: total.
	^ total
! !
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 16:15:37'!
assertHasNotBeenUsedBefore.
	used ifTrue:[self error: self class cannotCheckoutTwice]! !

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 16:15:40'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:15:40'!
ERROR!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 16:15:40'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 16:15:40'!
ERROR!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 16:15:40'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 16:15:40'!
ERROR!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:15:44'!
ERROR!
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 16:16:10' prior: 50901286!
checkout

	| total |
	self assertCashierPerSaleHasNotBeenUsedBefore.
	total := cart total.
	cart clear.
	used := true.
	salesbook add: total.
	^ total
! !
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 16:16:17' prior: 50901324!
checkout

	| total |
	self assertHasNotBeenUsedBefore.
	total := cart total.
	cart clear.
	used := true.
	salesbook add: total.
	^ total
! !

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 16:16:18'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:16:18'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 16:16:18'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 16:16:18'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 16:16:19'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 16:16:19'!
FAILURE!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 16:16:19'!
FAILURE!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:16:55' prior: 50901239!
test06CheckingOutWIthCashierPerSaleTwiceRaisesError

	| oneItemCart salesBook cashier |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	self 
		should: [ cashier checkout ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutTwice equals: anError messageText].
	
	self assert: 1 equals: salesBook size! !

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 16:16:56'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 16:16:56'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:16:56'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 16:16:56'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 16:16:56'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 16:16:56'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 16:16:56'!
PASSED!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:17:25' prior: 50901131!
xtest07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:17:35' prior: 50901412!
xtest07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashier.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:22:22' prior: 50901435!
xtest07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !

!classRemoval: #MPSimulatorTest stamp: 'DV 6/16/2021 16:28:25'!
TestCase subclass: #MPSimulatorTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulator class methodsFor: 'nil' stamp: 'DV 6/16/2021 16:31:33'!
answerWithStolenCard
	^ self new initializeWithStolenCard! !

!methodRemoval: MPSimulator #addStolenCard: stamp: 'DV 6/16/2021 16:31:50'!
addStolenCard:aCreditCard
	stolenCards add: aCreditCard 
	!

!methodRemoval: MPSimulator #initialize stamp: 'DV 6/16/2021 16:31:56'!
initialize
	stolenCards := OrderedCollection new.!

!classDefinition: #MPSimulator category: 'TusLibros' stamp: 'DV 6/16/2021 16:32:25'!
Object subclass: #MPSimulator
	instanceVariableNames: 'stolenCards errorBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulator methodsFor: 'nil' stamp: 'DV 6/16/2021 16:32:24'!
initializeWithStolenCard
	errorBlock:=[].! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 16:33:01' prior: 50898375!
charge: anAmount on: aCreditCard
	errorBlock value.
	"	
		Tarjeta robada
		Fondos Insuficientes
		Tarjeta Falsa
		Ok
	"! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 16:33:10' prior: 50901510!
initializeWithStolenCard
	errorBlock:=[].! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:33:41' prior: 50901458!
xtest07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:34:22' prior: 50901527!
xtest07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	card := StoreTestObjects new createCard.
	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:34:40' prior: 50901552!
xtest07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	card := StoreTestObjects new createCard.
	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: CashierPerSale cannotChargeStolenCard equals: anError messageText] ! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:34:50'!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	card := StoreTestObjects new createCard.
	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: CashierPerSale cannotChargeStolenCard equals: anError messageText] ! !

!methodRemoval: CashierPerSaleTest #xtest07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 16:34:50'!
xtest07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	card := StoreTestObjects new createCard.
	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: CashierPerSale cannotChargeStolenCard equals: anError messageText] !
!CashierPerSale class methodsFor: 'error' stamp: 'DV 6/16/2021 16:35:31'!
cannotChargeStolenCard
	^'La tarjeta se encuentra reportada como robada por el MerchantProcessor'.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:41:23' prior: 50901602!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	card := StoreTestObjects new createCard.
	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText] ! !

!methodRemoval: CashierPerSale class #cannotChargeStolenCard stamp: 'DV 6/16/2021 16:43:28'!
cannotChargeStolenCard
	^'La tarjeta se encuentra reportada como robada por el MerchantProcessor'.!
!MPSimulator class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 16:43:50'!
cannotChargeStolenCard
	^'La tarjeta se encuentra reportada como robada por el MerchantProcessor'.! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 16:44:14' prior: 50901515!
charge: anAmount on: aCreditCard
	self error: self class cannotChargeStolenCard.
	"	
		Tarjeta robada
		Fondos Insuficientes
		Tarjeta Falsa
		Ok
	"! !

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 16:44:16'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 16:44:16'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 16:44:16'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 16:44:16'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 16:44:16'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 16:44:16'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 16:44:16'!
ERROR!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 16:44:16'!
ERROR!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 16:44:27' prior: 50901659!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	card := StoreTestObjects createCard.
	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText] ! !

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 16:44:28'!
PASSED!
Merchant Procesor Simulator!
Simulador del Merchant Procesor!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 16:44:51'!
PASSED!

----STARTUP---- (16 June 2021 18:12:20) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!

!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 10:28:44' prior: 50898224 overrides: 16927572!
setUp 
	testObjects := StoreTestObjects new.
	today  := GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:23'!
Cashier class
	instanceVariableNames: 'cart'!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:23'!
Cashier class
	instanceVariableNames: 'cart creditCard'!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:31:13'!
forCheckoutWith: aCart ChargingTo: aCreditCard

	cart := aCart.
	creditCard := aCreditCard ! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 10:31:43'!
assertACartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart]! !

!methodRemoval: Cashier #assertACartIsNotEmpty: stamp: 'DV 6/16/2021 18:12:23'!
assertACartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart]!
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 10:31:58'!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]! !

!methodRemoval: Cashier #assertCardDateIsNotExpired:onDate: stamp: 'DV 6/16/2021 18:12:23'!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:34:28'!
forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart with: aCreditCard! !

!methodRemoval: Cashier class #forCheckoutWith:ChargingTo: stamp: 'DV 6/16/2021 18:12:23'!
forCheckoutWith: aCart ChargingTo: aCreditCard

	cart := aCart.
	creditCard := aCreditCard !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:23'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:23'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'DV 6/16/2021 10:35:32'!
initializeWith:aCart With: aCreditCard

	cart := aCart.
	creditCard := aCreditCard ! !

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:23'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:23'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:36:28' prior: 50901824!
forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart With: aCreditCard! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 10:28:44' prior: 50901773 overrides: 16927572!
setUp 
	testObjects := StoreTestObjects new.
	today  := GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:23'!
Cashier class
	instanceVariableNames: 'cart'!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:23'!
Cashier class
	instanceVariableNames: 'cart creditCard'!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:31:13'!
forCheckoutWith: aCart ChargingTo: aCreditCard

	cart := aCart.
	creditCard := aCreditCard ! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 10:31:43' prior: 50901796!
assertACartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self class cannotCheckoutEmptyCart]! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 10:31:58' prior: 50901808!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self class cannotCheckoutWithExpiredCard]! !
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:34:28' prior: 50901868!
forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart with: aCreditCard! !

!methodRemoval: Cashier class #forCheckoutWith:ChargingTo: stamp: 'DV 6/16/2021 18:12:23'!
forCheckoutWith: aCart ChargingTo: aCreditCard

	cart := aCart.
	creditCard := aCreditCard !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:24'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:24'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'DV 6/16/2021 10:35:32' prior: 50901854!
initializeWith:aCart With: aCreditCard

	cart := aCart.
	creditCard := aCreditCard ! !

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:24'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:24'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 10:36:28' prior: 50901916!
forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart With: aCreditCard! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:21:38' prior: 50901878 overrides: 16927572!
setUp 
	today  := GregorianMonthOfYear yearNumber: (Date today yearNumber) monthNumber: (Date today month monthIndex)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:22:01' prior: 50898502!
test01CheckOutEmptyCartRaisesError

	| cashier salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	self should: [cashier checkout: StoreTestObjects createCart withCard: self nonExpiredCard] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:19'!
createCard
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self validCardDate ! !

!methodRemoval: StoreTestObjects #createCard stamp: 'DV 6/16/2021 18:12:24'!
createCard
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self validCardDate !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:24'!
createCart
	^Cart acceptingItemsOf: self defaultCatalog! !

!methodRemoval: StoreTestObjects #createCart stamp: 'DV 6/16/2021 18:12:24'!
createCart
	^Cart acceptingItemsOf: self defaultCatalog!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:30'!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict! !

!methodRemoval: StoreTestObjects #defaultCatalog stamp: 'DV 6/16/2021 18:12:24'!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:33'!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: StoreTestObjects #itemSellByTheStore stamp: 'DV 6/16/2021 18:12:24'!
itemSellByTheStore
	
	^ 'validBook'!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:36'!
validCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 5 monthNumber: (Date today month monthIndex)! !

!methodRemoval: StoreTestObjects #validCardDate stamp: 'DV 6/16/2021 18:12:24'!
validCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 5 monthNumber: (Date today month monthIndex)!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:41'!
validCardName
	^ 'Sim�n Bol�var'! !

!methodRemoval: StoreTestObjects #validCardName stamp: 'DV 6/16/2021 18:12:24'!
validCardName
	^ 'Sim�n Bol�var'!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:22:46'!
validCardNumber
	^5555555555554444 ! !

!methodRemoval: StoreTestObjects #validCardNumber stamp: 'DV 6/16/2021 18:12:24'!
validCardNumber
	^5555555555554444 !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:23:29' prior: 50898245!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.
	self assert: 100 equals: (cashier checkout: oneItemCart withCard: self nonExpiredCard)! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:23:45' prior: 50898258!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:23:54' prior: 50898275!
test04CheckOutClearsCart

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:24:06' prior: 50898643!
test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:24:51' prior: 50901978!
test01CheckOutEmptyCartRaisesError

	| cashier salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:25:26' prior: 50902130!
test01CheckOutEmptyCartRaisesError

	| cashier salesBook |
	cashier := self createCashierWith:StoreTestObjects createCart With: self nonExpiredCard On:today.
	salesBook := OrderedCollection new.
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/16/2021 13:26:53'!
createCashierWith: aCart with: aCreditCard on: aDate.
	^ Cashier forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: aDate! !
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 13:27:19'!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart With: aCreditCard! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:27:19' prior: 50902155!
createCashierWith: aCart with: aCreditCard on: aDate.
	^ Cashier forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate! !

!methodRemoval: Cashier class #forCheckoutWith:ChargingTo:OnDate: stamp: 'DV 6/16/2021 18:12:24'!
forCheckoutWith: aCart ChargingTo: aCreditCard OnDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart With: aCreditCard!
!CashierTest methodsFor: 'support' stamp: 'DV 6/16/2021 13:27:52' prior: 50897079!
nonExpiredCard
	^ StoreTestObjects createCard ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:28:07' prior: 50902142!
test01CheckOutEmptyCartRaisesError

	| cashier salesBook |
	cashier := self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today.
	salesBook := OrderedCollection new.
	self should: [cashier checkout] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 13:28:30' prior: 50901901!
assertACartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self cannotCheckoutEmptyCart]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:29:11' prior: 50902194!
test01CheckOutEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:29:42'!
test01CreatingAChashierWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !

!methodRemoval: CashierTest #test01CheckOutEmptyCartRaisesError stamp: 'DV 6/16/2021 18:12:24'!
test01CheckOutEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	!

!methodRemoval: CashierTest #createCashier stamp: 'DV 6/16/2021 18:12:24'!
createCashier
	^ Cashier new!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:30:59' prior: 50902064!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier oneItemCart salesBook |
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	salesBook := OrderedCollection new.
	self assert: 100 equals: (cashier checkout)! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:31:24'!
checkout

	| total |
	total := cart total.
	cart clear.
	^ total
! !

!methodRemoval: Cashier #checkout:withCard: stamp: 'DV 6/16/2021 18:12:24'!
checkout: aCart withCard: aCreditCard
	| total |
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard.
	total := aCart total.
	aCart clear.
	^ total
!

!methodRemoval: Cashier #checkout:withCard:onDate: stamp: 'DV 6/16/2021 18:12:24'!
checkout: aCart withCard: aCreditCard onDate: today
	| total |
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	total := aCart total.
	aCart clear.
	^ total
!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:32:58'!
test03CreatingaACashierPerSaleWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !

!methodRemoval: CashierTest #test03CheckOutWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:12:24'!
test03CheckOutWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:33:09'!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !

!methodRemoval: CashierTest #test03CreatingaACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:12:24'!
test03CreatingaACashierPerSaleWithExpiredCreditCardRaisesError

	| cashier oneItemCart salesBook |
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [cashier checkout: oneItemCart withCard: self expiredCard ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:33:16'!
test01CreatingAChashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	! !

!methodRemoval: CashierTest #test01CreatingAChashierWithEmptyCartRaisesError stamp: 'DV 6/16/2021 18:12:24'!
test01CreatingAChashierWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard on:today] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:33:51' prior: 50902324!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard on: today ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Cashier cannotCheckoutWithExpiredCard equals: anError messageText]! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 13:34:52' prior: 50901908!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	^ (aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self cannotCheckoutWithExpiredCard]! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 13:35:04' prior: 50902403!
assertCardDateIsNotExpired: aCard onDate: aMonthOfYear

	(aCard isExpiredOn: aMonthOfYear) ifTrue: [self error: self cannotCheckoutWithExpiredCard]! !
!Cashier class methodsFor: 'assertions' stamp: 'DV 6/16/2021 13:35:10' prior: 50902208!
assertACartIsNotEmpty: aCart

	aCart isEmpty ifTrue:[self error: self cannotCheckoutEmptyCart]! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 13:45:25' prior: 50902094!
test04CheckOutClearsCart

	| cashier oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today.
	cashier checkout.
	
	self assert: oneItemCart isEmpty! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:46:23'!
createExpiredCard
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self expiredCardDate ! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:46:40'!
expiredCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) -5 monthNumber: (Date today month monthIndex)! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02'!
nonExpiredCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 5 monthNumber: (Date today month monthIndex)! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50898158!
xtest02CreatingACardWithEmptyNameRaisesError

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects nonExpiredCardDate equals: card date.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50898121!
test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects nonExpiredCardDate equals: card date.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50896099!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: testObjects validCardNumber withExpirationDate: testObjects nonExpiredCardDate 
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50896493!
createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: '5234-3928-3468AB' withExpirationDate: testObjects nonExpiredCardDate 
	
	
	
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50898398!
createCardWithInvalidShortNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: 0 withExpirationDate: testObjects nonExpiredCardDate
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50898389!
createCardWithInvalidLongNumberAndValidNameAndExpirationDate
	^CreditCard withName: testObjects validCardName withNumber: 666666666666666666666666 withExpirationDate: testObjects nonExpiredCardDate
! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 13:47:02' prior: 50901992!
createCard
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self nonExpiredCardDate ! !

!methodRemoval: StoreTestObjects class #validCardDate stamp: 'DV 6/16/2021 18:12:24'!
validCardDate
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 5 monthNumber: (Date today month monthIndex)!
!CashierTest methodsFor: 'support' stamp: 'DV 6/16/2021 13:47:54' prior: 50895431!
expiredCard
	^ StoreTestObjects createExpiredCard ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 14:29:22' prior: 50898048!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsValid: aName.
	self assertCardNumberDigitsAndLengthAreValid: aNumber.
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 14:30:30'!
assertCardNameIsValid: aName
	self assertCardNameIsNotEmpty:aName.
	self assertCardNameIsNotLongerThan30Characters: aName.! !
!CreditCard class methodsFor: 'error messages' stamp: 'DV 6/16/2021 14:30:55' prior: 50895776!
invalidNameErrorMessage
	^'El nombre debe contener como m�ximo 30 caracteres y no ser vac�o.'! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:43:44' prior: 50897340!
assertCardNumberSizeis16Digits: aNumber
	'''0000-0000-0000-0000 preguntar'''.
	^ ((aNumber numberOfDigitsInBase: 10) ~= 16) ifTrue: [self error: self invalidNumberErrorMessage]! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:44:28'!
assertCardNameIsNotEmpty:aName
	aName withBlanksTrimmed isEmpty 
! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:44:36' prior: 50896716!
assertCardNameIsNotLongerThan30Characters: aName

	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage]! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:44:51' prior: 50902578!
assertCardNameIsNotEmpty:aName
	(aName withBlanksTrimmed isEmpty) ifTrue: [self error: self invalidNameErrorMessage]! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:46:27' prior: 50896790!
assertCardNumberDigitsAndLengthAreValid: aNumber

	self assertCardNumberSizeis16Digits: aNumber
! !

!methodRemoval: CreditCard class #assertCardNumberOnlyHasDigits: stamp: 'DV 6/16/2021 18:12:24'!
assertCardNumberOnlyHasDigits: aNumber

	^ (aNumber asString) detect:[:c| c isDigit not] ifFound:[:c| self error: self invalidNumberErrorMessage] ifNone:[]!

!methodRemoval: CreditCard class #assertCardNumberDigitsAndLengthAreValid: stamp: 'DV 6/16/2021 18:12:24'!
assertCardNumberDigitsAndLengthAreValid: aNumber

	self assertCardNumberSizeis16Digits: aNumber
!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 14:46:51' prior: 50902547!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsValid: aName.
	self assertCardNumberSizeis16Digits: aNumber.
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:47:24' prior: 50902570!
assertCardNumberSizeis16Digits: aNumber
	^ ((aNumber numberOfDigitsInBase: 10) ~= 16) ifTrue: [self error: self invalidNumberErrorMessage]! !

!methodRemoval: CreditCardTest #setUp stamp: 'DV 6/16/2021 18:12:25'!
setUp 
	testObjects := StoreTestObjects  new!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:48:22' prior: 50902474!
test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := StoreTestObjects  createCard.
	
	self assert: StoreTestObjects validCardName equals: card name.
	self assert: StoreTestObjects validCardNumber equals: card number.
	self assert: StoreTestObjects nonExpiredCardDate equals: card date.! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:49:40' prior: 50902518!
createCardWithInvalidLongNumberAndValidNameAndExpirationDate
	^CreditCard withName: StoreTestObjects validCardName withNumber: 666666666666666666666666 withExpirationDate: StoreTestObjects nonExpiredCardDate
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:49:48' prior: 50902487!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: StoreTestObjects validCardNumber withExpirationDate: StoreTestObjects nonExpiredCardDate 
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:49:56' prior: 50902499!
createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate
	^CreditCard withName: StoreTestObjects validCardName withNumber: '5234-3928-3468AB' withExpirationDate: StoreTestObjects nonExpiredCardDate 
	
	
	
! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:50:05' prior: 50902509!
createCardWithInvalidShortNumberAndValidNameAndExpirationDate
	^CreditCard withName: StoreTestObjects validCardName withNumber: 0 withExpirationDate: StoreTestObjects nonExpiredCardDate
! !
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:50:38' prior: 50896914!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate ] 
	raise: Error 
	withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage]! !

!methodRemoval: CreditCardTest #createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate stamp: 'DV 6/16/2021 18:12:25'!
createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate
	^CreditCard withName: StoreTestObjects validCardName withNumber: '5234-3928-3468AB' withExpirationDate: StoreTestObjects nonExpiredCardDate 
	
	
	
!

!methodRemoval: CreditCardTest #test04CreatingACardWithANumberThatIsNotANumberRaisesError stamp: 'DV 6/16/2021 18:12:25'!
test04CreatingACardWithANumberThatIsNotANumberRaisesError

	self should:[self createCardWithInvalidNonDigitsNumberAndValidNameAndExpirationDate ] 
	raise: Error 
	withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage]!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:52:31' prior: 50895752!
test01CreatingACardWithANameLongerThan30CharactersRaisesError

	self should:[self createCardWithInvalidLongNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage].
		
	self should:[self createCardWithInvalidShortNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage]

	! !
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:52:52'!
createCardWithInvalidLongNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: StoreTestObjects validCardNumber withExpirationDate: StoreTestObjects nonExpiredCardDate 
! !

!methodRemoval: CreditCardTest #createCardWithInvalidNameAndValidNumberAndExpirationDate stamp: 'DV 6/16/2021 18:12:25'!
createCardWithInvalidNameAndValidNumberAndExpirationDate
	^CreditCard withName: 'Sim�n Jos� Antonio de la Sant�sima Trinidad Bol�var y Ponte Palacios y Blanco' withNumber: StoreTestObjects validCardNumber withExpirationDate: StoreTestObjects nonExpiredCardDate 
!
!CreditCardTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:53:00'!
createCardWithInvalidShortNameAndValidNumberAndExpirationDate
	^CreditCard withName: '' withNumber: StoreTestObjects validCardNumber withExpirationDate: StoreTestObjects nonExpiredCardDate 
! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:54:20'!
test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !

!methodRemoval: CashierTest #test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:12:25'!
test05CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:55:09'!
test04CheckOutRegistersASale
	| cashier oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty! !
!Cashier class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 14:55:54'!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: today registeringOn:aSalesbook
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart with: aCreditCard with: aSalesbook.! !

!methodRemoval: Cashier class #forCheckoutWith:chargingTo:onDate: stamp: 'DV 6/16/2021 18:12:25'!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: today
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: today.
	
	^ self new initializeWith: aCart With: aCreditCard!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:25'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart creditCard salesbook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'DV 6/16/2021 14:56:37'!
initializeWith:aCart with: aCreditCard with: aSalesbook

	cart := aCart.
	creditCard := aCreditCard. 
	salesbook := aSalesbook ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 14:58:26' prior: 50902824!
test04CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	total := cashier checkout.
	
	self assert: salesBook isEmpty not.
	self assert: total  first equals: salesBook.! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/16/2021 14:59:18'!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook
	^ Cashier forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook! !

!methodRemoval: CashierTest #createCashierWith:with:on: stamp: 'DV 6/16/2021 18:12:25'!
createCashierWith: aCart with: aCreditCard on: aDate.
	^ Cashier forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate!
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 15:16:56' prior: 50902628!
assertCardNumberSizeis16Digits: aNumber
	((aNumber numberOfDigitsInBase: 10) ~= 16) ifTrue: [self error: self invalidNumberErrorMessage]! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 15:20:42'!
assertCardNameIsNotEmptyAndNotLongerThan30Characters: aName
	self assertCardNameIsNotEmpty:aName.
	self assertCardNameIsNotLongerThan30Characters: aName.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:20:42' prior: 50902618!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsNotEmptyAndNotLongerThan30Characters: aName.
	self assertCardNumberSizeis16Digits: aNumber.
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !

!methodRemoval: CreditCard class #assertCardNameIsValid: stamp: 'DV 6/16/2021 18:12:25'!
assertCardNameIsValid: aName
	self assertCardNameIsNotEmpty:aName.
	self assertCardNameIsNotLongerThan30Characters: aName.!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 15:22:34' prior: 50902359!
test01CreatingAChashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard onDate: today registeringOn: salesBook ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: Cashier cannotCheckoutEmptyCart].
	
	self assert: salesBook isEmpty.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:24:52' prior: 50902939!
test01CreatingAChashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard onDate: today registeringOn: salesBook ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: CashierPerSale cannotCheckoutEmptyCart].
	
	self assert: salesBook isEmpty.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:24:52' prior: 50902386!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard on: today ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:24:52' prior: 50902889!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook
	^ CashierPerSale forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:46:20'!
defaultPriceList
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:46:20' prior: 50902006!
createCart
	^Cart acceptingItemsOf: self defaultPriceList! !

!methodRemoval: StoreTestObjects class #defaultCatalog stamp: 'DV 6/16/2021 18:12:25'!
defaultCatalog
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:47:12'!
defaultCatalogue
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:47:12' prior: 50903004!
createCart
	^Cart acceptingItemsOf: self defaultCatalogue! !

!methodRemoval: StoreTestObjects class #defaultPriceList stamp: 'DV 6/16/2021 18:12:25'!
defaultPriceList
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: 100.
	^dict!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:47:42'!
itemSellByTheStorePrice
	
	^ 100! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:47:56' prior: 50903015!
defaultCatalogue
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: self itemSellByTheStorePrice .
	^dict! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:47:59' prior: 50903038!
defaultCatalogue
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: self itemSellByTheStorePrice.
	^dict! !
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34'!
createEmptyCart
	^Cart acceptingItemsOf: self defaultCatalogue! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897779!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjects createEmptyCart.
	
	cart add: 2 of: testObjects itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjects itemSellByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897754!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjects createEmptyCart.
	
	cart add: testObjects itemSellByTheStore.
	self assert: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897741!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjects createEmptyCart.
	
	self 
		should: [cart add: 0 of: testObjects itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897960!
test11CartIsEmptyAfterClear

	| cart |
	
	cart := testObjects createEmptyCart.
	50 timesRepeat: [	cart  add: testObjects itemSellByTheStore].
	cart clear.
	self assert: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897617!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjects createEmptyCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897911!
test09EmptyCartTotalIsZero

	| cart |
	
	cart := testObjects createEmptyCart.
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897578!
test01NewCartsAreCreatedEmpty

	self assert: testObjects createEmptyCart isEmpty! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897733!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjects createEmptyCart.
	
	cart add: testObjects itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897763!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjects createEmptyCart.
	
	self deny: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897583!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjects createEmptyCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:57:34' prior: 50897917!
test10EmptyCartTotalIsCorrectForMultipleItems

	| cart |
	
	cart := testObjects createEmptyCart.
	50 timesRepeat: [	cart  add: testObjects itemSellByTheStore].
	self assert: 5000 equals: cart total. ! !

!methodRemoval: StoreTestObjects class #createCart stamp: 'DV 6/16/2021 18:12:25'!
createCart
	^Cart acceptingItemsOf: self defaultCatalogue!
!StoreTestObjects class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02'!
createEmptyCartWithDefaultCatalogue
	^Cart acceptingItemsOf: self defaultCatalogue! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50903127!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: testObjects itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50903158!
test10EmptyCartTotalIsCorrectForMultipleItems

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	50 timesRepeat: [	cart  add: testObjects itemSellByTheStore].
	self assert: 5000 equals: cart total. ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50903068!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: testObjects itemSellByTheStore.
	self assert: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50903058!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: 2 of: testObjects itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjects itemSellByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50903121!
test01NewCartsAreCreatedEmpty

	self assert: testObjects createEmptyCartWithDefaultCatalogue isEmpty! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50903100!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50903136!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	self deny: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50903114!
test09EmptyCartTotalIsZero

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:02' prior: 50903144!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:03' prior: 50903077!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 0 of: testObjects itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 15:58:03' prior: 50903091!
test11CartIsEmptyAfterClear

	| cart |
	
	cart := testObjects createEmptyCartWithDefaultCatalogue.
	50 timesRepeat: [	cart  add: testObjects itemSellByTheStore].
	cart clear.
	self assert: cart isEmpty ! !

!methodRemoval: StoreTestObjects class #createEmptyCart stamp: 'DV 6/16/2021 18:12:26'!
createEmptyCart
	^Cart acceptingItemsOf: self defaultCatalogue!

!classDefinition: #CashierPerSale category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:26'!
Object subclass: #CashierPerSale
	instanceVariableNames: 'catalog items priceChart cart creditCard salesbook used'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierPerSale methodsFor: 'initialization' stamp: 'DV 6/16/2021 16:14:09'!
initializeWith:aCart with: aCreditCard with: aSalesbook

	cart := aCart.
	creditCard := aCreditCard. 
	salesbook := aSalesbook.
	used := false.! !
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 16:14:46'!
checkout

	| total |
	self assertCashierPerSaleHasNotBeenUsedBefore.
	total := cart total.
	cart clear.
	
	salesbook add: total.
	^ total
! !
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 16:15:37'!
assertHasNotBeenUsedBefore.
	used ifTrue:[self error: self class cannotCheckoutTwice]! !
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 16:16:10' prior: 50903315!
checkout

	| total |
	self assertCashierPerSaleHasNotBeenUsedBefore.
	total := cart total.
	cart clear.
	used := true.
	salesbook add: total.
	^ total
! !
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 16:16:17' prior: 50903328!
checkout

	| total |
	self assertHasNotBeenUsedBefore.
	total := cart total.
	cart clear.
	used := true.
	salesbook add: total.
	^ total
! !

!classRemoval: #MPSimulatorTest stamp: 'DV 6/16/2021 18:12:26'!
TestCase subclass: #MPSimulatorTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulator class methodsFor: 'nil' stamp: 'DV 6/16/2021 16:31:33'!
answerWithStolenCard
	^ self new initializeWithStolenCard! !

!methodRemoval: MPSimulator #addStolenCard: stamp: 'DV 6/16/2021 18:12:26'!
addStolenCard:aCreditCard
	stolenCards add: aCreditCard 
	!

!methodRemoval: MPSimulator #initialize stamp: 'DV 6/16/2021 18:12:26'!
initialize
	stolenCards := OrderedCollection new.!

!classDefinition: #MPSimulator category: 'TusLibros' stamp: 'DV 6/16/2021 18:12:26'!
Object subclass: #MPSimulator
	instanceVariableNames: 'stolenCards errorBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulator methodsFor: 'nil' stamp: 'DV 6/16/2021 16:32:24'!
initializeWithStolenCard
	errorBlock:=[].! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 16:33:01' prior: 50898375!
charge: anAmount on: aCreditCard
	errorBlock value.
	"	
		Tarjeta robada
		Fondos Insuficientes
		Tarjeta Falsa
		Ok
	"! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 16:33:10' prior: 50903370!
initializeWithStolenCard
	errorBlock:=[].! !
!CashierPerSale class methodsFor: 'error' stamp: 'DV 6/16/2021 16:35:31'!
cannotChargeStolenCard
	^'La tarjeta se encuentra reportada como robada por el MerchantProcessor'.! !

!methodRemoval: CashierPerSale class #cannotChargeStolenCard stamp: 'DV 6/16/2021 18:12:26'!
cannotChargeStolenCard
	^'La tarjeta se encuentra reportada como robada por el MerchantProcessor'.!
!MPSimulator class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 16:43:50'!
cannotChargeStolenCard
	^'La tarjeta se encuentra reportada como robada por el MerchantProcessor'.! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 16:44:14' prior: 50903375!
charge: anAmount on: aCreditCard
	self error: self class cannotChargeStolenCard.
	"	
		Tarjeta robada
		Fondos Insuficientes
		Tarjeta Falsa
		Ok
	"! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:14:47'!
test05CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	total := cashier checkout.
	
	self assert: salesBook isEmpty not.
	self assert: total  first equals: salesBook.! !

!methodRemoval: CashierTest #test04CheckOutRegistersASale stamp: 'DV 6/16/2021 18:14:47'!
test04CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createCart add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard on: today registeringOn: salesBook.
	total := cashier checkout.
	
	self assert: salesBook isEmpty not.
	self assert: total  first equals: salesBook.!
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:15:44' prior: 50902777!
test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:16:30'!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] ! !

!methodRemoval: CashierTest #test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:16:30'!
test06CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	cashier := self createCashier.
	salesBook := OrderedCollection new.
	mps := self createMPSimulator.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier checkout: oneItemCart withCard: self nonExpiredCard.
	
	self assert: oneItemCart isEmpty.
	
	.
	card := StoreTestObjects new createCard.
	
	mps addStolenCard: card.

	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
	      withExceptionDo: [:anError | self assert: self class cannotChargeStolenCard equals: anError messageText] !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:16:44'!
test06CheckingOutWIthCashierPerSaleTwiceRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard onDate: today registeringOn: salesBook ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText].
	
	self assert: salesBook isEmpty ! !
!CashierTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:17:28' prior: 50901971 overrides: 16927572!
setUp 
	today  := Date today! !
Merchant Procesor Simulator!
Simulador del Merchant Procesor!

----End fileIn of /home/duerunner/Desktop/TusLibros.st----!

!classRemoval: #StoreTestObjects stamp: 'DV 6/16/2021 18:21:04'!
Object subclass: #StoreTestObjects
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MPSimulator stamp: 'DV 6/16/2021 18:21:05'!
Object subclass: #MPSimulator
	instanceVariableNames: 'stolenCards errorBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'DV 6/16/2021 18:21:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Consultas stamp: 'DV 6/16/2021 18:21:06'!
Object subclass: #Consultas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierPerSale stamp: 'DV 6/16/2021 18:21:06'!
Object subclass: #CashierPerSale
	instanceVariableNames: 'catalog items priceChart cart creditCard salesbook used'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'DV 6/16/2021 18:21:07'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart creditCard salesbook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'DV 6/16/2021 18:21:07'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'DV 6/16/2021 18:21:08'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'DV 6/16/2021 18:21:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierPerSaleTest stamp: 'DV 6/16/2021 18:21:09'!
TestCase subclass: #CashierPerSaleTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'DV 6/16/2021 18:21:10'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/TusLibros.st----!

----End fileIn of /home/duerunner/Desktop/TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test10EmptyCartTotalIsCorrectForMultipleItems stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test11CartIsEmptyAfterClear stamp: 'DV 6/16/2021 18:23:18'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

!testRun: #CartTest #test10EmptyCartTotalIsCorrectForMultipleItems stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

!testRun: #CartTest #test11CartIsEmptyAfterClear stamp: 'DV 6/16/2021 18:23:39'!
ERROR!

----End fileIn of /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/16/2021 18:24:17'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/16/2021 18:24:17'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/16/2021 18:24:17'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/16/2021 18:24:17'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/16/2021 18:24:17'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/16/2021 18:24:17'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/16/2021 18:24:17'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/16/2021 18:24:17'!
ERROR!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/16/2021 18:24:17'!
ERROR!

!testRun: #CartTest #test10EmptyCartTotalIsCorrectForMultipleItems stamp: 'DV 6/16/2021 18:24:17'!
ERROR!

!testRun: #CartTest #test11CartIsEmptyAfterClear stamp: 'DV 6/16/2021 18:24:17'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:24:38' prior: 50906270!
test01NewCartsAreCreatedEmpty

	self assert: StoreTestObjects createEmptyCartWithDefaultCatalogue isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:24:44' prior: 50906276!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:24:50' prior: 50906290!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: testObjects itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:24:55' prior: 50906299!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 0 of: testObjects itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:24:59' prior: 50907193!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 0 of: StoreTestObjects itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:25:05' prior: 50907184!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: StoreTestObjects itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:25:27' prior: 50906313!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:25:36' prior: 50906327!
test06CartRemembersAddedItems

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: StoreTestObjects itemSellByTheStore.
	self assert: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:25:40' prior: 50907244!
test06CartRemembersAddedItems

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: StoreTestObjects itemSellByTheStore.
	self assert: (cart includes: StoreTestObjects itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:25:49' prior: 50906337!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	self deny: (cart includes: StoreTestObjects itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:26:02' prior: 50906345!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	cart add: 2 of: StoreTestObjects itemSellByTheStore.
	self assert: (cart occurrencesOf: StoreTestObjects itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:26:08' prior: 50906355!
test09EmptyCartTotalIsZero

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:26:16' prior: 50906362!
test10EmptyCartTotalIsCorrectForMultipleItems

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	50 timesRepeat: [	cart  add: StoreTestObjects itemSellByTheStore].
	self assert: 5000 equals: cart total. ! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:26:26' prior: 50906372!
test11CartIsEmptyAfterClear

	| cart |
	
	cart := StoreTestObjects createEmptyCartWithDefaultCatalogue.
	50 timesRepeat: [	cart  add: StoreTestObjects itemSellByTheStore].
	cart clear.
	self assert: cart isEmpty ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CartTest #test10EmptyCartTotalIsCorrectForMultipleItems stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CartTest #test11CartIsEmptyAfterClear stamp: 'DV 6/16/2021 18:26:37'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 18:26:42'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:26:42'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:26:42'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 18:26:42'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 18:26:42'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 18:26:42'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:26:42'!
PASSED!
Merchant Procesor Simulator!
Simulador del Merchant Procesor!

!classRemoval: #Cashier stamp: 'DV 6/16/2021 18:28:05'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog items priceChart cart creditCard salesbook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 18:28:10'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:28:10'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:28:10'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 18:28:10'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 18:28:10'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 18:28:10'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:28:10'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/16/2021 18:28:14'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/16/2021 18:28:14'!
PASSED!

!testRun: #CreditCardTest #test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/16/2021 18:28:14'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:29:12'!
test02CreatingACardWithEmptyNameRaisesError

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects nonExpiredCardDate equals: card date.! !

!methodRemoval: CreditCardTest #xtest02CreatingACardWithEmptyNameRaisesError stamp: 'DV 6/16/2021 18:29:12'!
xtest02CreatingACardWithEmptyNameRaisesError

	|card|
	
	card := testObjects  createCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects nonExpiredCardDate equals: card date.!
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:29:34' prior: 50906569!
test01CreatingACardWithANameLongerThan30CharactersRaisesError

	self should:[self createCardWithInvalidLongNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage].
		
	
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:29:49' prior: 50907417!
test02CreatingACardWithEmptyNameRaisesError


	self should:[self createCardWithInvalidShortNameAndValidNumberAndExpirationDate ] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage]
! !
!CreditCardTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:29:59'!
test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := StoreTestObjects  createCard.
	
	self assert: StoreTestObjects validCardName equals: card name.
	self assert: StoreTestObjects validCardNumber equals: card number.
	self assert: StoreTestObjects nonExpiredCardDate equals: card date.! !

!methodRemoval: CreditCardTest #test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/16/2021 18:29:59'!
test05CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := StoreTestObjects  createCard.
	
	self assert: StoreTestObjects validCardName equals: card name.
	self assert: StoreTestObjects validCardNumber equals: card number.
	self assert: StoreTestObjects nonExpiredCardDate equals: card date.!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:32:32' prior: 50905577!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	card := StoreTestObjects createCard.
	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:32:33'!
FAILURE!
!CashierPerSale class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 18:37:01'!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn:aSalesbook with: aMerchantProcessor 
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: aDate.
	
	^ self new initializeWith: aCart with: aCreditCard with: aSalesbook.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:37:01' prior: 50906520!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook
	^ CashierPerSale forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook with: MPSimulator answerWithOk! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:37:01' prior: 50905601!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook
	^ CashierPerSale forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook with: MPSimulator answerWithOk! !

!methodRemoval: CashierPerSale class #forCheckoutWith:chargingTo:onDate:registeringOn: stamp: 'DV 6/16/2021 18:37:01'!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn:aSalesbook
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: aDate.
	
	^ self new initializeWith: aCart with: aCreditCard with: aSalesbook.!
!CashierPerSaleTest methodsFor: 'support' stamp: 'DV 6/16/2021 18:38:30'!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook with: aMerchanProcessor 
	^ CashierPerSale forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook with: MPSimulator answerWithOk! !
!CashierTest methodsFor: 'support' stamp: 'DV 6/16/2021 18:38:30'!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook with: aMerchanProcessor 
	^ CashierPerSale forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook with: MPSimulator answerWithOk! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:38:30' prior: 50905505!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText].
	
	self assert: salesBook isEmpty ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:38:30' prior: 50906477!
test06CheckingOutWIthCashierPerSaleTwiceRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	self 
		should: [self createCashierWith: oneItemCart with: self expiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText].
	
	self assert: salesBook isEmpty ! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:38:30' prior: 50905539!
test05CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk.
	total := cashier checkout.
	
	self assert: 1 equals: salesBook size.
	self assert:  total equals: salesBook first.
	! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:38:30' prior: 50905483!
test02CheckOutWithNonExpiredCardReturnsTotal

	| cashier multipleItemCart salesBook newCatalogue |

	newCatalogue :=  StoreTestObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 200.
	salesBook := OrderedCollection new.
	multipleItemCart := (Cart acceptingItemsOf: newCatalogue) add: StoreTestObjects itemSellByTheStore.
	2 timesRepeat: [multipleItemCart add: 'anotherBook'].
	cashier := self createCashierWith: multipleItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk .
	self assert: StoreTestObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:38:30' prior: 50905524!
test04CheckOutClearsCart

	| cashier oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.

	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk.
	cashier checkout.
	
	self assert: oneItemCart isEmpty! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:38:30' prior: 50906402!
test01CreatingAChashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: CashierPerSale cannotCheckoutEmptyCart].
	
	self assert: salesBook isEmpty.
	! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:38:30' prior: 50905467!
test01CreatingAChashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self createCashierWith:StoreTestObjects createEmptyCartWithDefaultCatalogue with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk ] raise: Error withExceptionDo:[:error| self assert: error messageText equals: CashierPerSale cannotCheckoutEmptyCart].
	
	self assert: salesBook isEmpty.
	! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:38:30' prior: 50905556!
test06CheckingOutWIthCashierPerSaleTwiceRaisesError

	| oneItemCart salesBook cashier |
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk.
	cashier checkout.
	self 
		should: [ cashier checkout ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutTwice equals: anError messageText].
	
	self assert: 1 equals: salesBook size! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:38:30' prior: 50907492!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk.
	cashier checkout.
	
	self assert: oneItemCart isEmpty.
	
	card := StoreTestObjects createCard.
	
	self should: [	mps charge: 100 on: card.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !

!methodRemoval: CashierPerSaleTest #createCashierWith:with:onDate:registeringOn: stamp: 'DV 6/16/2021 18:38:30'!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook
	^ CashierPerSale forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook with: MPSimulator answerWithOk!

!methodRemoval: CashierTest #createCashierWith:with:onDate:registeringOn: stamp: 'DV 6/16/2021 18:38:30'!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook
	^ CashierPerSale forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook with: MPSimulator answerWithOk!
!CashierPerSaleTest methodsFor: 'support' stamp: 'DV 6/16/2021 18:38:41' prior: 50907568!
createCashierWith: aCart with: aCreditCard onDate: aDate registeringOn: aSalesbook with: aMerchantProcessor 
	^ CashierPerSale forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn: aSalesbook with: aMerchantProcessor ! !
Merchant Procesor Simulator!
Simulador del Merchant Procesor!

!classRemoval: #CashierTest stamp: 'DV 6/16/2021 18:39:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulator class methodsFor: 'nil' stamp: 'DV 6/16/2021 18:40:28'!
answerWithOk
	^ self new initializeWithStolenCard! !
!MPSimulator class methodsFor: 'nil' stamp: 'DV 6/16/2021 18:40:32' prior: 50907814!
answerWithOk
	^ self new initializeWithOk! !
!MPSimulator methodsFor: 'nil' stamp: 'DV 6/16/2021 18:40:42'!
initializeWithOk
	errorBlock:=[].! !

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:40:50'!
FAILURE!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:40:50'!
FAILURE!
!CashierPerSale class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 18:42:22' prior: 50907524!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn:aSalesbook with: aMerchantProcessor 
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: aDate.
	
	^ self new initializeWith: aCart chargingTo: aCreditCard registeringOn: aSalesbook with: aMerchantProcessor.! !

!classDefinition: #CashierPerSale category: 'TusLibros' stamp: 'DV 6/16/2021 18:43:13'!
Object subclass: #CashierPerSale
	instanceVariableNames: 'catalog items priceChart cart creditCard salesbook used merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierPerSale methodsFor: 'initialization' stamp: 'DV 6/16/2021 18:43:10'!
initializeWith: aCart chargingTo: aCreditCard registeringOn: aSalesbook with: aMerchantProcessor

	cart := aCart.
	creditCard := aCreditCard. 
	salesbook := aSalesbook.
	merchantProcessor := aMerchantProcessor.
	used := false.! !

!methodRemoval: CashierPerSale #initializeWith:with:with: stamp: 'DV 6/16/2021 18:43:20'!
initializeWith:aCart with: aCreditCard with: aSalesbook

	cart := aCart.
	creditCard := aCreditCard. 
	salesbook := aSalesbook.
	used := false.!
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 18:44:01' prior: 50906869!
checkout

	| total |
	self assertHasNotBeenUsedBefore.
	total := cart total.
	merchantProcessor.
	cart clear.
	used := true.
	salesbook add: total.
	^ total
! !
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 18:44:55' prior: 50907877!
checkout

	| total |
	self assertHasNotBeenUsedBefore.
	total := cart total.
	merchantProcessor charge: total on: creditCard .
	cart clear.
	used := true.
	salesbook add: total.
	^ total
! !

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 18:44:58'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:44:58'!
ERROR!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:44:58'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 18:44:58'!
ERROR!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 18:44:58'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 18:44:58'!
ERROR!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:44:58'!
ERROR!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:45:12'!
ERROR!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:45:25'!
ERROR!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:45:56' prior: 50907748!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk.
	
	self assert: oneItemCart isEmpty.
	
	card := StoreTestObjects createCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:46:21' prior: 50907928!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook mps card|
	
	salesBook := OrderedCollection new.
	mps := MPSimulator answerWithStolenCard.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithOk.
	
	self assert: oneItemCart isEmpty.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:46:45' prior: 50907955!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithStolenCard.
	
	self assert: oneItemCart isEmpty.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:46:51'!
FAILURE!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:47:11' prior: 50907981!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithStolenCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:47:12'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 18:47:16'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:47:16'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:47:16'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:47:16'!
ERROR!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 18:47:16'!
ERROR!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 18:47:16'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 18:47:16'!
ERROR!

!classDefinition: #MPSimulator category: 'TusLibros' stamp: 'DV 6/16/2021 18:48:15'!
Object subclass: #MPSimulator
	instanceVariableNames: 'stolenCards answerOk'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:48:15' prior: 50907823!
initializeWithOk
	answerOk:=[].! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:48:15' prior: 50907014!
initializeWithStolenCard
	answerOk:=[].! !
!MPSimulator methodsFor: 'nil' stamp: 'DV 6/16/2021 18:48:22' prior: 50908072!
initializeWithOk
	answerOk:=true! !
!MPSimulator methodsFor: 'nil' stamp: 'DV 6/16/2021 18:48:27' prior: 50908077!
initializeWithStolenCard
	answerOk:=false! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:48:54' prior: 50907006!
charge: anAmount on: aCreditCard
	answerOk ifTrue: [ self error: self class cannotChargeStolenCard].
	"	
		Tarjeta robada
		Fondos Insuficientes
		Tarjeta Falsa
		Ok
	"! !

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 18:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:48:56'!
ERROR!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 18:48:56'!
ERROR!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 18:48:56'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 18:48:56'!
ERROR!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:48:56'!
FAILURE!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:48:58'!
ERROR!
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:49:19' prior: 50908090!
charge: anAmount on: aCreditCard
	answerOk ifFalse: [ self error: self class cannotChargeStolenCard].
	"	
		Tarjeta robada
		Fondos Insuficientes
		Tarjeta Falsa
		Ok
	"! !

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:49:21'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 18:49:22'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:49:22'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:49:22'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 18:49:22'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 18:49:22'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 18:49:22'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:49:22'!
PASSED!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:51:36'!
test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithFakeCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:51:50' prior: 50908167!
test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithFakeCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeFakeCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !
!MPSimulator class methodsFor: 'error messages' stamp: 'DV 6/16/2021 18:52:26'!
cannotChargeFakeCard
	^'La tarjeta se encuentra reportada como falsa por el MerchantProcessor'.! !

!classDefinition: #MPSimulator category: 'TusLibros' stamp: 'DV 6/16/2021 18:54:01'!
Object subclass: #MPSimulator
	instanceVariableNames: 'stolenCards answerOk answerFake'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulator methodsFor: 'nil' stamp: 'DV 6/16/2021 18:54:00'!
initializeWithFakeCard
	answerFake:=true! !
!MPSimulator methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:54:24' prior: 50908129!
charge: anAmount on: aCreditCard
	answerOk ifFalse: [ self error: self class cannotChargeStolenCard].
	answerFake ifTrue: [ self error: self class cannotChargeFakeCard].
	"	
		Tarjeta robada
		Fondos Insuficientes
		Tarjeta Falsa
		Ok
	"! !

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 18:54:25'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:54:25'!
ERROR!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:54:25'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 18:54:25'!
ERROR!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 18:54:25'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 18:54:25'!
ERROR!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:54:25'!
PASSED!

!testRun: #CashierPerSaleTest #test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:54:25'!
ERROR!
!MPSimulator methodsFor: 'nil' stamp: 'DV 6/16/2021 18:55:02' prior: 50908081!
initializeWithOk
	answerOk:=true.
	answerFake:= false! !

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 18:55:04'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:55:04'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:55:04'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 18:55:04'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 18:55:04'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 18:55:04'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:55:04'!
PASSED!

!testRun: #CashierPerSaleTest #test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:55:04'!
ERROR!

!testRun: #CashierPerSaleTest #test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:55:04'!
ERROR!
!MPSimulator class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:55:24'!
answerWithFakeCard
	self shouldBeImplemented.! !
!MPSimulator class methodsFor: 'as yet unclassified' stamp: 'DV 6/16/2021 18:55:41' prior: 50908312!
answerWithFakeCard
	^self new initializeWithFakeCard ! !

!testRun: #CashierPerSaleTest #test01CreatingAChashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/16/2021 18:55:43'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutWithNonExpiredCardReturnsTotal stamp: 'DV 6/16/2021 18:55:43'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/16/2021 18:55:43'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/16/2021 18:55:43'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/16/2021 18:55:43'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/16/2021 18:55:43'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:55:43'!
PASSED!

!testRun: #CashierPerSaleTest #test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:55:43'!
FAILURE!

!testRun: #CashierPerSaleTest #test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/16/2021 18:55:43'!
FAILURE!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/16/2021 18:56:40' prior: 50908190!
test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := StoreTestObjects createEmptyCartWithDefaultCatalogue add: StoreTestObjects itemSellByTheStore.
	cashier := self createCashierWith: oneItemCart with: self nonExpiredCard onDate: today registeringOn: salesBook with: MPSimulator answerWithFakeCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeFakeCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !
Merchant Procesor Simulator!
Simulador del Merchant Procesor!

----QUIT----(16 June 2021 18:57:26) CuisUniversity-4532.image priorSource: 18144480!

----STARTUP---- (16 June 2021 22:20:42) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!


----QUIT----(16 June 2021 23:00:42) CuisUniversity-4532.image priorSource: 18455333!

----STARTUP---- (16 June 2021 23:38:33) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!


----End fileIn of /home/duerunner/Downloads/TusLibros.st----!

----STARTUP---- (17 June 2021 12:56:15) as /home/duerunner/UBA/Inge1/2021-1c/TUS LIBROS/CuisUniversity-4532.image!


!classDefinition: #CartTest category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'DV 6/14/2021 14:32:33' prior: 50906266 overrides: 16927572!
setUp 
	testObjects := StoreTestObjects  new! !
!CartTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:03:59' prior: 50907164!
test01NewCartsAreCreatedEmpty

	self assert: testObjects emptyCartWithDefaultCatalogue isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:04:06' prior: 50907170!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:04:11' prior: 50907221!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	cart add: testObjects itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:04:16' prior: 50907207!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 0 of: testObjects itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:04:21' prior: 50907230!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:04:27' prior: 50907254!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	cart add: testObjects itemSellByTheStore.
	self assert: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:04:31' prior: 50907264!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self deny: (cart includes: testObjects itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:04:35' prior: 50907273!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	cart add: 2 of: testObjects itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjects itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:04:41' prior: 50907284!
test09EmptyCartTotalIsZero

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'support' stamp: 'DV 6/14/2021 14:34:34' prior: 50906381!
itemNotSellByTheStore
	
	^ 'InvalidBook'! !

!classDefinition: #CashierPerSaleTest category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
TestCase subclass: #CashierPerSaleTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierPerSaleTest category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
TestCase subclass: #CashierPerSaleTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:06:53' prior: 50905463 overrides: 16927572!
setUp
	testObjects := StoreTestObjects new.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:05:38'!
test01CreatingACashierPerSaleWithEmptyCartRaisesError

	| salesBook |
	salesBook := OrderedCollection new.
	self should: [self 
		cashierWith: testObjects emptyCartWithDefaultCatalogue 
		registeringOn: salesBook 
	] raise: Error 
	withExceptionDo:[:error | self assert: error messageText equals: CashierPerSale cannotCheckoutEmptyCart].
	
	self assert: salesBook isEmpty.
	! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:07:25'!
test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal

	| cashier multipleItemCart salesBook newCatalogue |

	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 200.
	
	salesBook := OrderedCollection new.
	multipleItemCart := Cart acceptingItemsOf: newCatalogue.
	
	multipleItemCart add: testObjects itemSellByTheStore.
	2 timesRepeat: [multipleItemCart add: 'anotherBook'].
	
	cashier := self cashierWith: multipleItemCart 
				registeringOn: salesBook.
	self assert: testObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/16/2021 21:06:40' prior: 50907589!
test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError

	| oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.

	self 
		should: [self 
				cashierWith: oneItemCart 
				chargingTo: self expiredCard 
				registeringOn: salesBook 
				with: MPSimulator answerWithOk 
			]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutWithExpiredCard equals: anError messageText
		].
	self assert: salesBook isEmpty ! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/16/2021 21:30:36' prior: 50907674!
test04CheckOutClearsCart

	| cashier oneItemCart salesBook |
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.

	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook.
	cashier checkout.
	
	self assert: oneItemCart isEmpty! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/16/2021 21:30:49' prior: 50907631!
test05CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.

	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook.
				
	total := cashier checkout.
	
	self assert: 1 equals: salesBook size.
	self assert:  total equals: salesBook first.
	! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/16/2021 21:31:00' prior: 50907725!
test06CheckingOutWIthCashierPerSaleTwiceRaisesError

	| oneItemCart salesBook cashier |
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook.
				
	cashier checkout.
	self 
		should: [ cashier checkout ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: CashierPerSale cannotCheckoutTwice equals: anError messageText
		].
	
	self assert: 1 equals: salesBook size! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/16/2021 21:34:41' prior: 50908010!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithStolenCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/16/2021 21:34:37' prior: 50908357!
test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithFakeCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeFakeCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/16/2021 22:28:18'!
test09CheckOutWithInsolventCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithInsolventCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInsolventCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !
!CashierPerSaleTest methodsFor: 'support' stamp: 'UC 6/16/2021 21:44:23'!
cashierWith: aCart chargingTo: aCreditCard registeringOn: aSalesbook with: aMerchantProcessor 
	^ CashierPerSale 
		forCheckoutWith: aCart 
		chargingTo: aCreditCard 
		onDate: Date today 
		registeringOn: aSalesbook 
		with: aMerchantProcessor ! !
!CashierPerSaleTest methodsFor: 'support' stamp: 'UC 6/16/2021 23:08:23'!
cashierWith: aCart registeringOn: aSalesbook
	^ CashierPerSale 
		forCheckoutWith: aCart 
		chargingTo: testObjects validCreditCard 
		onDate: Date today 
		registeringOn: aSalesbook 
		with: MPSimulator answerWithOk! !
!CashierPerSaleTest methodsFor: 'support' stamp: 'UC 6/16/2021 23:08:38'!
cashierWith: aCart registeringOn: aSalesbook with: aMerchantProcessor 
	^ CashierPerSale 
		forCheckoutWith: aCart 
		chargingTo: testObjects validCreditCard
		onDate: Date today 
		registeringOn: aSalesbook 
		with: aMerchantProcessor 
		! !
!CashierPerSaleTest methodsFor: 'support' stamp: 'UC 6/16/2021 23:08:45' prior: 50905614!
expiredCard
	^ CreditCard withName: testObjects validCardName withNumber: testObjects validCardNumber withExpirationDate: testObjects expiredMonthOfYear ! !
!CashierPerSaleTest methodsFor: 'support' stamp: 'UC 6/16/2021 23:07:50'!
oneItemCart

	^ testObjects emptyCartWithDefaultCatalogue add: testObjects itemSellByTheStore! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:06:53' overrides: 16927572!
setUp
	testObjects := StoreTestObjects new.! !
!CreditCardTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:05:45' prior: 50907441!
test01CreatingACardWithANameLongerThan30CharactersRaisesError

	self should:[CreditCard 
				withName:  'ABSAKJHAFSKJASFAJKSHFKJSAHFASKJFHSAFKJHSAFKJH'
				withNumber:  testObjects validCardNumber 
				withExpirationDate: testObjects notExpiredMonthOfYear
			] 
		raise: Error 
		withExceptionDo:[:anError |self assert: CreditCard invalidNameErrorMessage equals: anError messageText].
		
	
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:05:50' prior: 50907453!
test02CreatingACardWithEmptyNameRaisesError


	self should:[
			CreditCard withName:  ''
					    	withNumber: testObjects validCardNumber 
					 	withExpirationDate: testObjects notExpiredMonthOfYear 
		] 
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNameErrorMessage]
! !
!CreditCardTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:06:01' prior: 50906587!
test03CreatingACardWithANumberDifferentThan16DigitsRaisesError

	self should:[ 
			CreditCard withName: testObjects validCardName
				withNumber: 44546
				withExpirationDate: testObjects notExpiredMonthOfYear
		] 		
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage].
	
	self should:[
			CreditCard withName: testObjects validCardName
				withNumber: 4454666678364872364327846327846324786
				withExpirationDate: testObjects notExpiredMonthOfYear
		] 		
		raise: Error 
		withExceptionDo:[:anError |self assert: anError messageText equals: CreditCard invalidNumberErrorMessage]! !
!CreditCardTest methodsFor: 'tests' stamp: 'UC 6/16/2021 23:05:33' prior: 50907464!
test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect

	|card|
	
	card := testObjects  validCreditCard.
	
	self assert: testObjects validCardName equals: card name.
	self assert: testObjects validCardNumber equals: card number.
	self assert: testObjects notExpiredMonthOfYear equals: card date.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50906688!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50906693!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'assertions' stamp: 'DV 6/10/2021 20:45:11' prior: 50906698!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50906705!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50906712!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'DV 6/13/2021 16:19:42' prior: 50906718!
clear
	^items removeAll! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50906722!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'queries' stamp: 'DV 6/10/2021 20:42:53' prior: 50906727!
total
	^items sum: [:item| catalog at: item] ifEmpty: 0! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50906732!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50906737!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50906741!
add: anItem

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50906745!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!classDefinition: 'Cart class' category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'DV 6/10/2021 18:35:11' prior: 50906760!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog  ! !
!CashierPerSale methodsFor: 'initialization' stamp: 'DV 6/16/2021 18:43:10' prior: 50907859!
initializeWith: aCart chargingTo: aCreditCard registeringOn: aSalesbook with: aMerchantProcessor

	cart := aCart.
	creditCard := aCreditCard. 
	salesbook := aSalesbook.
	merchantProcessor := aMerchantProcessor.
	used := false.! !
!CashierPerSale methodsFor: 'checkout' stamp: 'DV 6/16/2021 16:15:37' prior: 50906863!
assertHasNotBeenUsedBefore.
	used ifTrue:[self error: self class cannotCheckoutTwice]! !
!CashierPerSale methodsFor: 'checkout' stamp: 'UC 6/16/2021 22:47:46' prior: 50907885!
checkout
	self assertHasNotBeenUsedBefore.
	
	total := cart total.
	merchantProcessor charge: total on: creditCard.
	
	^self registerEndOfCheckout.
! !
!CashierPerSale methodsFor: 'checkout' stamp: 'UC 6/16/2021 22:47:46'!
registerEndOfCheckout
	cart clear.
	used := true.
	salesbook add: total.
	^total.! !

!classDefinition: 'CashierPerSale class' category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
CashierPerSale class
	instanceVariableNames: ''!

!classDefinition: 'CashierPerSale class' category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
CashierPerSale class
	instanceVariableNames: ''!
!CashierPerSale class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 18:42:22' prior: 50907837!
forCheckoutWith: aCart chargingTo: aCreditCard onDate: aDate registeringOn:aSalesbook with: aMerchantProcessor 
	self assertACartIsNotEmpty: aCart.
	self assertCardDateIsNotExpired: aCreditCard onDate: aDate.
	
	^ self new initializeWith: aCart chargingTo: aCreditCard registeringOn: aSalesbook with: aMerchantProcessor.! !
!CashierPerSale class methodsFor: 'error' stamp: 'DV 6/10/2021 20:18:19' prior: 50905900!
cannotCheckoutEmptyCart
	^'No se puede facturar un carrito vacio'.! !
!CashierPerSale class methodsFor: 'error' stamp: 'DV 6/16/2021 16:13:20' prior: 50905905!
cannotCheckoutTwice
	^'El cajero por venta se puede usar solo una vez'.! !
!CashierPerSale class methodsFor: 'error' stamp: 'DV 6/13/2021 14:49:27' prior: 50905910!
cannotCheckoutWithExpiredCard
	^'No se puede facturar una tarjeta vencida'.! !
!CashierPerSale class methodsFor: 'assertions' stamp: 'DV 6/16/2021 13:35:10' prior: 50905915!
assertACartIsNotEmpty: aCart

	aCart isEmpty ifTrue:[self error: self cannotCheckoutEmptyCart]! !
!CashierPerSale class methodsFor: 'assertions' stamp: 'DV 6/16/2021 15:30:41' prior: 50905921!
assertCardDateIsNotExpired: aCard onDate: aDate
	| monthOfYear |
	monthOfYear:= GregorianMonthOfYear yearNumber: (aDate yearNumber) monthNumber: (aDate month monthIndex).
	(aCard isExpiredOn: monthOfYear) ifTrue: [self error: self cannotCheckoutWithExpiredCard]! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'DV 6/14/2021 11:10:19' prior: 50906906!
initializeWithName: aName withNumber: aNumber withDate: aDate 
	name := aName.
	number := aNumber.
	date := aDate.! !
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 12:13:13' prior: 50906913!
date
	^date! !
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 17:46:14' prior: 50906917!
isExpiredOn: aMonthOfYear
	^(date < aMonthOfYear)! !
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 11:10:49' prior: 50906922 overrides: 16882612!
name 
	^name! !
!CreditCard methodsFor: 'accessing' stamp: 'DV 6/14/2021 12:12:58' prior: 50906926!
number
	^number! !

!classDefinition: 'CreditCard class' category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:21'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 15:20:42' prior: 50906938!
withName: aName withNumber: aNumber withExpirationDate: aDate
	self assertCardNameIsNotEmptyAndNotLongerThan30Characters: aName.
	self assertCardNumberSizeis16Digits: aNumber.
	^self new initializeWithName: aName withNumber: aNumber withDate: aDate.! !
!CreditCard class methodsFor: 'error messages' stamp: 'DV 6/16/2021 14:30:55' prior: 50906949!
invalidNameErrorMessage
	^'El nombre debe contener como m�ximo 30 caracteres y no ser vac�o.'! !
!CreditCard class methodsFor: 'error messages' stamp: 'DV 6/14/2021 11:40:55' prior: 50906955!
invalidNumberErrorMessage
	^'El n�mero de tarjeta debe ser un N�MERO con 16 d�gitos.'! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:44:51' prior: 50906961!
assertCardNameIsNotEmpty:aName
	(aName withBlanksTrimmed isEmpty) ifTrue: [self error: self invalidNameErrorMessage]! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 15:20:42' prior: 50906968!
assertCardNameIsNotEmptyAndNotLongerThan30Characters: aName
	self assertCardNameIsNotEmpty:aName.
	self assertCardNameIsNotLongerThan30Characters: aName.! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 14:44:36' prior: 50906976!
assertCardNameIsNotLongerThan30Characters: aName

	(aName size > 30) ifTrue: [self error: self invalidNameErrorMessage]! !
!CreditCard class methodsFor: 'assertions' stamp: 'DV 6/16/2021 15:16:56' prior: 50906983!
assertCardNumberSizeis16Digits: aNumber
	((aNumber numberOfDigitsInBase: 10) ~= 16) ifTrue: [self error: self invalidNumberErrorMessage]! !

!classDefinition: #MPSimulator category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:22'!
Object subclass: #MPSimulator
	instanceVariableNames: 'stolenCards answerOk answerFake errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MPSimulator category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:22'!
Object subclass: #MPSimulator
	instanceVariableNames: 'stolenCards answerOk answerFake errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPSimulator commentStamp: '<historical>' prior: 50907002!
Merchant Procesor Simulator!
!MPSimulator methodsFor: 'operations' stamp: 'UC 6/16/2021 22:32:02' prior: 50908231!
charge: anAmount on: aCreditCard
	answerOk ifFalse: [ self error: errorMessage].! !
!MPSimulator methodsFor: 'initialization' stamp: 'UC 6/16/2021 22:33:10' prior: 50908226!
initializeWithFakeCard
	self setUpErrorMessage: self class cannotChargeFakeCard.! !
!MPSimulator methodsFor: 'initialization' stamp: 'UC 6/16/2021 22:33:36'!
initializeWithInsolventCard
	self setUpErrorMessage: self class cannotChargeInsolventCard.! !
!MPSimulator methodsFor: 'initialization' stamp: 'UC 6/16/2021 20:27:50' prior: 50908272!
initializeWithOk
	answerOk := true.! !
!MPSimulator methodsFor: 'initialization' stamp: 'UC 6/16/2021 22:33:55' prior: 50908085!
initializeWithStolenCard
	self setUpErrorMessage: self class cannotChargeStolenCard.! !
!MPSimulator methodsFor: 'initialization' stamp: 'UC 6/16/2021 22:33:20'!
setUpErrorMessage: anErrorMessage

	errorMessage := anErrorMessage.
	answerOk := false! !

!classDefinition: 'MPSimulator class' category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:22'!
MPSimulator class
	instanceVariableNames: ''!

!classDefinition: 'MPSimulator class' category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:22'!
MPSimulator class
	instanceVariableNames: ''!
!MPSimulator class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 18:55:41' prior: 50908317!
answerWithFakeCard
	^self new initializeWithFakeCard ! !
!MPSimulator class methodsFor: 'instance creation' stamp: 'UC 6/16/2021 22:28:18'!
answerWithInsolventCard
	^self new initializeWithInsolventCard! !
!MPSimulator class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 18:40:32' prior: 50907819!
answerWithOk
	^ self new initializeWithOk! !
!MPSimulator class methodsFor: 'instance creation' stamp: 'DV 6/16/2021 16:31:33' prior: 50907026!
answerWithStolenCard
	^ self new initializeWithStolenCard! !
!MPSimulator class methodsFor: 'error messages' stamp: 'DV 6/16/2021 18:52:26' prior: 50908213!
cannotChargeFakeCard
	^'La tarjeta se encuentra reportada como falsa por el MerchantProcessor'.! !
!MPSimulator class methodsFor: 'error messages' stamp: 'UC 6/16/2021 20:34:44'!
cannotChargeInsolventCard
	^'La tarjeta se encuentra reportada como insolvente por el MerchantProcessor'! !
!MPSimulator class methodsFor: 'error messages' stamp: 'DV 6/16/2021 16:43:50' prior: 50907032!
cannotChargeStolenCard
	^'La tarjeta se encuentra reportada como robada por el MerchantProcessor'.! !

!classDefinition: #StoreTestObjects category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:22'!
Object subclass: #StoreTestObjects
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjects category: 'TusLibros' stamp: 'DV 6/17/2021 12:56:22'!
Object subclass: #StoreTestObjects
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjects commentStamp: '<historical>' prior: 50907049!
Simulador del Merchant Procesor!
!StoreTestObjects methodsFor: 'cart' stamp: 'UC 6/16/2021 23:02:52'!
defaultCatalogue
	| dict |
	dict:=  Dictionary new.
	dict at: self itemSellByTheStore put: self itemSellByTheStorePrice.
	^dict! !
!StoreTestObjects methodsFor: 'cart' stamp: 'UC 6/16/2021 23:03:06'!
emptyCartWithDefaultCatalogue
	^Cart acceptingItemsOf: self defaultCatalogue! !
!StoreTestObjects methodsFor: 'cart' stamp: 'UC 6/16/2021 23:03:18'!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestObjects methodsFor: 'cart' stamp: 'UC 6/16/2021 23:03:21'!
itemSellByTheStorePrice
	
	^ 100! !
!StoreTestObjects methodsFor: 'dates' stamp: 'UC 6/16/2021 23:03:10'!
expiredDate
	^Date fromSeconds: (Date today secondsSinceSqueakEpoch  + 100000000)! !
!StoreTestObjects methodsFor: 'dates' stamp: 'UC 6/16/2021 23:03:14'!
expiredMonthOfYear
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) - 5 monthNumber: (Date today month monthIndex)! !
!StoreTestObjects methodsFor: 'dates' stamp: 'UC 6/16/2021 23:03:26'!
notExpiredMonthOfYear
	^GregorianMonthOfYear yearNumber: (Date today yearNumber) + 5 monthNumber: (Date today month monthIndex)! !
!StoreTestObjects methodsFor: 'card' stamp: 'UC 6/16/2021 23:03:35'!
validCardName
	^ 'Sim�n Bol�var'! !
!StoreTestObjects methodsFor: 'card' stamp: 'UC 6/16/2021 23:03:41'!
validCardNumber
	^5555555555554444 ! !
!StoreTestObjects methodsFor: 'card' stamp: 'UC 6/16/2021 23:03:45'!
validCreditCard
	
	^ CreditCard withName: self validCardName withNumber: self validCardNumber withExpirationDate: self notExpiredMonthOfYear ! !

!classRemoval: #StoreTestObjects stamp: 'DV 6/17/2021 12:56:35'!
Object subclass: #StoreTestObjects
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MPSimulator stamp: 'DV 6/17/2021 12:56:36'!
Object subclass: #MPSimulator
	instanceVariableNames: 'stolenCards answerOk answerFake errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'DV 6/17/2021 12:56:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Consultas stamp: 'DV 6/17/2021 12:56:37'!
Object subclass: #Consultas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierPerSale stamp: 'DV 6/17/2021 12:56:38'!
Object subclass: #CashierPerSale
	instanceVariableNames: 'catalog items priceChart cart creditCard salesbook used merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'DV 6/17/2021 12:56:38'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'DV 6/17/2021 12:56:39'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierPerSaleTest stamp: 'DV 6/17/2021 12:56:39'!
TestCase subclass: #CashierPerSaleTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'DV 6/17/2021 12:56:40'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/duerunner/Downloads/TusLibros.st----!
!MPSimulator methodsFor: 'operations' stamp: 'DV 6/17/2021 12:57:57' prior: 50910895!
charge: anAmount on: aCreditCard
	self assertAmountIsValid: anAmount. 
	answerOk ifFalse: [ self error: errorMessage].! !
!MPSimulator methodsFor: 'operations' stamp: 'DV 6/17/2021 12:59:21'!
assertAmountIsValid: anAmount. 
	(anAmount < 0.01) or:[(anAmount numberOfDigitsInBase: 10) > 15 ]! !
!MPSimulator methodsFor: 'operations' stamp: 'DV 6/17/2021 13:01:21' prior: 50911050!
assertAmountIsValid: anAmount. 
	((anAmount < 0.01) or:[(anAmount numberOfDigitsInBase: 10) > 15 ]) ifTrue:[self error: self class error]! !
!MPSimulator methodsFor: 'operations' stamp: 'DV 6/17/2021 13:01:45' prior: 50911056!
assertAmountIsValid: anAmount. 
	((anAmount < 0.01) or:[(anAmount numberOfDigitsInBase: 10) > 15 ]) ifTrue:[self error: self class cannotChargeInvalidAmount]! !
!MPSimulator class methodsFor: 'nil' stamp: 'DV 6/17/2021 13:02:15'!
cannotChargeInvalidAmount
	^'El monto a cobrar debe ser mayor a 0.01 y tener menos de 15 digitos'.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:11:48'!
test010CheckOutWithInvalidAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithInsolventCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInsolventCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:12:06'!
test10CheckOutWithInvalidAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithInsolventCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInsolventCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !

!methodRemoval: CashierPerSaleTest #test010CheckOutWithInvalidAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:12:06'!
test010CheckOutWithInvalidAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithInsolventCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInsolventCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:29:41'!
test10CheckOutWithInvalidSmallAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook verySmallPriceCart newCatalogue |
	
	salesBook := OrderedCollection new.
	
	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 0.0001.
	
	verySmallPriceCart := Cart acceptingItemsOf: newCatalogue.
	
	verySmallPriceCart add: 'anotherBook'.


	cashier := self cashierWith: verySmallPriceCart
				registeringOn: salesBook 
				with: MPSimulator answerWithOk.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator  equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !

!methodRemoval: CashierPerSaleTest #test10CheckOutWithInvalidAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:30:05'!
test10CheckOutWithInvalidAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithInsolventCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInsolventCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:30:26' prior: 50911139!
test10CheckOutWithInvalidSmallAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook verySmallPriceCart newCatalogue |
	
	salesBook := OrderedCollection new.
	
	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 0.0001.
	
	verySmallPriceCart := Cart acceptingItemsOf: newCatalogue.
	
	verySmallPriceCart add: 'anotherBook'.


	cashier := self cashierWith: verySmallPriceCart
				registeringOn: salesBook 
				with: MPSimulator answerWithOk.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInvalidAmount  equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: verySmallPriceCart isEmpty not.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:30:34' prior: 50911186!
test10CheckOutWithInvalidSmallAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier salesBook verySmallPriceCart newCatalogue |
	
	salesBook := OrderedCollection new.
	
	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 0.0001.
	
	verySmallPriceCart := Cart acceptingItemsOf: newCatalogue.
	
	verySmallPriceCart add: 'anotherBook'.


	cashier := self cashierWith: verySmallPriceCart
				registeringOn: salesBook 
				with: MPSimulator answerWithOk.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInvalidAmount  equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: verySmallPriceCart isEmpty not.! !

!testRun: #CashierPerSaleTest #test10CheckOutWithInvalidSmallAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:30:38'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/17/2021 13:30:38'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'DV 6/17/2021 13:30:38'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/17/2021 13:30:38'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/17/2021 13:30:38'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/17/2021 13:30:38'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/17/2021 13:30:38'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:30:38'!
PASSED!

!testRun: #CashierPerSaleTest #test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:30:38'!
PASSED!

!testRun: #CashierPerSaleTest #test09CheckOutWithInsolventCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:30:38'!
PASSED!

!testRun: #CashierPerSaleTest #test10CheckOutWithInvalidSmallAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:30:38'!
PASSED!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:31:01'!
test11CheckOutWithInvalidBigAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier salesBook verySmallPriceCart newCatalogue |
	
	salesBook := OrderedCollection new.
	
	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 0.0001.
	
	verySmallPriceCart := Cart acceptingItemsOf: newCatalogue.
	
	verySmallPriceCart add: 'anotherBook'.


	cashier := self cashierWith: verySmallPriceCart
				registeringOn: salesBook 
				with: MPSimulator answerWithOk.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInvalidAmount  equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: verySmallPriceCart isEmpty not.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:31:13' prior: 50911283!
test11CheckOutWithInvalidBigAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier salesBook veryBigPriceCart newCatalogue |
	
	salesBook := OrderedCollection new.
	
	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 0.0001.
	
	veryBigPriceCart := Cart acceptingItemsOf: newCatalogue.
	
	veryBigPriceCart add: 'anotherBook'.


	cashier := self cashierWith: veryBigPriceCart
				registeringOn: salesBook 
				with: MPSimulator answerWithOk.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInvalidAmount  equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: veryBigPriceCart isEmpty not.! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:31:29' prior: 50911309!
test11CheckOutWithInvalidBigAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier salesBook veryBigPriceCart newCatalogue |
	
	salesBook := OrderedCollection new.
	
	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 99999999999999999999.
	
	veryBigPriceCart := Cart acceptingItemsOf: newCatalogue.
	
	veryBigPriceCart add: 'anotherBook'.


	cashier := self cashierWith: veryBigPriceCart
				registeringOn: salesBook 
				with: MPSimulator answerWithOk.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInvalidAmount  equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: veryBigPriceCart isEmpty not.! !

!testRun: #CashierPerSaleTest #test11CheckOutWithInvalidBigAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test09CheckOutWithInsolventCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test10CheckOutWithInvalidSmallAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:31:32'!
PASSED!

!testRun: #CashierPerSaleTest #test11CheckOutWithInvalidBigAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:31:32'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:32:27'!
test11CartCanotUseCatalogueWIthNonPositivePrices

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:32:44' prior: 50911410!
test11CartCanotUseCatalogueWIthNonPositivePrices

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:33:17'!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: CartTest #test11CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:33:17'!
test11CartCanotUseCatalogueWIthNonPositivePrices

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]!
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:33:51' prior: 50911431!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 dict |
	dict:=  Dictionary new.
	dict at: 'validBook' put: 0.

	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:33:58' prior: 50911459!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 catalogueWithZero |
	catalogueWithZero:=  Dictionary new.
	catalogueWithZero at: 'validBook' put: 0.

	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:35:40' prior: 50911475!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 catalogueWithZero |
	catalogueWithZero:=  Dictionary new.
	catalogueWithZero at: 'validBook' put: 0.

	self 
		should: [ cart := Cart  acceptingItemsOf:  catalogueWithZero. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil .]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:36:22' prior: 50911492!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 catalogueWithZero catalogueWithNegativePrice |
	catalogueWithZero:=  Dictionary new.
	catalogueWithZero at: 'validBook' put: 0.

	self 
		should: [ cart := Cart  acceptingItemsOf:  catalogueWithZero. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].
		
	catalogueWithNegativePrice:=  Dictionary new.
	catalogueWithNegativePrice at: 'validBook' put: -1.

	self 
		should: [ cart := Cart  acceptingItemsOf: catalogueWithNegativePrice. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].! !

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:36:53'!
FAILURE!
!Cart class methodsFor: 'error messages' stamp: 'DV 6/17/2021 13:37:32'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !

!methodRemoval: Cart #invalidItemErrorMessage stamp: 'DV 6/17/2021 13:37:32'!
invalidItemErrorMessage
	
	^'Item is not in catalog'!
!Cart class methodsFor: 'error messages' stamp: 'DV 6/17/2021 13:37:39'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !

!methodRemoval: Cart #invalidQuantityErrorMessage stamp: 'DV 6/17/2021 13:37:39'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'!
!Cart class methodsFor: 'error messages' stamp: 'DV 6/17/2021 13:38:05'!
invalidCatalogueMessage
	
	^'El catalogo no debe contener precios con valores no positivos.'! !
!Cart class methodsFor: 'instance creation' stamp: 'DV 6/17/2021 13:38:41' prior: 50910684!
acceptingItemsOf: aCatalog
	self assertCatalogueHasOnlyPositivePrices: aCatalog.
	^self new initializeAcceptingItemsOf: aCatalog  ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/17/2021 13:38:44'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/17/2021 13:38:44'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/17/2021 13:38:44'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/17/2021 13:38:44'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/17/2021 13:38:44'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/17/2021 13:38:44'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/17/2021 13:38:44'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/17/2021 13:38:44'!
ERROR!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/17/2021 13:38:44'!
ERROR!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:38:44'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/17/2021 13:38:46'!
ERROR!
!Cart class methodsFor: 'assertions' stamp: 'DV 6/17/2021 13:38:57'!
assertCatalogueHasOnlyPositivePrices: aDictionary 
	self shouldBeImplemented.! !
!Cart class methodsFor: 'assertions' stamp: 'DV 6/17/2021 13:39:50' prior: 50911604!
assertCatalogueHasOnlyPositivePrices: aCatalogue
	aCatalogue isTrue:[self error: self invalidCatalogueMessage ].! !
!Cart methodsFor: 'assertions' stamp: 'DV 6/17/2021 13:40:33' prior: 50910626!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'DV 6/17/2021 13:40:39' prior: 50910632!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self class invalidQuantityErrorMessage ]! !

1 positive !
!Cart class methodsFor: 'assertions' stamp: 'DV 6/17/2021 13:44:14' prior: 50911610!
assertCatalogueHasOnlyPositivePrices: aCatalogue
	aCatalogue do: [ :value | value positive isFalse:[self error: self invalidCatalogueMessage ]. ]

	 ! !
!Cart class methodsFor: 'assertions' stamp: 'DV 6/17/2021 13:44:17' prior: 50911632!
assertCatalogueHasOnlyPositivePrices: aCatalogue
	aCatalogue do: [ :value | value positive isFalse:[self error: self invalidCatalogueMessage ]]

	 ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/17/2021 13:44:18'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/17/2021 13:44:18'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/17/2021 13:44:18'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/17/2021 13:44:18'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/17/2021 13:44:18'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/17/2021 13:44:18'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/17/2021 13:44:18'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/17/2021 13:44:18'!
ERROR!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/17/2021 13:44:18'!
ERROR!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:44:18'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/17/2021 13:44:20'!
ERROR!
!Cart class methodsFor: 'assertions' stamp: 'DV 6/17/2021 13:44:27' prior: 50911640!
assertCatalogueHasOnlyPositivePrices: aCatalogue
	aCatalogue do: [ :value | value positive ifFalse:[self error: self invalidCatalogueMessage ]]

	 ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/17/2021 13:44:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/17/2021 13:44:29'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/17/2021 13:44:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/17/2021 13:44:29'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/17/2021 13:44:29'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/17/2021 13:44:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/17/2021 13:44:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/17/2021 13:44:29'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/17/2021 13:44:29'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:44:29'!
FAILURE!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/17/2021 13:44:31'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'DV 6/17/2021 13:45:43' prior: 50911617!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/17/2021 13:46:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/17/2021 13:46:01'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/17/2021 13:46:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/17/2021 13:46:01'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/17/2021 13:46:01'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/17/2021 13:46:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/17/2021 13:46:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/17/2021 13:46:01'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/17/2021 13:46:01'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:46:01'!
FAILURE!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/17/2021 13:46:27'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:46:47' prior: 50910226!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart class invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/17/2021 13:46:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/17/2021 13:46:51'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:47:24' prior: 50910247!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 0 of: testObjects itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert:   cart class invalidQuantityErrorMessage equals: anError messageText.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/17/2021 13:47:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/17/2021 13:47:27'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:47:51' prior: 50910260!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: cart self invalidItemErrorMessage equals: anError messageText .
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/17/2021 13:47:52'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:48:02' prior: 50911806!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: cart class invalidItemErrorMessage equals: anError messageText .
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/17/2021 13:48:03'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:48:04'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:48:20' prior: 50911508!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 catalogueWithZero catalogueWithNegativePrice |
	catalogueWithZero:=  Dictionary new.
	catalogueWithZero at: 'validBook' put: 0.

	self 
		should: [ cart := Cart  acceptingItemsOf:  catalogueWithZero. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: cart class invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].
		
	catalogueWithNegativePrice:=  Dictionary new.
	catalogueWithNegativePrice at: 'validBook' put: -1.

	self 
		should: [ cart := Cart  acceptingItemsOf: catalogueWithNegativePrice. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: cart class invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].! !

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:48:22'!
FAILURE!
!Cart class methodsFor: 'assertions' stamp: 'DV 6/17/2021 13:48:54' prior: 50911682!
assertCatalogueHasOnlyPositivePrices: aCatalogue
	aCatalogue do: [ :value | value strictlyPositive ifFalse:[self error: self invalidCatalogueMessage ]]

	 ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:48:56'!
ERROR!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test09CheckOutWithInsolventCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test10CheckOutWithInvalidSmallAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CashierPerSaleTest #test11CheckOutWithInvalidBigAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/17/2021 13:48:56'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:48:56'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:49:23' prior: 50911845!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 catalogueWithZero catalogueWithNegativePrice |
	catalogueWithZero:=  Dictionary new.
	catalogueWithZero at: 'validBook' put: 0.

	self 
		should: [ cart := Cart  acceptingItemsOf:  catalogueWithZero. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart class invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].
		
	catalogueWithNegativePrice:=  Dictionary new.
	catalogueWithNegativePrice at: 'validBook' put: -1.

	self 
		should: [ cart := Cart  acceptingItemsOf: catalogueWithNegativePrice. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart class invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].! !

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:49:25'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:49:41' prior: 50911980!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 catalogueWithZero catalogueWithNegativePrice |
	catalogueWithZero:=  Dictionary new.
	catalogueWithZero at: 'validBook' put: 0.

	self 
		should: [ cart := Cart  acceptingItemsOf:  catalogueWithZero. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].
		
	catalogueWithNegativePrice:=  Dictionary new.
	catalogueWithNegativePrice at: 'validBook' put: -1.

	self 
		should: [ cart := Cart  acceptingItemsOf: catalogueWithNegativePrice. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].! !

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:49:42'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test09CheckOutWithInsolventCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test10CheckOutWithInvalidSmallAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CashierPerSaleTest #test11CheckOutWithInvalidBigAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'DV 6/17/2021 13:49:46'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'DV 6/17/2021 13:49:46'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:50:11' prior: 50911765!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:50:27' prior: 50912135!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidItemErrorMessage equals: anError messageText.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:50:43' prior: 50911785!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 0 of: testObjects itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert:   Cart invalidQuantityErrorMessage equals: anError messageText.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'DV 6/17/2021 13:50:49' prior: 50911824!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidItemErrorMessage equals: anError messageText .
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 14:08:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DV 6/17/2021 14:08:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DV 6/17/2021 14:08:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DV 6/17/2021 14:08:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DV 6/17/2021 14:08:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DV 6/17/2021 14:08:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DV 6/17/2021 14:08:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DV 6/17/2021 14:08:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DV 6/17/2021 14:08:02'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'DV 6/17/2021 14:08:02'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'DV 6/17/2021 14:08:02'!
PASSED!
Merchant Procesor Simulator!
Simulador del Merchant Procesor!