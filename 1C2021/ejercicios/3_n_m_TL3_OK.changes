

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (16 June 2021 17:58:11) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\TPs\windows64\CuisUniversity-4532.image!


----End fileIn of D:\Downloads\TusLibros.st----!

TestCase subclass: #MerchantProcessorInnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorInnerInterfaceTest category: 'TusLibros' stamp: 'lmalvarez 6/16/2021 18:03:39'!
TestCase subclass: #MerchantProcessorInnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorInnerInterfaceTest methodsFor: 'no messages' stamp: 'lmalvarez 6/16/2021 18:04:47'!
test01

	| creditCard |
	! !

!classDefinition: #MerchantProcessorInnerInterfaceTest category: 'TusLibros' stamp: 'lmalvarez 6/16/2021 18:09:34'!
TestCase subclass: #MerchantProcessorInnerInterfaceTest
	instanceVariableNames: 'builder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorInnerInterface category: 'TusLibros' stamp: 'lmalvarez 6/16/2021 18:09:42'!
Object subclass: #MerchantProcessorInnerInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:09:29'!
test01CheckIfCreditCardWasStolen

	| creditCard |
	
	creditCard := builder validCreditCard.
	
	self assert: MerchantProcessorInnerInterface new checkIfStolen: creditCard.! !
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:10:00' prior: 50859996!
test01CheckIfCreditCardWasStolen

	| creditCard |
	
	creditCard := builder validCreditCard.
	
	self assert: (MerchantProcessorInnerInterface new checkIfStolen: creditCard).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:10:06'!
ERROR!

MisLibrosStoreTest subclass: #MerchantProcessorInnerInterfaceTest
	instanceVariableNames: 'builder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MisLibrosStoreTest subclass: #MerchantProcessorInnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorInnerInterfaceTest category: 'TusLibros' stamp: 'lmalvarez 6/16/2021 18:10:47'!
MisLibrosStoreTest subclass: #MerchantProcessorInnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:10:54'!
ERROR!

!methodRemoval: MerchantProcessorInnerInterfaceTest #test01 stamp: 'lmalvarez 6/16/2021 18:11:00'!
test01

	| creditCard |
	!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:11:10'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:11:10'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:11:14'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:11:27'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:11:27'!
ERROR!
!MerchantProcessorInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:11:35'!
checkIfStolen: aCreditCard 
	self shouldBeImplemented.! !
!MerchantProcessorInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:11:43' prior: 50860066!
checkIfStolen: aCreditCard 
	
	^ true! !

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:11:44'!
PASSED!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:11:47'!
PASSED!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:11:47'!
PASSED!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:18:42'!
test02DifferenciateBetweenStolenAndNotStolenCreditCards

	| creditCardA creditCardB innerInterface outerInterface |
	
	creditCardA := builder validCreditCard.
	creditCardB := builder validCreditCard.	
	
	innerInterface := MerchantProcessorInnerInterface new.
	
	outerInterface := Dictionary new.
	outerInterface at: creditCardA put: false.
	outerInterface at: creditCardB put: true.
	
	self deny: ( innerInterface checkIfStolen: creditCardA).
	self assert: ( innerInterface checkIfStolen: creditCardB).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:18:44'!
FAILURE!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:18:44'!
FAILURE!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:18:50'!
FAILURE!

Object subclass: #MerchantProcessorInnerInterface
	instanceVariableNames: 'outerinterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorInnerInterface category: 'TusLibros' stamp: 'lmalvarez 6/16/2021 18:19:36'!
Object subclass: #MerchantProcessorInnerInterface
	instanceVariableNames: 'outerinterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:20:28'!
initializeWith: anOuterInterface

	outerinterface := anOuterInterface .! !
!MerchantProcessorInnerInterface class methodsFor: 'no messages' stamp: 'lmalvarez 6/16/2021 18:21:06'!
communicatingWith: anOuterInterface

	^ self new initializeWith: anOuterInterface .! !
!MerchantProcessorInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:21:31' prior: 50860072!
checkIfStolen: aCreditCard 
	
	^ outerinterface checkIfStolen: aCreditCard.! !
!MerchantProcessorInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:21:50' prior: 50860150!
checkIfStolen: aCreditCard 
	
	^ outerinterface at: aCreditCard .! !

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:21:53'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:21:53'!
ERROR!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:22:50' prior: 50860089!
test02DifferenciateBetweenStolenAndNotStolenCreditCards

	| creditCardA creditCardB innerInterface outerInterface |
	
	creditCardA := builder validCreditCard.
	creditCardB := builder validCreditCard.	
	
	innerInterface := MerchantProcessorInnerInterface new.
	
	outerInterface := Dictionary new.
	outerInterface at: creditCardA put: false.
	outerInterface at: creditCardB put: true.
	
	self deny: ( innerInterface checkIfStolen: creditCardA).
	self assert: ( innerInterface checkIfStolen: creditCardB).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:22:53'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:22:53'!
ERROR!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:25:13' prior: 50860173!
test02DifferenciateBetweenStolenAndNotStolenCreditCards

	| creditCardA creditCardB innerInterface outerInterface |
	
	creditCardA := builder validCreditCard.
	creditCardB := builder validCreditCard.	
	
	innerInterface := MerchantProcessorInnerInterface new.
	
	outerInterface := OrderedCollection new.
	outerInterface add: creditCardB.
	
	self deny: ( innerInterface checkIfStolen: creditCardA).
	self assert: ( innerInterface checkIfStolen: creditCardB).! !
!MerchantProcessorInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:25:21' prior: 50860157!
checkIfStolen: aCreditCard 
	
	^ outerinterface includes: aCreditCard .! !

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:25:23'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:25:23'!
ERROR!
!MerchantProcessorInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:25:54' prior: 50860222!
checkIfStolen: aCreditCard 
	
	^ outerinterface includes: aCreditCard.! !
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:27:18' prior: 50860203!
test02DifferenciateBetweenStolenAndNotStolenCreditCards

	| creditCardA creditCardB innerInterface outerInterface |
	
	creditCardA := builder validCreditCard.
	creditCardB := builder validCreditCard.	
	
	outerInterface := OrderedCollection new.
	outerInterface add: creditCardB.
	
	innerInterface := MerchantProcessorInnerInterface communicatingWith: outerInterface.
	
	self deny: ( innerInterface checkIfStolen: creditCardA).
	self assert: ( innerInterface checkIfStolen: creditCardB).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:27:19'!
PASSED!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:27:19'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:27:19'!
PASSED!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:27:19'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:27:23'!
PASSED!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:27:24'!
PASSED!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:27:29'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:27:29'!
ERROR!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:28:26' prior: 50860006!
test01CheckIfCreditCardWasStolen

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface communicatingWith: OrderedCollection new.
	
	self assert: ( innerInterface checkIfStolen: creditCard ).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:28:29'!
FAILURE!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:28:29'!
FAILURE!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:29:00' prior: 50860300!
test01CheckIfCreditCardWasStolen

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface communicatingWith: (OrderedCollection with: creditCard).
	
	self assert: ( innerInterface checkIfStolen: creditCard ).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:29:03'!
PASSED!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:29:04'!
PASSED!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 18:29:04'!
PASSED!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:30:15'!
test01StolenCreditCardShouldBeNotified

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface communicatingWith: (OrderedCollection with: creditCard).
	
	self assert: ( innerInterface checkIfStolen: creditCard ).! !

!methodRemoval: MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:30:23'!
test01CheckIfCreditCardWasStolen

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface communicatingWith: (OrderedCollection with: creditCard).
	
	self assert: ( innerInterface checkIfStolen: creditCard ).!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 18:32:27'!
test01CheckIfCreditCardWasStolen

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface communicatingWith: (OrderedCollection with: creditCard).
	
	self assert: ( innerInterface checkIfStolen: creditCard ).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test01StolenCreditCardShouldBeNotified stamp: 'lmalvarez 6/16/2021 18:32:30'!
PASSED!

!methodRemoval: MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 18:32:32'!
test01CheckIfCreditCardWasStolen

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface communicatingWith: (OrderedCollection with: creditCard).
	
	self assert: ( innerInterface checkIfStolen: creditCard ).!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 19:21:47'!
test03CheckIfCreditCardIsFalse

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface communicatingWith: (OrderedCollection with: creditCard).
	
	self assert: ( innerInterface checkIfFalse: creditCard ).! !

----STARTUP---- (16 June 2021 19:22:06) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\TPs\windows64\CuisUniversity-4532.image!


----End fileIn of D:\Downloads\TusLibros.st----!

MisLibrosStoreTest subclass: #MerchantProcessorInnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorInnerInterfaceTest category: 'TusLibros' stamp: 'lmalvarez 6/16/2021 19:23:05'!
MisLibrosStoreTest subclass: #MerchantProcessorInnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorInnerInterface category: 'TusLibros' stamp: 'lmalvarez 6/16/2021 19:24:22'!
Object subclass: #MerchantProcessorInnerInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorInnerInterfaceTest methodsFor: 'no messages' stamp: 'lmalvarez 6/16/2021 19:24:32'!
test01CheckIfCreditCardWasStolen

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface new.
	
	self assert: (innerInterface checkIfStolen: creditCard).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 19:25:01'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 19:25:01'!
ERROR!
!MerchantProcessorInnerInterface methodsFor: 'no messages' stamp: 'lmalvarez 6/16/2021 19:25:17'!
checkIfStolen: aCreditCard

	^ true.! !

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 19:25:22'!
PASSED!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 19:26:45'!
test02DifferenciateBetweenStolenAndNotStolenCreditCards

	| creditCardA creditCardB innerInterface |
	
	creditCardA := builder validCreditCard.
	creditCardB := builder validCreditCard.
	
	innerInterface := MerchantProcessorInnerInterface communicatingWith: (OrderedCollection with: creditCardB).
	
	self deny: (innerInterface checkIfStolen: creditCardA).
	self assert: (innerInterface checkIfStolen: creditCardB).! !

!classDefinition: #MerchantProcessorInnerInterface category: 'TusLibros' stamp: 'lmalvarez 6/16/2021 19:27:20'!
Object subclass: #MerchantProcessorInnerInterface
	instanceVariableNames: 'outerInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorInnerInterface methodsFor: 'initialization' stamp: 'lmalvarez 6/16/2021 19:27:19'!
initializeWith: anOuterInterface

	outerInterface := anOuterInterface.! !
!MerchantProcessorInnerInterface class methodsFor: 'instance creation' stamp: 'lmalvarez 6/16/2021 19:28:05'!
communicateWith: anOuterInterface

	^ self new initializeWith: anOuterInterface.! !
!MerchantProcessorInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 19:28:22' prior: 50861083!
checkIfStolen: aCreditCard

	^ outerInterface includes: aCreditCard.! !

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 19:28:25'!
ERROR!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 19:28:25'!
ERROR!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 19:28:43' prior: 50861092!
test02DifferenciateBetweenStolenAndNotStolenCreditCards

	| creditCardA creditCardB innerInterface |
	
	creditCardA := builder validCreditCard.
	creditCardB := builder validCreditCard.
	
	innerInterface := MerchantProcessorInnerInterface communicateWith: (OrderedCollection with: creditCardB).
	
	self deny: (innerInterface checkIfStolen: creditCardA).
	self assert: (innerInterface checkIfStolen: creditCardB).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 19:28:44'!
PASSED!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 19:28:55' prior: 50861064!
test01CheckIfCreditCardWasStolen

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface communicateWith: OrderedCollection new.
	
	self assert: (innerInterface checkIfStolen: creditCard).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 19:28:57'!
FAILURE!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 19:28:57'!
FAILURE!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 19:29:08'!
FAILURE!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 19:29:08'!
PASSED!

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 19:29:08'!
FAILURE!
!MerchantProcessorInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/16/2021 19:29:29' prior: 50861167!
test01CheckIfCreditCardWasStolen

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface communicateWith: (OrderedCollection with: creditCard ).
	
	self assert: (innerInterface checkIfStolen: creditCard).! !

!testRun: #MerchantProcessorInnerInterfaceTest #test01CheckIfCreditCardWasStolen stamp: 'lmalvarez 6/16/2021 19:29:30'!
PASSED!

!testRun: #MerchantProcessorInnerInterfaceTest #test02DifferenciateBetweenStolenAndNotStolenCreditCards stamp: 'lmalvarez 6/16/2021 19:29:30'!
PASSED!
!MerchantProcessorInnerInterfaceTest methodsFor: 'tests' stamp: 'lmalvarez 6/16/2021 19:30:28'!
test03CheckIfCreditCardIsFalse

	| creditCard innerInterface |
	
	creditCard := builder validCreditCard.
	innerInterface := MerchantProcessorInnerInterface communicateWith: (OrderedCollection with: creditCard ).
	
	self assert: (innerInterface checkIfFalse: creditCard).! !

----SNAPSHOT----(16 June 2021 19:30:35) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (17 June 2021 20:42:24) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\TPs\Douple\CuisUniversity-4532.image!


!classRemoval: #StoreTestObjectFactory stamp: 'lmalvarez 6/17/2021 20:42:33'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today nextYear previousYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorInnerInterface stamp: 'lmalvarez 6/17/2021 20:42:33'!
Object subclass: #MerchantProcessorInnerInterface
	instanceVariableNames: 'outerInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'lmalvarez 6/17/2021 20:42:34'!
Object subclass: #CreditCard
	instanceVariableNames: 'number owner securityNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'lmalvarez 6/17/2021 20:42:34'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'lmalvarez 6/17/2021 20:42:34'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorInnerInterfaceTest stamp: 'lmalvarez 6/17/2021 20:42:35'!
MisLibrosStoreTest subclass: #MerchantProcessorInnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'lmalvarez 6/17/2021 20:42:35'!
MisLibrosStoreTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'lmalvarez 6/17/2021 20:42:35'!
MisLibrosStoreTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MisLibrosStoreTest stamp: 'lmalvarez 6/17/2021 20:42:36'!
TestCase subclass: #MisLibrosStoreTest
	instanceVariableNames: 'builder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'lmalvarez 6/17/2021 20:42:36'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\Git Ejercicios\2021-1c\20-TusLibros\Iteracion2\Iteracion2\TusLibros-33.st----!

TestCase subclass: #RestInnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInnerInterfaceTest category: 'TusLibros' stamp: 'lmalvarez 6/17/2021 20:51:45'!
TestCase subclass: #RestInnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInnerInterface category: 'TusLibros' stamp: 'lmalvarez 6/17/2021 21:00:39'!
Object subclass: #RestInnerInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInnerInterfaceTest methodsFor: 'no messages' stamp: 'lmalvarez 6/17/2021 21:00:35'!
test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.! !
!RestInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:01:27' prior: 50861888!
test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.! !
!RestInnerInterface methodsFor: 'no messages' stamp: 'lmalvarez 6/17/2021 21:01:50'!
rejectAllLogins
! !

!classDefinition: #RestInnerInterface category: 'TusLibros' stamp: 'lmalvarez 6/17/2021 21:02:57'!
Object subclass: #RestInnerInterface
	instanceVariableNames: 'behaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:02:55' prior: 50861916!
rejectAllLogins

	behaviour := [:anUser :aPassword | self error: self class invalidUserAndPasswordSignalError. ]! !
!RestInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:03:23' overrides: 16896425!
initialize

	behaviour := []! !

!testRun: #RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:03:48'!
ERROR!
!RestInnerInterface class methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:03:55'!
invalidUserAndPasswordSignalError
	self shouldBeImplemented.! !
!RestInnerInterface class methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:04:38' prior: 50861945!
invalidUserAndPasswordSignalError
	
	^ ' Error - Invalid User or Password '! !
!RestInnerInterface class methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:04:42' prior: 50861951!
invalidUserAndPasswordSignalError
	
	^ ' Error - Invalid Login '! !

!testRun: #RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:04:43'!
FAILURE!

!testRun: #RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:04:54'!
FAILURE!

!testRun: #RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:04:54'!
FAILURE!

!testRun: #RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:05:07'!
FAILURE!

!testRun: #RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:05:51'!
FAILURE!
!RestInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:06:18'!
createCartFor: aString withPassword: aString2 
	self shouldBeImplemented.! !
!RestInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:07:05' prior: 50861987!
createCartFor: anUser withPassword: aPassword 
	
	^ behaviour value: anUser value: aPassword ! !

!testRun: #RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:07:07'!
PASSED!

!testRun: #RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:07:07'!
PASSED!
!RestInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:08:18'!
test01CreatingACartWithAnIncorrectUserShouldRaiseAnError

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.! !

!methodRemoval: RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:08:20'!
test01CreatingACartWithAnIncorrectUserAndPasswordShouldRaiseAnError

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.!
!RestInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:08:39'!
test01CreatingACartWithAnIncorrectUserOrPasswordShouldRaiseAnError

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.! !

!methodRemoval: RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:08:42'!
test01CreatingACartWithAnIncorrectUserShouldRaiseAnError

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.!
!RestInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:09:31'!
test01CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.! !
!RestInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:09:34'!
test02CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.! !

!methodRemoval: RestInnerInterfaceTest #test01CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins stamp: 'lmalvarez 6/17/2021 21:09:42'!
test01CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.!
!RestInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:10:15' prior: 50862081!
test02CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface createCartFor: 'George' withPassword: 'Harrison'. 
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.! !

!testRun: #RestInnerInterfaceTest #test02CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins stamp: 'lmalvarez 6/17/2021 21:10:18'!
ERROR!

!testRun: #RestInnerInterfaceTest #test02CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins stamp: 'lmalvarez 6/17/2021 21:10:18'!
ERROR!
!RestInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:10:36' prior: 50861936 overrides: 16896425!
initialize

	behaviour := [:anUser :aPassword | ]! !

!testRun: #RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserOrPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:10:39'!
PASSED!

!testRun: #RestInnerInterfaceTest #test02CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins stamp: 'lmalvarez 6/17/2021 21:10:39'!
PASSED!
!RestInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:18:09'!
test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface createCartFor: 'George' withPassword: 'Harrison'. 
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.! !

!testRun: #RestInnerInterfaceTest #test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest stamp: 'lmalvarez 6/17/2021 21:18:18'!
PASSED!
!RestInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:19:05'!


	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface createCartFor: 'George' withPassword: 'Harrison'. 
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.! !

!methodRemoval: RestInnerInterfaceTest #test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTestaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa stamp: 'lmalvarez 6/17/2021 21:19:15'!


	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface createCartFor: 'George' withPassword: 'Harrison'. 
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.!
!RestInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:21:05' prior: 50862153!
test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest

	| innerInterface cartID |
	
	innerInterface := RestInnerInterface new.
	
	cartID := innerInterface createCartFor: 'George' withPassword: 'Harrison'.
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.! !
!RestInnerInterfaceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:24:22' prior: 50863707!
test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest

	| innerInterface cartID |
	
	innerInterface := RestInnerInterface new.
	
	cartID := innerInterface createCartFor: 'George' withPassword: 'Harrison'.
	
	self should: [ 	innerInterface addToCart: cartID aNumberOf: 0 withBookISBN: '0123'.]
		raise: Error
		withMessageText: RestInnerInterface invalidQuantityOnPurchaseSignalError.! !

!testRun: #RestInnerInterfaceTest #test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest stamp: 'lmalvarez 6/17/2021 21:24:27'!
ERROR!

!testRun: #RestInnerInterfaceTest #test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest stamp: 'lmalvarez 6/17/2021 21:24:33'!
ERROR!
!RestInnerInterface class methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:24:38'!
invalidQuantityOnPurchaseSignalError
	self shouldBeImplemented.! !
!RestInnerInterface class methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:24:58' prior: 50863777!
invalidQuantityOnPurchaseSignalError
	
	^ ' Error - Quantity should not be cero or negative '! !

!testRun: #RestInnerInterfaceTest #test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest stamp: 'lmalvarez 6/17/2021 21:24:59'!
FAILURE!
!RestInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:25:46'!
addToCart: anUndefinedObject aNumberOf: aSmallInteger withBookISBN: aString 
	self shouldBeImplemented.! !
!RestInnerInterface methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/17/2021 21:28:01' prior: 50863801!
addToCart: aCartID aNumberOf: anAmountOfBooks withBookISBN: anISBN

	anAmountOfBooks = 0 ifTrue: [self error: self class invalidQuantityOnPurchaseSignalError.]
	
	! !

!testRun: #RestInnerInterfaceTest #test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest stamp: 'lmalvarez 6/17/2021 21:28:04'!
PASSED!

!testRun: #RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserOrPasswordShouldRaiseAnError stamp: 'lmalvarez 6/17/2021 21:28:04'!
PASSED!

!testRun: #RestInnerInterfaceTest #test02CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins stamp: 'lmalvarez 6/17/2021 21:28:04'!
PASSED!

!testRun: #RestInnerInterfaceTest #test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest stamp: 'lmalvarez 6/17/2021 21:28:04'!
PASSED!

----SNAPSHOT----(17 June 2021 21:30:30) CuisUniversity-4532.image priorSource: 16946641!

----STARTUP---- (21 June 2021 18:20:59) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\TPs\Douple\CuisUniversity-4532.image!


!methodRemoval: RestInnerInterfaceTest #test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest stamp: 'lmalvarez 6/21/2021 18:25:53'!
test03CartShouldHaveAnIDThatRespectsIDCommonRegulationGivenByTusLibrosBookStoreAndShouldNotBeAwareOfItselfOrElseThe4thWallWillBeFuckingWreckedAndTheRestInnerInterfaceWillDissapearAlongsideHumanityIfTheCartDoesntHaveAProperVerificationProcessWhichIsTheOneThatWeTryingToConveyInThisTest

	| innerInterface cartID |
	
	innerInterface := RestInnerInterface new.
	
	cartID := innerInterface createCartFor: 'George' withPassword: 'Harrison'.
	
	self should: [ 	innerInterface addToCart: cartID aNumberOf: 0 withBookISBN: '0123'.]
		raise: Error
		withMessageText: RestInnerInterface invalidQuantityOnPurchaseSignalError.!

!methodRemoval: RestInnerInterfaceTest #test02CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins stamp: 'lmalvarez 6/21/2021 18:25:54'!
test02CreatingACartShouldDifferenciateBetweenCorrectAndIncorrectLogins

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface createCartFor: 'George' withPassword: 'Harrison'. 
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.!

!methodRemoval: RestInnerInterfaceTest #test01CreatingACartWithAnIncorrectUserOrPasswordShouldRaiseAnError stamp: 'lmalvarez 6/21/2021 18:25:54'!
test01CreatingACartWithAnIncorrectUserOrPasswordShouldRaiseAnError

	| innerInterface |
	
	innerInterface := RestInnerInterface new.
	
	innerInterface rejectAllLogins.
	
	self should: [ 	innerInterface createCartFor: 'Juansito' withPassword: 'asd'.]
		raise: Error
		withMessageText: RestInnerInterface invalidUserAndPasswordSignalError.!

!classRemoval: #RestInnerInterface stamp: 'lmalvarez 6/21/2021 18:25:59'!
Object subclass: #RestInnerInterface
	instanceVariableNames: 'behaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #RestInnerInterfaceTest stamp: 'lmalvarez 6/21/2021 18:26:06'!
TestCase subclass: #RestInnerInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #XXXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXTest category: 'TusLibros' stamp: 'lmalvarez 6/21/2021 18:26:13'!
TestCase subclass: #XXXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'lmalvarez 6/21/2021 18:36:09'!
Object subclass: #Store
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXTest methodsFor: 'no messages' stamp: 'lmalvarez 6/21/2021 18:36:02'!
test01

	| store userName userPassword |
	
	userName := 'Pepito'.
	userPassword := 'Harrison'.
	store := self validStore.
	
	self should: [store createCartFor: userName withPassword: userPassword ]
		raise: Error
		withMessageText: Store invalidUserNameErrorSignal. ! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:37:00'!
test01InvalidUserNameShouldNotBeAllowedToCreateCart

	| store userName userPassword |
	
	userName := 'Pepito'.
	userPassword := 'Harrison'.
	store := self validStore.
	
	self should: [store createCartFor: userName withPassword: userPassword ]
		raise: Error
		withMessageText: Store invalidUserNameErrorSignal. ! !

!methodRemoval: XXXTest #test01 stamp: 'lmalvarez 6/21/2021 18:37:02'!
test01

	| store userName userPassword |
	
	userName := 'Pepito'.
	userPassword := 'Harrison'.
	store := self validStore.
	
	self should: [store createCartFor: userName withPassword: userPassword ]
		raise: Error
		withMessageText: Store invalidUserNameErrorSignal. !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:37:06'!
ERROR!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:37:06'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:37:14'!
validStore
	self shouldBeImplemented.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:37:47' prior: 50863992!
validStore
	^ Store new.! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:37:48'!
ERROR!
!Store class methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:37:56'!
invalidUserNameErrorSignal
	self shouldBeImplemented.! !
!Store class methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:38:12' prior: 50864005!
invalidUserNameErrorSignal
	^ 'Error - Invalid User Name'! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:38:13'!
FAILURE!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:38:22'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:38:43'!
createCartFor: aString withPassword: aString2 
	self shouldBeImplemented.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:39:27' prior: 50864022!
createCartFor: aUserName withPassword: aPassword 
	
	^ self class invalidUserNameErrorSignal ! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:39:33' prior: 50864028!
createCartFor: aUserName withPassword: aPassword 
	
	^ self error: self class invalidUserNameErrorSignal ! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:39:34'!
PASSED!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:39:34'!
PASSED!

!methodRemoval: Store class #invalidUserNameErrorSignal stamp: 'lmalvarez 6/21/2021 18:40:08'!
invalidUserNameErrorSignal
	^ 'Error - Invalid User Name'!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:40:14'!
invalidUserNameErrorSignal
	^ 'Error - Invalid User Name'! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:40:26' prior: 50863961!
test01InvalidUserNameShouldNotBeAllowedToCreateCart

	| store userName userPassword |
	
	userName := 'Pepito'.
	userPassword := 'Harrison'.
	store := self validStore.
	
	self should: [store createCartFor: userName withPassword: userPassword ]
		raise: Error
		withMessageText: store invalidUserNameErrorSignal. ! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:40:38'!
FAILURE!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:40:39'!
FAILURE!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:40:50'!
FAILURE!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:40:50'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:41:07' prior: 50864035!
createCartFor: aUserName withPassword: aPassword 
	
	^ self error: self invalidUserNameErrorSignal ! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:41:08'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:42:56'!
test02InvalidPasswordShouldNotBeAllowedToCreateCart

	| store userName userPassword |
	
	userName := 'Pepito'.
	userPassword := 'Harrison'.
	store := self validStore.
	
	self should: [store createCartFor: userName withPassword: userPassword ]
		raise: Error
		withMessageText: store invalidPasswordErrorSignal. ! !

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:42:58'!
ERROR!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:42:58'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:43:02'!
invalidPasswordErrorSignal
	self shouldBeImplemented.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:43:19' prior: 50864117!
invalidPasswordErrorSignal
	^ 'Error - Invalid Password'! !

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:43:20'!
FAILURE!
!Store class methodsFor: 'no messages' stamp: 'lmalvarez 6/21/2021 18:49:38'!
allowing: aListOfUsers 

	^ self new initializeWith: aListOfUsers! !

!classDefinition: #Store category: 'TusLibros' stamp: 'lmalvarez 6/21/2021 18:50:10'!
Object subclass: #Store
	instanceVariableNames: 'allowedUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:50:08'!
initializeWith: aListOfUsers

	allowedUsers := aListOfUsers! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:51:45' prior: 50864087!
createCartFor: aUserName withPassword: aPassword 
	
	(allowedUsers keys includes: aUserName) ifTrue: [self error: self invalidUserNameErrorSignal ].
	((allowedUsers at: aUserName) = aPassword) ifTrue: [self error: self invalidPasswordErrorSignal ].! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:51:50'!
FAILURE!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:51:50'!
FAILURE!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:53:16' prior: 50863997!
validStore
	
	| dictionary |
	
	dictionary := Dictionary new.
	dictionary at: 'Matias' put: 'Juancho'.

	^ Store with: dictionary.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:53:26' prior: 50864097!
test02InvalidPasswordShouldNotBeAllowedToCreateCart

	| store userName userPassword |
	
	userName := 'Matias'.
	userPassword := 'Harrison'.
	store := self validStore.
	
	self should: [store createCartFor: userName withPassword: userPassword ]
		raise: Error
		withMessageText: store invalidPasswordErrorSignal. ! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:53:28'!
ERROR!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:53:28'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:53:45' prior: 50864167!
validStore
	
	| dictionary |
	
	dictionary := Dictionary new.
	dictionary at: 'Matias' put: 'Juancho'.

	^ Store allowing: dictionary.! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:53:47'!
FAILURE!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:53:47'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:54:12' prior: 50864148!
createCartFor: aUserName withPassword: aPassword 
	
	(allowedUsers keys includes: aUserName) ifFalse: [self error: self invalidUserNameErrorSignal ].
	((allowedUsers at: aUserName) = aPassword) ifTrue: [self error: self invalidPasswordErrorSignal ].! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:54:16' prior: 50864211!
createCartFor: aUserName withPassword: aPassword 
	
	(allowedUsers keys includes: aUserName) ifFalse: [self error: self invalidUserNameErrorSignal ].
	((allowedUsers at: aUserName) = aPassword) ifFalse: [self error: self invalidPasswordErrorSignal ].! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:54:20'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 18:54:20'!
PASSED!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:57:11'!
assertPassword: aUserName matchesWith: aPassword

	^ ((allowedUsers at: aUserName) = aPassword) ifFalse: [self error: self invalidPasswordErrorSignal ]! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:57:11' prior: 50864222!
createCartFor: aUserName withPassword: aPassword 
	
	(allowedUsers keys includes: aUserName) ifFalse: [self error: self invalidUserNameErrorSignal ].
	self assertPassword: aUserName matchesWith: aPassword.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:58:33' prior: 50864248!
createCartFor: aUserName withPassword: aPassword 
	
	(allowedUsers keys includes: aUserName) ifFalse: [self error: self invalidUserNameErrorSignal ].
	self assertPassword: (allowedUsers at: aUserName) matchesWith: aPassword.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:58:58' prior: 50864240!
assertPassword: aPassword matchesWith: anotherPassword

	^ ( aPassword = anotherPassword) ifFalse: [self error: self invalidPasswordErrorSignal ]! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:59:01' prior: 50864269!
assertPassword: aPassword matchesWith: anotherPassword

	^ (aPassword = anotherPassword) ifFalse: [self error: self invalidPasswordErrorSignal ]! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:59:49'!
assertInvalidUserName: aUserName

	^ (allowedUsers keys includes: aUserName) ifFalse: [self error: self invalidUserNameErrorSignal ]! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 18:59:49' prior: 50864258!
createCartFor: aUserName withPassword: aPassword 
	
	self assertInvalidUserName: aUserName.
	self assertPassword: (allowedUsers at: aUserName) matchesWith: aPassword.! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:00:05'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:00:05'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'lmalvarez 6/21/2021 19:01:41'!
validUserList

	| dictionary |
	
	dictionary := Dictionary new.
	dictionary at: 'Matias' put: 'Juancho'.
	
	^ dictionary ! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'lmalvarez 6/21/2021 19:02:33'!
validStore

	| dictionary |
	
	dictionary := Dictionary new.
	dictionary at: 'Matias' put: 'Juancho'.
	
	^ dictionary ! !

!methodRemoval: StoreTestObjectsFactory #validUserList stamp: 'lmalvarez 6/21/2021 19:02:33'!
validUserList

	| dictionary |
	
	dictionary := Dictionary new.
	dictionary at: 'Matias' put: 'Juancho'.
	
	^ dictionary !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'lmalvarez 6/21/2021 19:02:48' prior: 50864316!
validStore

	| dictionary |
	
	dictionary := Dictionary new.
	dictionary at: 'Matias' put: 'Juancho'.
	
	^ Store allowing: dictionary ! !

!methodRemoval: XXXTest #validStore stamp: 'lmalvarez 6/21/2021 19:02:59'!
validStore
	
	| dictionary |
	
	dictionary := Dictionary new.
	dictionary at: 'Matias' put: 'Juancho'.

	^ Store allowing: dictionary.!

TestCase subclass: #XXXTest
	instanceVariableNames: 'builder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXTest category: 'TusLibros' stamp: 'lmalvarez 6/21/2021 19:03:09'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'builder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #XXXTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXTest category: 'TusLibros' stamp: 'lmalvarez 6/21/2021 19:03:28'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:03:39' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:03:55' prior: 50864175!
test02InvalidPasswordShouldNotBeAllowedToCreateCart

	| store userName userPassword |
	
	userName := 'Matias'.
	userPassword := 'Harrison'.
	store := testObjectsFactory validStore.
	
	self should: [store createCartFor: userName withPassword: userPassword ]
		raise: Error
		withMessageText: store invalidPasswordErrorSignal. ! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:04:03' prior: 50864059!
test01InvalidUserNameShouldNotBeAllowedToCreateCart

	| store userName userPassword |
	
	userName := 'Pepito'.
	userPassword := 'Harrison'.
	store := testObjectsFactory validStore.
	
	self should: [store createCartFor: userName withPassword: userPassword ]
		raise: Error
		withMessageText: store invalidUserNameErrorSignal. ! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:04:06'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:04:06'!
PASSED!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:04:23' prior: 50864122!
invalidPasswordErrorSignal

	^ 'Error - Invalid Password'! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:04:27' prior: 50864054!
invalidUserNameErrorSignal

	^ 'Error - Invalid User Name'! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:10:43'!
test03CreateCartShouldCreateAnEmptyCartForAValidUser

	| store userName userPassword cartId |
	
	userName := 'Matias'.
	userPassword := 'Juancho'.
	store := testObjectsFactory validStore.
	
	cartId := store createCartFor: userName withPassword: userPassword.
	
	self assert: (store listCart: cartId) isEmpty. ! !

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:10:47'!
ERROR!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:10:47'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:10:52'!
listCart: aStore 
	self shouldBeImplemented.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:11:10' prior: 50864438!
listCart: cartID

	^ OrderedCollection new. 
	! !

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:11:11'!
PASSED!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:11:13'!
PASSED!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:11:13'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:11:13'!
PASSED!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:11:13'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:18:05'!
test04InvalidCartIDShouldNotBeAllowedToAddToCart

	| store cartId isbn|
	
	store := testObjectsFactory validStore.
	
	cartId := '01234'.
	isbn := '000000'
	
	store addToCart: cartId aTotalOf: 1 aBook: testObjectsFactory itemSellByTheStore.
	
	
	self assert: (store listCart: cartId) isEmpty. ! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:18:17' prior: 50864466!
test04InvalidCartIDShouldNotBeAllowedToAddToCart

	| store cartId|
	
	store := testObjectsFactory validStore.
	
	cartId := '01234'.
	
	store addToCart: cartId aTotalOf: 1 aBook: testObjectsFactory itemSellByTheStore.
	
	
	self assert: (store listCart: cartId) isEmpty. ! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:18:22' prior: 50864479!
test04InvalidCartIDShouldNotBeAllowedToAddToCart

	| store cartId|
	
	store := testObjectsFactory validStore.
	
	cartId := '01234'.
	
	store addToCart: cartId aTotalOf: 1 aBook: testObjectsFactory itemSellByTheStore.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:18:53' prior: 50864491!
test04InvalidCartIDShouldNotBeAllowedToAddToCart

	| store cartId|
	
	store := testObjectsFactory validStore.
	
	cartId := '01234'.
	
	
	self should: [store addToCart: cartId aTotalOf: 1 aBook: testObjectsFactory itemSellByTheStore.]
		raise: Error
		withMessageText: store invalidCartID.! !

!testRun: #XXXTest #test04InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:19:00'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:19:04'!
invalidCartID
	self shouldBeImplemented.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:19:13' prior: 50864517!
invalidCartID
	^ 'Error - Invalid Cart ID'! !

!testRun: #XXXTest #test04InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:19:14'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:19:24'!
addToCart: aString aTotalOf: aSmallInteger aBook: aString3 
	self shouldBeImplemented.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:20:04' prior: 50864530!
addToCart: aCartID aTotalOf: anAmount aBook: aBook

	^ self error: self invalidCartID 
	
	! !

!testRun: #XXXTest #test04InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:20:07'!
PASSED!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:20:07'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:20:07'!
PASSED!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:20:07'!
PASSED!

!testRun: #XXXTest #test04InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:20:07'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:20:14' prior: 50864501!
test04InvalidCartIDShouldNotBeAllowedToAddToCart

	| store cartId|
	
	store := testObjectsFactory validStore.
	
	cartId := '01234'.
	
	self should: [store addToCart: cartId aTotalOf: 1 aBook: testObjectsFactory itemSellByTheStore.]
		raise: Error
		withMessageText: store invalidCartID.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:21:59'!
add: aCartID to: anAmount of: aBook

	^ self error: self invalidCartID 
	
	! !

!methodRemoval: Store #addToCart:aTotalOf:aBook: stamp: 'lmalvarez 6/21/2021 19:21:59'!
addToCart: aCartID aTotalOf: anAmount aBook: aBook

	^ self error: self invalidCartID 
	
	!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:22:18' prior: 50864573!
add: anAmount to: aCartID of: aBook

	^ self error: self invalidCartID 
	
	! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:22:22' prior: 50864585!
add: anAmount to: aCartID of: aBookISBN

	^ self error: self invalidCartID 
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:22:59' prior: 50864561!
test04InvalidCartIDShouldNotBeAllowedToAddToCart

	| store cartId|
	
	store := testObjectsFactory validStore.
	
	cartId := '01234'.
	
	self should: [store add: 1 to: cartId of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: store invalidCartID.! !

!testRun: #XXXTest #test04InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:23:02'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:23:51'!
test05CantAddAProductThatIsNotBeingSellByTheStore

	| store cartId |
	
	store := testObjectsFactory validStore.
	
	cartId := '01234'.
	
	self should: [store add: 1 to: cartId of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: store invalidCartID.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:24:33' prior: 50864612!
test05CantAddAProductThatIsNotBeingSellByTheStore

	| store userName userPassword cartId |
	
	userName := 'Matias'.
	userPassword := 'Juancho'.
	store := testObjectsFactory validStore.
	
	cartId := store createCartFor: userName withPassword: userPassword .
	
	self should: [store add: 1 to: cartId of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: store invalidItemErrorMessage.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:24:37' prior: 50864624!
test05CantAddAProductThatIsNotBeingSellByTheStore

	| store userName userPassword cartId |
	
	userName := 'Matias'.
	userPassword := 'Juancho'.
	store := testObjectsFactory validStore.
	
	cartId := store createCartFor: userName withPassword: userPassword .
	
	self should: [store add: 1 to: cartId of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: store invalidISBN.! !

!testRun: #XXXTest #test05CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:24:42'!
ERROR!

!testRun: #XXXTest #test05CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:24:42'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:24:47'!
invalidISBN
	self shouldBeImplemented.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:24:55' prior: 50864663!
invalidISBN
	^ 'Error - Invalid ISBN'! !

!testRun: #XXXTest #test05CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:24:56'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:26:41' prior: 50864293!
createCartFor: aUserName withPassword: aPassword 
	
	self assertInvalidUserName: aUserName.
	self assertPassword: (allowedUsers at: aUserName) matchesWith: aPassword.
	
	^ '0000'! !

!testRun: #XXXTest #test05CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:26:47'!
FAILURE!

!testRun: #XXXTest #test05CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:26:47'!
FAILURE!

!testRun: #XXXTest #test04InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:26:56'!
PASSED!

Object subclass: #Store
	instanceVariableNames: 'allowedUsers cartIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'lmalvarez 6/21/2021 19:28:17'!
Object subclass: #Store
	instanceVariableNames: 'allowedUsers cartIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:29:02' prior: 50864143!
initializeWith: aListOfUsers

	allowedUsers := aListOfUsers.
	cartIDs := 0.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:29:11' prior: 50864676!
createCartFor: aUserName withPassword: aPassword 
	
	self assertInvalidUserName: aUserName.
	self assertPassword: (allowedUsers at: aUserName) matchesWith: aPassword.
	
	^ 0! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:30:28' prior: 50864591!
add: anAmount to: aCartID of: aBookISBN

	(aCartID = 0) ifFalse: [self error: self invalidCartID ].
	
	
	! !

!testRun: #XXXTest #test05CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:30:38'!
FAILURE!

!testRun: #XXXTest #test05CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:30:38'!
FAILURE!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:33:06'!
test06CantAddAProductThatIsNotBeingSellByTheStore

	| store userName userPassword cartId |
	
	userName := 'Matias'.
	userPassword := 'Juancho'.
	store := testObjectsFactory validStore.
	
	cartId := store createCartFor: userName withPassword: userPassword .
	
	self should: [store add: 1 to: cartId of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: store invalidISBN.! !

!methodRemoval: XXXTest #test05CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:33:06'!
test05CantAddAProductThatIsNotBeingSellByTheStore

	| store userName userPassword cartId |
	
	userName := 'Matias'.
	userPassword := 'Juancho'.
	store := testObjectsFactory validStore.
	
	cartId := store createCartFor: userName withPassword: userPassword .
	
	self should: [store add: 1 to: cartId of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: store invalidISBN.!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:33:10'!
test05InvalidCartIDShouldNotBeAllowedToAddToCart

	| store cartId|
	
	store := testObjectsFactory validStore.
	
	cartId := '01234'.
	
	self should: [store add: 1 to: cartId of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: store invalidCartID.! !

!methodRemoval: XXXTest #test04InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:33:10'!
test04InvalidCartIDShouldNotBeAllowedToAddToCart

	| store cartId|
	
	store := testObjectsFactory validStore.
	
	cartId := '01234'.
	
	self should: [store add: 1 to: cartId of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: store invalidCartID.!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:35:49'!
test04CreateCartShouldAlwaysReturnDifferentCartIDs

	| store userName userPassword cartIdA cartIdB |
	
	userName := 'Matias'.
	userPassword := 'Juancho'.
	store := testObjectsFactory validStore.
	
	cartIdA := store createCartFor: userName withPassword: userPassword.
	cartIdB := store createCartFor: userName withPassword: userPassword.
	
	self deny: (cartIdA = cartIdB)
	
	! !

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:52'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:52'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:54'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:55'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:57'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:57'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:58'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:58'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:58'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:58'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:58'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:58'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:58'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:58'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:59'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:35:59'!
FAILURE!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:36:00'!
PASSED!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:01'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:01'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:01'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:01'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:01'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:01'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:01'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:01'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:02'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:02'!
FAILURE!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:36:04'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:36:04'!
PASSED!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:36:04'!
PASSED!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:04'!
FAILURE!

!testRun: #XXXTest #test05InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:36:04'!
PASSED!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:36:04'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:33'!
FAILURE!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:36:33'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:36:54' prior: 50864714!
createCartFor: aUserName withPassword: aPassword 
	
	self assertInvalidUserName: aUserName.
	self assertPassword: (allowedUsers at: aUserName) matchesWith: aPassword.
	
	^ self newCartID! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:37:11'!
newCartID

	^ cartIDs + 1! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:37:51' prior: 50864947!
newCartID

	cartIDs := cartIDs + 1.
	
	^cartIDs! !

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:38:00'!
PASSED!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:38:01'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:38:03'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:38:04'!
PASSED!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:38:05'!
PASSED!

!testRun: #XXXTest #test05InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:38:10'!
PASSED!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:38:12'!
FAILURE!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:38:12'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'lmalvarez 6/21/2021 19:39:22'!
Object subclass: #Store
	instanceVariableNames: 'allowedUsers cartIDs catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:39:20' prior: 50864723!
add: anAmount to: aCartID of: aBookISBN

	(aCartID = 0) ifFalse: [self error: self invalidCartID ].
	(catalog includes: aBookISBN) ifFalse: [self error: self invalidISBN ]
	
	
	! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:41:09' prior: 50864708!
initializeWith: aListOfUsers

	allowedUsers := aListOfUsers.
	catalog := Dictionary new.
	cartIDs := 0.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:41:18' prior: 50864993!
add: anAmount to: aCartID of: aBookISBN

	(aCartID = 0) ifFalse: [self error: self invalidCartID ].
	(catalog keys includes: aBookISBN) ifFalse: [self error: self invalidISBN ]
	
	
	! !

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:41:22'!
FAILURE!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:41:22'!
FAILURE!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:41:52'!
FAILURE!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:41:52'!
FAILURE!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:42:06'!
FAILURE!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:42:06'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:42:36' prior: 50865009!
add: anAmount to: aCartID of: aBookISBN

	(aCartID = 1) ifFalse: [self error: self invalidCartID ].
	(catalog keys includes: aBookISBN) ifFalse: [self error: self invalidISBN ]
	
	
	! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:42:39'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:42:39'!
PASSED!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:42:39'!
PASSED!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:42:39'!
PASSED!

!testRun: #XXXTest #test05InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:42:39'!
PASSED!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:42:39'!
PASSED!

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:42:53'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/21/2021 19:42:53'!
PASSED!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/21/2021 19:42:53'!
PASSED!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/21/2021 19:42:53'!
PASSED!

!testRun: #XXXTest #test05InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 19:42:53'!
PASSED!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 19:42:53'!
PASSED!

----SNAPSHOT----(21 June 2021 20:03:35) CuisUniversity-4532.image priorSource: 17030326!

----SNAPSHOT----(21 June 2021 20:15:21) CuisUniversity-4532.image priorSource: 17070191!

----STARTUP---- (21 June 2021 22:50:37) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\TPs\Douple\CuisUniversity-4532.image!

!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 22:51:57'!
invalidISBNErrorSignal
	^ 'Error - Invalid ISBN'! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 22:51:57' prior: 50865041!
add: anAmount to: aCartID of: aBookISBN

	(aCartID = 1) ifFalse: [self error: self invalidCartID ].
	(catalog keys includes: aBookISBN) ifFalse: [self error: self invalidISBNErrorSignal ]
	
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 22:51:57' prior: 50864737!
test06CantAddAProductThatIsNotBeingSellByTheStore

	| store userName userPassword cartId |
	
	userName := 'Matias'.
	userPassword := 'Juancho'.
	store := testObjectsFactory validStore.
	
	cartId := store createCartFor: userName withPassword: userPassword .
	
	self should: [store add: 1 to: cartId of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: store invalidISBNErrorSignal.! !

!methodRemoval: Store #invalidISBN stamp: 'lmalvarez 6/21/2021 22:51:57'!
invalidISBN
	^ 'Error - Invalid ISBN'!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 22:52:07'!
invalidCartIDErrorSignal
	^ 'Error - Invalid Cart ID'! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 22:52:07' prior: 50864768!
test05InvalidCartIDShouldNotBeAllowedToAddToCart

	| store cartId|
	
	store := testObjectsFactory validStore.
	
	cartId := '01234'.
	
	self should: [store add: 1 to: cartId of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: store invalidCartIDErrorSignal.! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 22:52:07' prior: 50865110!
add: anAmount to: aCartID of: aBookISBN

	(aCartID = 1) ifFalse: [self error: self invalidCartIDErrorSignal ].
	(catalog keys includes: aBookISBN) ifFalse: [self error: self invalidISBNErrorSignal ]
	
	
	! !

!methodRemoval: Store #invalidCartID stamp: 'lmalvarez 6/21/2021 22:52:07'!
invalidCartID
	^ 'Error - Invalid Cart ID'!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/21/2021 23:30:19'!
PASSED!

!testRun: #XXXTest #test05InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/21/2021 23:30:21'!
PASSED!

----SNAPSHOT----(21 June 2021 23:35:09) CuisUniversity-4532.image priorSource: 17070281!
!Store methodsFor: 'error signals' stamp: 'lmalvarez 6/21/2021 23:35:38' prior: 50865139!
invalidCartIDErrorSignal

	^ 'Error - Invalid Cart ID'! !
!Store methodsFor: 'error signals' stamp: 'lmalvarez 6/21/2021 23:35:41' prior: 50865105!
invalidISBNErrorSignal

	^ 'Error - Invalid ISBN'! !

----SNAPSHOT----(22 June 2021 01:11:34) CuisUniversity-4532.image priorSource: 17072819!

----STARTUP---- (22 June 2021 15:48:29) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\TPs\Douple\CuisUniversity-4532.image!


!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/22/2021 15:49:06'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/22/2021 15:49:06'!
PASSED!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/22/2021 15:49:06'!
PASSED!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/22/2021 15:49:06'!
PASSED!

!testRun: #XXXTest #test05InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/22/2021 15:49:06'!
PASSED!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/22/2021 15:49:06'!
PASSED!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/22/2021 15:49:16' prior: 50864951!
newCartID

	^cartIDs := cartIDs + 1.
	! !

!testRun: #XXXTest #test01InvalidUserNameShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/22/2021 15:49:18'!
PASSED!

!testRun: #XXXTest #test02InvalidPasswordShouldNotBeAllowedToCreateCart stamp: 'lmalvarez 6/22/2021 15:49:18'!
PASSED!

!testRun: #XXXTest #test03CreateCartShouldCreateAnEmptyCartForAValidUser stamp: 'lmalvarez 6/22/2021 15:49:18'!
PASSED!

!testRun: #XXXTest #test04CreateCartShouldAlwaysReturnDifferentCartIDs stamp: 'lmalvarez 6/22/2021 15:49:18'!
PASSED!

!testRun: #XXXTest #test05InvalidCartIDShouldNotBeAllowedToAddToCart stamp: 'lmalvarez 6/22/2021 15:49:18'!
PASSED!

!testRun: #XXXTest #test06CantAddAProductThatIsNotBeingSellByTheStore stamp: 'lmalvarez 6/22/2021 15:49:18'!
PASSED!
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/22/2021 15:49:16' prior: 50865220!
newCartID

	^cartIDs := cartIDs + 1.
	! !
!Store methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/21/2021 19:37:51' prior: 50865247!
newCartID

	cartIDs := cartIDs + 1.
	
	^cartIDs! !