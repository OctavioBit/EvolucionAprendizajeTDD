

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:08:16'!
ERROR!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:08:16'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:08:16'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:08:54' prior: 51108120!
test05AssertCheckOutList

	"|cart cashier  totalAmount aExpirationDate aCreditCard|
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	cart add: 2 of: 'Valid book 2'.
	
	aExpirationDate := GregorianMonthOfYear  year: 2022 month: 1. 
	cashier := Cashier new . 
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.
	
	cashier checkOutCart: cart payingWithCreditCard: aCreditCard."
	
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:08:57'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:08:57'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:09:14' prior: 51108269!
totalPrice

	| totalCartPrice |
	
	
	totalCartPrice := items sum:[:cartItem | (catalog at: cartItem ) ] ifEmpty: [0].
	
	^ totalCartPrice 
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:09:19' prior: 51108576!
totalPrice

	| totalCartPrice |
	
	
	totalCartPrice := items sum: [ :cartItem | (catalog at: cartItem ) ] ifEmpty: [0].
	
	^ totalCartPrice 
	
	! !

!methodRemoval: Cart #listCart stamp: 'CS 6/14/2021 09:09:25'!
listCart

	^items!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:09:30'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:09:30'!
PASSED!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 09:11:41' prior: 51108299!
checkOutCart: aCart payingWithCreditCard: aCreditCard

	self assertIsValidCart: aCart.
	self validateExpirationDate: aCreditCard expirationDate.
	^ aCart totalPrice
	! !
!Cashier methodsFor: 'nil' stamp: 'CS 6/14/2021 09:12:07'!
isValidateCart: aCart

	aCart isEmpty ifTrue: [^Error signal: self class describeErrorCartEmpty ].
! !
!Cashier methodsFor: 'validations' stamp: 'CS 6/14/2021 09:12:24'!
assertIsValidCart: aCart

	aCart isEmpty ifTrue: [^Error signal: self class describeErrorCartEmpty ].
! !

!methodRemoval: Cashier #isValidateCart: stamp: 'CS 6/14/2021 09:12:27'!
isValidateCart: aCart

	aCart isEmpty ifTrue: [^Error signal: self class describeErrorCartEmpty ].
!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 09:12:57' prior: 51108644!
checkOutCart: aCart payingWithCreditCard: aCreditCard

	self assertIsValidCart: aCart.
	self assertIsValidCreditCart: aCreditCard.
	^ aCart totalPrice
	! !
!Cashier methodsFor: 'validations' stamp: 'CS 6/14/2021 09:13:52' prior: 51108308!
validateExpirationDate: aCreditCart

	| today expirationDate |
	
	expirationDate := aCreditCart expirationDate.
	
	today := DateAndTime today.
	((expirationDate year < today yearNumber) 
	or:[(expirationDate year = today yearNumber) and: [expirationDate month < today monthIndex]]) 
	
		ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .! !
!Cashier methodsFor: 'validations' stamp: 'CS 6/14/2021 09:14:08'!
assertIsValidCreditCart: aCreditCart

	| today expirationDate |
	
	expirationDate := aCreditCart expirationDate.
	
	today := DateAndTime today.
	((expirationDate year < today yearNumber) 
	or:[(expirationDate year = today yearNumber) and: [expirationDate month < today monthIndex]]) 
	
		ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .! !

!methodRemoval: Cashier #validateExpirationDate: stamp: 'CS 6/14/2021 09:14:11'!
validateExpirationDate: aCreditCart

	| today expirationDate |
	
	expirationDate := aCreditCart expirationDate.
	
	today := DateAndTime today.
	((expirationDate year < today yearNumber) 
	or:[(expirationDate year = today yearNumber) and: [expirationDate month < today monthIndex]]) 
	
		ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:14:15'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:14:15'!
PASSED!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 09:27:38' prior: 51108670!
checkOutCart: aCart payingWithCreditCard: aCreditCard

	self assertIsValidCart: aCart.
	self assertIsValidCreditCart: aCreditCard.
	
	^ aCart totalPrice
	! !
!Cashier methodsFor: 'validations' stamp: 'CS 6/14/2021 09:28:47'!
assertIsValidCreditCard: aCreditCart

	| today expirationDate |
	
	expirationDate := aCreditCart expirationDate.
	
	today := DateAndTime today.
	((expirationDate year < today yearNumber) 
	or:[(expirationDate year = today yearNumber) and: [expirationDate month < today monthIndex]]) 
	
		ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .! !
!Cashier methodsFor: 'validations' stamp: 'CS 6/14/2021 09:28:55' prior: 51108778!
assertIsValidCreditCard: aCreditCard

	| today expirationDate |
	
	expirationDate := aCreditCard expirationDate.
	
	today := DateAndTime today.
	((expirationDate year < today yearNumber) 
	or:[(expirationDate year = today yearNumber) and: [expirationDate month < today monthIndex]]) 
	
		ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .! !

!methodRemoval: Cashier #assertIsValidCreditCart: stamp: 'CS 6/14/2021 09:29:02'!
assertIsValidCreditCart: aCreditCart

	| today expirationDate |
	
	expirationDate := aCreditCart expirationDate.
	
	today := DateAndTime today.
	((expirationDate year < today yearNumber) 
	or:[(expirationDate year = today yearNumber) and: [expirationDate month < today monthIndex]]) 
	
		ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 09:29:13' prior: 51108770!
checkOutCart: aCart payingWithCreditCard: aCreditCard

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard.
	
	^ aCart totalPrice
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 09:29:33' prior: 51108820!
checkOutCart: aCart payingWithCreditCard: aCreditCard

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard.

	^ aCart totalPrice
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:31:25' prior: 51108046!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart|
	cart := cartObjectTest createCart.
	cashier := Cashier new . 
	aCreditCard := CreditCard new.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:31:35' prior: 51108060!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount aExpirationDate|
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	cashier := Cashier new . 
	
	aExpirationDate := GregorianMonthOfYear  year: 2021 month: 10. 
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert: totalAmount  equals: 10
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:31:41' prior: 51108850!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount aExpirationDate|
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	cashier := Cashier new . 
	
	aExpirationDate := GregorianMonthOfYear  year: 2021 month: 10. 
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert: totalAmount equals: 10
	! !
!EditorialTestObject methodsFor: 'create initialization instance' stamp: 'CS 6/14/2021 09:32:04' prior: 51108430!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceForValidItem.
	^catalog ! !
!EditorialTestObject methodsFor: 'create initialization instance' stamp: 'CS 6/14/2021 09:32:05' prior: 51108889!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceForValidItem.
	
	^catalog ! !
!EditorialTestObject methodsFor: 'create initialization instance' stamp: 'CS 6/14/2021 09:32:06' prior: 51108897!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self priceForValidItem.

	^catalog ! !
!EditorialTestObject methodsFor: 'create initialization instance' stamp: 'CS 6/14/2021 09:32:12' prior: 51108448!
priceForValidItem

	^ 10! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:32:47' prior: 51108155!
test01ValideName

	|  aExpirationDate|
	
	aExpirationDate := GregorianMonthOfYear year: 2022 month: 10. 
	
	self should: [CreditCard withOwner: '' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeEmptyName . ]
	
	! !
!EditorialTestObject methodsFor: 'create initialization instance' stamp: 'CS 6/14/2021 09:37:03' prior: 51108425!
createCart
	
	^ Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:38:13' prior: 51108836!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	cashier := Cashier new . 
	aCreditCard := CreditCard new.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'nil' stamp: 'CS 6/14/2021 09:38:52'!
createCreditCart

	| aCreditCard aExpirationDate |
	aExpirationDate := GregorianMonthOfYear  year: 2021 month: 10. 
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:39:04' prior: 51108951!
createCreditCart

	| aCreditCard aExpirationDate |
	
	aExpirationDate := GregorianMonthOfYear  year: 2021 month: 10. 
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:39:20' prior: 51108962!
createCreditCart

	| aCreditCard aExpirationDate |
	
	aExpirationDate := GregorianMonthOfYear  year: 2021 month: 10. 
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:43:41' prior: 51108869!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	cashier := Cashier new . 
	
	aCreditCard := self createCreditCart.
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert: totalAmount equals: 10
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:43:48'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:43:57'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:43:57'!
PASSED!
!CashierTest methodsFor: 'initialization' stamp: 'CS 6/14/2021 09:45:55' prior: 51108973!
createCreditCart

	| aCreditCard aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear  year: (today yearNumber + 1) month: today monthIndex. 
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!CashierTest methodsFor: 'initialization' stamp: 'CS 6/14/2021 09:46:09' prior: 51109098!
createCreditCart

	| aCreditCard aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber + 1) month: today monthIndex. 
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:46:14'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:46:14'!
PASSED!
!CashierTest methodsFor: 'nil' stamp: 'CS 6/14/2021 09:46:53'!
createExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber + 1) month: today monthIndex.
	
	^ aExpirationDate.! !
!CashierTest methodsFor: 'initialization' stamp: 'CS 6/14/2021 09:47:37' prior: 51109112!
createCreditCart

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!CashierTest methodsFor: 'initialization' stamp: 'CS 6/14/2021 09:48:14' prior: 51109185!
createCreditCart

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:48:18'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:48:18'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:48:47' prior: 51108937!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	cashier := Cashier new . 

	aCreditCard := self createCreditCart.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:49:09' prior: 51109257!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	aCreditCard := self createCreditCart.
	cashier := Cashier new . 

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:49:13' prior: 51109272!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	aCreditCard := self createCreditCart.
	cashier := Cashier new.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:49:31' prior: 51108984!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := self createCreditCart.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:50:00' prior: 51108079!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := self createCreditCart.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert:totalAmount  equals: 20
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:50:06' prior: 51109316!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := self createCreditCart.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert:totalAmount  equals: 20
	! !
!CashierTest methodsFor: 'initialization' stamp: 'CS 6/14/2021 09:50:45'!
createValidCreditCart

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:50:45' prior: 51109302!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := self createValidCreditCart.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:50:45' prior: 51109330!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := self createValidCreditCart.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert:totalAmount  equals: 20
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:50:45' prior: 51109287!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	aCreditCard := self createValidCreditCart.
	cashier := Cashier new.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !

!methodRemoval: CashierTest #createCreditCart stamp: 'CS 6/14/2021 09:50:45'!
createCreditCart

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:51:01'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:51:02'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:51:02'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:51:02'!
PASSED!
!CashierTest methodsFor: 'initialization' stamp: 'CS 6/14/2021 09:51:55'!
createInvalidCreditCart

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpiredDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!CashierTest methodsFor: 'initialization' stamp: 'CS 6/14/2021 09:53:46'!
createValidExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber - 1) month: today monthIndex.
	
	^ aExpirationDate.! !
!CashierTest methodsFor: 'initialization' stamp: 'CS 6/14/2021 09:54:34'!
createExpiredDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber - 1) month: today monthIndex.
	
	^ aExpirationDate.! !

!methodRemoval: CashierTest #createValidExpirationDate stamp: 'CS 6/14/2021 09:54:38'!
createValidExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber - 1) month: today monthIndex.
	
	^ aExpirationDate.!
!CashierTest methodsFor: 'initialization' stamp: 'CS 6/14/2021 09:54:49'!
createValidExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber + 1) month: today monthIndex.
	
	^ aExpirationDate.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:54:49' prior: 51109344!
createValidCreditCart

	| aCreditCard aExpirationDate |

	aExpirationDate := self createValidExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !

!methodRemoval: CashierTest #createExpirationDate stamp: 'CS 6/14/2021 09:54:49'!
createExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber + 1) month: today monthIndex.
	
	^ aExpirationDate.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:54:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:54:59'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:54:59'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:55:46' prior: 51108098!
test04InvalidCreditCardNoneExpired

	|cart cashier  totalAmount aCreditCard|
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := self createInvalidCreditCart.
	cashier := Cashier new.
	
	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:55:57' prior: 51109628!
test04InvalidCreditCardNoneExpired

	|cart cashier  aCreditCard |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := self createInvalidCreditCart.
	cashier := Cashier new.
	
	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 09:56:05' prior: 51109645!
test04InvalidCreditCardNoneExpired

	|cart cashier aCreditCard |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := self createInvalidCreditCart.
	cashier := Cashier new.
	
	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:56:10'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:56:10'!
PASSED!
!CashierTest methodsFor: 'create instance for credit card' stamp: 'CS 6/14/2021 09:58:39'!
createInvalidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpiredDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:58:39' prior: 51109662!
test04InvalidCreditCardNoneExpired

	|cart cashier aCreditCard |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := self createInvalidCreditCard.
	cashier := Cashier new.
	
	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !

!methodRemoval: CashierTest #createInvalidCreditCart stamp: 'CS 6/14/2021 09:58:39'!
createInvalidCreditCart

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpiredDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard!
!CashierTest methodsFor: 'create instance for credit card' stamp: 'CS 6/14/2021 09:58:53'!
createValidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createValidExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:58:53' prior: 51109355!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := self createValidCreditCard.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:58:53' prior: 51109370!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := self createValidCreditCard.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert:totalAmount  equals: 20
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 09:58:53' prior: 51109385!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	aCreditCard := self createValidCreditCard.
	cashier := Cashier new.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !

!methodRemoval: CashierTest #createValidCreditCart stamp: 'CS 6/14/2021 09:58:53'!
createValidCreditCart

	| aCreditCard aExpirationDate |

	aExpirationDate := self createValidExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:58:56'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 09:59:06'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 09:59:06'!
PASSED!
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:00:56'!
test01InvalideName

	|  aExpirationDate|
	
	aExpirationDate := GregorianMonthOfYear year: 2022 month: 10. 
	
	self should: [CreditCard withOwner: '' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeEmptyName . ]
	
	! !

!methodRemoval: CreditCardTest #test01ValideName stamp: 'CS 6/14/2021 10:00:56'!
test01ValideName

	|  aExpirationDate|
	
	aExpirationDate := GregorianMonthOfYear year: 2022 month: 10. 
	
	self should: [CreditCard withOwner: '' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeEmptyName . ]
	
	!
!CreditCard methodsFor: 'nil' stamp: 'CS 6/14/2021 10:01:27'!
createValidExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber + 1) month: today monthIndex.
	
	^ aExpirationDate.! !

!methodRemoval: CreditCard #createValidExpirationDate stamp: 'CS 6/14/2021 10:01:40'!
createValidExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber + 1) month: today monthIndex.
	
	^ aExpirationDate.!
!CreditCardTest methodsFor: 'nil' stamp: 'CS 6/14/2021 10:01:45'!
createValidExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber + 1) month: today monthIndex.
	
	^ aExpirationDate.! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:01:58' prior: 51108169!
test02ValideCreditCardNumber

	| aExpirationDate|
	
	aExpirationDate := self createValidExpirationDate.
	
	self should: [ CreditCard withOwner: 'Alan kay' withCreditCardNumber: '11111111111' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeinvalidCreditCardNumber ]
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:02:09' prior: 51109989!
test02ValideCreditCardNumber

	| aExpirationDate|
	
	aExpirationDate := self createValidExpirationDate.
	
	self should: [ CreditCard withOwner: 'Alan kay' withCreditCardNumber: '12345678' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeinvalidCreditCardNumber ]
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:02:53' prior: 51110004!
test02ValideCreditCardNumber

	| aExpirationDate|
	
	aExpirationDate := self createValidExpirationDate.
	
	self should: [CreditCard withOwner: 'Alan kay' withCreditCardNumber: '12345678' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeinvalidCreditCardNumber ]
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 10:02:57'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 10:02:57'!
PASSED!
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:03:01' prior: 51110019!
test02ValideCreditCardNumber

	| aExpirationDate |
	
	aExpirationDate := self createValidExpirationDate.
	
	self should: [CreditCard withOwner: 'Alan kay' withCreditCardNumber: '12345678' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeinvalidCreditCardNumber ]
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:03:10' prior: 51108184!
test03ValideCreditwithGoodsParameters

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := self createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := '1111111111111111'.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:03:35' prior: 51109934!
test01InvalideName

	|  aExpirationDate|
	
	aExpirationDate := self createValidExpirationDate.
	
	self should: [CreditCard withOwner: '' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeEmptyName . ]
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:04:09' prior: 51110119!
test01InvalideName

	|  aExpirationDate|
	
	aExpirationDate := self createValidExpirationDate.
	
	self should: [CreditCard withOwner: '' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeEmptyName . ]
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 10:04:12'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 10:04:12'!
PASSED!
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:04:20' prior: 51110099!
test03ValideCreditwithGoodsParameters

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := self createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := ''.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:04:21' prior: 51110197!
test03ValideCreditwithGoodsParameters

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := self createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := '1234567887654321'.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 10:04:25'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 10:04:25'!
PASSED!
!EditorialTestObject methodsFor: 'nil' stamp: 'CS 6/14/2021 10:08:33'!
createExpiredDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber - 1) month: today monthIndex.
	
	^ aExpirationDate.! !
!EditorialTestObject methodsFor: 'nil' stamp: 'CS 6/14/2021 10:08:59'!
createValidExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber + 1) month: today monthIndex.
	
	^ aExpirationDate.! !
!EditorialTestObject methodsFor: 'nil' stamp: 'CS 6/14/2021 10:09:22'!
createValidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createValidExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!EditorialTestObject methodsFor: 'nil' stamp: 'CS 6/14/2021 10:10:14'!
createInvalidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpiredDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'CS 6/14/2021 10:11:23'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'CS 6/14/2021 10:11:20' overrides: 16896425!
initialize

	cartObjectTest := EditorialTestObject new! !

!methodRemoval: CreditCardTest #createValidExpirationDate stamp: 'CS 6/14/2021 10:11:55'!
createValidExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber + 1) month: today monthIndex.
	
	^ aExpirationDate.!
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:13:37' prior: 51110133!
test01InvalideName

	|  aExpirationDate|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	
	self should: [CreditCard withOwner: '' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeEmptyName . ]
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:13:48' prior: 51110084!
test02ValideCreditCardNumber

	| aExpirationDate |
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	
	self should: [CreditCard withOwner: 'Alan kay' withCreditCardNumber: '12345678' withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeinvalidCreditCardNumber ]
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:13:55' prior: 51110216!
test03ValideCreditwithGoodsParameters

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := '1234567887654321'.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 10:14:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 10:17:13'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 10:17:13'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:17:47' prior: 51109809!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 10:17:50'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 10:17:50'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:18:15' prior: 51109779!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.

	aCreditCard := cartObjectTest createValidCreditCard.

	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:18:21' prior: 51110560!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:18:34' prior: 51109794!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	self assert:totalAmount  equals: 20
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 10:18:37'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 10:18:37'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 10:18:51' prior: 51109740!
test04InvalidCreditCardNoneExpired

	|cart cashier aCreditCard |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	cashier := Cashier new.
	
	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 10:18:55'!
PASSED!

!methodRemoval: CashierTest #createExpiredDate stamp: 'CS 6/14/2021 10:19:02'!
createExpiredDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber - 1) month: today monthIndex.
	
	^ aExpirationDate.!

!methodRemoval: CashierTest #createValidExpirationDate stamp: 'CS 6/14/2021 10:19:02'!
createValidExpirationDate

	| aExpirationDate today |

	today := DateAndTime today.
	
	aExpirationDate := GregorianMonthOfYear year: (today yearNumber + 1) month: today monthIndex.
	
	^ aExpirationDate.!

!methodRemoval: CashierTest #createInvalidCreditCard stamp: 'CS 6/14/2021 10:19:06'!
createInvalidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpiredDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard!

!methodRemoval: CashierTest #createValidCreditCard stamp: 'CS 6/14/2021 10:19:06'!
createValidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createValidExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1234567887654321' withExpirationDate: aExpirationDate.
	
	^ aCreditCard!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 10:19:10'!
PASSED!

----QUIT----(14 June 2021 10:21:39) CuisUniversity-4532.image priorSource: 24745448!

----STARTUP---- (14 June 2021 18:32:27) as /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/linux64/CuisUniversity-4532.image!

!Cashier methodsFor: 'validations' stamp: 'CS 6/14/2021 18:35:19'!
assertIsValidCreditCard: aCreditCard on: today

	(aCreditCard isExpiredOn: today) ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 18:37:50'!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard.

	^ aCart totalPrice
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:37:50' prior: 51110575!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:37:50' prior: 51110589!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert:totalAmount  equals: 20
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:37:50' prior: 51110495!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:37:50' prior: 51110654!
test04InvalidCreditCardNoneExpired

	|cart cashier aCreditCard |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	cashier := Cashier new.
	
	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !

!methodRemoval: Cashier #checkOutCart:payingWithCreditCard: stamp: 'CS 6/14/2021 18:37:50'!
checkOutCart: aCart payingWithCreditCard: aCreditCard

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard.

	^ aCart totalPrice
	!

!methodRemoval: Cashier #assertIsValidCreditCard: stamp: 'CS 6/14/2021 18:39:42'!
assertIsValidCreditCard: aCreditCard

	| today expirationDate |
	
	expirationDate := aCreditCard expirationDate.
	
	today := DateAndTime today.
	((expirationDate year < today yearNumber) 
	or:[(expirationDate year = today yearNumber) and: [expirationDate month < today monthIndex]]) 
	
		ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 18:39:56' prior: 51110824!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	^ aCart totalPrice
	! !
!CreditCard methodsFor: 'nil' stamp: 'CS 6/14/2021 18:40:50'!
isExpiredOn: aDate

	^ expirationDate < aDate monthOfYear.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:42:36' prior: 51110927!
isExpiredOn: aDate

	^ expirationDate < aDate monthOfYear.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 18:42:39'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 18:42:39'!
ERROR!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 18:42:39'!
FAILURE!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 18:42:39'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 18:42:39'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 18:43:14' prior: 51110833!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount today |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 18:44:26' prior: 51110848!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount today |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new .
	today := cartObjectTest today.

	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert:totalAmount  equals: 20
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 18:44:33' prior: 51110880!
test04InvalidCreditCardNoneExpired

	|cart cashier aCreditCard today |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	cashier := Cashier new.
		today := cartObjectTest today.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 18:44:40'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 18:44:40'!
ERROR!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 18:44:40'!
ERROR!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 18:44:40'!
PASSED!

!classDefinition: #EditorialTestObject category: 'TusLibros' stamp: 'CS 6/14/2021 18:46:38'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'dateToday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!EditorialTestObject methodsFor: 'nil' stamp: 'CS 6/14/2021 18:46:36' overrides: 16896425!
initialize

	dateToday := DateAndTime now! !
!EditorialTestObject methodsFor: 'nil' stamp: 'CS 6/14/2021 18:48:19'!
today

	^ dateToday ! !
!EditorialTestObject methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:48:21' prior: 51111099!
today

	^ dateToday! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 18:48:41'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 18:48:41'!
ERROR!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 18:48:41'!
FAILURE!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 18:48:41'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 18:48:44'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 18:52:31'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:00:43' prior: 51110864!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: cartObjectTest today.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:01:02' prior: 51111019!
test04InvalidCreditCardNoneExpired

	|cart cashier aCreditCard today |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	cashier := Cashier new.
	today := cartObjectTest today.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:01:05'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 19:01:05'!
ERROR!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:01:05'!
FAILURE!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 19:01:05'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:01:16'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:01:55' prior: 51110932!
isExpiredOn: aDate

	^ expirationDate < (aDate monthOfYear).
	! !

aDate monthOfYear!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:04:24'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:04:32'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 19:04:32'!
ERROR!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:04:32'!
FAILURE!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 19:04:32'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:04:34'!
ERROR!
!EditorialTestObject methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:06:04' prior: 51111095 overrides: 16896425!
initialize

	dateToday := FixedGregorianDate today! !
!EditorialTestObject methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:06:37' prior: 51111314 overrides: 16896425!
initialize

	dateToday := FixedGregorianDate today! !

FixedGregorianDate!

FixedGregorianDate today!

self monthOfYear!
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:13:09' prior: 51110285!
createExpiredDate

	^ dateToday monthOfYear previous.! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:19:31' prior: 51110919!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	^ aCart totalPrice
	! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:20:10' prior: 51110294!
createValidExpirationDate

	^ dateToday monthOfYear previous.! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:20:16' prior: 51111341!
createValidExpirationDate

	^ dateToday monthOfYear next.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 19:20:21'!
PASSED!

!classDefinition: #EditorialTestObject category: 'TusLibros' stamp: 'CS 6/14/2021 19:20:43'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'dateToday today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!EditorialTestObject methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:20:40' prior: 51111320 overrides: 16896425!
initialize

	today := FixedGregorianDate today! !

Object subclass: #EditorialTestObject
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #EditorialTestObject category: 'TusLibros' stamp: 'CS 6/14/2021 19:20:51'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!EditorialTestObject methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:20:56' prior: 51111103!
today

	^ today! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 19:20:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 19:20:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 19:20:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 19:20:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 19:20:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 19:20:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 19:20:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 19:20:59'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:20:59'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:20:59'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 19:20:59'!
ERROR!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:20:59'!
ERROR!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 19:20:59'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 19:20:59'!
ERROR!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 19:20:59'!
ERROR!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 19:20:59'!
ERROR!
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:21:16' prior: 51111327!
createExpiredDate

	^ today monthOfYear previous.! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:21:22' prior: 51111347!
createValidExpirationDate

	^ today monthOfYear next.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 19:21:25'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 19:21:25'!
PASSED!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:24:45' prior: 51111332!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	| salesBook |
	salesBook := OrderedCollection new.
	
	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook add: aCart totalPrice.
	
	^ salesBook first.
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:24:50' prior: 51111542!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	| salesBook |
	
	salesBook := OrderedCollection new.
	
	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook add: aCart totalPrice.
	
	^ salesBook first.
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:24:50' prior: 51111553!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	| salesBook |

	salesBook := OrderedCollection new.
	
	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook add: aCart totalPrice.
	
	^ salesBook first.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 19:26:14'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 19:26:14'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:26:37' prior: 51108507!
test05AssertCheckOutList

	|cart cashier  aExpirationDate aCreditCard|
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	cart add: 2 of: 'Valid book 2'.
	
	aExpirationDate := GregorianMonthOfYear  year: 2022 month: 1. 
	cashier := Cashier new . 
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.
	
	cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:27:31' prior: 51111626!
test05AssertCheckOutList

	|cart cashier aCreditCard totalAmount today |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert: totalAmount equals: 5
	
	
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:30:04' prior: 51111564!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	| salesBook |
	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook add: aCart totalPrice.
	
	^ salesBook first.
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 19:30:35'!
Object subclass: #Cashier
	instanceVariableNames: 'salesBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:30:33' prior: 51111660!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook1 add: aCart totalPrice.
	
	^ salesBook1 first.
	! !
!Cashier class methodsFor: 'nil' stamp: 'CS 6/14/2021 19:33:48'!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook
! !
!Cashier class methodsFor: 'nil' stamp: 'CS 6/14/2021 19:34:18'!
assertIsValidCart: aCart

	aCart isEmpty ifTrue: [^Error signal: self class describeErrorCartEmpty ].! !
!Cashier class methodsFor: 'nil' stamp: 'CS 6/14/2021 19:34:35'!
assertIsValidCreditCard: aCreditCard on: today

	(aCreditCard isExpiredOn: today) ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .! !
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:35:06' prior: 51111686!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.! !
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:36:03' prior: 51111705!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !
!Cashier methodsFor: 'nil' stamp: 'CS 6/14/2021 19:37:45'!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 19:39:02'!
Object subclass: #Cashier
	instanceVariableNames: 'salesBook1 cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 19:39:04'!
Object subclass: #Cashier
	instanceVariableNames: 'salesBook1 cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:38:57' prior: 51111724!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook

	cart := aCart.
	salesBook := aSalesBook.! !

Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 19:39:12'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:40:11'!
checkOut

	salesBook add: cart totalPrice.
	
	^ salesBook first.
	! !

!methodRemoval: Cashier #checkOutCart:payingWithCreditCard:on: stamp: 'CS 6/14/2021 19:40:17'!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook1 add: aCart totalPrice.
	
	^ salesBook1 first.
	!

!methodRemoval: Cashier #assertIsValidCart: stamp: 'CS 6/14/2021 19:40:30'!
assertIsValidCart: aCart

	aCart isEmpty ifTrue: [^Error signal: self class describeErrorCartEmpty ].
!

!methodRemoval: Cashier #assertIsValidCreditCard:on: stamp: 'CS 6/14/2021 19:40:30'!
assertIsValidCreditCard: aCreditCard on: today

	(aCreditCard isExpiredOn: today) ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .!
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:40:47' prior: 51111714!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	^ self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:42:12' prior: 51111163!
test01CheckOutWithAnEmptyCartReturnError

	| aCreditCard cart aSalesBook today |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:42:47' prior: 51111800!
test01CheckOutWithAnEmptyCartReturnError

	| aCreditCard cart aSalesBook today |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.
					self assert: aSalesBook isEmpty]
	! !

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:42:51'!
FAILURE!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:42:51'!
FAILURE!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:43:44' prior: 51111691!
assertIsValidCart: aCart

	aCart isEmpty ifTrue: [^Error signal: self describeErrorCartEmpty ].! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:43:57' prior: 51111697!
assertIsValidCreditCard: aCreditCard on: today

	(aCreditCard isExpiredOn: today) ifTrue: [^Error signal: self errorDescribeExpiredCreditCard ] .! !

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:44:04'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:44:43' prior: 51110987!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	totalAmount := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:44:52' prior: 51111861!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	totalAmount := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	self assert: totalAmount equals: 10
	! !

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:45:00'!
FAILURE!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:45:00'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:45:59' prior: 51111744!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook

	cart := aCart.
	salesBook := aSalesBook.
	
	^ self checkout! !
!Cashier methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:46:14' prior: 51111901!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook

	cart := aCart.
	salesBook := aSalesBook.
	
	^ self checkOut! !

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:46:22'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:48:53' prior: 51111878!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	self assert: totalAmount equals: 10.
	self deny: aSalesBook isEmpty.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:49:25' prior: 51111920!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 10.
	self deny: aSalesBook isEmpty.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:50:12' prior: 51111938!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: aSalesBook first equals: 10.
	self deny: aSalesBook isEmpty.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:50:56' prior: 51111957!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	! !
!Cashier methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:51:11' prior: 51111909!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook

	cart := aCart.
	salesBook := aSalesBook.! !
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:51:30' prior: 51111789!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:51:47'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:51:47'!
ERROR!
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:52:10' prior: 51112003!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	^ self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:52:16'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:52:36' prior: 51111976!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: totalAmount first equals: 	10.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:52:40'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 19:52:40'!
ERROR!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:52:40'!
FAILURE!

!testRun: #CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 19:52:40'!
ERROR!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 19:52:40'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:52:47'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:52:47'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:53:00' prior: 51112034!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	10.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) acceptingItemsOf:
		([
		(self coverAll:
			{40 to: 43}) defaultCatalog ] valueCoveringAll:
			{45 to: 58}) ] valueCoveringAll:
		{22 to: 38}.! !
!Behavior method!
defaultCatalog
	| catalog |
	(catalog _ [
	(Dictionary
		cover: (43 to: 52)
		declaredAt: (43 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (32 to: 38)
		declaredAt: (21 to: 27).
	[
	(catalog
		cover: (60 to: 66)
		declaredAt: (21 to: 27))
		at:
			([
			(self coverAll:
				{72 to: 75}) itemSellByTheStore ] valueCoveringAll:
				{77 to: 94})
		put:
			([
			(self coverAll:
				{101 to: 104}) priceForValidItem ] valueCoveringAll:
				{106 to: 122}) ] valueCoveringAll:
		{68 to: 70. 96 to: 99}.
	^ catalog
		cover: (128 to: 134)
		declaredAt: (21 to: 27).! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
priceForValidItem
	^ 10 coverAll:
		{23 to: 24}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25))
	"1 to: aQuantity do: [ :aNumber | items add: anItem ]." ] valueCoveringAll:
		{74 to: 91}.
	[
	(items
		cover: (160 to: 164)
		declaredAt: (160 to: 164))
		add:
			(anItem
				cover: (171 to: 176)
				declaredAt: (20 to: 25))
		withOccurrences:
			(aQuantity
				cover: (195 to: 203)
				declaredAt: (6 to: 14)) ] valueCoveringAll:
		{166 to: 169. 178 to: 193}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
createValidCreditCard
	| aCreditCard aExpirationDate |
	(aExpirationDate _ [
	(self coverAll:
		{78 to: 81}) createValidExpirationDate ] valueCoveringAll:
		{83 to: 107})
		cover: (59 to: 73)
		declaredAt: (39 to: 53).
	(aCreditCard _ [
	(CreditCard
		cover: (128 to: 137)
		declaredAt: (128 to: 137))
		withOwner:
			('Alan Kay' coverAll:
				{150 to: 159})
		withCreditCardNumber:
			('1234567887654321' coverAll:
				{183 to: 200})
		withExpirationDate:
			(aExpirationDate
				cover: (222 to: 236)
				declaredAt: (39 to: 53)) ] valueCoveringAll:
		{139 to: 148. 161 to: 181. 202 to: 220})
		cover: (113 to: 123)
		declaredAt: (27 to: 37).
	^ aCreditCard
		cover: (244 to: 254)
		declaredAt: (27 to: 37).! !
!Behavior method!
createValidExpirationDate
	^ [
	([
	(today
		cover: (31 to: 35)
		declaredAt: (31 to: 35)) monthOfYear ] valueCoveringAll:
		{37 to: 47}) next ] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
withOwner: aOwner withCreditCardNumber: aCreditCardNumber withExpirationDate: aExpirationDate
	^ [
	([
	(self coverAll:
		{99 to: 102}) new ] valueCoveringAll:
		{104 to: 106})
		initializeWithOwner:
			(aOwner
				cover: (129 to: 134)
				declaredAt: (12 to: 17))
		withCreditCardNumber:
			(aCreditCardNumber
				cover: (158 to: 174)
				declaredAt: (41 to: 57))
		withExpirationDate:
			(aExpirationDate
				cover: (196 to: 210)
				declaredAt: (79 to: 93)) ] valueCoveringAll:
		{108 to: 127. 136 to: 156. 176 to: 194}.! !
!Behavior method!
initializeWithOwner: aOwner withCreditCardNumber: aCreditCardNumber withExpirationDate: aExpirationDate
	[
	(self coverAll:
		{107 to: 110}) validateName:
		(aOwner
			cover: (126 to: 131)
			declaredAt: (22 to: 27)) ] valueCoveringAll:
		{112 to: 124}.
	[
	(self coverAll:
		{135 to: 138}) validateCreditCardNumber:
		(aCreditCardNumber
			cover: (166 to: 182)
			declaredAt: (51 to: 67)) ] valueCoveringAll:
		{140 to: 164}.
	(owner _ aOwner
		cover: (197 to: 202)
		declaredAt: (22 to: 27))
		cover: (188 to: 192)
		declaredAt: (188 to: 192).
	(number _ aCreditCardNumber
		cover: (217 to: 233)
		declaredAt: (51 to: 67))
		cover: (207 to: 212)
		declaredAt: (207 to: 212).
	(expirationDate _ aExpirationDate
		cover: (257 to: 271)
		declaredAt: (89 to: 103))
		cover: (238 to: 251)
		declaredAt: (238 to: 251).! !
!Behavior method!
validateName: aOwner
	[
	([
	(aOwner
		cover: (24 to: 29)
		declaredAt: (15 to: 20)) isEmpty ] valueCoveringAll:
		{31 to: 37}) ifTrue: [ ^ [
		(Error
			cover: (49 to: 53)
			declaredAt: (49 to: 53)) signal:
			([
			([
			(self coverAll:
				{63 to: 66}) class ] valueCoveringAll:
				{68 to: 72}) errorDescribeEmptyName ] valueCoveringAll:
				{74 to: 95}) ] valueCoveringAll:
			{55 to: 61} ]] valueCoveringAll:
		{39 to: 45}.! !
!Behavior method!
validateCreditCardNumber: aCreditCardNumber
	self coverAll:
		{103 to: 106}.
	[
	([
	([
	(aCreditCardNumber
		cover: (49 to: 65)
		declaredAt: (27 to: 43)) size ] valueCoveringAll:
		{67 to: 70}) ~=
		(16 coverAll:
			{75 to: 76}) ] valueCoveringAll:
		{72 to: 73}) ifTrue: [ ^ [
		(Error
			cover: (89 to: 93)
			declaredAt: (89 to: 93)) signal:
			([
			([ self class ] valueCoveringAll:
				{108 to: 112}) errorDescribeinvalidCreditCardNumber ] valueCoveringAll:
				{114 to: 149}) ] valueCoveringAll:
			{95 to: 101} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
today
	^ today
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook
	[
	(self coverAll:
		{79 to: 82}) assertIsValidCart:
		(aCart
			cover: (103 to: 107)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{84 to: 101}.
	[
	(self coverAll:
		{111 to: 114})
		assertIsValidCreditCard:
			(aCreditCard
				cover: (141 to: 151)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (157 to: 161)
				declaredAt: (45 to: 49)) ] valueCoveringAll:
		{116 to: 139. 153 to: 155}.
	^ [
	([
	(self coverAll:
		{169 to: 172}) new ] valueCoveringAll:
		{174 to: 176})
		initializetoCheckout:
			(aCart
				cover: (200 to: 204)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (216 to: 226)
				declaredAt: (29 to: 39))
		registeringOn:
			(aSalesBook
				cover: (243 to: 252)
				declaredAt: (66 to: 75)) ] valueCoveringAll:
		{178 to: 198. 206 to: 214. 228 to: 241}.! !
!Behavior method!
assertIsValidCart: aCart
	[
	([
	(aCart
		cover: (28 to: 32)
		declaredAt: (20 to: 24)) isEmpty ] valueCoveringAll:
		{34 to: 40}) ifTrue: [ ^ [
		(Error
			cover: (52 to: 56)
			declaredAt: (52 to: 56)) signal:
			([
			(self coverAll:
				{66 to: 69}) describeErrorCartEmpty ] valueCoveringAll:
				{71 to: 92}) ] valueCoveringAll:
			{58 to: 64} ]] valueCoveringAll:
		{42 to: 48}.! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !
!Behavior method!
assertIsValidCreditCard: aCreditCard on: today
	[
	([
	(aCreditCard
		cover: (51 to: 61)
		declaredAt: (26 to: 36)) isExpiredOn:
		(today
			cover: (76 to: 80)
			declaredAt: (42 to: 46)) ] valueCoveringAll:
		{63 to: 74}) ifTrue: [ ^ [
		(Error
			cover: (93 to: 97)
			declaredAt: (93 to: 97)) signal:
			([
			(self coverAll:
				{107 to: 110}) errorDescribeExpiredCreditCard ] valueCoveringAll:
				{112 to: 141}) ] valueCoveringAll:
			{99 to: 105} ]] valueCoveringAll:
		{83 to: 89}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	(expirationDate
		cover: (24 to: 37)
		declaredAt: (24 to: 37)) <
		([
		(aDate
			cover: (42 to: 46)
			declaredAt: (14 to: 18)) monthOfYear ] valueCoveringAll:
			{48 to: 58}) ] valueCoveringAll:
		{39 to: 39}.! !
!Behavior method!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook
	(cart _ aCart
		cover: (87 to: 91)
		declaredAt: (23 to: 27))
		cover: (79 to: 82)
		declaredAt: (79 to: 82).
	(salesBook _ aSalesBook
		cover: (108 to: 117)
		declaredAt: (66 to: 75))
		cover: (95 to: 103)
		declaredAt: (95 to: 103).! !
!Behavior method!
checkOut
	[
	(salesBook
		cover: (12 to: 20)
		declaredAt: (12 to: 20)) add:
		([
		(cart
			cover: (27 to: 30)
			declaredAt: (27 to: 30)) totalPrice ] valueCoveringAll:
			{32 to: 41}) ] valueCoveringAll:
		{22 to: 25}.
	^ [
	(salesBook
		cover: (49 to: 57)
		declaredAt: (12 to: 20)) first ] valueCoveringAll:
		{59 to: 63}.! !
!Behavior method!
totalPrice
	| totalCartPrice |
	(totalCartPrice _ [
	(items
		cover: (56 to: 60)
		declaredAt: (56 to: 60))
		sum: [ :cartItem |
			[
			(catalog
				cover: (82 to: 88)
				declaredAt: (82 to: 88)) at:
				(cartItem
					cover: (94 to: 101)
					declaredAt: (70 to: 77)) ] valueCoveringAll:
				{90 to: 92} ]
		ifEmpty: [
			0 coverAll:
				{117 to: 117} ]] valueCoveringAll:
		{62 to: 65. 107 to: 114})
		cover: (38 to: 51)
		declaredAt: (16 to: 29).
	^ totalCartPrice
		cover: (126 to: 139)
		declaredAt: (16 to: 29).! !

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:53:07'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:53:36' prior: 51111003!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	20.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 19:53:40'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:54:07' prior: 51111179!
test04InvalidCreditCardNoneExpired

	|cart aCreditCard today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:54:17'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:54:31' prior: 51112492!
test04InvalidCreditCardNoneExpired

	|cart aCreditCard today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:54:34'!
PASSED!

!methodRemoval: CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 19:54:49'!
test05AssertCheckOutList

	|cart cashier aCreditCard totalAmount today |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert: totalAmount equals: 5
	
	
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:54:52'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 19:54:53'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 19:54:53'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 19:54:53'!
PASSED!
!CreditCard methodsFor: 'validations' stamp: 'CS 6/14/2021 19:57:02' prior: 51108371!
validateCreditCardNumber: aCreditCardNumber.

	(aCreditCardNumber numberOfDigitsInBase: 16) ifTrue: [^Error signal: self class errorDescribeinvalidCreditCardNumber]! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:57:18' prior: 51110346!
test01InvalideName

	|  aExpirationDate|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	
	self should: [CreditCard withOwner: '' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeEmptyName . ]
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:57:24' prior: 51110360!
test02ValideCreditCardNumber

	| aExpirationDate |
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	
	self should: [CreditCard withOwner: 'Alan kay' withCreditCardNumber: 12345678 withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeinvalidCreditCardNumber ]
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:57:32' prior: 51110375!
test03ValideCreditwithGoodsParameters

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := 1234567887654321.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:57:47' prior: 51110314!
createInvalidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpiredDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:57:53' prior: 51110303!
createValidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createValidExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 19:57:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 19:57:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 19:57:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 19:57:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 19:57:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 19:57:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 19:57:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 19:57:58'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 19:57:58'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 19:57:58'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 19:57:58'!
ERROR!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 19:57:58'!
ERROR!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 19:57:58'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 19:57:58'!
FAILURE!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 19:57:58'!
ERROR!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 19:58:11'!
FAILURE!

aCreditCardNumber numberOfDigitsInBase: 16!
!CreditCard methodsFor: 'validations' stamp: 'CS 6/14/2021 20:00:17' prior: 51112600!
validateCreditCardNumber: aCreditCardNumber.

	((aCreditCardNumber numberOfDigitsInBase: 10) ~= 16) ifTrue: [^Error signal: self class errorDescribeinvalidCreditCardNumber]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 20:00:24'!
PASSED!

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'CS 6/14/2021 20:01:27'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorTest category: 'TusLibros' stamp: 'CS 6/14/2021 20:01:44'!
TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----STARTUP---- (14 June 2021 20:48:33) as /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/linux64/CuisUniversity-4532.image!

!Cashier methodsFor: 'validations' stamp: 'CS 6/14/2021 18:35:19'!
assertIsValidCreditCard: aCreditCard on: today

	(aCreditCard isExpiredOn: today) ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 18:37:50'!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard.

	^ aCart totalPrice
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:37:50' prior: 51110575!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:37:50' prior: 51110589!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert:totalAmount  equals: 20
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:37:50' prior: 51110495!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:37:50' prior: 51110654!
test04InvalidCreditCardNoneExpired

	|cart cashier aCreditCard |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	cashier := Cashier new.
	
	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !

!methodRemoval: Cashier #checkOutCart:payingWithCreditCard: stamp: 'CS 6/14/2021 20:48:36'!
checkOutCart: aCart payingWithCreditCard: aCreditCard

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard.

	^ aCart totalPrice
	!

!methodRemoval: Cashier #assertIsValidCreditCard: stamp: 'CS 6/14/2021 20:48:36'!
assertIsValidCreditCard: aCreditCard

	| today expirationDate |
	
	expirationDate := aCreditCard expirationDate.
	
	today := DateAndTime today.
	((expirationDate year < today yearNumber) 
	or:[(expirationDate year = today yearNumber) and: [expirationDate month < today monthIndex]]) 
	
		ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 18:39:56' prior: 51112821!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	^ aCart totalPrice
	! !
!CreditCard methodsFor: 'nil' stamp: 'CS 6/14/2021 18:40:50'!
isExpiredOn: aDate

	^ expirationDate < aDate monthOfYear.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:42:36' prior: 51112924!
isExpiredOn: aDate

	^ expirationDate < aDate monthOfYear.
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 18:43:14' prior: 51112830!
test02CheckOutACartWithOneProduct

	|cart cashier aCreditCard totalAmount today |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 18:44:26' prior: 51112845!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount today |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new .
	today := cartObjectTest today.

	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert:totalAmount  equals: 20
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 18:44:33' prior: 51112877!
test04InvalidCreditCardNoneExpired

	|cart cashier aCreditCard today |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	cashier := Cashier new.
		today := cartObjectTest today.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !

!classDefinition: #EditorialTestObject category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'dateToday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!EditorialTestObject methodsFor: 'nil' stamp: 'CS 6/14/2021 18:46:36' overrides: 16896425!
initialize

	dateToday := DateAndTime now! !
!EditorialTestObject methodsFor: 'nil' stamp: 'CS 6/14/2021 18:48:19'!
today

	^ dateToday ! !
!EditorialTestObject methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 18:48:21' prior: 51112996!
today

	^ dateToday! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:00:43' prior: 51112861!
test01CheckOutWithAnEmptyCartReturnError

	| cashier aCreditCard cart |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	cashier := Cashier new.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: cartObjectTest today.]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:01:02' prior: 51112966!
test04InvalidCreditCardNoneExpired

	|cart cashier aCreditCard today |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	cashier := Cashier new.
	today := cartObjectTest today.

	self should: [cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:01:55' prior: 51112929!
isExpiredOn: aDate

	^ expirationDate < (aDate monthOfYear).
	! !
!EditorialTestObject methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:06:04' prior: 51112992 overrides: 16896425!
initialize

	dateToday := FixedGregorianDate today! !
!EditorialTestObject methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:06:37' prior: 51113045 overrides: 16896425!
initialize

	dateToday := FixedGregorianDate today! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:13:09' prior: 51110285!
createExpiredDate

	^ dateToday monthOfYear previous.! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:19:31' prior: 51112916!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	^ aCart totalPrice
	! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:20:10' prior: 51110294!
createValidExpirationDate

	^ dateToday monthOfYear previous.! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:20:16' prior: 51113070!
createValidExpirationDate

	^ dateToday monthOfYear next.! !

!classDefinition: #EditorialTestObject category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'dateToday today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!EditorialTestObject methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:20:40' prior: 51113051 overrides: 16896425!
initialize

	today := FixedGregorianDate today! !

!classDefinition: #EditorialTestObject category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #EditorialTestObject category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!EditorialTestObject methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:20:56' prior: 51113000!
today

	^ today! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:21:16' prior: 51113056!
createExpiredDate

	^ today monthOfYear previous.! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:21:22' prior: 51113076!
createValidExpirationDate

	^ today monthOfYear next.! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:24:45' prior: 51113061!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	| salesBook |
	salesBook := OrderedCollection new.
	
	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook add: aCart totalPrice.
	
	^ salesBook first.
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:24:50' prior: 51113124!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	| salesBook |
	
	salesBook := OrderedCollection new.
	
	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook add: aCart totalPrice.
	
	^ salesBook first.
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:24:50' prior: 51113135!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	| salesBook |

	salesBook := OrderedCollection new.
	
	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook add: aCart totalPrice.
	
	^ salesBook first.
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:26:37' prior: 51108507!
test05AssertCheckOutList

	|cart cashier  aExpirationDate aCreditCard|
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	cart add: 2 of: 'Valid book 2'.
	
	aExpirationDate := GregorianMonthOfYear  year: 2022 month: 1. 
	cashier := Cashier new . 
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: '1111111111111111' withExpirationDate: aExpirationDate.
	
	cashier checkOutCart: cart payingWithCreditCard: aCreditCard.
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:27:31' prior: 51113157!
test05AssertCheckOutList

	|cart cashier aCreditCard totalAmount today |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert: totalAmount equals: 5
	
	
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:30:04' prior: 51113146!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	| salesBook |
	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook add: aCart totalPrice.
	
	^ salesBook first.
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #Cashier
	instanceVariableNames: 'salesBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:30:33' prior: 51113191!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook1 add: aCart totalPrice.
	
	^ salesBook1 first.
	! !
!Cashier class methodsFor: 'nil' stamp: 'CS 6/14/2021 19:33:48'!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook
! !
!Cashier class methodsFor: 'nil' stamp: 'CS 6/14/2021 19:34:18'!
assertIsValidCart: aCart

	aCart isEmpty ifTrue: [^Error signal: self class describeErrorCartEmpty ].! !
!Cashier class methodsFor: 'nil' stamp: 'CS 6/14/2021 19:34:35'!
assertIsValidCreditCard: aCreditCard on: today

	(aCreditCard isExpiredOn: today) ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .! !
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:35:06' prior: 51113217!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.! !
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:36:03' prior: 51113236!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !
!Cashier methodsFor: 'nil' stamp: 'CS 6/14/2021 19:37:45'!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #Cashier
	instanceVariableNames: 'salesBook1 cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #Cashier
	instanceVariableNames: 'salesBook1 cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:38:57' prior: 51113255!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook

	cart := aCart.
	salesBook := aSalesBook.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 19:40:11'!
checkOut

	salesBook add: cart totalPrice.
	
	^ salesBook first.
	! !

!methodRemoval: Cashier #checkOutCart:payingWithCreditCard:on: stamp: 'CS 6/14/2021 20:48:37'!
checkOutCart: aCart payingWithCreditCard: aCreditCard on: today 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: today.

	salesBook1 add: aCart totalPrice.
	
	^ salesBook1 first.
	!

!methodRemoval: Cashier #assertIsValidCart: stamp: 'CS 6/14/2021 20:48:37'!
assertIsValidCart: aCart

	aCart isEmpty ifTrue: [^Error signal: self class describeErrorCartEmpty ].
!

!methodRemoval: Cashier #assertIsValidCreditCard:on: stamp: 'CS 6/14/2021 20:48:37'!
assertIsValidCreditCard: aCreditCard on: today

	(aCreditCard isExpiredOn: today) ifTrue: [^Error signal: self class errorDescribeExpiredCreditCard ] .!
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:40:47' prior: 51113245!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	^ self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:42:12' prior: 51113004!
test01CheckOutWithAnEmptyCartReturnError

	| aCreditCard cart aSalesBook today |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.]
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:42:47' prior: 51113334!
test01CheckOutWithAnEmptyCartReturnError

	| aCreditCard cart aSalesBook today |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.
					self assert: aSalesBook isEmpty]
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:43:44' prior: 51113222!
assertIsValidCart: aCart

	aCart isEmpty ifTrue: [^Error signal: self describeErrorCartEmpty ].! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 19:43:57' prior: 51113228!
assertIsValidCreditCard: aCreditCard on: today

	(aCreditCard isExpiredOn: today) ifTrue: [^Error signal: self errorDescribeExpiredCreditCard ] .! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:44:43' prior: 51112934!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	totalAmount := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.	
	self assert: totalAmount equals: 10
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:44:52' prior: 51113385!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	totalAmount := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	self assert: totalAmount equals: 10
	! !
!Cashier methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:45:59' prior: 51113275!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook

	cart := aCart.
	salesBook := aSalesBook.
	
	^ self checkout! !
!Cashier methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:46:14' prior: 51113419!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook

	cart := aCart.
	salesBook := aSalesBook.
	
	^ self checkOut! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:48:53' prior: 51113402!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	self assert: totalAmount equals: 10.
	self deny: aSalesBook isEmpty.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:49:25' prior: 51113434!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 10.
	self deny: aSalesBook isEmpty.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:50:12' prior: 51113452!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: aSalesBook first equals: 10.
	self deny: aSalesBook isEmpty.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:50:56' prior: 51113471!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	! !
!Cashier methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:51:11' prior: 51113427!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook

	cart := aCart.
	salesBook := aSalesBook.! !
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:51:30' prior: 51113323!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 19:52:10' prior: 51113517!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	^ self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:52:36' prior: 51113490!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: totalAmount first equals: 	10.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:53:00' prior: 51113539!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	10.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:53:36' prior: 51112950!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	20.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:54:07' prior: 51113020!
test04InvalidCreditCardNoneExpired

	|cart aCreditCard today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard . ]
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:54:31' prior: 51113602!
test04InvalidCreditCardNoneExpired

	|cart aCreditCard today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !

!methodRemoval: CashierTest #test05AssertCheckOutList stamp: 'CS 6/14/2021 20:48:37'!
test05AssertCheckOutList

	|cart cashier aCreditCard totalAmount today |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	cashier := Cashier new . 
	
	totalAmount := cashier checkOutCart: cart payingWithCreditCard: aCreditCard on: today.
	
	self assert: totalAmount equals: 5
	
	
	!
!CreditCard methodsFor: 'validations' stamp: 'CS 6/14/2021 19:57:02' prior: 51108371!
validateCreditCardNumber: aCreditCardNumber.

	(aCreditCardNumber numberOfDigitsInBase: 16) ifTrue: [^Error signal: self class errorDescribeinvalidCreditCardNumber]! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:57:18' prior: 51110346!
test01InvalideName

	|  aExpirationDate|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	
	self should: [CreditCard withOwner: '' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeEmptyName . ]
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:57:24' prior: 51110360!
test02ValideCreditCardNumber

	| aExpirationDate |
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	
	self should: [CreditCard withOwner: 'Alan kay' withCreditCardNumber: 12345678 withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeinvalidCreditCardNumber ]
	
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/14/2021 19:57:32' prior: 51110375!
test03ValideCreditwithGoodsParameters

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := 1234567887654321.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:57:47' prior: 51110314!
createInvalidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpiredDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/14/2021 19:57:53' prior: 51110303!
createValidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createValidExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!CreditCard methodsFor: 'validations' stamp: 'CS 6/14/2021 20:00:17' prior: 51113657!
validateCreditCardNumber: aCreditCardNumber.

	((aCreditCardNumber numberOfDigitsInBase: 10) ~= 16) ifTrue: [^Error signal: self class errorDescribeinvalidCreditCardNumber]! !

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorTest category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorTest category: 'TusLibros' stamp: 'CS 6/14/2021 20:48:37'!
TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessor stamp: 'CS 6/14/2021 20:48:59'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #EditorialTestObject stamp: 'CS 6/14/2021 20:48:59'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'CS 6/14/2021 20:49:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'owner number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'CS 6/14/2021 20:49:00'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'CS 6/14/2021 20:49:00'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorTest stamp: 'CS 6/14/2021 20:49:01'!
TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'CS 6/14/2021 20:49:01'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'CS 6/14/2021 20:49:02'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'CS 6/14/2021 20:49:02'!
TestCase subclass: #CartTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/linux64/TusLibros.st----!
!CashierTest methodsFor: 'nil' stamp: 'CS 6/14/2021 20:51:59'!
test05 

   " |mp creditCard cart aSalesBook|

    cart := cartObjectTest createCart.
    creditCard := cartObjectTest createACreditCardWithoutName.

    mp := MP validareCreditCard: creditCard totalToPay: 10. 

    aSalesBook := OrderedCollection new.

     self should: [Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = MP describeErrorCreditCardNameIsEmpty.
                    self assert: aSalesBook isEmpty]"! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 20:52:46'!
test05TheCreditCardHasNotCredit

   " |mp creditCard cart aSalesBook|

    cart := cartObjectTest createCart.
    creditCard := cartObjectTest createACreditCardWithoutName.

    mp := MP validareCreditCard: creditCard totalToPay: 10. 

    aSalesBook := OrderedCollection new.

     self should: [Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = MP describeErrorCreditCardNameIsEmpty.
                    self assert: aSalesBook isEmpty]"! !

!methodRemoval: CashierTest #test05 stamp: 'CS 6/14/2021 20:52:53'!
test05 

   " |mp creditCard cart aSalesBook|

    cart := cartObjectTest createCart.
    creditCard := cartObjectTest createACreditCardWithoutName.

    mp := MP validareCreditCard: creditCard totalToPay: 10. 

    aSalesBook := OrderedCollection new.

     self should: [Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = MP describeErrorCreditCardNameIsEmpty.
                    self assert: aSalesBook isEmpty]"!

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'CS 6/14/2021 20:53:37'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorTest category: 'TusLibros' stamp: 'CS 6/14/2021 20:53:55'!
TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorTest category: 'TusLibros' stamp: 'CS 6/14/2021 20:54:01'!
TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 20:58:01'!
test05TheCreditCardHasNoCredit

   |mp creditCard cart aSalesBook|

    cart := cartObjectTest createCart.
    creditCard := cartObjectTest.

    mp := MerchantProcessor new. 

    aSalesBook := OrderedCollection new.

     self should: [Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    self assert: aSalesBook isEmpty]! !

!methodRemoval: CashierTest #test05TheCreditCardHasNotCredit stamp: 'CS 6/14/2021 20:58:42'!
test05TheCreditCardHasNotCredit

   " |mp creditCard cart aSalesBook|

    cart := cartObjectTest createCart.
    creditCard := cartObjectTest createACreditCardWithoutName.

    mp := MP validareCreditCard: creditCard totalToPay: 10. 

    aSalesBook := OrderedCollection new.

     self should: [Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = MP describeErrorCreditCardNameIsEmpty.
                    self assert: aSalesBook isEmpty]"!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 20:58:50' prior: 51114489!
test05TheCreditCardHasNoCredit

   |mp creditCard cart aSalesBook|

    cart := cartObjectTest createCart.
    creditCard := cartObjectTest createValidCreditCard.

    mp := MerchantProcessor new. 

    aSalesBook := OrderedCollection new.

     self should: [Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 20:59:03' prior: 51114529!
test05TheCreditCardHasNoCredit

   | creditCard cart aSalesBook mp |

    cart := cartObjectTest createCart.
    creditCard := cartObjectTest createValidCreditCard.

    mp := MerchantProcessor new. 

    aSalesBook := OrderedCollection new.

     self should: [Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/14/2021 20:59:50' prior: 51114549!
test05TheCreditCardHasNoCredit

   | creditCard cart aSalesBook mp |

    cart := cartObjectTest createCart.
    creditCard := cartObjectTest createValidCreditCard.

    mp := MerchantProcessor new. 

    aSalesBook := OrderedCollection new.

     self should: [Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: mp]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    self assert: aSalesBook isEmpty]! !
!Cashier class methodsFor: 'initialization' stamp: 'CS 6/14/2021 21:00:24'!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook using: mp 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	^ self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 21:00:24' prior: 51113953!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: mp.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	10.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 21:00:24' prior: 51113994!
test04InvalidCreditCardNoneExpired

	|cart aCreditCard today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: mp]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 21:00:24' prior: 51113973!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: mp.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	20.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 21:00:24' prior: 51113935!
test01CheckOutWithAnEmptyCartReturnError

	| aCreditCard cart aSalesBook today |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: mp]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.
					self assert: aSalesBook isEmpty]
	! !

!methodRemoval: Cashier class #toCheckout:charging:on:registeringOn: stamp: 'CS 6/14/2021 21:00:24'!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	^ self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook!
!Cashier methodsFor: 'initialization' stamp: 'CS 6/14/2021 21:01:43'!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook using: mp 

	cart := aCart.
	salesBook := aSalesBook.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CS 6/14/2021 21:01:43' prior: 51114589!
toCheckout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook using: mp 

	self assertIsValidCart: aCart.
	self assertIsValidCreditCard: aCreditCard on: aDate.
	
	^ self new initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook using: mp! !

!methodRemoval: Cashier #initializetoCheckout:charging:registeringOn: stamp: 'CS 6/14/2021 21:01:43'!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook

	cart := aCart.
	salesBook := aSalesBook.!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 21:02:18'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'CS 6/14/2021 21:02:15' prior: 51114695!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook using: mp 

	cart := aCart.
	salesBook := aSalesBook.
	merchantProcessor := mp.! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 21:05:09' prior: 51114177!
checkOut

	self assertIsCreditCardHasCredit.
	salesBook add: cart totalPrice.
	
	^ salesBook first.
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'CS 6/14/2021 21:05:33'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'CS 6/14/2021 21:05:31' prior: 51114729!
initializetoCheckout: aCart charging: aCreditCard registeringOn: aSalesBook using: mp 

	cart := aCart.
	salesBook := aSalesBook.
	creditCard := aCreditCard.
	merchantProcessor := mp.! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/14/2021 21:06:27' prior: 51114737!
checkOut

	merchantProcessor assertIsCreditCardHasCredit.
	salesBook add: cart totalPrice.
	
	^ salesBook first.
	! !
!MerchantProcessor methodsFor: 'nil' stamp: 'CS 6/14/2021 21:12:29'!
assertIsCreditCardHasCredit

	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/14/2021 21:41:34'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/14/2021 21:41:34'!
ERROR!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CashierTest #test05TheCreditCardHasNoCredit stamp: 'CS 6/14/2021 21:41:34'!
ERROR!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/14/2021 21:41:34'!
PASSED!

----QUIT----(15 June 2021 16:55:52) CuisUniversity-4532.image priorSource: 24933080!

----STARTUP---- (16 June 2021 15:52:44) as /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/linux64/CuisUniversity-4532.image!


!classRemoval: #MerchantProcessor stamp: 'CS 6/16/2021 15:52:49'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #EditorialTestObject stamp: 'CS 6/16/2021 15:52:50'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'CS 6/16/2021 15:52:50'!
Object subclass: #CreditCard
	instanceVariableNames: 'owner number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'CS 6/16/2021 15:52:51'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'CS 6/16/2021 15:52:51'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorTest stamp: 'CS 6/16/2021 15:52:52'!
TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'CS 6/16/2021 15:52:52'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'CS 6/16/2021 15:52:53'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'CS 6/16/2021 15:52:53'!
TestCase subclass: #CartTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/dell/Descargas/TusLibrosCONTODALOCO.st----!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:00:27'!
test01CanNotCheckoutanEmptyCart

	| aCreditCard cart aSalesBook today merchantProcessor|
	
	cart := cartObjectTest createCart.
	merchantProcessor := MerchantProcessor new.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.
					self assert: aSalesBook isEmpty]
	! !

!methodRemoval: CashierTest #test01CheckOutWithAnEmptyCartReturnError stamp: 'CS 6/16/2021 16:00:31'!
test01CheckOutWithAnEmptyCartReturnError

	| aCreditCard cart aSalesBook today merchantProcessor|
	
	cart := cartObjectTest createCart.
	merchantProcessor := MerchantProcessor new.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.
					self assert: aSalesBook isEmpty]
	!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:01:04'!
test02CheckOutACartWithOneProductAndTheTotalIsCorrect

	|cart aCreditCard totalAmount today aSalesBook cashier merchantProcessor|
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	
	merchantProcessor := MerchantProcessor new.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	10.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	! !

!methodRemoval: CashierTest #test02CheckOutACartWithOneProduct stamp: 'CS 6/16/2021 16:01:59'!
test02CheckOutACartWithOneProduct

	|cart aCreditCard totalAmount today aSalesBook cashier merchantProcessor|
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	
	merchantProcessor := MerchantProcessor new.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	10.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:03:15'!
test02CheckOutACartWithOneItemAndTheTotalIsCorrect

	|cart aCreditCard totalAmount today aSalesBook cashier merchantProcessor|
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	
	merchantProcessor := MerchantProcessor new.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	10.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	! !

!methodRemoval: CashierTest #test02CheckOutACartWithOneProductAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:03:20'!
test02CheckOutACartWithOneProductAndTheTotalIsCorrect

	|cart aCreditCard totalAmount today aSalesBook cashier merchantProcessor|
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	
	merchantProcessor := MerchantProcessor new.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	10.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:03:55'!
test03CheckOutACartWithManyItemsProduct

	|cart cashier aCreditCard totalAmount today aSalesBook merchantProcessor|
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	
	merchantProcessor := MerchantProcessor new.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.
	
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	20.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:04:07'!
test03CheckOutACartWithManyItemsAndTheTotalIsCorrect

	|cart cashier aCreditCard totalAmount today aSalesBook merchantProcessor|
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	
	merchantProcessor := MerchantProcessor new.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.
	
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	20.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !

!methodRemoval: CashierTest #test03CheckOutACartWithManyItemsProduct stamp: 'CS 6/16/2021 16:04:11'!
test03CheckOutACartWithManyItemsProduct

	|cart cashier aCreditCard totalAmount today aSalesBook merchantProcessor|
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	
	merchantProcessor := MerchantProcessor new.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.
	
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	20.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	!

!methodRemoval: CashierTest #test03CheckOutACartWithTwoEqualsProduct stamp: 'CS 6/16/2021 16:04:14'!
test03CheckOutACartWithTwoEqualsProduct

	|cart cashier aCreditCard totalAmount today aSalesBook merchantProcessor|
	
	cart := cartObjectTest createCart.
	cart add: 2 of: cartObjectTest itemSellByTheStore.
	
	merchantProcessor := MerchantProcessor new.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.
	
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	20.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:04:25' prior: 51115831!
test03CheckOutACartWithManyItemsAndTheTotalIsCorrect

	|cart cashier aCreditCard totalAmount today aSalesBook merchantProcessor|
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	
	merchantProcessor := MerchantProcessor new.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.
	
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CashierTest #test05TheCreditCardHasNoCredit stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CashierTest #test06TheCreditCardIsStolen stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CashierTest #test07TheCreditCardIsFake stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 16:04:28'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CashierTest #test05TheCreditCardHasNoCredit stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CashierTest #test06TheCreditCardIsStolen stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CashierTest #test07TheCreditCardIsFake stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 16:06:36'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 16:06:36'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:07:27' prior: 51115058!
test04InvalidCreditCardNoneExpired

	|cart aCreditCard today aSalesBook merchantProcessor |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessor new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:07:59'!
test04CanNotCheckoutWithAnExpiredCreditCart

	|cart aCreditCard today aSalesBook merchantProcessor |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessor new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !

!methodRemoval: CashierTest #test04InvalidCreditCardNoneExpired stamp: 'CS 6/16/2021 16:08:02'!
test04InvalidCreditCardNoneExpired

	|cart aCreditCard today aSalesBook merchantProcessor |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createInvalidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessor new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	!
!EditorialTestObject methodsFor: 'create instances' stamp: 'CS 6/16/2021 16:09:20'!
createExpiredCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpiredDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate.
	
	^ aCreditCard! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/16/2021 16:09:20' prior: 51116065!
test04CanNotCheckoutWithAnExpiredCreditCart

	|cart aCreditCard today aSalesBook merchantProcessor |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createExpiredCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	merchantProcessor := MerchantProcessor new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: merchantProcessor]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !

!methodRemoval: EditorialTestObject #createInvalidCreditCard stamp: 'CS 6/16/2021 16:09:20'!
createInvalidCreditCard

	| aCreditCard aExpirationDate |

	aExpirationDate := self createExpiredDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate.
	
	^ aCreditCard!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CashierTest #test05TheCreditCardHasNoCredit stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CashierTest #test06TheCreditCardIsStolen stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CashierTest #test07TheCreditCardIsFake stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 16:09:54'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 16:09:54'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:12:52'!
test06CanNotCheckoutWhenTheCreditCardIsStolen

   | creditCard cart aSalesBook merchantProcessor cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	
   	merchantProcessor := MerchantProcessor new. 
	
    	creditCard := cartObjectTest createACreditCardWhereMerchanProcessorReportsThatIsStolen: merchantProcessor.

    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: merchantProcessor.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsStolen.
                    self assert: aSalesBook isEmpty]! !

!methodRemoval: CashierTest #test06TheCreditCardIsStolen stamp: 'CS 6/16/2021 16:12:57'!
test06TheCreditCardIsStolen

   | creditCard cart aSalesBook merchantProcessor cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	
   	merchantProcessor := MerchantProcessor new. 
	
    	creditCard := cartObjectTest createACreditCardWhereMerchanProcessorReportsThatIsStolen: merchantProcessor.

    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: merchantProcessor.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsStolen.
                    self assert: aSalesBook isEmpty]!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:13:28'!
test05CanNotCheckoutWhenTheCreditCartHasNoCredit

   | creditCard cart aSalesBook merchantProcessor cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	
   	merchantProcessor := MerchantProcessor new. 
	
    	creditCard := cartObjectTest createACreditCardWhereMerchanProcessorReportsThatHasNoCredit: merchantProcessor.

    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: merchantProcessor.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    self assert: aSalesBook isEmpty]! !

!methodRemoval: CashierTest #test05TheCreditCardHasNoCredit stamp: 'CS 6/16/2021 16:13:32'!
test05TheCreditCardHasNoCredit

   | creditCard cart aSalesBook merchantProcessor cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	
   	merchantProcessor := MerchantProcessor new. 
	
    	creditCard := cartObjectTest createACreditCardWhereMerchanProcessorReportsThatHasNoCredit: merchantProcessor.

    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: merchantProcessor.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    self assert: aSalesBook isEmpty]!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 16:13:43'!
test07CanNotCheckoutWhenTheCreditCardIsFake

   | creditCard cart aSalesBook merchantProcessor cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	
   	merchantProcessor := MerchantProcessor new. 
	
    	creditCard := cartObjectTest createACreditCardWhereMerchanProcessorReportsThatIsFake: merchantProcessor.

    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: merchantProcessor.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsFake.
                    self assert: aSalesBook isEmpty]! !

!methodRemoval: CashierTest #test07TheCreditCardIsFake stamp: 'CS 6/16/2021 16:13:47'!
test07TheCreditCardIsFake

   | creditCard cart aSalesBook merchantProcessor cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	
   	merchantProcessor := MerchantProcessor new. 
	
    	creditCard := cartObjectTest createACreditCardWhereMerchanProcessorReportsThatIsFake: merchantProcessor.

    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: merchantProcessor.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsFake.
                    self assert: aSalesBook isEmpty]!
!CashierTest methodsFor: 'initialization' stamp: 'CS 6/16/2021 16:16:30' overrides: 16927572!
setUp

	cartObjectTest := EditorialTestObject new ! !

!methodRemoval: CashierTest #initialize stamp: 'CS 6/16/2021 16:16:54'!
initialize

	cartObjectTest := EditorialTestObject new !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 16:16:57'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 16:16:57'!
PASSED!
!CartTest methodsFor: 'initialization' stamp: 'CS 6/16/2021 16:17:26' overrides: 16927572!
setUp

	cartObjectTest := EditorialTestObject new ! !

!methodRemoval: CartTest #initialize stamp: 'CS 6/16/2021 16:17:30'!
initialize

	cartObjectTest := EditorialTestObject new !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 16:17:50'!
PASSED!

!classRemoval: #MerchantProcessorTest stamp: 'CS 6/16/2021 16:17:59'!
TestCase subclass: #MerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 16:20:18' prior: 51115413!
describeErrorCreditCardHasNoCredit

	^ 'Error la tarjeta no tiene credito por lo que no se realizo la compra'! !
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 16:20:22' prior: 51115370!
describeErrorCreditCardIsFake

	^ 'Error No es posible realizar la venta pues la tarjeta es falsa'! !
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 16:20:27' prior: 51116519!
describeErrorCreditCardIsFake

	^ 'No es posible realizar la venta pues la tarjeta es falsa'! !
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 16:20:33' prior: 51116526!
describeErrorCreditCardIsFake

	^ 'No es posible realizar la venta ya que la tarjeta es falsa'! !
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 16:23:10' prior: 51116512!
describeErrorCreditCardHasNoCredit

	^ 'The sale can not be made because the credit card has no credit'! !
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 16:25:39' prior: 51116532!
describeErrorCreditCardIsFake

	^ 'The sale can not be made because the credit card is fake'! !
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 16:25:54' prior: 51115376!
describeErrorCreditCardIsStolen

	^ 'The sale can not be made because the credit card is stolen'! !
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 16:25:59' prior: 51116551!
describeErrorCreditCardIsStolen

	^ 'The sale can not be made because the credit card is stolen'! !
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 16:26:08' prior: 51115382!
errorDescribeExpiredCreditCard

	^ 'Can not check out with an expired card'! !
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 16:26:42' prior: 51115365!
describeErrorCartEmpty

	^ 'Can not check out an empty cart'! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/16/2021 16:48:56' prior: 51115332!
checkOut

	|totalPrice|
	totalPrice  := cart totalPrice.
	
	self debitWith: merchantProcessor.
	
	salesBook add: totalPrice .
	
	^ salesBook first.
	! !
!Cashier methodsFor: 'nil' stamp: 'CS 6/16/2021 16:49:23'!
debitWith

	merchantProcessor assertCreditCardHasCredit ifFalse: [^Error signal: self class describeErrorCreditCardHasNoCredit ].
	
	merchantProcessor assertCreditCardIsStolen ifTrue: [^Error signal: self class describeErrorCreditCardIsStolen ].
	
	merchantProcessor assertCreditCardIsFake ifTrue: [^Error signal: self class describeErrorCreditCardIsFake ].! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/16/2021 16:49:43' prior: 51116576!
checkOut

	|totalPrice|
	totalPrice  := cart totalPrice.
	
	self debitWith.
	
	salesBook add: totalPrice .
	
	^ salesBook first.
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/16/2021 16:49:45' prior: 51116597!
checkOut

	|totalPrice|
	totalPrice  := cart totalPrice.
	
	self debitWith.
	
	salesBook add: totalPrice .
	
	^ salesBook first.
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/16/2021 16:49:57' prior: 51116604!
checkOut

	| totalPrice |
	
	totalPrice  := cart totalPrice.
	
	self debitWith.
	
	salesBook add: totalPrice .
	
	^ salesBook first.
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/16/2021 16:50:00' prior: 51116611!
checkOut

	| totalPrice |
	
	totalPrice  := cart totalPrice.
	
	self debitWith.
	
	salesBook add: totalPrice .
	
	^ salesBook first.
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/16/2021 16:50:02' prior: 51116618!
checkOut

	| totalPrice |

	totalPrice  := cart totalPrice.
	
	self debitWith.
	
	salesBook add: totalPrice .
	
	^ salesBook first.
	! !
!Cashier methodsFor: 'check out' stamp: 'CS 6/16/2021 16:50:07' prior: 51116625!
checkOut

	| totalPrice |

	totalPrice  := cart totalPrice.
	
	self debitWith.
	
	salesBook add: totalPrice.
	
	^ salesBook first.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 16:50:55'!
PASSED!

----QUIT----(16 June 2021 16:59:02) CuisUniversity-4532.image priorSource: 25061413!

----STARTUP---- (16 June 2021 20:01:50) as /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/linux64/CuisUniversity-4532.image!


!classDefinition: #CashierTest category: 'TusLibros' stamp: 'CS 6/16/2021 20:05:35'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cartObjectTest debit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'CS 6/16/2021 20:05:33'!
debit: totalToPay from: aCreditCard 

	^ debit of: totalToPay with: aCreditCard
! !
!CashierTest methodsFor: 'set up' stamp: 'CS 6/16/2021 20:06:20' prior: 51116370 overrides: 16927572!
setUp

	cartObjectTest := EditorialTestObject new.
	debit := [ :totalToPay :aCreditCard | ].! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:11:25' prior: 51115904!
test03CheckOutACartWithManyItemsAndTheTotalIsCorrect

	|cart cashier aCreditCard totalAmount today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.
	
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !
!Cashier methodsFor: 'check out private' stamp: 'CS 6/16/2021 20:13:06'!
debit: totalToPay

	merchantProcessor debit: totalToPay from: creditCard! !

!methodRemoval: Cashier #debitWith stamp: 'CS 6/16/2021 20:13:11'!
debitWith

	merchantProcessor assertCreditCardHasCredit ifFalse: [^Error signal: self class describeErrorCreditCardHasNoCredit ].
	
	merchantProcessor assertCreditCardIsStolen ifTrue: [^Error signal: self class describeErrorCreditCardIsStolen ].
	
	merchantProcessor assertCreditCardIsFake ifTrue: [^Error signal: self class describeErrorCreditCardIsFake ].!
!Cashier methodsFor: 'check out' stamp: 'CS 6/16/2021 20:14:02' prior: 51116632!
checkOut

	| totalToPay |

	totalToPay  := cart totalPrice.
	
	self debit: totalToPay.
	
	salesBook add: totalToPay.
	
	^ salesBook first.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:14:10'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:14:10'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 20:14:10'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 20:14:10'!
FAILURE!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 20:14:10'!
FAILURE!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 20:14:10'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 20:14:10'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:14:45' prior: 51115670!
test01CanNotCheckoutanEmptyCart

	| aCreditCard cart aSalesBook today |
	
	cart := cartObjectTest createCart.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCartEmpty.
					self assert: aSalesBook isEmpty]
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:15:10' prior: 51115759!
test02CheckOutACartWithOneItemAndTheTotalIsCorrect

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.	
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.

	totalAmount := cashier checkOut.

	self assert: totalAmount equals: 	10.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	
	! !

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:15:15'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:15:15'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:15:33' prior: 51116122!
test04CanNotCheckoutWithAnExpiredCreditCart

	|cart aCreditCard today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createExpiredCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:15:39' prior: 51116879!
test04CanNotCheckoutWithAnExpiredCreditCart

	|cart aCreditCard today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createExpiredCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:15:49' prior: 51116264!
test05CanNotCheckoutWhenTheCreditCartHasNoCredit

   | creditCard cart aSalesBook merchantProcessor cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	
    	creditCard := cartObjectTest createACreditCardWhereMerchanProcessorReportsThatHasNoCredit: self.

    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: merchantProcessor.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:16:34' prior: 51116921!
test05CanNotCheckoutWhenTheCreditCartHasNoCredit

   | creditCard cart aSalesBook  cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	creditCard := cartObjectTest createValidCreditCard.
    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: self.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:16:45' prior: 51116212!
test06CanNotCheckoutWhenTheCreditCardIsStolen

   | creditCard cart aSalesBook merchantProcessor cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	creditCard := cartObjectTest createValidCreditCard.
    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: merchantProcessor.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsStolen.
                    self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:16:49' prior: 51116969!
test06CanNotCheckoutWhenTheCreditCardIsStolen

   | creditCard cart aSalesBook cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	creditCard := cartObjectTest createValidCreditCard.
    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: self.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsStolen.
                    self assert: aSalesBook isEmpty]! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:17:13' prior: 51116317!
test07CanNotCheckoutWhenTheCreditCardIsFake

   | creditCard cart aSalesBook cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.

	creditCard := cartObjectTest createValidCreditCard.

    	aSalesBook := OrderedCollection new.

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: self.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsFake.
                    self assert: aSalesBook isEmpty]! !

!methodRemoval: EditorialTestObject #createACreditCardWhereMerchanProcessorReportsThatHasNoCredit: stamp: 'CS 6/16/2021 20:17:26'!
createACreditCardWhereMerchanProcessorReportsThatHasNoCredit: merchantProcessor

	| aCreditCard aExpirationDate |

	aExpirationDate := self createValidExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate.
	merchantProcessor informTheCreditCardHasNoCredit .
	
	^ aCreditCard!

!methodRemoval: EditorialTestObject #createACreditCardWhereMerchanProcessorReportsThatIsFake: stamp: 'CS 6/16/2021 20:17:26'!
createACreditCardWhereMerchanProcessorReportsThatIsFake: merchantProcessor

| aCreditCard aExpirationDate |

	aExpirationDate := self createValidExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate.
	merchantProcessor informTheCreditCardIsFake .
	
	^ aCreditCard
!

!methodRemoval: EditorialTestObject #createACreditCardWhereMerchanProcessorReportsThatIsStolen: stamp: 'CS 6/16/2021 20:17:27'!
createACreditCardWhereMerchanProcessorReportsThatIsStolen:merchantProcessor

| aCreditCard aExpirationDate |

	aExpirationDate := self createValidExpirationDate.
	
	aCreditCard := CreditCard withOwner: 'Alan Kay' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate.
	merchantProcessor informTheCreditCardIsStolen .
	
	^ aCreditCard!
!CashierTest methodsFor: 'nil' stamp: 'CS 6/16/2021 20:18:52'!
of: totalToPay with: aCreditCard

	^ self value: totalToPay value: aCreditCard
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:19:15'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:19:15'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 20:19:15'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 20:19:15'!
FAILURE!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 20:19:15'!
FAILURE!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 20:19:15'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:19:21'!
ERROR!

!methodRemoval: CashierTest #of:with: stamp: 'CS 6/16/2021 20:19:35'!
of: totalToPay with: aCreditCard

	^ self value: totalToPay value: aCreditCard
!
!CashierTest methodsFor: 'debit' stamp: 'CS 6/16/2021 20:19:49' prior: 51116712!
debit: totalToPay from: aCreditCard 

	^ debit value: totalToPay value: aCreditCard
! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:21:50' prior: 51116900!
test04CanNotCheckoutWithAnExpiredCreditCart

	|cart aCreditCard today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createExpiredCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | self error: Cashier errorDescribeExpiredCreditCard].
	
	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 20:21:53'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:22:10' prior: 51116946!
test05CanNotCheckoutWhenTheCreditCartHasNoCredit

   | creditCard cart aSalesBook  cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	creditCard := cartObjectTest createValidCreditCard.
    	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | self error: Cashier describeErrorCreditCardHasNoCredit].

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: self.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 20:22:13'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:22:52' prior: 51116992!
test06CanNotCheckoutWhenTheCreditCardIsStolen

   | creditCard cart aSalesBook cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	creditCard := cartObjectTest createValidCreditCard.
    	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | self error: Cashier describeErrorCreditCardIsStolen].

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: self.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsStolen.
                    self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 20:22:55'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:23:17' prior: 51117160!
test04CanNotCheckoutWithAnExpiredCreditCart

	|cart aCreditCard today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createExpiredCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	
	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier errorDescribeExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 20:23:20'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:23:26'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:23:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 20:23:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 20:23:38'!
FAILURE!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 20:23:38'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 20:23:38'!
FAILURE!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 20:23:59' prior: 51117014!
test07CanNotCheckoutWhenTheCreditCardIsFake

   | creditCard cart aSalesBook cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.

	creditCard := cartObjectTest createValidCreditCard.

    	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | self error: Cashier describeErrorCreditCardIsFake].

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: self.

    self should: [cashier checkOut ]
    raise: Error
    withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsFake.
                    self assert: aSalesBook isEmpty]! !

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 20:24:08'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 20:24:25'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 20:24:31'!
PASSED!

!classRemoval: #MerchantProcessor stamp: 'CS 6/16/2021 21:35:22'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'hasCredit hasNoCredit isStolen isFake'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 21:35:25'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 21:35:25'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 21:47:34' prior: 51116724!
test03CheckOutACartWithManyItemsAndTheTotalIsCorrect

	|cart cashier aCreditCard totalAmount today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | totalAmount := totalToPay].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 21:47:46' prior: 51117554!
test03CheckOutACartWithManyItemsAndTheTotalIsCorrect

	|cart aCreditCard totalAmount today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | totalAmount := totalToPay].
	
	Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 21:47:54'!
FAILURE!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 21:47:54'!
FAILURE!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 21:48:05'!
FAILURE!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 21:48:05'!
FAILURE!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 21:48:39' prior: 51117577!
test03CheckOutACartWithManyItemsAndTheTotalIsCorrect

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | totalAmount := totalToPay].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.
	
	cashier checkOut.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 21:48:48'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 21:50:37'!
test03CheckOutACartWithManyItemsAndValidateTheDebitWithMP

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | totalAmount := totalToPay].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.
	
	cashier checkOut.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !

!methodRemoval: CashierTest #test03CheckOutACartWithManyItemsAndTheTotalIsCorrect stamp: 'CS 6/16/2021 21:50:42'!
test03CheckOutACartWithManyItemsAndTheTotalIsCorrect

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | totalAmount := totalToPay].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.
	
	cashier checkOut.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndValidateTheDebitWithMP stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 21:50:46'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 21:50:46'!
PASSED!
!Cashier class methodsFor: 'error messagges' stamp: 'CS 6/16/2021 21:51:29'!
describeErrorExpiredCreditCard

	^ 'Can not check out with an expired card'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CS 6/16/2021 21:51:29' prior: 51115405!
assertIsValidCreditCard: aCreditCard on: today

	(aCreditCard isExpiredOn: today) ifTrue: [^Error signal: self describeErrorExpiredCreditCard ] .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/16/2021 21:51:29' prior: 51117245!
test04CanNotCheckoutWithAnExpiredCreditCart

	|cart aCreditCard today aSalesBook |
	
	cart := cartObjectTest createCart.
	cart add: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createExpiredCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.
	
	self should: [Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier describeErrorExpiredCreditCard.
			self assert: aSalesBook isEmpty]
	
	! !

!methodRemoval: Cashier class #errorDescribeExpiredCreditCard stamp: 'CS 6/16/2021 21:51:29'!
errorDescribeExpiredCreditCard

	^ 'Can not check out with an expired card'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithManyItemsAndValidateTheDebitWithMP stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 21:51:32'!
PASSED!

!testRun: #CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 21:51:32'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 21:54:00'!
test03ValidateDebitCorrectlyWithMPAndManyItemsOfCart

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | totalAmount := totalToPay].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.
	
	cashier checkOut.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !

!methodRemoval: CashierTest #test03CheckOutACartWithManyItemsAndValidateTheDebitWithMP stamp: 'CS 6/16/2021 21:54:04'!
test03CheckOutACartWithManyItemsAndValidateTheDebitWithMP

	|cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | totalAmount := totalToPay].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.
	
	cashier checkOut.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	!
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 21:54:14' prior: 51117847!
test03ValidateDebitCorrectlyWithMPAndManyItemsOfCart

	| cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	
	aCreditCard := cartObjectTest createValidCreditCard.
	
	today := cartObjectTest today.
	
	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | totalAmount := totalToPay].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.
	
	cashier checkOut.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !
!CashierTest methodsFor: 'testing' stamp: 'CS 6/16/2021 21:54:37' prior: 51117895!
test03ValidateDebitCorrectlyWithMPAndManyItemsOfCart

	| cart aCreditCard totalAmount today aSalesBook cashier |
	
	cart := cartObjectTest createCart.
	cart add: 5 of: cartObjectTest itemSellByTheStore.
	aCreditCard := cartObjectTest createValidCreditCard.
	today := cartObjectTest today.
	aSalesBook := OrderedCollection new.

 	debit := [ :totalToPay :theCreditCard | totalAmount := totalToPay].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard on: today registeringOn: aSalesBook using: self.
	
	cashier checkOut.

	self assert: totalAmount equals: 	50.
	self assert: aSalesBook first equals: 	totalAmount.
	self deny: aSalesBook isEmpty.
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/16/2021 21:57:43'!
test02CanNotCreateCreditCardWithANumberSizeOtherThan16

	| aExpirationDate |
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	
	self should: [CreditCard withOwner: 'Alan kay' withCreditCardNumber: 12345678 withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeinvalidCreditCardNumber ]
	
	! !

!methodRemoval: CreditCardTest #test02ValideCreditCardNumber stamp: 'CS 6/16/2021 21:57:51'!
test02ValideCreditCardNumber

	| aExpirationDate |
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	
	self should: [CreditCard withOwner: 'Alan kay' withCreditCardNumber: 12345678 withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeinvalidCreditCardNumber ]
	
	!
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/16/2021 21:59:57'!
test01CanNotCreateCreditCardWithEmptyName

	|  aExpirationDate|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	
	self should: [CreditCard withOwner: '' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeEmptyName . ]
	
	! !

!methodRemoval: CreditCardTest #test01InvalideName stamp: 'CS 6/16/2021 22:00:02'!
test01InvalideName

	|  aExpirationDate|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	
	self should: [CreditCard withOwner: '' withCreditCardNumber: 1234567887654321 withExpirationDate: aExpirationDate]
	raise: Error
	withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard errorDescribeEmptyName . ]
	
	!
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/16/2021 22:07:35'!
test03creditCardWasCreatedCorrectlyAndWeCanAccesToNameNumberAndExpirationDate

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := 1234567887654321.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	! !

!methodRemoval: CreditCardTest #test03ValideCreditwithGoodsParameters stamp: 'CS 6/16/2021 22:07:38'!
test03ValideCreditwithGoodsParameters

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := 1234567887654321.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	!
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/16/2021 22:07:45'!
test03CreditCardWasCreatedCorrectlyAndWeCanAccesToNameNumberAndExpirationDate

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := 1234567887654321.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	! !
!CreditCardTest methodsFor: 'testing' stamp: 'CS 6/16/2021 22:08:19'!
test03CreditCardWasCreatedCorrectlyAndWeCanAccessToNameNumberAndExpirationDate

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := 1234567887654321.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	! !

!methodRemoval: CreditCardTest #test03creditCardWasCreatedCorrectlyAndWeCanAccesToNameNumberAndExpirationDate stamp: 'CS 6/16/2021 22:08:23'!
test03creditCardWasCreatedCorrectlyAndWeCanAccesToNameNumberAndExpirationDate

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := 1234567887654321.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	!

!methodRemoval: CreditCardTest #test03CreditCardWasCreatedCorrectlyAndWeCanAccesToNameNumberAndExpirationDate stamp: 'CS 6/16/2021 22:08:26'!
test03CreditCardWasCreatedCorrectlyAndWeCanAccesToNameNumberAndExpirationDate

	| aCreditCard aExpirationDate owner creditCardNumber|
	
	aExpirationDate := cartObjectTest createValidExpirationDate.
	owner := 'Alan kay' .
	creditCardNumber := 1234567887654321.
	
	aCreditCard := CreditCard withOwner: owner withCreditCardNumber: creditCardNumber withExpirationDate: aExpirationDate.
	
	self assert: (aCreditCard owner) equals: owner.
	self assert: (aCreditCard creditCardNumber) equals: creditCardNumber.
	self assert: (aCreditCard expirationDate) equals: aExpirationDate
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CashierTest #test03ValidateDebitCorrectlyWithMPAndManyItemsOfCart stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithEmptyName stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithANumberSizeOtherThan16 stamp: 'CS 6/16/2021 22:08:30'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWasCreatedCorrectlyAndWeCanAccessToNameNumberAndExpirationDate stamp: 'CS 6/16/2021 22:08:30'!
PASSED!
!CreditCardTest methodsFor: 'initialization' stamp: 'CS 6/16/2021 22:08:57' overrides: 16927572!
setUp

	cartObjectTest := EditorialTestObject new! !

!methodRemoval: CreditCardTest #initialize stamp: 'CS 6/16/2021 22:09:02'!
initialize

	cartObjectTest := EditorialTestObject new!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CashierTest #test03ValidateDebitCorrectlyWithMPAndManyItemsOfCart stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithEmptyName stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithANumberSizeOtherThan16 stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWasCreatedCorrectlyAndWeCanAccessToNameNumberAndExpirationDate stamp: 'CS 6/16/2021 22:09:11'!
PASSED!

----QUIT----(16 June 2021 22:31:23) CuisUniversity-4532.image priorSource: 25121498!

----STARTUP---- (17 June 2021 13:58:15) as /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/linux64/CuisUniversity-4532.image!


!classRemoval: #EditorialTestObject stamp: 'CS 6/17/2021 13:58:23'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'CS 6/17/2021 13:58:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'owner number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'CS 6/17/2021 13:58:24'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'CS 6/17/2021 13:58:24'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'CS 6/17/2021 13:58:25'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'CS 6/17/2021 13:58:25'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cartObjectTest debit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'CS 6/17/2021 13:58:25'!
TestCase subclass: #CartTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/dell/Descargas/TusLibrosFIN.st----!
!CashierTest methodsFor: 'private testing checkOutWithMP' stamp: 'CS 6/17/2021 13:59:25'!
canNotCheckOutWhenDeCreditCardHasDebit: aDebit shouldThrowError: anErrorBlock

 | creditCard cart aSalesBook cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	creditCard := cartObjectTest createValidCreditCard.
    	aSalesBook := OrderedCollection new.

 	debit := aDebit .

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: self.

    anErrorBlock value: cashier  value: aSalesBook 
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/17/2021 13:59:25' prior: 51118500!
test05CanNotCheckoutWhenTheCreditCartHasNoCredit

	debit := [ :totalToPay :theCreditCard | self error: Cashier describeErrorCreditCardHasNoCredit].
	
	self canNotCheckOutWhenDeCreditCardHasDebit: debit shouldThrowError: [:cashier :aSalesBook |
		self should: [cashier checkOut ]
    		raise: Error
    		withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    							     self assert: aSalesBook isEmpty]]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/17/2021 13:59:25' prior: 51118518!
test06CanNotCheckoutWhenTheCreditCardIsStolen
	
	debit := [ :totalToPay :theCreditCard | self error: Cashier describeErrorCreditCardIsStolen].
	
	self canNotCheckOutWhenDeCreditCardHasDebit: debit  shouldThrowError: [:cashier :aSalesBook |
		self should: [cashier checkOut ]
    		raise: Error
   		withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsStolen.
                    							     self assert: aSalesBook isEmpty]]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/17/2021 13:59:25' prior: 51118535!
test07CanNotCheckoutWhenTheCreditCardIsFake

   	debit := [ :totalToPay :theCreditCard | self error: Cashier describeErrorCreditCardIsFake].
	
	self canNotCheckOutWhenDeCreditCardHasDebit: debit shouldThrowError: [ :cashier :aSalesBook |
		self should: [cashier checkOut ]
    	        raise: Error
               withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsFake.
                    						           self assert: aSalesBook isEmpty] ]! !

!methodRemoval: CashierTest #CanNotCheckOutWhenDeCreditCardHasDebit:shouldThrowError: stamp: 'CS 6/17/2021 13:59:25'!
CanNotCheckOutWhenDeCreditCardHasDebit: aDebit shouldThrowError: anErrorBlock

 | creditCard cart aSalesBook cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	creditCard := cartObjectTest createValidCreditCard.
    	aSalesBook := OrderedCollection new.

 	debit := aDebit .

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: self.

    anErrorBlock value: cashier  value: aSalesBook 
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CashierTest #test03ValidateDebitCorrectlyWithMPAndManyItemsOfCart stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithEmptyName stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithANumberSizeOtherThan16 stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWasCreatedCorrectlyAndWeCanAccessToNameNumberAndExpirationDate stamp: 'CS 6/17/2021 13:59:27'!
PASSED!

----STARTUP---- (17 June 2021 14:14:10) as /home/dell/CAMI/Facultad/Materias que estoy cursando este cuatri/Inge1/linux64/CuisUniversity-4532.image!


!classRemoval: #EditorialTestObject stamp: 'CS 6/17/2021 14:14:17'!
Object subclass: #EditorialTestObject
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'CS 6/17/2021 14:14:18'!
Object subclass: #CreditCard
	instanceVariableNames: 'owner number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'CS 6/17/2021 14:14:18'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'CS 6/17/2021 14:14:18'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'CS 6/17/2021 14:14:19'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'CS 6/17/2021 14:14:19'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cartObjectTest debit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'CS 6/17/2021 14:14:19'!
TestCase subclass: #CartTest
	instanceVariableNames: 'cartObjectTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/dell/Descargas/TusLibrosFIN.st----!
!CashierTest methodsFor: 'private testing checkOutWithMP' stamp: 'CS 6/17/2021 14:16:16'!
canNotCheckOutUsingDebit: aDebit shouldThrowError: anErrorBlock

 | creditCard cart aSalesBook cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	creditCard := cartObjectTest createValidCreditCard.
    	aSalesBook := OrderedCollection new.

 	debit := aDebit .

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: self.

    anErrorBlock value: cashier  value: aSalesBook 
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/17/2021 14:16:16' prior: 51119398!
test06CanNotCheckoutWhenTheCreditCardIsStolen
	
	debit := [ :totalToPay :theCreditCard | self error: Cashier describeErrorCreditCardIsStolen].
	
	self canNotCheckOutUsingDebit: debit  shouldThrowError: [:cashier :aSalesBook |
		self should: [cashier checkOut ]
    		raise: Error
   		withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsStolen.
                    							     self assert: aSalesBook isEmpty]]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/17/2021 14:16:16' prior: 51119415!
test07CanNotCheckoutWhenTheCreditCardIsFake

   	debit := [ :totalToPay :theCreditCard | self error: Cashier describeErrorCreditCardIsFake].
	
	self canNotCheckOutUsingDebit: debit shouldThrowError: [ :cashier :aSalesBook |
		self should: [cashier checkOut ]
    	        raise: Error
               withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardIsFake.
                    						           self assert: aSalesBook isEmpty] ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CS 6/17/2021 14:16:16' prior: 51119380!
test05CanNotCheckoutWhenTheCreditCartHasNoCredit

	debit := [ :totalToPay :theCreditCard | self error: Cashier describeErrorCreditCardHasNoCredit].
	
	self canNotCheckOutUsingDebit: debit shouldThrowError: [:cashier :aSalesBook |
		self should: [cashier checkOut ]
    		raise: Error
    		withExceptionDo: [ :anError | self assert: anError messageText = Cashier describeErrorCreditCardHasNoCredit.
                    							     self assert: aSalesBook isEmpty]]! !

!methodRemoval: CashierTest #CanNotCheckOutWhenDeCreditCardHasDebit:shouldThrowError: stamp: 'CS 6/17/2021 14:16:16'!
CanNotCheckOutWhenDeCreditCardHasDebit: aDebit shouldThrowError: anErrorBlock

 | creditCard cart aSalesBook cashier |

    	cart := cartObjectTest createCart.
    	cart add: cartObjectTest itemSellByTheStore.
	creditCard := cartObjectTest createValidCreditCard.
    	aSalesBook := OrderedCollection new.

 	debit := aDebit .

	cashier := Cashier toCheckout: cart charging: creditCard on: cartObjectTest today registeringOn: aSalesBook using: self.

    anErrorBlock value: cashier  value: aSalesBook 
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CashierTest #test03ValidateDebitCorrectlyWithMPAndManyItemsOfCart stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithEmptyName stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithANumberSizeOtherThan16 stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWasCreatedCorrectlyAndWeCanAccessToNameNumberAndExpirationDate stamp: 'CS 6/17/2021 14:16:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutanEmptyCart stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemAndTheTotalIsCorrect stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CashierTest #test03ValidateDebitCorrectlyWithMPAndManyItemsOfCart stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithAnExpiredCreditCart stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWhenTheCreditCartHasNoCredit stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWhenTheCreditCardIsStolen stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWhenTheCreditCardIsFake stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CreditCardTest #test01CanNotCreateCreditCardWithEmptyName stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CreditCardTest #test02CanNotCreateCreditCardWithANumberSizeOtherThan16 stamp: 'CS 6/17/2021 14:16:37'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWasCreatedCorrectlyAndWeCanAccessToNameNumberAndExpirationDate stamp: 'CS 6/17/2021 14:16:37'!
PASSED!