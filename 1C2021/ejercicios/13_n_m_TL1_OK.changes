
----STARTUP---- (7 June 2021 20:17:24) as C:\Users\Santiago\Desktop\Uba\Inge\Programa\windows64\CuisUniversity-4532.image!


Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NameOfSubclass category: 'TusLibros' stamp: 'sc 6/7/2021 20:17:52'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!NameOfSubclass commentStamp: '<historical>' prior: 0!
Primer test, el carrito reci�n creado est� vacio (isEmpty devuelve true). El carrito no conoce al usuario.
!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'sc 6/7/2021 21:25:51'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(7 June 2021 22:41:14) CuisUniversity-4532.image priorSource: 17440454!

----STARTUP---- (9 June 2021 14:37:42) as C:\Users\Santiago\Desktop\Uba\Inge\Programa\windows64\CuisUniversity-4532.image!

!CartTest methodsFor: 'no messages' stamp: 'sc 6/9/2021 14:38:19'!
test01createdCartIsEmpty
	|cart|! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'sc 6/9/2021 14:39:15'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'sc 6/9/2021 14:39:05' prior: 50876705!
test01createdCartIsEmpty
	|cart|
	cart _ Cart new.
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 14:39:18'!
ERROR!
!Cart methodsFor: 'tetsing' stamp: 'sc 6/9/2021 14:39:32'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'tetsing' stamp: 'sc 6/9/2021 14:39:43' prior: 50876724!
isEmpty
	^true.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 14:39:47'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 14:39:48'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 14:42:10' prior: 50876716!
test01createdCartIsEmpty
	|cart aValidUser aValidPassword|
	cart _ Cart newWith: aValidUser and: aValidPassword.
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 14:42:20'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 14:39:05' prior: 50876737!
test01createdCartIsEmpty
	|cart|
	cart _ Cart new.
	self assert: cart isEmpty.! !

!classDefinition: #Book category: 'TusLibros' stamp: 'sc 6/9/2021 14:46:33'!
Object subclass: #Book
	instanceVariableNames: 'isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 14:46:05'!
test02CartWithItemIsNotEmpty
	|cart aBook|
	aBook _ Book new . 
	cart _ Cart new.
	cart add: aBook.
	self assert: cart ! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 14:46:56' prior: 50876758!
test02CartWithItemIsNotEmpty
	|cart aBook|
	aBook _ Book new. 
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02CartWithItemIsNotEmpty stamp: 'sc 6/9/2021 14:46:58'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 14:47:45' prior: 50876765!
test02CartWithItemIsNotEmpty
	|cart aBook|
	aBook _ Book new. 
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	cart includes: aBook.! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 14:48:00' prior: 50876775!
test02CartWithItemIsNotEmpty
	|cart aBook|
	aBook _ Book new. 
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.! !

!testRun: #CartTest #test02CartWithItemIsNotEmpty stamp: 'sc 6/9/2021 14:48:02'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 14:48:46' prior: 50876783!
test02CartWithItemIsNotEmpty
	|cart aBook|
	aBook _ Book new. 
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 14:50:56'!
test02WhenAddingABookToEmptyCartItOnlyContainsThatBook
	|cart aBook|
	aBook _ Book new. 
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.! !

!methodRemoval: CartTest #test02CartWithItemIsNotEmpty stamp: 'sc 6/9/2021 14:50:56'!
test02CartWithItemIsNotEmpty
	|cart aBook|
	aBook _ Book new. 
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 14:52:40' prior: 50876801!
test02WhenAddingABookToEmptyCartItOnlyContainsThatBook
	|cart aBook|
	aBook _ Book new. 
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.
	self assert: cart amoutOfBooks equals: 1.! !

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 14:52:52'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 14:53:07'!
add: aBook 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'sc 6/9/2021 14:53:45'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 14:53:41' prior: 50876831!
add: aBook 
	books add: aBook.! !

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 14:53:50'!
ERROR!
!Cart methodsFor: 'initialize' stamp: 'sc 6/9/2021 14:54:37' overrides: 16896425!
initialize
	books _ OrderedCollection new.! !

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 14:54:51'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'sc 6/9/2021 14:55:16' prior: 50876728!
isEmpty
	^books isEmpty.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 14:55:18'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 14:55:18'!
ERROR!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 14:55:18'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'sc 6/9/2021 14:55:38'!
includes: aBook 
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'sc 6/9/2021 14:56:01' prior: 50876871!
includes: aBook 
	^books includes: aBook ! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 14:56:02'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 14:56:02'!
ERROR!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 14:56:03'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 14:56:19'!
amoutOfBooks
	self shouldBeImplemented.! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 14:56:26' prior: 50876889!
amoutOfBooks
	^books size.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 14:56:27'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 14:56:27'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:19:32'!
test03WhenAddingABookToEmptyCartItOnlyContainsThatBook
	|cart aBook|
	aBook _ Book new.
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.
	self assert: cart amoutOfBooks equals: 1.! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:21:01' prior: 50876903!
test03WhenAddingABookToEmptyCartItOnlyContainsThatBook
	|cart aBook|
	aBook _ Book new.
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.
	self assert: cart amoutOfBooks equals: 1.! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:21:56'!
test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks
	|cart aBook|
	aBook _ Book new.
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.
	self assert: cart amoutOfBooks equals: 1.! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:22:11' prior: 50876923!
test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks
	|cart aBook aBook2|
	aBook _ Book new.
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.
	self assert: cart amoutOfBooks equals: 1.! !

!methodRemoval: CartTest #test03WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 15:22:51'!
test03WhenAddingABookToEmptyCartItOnlyContainsThatBook
	|cart aBook|
	aBook _ Book new.
	cart _ Cart new.
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.
	self assert: cart amoutOfBooks equals: 1.!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:23:27' prior: 50876933!
test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks
	|cart aBook1 aBook2|
	aBook1 _ Book new.
	aBook2 _ Book new.
	cart _ Cart new.
	cart add: aBook1.
	cart add: aBook2.
	self deny: cart isEmpty.
	self assert: cart includes: aBook1.
	self assert: cart amoutOfBooks equals: 1.! !

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:23:29'!
FAILURE!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:23:41' prior: 50876954!
test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks
	|cart aBook1 aBook2|
	aBook1 _ Book new.
	aBook2 _ Book new.
	cart _ Cart new.
	cart add: aBook1.
	cart add: aBook2.
	self assert: cart includes: aBook1.
	self assert: cart amoutOfBooks equals: 2.! !

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:23:42'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 15:23:42'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 15:23:42'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:23:42'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:24:11' prior: 50876970!
test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks
	|cart aBook1 aBook2|
	aBook1 _ Book new.
	aBook2 _ Book new.
	cart _ Cart new.
	cart add: aBook1.
	cart add: aBook2.
	self assert: cart includes: aBook1.
	self assert: cart includes: aBook2.
	self assert: cart amoutOfBooks equals: 2.! !

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:24:14'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 15:24:14'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 15:24:14'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:24:14'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:28:26'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 15:28:26'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 15:28:26'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:28:26'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:33:03'!
test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook
	|cart aBook|
	aBook _ Book new.
	cart _ Cart new.
	cart add: aBook.
	cart add: aBook.
	cart add: aBook.
	self assert: (cart quantityOf: aBook) equals: 3.
	self assert: cart amoutOfBooks equals: 3.! !

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 15:33:07'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 15:33:19'!
quantityOf: aBook 
	self shouldBeImplemented.! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 15:33:51' prior: 50877050!
quantityOf: aBook 
	^ books occurrencesOf: aBook.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 15:33:52'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 15:33:52'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:33:52'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 15:33:52'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 15:33:57'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 15:33:57'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 15:33:57'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:33:57'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 15:33:57'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:43:03'!
test05CantAddBookThatWeDoNotWantToSell
	|cart aBook stock|
	"Para no adelantarnos y modelar el stock usamos de forma temporal un arreglo como stock"
	aBook _ Book new.
	stock _ OrderedCollection new.
	cart _ Cart new.
	cart add: aBook.
	cart add: aBook.
	cart add: aBook.
	self assert: (cart quantityOf: aBook) equals: 3.
	self assert: cart amoutOfBooks equals: 3.! !
!Cart methodsFor: 'initialization' stamp: 'sc 6/9/2021 15:44:51' prior: 50876850 overrides: 16896425!
initialize
	books _ OrderedCollection new.! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:45:01' prior: 50877090!
test05CantAddBookThatWeDoNotWantToSell
	|cart aBook stock|
	aBook _ Book new.
	stock _ OrderedCollection new.
	cart _ Cart new.
	cart add: aBook.
	cart add: aBook.
	cart add: aBook.
	self assert: (cart quantityOf: aBook) equals: 3.
	self assert: cart amoutOfBooks equals: 3.! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:49:13' prior: 50877109!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook stock|
	anUnavaibleBook _ Book new.
	cart _ Cart new.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart CardinalDayMonthRule] ! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:49:24' prior: 50877121!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook stock|
	anUnavaibleBook _ Book new.
	cart _ Cart new.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart CardinalDayMonthRule error description] ! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:50:07' prior: 50877132!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook stock|
	anUnavaibleBook _ Book new.
	cart _ Cart new.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart nameCanNotHaveSpacesErrorDescription] ! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:50:46' prior: 50877144!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook stock|
	anUnavaibleBook _ Book new.
	cart _ Cart new.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart cantAddBookNotForSaleErrordescription] ! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:50:54' prior: 50877156!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook stock|
	anUnavaibleBook _ Book new.
	cart _ Cart new.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart cantAddBookNotForSaleErrorDescription] ! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:51:11' prior: 50877168!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook|
	anUnavaibleBook _ Book new.
	cart _ Cart new.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart cantAddBookNotForSaleErrorDescription] ! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:54:09' prior: 50877180!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook|
	anUnavaibleBook _ Book new.
	cart _ Cart new.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart cantAddBookNotForSaleErrorDescription] ! !

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 15:54:29'!
FAILURE!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:55:59' prior: 50877192!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook unwantedBookCollection|
	anUnavaibleBook _ Book new.
	
	cart _ Cart.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart cantAddBookNotForSaleErrorDescription] ! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 15:57:15' prior: 50877207!
test05CantAddBookThatWeDoNotWantToSell
	|cart anUnavaibleBook avaibleBookCollection|
	anUnavaibleBook _ Book new.
	avaibleBookCollection  _ OrderedCollection  new.
	cart _ Cart newWith: avaibleBookCollection.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart cantAddBookNotForSaleErrorDescription] ! !

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 15:57:31'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'sc 6/9/2021 15:57:41'!
newWith: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'sc 6/9/2021 15:57:53' prior: 50877237!
newWith: anOrderedCollection 
	^self new initializeNewWith: anOrderedCollection ! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 15:57:55'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 15:57:55'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:57:55'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 15:57:55'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 15:57:55'!
ERROR!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 15:57:55'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'sc 6/9/2021 15:58:09' prior: 50877246!
newWith: anOrderedCollection 
	^self new initializeWith: anOrderedCollection ! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'sc 6/9/2021 15:58:37'!
Object subclass: #Cart
	instanceVariableNames: 'books avaibleBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'sc 6/9/2021 15:58:35'!
initializeWith: avaibleBookCollection
	books _ OrderedCollection new.
	avaibleBooks _ avaibleBookCollection.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 15:58:39'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 15:58:39'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 15:58:39'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 15:58:39'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 15:58:40'!
FAILURE!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 15:58:40'!
FAILURE!
!Cart class methodsFor: 'error descriptions' stamp: 'sc 6/9/2021 16:00:01'!
cantAddBookNotForSaleErrorDescription
	^'Si no lo vendemo mir� si vas a poder ponerlo en el carro pap�'! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:00:45' prior: 50876842!
add: aBook 
	self raiseErrorIfBookIsNotForSale.
	books add: aBook.! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:00:51' prior: 50877317!
add: aBook 
	self raiseErrorIfBookIsNotForSale aBook.
	books add: aBook.! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:00:57' prior: 50877322!
add: aBook 
	self raiseErrorIfBookIsNotForSale: aBook.
	books add: aBook.! !
!Cart methodsFor: 'error' stamp: 'sc 6/9/2021 16:02:39'!
cantAddBookNotForSaleErrorDescription: aBook
	(avaibleBooks  includes: aBook) IfFalse:[self error: self class cantAddBookNotForSaleErrorDescription].
	! !
!Cart methodsFor: 'error' stamp: 'sc 6/9/2021 16:03:08' prior: 50877332!
cantAddBookNotForSaleErrorDescription: aBook
	(avaibleBooks includes: aBook) IfFalse: [self error: self class cantAddBookNotForSaleErrorDescription].
	! !
!Cart methodsFor: 'error' stamp: 'sc 6/9/2021 16:03:22' prior: 50877340!
cantAddBookNotForSaleErrorDescription: aBook
	(avaibleBooks includes: aBook) ifFalse: [self error: self class cantAddBookNotForSaleErrorDescription].
	! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:03:26'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:03:26'!
ERROR!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:03:26'!
ERROR!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:03:26'!
ERROR!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:03:26'!
FAILURE!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 16:04:13' prior: 50876818!
test02WhenAddingABookToEmptyCartItOnlyContainsThatBook
	|cart aBook|
	aBook _ Book new. 
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	self deny: cart isEmpty.
	self assert: cart includes: aBook.
	self assert: cart amoutOfBooks equals: 1.! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 16:04:33' prior: 50876995!
test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks
	|cart aBook1 aBook2|
	aBook1 _ Book new.
	aBook2 _ Book new.
	cart _ Cart newWith: (OrderedCollection  with: aBook1 with: aBook2 ).
	cart add: aBook1.
	cart add: aBook2.
	self assert: cart includes: aBook1.
	self assert: cart includes: aBook2.
	self assert: cart amoutOfBooks equals: 2.! !

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:04:35'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 16:04:50' prior: 50877035!
test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook
	|cart aBook|
	aBook _ Book new.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	cart add: aBook.
	cart add: aBook.
	self assert: (cart quantityOf: aBook) equals: 3.
	self assert: cart amoutOfBooks equals: 3.! !

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:04:58'!
FAILURE!
!Cart methodsFor: 'error' stamp: 'sc 6/9/2021 16:05:40' prior: 50877348!
cantAddBookNotForSaleErrorDescription: aBook
	(avaibleBooks includes: aBook) ifFalse: [self error: self class cantAddBookNotForSaleErrorDescription].
	! !
!Cart methodsFor: 'error' stamp: 'sc 6/9/2021 16:06:10'!
raiseErrorIfBookIsNotForSale: aBook
	(avaibleBooks includes: aBook) ifFalse: [self error: self class cantAddBookNotForSaleErrorDescription].
	! !

!methodRemoval: Cart #cantAddBookNotForSaleErrorDescription: stamp: 'sc 6/9/2021 16:06:10'!
cantAddBookNotForSaleErrorDescription: aBook
	(avaibleBooks includes: aBook) ifFalse: [self error: self class cantAddBookNotForSaleErrorDescription].
	!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:06:13'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:06:13'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:06:13'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:06:13'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:06:13'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 16:12:28'!
test06ListingCartElementsOfEmptyCartReturnsEmptyReport
	|cart anUnavaibleBook avaibleBookCollection|
	anUnavaibleBook _ Book new.
	avaibleBookCollection  _ OrderedCollection  new.
	cart _ Cart newWith: avaibleBookCollection.
	self should:[cart add: anUnavaibleBook.]
	raise: Error
	 withExceptionDo:[:anError| self assert: anError messageText  equals: Cart cantAddBookNotForSaleErrorDescription] ! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 16:13:06' prior: 50877456!
test06ListingCartElementsOfEmptyCartReturnsEmptyReport
	|cart  |

	cart _ Cart newWith: OrderedCollection  new.
	self assert: (cart list isEmpty)! !

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:13:08'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:13:19'!
list
	self shouldBeImplemented.! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:13:26' prior: 50877482!
list
	^OrderedCollection new.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:13:27'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:13:27'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:13:27'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:13:27'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:13:27'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:13:27'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 16:14:48'!
test07ListingCartElementsOfCartWithABookReturnsCorrectReport
	|cart aBook |
	aBook _ Book new.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	self assert: (cart list) equals: (OrderedCollection with: aBook with: 1).! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 16:16:01' prior: 50877510!
test07ListingCartElementsOfCartWithABookReturnsCorrectReport
	|cart aBook |
	"El mensaje ISBN no est� implementado, es temporal"
	aBook _ Book new.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	self assert: (cart list) equals: (OrderedCollection with: aBook ISBN with: 1).! !

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:16:04'!
ERROR!
!Book methodsFor: 'accesing' stamp: 'sc 6/9/2021 16:16:18'!
ISBN
	self shouldBeImplemented.! !
!Book methodsFor: 'accesing' stamp: 'sc 6/9/2021 16:16:27' prior: 50877535!
ISBN! !

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:16:29'!
FAILURE!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:16:37'!
FAILURE!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:17:13' prior: 50877486!
list
	^OrderedCollection with: (books at: 0) with: 1.! !

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:17:16'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:17:16'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:17:16'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:17:16'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:17:16'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:17:16'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:17:16'!
ERROR!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:17:16'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:17:53' prior: 50877550!
list
	^OrderedCollection with: (books at: 0 ISBN) with: 1.! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:18:03' prior: 50877583!
list
	^OrderedCollection with: ((books at: 0) ISBN) with: 1.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:18:04'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:18:04'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:18:04'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:18:04'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:18:04'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:18:04'!
ERROR!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:18:04'!
ERROR!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:18:13'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 16:18:34' prior: 50877520!
test07ListingCartElementsOfCartWithABookReturnsCorrectReport
	|cart aBook |
	"El mensaje ISBN no est� implementado, es temporal"
	aBook _ Book new.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	self assert: (cart list) equals: (OrderedCollection with: aBook ISBN with: 1).! !

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:18:35'!
ERROR!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:18:41'!
ERROR!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:18:53'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:18:59' prior: 50877588!
list
	^OrderedCollection with: ((books at: 1) ISBN) with: 1.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:19:00'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:19:01'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:19:01'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:19:01'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:19:01'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:19:01'!
ERROR!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:19:01'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:19:01'!
ERROR!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:19:08'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:19:08'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:19:08'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:19:08'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:19:08'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:19:08'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:19:08'!
ERROR!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:19:08'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:19:08'!
ERROR!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:19:18'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:19:18'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:19:18'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:19:18'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:19:18'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:19:18'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:19:18'!
ERROR!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:19:18'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:19:18'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:20:59' prior: 50877645!
list
	|listedElements|
	listedElements _ OrderedCollection new.
	books do: [:aBook| listedElements add: aBook. listedElements add: 1].
	^books.
	! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:21:00'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:21:00'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:21:00'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:21:00'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:21:00'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:21:00'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:21:00'!
FAILURE!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:21:00'!
FAILURE!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:21:11' prior: 50877742!
list
	|listedElements|
	listedElements _ OrderedCollection new.
	books do: [:aBook| listedElements add: aBook. listedElements add: 1].
	^listedElements.
	! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:21:12'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:21:12'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:21:12'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:21:12'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:21:12'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:21:12'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:21:12'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 16:21:45'!
test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport
	|cart aBook |
	"El mensaje ISBN no est� implementado, es temporal"
	aBook _ Book new.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	cart add: aBook.
	self assert: (cart list) equals: (OrderedCollection with: aBook ISBN with: 1).! !
!CartTest methodsFor: 'test' stamp: 'sc 6/9/2021 16:21:50' prior: 50877810!
test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport
	|cart aBook |
	"El mensaje ISBN no est� implementado, es temporal"
	aBook _ Book new.
	cart _ Cart newWith: (OrderedCollection  with: aBook).
	cart add: aBook.
	cart add: aBook.
	self assert: (cart list) equals: (OrderedCollection with: aBook ISBN with: 2).! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:23:16' prior: 50877778!
list
	|listedElements|
	listedElements _ OrderedCollection new.
	books do: [:aBook| listedElements add: aBook. listedElements add: (books occurrencesOf: aBook)].
	^listedElements.
	! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:26:00' prior: 50877836!
list
	|listedElements|
	listedElements _ OrderedCollection new.
	books do: [:aBook| (books includes: aBook) ifFalse:
						[listedElements add: aBook. 
						listedElements add: (books occurrencesOf: aBook) ].
		 ].
	^listedElements.
	! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:26:01'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:26:01'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:26:01'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:26:01'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:26:01'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:26:01'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:26:01'!
FAILURE!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'sc 6/9/2021 16:26:02'!
FAILURE!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:26:20' prior: 50877845!
list
	|listedElements|
	listedElements _ OrderedCollection new.
	books do: [:aBook| (listedElements includes: aBook) ifFalse:
						[listedElements add: aBook. 
						listedElements add: (books occurrencesOf: aBook) ].
		 ].
	^listedElements.
	! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:26:21'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:26:21'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:26:21'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:26:21'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:26:21'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:26:21'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:26:21'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'sc 6/9/2021 16:26:21'!
PASSED!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:28:20' prior: 50877884!
list
	|listedElements|
	listedElements _ OrderedCollection new.

	books do: [:aBook| (listedElements includes: aBook) ifFalse:
						[listedElements add: aBook. 
						listedElements add: (books occurrencesOf: aBook) ].
		 ].
	^listedElements.
	! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:28:20'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:28:20'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:28:20'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:28:20'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:28:20'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:28:21'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:28:21'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'sc 6/9/2021 16:28:21'!
PASSED!
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:29:01' prior: 50877923!
list
	|listedElements|
	listedElements _ OrderedCollection new.
	
	books do: [:aBook| self add: aBook WithAparitionsIfNotIncludedIn: listedElements ].
	^listedElements.
	! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:29:50'!
mensaje: aBook in: listedElements
	(listedElements includes: aBook) ifFalse:
						[listedElements add: aBook. 
						listedElements add: (books occurrencesOf: aBook) ].
		! !
!Cart methodsFor: 'operations' stamp: 'sc 6/9/2021 16:31:01'!
add: aBook WithAparitionsIfNotIncludedIn: listedElements
	(listedElements includes: aBook) ifFalse:
						[listedElements add: aBook. 
						listedElements add: (books occurrencesOf: aBook) ].
		! !

!methodRemoval: Cart #mensaje:in: stamp: 'sc 6/9/2021 16:31:04'!
mensaje: aBook in: listedElements
	(listedElements includes: aBook) ifFalse:
						[listedElements add: aBook. 
						listedElements add: (books occurrencesOf: aBook) ].
		!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:31:06'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:31:06'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:31:06'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:31:06'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:31:06'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:31:06'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:31:06'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'sc 6/9/2021 16:31:06'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'sc 6/9/2021 16:31:27'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:31:27'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:31:27'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:31:27'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:31:27'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:31:27'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:31:27'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:31:27'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'sc 6/9/2021 16:31:27'!
PASSED!

----SNAPSHOT----(9 June 2021 16:37:26) CuisUniversity-4532.image priorSource: 17441531!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'sc 6/9/2021 16:37:29'!
PASSED!

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:37:29'!
PASSED!

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:37:29'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:37:29'!
PASSED!

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:37:29'!
PASSED!

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:37:29'!
PASSED!

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:37:29'!
PASSED!

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:37:29'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'sc 6/9/2021 16:37:29'!
PASSED!
Primer test, el carrito reci�n creado est� vacio (isEmpty devuelve true). El carrito no conoce al usuario.
!
Primer test, el carrito reci�n creado est� vacio (isEmpty devuelve true). El carrito no conoce al usuario.
!

----SNAPSHOT----(9 June 2021 16:37:52) CuisUniversity-4532.image priorSource: 17484966!
!Behavior method!
initialize
	(books _ [
	(OrderedCollection
		cover: (21 to: 37)
		declaredAt: (21 to: 37)) new ] valueCoveringAll:
		{39 to: 41})
		cover: (13 to: 17)
		declaredAt: (13 to: 17).! !
!Behavior method!
isEmpty
	^ [
	(books
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) isEmpty ] valueCoveringAll:
		{17 to: 23}.! !

!testRun: #CartTest #test01createdCartIsEmpty stamp: 'sc 6/9/2021 16:42:34'!
PASSED!
!Behavior method!
newWith: anOrderedCollection
	^ [
	([
	(self coverAll:
		{33 to: 36}) new ] valueCoveringAll:
		{38 to: 40}) initializeWith:
		(anOrderedCollection
			cover: (58 to: 76)
			declaredAt: (10 to: 28)) ] valueCoveringAll:
		{42 to: 56}.! !
!Behavior method!
initializeWith: avaibleBookCollection
	(books _ [
	(OrderedCollection
		cover: (48 to: 64)
		declaredAt: (48 to: 64)) new ] valueCoveringAll:
		{66 to: 68})
		cover: (40 to: 44)
		declaredAt: (40 to: 44).
	(avaibleBooks _ avaibleBookCollection
		cover: (87 to: 107)
		declaredAt: (17 to: 37))
		cover: (72 to: 83)
		declaredAt: (72 to: 83).! !
!Behavior method!
add: aBook
	[
	(self coverAll:
		{14 to: 17}) raiseErrorIfBookIsNotForSale:
		(aBook
			cover: (49 to: 53)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{19 to: 47}.
	[
	(books
		cover: (57 to: 61)
		declaredAt: (57 to: 61)) add:
		(aBook
			cover: (68 to: 72)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{63 to: 66}.! !
!Behavior method!
raiseErrorIfBookIsNotForSale: aBook
	[
	([
	(avaibleBooks
		cover: (39 to: 50)
		declaredAt: (39 to: 50)) includes:
		(aBook
			cover: (62 to: 66)
			declaredAt: (31 to: 35)) ] valueCoveringAll:
		{52 to: 60}) ifFalse: [
		[
		(self coverAll:
			{79 to: 82}) error:
			([
			([
			(self coverAll:
				{91 to: 94}) class ] valueCoveringAll:
				{96 to: 100}) cantAddBookNotForSaleErrorDescription ] valueCoveringAll:
				{102 to: 138}) ] valueCoveringAll:
			{84 to: 89} ]] valueCoveringAll:
		{69 to: 76}.! !
!Behavior method!
includes: aBook
	^ [
	(books
		cover: (20 to: 24)
		declaredAt: (20 to: 24)) includes:
		(aBook
			cover: (36 to: 40)
			declaredAt: (11 to: 15)) ] valueCoveringAll:
		{26 to: 34}.! !
!Behavior method!
amoutOfBooks
	^ [
	(books
		cover: (16 to: 20)
		declaredAt: (16 to: 20)) size ] valueCoveringAll:
		{22 to: 25}.! !

!testRun: #CartTest #test02WhenAddingABookToEmptyCartItOnlyContainsThatBook stamp: 'sc 6/9/2021 16:42:34'!
PASSED!

!testRun: #CartTest #test03WhenAddingMultipleBooksToEmptyCartItContainsThoseBooks stamp: 'sc 6/9/2021 16:42:34'!
PASSED!
!Behavior method!
quantityOf: aBook
	^ [
	(books
		cover: (23 to: 27)
		declaredAt: (23 to: 27)) occurrencesOf:
		(aBook
			cover: (44 to: 48)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{29 to: 42}.! !

!testRun: #CartTest #test04AddingSameBookMultipleTimesContainsMultipleCopiesOfthatBook stamp: 'sc 6/9/2021 16:42:34'!
PASSED!
!Behavior method!
cantAddBookNotForSaleErrorDescription
	^ 'Si no lo vendemo mir� si vas a poder ponerlo en el carro pap�' coverAll:
		{41 to: 103}.! !

!testRun: #CartTest #test05CantAddBookThatWeDoNotWantToSell stamp: 'sc 6/9/2021 16:42:34'!
PASSED!
!Behavior method!
list
	| listedElements |
	(listedElements _ [
	(OrderedCollection
		cover: (42 to: 58)
		declaredAt: (42 to: 58)) new ] valueCoveringAll:
		{60 to: 62})
		cover: (25 to: 38)
		declaredAt: (8 to: 21).
	[
	(books
		cover: (68 to: 72)
		declaredAt: (68 to: 72)) do: [ :aBook |
		[
		(self coverAll:
			{87 to: 90})
			add:
				(aBook
					cover: (97 to: 101)
					declaredAt: (80 to: 84))
			WithAparitionsIfNotIncludedIn:
				(listedElements
					cover: (134 to: 147)
					declaredAt: (8 to: 21)) ] valueCoveringAll:
			{92 to: 95. 103 to: 132} ]] valueCoveringAll:
		{74 to: 76}.
	^ listedElements
		cover: (154 to: 167)
		declaredAt: (8 to: 21).! !

!testRun: #CartTest #test06ListingCartElementsOfEmptyCartReturnsEmptyReport stamp: 'sc 6/9/2021 16:42:34'!
PASSED!
!Behavior method!
add: aBook WithAparitionsIfNotIncludedIn: listedElements
	[
	([
	(listedElements
		cover: (60 to: 73)
		declaredAt: (43 to: 56)) includes:
		(aBook
			cover: (85 to: 89)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{75 to: 83}) ifFalse: [
		[
		(listedElements
			cover: (108 to: 121)
			declaredAt: (43 to: 56)) add:
			(aBook
				cover: (128 to: 132)
				declaredAt: (6 to: 10)) ] valueCoveringAll:
			{123 to: 126}.
		[
		(listedElements
			cover: (142 to: 155)
			declaredAt: (43 to: 56)) add:
			([
			(books
				cover: (163 to: 167)
				declaredAt: (163 to: 167)) occurrencesOf:
				(aBook
					cover: (184 to: 188)
					declaredAt: (6 to: 10)) ] valueCoveringAll:
				{169 to: 182}) ] valueCoveringAll:
			{157 to: 160} ]] valueCoveringAll:
		{92 to: 99}.! !
!Behavior method!
ISBN
	^ self.! !

!testRun: #CartTest #test07ListingCartElementsOfCartWithABookReturnsCorrectReport stamp: 'sc 6/9/2021 16:42:34'!
PASSED!

!testRun: #CartTest #test08ListingCartElementsOfCartWithTwoBookCopiesReturnsCorrectReport stamp: 'sc 6/9/2021 16:42:34'!
PASSED!
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).
	(observerCollection _ [
	(OrderedCollection
		cover: (110 to: 126)
		declaredAt: (110 to: 126)) new ] valueCoveringAll:
		{129 to: 131})
		cover: (88 to: 105)
		declaredAt: (88 to: 105).! !
!Behavior method!
newWith: aMarsRover
	^ [
	([
	(self coverAll:
		{24 to: 27}) new ] valueCoveringAll:
		{29 to: 31}) initializeWith:
		(aMarsRover
			cover: (49 to: 58)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 47}.! !
!Behavior method!
initializeWith: aMarsRover
	[
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (17 to: 26)) add:
		(self coverAll:
			{47 to: 50}) ] valueCoveringAll:
		{41 to: 44}.
	(rover _ aMarsRover
		cover: (63 to: 72)
		declaredAt: (17 to: 26))
		cover: (54 to: 58)
		declaredAt: (54 to: 58).
	(changesRegister _ [
	(OrderedCollection
		cover: (95 to: 111)
		declaredAt: (95 to: 111)) new ] valueCoveringAll:
		{113 to: 115})
		cover: (76 to: 90)
		declaredAt: (76 to: 90).! !
!Behavior method!
add: aRoverObserver
	[
	(observerCollection
		cover: (22 to: 39)
		declaredAt: (22 to: 39)) add:
		(aRoverObserver
			cover: (46 to: 59)
			declaredAt: (6 to: 19)) ] valueCoveringAll:
		{41 to: 44}.
	[
	(aRoverObserver
		cover: (63 to: 76)
		declaredAt: (6 to: 19))
		provideStartingPosition:
			(position
				cover: (103 to: 110)
				declaredAt: (103 to: 110))
		andDirection:
			([
			([
			(head
				cover: (126 to: 129)
				declaredAt: (126 to: 129)) class ] valueCoveringAll:
				{131 to: 135}) cardinalPoint ] valueCoveringAll:
				{137 to: 149}) ] valueCoveringAll:
		{78 to: 101. 112 to: 124}.! !
!Behavior method!
provideStartingPosition: aPosition andDirection: aDirection
	(lastKnownPosition _ aPosition
		cover: (82 to: 90)
		declaredAt: (26 to: 34))
		cover: (62 to: 78)
		declaredAt: (62 to: 78).
	(lastKnownDirection _ aDirection
		cover: (116 to: 125)
		declaredAt: (50 to: 59))
		cover: (95 to: 112)
		declaredAt: (95 to: 112).! !
!Behavior method!
isEmpty
	^ [
	(changesRegister
		cover: (11 to: 25)
		declaredAt: (11 to: 25)) isEmpty ] valueCoveringAll:
		{27 to: 33}.! !

!testRun: #LogTest #test01LogDeMarsRoverQueNoSeMueveEsVacio stamp: 'sc 6/9/2021 16:43:55'!
PASSED!
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{305 to: 308}) signalInvalidCommand ] valueCoveringAll:
		{310 to: 329}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.
	[
	(self coverAll:
		{41 to: 44}) updateObservers ] valueCoveringAll:
		{46 to: 60}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	(position _ [
	(position
		cover: (14 to: 21)
		declaredAt: (14 to: 21)) +
		([
		(0 coverAll:
			{38 to: 38}) @
			(1 coverAll:
				{40 to: 40}) ] valueCoveringAll:
			{39 to: 39}) ] valueCoveringAll:
		{35 to: 35})
		cover: (26 to: 33)
		declaredAt: (14 to: 21).! !
!Behavior method!
updateObservers
	[
	(observerCollection
		cover: (19 to: 36)
		declaredAt: (19 to: 36)) do: [ :aRoverObserver |
		[
		(aRoverObserver
			cover: (59 to: 72)
			declaredAt: (43 to: 56)) update ] valueCoveringAll:
			{74 to: 79} ]] valueCoveringAll:
		{38 to: 40}.! !
!Behavior method!
update
	[
	(rover
		cover: (9 to: 13)
		declaredAt: (9 to: 13)) updateObserverPosition:
		(self coverAll:
			{39 to: 42}) ] valueCoveringAll:
		{15 to: 37}.! !
!Behavior method!
updateObserverPosition: aWindow
	[
	(aWindow
		cover: (35 to: 41)
		declaredAt: (25 to: 31)) registerPosition:
		(position
			cover: (61 to: 68)
			declaredAt: (61 to: 68)) ] valueCoveringAll:
		{43 to: 59}.! !
!Behavior method!
registerPosition: aPosition
	self.
	[
	([
	(lastKnownPosition
		cover: (31 to: 47)
		declaredAt: (31 to: 47)) =
		(aPosition
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{49 to: 49}) ifFalse: [
		[
		(changesRegister
			cover: (73 to: 87)
			declaredAt: (73 to: 87)) add:
			([
			(aPosition
				cover: (94 to: 102)
				declaredAt: (19 to: 27)) asString ] valueCoveringAll:
				{104 to: 111}) ] valueCoveringAll:
			{89 to: 92}.
		(lastKnownPosition _ aPosition
			cover: (138 to: 146)
			declaredAt: (19 to: 27))
			cover: (116 to: 132)
			declaredAt: (31 to: 47) ]] valueCoveringAll:
		{61 to: 68}.! !
!Behavior method!
size
	^ [
	(changesRegister
		cover: (8 to: 22)
		declaredAt: (8 to: 22)) size ] valueCoveringAll:
		{24 to: 27}.! !
!Behavior method!
at: aPosition
	^ [
	(changesRegister
		cover: (17 to: 31)
		declaredAt: (17 to: 31)) at:
		(aPosition
			cover: (37 to: 45)
			declaredAt: (5 to: 13)) ] valueCoveringAll:
		{33 to: 35}.! !

!testRun: #LogTest #test02LogDeMarsRoverQueSeMueveUnaPosicionHaciaAdelanteLaRegistra stamp: 'sc 6/9/2021 16:43:56'!
PASSED!

!testRun: #LogTest #test03LogDeMarsRoverQueSeMueveDosPosicionesHaciaAdelanteLasRegistra stamp: 'sc 6/9/2021 16:43:56'!
PASSED!

!testRun: #LogTest #test04LogDeMarsRoverQueSeMueveTresPosicionesHaciaAdelanteLasRegistra stamp: 'sc 6/9/2021 16:43:56'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.
	[
	(self coverAll:
		{43 to: 46}) updateObservers ] valueCoveringAll:
		{48 to: 62}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	(position _ [
	(position
		cover: (14 to: 21)
		declaredAt: (14 to: 21)) +
		([
		(0 coverAll:
			{38 to: 38}) @
			(-1 coverAll:
				{40 to: 41}) ] valueCoveringAll:
			{39 to: 39}) ] valueCoveringAll:
		{35 to: 35})
		cover: (26 to: 33)
		declaredAt: (14 to: 21).! !

!testRun: #LogTest #test05LogDeMarsRoverQueSeMueveParaAdelanteYLuegoHaciaAtrasRegistraLasPosiciones stamp: 'sc 6/9/2021 16:43:56'!
PASSED!
!Behavior method!
newWith: aMarsRover
	self coverAll:
		{24 to: 27}.
	^ [
	([ self new ] valueCoveringAll:
		{29 to: 31}) initializeWith:
		(aMarsRover
			cover: (49 to: 58)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 47}.! !

!testRun: #LogTest #test06LogDeMarsRoverQueNoCambiaSuDireccionTieneLogDeDireccionesVacio stamp: 'sc 6/9/2021 16:43:56'!
PASSED!
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.
	[
	(self coverAll:
		{41 to: 44}) updateObservers ] valueCoveringAll:
		{46 to: 60}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	(head _ [
	(MarsRoverHeadingEast
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !
!Behavior method!
update
	[
	(rover
		cover: (9 to: 13)
		declaredAt: (9 to: 13)) updateObserverDirection:
		(self coverAll:
			{40 to: 43}) ] valueCoveringAll:
		{15 to: 38}.! !
!Behavior method!
updateObserverDirection: aWindow
	[
	(aWindow
		cover: (36 to: 42)
		declaredAt: (26 to: 32)) registerDirection:
		([
		([
		(head
			cover: (63 to: 66)
			declaredAt: (63 to: 66)) class ] valueCoveringAll:
			{68 to: 72}) cardinalPoint ] valueCoveringAll:
			{74 to: 86}) ] valueCoveringAll:
		{44 to: 61}.! !
!Behavior method!
registerDirection: aDirection
	[
	([
	(lastKnownDirection
		cover: (32 to: 49)
		declaredAt: (32 to: 49)) =
		(aDirection
			cover: (53 to: 62)
			declaredAt: (20 to: 29)) ] valueCoveringAll:
		{51 to: 51}) ifFalse: [
		[
		(changesRegister
			cover: (76 to: 90)
			declaredAt: (76 to: 90)) add:
			([
			(aDirection
				cover: (97 to: 106)
				declaredAt: (20 to: 29)) asString ] valueCoveringAll:
				{108 to: 115}) ] valueCoveringAll:
			{92 to: 95}.
		(lastKnownDirection _ aDirection
			cover: (142 to: 151)
			declaredAt: (20 to: 29))
			cover: (120 to: 137)
			declaredAt: (32 to: 49) ]] valueCoveringAll:
		{64 to: 71}.! !

!testRun: #LogTest #test07LogDeMarsRoverQueCambiaSuDireccionRegistraElCambio stamp: 'sc 6/9/2021 16:43:56'!
PASSED!
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	(head _ [
	(MarsRoverHeadingSouth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !

!testRun: #LogTest #test08LogDeMarsRoverQueCambiaSuDireccionDosVecesRegistraAmbosCambios stamp: 'sc 6/9/2021 16:43:57'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.
	[
	(self coverAll:
		{39 to: 42}) updateObservers ] valueCoveringAll:
		{44 to: 58}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
headNorth
	(head _ [
	(MarsRoverHeadingNorth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !

!testRun: #LogTest #test09LogDeMarsRoverQueCambiaSuDireccionParaDiferentesLadosRegistraAmbosCambios stamp: 'sc 6/9/2021 16:43:57'!
PASSED!
!Behavior method!
update
	[
	(rover
		cover: (9 to: 13)
		declaredAt: (9 to: 13)) updateObserverDirection:
		(self coverAll:
			{40 to: 43}) ] valueCoveringAll:
		{15 to: 38}.
	[
	(rover
		cover: (47 to: 51)
		declaredAt: (9 to: 13)) updateObserverPosition:
		(self coverAll:
			{77 to: 80}) ] valueCoveringAll:
		{53 to: 75}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	(position _ [
	(position
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) +
		([
		(1 coverAll:
			{37 to: 37}) @
			(0 coverAll:
				{39 to: 39}) ] valueCoveringAll:
			{38 to: 38}) ] valueCoveringAll:
		{34 to: 34})
		cover: (25 to: 32)
		declaredAt: (13 to: 20).! !

!testRun: #LogTest #test10LogDeMarsRoverRegistraUnMovimientoYCambioDeDireccion stamp: 'sc 6/9/2021 16:43:57'!
PASSED!

!testRun: #LogTest #test11SePuedenTenerDosLogsFuncionandoSobreUnMismoRover stamp: 'sc 6/9/2021 16:43:57'!
PASSED!

----SNAPSHOT----(9 June 2021 16:44:45) CuisUniversity-4532.image priorSource: 17486104!