----End fileIn of F:\Computacion\Ingenier√≠a de Software 1\Ejercicios con nota\2021-1c\17-Portfolio 1\Portfolio-Solucion.st----!

TestCase subclass: #TestsEjercicio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TestsEjercicio category: 'Portfolio-2' stamp: 'BW 5/31/2021 21:41:59'!
TestCase subclass: #TestsEjercicio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TestsEjercicio subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #PortfolioTest category: 'Portfolio-2' stamp: 'BW 5/31/2021 21:42:11'!
TestsEjercicio subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TestsEjercicio subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-2' stamp: 'BW 5/31/2021 21:42:21'!
TestsEjercicio subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TestsEjercicio subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferenceTest category: 'Portfolio-2' stamp: 'BW 5/31/2021 21:42:50'!
TestsEjercicio subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Transference category: 'Portfolio-2' stamp: 'BW 5/31/2021 21:45:11'!
Object subclass: #Transference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!TransferenceTest methodsFor: 'no messages' stamp: 'BW 5/31/2021 21:45:03'!
test01transferenceValueAppliesCorrectlyInEnvolvedAccounts
	|account1 account2 |

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: account1 balance equals: -10.
	self assert: account2 balance equals: 10.! !

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 21:45:14'!
ERROR!
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 21:45:22'!
from: aReceptiveAccount to: aReceptiveAccount2 for: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aReceptiveAccount to: aReceptiveAccount2 for: aSmallInteger ! !
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 21:46:36' prior: 51007776!
from: anOriginAccount to: aDestinationAccount for: aValue

	Deposit register: aValue on: aDestinationAccount.
	Withdraw  register: aValue on: anOriginAccount .! !

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 21:46:37'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 21:46:37'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 21:46:48'!
test02valueCannotBeNegative
	|account1 account2 |

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self 
		should: [ Transference from: account1 to: account2 for: -10 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transference ceroOrNegativeTransactionErrorMessage equals: anError messageText.
			self assert: account1 balance equals: 0. 
			self assert: account2 balance equals: 0 ].
		! !

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 21:46:50'!
FAILURE!
!Transference class methodsFor: 'nil' stamp: 'BW 5/31/2021 21:47:13'!
ceroOrNegativeTransactionErrorMessage
	^'error: transaction value must be positive'! !
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 21:47:34' prior: 51007788!
from: anOriginAccount to: aDestinationAccount for: aValue

	aValue < 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].

	Deposit register: aValue on: aDestinationAccount.
	Withdraw  register: aValue on: anOriginAccount .! !

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 21:47:38'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 21:47:38'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 21:47:58'!
test03valueCannotBeZero
	|account1 account2 |

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self 
		should: [ Transference from: account1 to: account2 for: 0 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transference ceroOrNegativeTransactionErrorMessage equals: anError messageText.
			self assert: account1 balance equals: 0. 
			self assert: account2 balance equals: 0 ].
		
	! !
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 21:48:10' prior: 51007830!
from: anOriginAccount to: aDestinationAccount for: aValue

	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].

	Deposit register: aValue on: aDestinationAccount.
	Withdraw  register: aValue on: anOriginAccount .! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 21:48:40'!
test04transferenceKnowsInvolvedAccountsAndValue
	|account1 account2 transference|

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transference := Transference from: account1 to: account2 for: 10.
	
	self assert: transference value equals: 10.
	self assert: (transference originAccount = account1).
	self assert: (transference destinationAccount = account2).! !

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 21:48:44'!
FAILURE!

Object subclass: #Transference
	instanceVariableNames: 'value origin destination'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Transference category: 'Portfolio-2' stamp: 'BW 5/31/2021 21:49:31'!
Object subclass: #Transference
	instanceVariableNames: 'value origin destination'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!Transference methodsFor: 'no messages' stamp: 'BW 5/31/2021 21:49:42' overrides: 16881508!
value
	^value! !
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 21:50:15'!
originAccount
	^origin! !
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 21:50:23'!
destinationAccount
	^destination! !
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 21:51:21' prior: 51007866!
from: anOriginAccount to: aDestinationAccount for: aValue

	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].

	Deposit register: aValue on: aDestinationAccount.
	Withdraw  register: aValue on: anOriginAccount .
	
	^self new origin: anOriginAccount destination: aDestinationAccount value: aValue.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 21:52:08'!
origin: anOriginAccount destination: aDestinationAccount value: aValue
	origin:= anOriginAccount .
	destination := aDestinationAccount.
	value:= aValue.
! !

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 21:52:12'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 21:52:12'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 21:52:12'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 21:52:12'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 21:53:40'!
test05transferenceIsRegisteredInInvolvedAccounts
	|account1 account2 transference|

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transference := Transference from: account1 to: account2 for: 10.
	
	self assert: (account1 hasRegistered: transference).
	self assert: (account2 hasRegistered: transference).	
! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 21:54:55' prior: 51007957!
test05transferenceIsRegisteredInInvolvedAccounts
	|account1 account2 transference|

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transference := Transference from: account1 to: account2 for: 10.
	
	self assert: (account1 hasRegistered: transference origin).
	self assert: (account2 hasRegistered: transference destination).	
! !

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 21:55:00'!
ERROR!
!Transference methodsFor: 'zzzz' stamp: 'BW 5/31/2021 21:55:16'!
origin
	self shouldBeImplemented.
	^origin! !
!Transference methodsFor: 'zzzz' stamp: 'BW 5/31/2021 21:55:21' prior: 51007988!
origin
	^origin! !

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 21:55:30'!
FAILURE!
!Transference methodsFor: 'zzzz' stamp: 'BW 5/31/2021 21:56:02'!
destination
	^destination! !

!classDefinition: #DepositTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 21:58:13'!
Object subclass: #DepositTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #WithdrawTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 21:58:27'!
Object subclass: #WithdrawTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 21:58:02' prior: 51007922!
from: anOriginAccount to: aDestinationAccount for: aValue

	| aDepositTransference aWithdrawTransference |
	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].

	aDepositTransference := DepositTransference registerOn: aDestinationAccount.
	aWithdrawTransference := WithdrawTransference  registerOn: anOriginAccount.
	
	^self new origin: aWithdrawTransference destination: aDepositTransference value: aValue.! !
!WithdrawTransference class methodsFor: 'no messages' stamp: 'BW 5/31/2021 22:00:39'!
registerOn: anOriginAccount
	
	| depositTransference |
	depositTransference := self new initializeFor: anOriginAccount.
	anOriginAccount register: depositTransference.
	^depositTransference.! !
!WithdrawTransference methodsFor: 'no messages' stamp: 'BW 5/31/2021 22:01:17'!
initializeFor: anOriginAccount! !

!classDefinition: #WithdrawTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 22:02:58'!
Object subclass: #WithdrawTransference
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!WithdrawTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:02:57' prior: 51008044!
initializeFor: anOriginAccount
	account := anOriginAccount.! !
!DepositTransference class methodsFor: 'no messages' stamp: 'BW 5/31/2021 22:03:39'!
registerOn: aDestinationAccount
	
	| withdrawTransference |
	withdrawTransference := self new initializeFor: aDestinationAccount.
	aDestinationAccount register: withdrawTransference.
	^withdrawTransference.! !

!classDefinition: #DepositTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 22:04:10'!
Object subclass: #DepositTransference
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!DepositTransference methodsFor: 'no messages' stamp: 'BW 5/31/2021 22:04:09'!
initializeFor: aDestinationAccount
	account := aDestinationAccount.! !
!DepositTransference methodsFor: 'nil' stamp: 'BW 5/31/2021 22:04:55'!
account
	^account! !
!WithdrawTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:05:11'!
account
	^account! !
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:06:36' prior: 51007913!
originAccount
	^origin account! !
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:06:42' prior: 51007917!
destinationAccount
	^destination account! !

!methodRemoval: Transference #destination stamp: 'BW 5/31/2021 22:07:12'!
destination
	^destination!

!methodRemoval: Transference #origin stamp: 'BW 5/31/2021 22:07:15'!
origin
	^origin!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 22:07:35'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 22:07:38'!
ERROR!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 22:07:38'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:08:09'!
origin 
	^origin! !
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:08:16'!
destination
	^destination! !

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 22:08:29'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:08:29'!
ERROR!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 22:08:29'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 22:08:29'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 22:08:29'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 22:08:29'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:08:29'!
ERROR!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:10:08'!
ERROR!

AccountTransaction subclass: #WithdrawTransference
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #WithdrawTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 22:11:08'!
AccountTransaction subclass: #WithdrawTransference
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

AccountTransaction subclass: #DepositTransference
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #DepositTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 22:11:20'!
AccountTransaction subclass: #DepositTransference
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!DepositTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:11:40' overrides: 51007606!
affectBalance: aBalance

	^aBalance + self value ! !
!WithdrawTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:11:59' overrides: 51007606!
affectBalance: aBalance

	^aBalance - self value! !

!classDefinition: #DepositTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 22:12:20'!
AccountTransaction subclass: #DepositTransference
	instanceVariableNames: 'account transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!DepositTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:12:18' overrides: 51007602!
value 
	^transference value! !

!classDefinition: #WithdrawTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 22:12:27'!
AccountTransaction subclass: #WithdrawTransference
	instanceVariableNames: 'account transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!WithdrawTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:12:26' overrides: 51007602!
value 
	^transference value! !
!WithdrawTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:13:03'!
initializeFor: anOriginAccount inTransference: aTransference
	account := anOriginAccount.
	transference := aTransference.! !

!methodRemoval: WithdrawTransference #initializeFor: stamp: 'BW 5/31/2021 22:13:08'!
initializeFor: anOriginAccount
	account := anOriginAccount.!
!DepositTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:13:28'!
initializeFor: aDestinationAccount inTransference: aTransference
	account := aDestinationAccount.
	transference := aTransference.! !
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 22:13:57' prior: 51008018!
from: anOriginAccount to: aDestinationAccount for: aValue

	| aDepositTransference aWithdrawTransference |
	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].

	aDepositTransference := DepositTransference registerOn: aDestinationAccount inTransference: self.
	aWithdrawTransference := WithdrawTransference  registerOn: anOriginAccount inTransference: self.
	
	^self new origin: aWithdrawTransference destination: aDepositTransference value: aValue.! !
!DepositTransference class methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:14:51'!
registerOn: aDestinationAccount inTransference: aTransference 
	
	| withdrawTransference |
	withdrawTransference := self new initializeFor: aDestinationAccount.
	aDestinationAccount register: withdrawTransference.
	^withdrawTransference.! !
!WithdrawTransference class methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:14:51'!
registerOn: anOriginAccount inTransference: aTransference 
	
	| depositTransference |
	depositTransference := self new initializeFor: anOriginAccount.
	anOriginAccount register: depositTransference.
	^depositTransference.! !

!methodRemoval: DepositTransference class #registerOn: stamp: 'BW 5/31/2021 22:14:51'!
registerOn: aDestinationAccount
	
	| withdrawTransference |
	withdrawTransference := self new initializeFor: aDestinationAccount.
	aDestinationAccount register: withdrawTransference.
	^withdrawTransference.!

!methodRemoval: WithdrawTransference class #registerOn: stamp: 'BW 5/31/2021 22:14:51'!
registerOn: anOriginAccount
	
	| depositTransference |
	depositTransference := self new initializeFor: anOriginAccount.
	anOriginAccount register: depositTransference.
	^depositTransference.!
!WithdrawTransference class methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:16:14' prior: 51008266!
registerOn: anOriginAccount inTransference: aTransference 
	
	| depositTransference |
	depositTransference := self new initializeFor: anOriginAccount inTransference: aTransference.
	anOriginAccount register: depositTransference.
	^depositTransference.! !
!DepositTransference class methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:16:27' prior: 51008255!
registerOn: aDestinationAccount inTransference: aTransference 
	
	| withdrawTransference |
	withdrawTransference := self new initializeFor: aDestinationAccount inTransference: aTransference.
	aDestinationAccount register: withdrawTransference.
	^withdrawTransference.! !

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:16:33'!
ERROR!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 22:16:33'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 22:16:33'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 22:16:33'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 22:16:33'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:16:33'!
ERROR!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:19:02'!
ERROR!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:19:02'!
ERROR!

transactions!
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 22:25:13' prior: 51008237!
from: anOriginAccount to: aDestinationAccount for: aValue

	| aDepositTransference aWithdrawTransference newTransference |
	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].
	
	newTransference := self new origin: aWithdrawTransference destination: aDepositTransference value: aValue.
	
	aDepositTransference := DepositTransference registerOn: aDestinationAccount inTransference: self.
	aWithdrawTransference := WithdrawTransference  registerOn: anOriginAccount inTransference: self.
	
	
	
	^newTransference.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:26:11'!
value: aValue
	value := aValue.
! !
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:26:27'!
initializeFor: aValue
	value := aValue.
! !

!methodRemoval: Transference #value: stamp: 'BW 5/31/2021 22:26:27'!
value: aValue
	value := aValue.
!
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 22:26:43' prior: 51008349!
from: anOriginAccount to: aDestinationAccount for: aValue

	| aDepositTransference aWithdrawTransference newTransference |
	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].
	
	newTransference := self new initializeFor: aValue.
	
	aDepositTransference := DepositTransference registerOn: aDestinationAccount inTransference: self.
	aWithdrawTransference := WithdrawTransference  registerOn: anOriginAccount inTransference: self.
	
	
	
	^newTransference.! !
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 22:27:34' prior: 51008381!
from: anOriginAccount to: aDestinationAccount for: aValue

	| aDepositTransference aWithdrawTransference newTransference |
	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].
	
	aDepositTransference := DepositTransference registerOn: aDestinationAccount.
	aWithdrawTransference := WithdrawTransference  registerOn: anOriginAccount .
	
	newTransference := self new origin: aWithdrawTransference destination: aDepositTransference value: aValue.
	
	^newTransference.! !
!DepositTransference class methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:28:42' prior: 51008307!
registerOn: aDestinationAccount inTransference: aTransference 
	
	| withdrawTransference |
	withdrawTransference := self new initializeFor: aDestinationAccount.
	aDestinationAccount register: withdrawTransference.
	^withdrawTransference.! !
!WithdrawTransference class methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:28:47' prior: 51008295!
registerOn: anOriginAccount inTransference: aTransference 
	
	| depositTransference |
	depositTransference := self new initializeFor: anOriginAccount.
	anOriginAccount register: depositTransference.
	^depositTransference.! !
!DepositTransference class methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:29:07'!
registerOn: aDestinationAccount  
	
	| withdrawTransference |
	withdrawTransference := self new initializeFor: aDestinationAccount.
	aDestinationAccount register: withdrawTransference.
	^withdrawTransference.! !
!WithdrawTransference class methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:29:07'!
registerOn: anOriginAccount  
	
	| depositTransference |
	depositTransference := self new initializeFor: anOriginAccount.
	anOriginAccount register: depositTransference.
	^depositTransference.! !

!methodRemoval: DepositTransference class #registerOn:inTransference: stamp: 'BW 5/31/2021 22:29:07'!
registerOn: aDestinationAccount inTransference: aTransference 
	
	| withdrawTransference |
	withdrawTransference := self new initializeFor: aDestinationAccount.
	aDestinationAccount register: withdrawTransference.
	^withdrawTransference.!

!methodRemoval: WithdrawTransference class #registerOn:inTransference: stamp: 'BW 5/31/2021 22:29:07'!
registerOn: anOriginAccount inTransference: aTransference 
	
	| depositTransference |
	depositTransference := self new initializeFor: anOriginAccount.
	anOriginAccount register: depositTransference.
	^depositTransference.!
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 22:29:49' prior: 51008400!
from: anOriginAccount to: aDestinationAccount for: aValue

	| aDepositTransference aWithdrawTransference newTransference |
	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].
	
	aDepositTransference := DepositTransference registerOn: aDestinationAccount.
	aWithdrawTransference := WithdrawTransference  registerOn: anOriginAccount.
	
	newTransference := self new origin: aWithdrawTransference destination: aDepositTransference value: aValue.
	
	^newTransference.! !
!Transference class methodsFor: 'instance creation' stamp: 'BW 5/31/2021 22:29:58' prior: 51008481!
from: anOriginAccount to: aDestinationAccount for: aValue

	| aDepositTransference aWithdrawTransference newTransference |
	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].
	
	aDepositTransference := DepositTransference registerOn: aDestinationAccount.
	aWithdrawTransference := WithdrawTransference registerOn: anOriginAccount.
	
	newTransference := self new origin: aWithdrawTransference destination: aDepositTransference value: aValue.
	
	^newTransference.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:30:17' prior: 51007935!
origin: anOriginAccount destination: aDestinationAccount value: aValue
	origin := anOriginAccount .
	destination := aDestinationAccount.
	value := aValue.
! !
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:30:38' prior: 51008519!
origin: anOriginAccount destination: aDestinationAccount value: aValue
	origin := anOriginAccount .
	destination := aDestinationAccount.
	value := aValue.
	
	origin setTransference: self.
	destination setTransference: self.! !
!DepositTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:31:09'!
setTransference: aTransference
	transference := aTransference.! !
!WithdrawTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:31:13'!
setTransference: aTransference
	transference := aTransference.! !

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:31:55'!
ERROR!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 22:31:55'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 22:31:55'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 22:31:55'!
ERROR!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 22:31:55'!
ERROR!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:32:03'!
ERROR!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:32:03'!
ERROR!

!methodRemoval: DepositTransference #initializeFor:inTransference: stamp: 'BW 5/31/2021 22:32:14'!
initializeFor: aDestinationAccount inTransference: aTransference
	account := aDestinationAccount.
	transference := aTransference.!
!WithdrawTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:32:36'!
initializeFor: anOriginAccount
	account := anOriginAccount.! !

!methodRemoval: WithdrawTransference #initializeFor:inTransference: stamp: 'BW 5/31/2021 22:32:38'!
initializeFor: anOriginAccount inTransference: aTransference
	account := anOriginAccount.
	transference := aTransference.!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:32:41'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 22:32:41'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 22:32:41'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 22:32:41'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 22:32:41'!
PASSED!

TestsEjercicio subclass: #SummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #SummaryTest category: 'Portfolio-2' stamp: 'BW 5/31/2021 22:34:30'!
TestsEjercicio subclass: #SummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!SummaryTest methodsFor: 'no messages' stamp: 'BW 5/31/2021 22:35:12'!
test01
	|account|
	account := ReceptiveAccount new.
	self assert: account accountSummary equals: (OrderedCollection new).! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:37:49' prior: 51008620!
test01
	|account|
	account := ReceptiveAccount new.
	self assert: account accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:38:06'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:38:20'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:38:44' prior: 51008636!
accountSummary
	^OrderedCollection with: 'Balance = 0'.! !

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:38:45'!
PASSED!

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:38:45'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:39:44'!
test02
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: account accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:39:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:40:57' prior: 51008641!
accountSummary
	self balance = 0 ifTrue: [^OrderedCollection with: 'Balance = 0'].
	^OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10'.
	! !

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:40:58'!
PASSED!

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:40:58'!
PASSED!

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:40:58'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:41:06'!
test03
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: account accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:41:25' prior: 51008677!
test03
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:41:47' prior: 51008687!
test03
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 10' with: 'Balance = 148').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:42:06' prior: 51008698!
test03
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 138' with: 'Balance = 148').! !

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:42:09'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:42:39' prior: 51008662!
accountSummary

	| summary |
	summary := OrderedCollection new.
	self balance = 0 ifTrue: [^OrderedCollection with: 'Balance = 0'].
	^OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10'.
	! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:44:52' prior: 51008724!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction summaryLine].
	
	summary add: ('Balance = ', self balance asString).
	! !

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:44:56'!
ERROR!
!Deposit methodsFor: 'asdglkjsdg' stamp: 'BW 5/31/2021 22:45:11'!
summaryLine
	self shouldBeImplemented.! !
!Deposit methodsFor: 'asdglkjsdg' stamp: 'BW 5/31/2021 22:45:40' prior: 51008745!
summaryLine
	^'DepÔøΩsito por ', self value asString.! !

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:45:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:46:06' prior: 51008734!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction summaryLine].
	
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 22:46:11'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 22:46:11'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 22:46:11'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 22:46:11'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 22:46:11'!
PASSED!

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:46:13'!
PASSED!

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:46:13'!
PASSED!

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:46:13'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:46:45'!
test04
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'Balance = -10').! !

!testRun: #SummaryTest #test04 stamp: 'BW 5/31/2021 22:47:01'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:50:14' prior: 51008756!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [summary add: aTransaction summaryLine]
							 ifFalse: [summary add: 'ExtracciÔøΩn por 10'].
		].
	
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #SummaryTest #test04 stamp: 'BW 5/31/2021 22:50:20'!
PASSED!

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:50:20'!
PASSED!

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:50:20'!
PASSED!

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:50:20'!
PASSED!

!testRun: #SummaryTest #test04 stamp: 'BW 5/31/2021 22:50:20'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:50:54'!
test05
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	Withdraw register: 32 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'ExtracciÔøΩn por 32' with: 'Balance = -42').! !

!testRun: #SummaryTest #test05 stamp: 'BW 5/31/2021 22:50:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:51:25' prior: 51008802!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [summary add: aTransaction summaryLine]
							 ifFalse: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString].
		].
	
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #SummaryTest #test05 stamp: 'BW 5/31/2021 22:51:41'!
PASSED!

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:51:41'!
PASSED!

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:51:41'!
PASSED!

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:51:41'!
PASSED!

!testRun: #SummaryTest #test04 stamp: 'BW 5/31/2021 22:51:41'!
PASSED!

!testRun: #SummaryTest #test05 stamp: 'BW 5/31/2021 22:51:41'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:53:02'!
test06
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 10'  with: 'Balance = -10').! !

!testRun: #SummaryTest #test06 stamp: 'BW 5/31/2021 22:53:15'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:55:04' prior: 51008840!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [summary add: aTransaction summaryLine].
							  (aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString]
							  ifFalse: [summary add: 'Salida por transferencia de 10'].
		].
	
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #SummaryTest #test06 stamp: 'BW 5/31/2021 22:55:06'!
PASSED!

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:55:06'!
PASSED!

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:55:06'!
FAILURE!

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:55:06'!
FAILURE!

!testRun: #SummaryTest #test04 stamp: 'BW 5/31/2021 22:55:06'!
PASSED!

!testRun: #SummaryTest #test05 stamp: 'BW 5/31/2021 22:55:06'!
PASSED!

!testRun: #SummaryTest #test06 stamp: 'BW 5/31/2021 22:55:06'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:55:57' prior: 51008881!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [summary add: aTransaction summaryLine].
							  (aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString].
							  (aTransaction isKindOf: WithdrawTransference) ifTrue: [summary add: 'Salida por transferencia de 10'].
		].
	
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:56:06'!
PASSED!

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:56:06'!
PASSED!

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:56:06'!
PASSED!

!testRun: #SummaryTest #test04 stamp: 'BW 5/31/2021 22:56:06'!
PASSED!

!testRun: #SummaryTest #test05 stamp: 'BW 5/31/2021 22:56:06'!
PASSED!

!testRun: #SummaryTest #test06 stamp: 'BW 5/31/2021 22:56:06'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:56:28'!
test07
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 10' with: 'Salida por transferencia de 20'  with: 'Balance = -30').! !

!testRun: #SummaryTest #test07 stamp: 'BW 5/31/2021 22:56:29'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:56:57' prior: 51008914!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [summary add: aTransaction summaryLine].
							  (aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString].
							  (aTransaction isKindOf: WithdrawTransference) ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString].
		].
	
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:57:01'!
PASSED!

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:57:01'!
PASSED!

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:57:01'!
PASSED!

!testRun: #SummaryTest #test04 stamp: 'BW 5/31/2021 22:57:01'!
PASSED!

!testRun: #SummaryTest #test05 stamp: 'BW 5/31/2021 22:57:02'!
PASSED!

!testRun: #SummaryTest #test06 stamp: 'BW 5/31/2021 22:57:02'!
PASSED!

!testRun: #SummaryTest #test07 stamp: 'BW 5/31/2021 22:57:02'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:57:28'!
test08
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 10'  with: 'Balance = 10').! !

!testRun: #SummaryTest #test08 stamp: 'BW 5/31/2021 22:57:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:58:09' prior: 51008962!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [summary add: aTransaction summaryLine].
							  (aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString].
							  (aTransaction isKindOf: WithdrawTransference) ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString].
							  (aTransaction isKindOf: DepositTransference) ifTrue: [summary add: 'Salida por transferencia de 10'].
		].
	
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:58:14'!
PASSED!

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:58:14'!
PASSED!

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:58:14'!
PASSED!

!testRun: #SummaryTest #test04 stamp: 'BW 5/31/2021 22:58:14'!
PASSED!

!testRun: #SummaryTest #test05 stamp: 'BW 5/31/2021 22:58:14'!
PASSED!

!testRun: #SummaryTest #test06 stamp: 'BW 5/31/2021 22:58:14'!
PASSED!

!testRun: #SummaryTest #test07 stamp: 'BW 5/31/2021 22:58:14'!
PASSED!

!testRun: #SummaryTest #test08 stamp: 'BW 5/31/2021 22:58:14'!
FAILURE!

!testRun: #SummaryTest #test08 stamp: 'BW 5/31/2021 22:58:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:58:32' prior: 51009011!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [summary add: aTransaction summaryLine].
							  (aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString].
							  (aTransaction isKindOf: WithdrawTransference) ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString].
							  (aTransaction isKindOf: DepositTransference) ifTrue: [summary add: 'Entrada por transferencia de 10'].
		].
	
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:58:36'!
PASSED!

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:58:36'!
PASSED!

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:58:36'!
PASSED!

!testRun: #SummaryTest #test04 stamp: 'BW 5/31/2021 22:58:36'!
PASSED!

!testRun: #SummaryTest #test05 stamp: 'BW 5/31/2021 22:58:37'!
PASSED!

!testRun: #SummaryTest #test06 stamp: 'BW 5/31/2021 22:58:37'!
PASSED!

!testRun: #SummaryTest #test07 stamp: 'BW 5/31/2021 22:58:37'!
PASSED!

!testRun: #SummaryTest #test08 stamp: 'BW 5/31/2021 22:58:37'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 22:59:03'!
test09
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 10' with: 'Entrada por transferencia de 20' with: 'Balance = 30').! !

!testRun: #SummaryTest #test09 stamp: 'BW 5/31/2021 22:59:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 22:59:21' prior: 51009054!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [summary add: aTransaction summaryLine].
							  (aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString].
							  (aTransaction isKindOf: WithdrawTransference) ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString].
							  (aTransaction isKindOf: DepositTransference) ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString].
		].
	
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #SummaryTest #test01 stamp: 'BW 5/31/2021 22:59:24'!
PASSED!

!testRun: #SummaryTest #test02 stamp: 'BW 5/31/2021 22:59:24'!
PASSED!

!testRun: #SummaryTest #test03 stamp: 'BW 5/31/2021 22:59:24'!
PASSED!

!testRun: #SummaryTest #test04 stamp: 'BW 5/31/2021 22:59:24'!
PASSED!

!testRun: #SummaryTest #test05 stamp: 'BW 5/31/2021 22:59:24'!
PASSED!

!testRun: #SummaryTest #test06 stamp: 'BW 5/31/2021 22:59:24'!
PASSED!

!testRun: #SummaryTest #test07 stamp: 'BW 5/31/2021 22:59:24'!
PASSED!

!testRun: #SummaryTest #test08 stamp: 'BW 5/31/2021 22:59:25'!
PASSED!

!testRun: #SummaryTest #test09 stamp: 'BW 5/31/2021 22:59:25'!
PASSED!

----SNAPSHOT----(31 May 2021 23:00:11) CuisUniversity-4532.image priorSource: 21607295!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:17:54'!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	self assert: account accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: SummaryTest #test01 stamp: 'BW 5/31/2021 23:17:54'!
test01
	|account|
	account := ReceptiveAccount new.
	self assert: account accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:18:15'!
test02SummaryRegistresSingeDeposit
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: account accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !

!methodRemoval: SummaryTest #test02 stamp: 'BW 5/31/2021 23:18:15'!
test02
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: account accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:18:30'!
test03SummaryRegistresMultipleDeposits
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 138' with: 'Balance = 148').! !

!methodRemoval: SummaryTest #test03 stamp: 'BW 5/31/2021 23:18:30'!
test03
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 138' with: 'Balance = 148').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:18:45'!
test04SummaryRegistresSingleWithdraw
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'Balance = -10').! !

!methodRemoval: SummaryTest #test04 stamp: 'BW 5/31/2021 23:18:45'!
test04
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'Balance = -10').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:19:00'!
test05SummaryRegistresMultipleWithdraws
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	Withdraw register: 32 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'ExtracciÔøΩn por 32' with: 'Balance = -42').! !

!methodRemoval: SummaryTest #test05 stamp: 'BW 5/31/2021 23:19:00'!
test05
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	Withdraw register: 32 on: account.
	self assert: account accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'ExtracciÔøΩn por 32' with: 'Balance = -42').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:19:22'!
test06SummaryRegistresSingeExitTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 10'  with: 'Balance = -10').! !

!methodRemoval: SummaryTest #test06 stamp: 'BW 5/31/2021 23:19:22'!
test06
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 10'  with: 'Balance = -10').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:19:45'!
test07SummaryRegistresMultipleExitTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 10' with: 'Salida por transferencia de 20'  with: 'Balance = -30').! !

!methodRemoval: SummaryTest #test07 stamp: 'BW 5/31/2021 23:19:45'!
test07
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 10' with: 'Salida por transferencia de 20'  with: 'Balance = -30').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:20:01'!
test08SummaryRegistresSingleEntryTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 10'  with: 'Balance = 10').! !

!methodRemoval: SummaryTest #test08 stamp: 'BW 5/31/2021 23:20:01'!
test08
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 10'  with: 'Balance = 10').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:20:14'!
test09SummaryRegistresMultipleEntryTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 10' with: 'Entrada por transferencia de 20' with: 'Balance = 30').! !

!methodRemoval: SummaryTest #test09 stamp: 'BW 5/31/2021 23:20:14'!
test09
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 10' with: 'Entrada por transferencia de 20' with: 'Balance = 30').!

AccountTransaction subclass: #TransferenceEnds
	instanceVariableNames: 'account transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferenceEnds category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:20:50'!
AccountTransaction subclass: #TransferenceEnds
	instanceVariableNames: 'account transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classRenamed: #TransferenceEnds as: #TransferenceEnd stamp: 'BW 5/31/2021 23:21:01'!
Smalltalk renameClassNamed: #TransferenceEnds as: #TransferenceEnd!

TransferenceEnd subclass: #DepositTransference
	instanceVariableNames: 'account transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

AccountTransaction subclass: #TransferenceEnd
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferenceEnd category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:21:27'!
AccountTransaction subclass: #TransferenceEnd
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TransferenceEnd subclass: #DepositTransference
	instanceVariableNames: 'account transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #DepositTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:21:35'!
TransferenceEnd subclass: #DepositTransference
	instanceVariableNames: 'account transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TransferenceEnd subclass: #WithdrawTransference
	instanceVariableNames: 'account transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #WithdrawTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:21:40'!
TransferenceEnd subclass: #WithdrawTransference
	instanceVariableNames: 'account transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #DepositTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:21:50'!
TransferenceEnd subclass: #DepositTransference
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #WithdrawTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:21:50'!
TransferenceEnd subclass: #WithdrawTransference
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferenceEnd category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:21:50'!
AccountTransaction subclass: #TransferenceEnd
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #DepositTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:21:59'!
TransferenceEnd subclass: #DepositTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #WithdrawTransference category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:21:59'!
TransferenceEnd subclass: #WithdrawTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferenceEnd category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:21:59'!
AccountTransaction subclass: #TransferenceEnd
	instanceVariableNames: 'account transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!TransferenceEnd methodsFor: 'no messages' stamp: 'BW 5/31/2021 23:22:13'!
account
	^account! !

!methodRemoval: DepositTransference #account stamp: 'BW 5/31/2021 23:22:16'!
account
	^account!

!methodRemoval: WithdrawTransference #account stamp: 'BW 5/31/2021 23:22:21'!
account
	^account!
!TransferenceEnd methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:22:30'!
initializeFor: anOriginAccount
	account := anOriginAccount.! !

!methodRemoval: DepositTransference #initializeFor: stamp: 'BW 5/31/2021 23:22:35'!
initializeFor: aDestinationAccount
	account := aDestinationAccount.!

!methodRemoval: WithdrawTransference #initializeFor: stamp: 'BW 5/31/2021 23:22:39'!
initializeFor: anOriginAccount
	account := anOriginAccount.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 5/31/2021 23:22:49'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 23:22:50'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 23:22:50'!
PASSED!
!TransferenceEnd methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:23:02'!
setTransference: aTransference
	transference := aTransference.! !

!methodRemoval: DepositTransference #setTransference: stamp: 'BW 5/31/2021 23:23:03'!
setTransference: aTransference
	transference := aTransference.!

!methodRemoval: WithdrawTransference #setTransference: stamp: 'BW 5/31/2021 23:23:15'!
setTransference: aTransference
	transference := aTransference.!
!TransferenceEnd methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:23:28' overrides: 51007602!
value 
	^transference value! !

!methodRemoval: WithdrawTransference #value stamp: 'BW 5/31/2021 23:23:29'!
value 
	^transference value!

!methodRemoval: DepositTransference #value stamp: 'BW 5/31/2021 23:23:33'!
value 
	^transference value!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 5/31/2021 23:23:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 5/31/2021 23:23:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 5/31/2021 23:23:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 5/31/2021 23:23:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 5/31/2021 23:23:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 23:23:37'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 23:23:37'!
PASSED!
!Withdraw methodsFor: 'nil' stamp: 'BW 5/31/2021 23:26:22'!
summaryLine
	^'ExtracciÔøΩn por ', self value asString.! !
!DepositTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:26:59'!
summaryLine
	^'Entrada de transferencia por ', self value asString.! !
!WithdrawTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:27:08'!
summaryLine
	^'Salida de transferencia por ', self value asString.! !
!WithdrawTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:27:36' prior: 51009793!
summaryLine
	^'Salida por transferencia de ', self value asString.! !
!DepositTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:27:44' prior: 51009788!
summaryLine
	^'Entrada por transferencia de ', self value asString.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 23:28:14' prior: 51009111!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction summaryLine].
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 5/31/2021 23:28:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 5/31/2021 23:28:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 5/31/2021 23:28:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 5/31/2021 23:28:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 5/31/2021 23:28:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 5/31/2021 23:28:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 5/31/2021 23:28:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 5/31/2021 23:28:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 5/31/2021 23:28:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 5/31/2021 23:28:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 5/31/2021 23:28:17'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 5/31/2021 23:28:18'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 5/31/2021 23:28:18'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 5/31/2021 23:28:18'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 5/31/2021 23:28:18'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 5/31/2021 23:28:18'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 23:28:18'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 23:28:18'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 23:28:18'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 23:28:18'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 23:28:18'!
PASSED!

TestsEjercicio subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferNetTest category: 'Portfolio-2' stamp: 'BW 5/31/2021 23:28:41'!
TestsEjercicio subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!TransferNetTest methodsFor: 'no messages' stamp: 'BW 5/31/2021 23:29:19'!
test01TransferNetIsZeroForNewAccount

	|account1 |
	account1 := ReceptiveAccount new.
	
	self assert: account1 transferNet equals: 'Neto de transferencias = 0'.! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:29:20'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 23:29:32'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 23:29:53' prior: 51009973!
transferNet
	^'Neto de transferencias = 0'! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:30:06'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:30:06'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:30:41'!
test02TransferNetRegistersASingeTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: account1 transferNet equals: 'Neto de transferencias = -10'.! !

!testRun: #TransferNetTest #test02TransferNetRegistersASingeTransference stamp: 'BW 5/31/2021 23:30:44'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 23:31:20' prior: 51009978!
transferNet
	self balance = 0 ifTrue: [^'Neto de transferencias = 0'].
	^'Neto de transferencias = -10'
	! !

!testRun: #TransferNetTest #test02TransferNetRegistersASingeTransference stamp: 'BW 5/31/2021 23:31:22'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:31:22'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeTransference stamp: 'BW 5/31/2021 23:31:22'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:31:46'!
test03

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: account1 transferNet equals: 'Neto de transferencias = -30'.! !

!testRun: #TransferNetTest #test03 stamp: 'BW 5/31/2021 23:31:49'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 23:34:17' prior: 51010004!
transferNet

	| neto |
	neto := 0.
	transactions do: [:aTransaction | neto := neto - aTransaction value].
	^'Neto de transferencias = ', neto asString.
	! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:34:25'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeTransference stamp: 'BW 5/31/2021 23:34:25'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'BW 5/31/2021 23:34:25'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:34:45'!
test04

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.! !

!testRun: #TransferNetTest #test04 stamp: 'BW 5/31/2021 23:34:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 23:35:45' prior: 51010036!
transferNet

	| neto |
	neto := 0.
	transactions do: [:aTransaction | (aTransaction isKindOf: WithdrawTransference) ifTrue: [neto := neto - aTransaction value]
							  ifFalse: [neto := neto + aTransaction value]
		].
	^'Neto de transferencias = ', neto asString.
	! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:35:52'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeTransference stamp: 'BW 5/31/2021 23:35:52'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'BW 5/31/2021 23:35:52'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'BW 5/31/2021 23:35:52'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:36:07'!
test05

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.! !

!testRun: #TransferNetTest #test05 stamp: 'BW 5/31/2021 23:36:12'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:36:47' prior: 51010089!
test05

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 30'.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 23:37:01' prior: 51010066!
transferNet

	| neto |
	neto := 0.
	transactions do: [:aTransaction | (aTransaction isKindOf: WithdrawTransference) ifTrue: [neto := neto - aTransaction value]
							  ifFalse: [neto := neto + 10]
		].
	^'Neto de transferencias = ', neto asString.
	! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:37:05'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeTransference stamp: 'BW 5/31/2021 23:37:05'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'BW 5/31/2021 23:37:06'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'BW 5/31/2021 23:37:06'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'BW 5/31/2021 23:37:06'!
FAILURE!

!testRun: #TransferNetTest #test05 stamp: 'BW 5/31/2021 23:37:06'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 23:37:24' prior: 51010116!
transferNet

	| neto |
	neto := 0.
	transactions do: [:aTransaction | (aTransaction isKindOf: WithdrawTransference) ifTrue: [neto := neto - aTransaction value]
							  ifFalse: [neto := neto + aTransaction value]
		].
	^'Neto de transferencias = ', neto asString.
	! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:37:29'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeTransference stamp: 'BW 5/31/2021 23:37:29'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'BW 5/31/2021 23:37:29'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'BW 5/31/2021 23:37:29'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'BW 5/31/2021 23:37:29'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:38:19'!
test06

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.! !

!testRun: #TransferNetTest #test06 stamp: 'BW 5/31/2021 23:38:21'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 23:38:57' prior: 51010144!
transferNet

	| neto |
	neto := 0.
	transactions do: [:aTransaction | (aTransaction isKindOf: WithdrawTransference) ifTrue: [neto := neto - aTransaction value].
							  (aTransaction isKindOf: DepositTransference) ifTrue: [neto := neto + aTransaction value]
		].
	^'Neto de transferencias = ', neto asString.
	! !

!testRun: #TransferNetTest #test06 stamp: 'BW 5/31/2021 23:38:58'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:38:58'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeTransference stamp: 'BW 5/31/2021 23:38:58'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'BW 5/31/2021 23:38:58'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'BW 5/31/2021 23:38:58'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'BW 5/31/2021 23:38:58'!
PASSED!

!testRun: #TransferNetTest #test06 stamp: 'BW 5/31/2021 23:38:58'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:39:23' prior: 51010170!
test06

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	Withdraw register: 300 on: account2.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.! !

!testRun: #TransferNetTest #test06 stamp: 'BW 5/31/2021 23:39:24'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:39:24'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeTransference stamp: 'BW 5/31/2021 23:39:24'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'BW 5/31/2021 23:39:24'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'BW 5/31/2021 23:39:24'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'BW 5/31/2021 23:39:24'!
PASSED!

!testRun: #TransferNetTest #test06 stamp: 'BW 5/31/2021 23:39:25'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:39:58'!
test02TransferNetRegistersASingeExitTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: account1 transferNet equals: 'Neto de transferencias = -10'.! !

!methodRemoval: TransferNetTest #test02TransferNetRegistersASingeTransference stamp: 'BW 5/31/2021 23:39:58'!
test02TransferNetRegistersASingeTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: account1 transferNet equals: 'Neto de transferencias = -10'.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:40:24'!
test03TransferNetRegistersMultipleExitTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: account1 transferNet equals: 'Neto de transferencias = -30'.! !

!methodRemoval: TransferNetTest #test03 stamp: 'BW 5/31/2021 23:40:24'!
test03

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: account1 transferNet equals: 'Neto de transferencias = -30'.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:40:48'!
test04TransferNetRegistersASingleEntryTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.! !

!methodRemoval: TransferNetTest #test04 stamp: 'BW 5/31/2021 23:40:48'!
test04

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:41:05'!
test05TransferNetRegistersMultipleEntryTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 30'.! !

!methodRemoval: TransferNetTest #test05 stamp: 'BW 5/31/2021 23:41:05'!
test05

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 30'.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:41:35'!
test06TransferNetDoesNotRegisterNonTransferenceTransactions

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	Withdraw register: 300 on: account2.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.! !

!methodRemoval: TransferNetTest #test06 stamp: 'BW 5/31/2021 23:41:36'!
test06

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	Withdraw register: 300 on: account2.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:41:59' prior: 51010340!
test06TransferNetDoesNotRegisterNonTransferenceTransactions

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	Withdraw register: 300 on: account2.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.
	self assert: account1 transferNet equals: 'Neto de transferencias = -10'.! !

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 5/31/2021 23:42:01'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:42:01'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 5/31/2021 23:42:01'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 5/31/2021 23:42:01'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 5/31/2021 23:42:01'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 5/31/2021 23:42:01'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 5/31/2021 23:42:01'!
PASSED!
!DepositTransference methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:43:03'!
modifyNet: aNetValue
	^aNetValue + self value.! !
!WithdrawTransference methodsFor: 'nil' stamp: 'BW 5/31/2021 23:43:14'!
modifyNet: aNetValue
	^aNetValue - self value.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 5/31/2021 23:43:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:43:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 5/31/2021 23:43:20'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 23:43:21'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 23:43:22'!
PASSED!
!Deposit methodsFor: 'asdglkjsdg' stamp: 'BW 5/31/2021 23:43:43'!
modifyNet: aNetValue
	^aNetValue.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:43:52'!
modifyNet: aNetValue
	^aNetValue.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 5/31/2021 23:44:31' prior: 51010184!
transferNet

	| neto |
	neto := 0.
	transactions do: [:aTransaction | neto := aTransaction modifyNet: neto].
	^'Neto de transferencias = ', neto asString.
	! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 5/31/2021 23:44:35'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 5/31/2021 23:44:36'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 23:44:37'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 23:44:37'!
PASSED!
!AccountTransaction methodsFor: 'nil' stamp: 'BW 5/31/2021 23:45:25' prior: 51007606!
affectBalance: aBalance
	self subclassResponsibility.! !
!Deposit methodsFor: 'initialization' stamp: 'BW 5/31/2021 23:45:38' prior: 51007639!
initializeFor: aValue
	value := aValue ! !
!TransferenceEnd methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:47:55'!
account: anOriginAccount
	account := anOriginAccount.! !
!TransferenceEnd class methodsFor: 'no messages' stamp: 'BW 5/31/2021 23:48:22'!
registerOn: anAccount  
	
	| withdrawTransference |
	withdrawTransference := self new account: anAccount.
	anAccount register: withdrawTransference.
	^withdrawTransference.! !

!methodRemoval: DepositTransference class #registerOn: stamp: 'BW 5/31/2021 23:48:29'!
registerOn: aDestinationAccount  
	
	| withdrawTransference |
	withdrawTransference := self new initializeFor: aDestinationAccount.
	aDestinationAccount register: withdrawTransference.
	^withdrawTransference.!

!methodRemoval: WithdrawTransference class #registerOn: stamp: 'BW 5/31/2021 23:48:45'!
registerOn: anOriginAccount  
	
	| depositTransference |
	depositTransference := self new initializeFor: anOriginAccount.
	anOriginAccount register: depositTransference.
	^depositTransference.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 5/31/2021 23:48:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 5/31/2021 23:48:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 5/31/2021 23:48:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 5/31/2021 23:48:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 5/31/2021 23:48:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 5/31/2021 23:48:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 5/31/2021 23:48:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 5/31/2021 23:48:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 5/31/2021 23:48:48'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 23:48:49'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 23:48:50'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 23:48:50'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 23:48:50'!
PASSED!

!methodRemoval: TransferenceEnd #initializeFor: stamp: 'BW 5/31/2021 23:49:09'!
initializeFor: anOriginAccount
	account := anOriginAccount.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 5/31/2021 23:49:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 5/31/2021 23:49:13'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 5/31/2021 23:49:14'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 5/31/2021 23:49:15'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 5/31/2021 23:49:15'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 5/31/2021 23:49:15'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 5/31/2021 23:49:15'!
PASSED!
!TransferenceEnd methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:50:08'!
modifyNet: aNetValue
	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'nil' stamp: 'BW 5/31/2021 23:50:36'!
modifyNet: aNetValue
	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'BW 5/31/2021 23:50:52'!
summaryLine
	self subclassResponsibility ! !

!methodRemoval: TransferenceEnd #modifyNet: stamp: 'BW 5/31/2021 23:52:10'!
modifyNet: aNetValue
	self subclassResponsibility.!

----SNAPSHOT----(31 May 2021 23:52:48) CuisUniversity-4532.image priorSource: 21680109!

----QUIT----(31 May 2021 23:52:51) CuisUniversity-4532.image priorSource: 21742669!

----STARTUP---- (1 June 2021 18:10:03) as F:\Computacion\Ingenier√≠a de Software 1\CuisUniversity\CuisUniversity-4532.image!

!TransferenceEnd methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:11:12' prior: 51010749!
account: anAccount
	account := anAccount.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/1/2021 18:12:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/1/2021 18:12:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/1/2021 18:12:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/1/2021 18:12:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/1/2021 18:12:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/1/2021 18:12:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/1/2021 18:12:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/1/2021 18:12:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/1/2021 18:12:14'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 18:12:15'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 18:12:16'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/1/2021 18:12:16'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/1/2021 18:12:16'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/1/2021 18:12:16'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/1/2021 18:12:16'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/1/2021 18:12:16'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:15:55'!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: portfolio transferNet equals: (OrderedCollection with: 'Neto por transferencia = 0').! !

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:15:57'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 18:16:08'!
transferNet
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 18:16:20' prior: 51011285!
transferNet
	^'Neto por transferencias = 0'! !

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:16:21'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:16:27' prior: 51011275!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: portfolio transferNet equals: (OrderedCollection with: 'Neto por transferencias = 0').! !

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:16:29'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:16:41' prior: 51011296!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: portfolio transferNet equals:  'Neto por transferencias = 0'! !

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:16:46'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 18:16:46'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 18:16:46'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 18:16:46'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 18:16:46'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 18:16:46'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 18:16:46'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:16:46'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:17:38'!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	

	self assert: portfolio transferNet equals:  'Neto por transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:17:59' prior: 51011341!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.

	self assert: portfolio transferNet equals:  'Neto por transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:18:41' prior: 51011351!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: portfolio transferNet equals:  'Neto por transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:19:15' prior: 51011363!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: portfolio transferNet equals:  'Neto por transferencias = -10'! !

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 18:19:16'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 18:20:11' prior: 51011289!
transferNet
	self balance = 0 ifTrue: [^'Neto por transferencias = 0'].
	^'Neto por transferencias = -10'
	! !

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 18:20:13'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 18:20:13'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 18:20:13'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 18:20:13'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 18:20:13'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 18:20:13'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 18:20:13'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:20:13'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 18:20:13'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:20:18'!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: portfolio transferNet equals:  'Neto por transferencias = -10'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:20:28' prior: 51011427!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: portfolio transferNet equals:  'Neto por transferencias = -10'! !

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 18:20:30'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 18:20:30'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 18:20:30'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 18:20:30'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 18:20:30'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 18:20:30'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 18:20:30'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:20:30'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 18:20:30'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 18:20:30'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:20:35' prior: 51011440!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: portfolio transferNet equals:  'Neto por transferencias = -30'! !

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 18:20:36'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 18:21:08' prior: 51011391!
transferNet
	self balance = 0 ifTrue: [^'Neto por transferencias = 0'].
	^'Neto por transferencias = ', self balance asString.
	! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 18:21:13'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 18:21:13'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 18:21:13'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 18:21:13'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 18:21:13'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 18:21:13'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:21:13'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 18:21:13'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 18:21:13'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:21:22'!
test10

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: portfolio transferNet equals:  'Neto por transferencias = -30'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:24:34' prior: 51011538!
test10

	|account1 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 500 on: account1.
	
	self assert: portfolio transferNet equals:  'Neto por transferencias = 0'! !

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 18:24:38'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 18:26:44' prior: 51011502!
transferNet
	"self balance = 0 ifTrue: [^'Neto por transferencias = 0'].
	^'Neto por transferencias = ', self balance asString."
	
	^(accounts at: 1) transferNet.! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 18:26:48'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 18:26:48'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 18:26:48'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 18:26:48'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 18:26:48'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 18:26:48'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:26:48'!
ERROR!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 18:26:48'!
FAILURE!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 18:26:48'!
FAILURE!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 18:26:48'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 18:27:51' prior: 51011566!
transferNet
	"self balance = 0 ifTrue: [^'Neto por transferencias = 0'].
	^'Neto por transferencias = ', self balance asString."
	accounts isEmpty ifTrue: [^'Neto por transferencias = 0'].
	^(accounts at: 1 ) transferNet.! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 18:28:05'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 18:28:05'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 18:28:06'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 18:28:06'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 18:28:06'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 18:28:06'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:28:06'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 18:28:06'!
FAILURE!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 18:28:06'!
FAILURE!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 18:28:06'!
FAILURE!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 18:28:10'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 18:28:46' prior: 51011606!
transferNet
	"self balance = 0 ifTrue: [^'Neto de transferencias = 0'].
	^'Neto de transferencias = ', self balance asString."
	accounts isEmpty ifTrue: [^'Neto de transferencias = 0'].
	^(accounts at: 1) transferNet.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:28:56' prior: 51011307!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: portfolio transferNet equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:28:59' prior: 51011376!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: portfolio transferNet equals:  'Neto de transferencias = -10'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:29:03' prior: 51011486!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: portfolio transferNet equals:  'Neto de transferencias = -30'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 18:29:06' prior: 51011552!
test10

	|account1 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 500 on: account1.
	
	self assert: portfolio transferNet equals:  'Neto de transferencias = 0'! !

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 18:29:07'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 18:29:07'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 18:29:07'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 18:29:07'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 18:29:07'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 18:29:07'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 18:29:07'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 18:29:07'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 18:29:08'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 18:29:08'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 18:29:08'!
PASSED!

----QUIT----(1 June 2021 18:29:36) CuisUniversity-4532.image priorSource: 21742758!

----STARTUP---- (1 June 2021 20:25:11) as F:\Computacion\Ingenier√≠a de Software 1\CuisUniversity\CuisUniversity-4532.image!

!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:29:54'!
test11

	|account1 account2 account3 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio transferNet equals:  'Neto de transferencias = 40'! !

!testRun: #TransferNetTest #test11 stamp: 'BW 6/1/2021 20:29:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 20:34:22' prior: 51010579!
transferNet
	
	| neto |
	neto := 0.
	transactions do: [:aTransaction | neto := aTransaction modifyNet: neto].
	^'Neto de transferencias = ', neto asString.
	! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 20:34:39' prior: 51011766!
transferNet
	
	| neto |
	neto := 0.
	transactions do: [:aTransaction | neto := aTransaction modifyNet: neto].
	^'Neto de transferencias = '.
	! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 20:34:53'!
transferNetValue

	| neto |
	neto := 0.
	transactions do: [:aTransaction | neto := aTransaction modifyNet: neto]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 20:34:53' prior: 51011774!
transferNet
	
	self transferNetValue.
	^'Neto de transferencias = '.
	! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 20:35:05' prior: 51011788!
transferNet
	
	| neto |
	neto := self transferNetValue.
	^'Neto de transferencias = ', neto asString.
	! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 20:35:22' prior: 51011781!
transferNetValue

	| neto |
	neto := 0.
	transactions do: [:aTransaction | neto := aTransaction modifyNet: neto].
	^neto.! !
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 20:37:13' prior: 51011650!
transferNet
	"self balance = 0 ifTrue: [^'Neto de transferencias = 0'].
	^'Neto de transferencias = ', self balance asString."
	| neto |
	neto := 0.
	accounts do: [:anAccount | neto := neto + anAccount transferNetValue ].
	^'Neto de transferencias = ', neto asString.! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 20:37:30'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 20:37:30'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 20:37:30'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 20:37:30'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 20:37:30'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 20:37:30'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 20:37:30'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 20:37:31'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 20:37:31'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 20:37:31'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/1/2021 20:37:31'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:38:54'!
test12

	|account1 account2 account3 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio1 transferNet equals:  'Neto de transferencias = 40'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:39:13' prior: 51011853!
test12

	|account1 account2 account3 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio1 transferNet equals:  'Neto de transferencias = 40'! !

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 20:39:15'!
ERROR!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 20:39:50'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 20:39:59'!
transferNetValue
	self shouldBeImplemented.! !

!methodRemoval: Portfolio #transferNetValue stamp: 'BW 6/1/2021 20:41:20'!
transferNetValue
	self shouldBeImplemented.!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 20:44:52'!
ERROR!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 20:44:52'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:45:01'!
transferNetValue
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:45:45' prior: 51011907!
transferNetValue
	| neto |
	neto := 0.
	accounts do: [:anAccount | neto := neto + anAccount transferNetValue].
	^neto.! !

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 20:45:49'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 20:45:53'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 20:45:53'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 20:45:53'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 20:45:53'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 20:45:53'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 20:45:53'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 20:45:53'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 20:45:53'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 20:45:53'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 20:45:54'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/1/2021 20:45:54'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 20:45:54'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:46:21'!
test13

	|account1 account2 account3 portfolio1 portfolio2 portfolio3|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio1 transferNet equals:  'Neto de transferencias = 40'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:46:48' prior: 51011957!
test13

	|account1 account2 account3 portfolio1 portfolio2 portfolio3|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio3 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio1 transferNet equals:  'Neto de transferencias = 40'! !

!testRun: #TransferNetTest #test13 stamp: 'BW 6/1/2021 20:46:50'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 20:46:50'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 20:46:50'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 20:46:50'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 20:46:50'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 20:46:50'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 20:46:50'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 20:46:50'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 20:46:50'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 20:46:50'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 20:46:51'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/1/2021 20:46:51'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 20:46:51'!
PASSED!

!testRun: #TransferNetTest #test13 stamp: 'BW 6/1/2021 20:46:51'!
PASSED!

!methodRemoval: TransferNetTest #test13 stamp: 'BW 6/1/2021 20:46:55'!
test13

	|account1 account2 account3 portfolio1 portfolio2 portfolio3|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio2 add: account1.
	portfolio3 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio1 transferNet equals:  'Neto de transferencias = 40'!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 20:49:08' prior: 51011808!
transferNet
	"self balance = 0 ifTrue: [^'Neto de transferencias = 0'].
	^'Neto de transferencias = ', self balance asString."
	| neto |
	neto := self transferNetValue.
	^'Neto de transferencias = ', neto asString.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/1/2021 20:49:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/1/2021 20:49:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/1/2021 20:49:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/1/2021 20:49:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/1/2021 20:49:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/1/2021 20:49:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/1/2021 20:49:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/1/2021 20:49:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/1/2021 20:49:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/1/2021 20:49:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 20:49:12'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 20:49:13'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 20:49:14'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/1/2021 20:49:14'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 20:49:14'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/1/2021 20:49:14'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/1/2021 20:49:14'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/1/2021 20:49:14'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/1/2021 20:49:14'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/1/2021 20:49:14'!
PASSED!

----SNAPSHOT----(1 June 2021 20:49:55) CuisUniversity-4532.image priorSource: 21762862!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:51:35'!
test10

	|portfolio|
	portfolio := Portfolio new.
	self assert: portfolio summary equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 20:51:37'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 20:51:50'!
summary
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 20:52:08' prior: 51012246!
summary
	^OrderedCollection with: 'Balance = 0'.! !

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 20:52:09'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 20:52:09'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 20:52:09'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 20:52:09'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 20:52:09'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 20:52:09'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 20:52:09'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 20:52:09'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 20:52:09'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 20:52:09'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 20:52:09'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:53:44'!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 10 on: account.
	self assert: portfolio summary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 20:53:46'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 20:54:34' prior: 51012250!
summary
	self balance = 0 ifTrue: [^OrderedCollection with: 'Balance = 0'].
	^OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10'.! !

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 20:54:35'!
FAILURE!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 20:54:47'!
FAILURE!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:55:38' prior: 51012289!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: portfolio summary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 20:55:40'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 20:55:40'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 20:55:40'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 20:55:40'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 20:55:40'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 20:55:40'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 20:55:40'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 20:55:40'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 20:55:40'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 20:55:40'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 20:55:41'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 20:55:41'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:56:55'!
test12

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	
	self assert: portfolio summary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 20:59:50' prior: 51012361!
test12

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: portfolio summary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:00:02'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 21:02:36' prior: 51012302!
summary
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount summary].
	summary add: 'Balance = ', self balance asString.! !

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:02:48'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 21:03:54'!
accountSummary
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount summary].
	summary add: 'Balance = ', self balance asString.! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:03:55' prior: 51012237!
test10

	|portfolio|
	portfolio := Portfolio new.
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:03:55' prior: 51012314!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:03:55' prior: 51012391!
summary
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount accountSummary].
	summary add: 'Balance = ', self balance asString.! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:03:55' prior: 51012373!
test12

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:03:55' prior: 51012401!
accountSummary
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount accountSummary].
	summary add: 'Balance = ', self balance asString.! !

!methodRemoval: Portfolio #summary stamp: 'BW 6/1/2021 21:03:55'!
summary
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount accountSummary].
	summary add: 'Balance = ', self balance asString.!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:04:02'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:04:02'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:04:02'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:04:02'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:04:02'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:04:03'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:04:03'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:04:03'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:04:03'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:04:03'!
FAILURE!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:04:03'!
FAILURE!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:04:03'!
FAILURE!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:04:53'!
FAILURE!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:04:54'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 21:05:09' prior: 51012455!
accountSummary
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount accountSummary].
	summary add: 'Balance = ', self balance asString.
	^summary! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:05:25'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:05:25'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:05:25'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:05:25'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:05:25'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:05:25'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:05:25'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:05:25'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:05:25'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:05:25'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:05:25'!
FAILURE!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:05:25'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 21:06:43' prior: 51012513!
accountSummary
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount accountSummary].
	summary do: [:aString | (aString beginsWith: 'Balance') ifTrue: [summary remove: aString]].
	summary add: 'Balance = ', self balance asString.
	^summary! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:06:55'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:06:55'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:09:37'!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 20' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:09:58' prior: 51012607!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 20' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:10:30' prior: 51012626!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:10:31'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:10:31'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:10:31'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:10:31'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:10:32'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:10:32'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:10:32'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:10:32'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:10:32'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:10:32'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:10:32'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:10:32'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:10:32'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:10:32'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:10:53'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:10:53'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:10:53'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:10:53'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:10:53'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:10:53'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:10:53'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:10:53'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:10:53'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:10:53'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:10:54'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:10:54'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:10:54'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:10:54'!
PASSED!

!methodRemoval: SummaryTest #test13 stamp: 'BW 6/1/2021 21:11:58'!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 21:14:17' prior: 51012559!
accountSummary
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount accountSummary].
	"summary do: [:aString | (aString beginsWith: 'Balance') ifTrue: [summary remove: aString]]."
	summary add: 'Balance = ', self balance asString.
	^summary! !
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 21:15:10' prior: 51012762!
accountSummary
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount accountSummaryWithoutBalance].
	
	"summary do: [:aString | (aString beginsWith: 'Balance') ifTrue: [summary remove: aString]]."
	summary add: 'Balance = ', self balance asString.
	^summary! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/1/2021 21:15:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/1/2021 21:15:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/1/2021 21:15:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/1/2021 21:15:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/1/2021 21:15:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/1/2021 21:15:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/1/2021 21:15:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/1/2021 21:15:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/1/2021 21:15:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/1/2021 21:15:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/1/2021 21:15:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/1/2021 21:15:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/1/2021 21:15:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/1/2021 21:15:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/1/2021 21:15:13'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:15:19'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:15:19'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:15:19'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:15:19'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:15:19'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:15:19'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:15:19'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:15:19'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:15:19'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:15:19'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:15:20'!
ERROR!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:15:20'!
ERROR!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:15:23'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 21:16:03' prior: 51009810!
accountSummary

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction summaryLine].
	"summary add: ('Balance = ', self balance asString).
	^summary"! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 21:16:21'!
accountSummaryWithoutBalance

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction summaryLine]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 21:16:21' prior: 51012882!
accountSummary

	self accountSummaryWithoutBalance.
	"summary add: ('Balance = ', self balance asString).
	^summary"! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 21:17:16' prior: 51012899!
accountSummary

	^self accountSummaryWithoutBalance add: ('Balance = ', self balance asString).! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 21:17:28' prior: 51012891!
accountSummaryWithoutBalance

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction summaryLine].
	^summary.! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:17:34'!
FAILURE!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:17:34'!
FAILURE!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:17:34'!
FAILURE!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:17:34'!
FAILURE!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:17:34'!
FAILURE!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:17:34'!
FAILURE!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:17:34'!
FAILURE!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:17:34'!
FAILURE!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:17:34'!
FAILURE!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:17:34'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:17:34'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:17:34'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:18:14'!
FAILURE!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:18:14'!
FAILURE!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:18:39'!
FAILURE!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:18:39'!
FAILURE!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:18:45'!
FAILURE!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:18:45'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 21:16:21' prior: 51012906!
accountSummary

	self accountSummaryWithoutBalance.
	"summary add: ('Balance = ', self balance asString).
	^summary"! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'BW 6/1/2021 21:19:39' prior: 51012976!
accountSummary

	| summary |
	summary := self accountSummaryWithoutBalance.
	summary add: ('Balance = ', self balance asString).
	^summary! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:19:49'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:19:49'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:20:08'!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:20:12'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 21:20:25'!
accountSummaryWithoutBalance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 21:21:28' prior: 51012774!
accountSummary
	|summary|
	summary := self accountSummaryWithoutBalance.
	summary add: 'Balance = ', self balance asString.
	^summary! !
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 21:21:36' prior: 51013047!
accountSummaryWithoutBalance
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount accountSummaryWithoutBalance].
	^summary! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:21:40'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:21:40'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:21:40'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:21:40'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:21:40'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:21:40'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:21:40'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:21:40'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:21:40'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:21:41'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:21:41'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:21:41'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:21:41'!
PASSED!
!Account methodsFor: 'reports' stamp: 'BW 6/1/2021 21:22:18'!
accountSummary

	| summary |
	summary := self accountSummaryWithoutBalance.
	summary add: ('Balance = ', self balance asString).
	^summary! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'BW 6/1/2021 21:22:18'!
accountSummary

	| summary |
	summary := self accountSummaryWithoutBalance.
	summary add: ('Balance = ', self balance asString).
	^summary!

!methodRemoval: Portfolio #accountSummary stamp: 'BW 6/1/2021 21:22:55'!
accountSummary
	|summary|
	summary := self accountSummaryWithoutBalance.
	summary add: 'Balance = ', self balance asString.
	^summary!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/1/2021 21:22:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/1/2021 21:22:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/1/2021 21:22:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/1/2021 21:22:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/1/2021 21:22:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/1/2021 21:22:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/1/2021 21:22:59'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 21:23:00'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 21:23:01'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 21:23:01'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 21:23:01'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 21:23:01'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 21:23:01'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 21:23:01'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 21:23:01'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/1/2021 21:23:01'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 21:23:01'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/1/2021 21:23:01'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/1/2021 21:23:02'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/1/2021 21:23:02'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/1/2021 21:23:02'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/1/2021 21:23:02'!
PASSED!
!Account methodsFor: 'reports' stamp: 'BW 6/1/2021 21:23:31'!
accountSummaryWithoutBalance
	self subclassResponsibility.! !
!Portfolio methodsFor: 'report' stamp: 'BW 6/1/2021 21:23:47' prior: 51012058!
transferNet
	
	| neto |
	neto := self transferNetValue.
	^'Neto de transferencias = ', neto asString.! !
!Account methodsFor: 'reports' stamp: 'BW 6/1/2021 21:24:05'!
transferNet
	
	| neto |
	neto := self transferNetValue.
	^'Neto de transferencias = ', neto asString.
	! !

!methodRemoval: ReceptiveAccount #transferNet stamp: 'BW 6/1/2021 21:24:05'!
transferNet
	
	| neto |
	neto := self transferNetValue.
	^'Neto de transferencias = ', neto asString.
	!

!methodRemoval: Portfolio #transferNet stamp: 'BW 6/1/2021 21:24:12'!
transferNet
	
	| neto |
	neto := self transferNetValue.
	^'Neto de transferencias = ', neto asString.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/1/2021 21:24:14'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/1/2021 21:24:14'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 21:24:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:24:16'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/1/2021 21:24:17'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/1/2021 21:24:18'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/1/2021 21:24:18'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/1/2021 21:24:18'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/1/2021 21:24:18'!
PASSED!
!Account methodsFor: 'reports' stamp: 'BW 6/1/2021 21:24:33'!
transferNetValue
	self subclassResponsibility.! !

----SNAPSHOT----(1 June 2021 21:24:53) CuisUniversity-4532.image priorSource: 21778651!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/1/2021 21:25:26'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (33 to: 38)
		declaredAt: (16 to: 21))
		cover: (24 to: 28)
		declaredAt: (24 to: 28).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/1/2021 21:25:27'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/1/2021 21:25:27'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/1/2021 21:25:27'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/1/2021 21:25:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/1/2021 21:25:27'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/1/2021 21:25:27'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/1/2021 21:25:27'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/1/2021 21:25:27'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/1/2021 21:25:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/1/2021 21:25:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/1/2021 21:25:27'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/1/2021 21:25:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/1/2021 21:25:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/1/2021 21:25:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/1/2021 21:25:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 21:25:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 21:25:27'!
PASSED!
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/1/2021 21:25:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/1/2021 21:25:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/1/2021 21:25:28'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/1/2021 21:25:28'!
PASSED!
!Behavior method!
accountSummary
	| summary |
	(summary _ [
	(self coverAll:
		{42 to: 45}) accountSummaryWithoutBalance ] valueCoveringAll:
		{47 to: 74})
		cover: (31 to: 37)
		declaredAt: (20 to: 26).
	[
	(summary
		cover: (78 to: 84)
		declaredAt: (20 to: 26)) add:
		([
		('Balance = ' coverAll:
			{92 to: 103}) ,
			([
			([
			(self coverAll:
				{106 to: 109}) balance ] valueCoveringAll:
				{111 to: 117}) asString ] valueCoveringAll:
				{119 to: 126}) ] valueCoveringAll:
			{104 to: 104}) ] valueCoveringAll:
		{86 to: 89}.
	^ summary
		cover: (132 to: 138)
		declaredAt: (20 to: 26).! !
!Behavior method!
accountSummaryWithoutBalance
	| summary |
	(summary _ [
	(OrderedCollection
		cover: (56 to: 72)
		declaredAt: (56 to: 72)) new ] valueCoveringAll:
		{74 to: 76})
		cover: (45 to: 51)
		declaredAt: (34 to: 40).
	[
	(transactions
		cover: (80 to: 91)
		declaredAt: (80 to: 91)) do: [ :aTransaction |
		[
		(summary
			cover: (114 to: 120)
			declaredAt: (34 to: 40)) add:
			([
			(aTransaction
				cover: (127 to: 138)
				declaredAt: (99 to: 110)) summaryLine ] valueCoveringAll:
				{140 to: 150}) ] valueCoveringAll:
			{122 to: 125} ]] valueCoveringAll:
		{93 to: 95}.
	^ summary
		cover: (156 to: 162)
		declaredAt: (34 to: 40).! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:25:28'!
PASSED!
!Behavior method!
summaryLine
	^ [
	('DepÔøΩsito por ' coverAll:
		{15 to: 29}) ,
		([
		([
		(self coverAll:
			{32 to: 35}) value ] valueCoveringAll:
			{37 to: 41}) asString ] valueCoveringAll:
			{43 to: 50}) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:25:28'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:25:28'!
PASSED!
!Behavior method!
summaryLine
	^ [
	('ExtracciÔøΩn por ' coverAll:
		{15 to: 31}) ,
		([
		([
		(self coverAll:
			{34 to: 37}) value ] valueCoveringAll:
			{39 to: 43}) asString ] valueCoveringAll:
			{45 to: 52}) ] valueCoveringAll:
		{32 to: 32}.! !

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:25:28'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:25:28'!
PASSED!
!Behavior method!
from: anOriginAccount to: aDestinationAccount for: aValue
	| aDepositTransference aWithdrawTransference newTransference |
	[
	([
	(aValue
		cover: (125 to: 130)
		declaredAt: (52 to: 57)) <=
		(0 coverAll:
			{135 to: 135}) ] valueCoveringAll:
		{132 to: 133}) ifTrue: [
		[
		(self coverAll:
			{146 to: 149}) error:
			([
			(self coverAll:
				{158 to: 161}) ceroOrNegativeTransactionErrorMessage ] valueCoveringAll:
				{163 to: 199}) ] valueCoveringAll:
			{151 to: 156} ]] valueCoveringAll:
		{137 to: 143}.
	(aDepositTransference _ [
	(DepositTransference
		cover: (231 to: 249)
		declaredAt: (231 to: 249)) registerOn:
		(aDestinationAccount
			cover: (263 to: 281)
			declaredAt: (27 to: 45)) ] valueCoveringAll:
		{251 to: 261})
		cover: (207 to: 226)
		declaredAt: (63 to: 82).
	(aWithdrawTransference _ [
	(WithdrawTransference
		cover: (310 to: 329)
		declaredAt: (310 to: 329)) registerOn:
		(anOriginAccount
			cover: (343 to: 357)
			declaredAt: (7 to: 21)) ] valueCoveringAll:
		{331 to: 341})
		cover: (285 to: 305)
		declaredAt: (84 to: 104).
	(newTransference _ [
	([
	(self coverAll:
		{382 to: 385}) new ] valueCoveringAll:
		{387 to: 389})
		origin:
			(aWithdrawTransference
				cover: (399 to: 419)
				declaredAt: (84 to: 104))
		destination:
			(aDepositTransference
				cover: (434 to: 453)
				declaredAt: (63 to: 82))
		value:
			(aValue
				cover: (462 to: 467)
				declaredAt: (52 to: 57)) ] valueCoveringAll:
		{391 to: 397. 421 to: 432. 455 to: 460})
		cover: (363 to: 377)
		declaredAt: (106 to: 120).
	^ newTransference
		cover: (474 to: 488)
		declaredAt: (106 to: 120).! !
!Behavior method!
registerOn: anAccount
	| withdrawTransference |
	(withdrawTransference _ [
	([
	(self coverAll:
		{78 to: 81}) new ] valueCoveringAll:
		{83 to: 85}) account:
		(anAccount
			cover: (96 to: 104)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{87 to: 94})
		cover: (54 to: 73)
		declaredAt: (30 to: 49).
	[
	(anAccount
		cover: (108 to: 116)
		declaredAt: (13 to: 21)) register:
		(withdrawTransference
			cover: (128 to: 147)
			declaredAt: (30 to: 49)) ] valueCoveringAll:
		{118 to: 126}.
	^ withdrawTransference
		cover: (152 to: 171)
		declaredAt: (30 to: 49).! !
!Behavior method!
account: anAccount
	(account _ anAccount
		cover: (32 to: 40)
		declaredAt: (10 to: 18))
		cover: (21 to: 27)
		declaredAt: (21 to: 27).! !
!Behavior method!
origin: anOriginAccount destination: aDestinationAccount value: aValue
	(origin _ anOriginAccount
		cover: (83 to: 97)
		declaredAt: (9 to: 23))
		cover: (73 to: 78)
		declaredAt: (73 to: 78).
	(destination _ aDestinationAccount
		cover: (117 to: 135)
		declaredAt: (38 to: 56))
		cover: (102 to: 112)
		declaredAt: (102 to: 112).
	(value _ aValue
		cover: (148 to: 153)
		declaredAt: (65 to: 70))
		cover: (139 to: 143)
		declaredAt: (139 to: 143).
	[
	(origin
		cover: (159 to: 164)
		declaredAt: (73 to: 78)) setTransference:
		(self coverAll:
			{183 to: 186}) ] valueCoveringAll:
		{166 to: 181}.
	[
	(destination
		cover: (190 to: 200)
		declaredAt: (102 to: 112)) setTransference:
		(self coverAll:
			{219 to: 222}) ] valueCoveringAll:
		{202 to: 217}.! !
!Behavior method!
setTransference: aTransference
	(transference _ aTransference
		cover: (49 to: 61)
		declaredAt: (18 to: 30))
		cover: (33 to: 44)
		declaredAt: (33 to: 44).! !
!Behavior method!
summaryLine
	^ [
	('Salida por transferencia de ' coverAll:
		{15 to: 44}) ,
		([
		([
		(self coverAll:
			{47 to: 50}) value ] valueCoveringAll:
			{52 to: 56}) asString ] valueCoveringAll:
			{58 to: 65}) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
value
	^ [
	(transference
		cover: (10 to: 21)
		declaredAt: (10 to: 21)) value ] valueCoveringAll:
		{23 to: 27}.! !
!Behavior method!
value
	^ value
		cover: (9 to: 13)
		declaredAt: (9 to: 13).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:25:29'!
PASSED!
!Behavior method!
summaryLine
	^ [
	('Entrada por transferencia de ' coverAll:
		{15 to: 45}) ,
		([
		([
		(self coverAll:
			{48 to: 51}) value ] valueCoveringAll:
			{53 to: 57}) asString ] valueCoveringAll:
			{59 to: 66}) ] valueCoveringAll:
		{46 to: 46}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:25:29'!
PASSED!
!Behavior method!
accountSummaryWithoutBalance
	| summary |
	(summary _ [
	(OrderedCollection
		cover: (55 to: 71)
		declaredAt: (55 to: 71)) new ] valueCoveringAll:
		{73 to: 75})
		cover: (44 to: 50)
		declaredAt: (33 to: 39).
	[
	(accounts
		cover: (79 to: 86)
		declaredAt: (79 to: 86)) do: [ :anAccount |
		[
		(summary
			cover: (106 to: 112)
			declaredAt: (33 to: 39)) addAll:
			([
			(anAccount
				cover: (122 to: 130)
				declaredAt: (94 to: 102)) accountSummaryWithoutBalance ] valueCoveringAll:
				{132 to: 159}) ] valueCoveringAll:
			{114 to: 120} ]] valueCoveringAll:
		{88 to: 90}.
	^ summary
		cover: (165 to: 171)
		declaredAt: (33 to: 39).! !

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:25:29'!
PASSED!
!Behavior method!
transferNet
	| neto |
	(neto _ [
	(self coverAll:
		{34 to: 37}) transferNetValue ] valueCoveringAll:
		{39 to: 54})
		cover: (26 to: 29)
		declaredAt: (18 to: 21).
	^ [
	('Neto de transferencias = ' coverAll:
		{59 to: 85}) ,
		([
		(neto
			cover: (88 to: 91)
			declaredAt: (18 to: 21)) asString ] valueCoveringAll:
			{93 to: 100}) ] valueCoveringAll:
		{86 to: 86}.! !
!Behavior method!
transferNetValue
	| neto |
	(neto _ 0 coverAll:
		{38 to: 38})
		cover: (30 to: 33)
		declaredAt: (22 to: 25).
	[
	(transactions
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aTransaction |
		(neto _ [
		(aTransaction
			cover: (84 to: 95)
			declaredAt: (61 to: 72)) modifyNet:
			(neto
				cover: (76 to: 79)
				declaredAt: (22 to: 25)) ] valueCoveringAll:
			{97 to: 106})
			cover: (108 to: 111)
			declaredAt: (22 to: 25) ]] valueCoveringAll:
		{55 to: 57}.
	^ neto
		cover: (117 to: 120)
		declaredAt: (22 to: 25).! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 21:25:29'!
PASSED!
!Behavior method!
modifyNet: aNetValue
	^ [
	(aNetValue
		cover: (24 to: 32)
		declaredAt: (12 to: 20)) -
		([
		(self coverAll:
			{36 to: 39}) value ] valueCoveringAll:
			{41 to: 45}) ] valueCoveringAll:
		{34 to: 34}.! !

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 21:25:29'!
PASSED!
!Behavior method!
modifyNet: aNetValue
	^ [
	(aNetValue
		cover: (24 to: 32)
		declaredAt: (12 to: 20)) +
		([
		(self coverAll:
			{36 to: 39}) value ] valueCoveringAll:
			{41 to: 45}) ] valueCoveringAll:
		{34 to: 34}.! !

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 21:25:29'!
PASSED!
!Behavior method!
modifyNet: aNetValue
	^ aNetValue
		cover: (24 to: 32)
		declaredAt: (12 to: 20).! !
!Behavior method!
modifyNet: aNetValue
	^ aNetValue
		cover: (24 to: 32)
		declaredAt: (12 to: 20).! !

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 21:25:29'!
PASSED!
!Behavior method!
transferNetValue
	| neto |
	(neto _ 0 coverAll:
		{37 to: 37})
		cover: (29 to: 32)
		declaredAt: (21 to: 24).
	[
	(accounts
		cover: (41 to: 48)
		declaredAt: (41 to: 48)) do: [ :anAccount |
		(neto _ [
		(neto
			cover: (68 to: 71)
			declaredAt: (21 to: 24)) +
			([
			(anAccount
				cover: (83 to: 91)
				declaredAt: (56 to: 64)) transferNetValue ] valueCoveringAll:
				{93 to: 108}) ] valueCoveringAll:
			{81 to: 81})
			cover: (76 to: 79)
			declaredAt: (21 to: 24) ]] valueCoveringAll:
		{50 to: 52}.
	^ neto
		cover: (114 to: 117)
		declaredAt: (21 to: 24).! !

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 21:25:29'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/1/2021 21:25:30'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 21:25:30'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/1/2021 21:25:30'!
PASSED!
!Behavior method!
ceroOrNegativeTransactionErrorMessage
	^ 'error: transaction value must be positive' coverAll:
		{41 to: 83}.! !

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/1/2021 21:25:30'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/1/2021 21:25:30'!
PASSED!
!Behavior method!
originAccount
	^ [
	(origin
		cover: (17 to: 22)
		declaredAt: (17 to: 22)) account ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
account
	^ account
		cover: (11 to: 17)
		declaredAt: (11 to: 17).! !
!Behavior method!
destinationAccount
	^ [
	(destination
		cover: (22 to: 32)
		declaredAt: (22 to: 32)) account ] valueCoveringAll:
		{34 to: 40}.! !

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/1/2021 21:25:30'!
PASSED!
!Behavior method!
origin
	^ origin
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !
!Behavior method!
destination
	^ destination
		cover: (15 to: 25)
		declaredAt: (15 to: 25).! !

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/1/2021 21:25:30'!
PASSED!

!methodRemoval: Transference #initializeFor: stamp: 'BW 6/1/2021 21:27:56'!
initializeFor: aValue
	value := aValue.
!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/1/2021 21:28:00'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (33 to: 38)
		declaredAt: (16 to: 21))
		cover: (24 to: 28)
		declaredAt: (24 to: 28).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/1/2021 21:28:01'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/1/2021 21:28:02'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/1/2021 21:28:02'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/1/2021 21:28:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/1/2021 21:28:02'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/1/2021 21:28:02'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/1/2021 21:28:02'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/1/2021 21:28:03'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/1/2021 21:28:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/1/2021 21:28:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/1/2021 21:28:03'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/1/2021 21:28:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/1/2021 21:28:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/1/2021 21:28:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/1/2021 21:28:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 21:28:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 21:28:04'!
PASSED!
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/1/2021 21:28:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/1/2021 21:28:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/1/2021 21:28:04'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/1/2021 21:28:04'!
PASSED!
!Behavior method!
accountSummary
	| summary |
	(summary _ [
	(self coverAll:
		{42 to: 45}) accountSummaryWithoutBalance ] valueCoveringAll:
		{47 to: 74})
		cover: (31 to: 37)
		declaredAt: (20 to: 26).
	[
	(summary
		cover: (78 to: 84)
		declaredAt: (20 to: 26)) add:
		([
		('Balance = ' coverAll:
			{92 to: 103}) ,
			([
			([
			(self coverAll:
				{106 to: 109}) balance ] valueCoveringAll:
				{111 to: 117}) asString ] valueCoveringAll:
				{119 to: 126}) ] valueCoveringAll:
			{104 to: 104}) ] valueCoveringAll:
		{86 to: 89}.
	^ summary
		cover: (132 to: 138)
		declaredAt: (20 to: 26).! !
!Behavior method!
accountSummaryWithoutBalance
	| summary |
	(summary _ [
	(OrderedCollection
		cover: (56 to: 72)
		declaredAt: (56 to: 72)) new ] valueCoveringAll:
		{74 to: 76})
		cover: (45 to: 51)
		declaredAt: (34 to: 40).
	[
	(transactions
		cover: (80 to: 91)
		declaredAt: (80 to: 91)) do: [ :aTransaction |
		[
		(summary
			cover: (114 to: 120)
			declaredAt: (34 to: 40)) add:
			([
			(aTransaction
				cover: (127 to: 138)
				declaredAt: (99 to: 110)) summaryLine ] valueCoveringAll:
				{140 to: 150}) ] valueCoveringAll:
			{122 to: 125} ]] valueCoveringAll:
		{93 to: 95}.
	^ summary
		cover: (156 to: 162)
		declaredAt: (34 to: 40).! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:28:04'!
PASSED!
!Behavior method!
summaryLine
	^ [
	('DepÔøΩsito por ' coverAll:
		{15 to: 29}) ,
		([
		([
		(self coverAll:
			{32 to: 35}) value ] valueCoveringAll:
			{37 to: 41}) asString ] valueCoveringAll:
			{43 to: 50}) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:28:04'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:28:04'!
PASSED!
!Behavior method!
summaryLine
	^ [
	('ExtracciÔøΩn por ' coverAll:
		{15 to: 31}) ,
		([
		([
		(self coverAll:
			{34 to: 37}) value ] valueCoveringAll:
			{39 to: 43}) asString ] valueCoveringAll:
			{45 to: 52}) ] valueCoveringAll:
		{32 to: 32}.! !

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:28:05'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:28:05'!
PASSED!
!Behavior method!
from: anOriginAccount to: aDestinationAccount for: aValue
	| aDepositTransference aWithdrawTransference newTransference |
	[
	([
	(aValue
		cover: (125 to: 130)
		declaredAt: (52 to: 57)) <=
		(0 coverAll:
			{135 to: 135}) ] valueCoveringAll:
		{132 to: 133}) ifTrue: [
		[
		(self coverAll:
			{146 to: 149}) error:
			([
			(self coverAll:
				{158 to: 161}) ceroOrNegativeTransactionErrorMessage ] valueCoveringAll:
				{163 to: 199}) ] valueCoveringAll:
			{151 to: 156} ]] valueCoveringAll:
		{137 to: 143}.
	(aDepositTransference _ [
	(DepositTransference
		cover: (231 to: 249)
		declaredAt: (231 to: 249)) registerOn:
		(aDestinationAccount
			cover: (263 to: 281)
			declaredAt: (27 to: 45)) ] valueCoveringAll:
		{251 to: 261})
		cover: (207 to: 226)
		declaredAt: (63 to: 82).
	(aWithdrawTransference _ [
	(WithdrawTransference
		cover: (310 to: 329)
		declaredAt: (310 to: 329)) registerOn:
		(anOriginAccount
			cover: (343 to: 357)
			declaredAt: (7 to: 21)) ] valueCoveringAll:
		{331 to: 341})
		cover: (285 to: 305)
		declaredAt: (84 to: 104).
	(newTransference _ [
	([
	(self coverAll:
		{382 to: 385}) new ] valueCoveringAll:
		{387 to: 389})
		origin:
			(aWithdrawTransference
				cover: (399 to: 419)
				declaredAt: (84 to: 104))
		destination:
			(aDepositTransference
				cover: (434 to: 453)
				declaredAt: (63 to: 82))
		value:
			(aValue
				cover: (462 to: 467)
				declaredAt: (52 to: 57)) ] valueCoveringAll:
		{391 to: 397. 421 to: 432. 455 to: 460})
		cover: (363 to: 377)
		declaredAt: (106 to: 120).
	^ newTransference
		cover: (474 to: 488)
		declaredAt: (106 to: 120).! !
!Behavior method!
registerOn: anAccount
	| withdrawTransference |
	(withdrawTransference _ [
	([
	(self coverAll:
		{78 to: 81}) new ] valueCoveringAll:
		{83 to: 85}) account:
		(anAccount
			cover: (96 to: 104)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{87 to: 94})
		cover: (54 to: 73)
		declaredAt: (30 to: 49).
	[
	(anAccount
		cover: (108 to: 116)
		declaredAt: (13 to: 21)) register:
		(withdrawTransference
			cover: (128 to: 147)
			declaredAt: (30 to: 49)) ] valueCoveringAll:
		{118 to: 126}.
	^ withdrawTransference
		cover: (152 to: 171)
		declaredAt: (30 to: 49).! !
!Behavior method!
account: anAccount
	(account _ anAccount
		cover: (32 to: 40)
		declaredAt: (10 to: 18))
		cover: (21 to: 27)
		declaredAt: (21 to: 27).! !
!Behavior method!
origin: anOriginAccount destination: aDestinationAccount value: aValue
	(origin _ anOriginAccount
		cover: (83 to: 97)
		declaredAt: (9 to: 23))
		cover: (73 to: 78)
		declaredAt: (73 to: 78).
	(destination _ aDestinationAccount
		cover: (117 to: 135)
		declaredAt: (38 to: 56))
		cover: (102 to: 112)
		declaredAt: (102 to: 112).
	(value _ aValue
		cover: (148 to: 153)
		declaredAt: (65 to: 70))
		cover: (139 to: 143)
		declaredAt: (139 to: 143).
	[
	(origin
		cover: (159 to: 164)
		declaredAt: (73 to: 78)) setTransference:
		(self coverAll:
			{183 to: 186}) ] valueCoveringAll:
		{166 to: 181}.
	[
	(destination
		cover: (190 to: 200)
		declaredAt: (102 to: 112)) setTransference:
		(self coverAll:
			{219 to: 222}) ] valueCoveringAll:
		{202 to: 217}.! !
!Behavior method!
setTransference: aTransference
	(transference _ aTransference
		cover: (49 to: 61)
		declaredAt: (18 to: 30))
		cover: (33 to: 44)
		declaredAt: (33 to: 44).! !
!Behavior method!
summaryLine
	^ [
	('Salida por transferencia de ' coverAll:
		{15 to: 44}) ,
		([
		([
		(self coverAll:
			{47 to: 50}) value ] valueCoveringAll:
			{52 to: 56}) asString ] valueCoveringAll:
			{58 to: 65}) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
value
	^ [
	(transference
		cover: (10 to: 21)
		declaredAt: (10 to: 21)) value ] valueCoveringAll:
		{23 to: 27}.! !
!Behavior method!
value
	^ value
		cover: (9 to: 13)
		declaredAt: (9 to: 13).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:28:05'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:28:05'!
PASSED!
!Behavior method!
summaryLine
	^ [
	('Entrada por transferencia de ' coverAll:
		{15 to: 45}) ,
		([
		([
		(self coverAll:
			{48 to: 51}) value ] valueCoveringAll:
			{53 to: 57}) asString ] valueCoveringAll:
			{59 to: 66}) ] valueCoveringAll:
		{46 to: 46}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:28:06'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:28:06'!
PASSED!
!Behavior method!
accountSummaryWithoutBalance
	| summary |
	(summary _ [
	(OrderedCollection
		cover: (55 to: 71)
		declaredAt: (55 to: 71)) new ] valueCoveringAll:
		{73 to: 75})
		cover: (44 to: 50)
		declaredAt: (33 to: 39).
	[
	(accounts
		cover: (79 to: 86)
		declaredAt: (79 to: 86)) do: [ :anAccount |
		[
		(summary
			cover: (106 to: 112)
			declaredAt: (33 to: 39)) addAll:
			([
			(anAccount
				cover: (122 to: 130)
				declaredAt: (94 to: 102)) accountSummaryWithoutBalance ] valueCoveringAll:
				{132 to: 159}) ] valueCoveringAll:
			{114 to: 120} ]] valueCoveringAll:
		{88 to: 90}.
	^ summary
		cover: (165 to: 171)
		declaredAt: (33 to: 39).! !

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:28:06'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:28:06'!
PASSED!
!Behavior method!
originAccount
	^ [
	(origin
		cover: (17 to: 22)
		declaredAt: (17 to: 22)) account ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
destination
	^ destination
		cover: (15 to: 25)
		declaredAt: (15 to: 25).! !
!Behavior method!
origin
	^ origin
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !
!Behavior method!
destinationAccount
	^ [
	(destination
		cover: (22 to: 32)
		declaredAt: (22 to: 32)) account ] valueCoveringAll:
		{34 to: 40}.! !
!Behavior method!
ceroOrNegativeTransactionErrorMessage
	^ 'error: transaction value must be positive' coverAll:
		{41 to: 83}.! !

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:28:06'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:28:06'!
PASSED!
!Behavior method!
transferNet
	| neto |
	(neto _ [
	(self coverAll:
		{34 to: 37}) transferNetValue ] valueCoveringAll:
		{39 to: 54})
		cover: (26 to: 29)
		declaredAt: (18 to: 21).
	^ [
	('Neto de transferencias = ' coverAll:
		{59 to: 85}) ,
		([
		(neto
			cover: (88 to: 91)
			declaredAt: (18 to: 21)) asString ] valueCoveringAll:
			{93 to: 100}) ] valueCoveringAll:
		{86 to: 86}.! !
!Behavior method!
transferNetValue
	| neto |
	(neto _ 0 coverAll:
		{38 to: 38})
		cover: (30 to: 33)
		declaredAt: (22 to: 25).
	[
	(transactions
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aTransaction |
		(neto _ [
		(aTransaction
			cover: (84 to: 95)
			declaredAt: (61 to: 72)) modifyNet:
			(neto
				cover: (76 to: 79)
				declaredAt: (22 to: 25)) ] valueCoveringAll:
			{97 to: 106})
			cover: (108 to: 111)
			declaredAt: (22 to: 25) ]] valueCoveringAll:
		{55 to: 57}.
	^ neto
		cover: (117 to: 120)
		declaredAt: (22 to: 25).! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 21:28:07'!
PASSED!
!Behavior method!
modifyNet: aNetValue
	^ [
	(aNetValue
		cover: (24 to: 32)
		declaredAt: (12 to: 20)) -
		([
		(self coverAll:
			{36 to: 39}) value ] valueCoveringAll:
			{41 to: 45}) ] valueCoveringAll:
		{34 to: 34}.! !

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 21:28:07'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 21:28:07'!
PASSED!
!Behavior method!
modifyNet: aNetValue
	^ [
	(aNetValue
		cover: (24 to: 32)
		declaredAt: (12 to: 20)) +
		([
		(self coverAll:
			{36 to: 39}) value ] valueCoveringAll:
			{41 to: 45}) ] valueCoveringAll:
		{34 to: 34}.! !

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 21:28:07'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 21:28:07'!
PASSED!
!Behavior method!
modifyNet: aNetValue
	^ aNetValue
		cover: (24 to: 32)
		declaredAt: (12 to: 20).! !
!Behavior method!
modifyNet: aNetValue
	^ aNetValue
		cover: (24 to: 32)
		declaredAt: (12 to: 20).! !

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 21:28:08'!
PASSED!
!Behavior method!
transferNetValue
	| neto |
	(neto _ 0 coverAll:
		{37 to: 37})
		cover: (29 to: 32)
		declaredAt: (21 to: 24).
	[
	(accounts
		cover: (41 to: 48)
		declaredAt: (41 to: 48)) do: [ :anAccount |
		(neto _ [
		(neto
			cover: (68 to: 71)
			declaredAt: (21 to: 24)) +
			([
			(anAccount
				cover: (83 to: 91)
				declaredAt: (56 to: 64)) transferNetValue ] valueCoveringAll:
				{93 to: 108}) ] valueCoveringAll:
			{81 to: 81})
			cover: (76 to: 79)
			declaredAt: (21 to: 24) ]] valueCoveringAll:
		{50 to: 52}.
	^ neto
		cover: (114 to: 117)
		declaredAt: (21 to: 24).! !

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 21:28:08'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 21:28:08'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 21:28:08'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 21:28:08'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/1/2021 21:28:08'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 21:28:08'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/1/2021 21:28:08'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/1/2021 21:28:08'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/1/2021 21:28:08'!
PASSED!
!Behavior method!
account
	^ account
		cover: (11 to: 17)
		declaredAt: (11 to: 17).! !

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/1/2021 21:28:08'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/1/2021 21:28:08'!
PASSED!
!Transference methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:28:48'!
initializeOrigin: anOriginAccount destination: aDestinationAccount value: aValue
	origin := anOriginAccount .
	destination := aDestinationAccount.
	value := aValue.
	
	origin setTransference: self.
	destination setTransference: self.! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'BW 6/1/2021 21:28:48' prior: 51008500!
from: anOriginAccount to: aDestinationAccount for: aValue

	| aDepositTransference aWithdrawTransference newTransference |
	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].
	
	aDepositTransference := DepositTransference registerOn: aDestinationAccount.
	aWithdrawTransference := WithdrawTransference registerOn: anOriginAccount.
	
	newTransference := self new initializeOrigin: aWithdrawTransference destination: aDepositTransference value: aValue.
	
	^newTransference.! !

!methodRemoval: Transference #origin:destination:value: stamp: 'BW 6/1/2021 21:28:48'!
origin: anOriginAccount destination: aDestinationAccount value: aValue
	origin := anOriginAccount .
	destination := aDestinationAccount.
	value := aValue.
	
	origin setTransference: self.
	destination setTransference: self.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/1/2021 21:28:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/1/2021 21:28:55'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/1/2021 21:28:56'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/1/2021 21:28:56'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/1/2021 21:28:56'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/1/2021 21:28:56'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/1/2021 21:28:56'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/1/2021 21:28:56'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/1/2021 21:28:56'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/1/2021 21:28:56'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/1/2021 21:28:56'!
PASSED!

----SNAPSHOT----(1 June 2021 21:38:50) CuisUniversity-4532.image priorSource: 21819441!

----QUIT----(1 June 2021 22:02:30) CuisUniversity-4532.image priorSource: 21880557!

----STARTUP---- (2 June 2021 17:21:50) as F:\Computacion\Ingenier√≠a de Software 1\CuisUniversity\CuisUniversity-4532.image!


Object subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Summary category: 'Portfolio-2' stamp: 'BW 6/2/2021 17:26:11'!
Object subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!Summary methodsFor: 'no messages' stamp: 'BW 6/2/2021 17:27:49'!
summaryFor: anAccount
	anAccount accept: self.! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:31:21'!
summaryForReceptiveAccount: aReceptiveAccount
	|totalNet transactions |
	totalNet := aReceptiveAccount execute: [|total| total := 0. transactions do: [:aTransaction | total := aTransaction modifyNet: total] ].! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:34:55' prior: 51015442!
summaryForReceptiveAccount: aReceptiveAccount
	|totalNet total|
	total := 0.
	totalNet := aReceptiveAccount iterateTransactionsWith: [:aTransaction | total := aTransaction modifyNet: total] storeResultIn: total.
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:36:02' prior: 51015452!
summaryForReceptiveAccount: aReceptiveAccount
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:36:13' prior: 51015438!
summaryFor: anAccount
	anAccount accept: self.! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:39:25'!
summaryForPortfolio: aPortfolio
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:43:42' prior: 51015462!
summaryForReceptiveAccount: aReceptiveAccount
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:47:06' prior: 51015476!
summaryForReceptiveAccount: aReceptiveAccount
	
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:47:17'!
summaryForTransactions: aReceptiveAccount
	
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:48:18'!
summaryForTransaction: aReceptiveAccount
	
	
	! !

!methodRemoval: Summary #summaryForTransactions: stamp: 'BW 6/2/2021 17:48:18'!
summaryForTransactions: aReceptiveAccount
	
	
	!
!ReceptiveAccount methodsFor: 'nil' stamp: 'BW 6/2/2021 17:57:00'!
accept: aSummary
	transactions do: [:aTransaction | aTransaction accept: aSummary]! !

!methodRemoval: Summary #summaryForPortfolio: stamp: 'BW 6/2/2021 17:57:16'!
summaryForPortfolio: aPortfolio
	
	!

!methodRemoval: Summary #summaryForReceptiveAccount: stamp: 'BW 6/2/2021 17:57:18'!
summaryForReceptiveAccount: aReceptiveAccount
	
	
	!
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:57:47' prior: 51015490!
summaryForTransaction: aTransaction.
	
	
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 17:59:32' prior: 51015512!
summaryForTransaction: aTransaction.
	
	
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:05:30'!
summaryForReceptiveAccount: aReceptiveAccount.
	
	
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:05:44'!
summaryForPortfolio: aPortfolio.
	
	
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:07:02' prior: 51015498!
accept: aSummary
	^self accountSummary.! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:07:10' prior: 51015467!
summaryFor: anAccount
	^anAccount accept: self.! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:07:59' prior: 51009157!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	"self assert: account accountSummary equals: (OrderedCollection with: 'Balance = 0')."
	self assert: (Summary new for: account) equals: (OrderedCollection with: 'Balance = 0').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:08:16' prior: 51015541!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	"self assert: account accountSummary equals: (OrderedCollection with: 'Balance = 0')."
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:08:23'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:08:27'!
PASSED!

a := MethodArgumentChanger for: SummaryTest.
a renameOnEveryMethod: 'account accountSummary' to: '(Summary new summaryFor: account)'!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51012439!
test12

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51009280!
test07SummaryRegistresMultipleExitTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 10' with: 'Salida por transferencia de 20'  with: 'Balance = -30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51009256!
test06SummaryRegistresSingeExitTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 10'  with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51013027!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51009233!
test05SummaryRegistresMultipleWithdraws
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	Withdraw register: 32 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'ExtracciÔøΩn por 32' with: 'Balance = -42').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51009191!
test03SummaryRegistresMultipleDeposits
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 138' with: 'Balance = 148').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51009334!
test09SummaryRegistresMultipleEntryTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 10' with: 'Entrada por transferencia de 20' with: 'Balance = 30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51012410!
test10

	|portfolio|
	portfolio := Portfolio new.
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51009310!
test08SummaryRegistresSingleEntryTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 10'  with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51009214!
test04SummaryRegistresSingleWithdraw
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51009172!
test02SummaryRegistresSingeDeposit
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:58' prior: 51012418!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:10:59' prior: 51015553!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	"self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'Balance = 0')."
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'Balance = 0').! !

a := MethodArgumentChanger for: SummaryTest.
a renameOnEveryMethod: 'account1 accountSummary' to: '(Summary new summaryFor: account1)'!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015575!
test12

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015591!
test07SummaryRegistresMultipleExitTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary new summaryFor: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10' with: 'Salida por transferencia de 20'  with: 'Balance = -30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015607!
test06SummaryRegistresSingeExitTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary new summaryFor: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10'  with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015620!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015639!
test05SummaryRegistresMultipleWithdraws
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	Withdraw register: 32 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'ExtracciÔøΩn por 32' with: 'Balance = -42').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015652!
test03SummaryRegistresMultipleDeposits
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 138' with: 'Balance = 148').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015665!
test09SummaryRegistresMultipleEntryTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 10' with: 'Entrada por transferencia de 20' with: 'Balance = 30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015681!
test10

	|portfolio|
	portfolio := Portfolio new.
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015689!
test08SummaryRegistresSingleEntryTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 10'  with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015702!
test04SummaryRegistresSingleWithdraw
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015713!
test02SummaryRegistresSingeDeposit
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015724!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:32' prior: 51015736!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	"self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'Balance = 0')."
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'Balance = 0').! !

a := MethodArgumentChanger for: SummaryTest.
a renameOnEveryMethod: 'account2 accountSummary' to: '(Summary new summaryFor: account2)'!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015753!
test12

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015769!
test07SummaryRegistresMultipleExitTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary new summaryFor: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10' with: 'Salida por transferencia de 20'  with: 'Balance = -30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015786!
test06SummaryRegistresSingeExitTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary new summaryFor: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10'  with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015800!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015819!
test05SummaryRegistresMultipleWithdraws
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	Withdraw register: 32 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'ExtracciÔøΩn por 32' with: 'Balance = -42').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015832!
test03SummaryRegistresMultipleDeposits
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 138' with: 'Balance = 148').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015845!
test09SummaryRegistresMultipleEntryTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary new summaryFor: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 10' with: 'Entrada por transferencia de 20' with: 'Balance = 30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015861!
test10

	|portfolio|
	portfolio := Portfolio new.
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015869!
test08SummaryRegistresSingleEntryTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary new summaryFor: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 10'  with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015882!
test04SummaryRegistresSingleWithdraw
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015893!
test02SummaryRegistresSingeDeposit
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015904!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:11:50' prior: 51015916!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	"self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'Balance = 0')."
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:11:56'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:11:56'!
PASSED!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:12:03' prior: 51016098!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'Balance = 0').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:13:17' prior: 51015531!
accept: aSummary
	^aSummary summaryForReceptiveAccount: self.! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:13:56' prior: 51015521!
summaryForReceptiveAccount: aReceptiveAccount.
	^aReceptiveAccount accountSummary.
	
	
	! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:14:02'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:14:02'!
PASSED!
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:14:37' prior: 51016163!
summaryForReceptiveAccount: aReceptiveAccount.
	^aReceptiveAccount acceptAllTransactions: self.
	
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:15:30'!
acceptAllTransactions: aSummary
	transactions do: [:aTransaction | aTransaction accept: aSummary]! !
!AccountTransaction methodsFor: 'nil' stamp: 'BW 6/2/2021 18:16:55'!
accept: aSummary
	^aSummary summaryForTransaction: self.! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:17:35' prior: 51015517!
summaryForTransaction: aTransaction
	^(aTransaction isKindOf: Deposit)
	
	
	! !

!classDefinition: #Summary category: 'Portfolio-2' stamp: 'BW 6/2/2021 18:20:30'!
Object subclass: #Summary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:20:28' prior: 51016225!
summaryForTransaction: aTransaction
	(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'DepÔøΩsito por ', aTransaction value asString].
	(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString].
	(aTransaction isKindOf: DepositTransference ) ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString].
	(aTransaction isKindOf: WithdrawTransference ) ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString].
	
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:22:39' prior: 51015536!
summaryFor: anAccount
	summary := OrderedCollection new.
	^anAccount accept: self.! !

!methodRemoval: Summary #summaryForPortfolio: stamp: 'BW 6/2/2021 18:22:44'!
summaryForPortfolio: aPortfolio.
	
	
	
	!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:23:07'!
FAILURE!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:23:07'!
FAILURE!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:23:08'!
FAILURE!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:23:08'!
FAILURE!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:23:08'!
FAILURE!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:23:08'!
FAILURE!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:23:08'!
FAILURE!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:23:08'!
FAILURE!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:23:08'!
FAILURE!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:23:08'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:23:08'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:23:08'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:23:08'!
PASSED!
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:24:30' prior: 51016257!
summaryFor: anAccount
	summary := OrderedCollection new.
	anAccount accept: self.
	summary add: 'Balance = ', anAccount balance asString.
	^summary! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:24:37'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:24:37'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:24:37'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:24:37'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:24:37'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:24:37'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:24:38'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:24:38'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:24:38'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:24:38'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:24:38'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:24:38'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:24:38'!
PASSED!
!Portfolio methodsFor: 'nil' stamp: 'BW 6/2/2021 18:25:51'!
accept: aSummary
	aSummary summaryForPortfolio: self.! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:26:17'!
summaryForPortfolio: aPortfolio
	aPortfolio ! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:26:45' prior: 51016357!
summaryForPortfolio: aPortfolio
	aPortfolio acceptAllAccounts: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:27:44'!
acceptAllAccounts: aSummary
	^self accountSummary.! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:27:51'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:27:51'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:27:51'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:27:51'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:27:51'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:27:51'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:27:51'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:27:51'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:27:51'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:27:51'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:27:52'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:27:52'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:27:52'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:28:50' prior: 51016367!
acceptAllAccounts: aSummary
	accounts do: [:anAccount | anAccount accept: aSummary]! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:29:43'!
PASSED!

a := MethodArgumentChanger for: SummaryTest.
a renameOnEveryMethod: 'portfolio accountSummary' to: '(Summary new summaryFor: portfolio)'!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:09' prior: 51015933!
test12

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: (Summary new summaryFor: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:09' prior: 51015949!
test07SummaryRegistresMultipleExitTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary new summaryFor: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10' with: 'Salida por transferencia de 20'  with: 'Balance = -30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:09' prior: 51015966!
test06SummaryRegistresSingeExitTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary new summaryFor: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10'  with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:09' prior: 51015980!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:09' prior: 51015999!
test05SummaryRegistresMultipleWithdraws
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	Withdraw register: 32 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'ExtracciÔøΩn por 32' with: 'Balance = -42').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:09' prior: 51016012!
test03SummaryRegistresMultipleDeposits
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 138' with: 'Balance = 148').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:09' prior: 51016025!
test09SummaryRegistresMultipleEntryTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary new summaryFor: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 10' with: 'Entrada por transferencia de 20' with: 'Balance = 30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:09' prior: 51016042!
test10

	|portfolio|
	portfolio := Portfolio new.
	self assert: (Summary new summaryFor: portfolio) equals: (OrderedCollection with: 'Balance = 0').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:10' prior: 51016050!
test08SummaryRegistresSingleEntryTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary new summaryFor: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 10'  with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:10' prior: 51016064!
test04SummaryRegistresSingleWithdraw
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:10' prior: 51016075!
test02SummaryRegistresSingeDeposit
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:10' prior: 51016086!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: (Summary new summaryFor: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:10' prior: 51016149!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'Balance = 0').! !

a := MethodArgumentChanger for: SummaryTest.
a renameOnEveryMethod: 'portfolio1 accountSummary' to: '(Summary new summaryFor: portfolio1)'!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016460!
test12

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: (Summary new summaryFor: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016477!
test07SummaryRegistresMultipleExitTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary new summaryFor: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10' with: 'Salida por transferencia de 20'  with: 'Balance = -30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016494!
test06SummaryRegistresSingeExitTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary new summaryFor: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10'  with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016508!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary new summaryFor: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016527!
test05SummaryRegistresMultipleWithdraws
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	Withdraw register: 32 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'ExtracciÔøΩn por 32' with: 'Balance = -42').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016540!
test03SummaryRegistresMultipleDeposits
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 138' with: 'Balance = 148').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016553!
test09SummaryRegistresMultipleEntryTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary new summaryFor: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 10' with: 'Entrada por transferencia de 20' with: 'Balance = 30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016570!
test10

	|portfolio|
	portfolio := Portfolio new.
	self assert: (Summary new summaryFor: portfolio) equals: (OrderedCollection with: 'Balance = 0').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016578!
test08SummaryRegistresSingleEntryTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary new summaryFor: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 10'  with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016592!
test04SummaryRegistresSingleWithdraw
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016603!
test02SummaryRegistresSingeDeposit
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016614!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: (Summary new summaryFor: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:30:19' prior: 51016626!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	self assert: (Summary new summaryFor: account) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:30:28'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:30:28'!
PASSED!
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:31:43' prior: 51016208!
summaryForReceptiveAccount: aReceptiveAccount.
	aReceptiveAccount acceptAllTransactions: self.
	
	
	! !

Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferNet category: 'Portfolio-2' stamp: 'BW 6/2/2021 18:32:40'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!TransferNet methodsFor: 'no messages' stamp: 'BW 6/2/2021 18:34:05'!
transferNetFor: anAccount
	anAccount accept: self.! !

!classDefinition: #TransferNet category: 'Portfolio-2' stamp: 'BW 6/2/2021 18:34:48'!
Object subclass: #TransferNet
	instanceVariableNames: 'neto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:34:46' prior: 51016871!
transferNetFor: anAccount
	neto := 0.
	anAccount accept: self.
	^'Neto por transferencias = ', neto asString. ! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:36:19' prior: 51016883!
transferNetFor: anAccount
	neto := 0.
	anAccount acceptNet: self.
	^'Neto por transferencias = ', neto asString. ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:36:44'!
acceptNet: aTransferNet
	^aTransferNet transferNetForReceptiveAccount: self.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:37:35'!
transferNetForReceptiveAccount: aReceptiveAccount
	aReceptiveAccount acceptAllTransactions: self.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:37:57' prior: 51016214!
acceptAllTransactions: aReport
	transactions do: [:aTransaction | aTransaction accept: aReport]! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:39:04'!
reportForReceptiveAccount: aReceptiveAccount.
	aReceptiveAccount acceptAllTransactions: self.
	
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:39:04' prior: 51016158!
accept: aSummary
	^aSummary reportForReceptiveAccount: self.! !

!methodRemoval: Summary #summaryForReceptiveAccount: stamp: 'BW 6/2/2021 18:39:04'!
summaryForReceptiveAccount: aReceptiveAccount.
	aReceptiveAccount acceptAllTransactions: self.
	
	
	!

!methodRemoval: ReceptiveAccount #acceptNet: stamp: 'BW 6/2/2021 18:39:17'!
acceptNet: aTransferNet
	^aTransferNet transferNetForReceptiveAccount: self.!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:39:21' prior: 51016890!
transferNetFor: anAccount
	neto := 0.
	anAccount accept: self.
	^'Neto por transferencias = ', neto asString. ! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:39:40'!
reportForReceptiveAccount: aReceptiveAccount
	aReceptiveAccount acceptAllTransactions: self.
	! !

!methodRemoval: TransferNet #transferNetForReceptiveAccount: stamp: 'BW 6/2/2021 18:39:40'!
transferNetForReceptiveAccount: aReceptiveAccount
	aReceptiveAccount acceptAllTransactions: self.
	!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:39:58' prior: 51016922!
accept: aReport
	^aReport reportForReceptiveAccount: self.! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:40:46'!
reportForTransaction: aTransaction
	(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'DepÔøΩsito por ', aTransaction value asString].
	(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString].
	(aTransaction isKindOf: DepositTransference ) ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString].
	(aTransaction isKindOf: WithdrawTransference ) ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString].
	
	
	! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:40:46' prior: 51016220!
accept: aSummary
	^aSummary reportForTransaction: self.! !

!methodRemoval: Summary #summaryForTransaction: stamp: 'BW 6/2/2021 18:40:46'!
summaryForTransaction: aTransaction
	(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'DepÔøΩsito por ', aTransaction value asString].
	(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString].
	(aTransaction isKindOf: DepositTransference ) ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString].
	(aTransaction isKindOf: WithdrawTransference ) ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString].
	
	
	!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:40:56' prior: 51016982!
accept: aReport
	^aReport reportForTransaction: self.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:41:41'!
reportForTransaction: aTransaction
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:43:23' prior: 51017011!
reportForTransaction: aTransaction
	(aTransaction isKindOf: DepositTransference ) ifTrue: [neto := neto + aTransaction value].
	(aTransaction isKindOf: WithdrawTransference ) ifTrue: [neto := neto - aTransaction value].
	
	! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:43:31'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 18:43:35'!
PASSED!

a := MethodArgumentChanger for: TransferNetTest.
a renameOnEveryMethod: 'account1 transferNet' to: '(TransferNet new transferNetFor: account1)'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:49' prior: 51011871!
test12

	|account1 account2 account3 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio1 transferNet equals:  'Neto de transferencias = 40'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:49' prior: 51010247!
test02TransferNetRegistersASingeExitTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:49' prior: 51010367!
test06TransferNetDoesNotRegisterNonTransferenceTransactions

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	Withdraw register: 300 on: account2.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:49' prior: 51009962!
test01TransferNetIsZeroForNewAccount

	|account1 |
	account1 := ReceptiveAccount new.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = 0'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:50' prior: 51010295!
test04TransferNetRegistersASingleEntryTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:50' prior: 51011681!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: portfolio transferNet equals:  'Neto de transferencias = -30'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:50' prior: 51011695!
test10

	|account1 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 500 on: account1.
	
	self assert: portfolio transferNet equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:50' prior: 51010271!
test03TransferNetRegistersMultipleExitTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:50' prior: 51011668!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: portfolio transferNet equals:  'Neto de transferencias = -10'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:50' prior: 51011660!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: portfolio transferNet equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:50' prior: 51010316!
test05TransferNetRegistersMultipleEntryTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: account2 transferNet equals: 'Neto de transferencias = 30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:44:50' prior: 51011747!
test11

	|account1 account2 account3 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio transferNet equals:  'Neto de transferencias = 40'! !

a := MethodArgumentChanger for: TransferNetTest.
a renameOnEveryMethod: 'account2 transferNet' to: '(TransferNet new transferNetFor: account2)'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:12' prior: 51017106!
test12

	|account1 account2 account3 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio1 transferNet equals:  'Neto de transferencias = 40'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:12' prior: 51017125!
test02TransferNetRegistersASingeExitTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:12' prior: 51017138!
test06TransferNetDoesNotRegisterNonTransferenceTransactions

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	Withdraw register: 300 on: account2.
	
	self assert: (TransferNet new transferNetFor: account2) equals: 'Neto de transferencias = 10'.
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:13' prior: 51017156!
test01TransferNetIsZeroForNewAccount

	|account1 |
	account1 := ReceptiveAccount new.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = 0'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:13' prior: 51017165!
test04TransferNetRegistersASingleEntryTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet new transferNetFor: account2) equals: 'Neto de transferencias = 10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:13' prior: 51017177!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: portfolio transferNet equals:  'Neto de transferencias = -30'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:13' prior: 51017191!
test10

	|account1 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 500 on: account1.
	
	self assert: portfolio transferNet equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:13' prior: 51017203!
test03TransferNetRegistersMultipleExitTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:13' prior: 51017218!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: portfolio transferNet equals:  'Neto de transferencias = -10'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:13' prior: 51017231!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: portfolio transferNet equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:13' prior: 51017239!
test05TransferNetRegistersMultipleEntryTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new transferNetFor: account2) equals: 'Neto de transferencias = 30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:13' prior: 51017253!
test11

	|account1 account2 account3 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio transferNet equals:  'Neto de transferencias = 40'! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 18:45:20'!
FAILURE!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 18:45:20'!
FAILURE!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 18:45:20'!
FAILURE!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 18:45:20'!
FAILURE!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 18:45:20'!
FAILURE!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 18:45:20'!
FAILURE!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 18:45:20'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 18:45:20'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 18:45:20'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 18:45:20'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 18:45:20'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 18:45:20'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 18:45:29'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:45:41' prior: 51016938!
transferNetFor: anAccount
	neto := 0.
	anAccount accept: self.
	^'Neto de transferencias = ', neto asString. ! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 18:45:45'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 18:45:45'!
PASSED!
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:46:17'!
reportForPortfolio: aPortfolio
	aPortfolio acceptAllAccounts: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:46:17' prior: 51016352!
accept: aSummary
	aSummary reportForPortfolio: self.! !

!methodRemoval: Summary #summaryForPortfolio: stamp: 'BW 6/2/2021 18:46:17'!
summaryForPortfolio: aPortfolio
	aPortfolio acceptAllAccounts: self.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:46:23' prior: 51017530!
accept: aReport
	aReport reportForPortfolio: self.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:01'!
reportForPortfolio: aPortfolio
	aPortfolio acceptAllAccounts: self.
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:21' prior: 51016411!
acceptAllAccounts: aReport
	accounts do: [:anAccount | anAccount accept: aReport]! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:47:24'!
PASSED!

a := MethodArgumentChanger for: TransferNetTest.
a renameOnEveryMethod: 'portfolio transferNet' to: '(TransferNet new transferNetFor: portfolio)'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:50' prior: 51017274!
test12

	|account1 account2 account3 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: portfolio1 transferNet equals:  'Neto de transferencias = 40'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:50' prior: 51017293!
test02TransferNetRegistersASingeExitTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:50' prior: 51017306!
test06TransferNetDoesNotRegisterNonTransferenceTransactions

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	Withdraw register: 300 on: account2.
	
	self assert: (TransferNet new transferNetFor: account2) equals: 'Neto de transferencias = 10'.
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:50' prior: 51017325!
test01TransferNetIsZeroForNewAccount

	|account1 |
	account1 := ReceptiveAccount new.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = 0'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:50' prior: 51017334!
test04TransferNetRegistersASingleEntryTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet new transferNetFor: account2) equals: 'Neto de transferencias = 10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:50' prior: 51017347!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new transferNetFor: portfolio) equals:  'Neto de transferencias = -30'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:51' prior: 51017361!
test10

	|account1 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 500 on: account1.
	
	self assert: (TransferNet new transferNetFor: portfolio) equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:51' prior: 51017373!
test03TransferNetRegistersMultipleExitTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:51' prior: 51017388!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet new transferNetFor: portfolio) equals:  'Neto de transferencias = -10'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:51' prior: 51017401!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: (TransferNet new transferNetFor: portfolio) equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:51' prior: 51017409!
test05TransferNetRegistersMultipleEntryTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new transferNetFor: account2) equals: 'Neto de transferencias = 30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:51' prior: 51017424!
test11

	|account1 account2 account3 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet new transferNetFor: portfolio) equals:  'Neto de transferencias = 40'! !

a := MethodArgumentChanger for: TransferNetTest.
a renameOnEveryMethod: 'portfolio1 transferNet' to: '(TransferNet new transferNetFor: portfolio1)'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:56' prior: 51017600!
test12

	|account1 account2 account3 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet new transferNetFor: portfolio1) equals:  'Neto de transferencias = 40'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:56' prior: 51017619!
test02TransferNetRegistersASingeExitTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:56' prior: 51017632!
test06TransferNetDoesNotRegisterNonTransferenceTransactions

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	Withdraw register: 300 on: account2.
	
	self assert: (TransferNet new transferNetFor: account2) equals: 'Neto de transferencias = 10'.
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:56' prior: 51017651!
test01TransferNetIsZeroForNewAccount

	|account1 |
	account1 := ReceptiveAccount new.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = 0'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:56' prior: 51017660!
test04TransferNetRegistersASingleEntryTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet new transferNetFor: account2) equals: 'Neto de transferencias = 10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:57' prior: 51017673!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new transferNetFor: portfolio) equals:  'Neto de transferencias = -30'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:57' prior: 51017688!
test10

	|account1 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 500 on: account1.
	
	self assert: (TransferNet new transferNetFor: portfolio) equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:57' prior: 51017701!
test03TransferNetRegistersMultipleExitTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new transferNetFor: account1) equals: 'Neto de transferencias = -30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:57' prior: 51017716!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet new transferNetFor: portfolio) equals:  'Neto de transferencias = -10'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:57' prior: 51017729!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: (TransferNet new transferNetFor: portfolio) equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:57' prior: 51017737!
test05TransferNetRegistersMultipleEntryTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new transferNetFor: account2) equals: 'Neto de transferencias = 30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:47:57' prior: 51017752!
test11

	|account1 account2 account3 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet new transferNetFor: portfolio) equals:  'Neto de transferencias = 40'! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 18:48:01'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 18:48:02'!
PASSED!

----SNAPSHOT----(2 June 2021 18:48:38) CuisUniversity-4532.image priorSource: 21880646!

!methodRemoval: Account #accountSummary stamp: 'BW 6/2/2021 18:48:47'!
accountSummary

	| summary |
	summary := self accountSummaryWithoutBalance.
	summary add: ('Balance = ', self balance asString).
	^summary!

!methodRemoval: Account #accountSummaryWithoutBalance stamp: 'BW 6/2/2021 18:48:50'!
accountSummaryWithoutBalance
	self subclassResponsibility.!

!methodRemoval: Account #transferNet stamp: 'BW 6/2/2021 18:49:00'!
transferNet
	
	| neto |
	neto := self transferNetValue.
	^'Neto de transferencias = ', neto asString.
	!

!methodRemoval: Account #transferNetValue stamp: 'BW 6/2/2021 18:49:02'!
transferNetValue
	self subclassResponsibility.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 18:49:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 18:49:07'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 18:49:08'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 18:49:08'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 18:49:08'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 18:49:08'!
PASSED!

!methodRemoval: Portfolio #accountSummaryWithoutBalance stamp: 'BW 6/2/2021 18:49:18'!
accountSummaryWithoutBalance
	| summary |
	summary := OrderedCollection new.
	accounts do: [:anAccount | summary addAll: anAccount accountSummaryWithoutBalance].
	^summary!

!methodRemoval: Portfolio #transferNetValue stamp: 'BW 6/2/2021 18:49:18'!
transferNetValue
	| neto |
	neto := 0.
	accounts do: [:anAccount | neto := neto + anAccount transferNetValue].
	^neto.!

!methodRemoval: ReceptiveAccount #accountSummaryWithoutBalance stamp: 'BW 6/2/2021 18:49:26'!
accountSummaryWithoutBalance

	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction summaryLine].
	^summary.!

!methodRemoval: ReceptiveAccount #transferNetValue stamp: 'BW 6/2/2021 18:49:26'!
transferNetValue

	| neto |
	neto := 0.
	transactions do: [:aTransaction | neto := aTransaction modifyNet: neto].
	^neto.!
!Account methodsFor: 'nil' stamp: 'BW 6/2/2021 18:51:17'!
accept: aReport
	self subclassResponsibility.! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:52:39' prior: 51016915!
reportForReceptiveAccount: aReceptiveAccount.
	aReceptiveAccount acceptAllTransactions: self.
	
	
	! !

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Report category: 'Portfolio-2' stamp: 'BW 6/2/2021 18:53:16'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

Report subclass: #TransferNet
	instanceVariableNames: 'neto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferNet category: 'Portfolio-2' stamp: 'BW 6/2/2021 18:53:29'!
Report subclass: #TransferNet
	instanceVariableNames: 'neto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

Report subclass: #Summary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Summary category: 'Portfolio-2' stamp: 'BW 6/2/2021 18:53:36'!
Report subclass: #Summary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!Report methodsFor: 'no messages' stamp: 'BW 6/2/2021 18:55:15'!
reportForPortfolio: aPortfolio
	self subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:55:31'!
reportForReceptiveAccount: aReceptiveAccount.
	self subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:55:49'!
reportForTransaction: aTransaction
	self subclassResponsibility.! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:28'!
for: anAccount
	summary := OrderedCollection new.
	anAccount accept: self.
	summary add: 'Balance = ', anAccount balance asString.
	^summary! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016772!
test04SummaryRegistresSingleWithdraw
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	self assert: (Summary new for: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016794!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: (Summary new for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016674!
test06SummaryRegistresSingeExitTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary new for: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10'  with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016707!
test05SummaryRegistresMultipleWithdraws
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	Withdraw register: 32 on: account.
	self assert: (Summary new for: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'ExtracciÔøΩn por 32' with: 'Balance = -42').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016750!
test10

	|portfolio|
	portfolio := Portfolio new.
	self assert: (Summary new for: portfolio) equals: (OrderedCollection with: 'Balance = 0').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016758!
test08SummaryRegistresSingleEntryTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary new for: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 10'  with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016733!
test09SummaryRegistresMultipleEntryTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary new for: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 10' with: 'Entrada por transferencia de 20' with: 'Balance = 30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016640!
test12

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: (Summary new for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016806!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	self assert: (Summary new for: account) equals: (OrderedCollection with: 'Balance = 0').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016720!
test03SummaryRegistresMultipleDeposits
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: (Summary new for: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 138' with: 'Balance = 148').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016783!
test02SummaryRegistresSingeDeposit
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: (Summary new for: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:29' prior: 51016688!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary new for: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:30' prior: 51016657!
test07SummaryRegistresMultipleExitTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary new for: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10' with: 'Salida por transferencia de 20'  with: 'Balance = -30').! !

!methodRemoval: Summary #summaryFor: stamp: 'BW 6/2/2021 18:56:30'!
summaryFor: anAccount
	summary := OrderedCollection new.
	anAccount accept: self.
	summary add: 'Balance = ', anAccount balance asString.
	^summary!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 18:56:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 18:56:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 18:56:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 18:56:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 18:56:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 18:56:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:56:33'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 18:56:34'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 18:56:35'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 18:56:35'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 18:56:35'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:55'!
for: anAccount
	neto := 0.
	anAccount accept: self.
	^'Neto de transferencias = ', neto asString. ! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:55' prior: 51017912!
test05TransferNetRegistersMultipleEntryTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new for: account2) equals: 'Neto de transferencias = 30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:55' prior: 51017807!
test06TransferNetDoesNotRegisterNonTransferenceTransactions

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	Withdraw register: 300 on: account2.
	
	self assert: (TransferNet new for: account2) equals: 'Neto de transferencias = 10'.
	self assert: (TransferNet new for: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:55' prior: 51017891!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet new for: portfolio) equals:  'Neto de transferencias = -10'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:55' prior: 51017876!
test03TransferNetRegistersMultipleExitTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new for: account1) equals: 'Neto de transferencias = -30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:55' prior: 51017835!
test04TransferNetRegistersASingleEntryTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet new for: account2) equals: 'Neto de transferencias = 10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:55' prior: 51017904!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: (TransferNet new for: portfolio) equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:56' prior: 51017826!
test01TransferNetIsZeroForNewAccount

	|account1 |
	account1 := ReceptiveAccount new.
	
	self assert: (TransferNet new for: account1) equals: 'Neto de transferencias = 0'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:56' prior: 51017848!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet new for: portfolio) equals:  'Neto de transferencias = -30'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:56' prior: 51017794!
test02TransferNetRegistersASingeExitTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet new for: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:56' prior: 51017774!
test12

	|account1 account2 account3 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet new for: portfolio1) equals:  'Neto de transferencias = 40'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:56' prior: 51017863!
test10

	|account1 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 500 on: account1.
	
	self assert: (TransferNet new for: portfolio) equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:56:56' prior: 51017927!
test11

	|account1 account2 account3 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet new for: portfolio) equals:  'Neto de transferencias = 40'! !

!methodRemoval: TransferNet #transferNetFor: stamp: 'BW 6/2/2021 18:56:56'!
transferNetFor: anAccount
	neto := 0.
	anAccount accept: self.
	^'Neto de transferencias = ', neto asString. !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 18:56:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 18:56:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 18:56:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 18:56:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 18:56:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 18:57:00'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 18:57:01'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 18:57:02'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 18:57:02'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 18:57:02'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 18:57:02'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 18:57:02'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 18:57:02'!
PASSED!
!Report methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 18:57:23'!
for: anAccount
	self subclassResponsibility.! !
!Report class methodsFor: 'no messages' stamp: 'BW 6/2/2021 19:00:25'!
for: anAccount
	^self new for: anAccount.! !

a := MethodArgumentChanger for: TransferNetTest.
a renameOnEveryMethod: 'TransferNet new' to: 'TransferNet '!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:33' prior: 51018748!
test12

	|account1 account2 account3 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet  for: portfolio1) equals:  'Neto de transferencias = 40'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:33' prior: 51018736!
test02TransferNetRegistersASingeExitTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet  for: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:33' prior: 51018646!
test06TransferNetDoesNotRegisterNonTransferenceTransactions

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Deposit register: 10 on: account2. 
	Withdraw register: 300 on: account2.
	
	self assert: (TransferNet  for: account2) equals: 'Neto de transferencias = 10'.
	self assert: (TransferNet  for: account1) equals: 'Neto de transferencias = -10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:33' prior: 51018712!
test01TransferNetIsZeroForNewAccount

	|account1 |
	account1 := ReceptiveAccount new.
	
	self assert: (TransferNet  for: account1) equals: 'Neto de transferencias = 0'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:33' prior: 51018691!
test04TransferNetRegistersASingleEntryTransference

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	
	self assert: (TransferNet  for: account2) equals: 'Neto de transferencias = 10'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:33' prior: 51018721!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -30'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:33' prior: 51018767!
test10

	|account1 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 500 on: account1.
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:34' prior: 51018677!
test03TransferNetRegistersMultipleExitTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet  for: account1) equals: 'Neto de transferencias = -30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:34' prior: 51018664!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -10'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:34' prior: 51018704!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = 0'! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:34' prior: 51018632!
test05TransferNetRegistersMultipleEntryTransferences

	|account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet  for: account2) equals: 'Neto de transferencias = 30'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:34' prior: 51018779!
test11

	|account1 account2 account3 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = 40'! !

a := MethodArgumentChanger for: SummaryTest.
a renameOnEveryMethod: 'Summary new' to: 'Summary '!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:58' prior: 51018359!
test12

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:58' prior: 51018427!
test07SummaryRegistresMultipleExitTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary  for: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10' with: 'Salida por transferencia de 20'  with: 'Balance = -30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:58' prior: 51018295!
test06SummaryRegistresSingeExitTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary  for: account1) equals: (OrderedCollection with: 'Salida por transferencia de 10'  with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:58' prior: 51018408!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary  for: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:58' prior: 51018308!
test05SummaryRegistresMultipleWithdraws
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	Withdraw register: 32 on: account.
	self assert: (Summary  for: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'ExtracciÔøΩn por 32' with: 'Balance = -42').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:58' prior: 51018384!
test03SummaryRegistresMultipleDeposits
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	Deposit register: 138 on: account.
	self assert: (Summary  for: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'DepÔøΩsito por 138' with: 'Balance = 148').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:58' prior: 51018343!
test09SummaryRegistresMultipleEntryTransferences
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	self assert: (Summary  for: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 10' with: 'Entrada por transferencia de 20' with: 'Balance = 30').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:59' prior: 51018321!
test10

	|portfolio|
	portfolio := Portfolio new.
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'Balance = 0').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:59' prior: 51018329!
test08SummaryRegistresSingleEntryTransference
	|account1 account2|
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transference from: account1 to: account2 for: 10.
	self assert: (Summary  for: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 10'  with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:59' prior: 51018272!
test04SummaryRegistresSingleWithdraw
	|account|
	account := ReceptiveAccount new.
	Withdraw register: 10 on: account.
	self assert: (Summary  for: account) equals: (OrderedCollection with: 'ExtracciÔøΩn por 10' with: 'Balance = -10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:59' prior: 51018397!
test02SummaryRegistresSingeDeposit
	|account|
	account := ReceptiveAccount new.
	Deposit register: 10 on: account. 
	self assert: (Summary  for: account) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:59' prior: 51018283!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:01:59' prior: 51018375!
test01NewAccountGeneratesEmptySummary
	|account|
	account := ReceptiveAccount new.
	self assert: (Summary  for: account) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 19:02:03'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 19:02:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 19:02:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 19:02:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 19:02:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 19:02:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 19:02:05'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 19:02:06'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 19:02:07'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 19:02:07'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 19:02:07'!
PASSED!
!Report class methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:03:05' prior: 51018980!
for: anAccount
	^self new initializeFor: anAccount.! !
!Report methodsFor: 'report' stamp: 'BW 6/2/2021 19:04:17'!
initializeFor: anAccount
	self subclassResponsibility.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:04:17' overrides: 51019503!
initializeFor: anAccount
	neto := 0.
	anAccount accept: self.
	^'Neto de transferencias = ', neto asString. ! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:04:18' overrides: 51019503!
initializeFor: anAccount
	summary := OrderedCollection new.
	anAccount accept: self.
	summary add: 'Balance = ', anAccount balance asString.
	^summary! !

!methodRemoval: Report #for: stamp: 'BW 6/2/2021 19:04:18'!
for: anAccount
	self subclassResponsibility.!

!methodRemoval: TransferNet #for: stamp: 'BW 6/2/2021 19:04:18'!
for: anAccount
	neto := 0.
	anAccount accept: self.
	^'Neto de transferencias = ', neto asString. !

!methodRemoval: Summary #for: stamp: 'BW 6/2/2021 19:04:18'!
for: anAccount
	summary := OrderedCollection new.
	anAccount accept: self.
	summary add: 'Balance = ', anAccount balance asString.
	^summary!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 19:04:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 19:04:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 19:04:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 19:04:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 19:04:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 19:04:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 19:04:32'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 19:04:33'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 19:04:34'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 19:04:35'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 19:04:35'!
PASSED!

----SNAPSHOT----(2 June 2021 19:05:39) CuisUniversity-4532.image priorSource: 21962530!
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:46:21'!
reportForDeposit: aDeposit
	summary add: 'DepÔøΩsito por ', aDeposit value asString
	
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:46:56'!
reportForWithdraw: aWithdraw
	summary add: 'ExtracciÔøΩn por ', aWithdraw value asString.
	
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:47:27'!
reportForDepositTransference: aDepositTransference
	summary add: 'Entrada por transferencia de ', aDepositTransference value asString
	
	
	
	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:48:04'!
reportForWithdrawTransference: aWithdrawTransference
	summary add: 'Salida por transferencia de ', aWithdrawTransference value asString
	
	
	
	! !

!methodRemoval: Summary #reportForTransaction: stamp: 'BW 6/2/2021 19:48:33'!
reportForTransaction: aTransaction
	(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'DepÔøΩsito por ', aTransaction value asString].
	(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'ExtracciÔøΩn por ', aTransaction value asString].
	(aTransaction isKindOf: DepositTransference ) ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString].
	(aTransaction isKindOf: WithdrawTransference ) ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString].
	
	
	!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:48:44' prior: 51017006!
accept: aReport
	self subclassResponsibility ! !
!Deposit methodsFor: 'asdglkjsdg' stamp: 'BW 6/2/2021 19:49:37' overrides: 51019761!
accept: aReport
	^aReport reportForDeposit: self.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:50:01' overrides: 51019761!
accept: aReport
	^aReport reportForWithdraw: self.! !
!WithdrawTransference methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:50:15' overrides: 51019761!
accept: aReport
	^aReport reportForWithdrawTransference: self.! !
!DepositTransference methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:50:26' overrides: 51019761!
accept: aReport
	^aReport reportForDepositTransference: self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 19:50:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 19:50:33'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 19:50:34'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 19:50:34'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 19:50:34'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 19:50:34'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 19:50:34'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 19:50:34'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 19:50:34'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 19:50:34'!
ERROR!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 19:50:34'!
ERROR!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 19:50:34'!
ERROR!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 19:50:34'!
ERROR!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 19:50:35'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 19:50:35'!
ERROR!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 19:50:35'!
ERROR!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 19:50:35'!
ERROR!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 19:50:35'!
ERROR!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 19:50:35'!
ERROR!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 19:50:35'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 19:50:35'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 19:50:35'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 19:50:35'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 19:50:35'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 19:50:42'!
ERROR!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 19:51:02'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 19:51:02'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:51:33'!
reportForDeposit: aDeposit
	
	
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:51:43'!
reportForWithdraw: aWithdraw
	
	
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:52:06'!
reportForDepositTransference: aDepositTransference
	neto := neto + aDepositTransference value.
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:52:33'!
reportForWithdrawTransference: aWithdrawTransference
	neto := neto - aWithdrawTransference value.
	
	! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 19:52:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 19:52:36'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 19:52:37'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 19:52:38'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 19:52:38'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 19:52:38'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 19:52:38'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 19:52:38'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 19:52:38'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 19:52:38'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 19:52:38'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 19:52:38'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 19:52:38'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 19:52:39'!
PASSED!

!methodRemoval: Deposit #modifyNet: stamp: 'BW 6/2/2021 19:52:50'!
modifyNet: aNetValue
	^aNetValue.!

!methodRemoval: Deposit #summaryLine stamp: 'BW 6/2/2021 19:52:52'!
summaryLine
	^'DepÔøΩsito por ', self value asString.!

!methodRemoval: DepositTransference #modifyNet: stamp: 'BW 6/2/2021 19:52:56'!
modifyNet: aNetValue
	^aNetValue + self value.!

!methodRemoval: DepositTransference #summaryLine stamp: 'BW 6/2/2021 19:52:58'!
summaryLine
	^'Entrada por transferencia de ', self value asString.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 19:53:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 19:53:01'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #SummaryTest #test10 stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #SummaryTest #test11 stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #SummaryTest #test12 stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #SummaryTest #test13 stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test09 stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test10 stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test11 stamp: 'BW 6/2/2021 19:53:02'!
PASSED!

!testRun: #TransferNetTest #test12 stamp: 'BW 6/2/2021 19:53:03'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 19:53:03'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 19:53:03'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 19:53:03'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 19:53:03'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 19:53:03'!
PASSED!

!methodRemoval: WithdrawTransference #modifyNet: stamp: 'BW 6/2/2021 19:53:07'!
modifyNet: aNetValue
	^aNetValue - self value.!

!methodRemoval: WithdrawTransference #summaryLine stamp: 'BW 6/2/2021 19:53:08'!
summaryLine
	^'Salida por transferencia de ', self value asString.!

!methodRemoval: Withdraw #modifyNet: stamp: 'BW 6/2/2021 19:53:11'!
modifyNet: aNetValue
	^aNetValue.!

!methodRemoval: Withdraw #summaryLine stamp: 'BW 6/2/2021 19:53:12'!
summaryLine
	^'ExtracciÔøΩn por ', self value asString.!

!methodRemoval: AccountTransaction #modifyNet: stamp: 'BW 6/2/2021 19:54:05'!
modifyNet: aNetValue
	self subclassResponsibility !

!methodRemoval: AccountTransaction #summaryLine stamp: 'BW 6/2/2021 19:54:07'!
summaryLine
	self subclassResponsibility !
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:57:08'!
test10NewPortfolioGeneratesEmptySummary

	|portfolio|
	portfolio := Portfolio new.
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: SummaryTest #test10 stamp: 'BW 6/2/2021 19:57:08'!
test10

	|portfolio|
	portfolio := Portfolio new.
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'Balance = 0').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:57:31'!
test11SummaryRegistresSingleDepositInPortfolio

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !

!methodRemoval: SummaryTest #test11 stamp: 'BW 6/2/2021 19:57:32'!
test11

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:58:12'!
test12SummaryRegistersASingleAccountSummary

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !

!methodRemoval: SummaryTest #test12 stamp: 'BW 6/2/2021 19:58:12'!
test12

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:59:25'!
test11SummaryRegistersASingleAccountSummaryInPortfolio

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !

!methodRemoval: SummaryTest #test11SummaryRegistresSingleDepositInPortfolio stamp: 'BW 6/2/2021 19:59:25'!
test11SummaryRegistresSingleDepositInPortfolio

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 19:59:39'!
test12SummaryRegistersMultipleAccountSummariesInPortfolio

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !

!methodRemoval: SummaryTest #test12SummaryRegistersASingleAccountSummary stamp: 'BW 6/2/2021 19:59:40'!
test12SummaryRegistersASingleAccountSummary

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:00:13'!
test13SummaryRegistersMultiLevelSummaries
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary  for: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !

!methodRemoval: SummaryTest #test13 stamp: 'BW 6/2/2021 20:00:14'!
test13
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary  for: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:00:22'!
test13SummaryRegistersMultiLevelAccountSummaries
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary  for: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !

!methodRemoval: SummaryTest #test13SummaryRegistersMultiLevelSummaries stamp: 'BW 6/2/2021 20:00:22'!
test13SummaryRegistersMultiLevelSummaries
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary  for: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:01:39'!
test13SummaryRegistersAllAccountsSummaries
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary  for: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !

!methodRemoval: SummaryTest #test13SummaryRegistersMultiLevelAccountSummaries stamp: 'BW 6/2/2021 20:01:39'!
test13SummaryRegistersMultiLevelAccountSummaries
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary  for: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:01:48'!
test13SummaryRegistersAllAccountsSummariesInPortfolio
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary  for: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').! !

!methodRemoval: SummaryTest #test13SummaryRegistersAllAccountsSummaries stamp: 'BW 6/2/2021 20:01:48'!
test13SummaryRegistersAllAccountsSummaries
	
	|account1 account2 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio1 add: portfolio2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Deposit register: 10 on: account1.
	Withdraw register: 20 on: account2.
	
	self assert: (Summary  for: portfolio1) equals: (OrderedCollection with: 'ExtracciÔøΩn por 20' with: 'DepÔøΩsito por 10' with: 'Balance = -10').!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 20:01:54'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 20:01:54'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 20:01:54'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 20:01:54'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 20:01:55'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 20:01:55'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 20:01:55'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 20:01:55'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 20:01:55'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/2/2021 20:01:55'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleAccountSummaryInPortfolio stamp: 'BW 6/2/2021 20:01:55'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleAccountSummariesInPortfolio stamp: 'BW 6/2/2021 20:01:55'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/2/2021 20:01:55'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 20:01:58'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 20:01:58'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 20:01:58'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 20:01:58'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 20:01:58'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 20:01:58'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 20:01:58'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 20:01:59'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 20:01:59'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/2/2021 20:01:59'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleAccountSummaryInPortfolio stamp: 'BW 6/2/2021 20:01:59'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleAccountSummariesInPortfolio stamp: 'BW 6/2/2021 20:01:59'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/2/2021 20:01:59'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:02:26'!
test07TransferNetIsZeroForNewPortfolio

	|portfolio|
	portfolio := Portfolio new.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = 0'! !

!methodRemoval: TransferNetTest #test07 stamp: 'BW 6/2/2021 20:02:26'!
test07

	|portfolio|
	portfolio := Portfolio new.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = 0'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:03:22'!
test08TransferNetRegistersASingleAccountNetInPortfolio

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -10'! !

!methodRemoval: TransferNetTest #test08 stamp: 'BW 6/2/2021 20:03:23'!
test08

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -10'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:04:11'!
test08TransferNetRegistersASingleTransferenceInPortfolio

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -10'! !

!methodRemoval: TransferNetTest #test08TransferNetRegistersASingleAccountNetInPortfolio stamp: 'BW 6/2/2021 20:04:11'!
test08TransferNetRegistersASingleAccountNetInPortfolio

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -10'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:05:00'!
test09TransferNetRegistersMultipleExitTransferencesInAPortfoliosSingleAccount

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -30'! !

!methodRemoval: TransferNetTest #test09 stamp: 'BW 6/2/2021 20:05:00'!
test09

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -30'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:05:16'!
test09TransferNetRegistersMultipleExitTransferencesInAPortfoliosOnlyAccount

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -30'! !

!methodRemoval: TransferNetTest #test09TransferNetRegistersMultipleExitTransferencesInAPortfoliosSingleAccount stamp: 'BW 6/2/2021 20:05:16'!
test09TransferNetRegistersMultipleExitTransferencesInAPortfoliosSingleAccount

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -30'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:05:23'!
test08TransferNetRegistersASingleExitTransferenceInPortfolio

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -10'! !

!methodRemoval: TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/2/2021 20:05:23'!
test08TransferNetRegistersASingleTransferenceInPortfolio

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -10'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:05:56'!
test08TransferNetRegistersASingleTransferenceInPortfolio

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -10'! !

!methodRemoval: TransferNetTest #test08TransferNetRegistersASingleExitTransferenceInPortfolio stamp: 'BW 6/2/2021 20:05:56'!
test08TransferNetRegistersASingleExitTransferenceInPortfolio

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.

	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -10'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:06:02'!
test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -30'! !

!methodRemoval: TransferNetTest #test09TransferNetRegistersMultipleExitTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/2/2021 20:06:02'!
test09TransferNetRegistersMultipleExitTransferencesInAPortfoliosOnlyAccount

	|account1 account2 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	Transference from: account1 to: account2 for: 10.
	Transference from: account1 to: account2 for: 20.
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = -30'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:06:39'!
test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio

	|account1 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 500 on: account1.
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = 0'! !

!methodRemoval: TransferNetTest #test10 stamp: 'BW 6/2/2021 20:06:39'!
test10

	|account1 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio add: account1.
	Deposit register: 100 on: account1.
	Withdraw register: 500 on: account1.
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = 0'!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:08:26'!
test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').! !

!methodRemoval: SummaryTest #test11SummaryRegistersASingleAccountSummaryInPortfolio stamp: 'BW 6/2/2021 20:08:26'!
test11SummaryRegistersASingleAccountSummaryInPortfolio

	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	Deposit register: 10 on: account.
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'Balance = 10').!
!SummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:08:34'!
test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').! !

!methodRemoval: SummaryTest #test12SummaryRegistersMultipleAccountSummariesInPortfolio stamp: 'BW 6/2/2021 20:08:34'!
test12SummaryRegistersMultipleAccountSummariesInPortfolio

	|portfolio account1 account2|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 10 on: account1.
	Withdraw register: 30 on: account2.
	
	self assert: (Summary  for: portfolio) equals: (OrderedCollection with: 'DepÔøΩsito por 10' with: 'ExtracciÔøΩn por 30' with: 'Balance = -20').!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:09:20'!
test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio

	|account1 account2 account3 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = 40'! !

!methodRemoval: TransferNetTest #test11 stamp: 'BW 6/2/2021 20:09:21'!
test11

	|account1 account2 account3 portfolio|
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet  for: portfolio) equals:  'Neto de transferencias = 40'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:10:00'!
test12TransferNetRegistresAllAccountNetInPortfolio

	|account1 account2 account3 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet  for: portfolio1) equals:  'Neto de transferencias = 40'! !

!methodRemoval: TransferNetTest #test12 stamp: 'BW 6/2/2021 20:10:00'!
test12

	|account1 account2 account3 portfolio1 portfolio2|
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account2.
	
	Transference from: account1 to: account3 for: 10.
	Transference from: account3 to: account2 for: 50.	
	
	
	self assert: (TransferNet  for: portfolio1) equals:  'Neto de transferencias = 40'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 20:10:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 20:10:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 20:10:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 20:10:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 20:10:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 20:10:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 20:10:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 20:10:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 20:10:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 20:10:03'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 20:10:04'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 20:10:05'!
PASSED!

----SNAPSHOT----(2 June 2021 20:12:24) CuisUniversity-4532.image priorSource: 22017972!

!methodRemoval: TransferNet #reportForTransaction: stamp: 'BW 6/2/2021 20:13:48'!
reportForTransaction: aTransaction
	(aTransaction isKindOf: DepositTransference ) ifTrue: [neto := neto + aTransaction value].
	(aTransaction isKindOf: WithdrawTransference ) ifTrue: [neto := neto - aTransaction value].
	
	!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 20:13:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 20:13:51'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/2/2021 20:13:52'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/2/2021 20:13:53'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/2/2021 20:13:53'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/2/2021 20:13:53'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/2/2021 20:13:53'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/2/2021 20:13:53'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 20:13:53'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 20:13:53'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 20:13:53'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 20:13:53'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 20:13:53'!
PASSED!

!methodRemoval: Report #reportForTransaction: stamp: 'BW 6/2/2021 20:14:05'!
reportForTransaction: aTransaction
	self subclassResponsibility.!
!Report methodsFor: 'report' stamp: 'BW 6/2/2021 20:14:20'!
reportForDeposit: aDeposit
	self subclassResponsibility.! !
!Report methodsFor: 'report' stamp: 'BW 6/2/2021 20:14:31'!
reportForWithdraw: aWithdraw
	self subclassResponsibility.! !
!Report methodsFor: 'report' stamp: 'BW 6/2/2021 20:14:48'!
reportForDepositTransference: aDepositTransference
	self subclassResponsibility.! !
!Report methodsFor: 'report' stamp: 'BW 6/2/2021 20:15:00'!
reportForWithdrawTransference: aWithdrawTransference
	self subclassResponsibility.! !

----SNAPSHOT----(2 June 2021 20:16:52) CuisUniversity-4532.image priorSource: 22070845!

TestsEjercicio subclass: #StructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #StructureTest category: 'Portfolio-2' stamp: 'BW 6/2/2021 20:21:25'!
TestsEjercicio subclass: #StructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TestsEjercicio subclass: #StructureSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #StructureSummaryTest category: 'Portfolio-2' stamp: 'BW 6/2/2021 20:21:36'!
TestsEjercicio subclass: #StructureSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Structure category: 'Portfolio-2' stamp: 'BW 6/2/2021 20:25:30'!
Object subclass: #Structure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!StructureTest methodsFor: 'no messages' stamp: 'BW 6/2/2021 20:25:44'!
test01
	| portfolio |
	portfolio := Portfolio named: 'PortfolioTest'.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest').! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:25:57'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'BW 6/2/2021 20:26:12'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'BW 6/2/2021 20:26:35' prior: 51021633!
named: aName
	
	^self new initializeNamed: aName! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:26:37'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-2' stamp: 'BW 6/2/2021 20:27:00'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!Portfolio methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:27:00'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!Portfolio methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:27:17' prior: 51021655!
initializeNamed: aName 
	name := aName.! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:27:32'!
ERROR!
!Structure class methodsFor: 'instance creation' stamp: 'BW 6/2/2021 20:27:44'!
for: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aPortfolio ! !
!Structure class methodsFor: 'instance creation' stamp: 'BW 6/2/2021 20:28:27' prior: 51021667!
for: aPortfolio 
	^self new initializeFor: aPortfolio ! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:28:28'!
ERROR!

!classDefinition: #Structure category: 'Portfolio-2' stamp: 'BW 6/2/2021 20:28:56'!
Object subclass: #Structure
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!Structure methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:28:56'!
initializeFor: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!Structure methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:30:04' prior: 51021689!
initializeFor: aPortfolio 
	^OrderedCollection with: 'PortfolioTest'! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:30:05'!
PASSED!

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:30:05'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:31:22' prior: 51021660!
initializeNamed: aName 
	name := aName.
	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:31:42' prior: 51007429 overrides: 16896425!
initialize

	self initializeNamed: 'Unnamed'.! !
!Portfolio methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:31:52' prior: 51021712 overrides: 16896425!
initialize

	self initializeNamed: 'UnnamedPortfolio'.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 20:32:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 20:32:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 20:32:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 20:32:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 20:32:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 20:32:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 20:32:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 20:32:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 20:32:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 20:32:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 20:32:03'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 20:32:04'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 20:32:05'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 20:32:06'!
PASSED!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:33:08'!
test02
	| portfolio |
	portfolio := Portfolio named: 'PortfolioTest2'.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest2').! !

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:33:09'!
FAILURE!
!Structure methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:34:06' prior: 51021695!
initializeFor: aPortfolio 
	^OrderedCollection with: aPortfolio name! !

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:34:07'!
FAILURE!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:34:24'!
FAILURE!
!Portfolio methodsFor: 'nil' stamp: 'BW 6/2/2021 20:34:39' overrides: 16882612!
name
	^name! !

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:34:58'!
PASSED!

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:34:58'!
PASSED!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:34:58'!
PASSED!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:36:22' prior: 51021915!
test02
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:36:29' prior: 51021947!
test02
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	
	! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:37:14' prior: 51021955!
test02
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').
	! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:37:30' prior: 51021963!
test02
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').
	! !

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:37:32'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'BW 6/2/2021 20:37:39'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'BW 6/2/2021 20:37:55' prior: 51021988!
named: aName
	^self new initializeNamed: aName! !

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:37:56'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio-2' stamp: 'BW 6/2/2021 20:38:05'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:38:06'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:38:10' prior: 51022010!
initializeNamed: aName 
	
	name := aName.! !

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:38:11'!
FAILURE!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:38:42' prior: 51022016!
initializeNamed: aName 
	
	name := aName.
	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:39:01' prior: 51007544 overrides: 16896425!
initialize

	self initializeNamed: 'UnnamedReceptiveAccount'! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/2/2021 20:39:14'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:39:15'!
FAILURE!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/2/2021 20:39:15'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/2/2021 20:39:16'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/2/2021 20:39:17'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/2/2021 20:39:17'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/2/2021 20:39:17'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/2/2021 20:39:17'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/2/2021 20:39:17'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/2/2021 20:39:17'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/2/2021 20:39:17'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/2/2021 20:39:17'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/2/2021 20:39:17'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/2/2021 20:39:17'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/2/2021 20:39:18'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/2/2021 20:39:18'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/2/2021 20:39:18'!
PASSED!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:39:18'!
FAILURE!
!Structure methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:40:39' prior: 51021926!
initializeFor: aPortfolio 
	| jerarquia |
	jerarquia := OrderedCollection with: aPortfolio name.
	^jerarquia.! !
!Structure methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:41:47' prior: 51022233!
initializeFor: aPortfolio 
	| jerarquia |
	jerarquia := OrderedCollection new.
	aPortfolio accept: self.
	^jerarquia.! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:41:56'!
ERROR!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:41:56'!
ERROR!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:42:12'!
ERROR!
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 20:42:25'!
reportForPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 20:43:24' prior: 51022253!
reportForPortfolio: aPortfolio 
	aPortfolio acceptAllAccounts: self.! !

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:43:26'!
ERROR!
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 20:43:38'!
reportForReceptiveAccount: aReceptiveAccount 
	self shouldBeImplemented.! !

Object subclass: #Structure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Structure category: 'Portfolio-2' stamp: 'BW 6/2/2021 20:45:03'!
Object subclass: #Structure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!Structure methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:45:20' prior: 51022240!
initializeFor: aPortfolio 
	
	 OrderedCollection new.
	aPortfolio accept: self.
	! !

!classDefinition: #Structure category: 'Portfolio-2' stamp: 'BW 6/2/2021 20:45:31'!
Object subclass: #Structure
	instanceVariableNames: 'jerarquia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!Structure methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:45:29' prior: 51022281!
initializeFor: aPortfolio 
	jerarquia := OrderedCollection new.
	aPortfolio accept: self.
	^jerarquia.! !
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 20:46:07' prior: 51022265!
reportForReceptiveAccount: aReceptiveAccount 
	jerarquia add: '   ', aReceptiveAccount name.! !

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:46:08'!
ERROR!

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:46:38'!
FAILURE!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:46:38'!
FAILURE!

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:46:41'!
FAILURE!
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 20:47:19' prior: 51022258!
reportForPortfolio: aPortfolio 
	jerarquia add: aPortfolio name.
	aPortfolio acceptAllAccounts: self.! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:47:25'!
PASSED!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:47:25'!
FAILURE!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:47:25'!
FAILURE!

(Structure for: portfolio)!

(OrderedCollection with: 'PortfolioTest' with: '   AccountTest')!

(Structure for: portfolio)!
!ReceptiveAccount methodsFor: 'name' stamp: 'BW 6/2/2021 20:48:32' overrides: 16882612!
name
	^name! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:48:36'!
PASSED!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:48:36'!
PASSED!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:49:54'!
test03
	|portfolio portfolio2|
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio add: portfolio2.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo').
	! !

!testRun: #StructureTest #test03 stamp: 'BW 6/2/2021 20:49:56'!
FAILURE!

!classDefinition: #Structure category: 'Portfolio-2' stamp: 'BW 6/2/2021 20:54:14'!
Object subclass: #Structure
	instanceVariableNames: 'jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 20:54:10' prior: 51022315!
reportForPortfolio: aPortfolio
 	|indentacionLocal|
	indentacionLocal := ''.
	indentacion = 1 ifTrue: [indentacionLocal := '   '].
	jerarquia add: aPortfolio name.
	indentacion := 1.
	aPortfolio acceptAllAccounts: self.
	indentacion := 0.! !
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 20:54:36' prior: 51022361!
reportForPortfolio: aPortfolio
 	|indentacionLocal|
	indentacionLocal := ''.
	indentacion = 1 ifTrue: [indentacionLocal := '   '].
	jerarquia add: indentacionLocal, aPortfolio name.
	indentacion := 1.
	aPortfolio acceptAllAccounts: self.
	! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:54:41'!
PASSED!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:54:41'!
PASSED!

!testRun: #StructureTest #test03 stamp: 'BW 6/2/2021 20:54:41'!
PASSED!
!Structure methodsFor: 'initialization' stamp: 'BW 6/2/2021 20:55:02' prior: 51022294!
initializeFor: aPortfolio 
	jerarquia := OrderedCollection new.
	indentacion := 0.
	aPortfolio accept: self.
	^jerarquia.! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:56:14' prior: 51022340!
test03
	|portfolio portfolio2 portfolio3 portfolio4 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo2'.
	portfolio3 := Portfolio named: 'PortfolioHijo3'.
	portfolio4 := Portfolio named: 'PortfolioHijo4'.
	portfolio add: portfolio2.
	portfolio add: portfolio3.
	portfolio add: portfolio4.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo2' with: '   PortfolioHijo3' with: '   PortfolioHijo4').
	! !

!testRun: #StructureTest #test03 stamp: 'BW 6/2/2021 20:56:22'!
PASSED!

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 20:56:22'!
PASSED!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 20:56:22'!
PASSED!

!testRun: #StructureTest #test03 stamp: 'BW 6/2/2021 20:56:22'!
PASSED!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:49:54' prior: 51022397!
test03
	|portfolio portfolio2|
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio add: portfolio2.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo').
	! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:49:54' prior: 51022426!
test03
	|portfolio portfolio2|
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio add: portfolio2.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo').
	! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:57:00' prior: 51022438!
test03
	|portfolio portfolio2 portfolio3 portfolio4 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo2'.
	portfolio3 := Portfolio named: 'PortfolioHijo3'.
	portfolio4 := Portfolio named: 'PortfolioHijo4'.
	portfolio add: portfolio2.
	portfolio add: portfolio3.
	portfolio add: portfolio4.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo2' with: '   PortfolioHijo3' with: '   PortfolioHijo4').
	! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:57:13' prior: 51022450!
test03
	|portfolio portfolio2|
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio add: portfolio2.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo').! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 20:58:35'!
test04
	|portfolio portfolio2 account|
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo' with: '      CuentaNieta').! !

!testRun: #StructureTest #test04 stamp: 'BW 6/2/2021 20:58:37'!
FAILURE!
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 21:01:56' prior: 51022372!
reportForPortfolio: aPortfolio
 	
	jerarquia add: indentacion, aPortfolio name.
	
	indentacion := indentacion, '   '.
	aPortfolio acceptAllAccounts: self.
	
	! !
!Structure methodsFor: 'initialization' stamp: 'BW 6/2/2021 21:02:04' prior: 51022390!
initializeFor: aPortfolio 
	jerarquia := OrderedCollection new.
	indentacion := ''.
	aPortfolio accept: self.
	^jerarquia.! !
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 21:04:21' prior: 51022499!
reportForPortfolio: aPortfolio
 	
	jerarquia add: indentacion, aPortfolio name.
	
	indentacion := indentacion, '   '.
	aPortfolio acceptAllAccounts: self.
	indentacion := indentacion copyFrom: 4 to: indentacion size.
	
	! !
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 21:04:56' prior: 51022300!
reportForReceptiveAccount: aReceptiveAccount 
	
	jerarquia add: '   ', indentacion, aReceptiveAccount name.! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 21:05:00'!
PASSED!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 21:05:00'!
FAILURE!

!testRun: #StructureTest #test03 stamp: 'BW 6/2/2021 21:05:00'!
PASSED!

!testRun: #StructureTest #test04 stamp: 'BW 6/2/2021 21:05:00'!
FAILURE!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 21:05:04'!
FAILURE!

(Structure for: portfolio)!
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 21:05:41' prior: 51022524!
reportForReceptiveAccount: aReceptiveAccount 
	
	jerarquia add: indentacion, aReceptiveAccount name.! !

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 21:05:43'!
PASSED!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 21:05:43'!
PASSED!

!testRun: #StructureTest #test03 stamp: 'BW 6/2/2021 21:05:43'!
PASSED!

!testRun: #StructureTest #test04 stamp: 'BW 6/2/2021 21:05:43'!
PASSED!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 21:08:20'!
test05
	| angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	childrenPortfolio add: johnsAccount.
	childrenPortfolio add: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia'.
	familyPortfolio add: myAccount.
	familyPortfolio add: childrenPortfolio.
	
! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 21:11:25' prior: 51022558!
test05
	| angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	childrenPortfolio add: johnsAccount.
	childrenPortfolio add: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia'.
	familyPortfolio add: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	self assert: (Structure for: familyPortfolio ) equals: (OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta mia' with: '   PortfolioDeHijos' with: '      Cuenta de Juan' with: '      Cuenta de Angeles').! !

!testRun: #StructureTest #test05 stamp: 'BW 6/2/2021 21:11:27'!
FAILURE!

(Structure for: familyPortfolio )!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 21:12:17' prior: 51022578!
test05
	| angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	childrenPortfolio add: johnsAccount.
	childrenPortfolio add: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia'.
	familyPortfolio add: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	self assert: (Structure for: familyPortfolio ) equals: (OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta mia' with: '   Portfolio de hijos' with: '      Cuenta de Juan' with: '      Cuenta de Angeles').! !

!testRun: #StructureTest #test05 stamp: 'BW 6/2/2021 21:12:18'!
PASSED!

!testRun: #StructureTest #test01 stamp: 'BW 6/2/2021 21:12:18'!
PASSED!

!testRun: #StructureTest #test02 stamp: 'BW 6/2/2021 21:12:18'!
PASSED!

!testRun: #StructureTest #test03 stamp: 'BW 6/2/2021 21:12:18'!
PASSED!

!testRun: #StructureTest #test04 stamp: 'BW 6/2/2021 21:12:19'!
PASSED!

!testRun: #StructureTest #test05 stamp: 'BW 6/2/2021 21:12:19'!
PASSED!

Report subclass: #Structure
	instanceVariableNames: 'jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Structure category: 'Portfolio-2' stamp: 'BW 6/2/2021 21:12:34'!
Report subclass: #Structure
	instanceVariableNames: 'jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

----SNAPSHOT----(2 June 2021 21:13:26) CuisUniversity-4532.image priorSource: 22078069!
!Structure methodsFor: 'report' stamp: 'BW 6/2/2021 22:11:04' prior: 51022514 overrides: 51018249!
reportForPortfolio: aPortfolio
 	
	jerarquia add: indentacion, aPortfolio name.
	indentacion := indentacion, '   '.
	aPortfolio acceptAllAccounts: self.
	indentacion := indentacion copyFrom: 4 to: indentacion size.
	
	! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:15:09'!
test01StructureShowsNewPortfolioAlone
	| portfolio |
	portfolio := Portfolio named: 'PortfolioTest'.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest').! !

!methodRemoval: StructureTest #test01 stamp: 'BW 6/2/2021 22:15:10'!
test01
	| portfolio |
	portfolio := Portfolio named: 'PortfolioTest'.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest').!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:16:13'!
test02StructureIndentsASingleAccountProperly
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').
	! !

!methodRemoval: StructureTest #test02 stamp: 'BW 6/2/2021 22:16:13'!
test02
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').
	!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:18:14'!
test03StructureIndentsASinglePortfolioCorrectly
	|portfolio portfolio2|
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio add: portfolio2.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo').! !

!methodRemoval: StructureTest #test03 stamp: 'BW 6/2/2021 22:18:15'!
test03
	|portfolio portfolio2|
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio add: portfolio2.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo').!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:18:35'!
test02StructureIndentsFirstLevelAccountsProperly
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').
	! !

!methodRemoval: StructureTest #test02StructureIndentsASingleAccountProperly stamp: 'BW 6/2/2021 22:18:35'!
test02StructureIndentsASingleAccountProperly
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').
	!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:18:50'!
test03StructureIndentsFirstLevelPortfoliosCorrectly
	|portfolio portfolio2|
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio add: portfolio2.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo').! !

!methodRemoval: StructureTest #test03StructureIndentsASinglePortfolioCorrectly stamp: 'BW 6/2/2021 22:18:50'!
test03StructureIndentsASinglePortfolioCorrectly
	|portfolio portfolio2|
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio add: portfolio2.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo').!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:18:56'!
test02StructureIndentsFirstLevelAccountsCorrectly
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').
	! !

!methodRemoval: StructureTest #test02StructureIndentsFirstLevelAccountsProperly stamp: 'BW 6/2/2021 22:18:56'!
test02StructureIndentsFirstLevelAccountsProperly
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').
	!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:19:58' prior: 51022482!
test04
	|portfolio portfolio2 account portfolio3 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo' with: '      CuentaNieta').! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:20:18' prior: 51022817!
test04
	|portfolio portfolio2 account portfolio3 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo' with: '      CuentaNieta').! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:20:32' prior: 51022835!
test04
	|portfolio portfolio2 account portfolio3 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo' with: '      CuentaNieta' with: '      PortfolioNieto').! !

!testRun: #StructureTest #test04 stamp: 'BW 6/2/2021 22:20:34'!
PASSED!

!testRun: #StructureTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:20:34'!
PASSED!

!testRun: #StructureTest #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/2/2021 22:20:34'!
PASSED!

!testRun: #StructureTest #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/2/2021 22:20:35'!
PASSED!

!testRun: #StructureTest #test04 stamp: 'BW 6/2/2021 22:20:35'!
PASSED!

!testRun: #StructureTest #test05 stamp: 'BW 6/2/2021 22:20:35'!
PASSED!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:21:08'!
test04StructureIdentsAnyLevelAccountCorrectly
	|portfolio portfolio2 account portfolio3 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo' with: '      CuentaNieta' with: '      PortfolioNieto').! !

!methodRemoval: StructureTest #test04 stamp: 'BW 6/2/2021 22:21:08'!
test04
	|portfolio portfolio2 account portfolio3 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo' with: '      CuentaNieta' with: '      PortfolioNieto').!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:21:25'!
test05EjemploDelEnunciado
	| angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	childrenPortfolio add: johnsAccount.
	childrenPortfolio add: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia'.
	familyPortfolio add: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	self assert: (Structure for: familyPortfolio ) equals: (OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta mia' with: '   Portfolio de hijos' with: '      Cuenta de Juan' with: '      Cuenta de Angeles').! !

!methodRemoval: StructureTest #test05 stamp: 'BW 6/2/2021 22:21:25'!
test05
	| angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	childrenPortfolio add: johnsAccount.
	childrenPortfolio add: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia'.
	familyPortfolio add: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	self assert: (Structure for: familyPortfolio ) equals: (OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta mia' with: '   Portfolio de hijos' with: '      Cuenta de Juan' with: '      Cuenta de Angeles').!

!classDefinition: #SummaryStructure category: 'Portfolio-2' stamp: 'BW 6/2/2021 22:22:43'!
Report subclass: #SummaryStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!StructureSummaryTest methodsFor: 'no messages' stamp: 'BW 6/2/2021 22:22:27'!
test01StructureShowsNewPortfolioAlone
	| portfolio |
	portfolio := Portfolio named: 'PortfolioTest'.
	self assert: (SummaryStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest').! !

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:23:10'!
ERROR!

Object subclass: #SummaryStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #SummaryStructure category: 'Portfolio-2' stamp: 'BW 6/2/2021 22:23:27'!
Object subclass: #SummaryStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:23:38'!
ERROR!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:23:38'!
ERROR!
!SummaryStructure class methodsFor: 'instance creation' stamp: 'BW 6/2/2021 22:23:54'!
for: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aPortfolio ! !
!SummaryStructure class methodsFor: 'instance creation' stamp: 'BW 6/2/2021 22:24:22' prior: 51023018!
for: aPortfolio 
	^self new initializeFor: aPortfolio ! !

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:24:23'!
ERROR!

!classDefinition: #SummaryStructure category: 'Portfolio-2' stamp: 'BW 6/2/2021 22:24:56'!
Object subclass: #SummaryStructure
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!SummaryStructure methodsFor: 'initialization' stamp: 'BW 6/2/2021 22:24:57'!
initializeFor: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!SummaryStructure methodsFor: 'initialization' stamp: 'BW 6/2/2021 22:25:48' prior: 51023043!
initializeFor: aPortfolio 
	^OrderedCollection with: 'PortfolioTest'.! !

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:26:11'!
PASSED!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:26:14'!
PASSED!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:27:20'!
test02StructureIndentsFirstLevelEmptyAccountsCorrectly
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (Structure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').! !

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:27:23'!
PASSED!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:27:23'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:27:23'!
PASSED!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:27:33' prior: 51023061!
test02StructureIndentsFirstLevelEmptyAccountsCorrectly
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (SummaryStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').! !

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:27:34'!
FAILURE!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:28:56'!
FAILURE!

!classDefinition: #SummaryStructure category: 'Portfolio-2' stamp: 'BW 6/2/2021 22:30:20'!
Object subclass: #SummaryStructure
	instanceVariableNames: 'portfolio jerarquia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!SummaryStructure methodsFor: 'initialization' stamp: 'BW 6/2/2021 22:30:19' prior: 51023049!
initializeFor: aPortfolio 
	jerarquia := OrderedCollection new.
	aPortfolio accept: self.
	^jerarquia! !

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:30:25'!
ERROR!
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 22:30:37'!
reportForPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 22:31:31' prior: 51023125!
reportForPortfolio: aPortfolio 
	jerarquia add: aPortfolio name. 
	aPortfolio acceptAllAccounts: self.! !

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:31:33'!
ERROR!
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 22:31:45'!
reportForReceptiveAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 22:32:32' prior: 51023140!
reportForReceptiveAccount: aReceptiveAccount 
	
	jerarquia add: '   ', aReceptiveAccount name. ! !

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:32:36'!
PASSED!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:32:36'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:32:36'!
PASSED!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:36:34'!
test03
	| portfolio account transaction|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	transaction := Deposit register: 10 on: account.
	portfolio add: account.
	self assert: (SummaryStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' 
															       with: '   AccountTest' 
															       with: '      DepÔøΩsito por 10' 
															       with: '       Balance = 10'
															       with: '    Balance = 10').! !
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:36:48' prior: 51023164!
test03
	| portfolio account |
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	Deposit register: 10 on: account.
	portfolio add: account.
	self assert: (SummaryStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' 
															       with: '   AccountTest' 
															       with: '      DepÔøΩsito por 10' 
															       with: '       Balance = 10'
															       with: '    Balance = 10').! !

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 22:36:52'!
FAILURE!
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 22:40:07' prior: 51023146!
reportForReceptiveAccount: aReceptiveAccount 
	|summary|
	jerarquia add: '   ', aReceptiveAccount name. 
	summary := Summary for: aReceptiveAccount.
	summary do: [:aString | jerarquia add: '      ', aString ]! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 22:40:35' prior: 51023205!
reportForReceptiveAccount: aReceptiveAccount 
	
	jerarquia add: '   ', aReceptiveAccount name. 
	(Summary for: aReceptiveAccount) do: [:aString | jerarquia add: '      ', aString ]! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 22:40:47' prior: 51023215!
reportForReceptiveAccount: aReceptiveAccount 
	
	jerarquia add: '   ', aReceptiveAccount name. 
	(Summary for: aReceptiveAccount) do: [:aString | jerarquia add: '      ', aString]! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 22:42:02' prior: 51023130!
reportForPortfolio: aPortfolio 
	jerarquia add: aPortfolio name. 
	aPortfolio acceptAllAccounts: self.
	jerarquia add: '   ', aPortfolio balance asString.! !

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:42:04'!
FAILURE!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:42:04'!
FAILURE!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 22:42:04'!
FAILURE!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:42:11'!
FAILURE!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:42:34'!
FAILURE!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:42:34'!
FAILURE!

 (SummaryStructure for: portfolio)!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:43:09' prior: 51022987!
test01StructureShowsNewPortfolioAlone
	| portfolio |
	portfolio := Portfolio named: 'PortfolioTest'.
	self assert: (SummaryStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   Balance = 0').! !
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:43:50' prior: 51023086!
test02StructureIndentsFirstLevelEmptyAccountsCorrectly
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (SummaryStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' 
															       with: '   AccountTest'
															       with: '      Balance = 0'
																with: '   Balance = 0').! !
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:44:05' prior: 51023184!
test03
	| portfolio account |
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	Deposit register: 10 on: account.
	portfolio add: account.
	self assert: (SummaryStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' 
															       with: '   AccountTest' 
															       with: '      DepÔøΩsito por 10' 
															       with: '      Balance = 10'
															       with: '    Balance = 10').! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 22:44:23' prior: 51023233!
reportForPortfolio: aPortfolio 
	jerarquia add: aPortfolio name. 
	aPortfolio acceptAllAccounts: self.
	jerarquia add: '   Balance = ', aPortfolio balance asString.! !

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:44:26'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:44:26'!
PASSED!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 22:44:26'!
FAILURE!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 22:44:26'!
FAILURE!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:44:33'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:44:33'!
PASSED!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 22:44:33'!
FAILURE!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 22:44:33'!
FAILURE!

(SummaryStructure for: portfolio)!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:45:10' prior: 51023291!
test03
	| portfolio account |
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	Deposit register: 10 on: account.
	portfolio add: account.
	self assert: (SummaryStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' 
															       with: '   AccountTest' 
															       with: '      DepÔøΩsito por 10' 
															       with: '      Balance = 10'
															       with: '   Balance = 10').! !

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 22:45:16'!
PASSED!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 22:45:19'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 22:45:19'!
PASSED!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 22:45:19'!
PASSED!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:46:08'!
test04StructureIdentsAnyLevelAccountCorrectly
	|portfolio portfolio2 account portfolio3 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	self assert: (Structure for: portfolio) equals: (OrderedCollection  with: 'PortfolioPadre' 
														with: '   PortfolioHijo' 
														with: '      CuentaNieta' 
														with: '      PortfolioNieto').! !
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:46:48'!
test04
	|portfolio portfolio2 account portfolio3 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	self assert: (Structure for: portfolio) equals: (OrderedCollection  with: 'PortfolioPadre' 
														with: '   PortfolioHijo' 
														with: '      CuentaNieta' 
														with: '      PortfolioNieto').! !

!methodRemoval: StructureSummaryTest #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/2/2021 22:46:48'!
test04StructureIdentsAnyLevelAccountCorrectly
	|portfolio portfolio2 account portfolio3 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	self assert: (Structure for: portfolio) equals: (OrderedCollection  with: 'PortfolioPadre' 
														with: '   PortfolioHijo' 
														with: '      CuentaNieta' 
														with: '      PortfolioNieto').!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 22:50:15' prior: 51023397!
test04
	|portfolio portfolio2 account portfolio3 expected |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	expected := OrderedCollection   with: 'PortfolioPadre' 
								with: '   PortfolioHijo'
								with: '      AccountTest' 
								with: '         DepÔøΩsito por 10' 
								with: '         Balance = 10'
								with: '      Balance = 10'.
	                                     expected add: '   Balance = 10'	.
	self assert: (SummaryStructure for: portfolio) equals: expected.
	
	! !

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/2/2021 22:50:20'!
FAILURE!

----SNAPSHOT----(2 June 2021 22:51:16) CuisUniversity-4532.image priorSource: 22112331!

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/2/2021 23:44:59'!
FAILURE!

!classDefinition: #SummaryStructure category: 'Portfolio-2' stamp: 'BW 6/2/2021 23:45:37'!
Object subclass: #SummaryStructure
	instanceVariableNames: 'portfolio jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!SummaryStructure methodsFor: 'initialization' stamp: 'BW 6/2/2021 23:45:35' prior: 51023115!
initializeFor: aPortfolio 
	jerarquia := OrderedCollection new.
	indentacion := ''.
	aPortfolio accept: self.
	^jerarquia! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 23:46:39' prior: 51023309!
reportForPortfolio: aPortfolio 
	jerarquia add: indentacion, aPortfolio name. 
	indentacion := indentacion, '   '.
	aPortfolio acceptAllAccounts: self.
	jerarquia add: '   Balance = ', aPortfolio balance asString.! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 23:46:54' prior: 51023489!
reportForPortfolio: aPortfolio 
	jerarquia add: indentacion, aPortfolio name. 
	indentacion := indentacion, '   '.
	aPortfolio acceptAllAccounts: self.
	jerarquia add: '   Balance = ', aPortfolio balance asString.
	indentacion := indentacion copyFrom: 4 to: indentacion size.! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 23:47:15' prior: 51023499!
reportForPortfolio: aPortfolio 
	jerarquia add: indentacion, aPortfolio name. 
	indentacion := indentacion, '   '.
	aPortfolio acceptAllAccounts: self.
	jerarquia add: 'Balance = ', aPortfolio balance asString.
	indentacion := indentacion copyFrom: 4 to: indentacion size.! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 23:47:42' prior: 51023224!
reportForReceptiveAccount: aReceptiveAccount 
	
	jerarquia add: indentacion, aReceptiveAccount name. 
	(Summary for: aReceptiveAccount) do: [:aString | jerarquia add: '      ', aString]! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 23:48:10' prior: 51023523!
reportForReceptiveAccount: aReceptiveAccount 
	
	jerarquia add: indentacion, aReceptiveAccount name. 
	(Summary for: aReceptiveAccount) do: [:aString | jerarquia add: indentacion, '   ', aString]! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 23:48:30' prior: 51023532!
reportForReceptiveAccount: aReceptiveAccount 
	
	jerarquia add: indentacion, aReceptiveAccount name. 
	(Summary for: aReceptiveAccount) do: [:aString | jerarquia add: indentacion, aString]! !
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 23:49:04' prior: 51023541!
reportForReceptiveAccount: aReceptiveAccount 
	
	jerarquia add: indentacion, aReceptiveAccount name. 
	indentacion := indentacion, '   '.
	(Summary for: aReceptiveAccount) do: [:aString | jerarquia add: indentacion, aString].
	indentacion := indentacion copyFrom: 4 to: indentacion size.! !

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 23:49:29'!
FAILURE!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 23:49:29'!
FAILURE!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 23:49:29'!
FAILURE!

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/2/2021 23:49:30'!
FAILURE!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 23:49:34'!
FAILURE!

(SummaryStructure for: portfolio)!
!SummaryStructure methodsFor: 'report' stamp: 'BW 6/2/2021 23:50:17' prior: 51023511!
reportForPortfolio: aPortfolio 
	jerarquia add: indentacion, aPortfolio name. 
	indentacion := indentacion, '   '.
	aPortfolio acceptAllAccounts: self.
	jerarquia add: indentacion, 'Balance = ', aPortfolio balance asString.
	indentacion := indentacion copyFrom: 4 to: indentacion size.! !

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 23:50:33'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 23:50:33'!
PASSED!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 23:50:33'!
PASSED!

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/2/2021 23:50:33'!
FAILURE!

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/2/2021 23:50:33'!
FAILURE!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 23:50:56' prior: 51023440!
test04
	|portfolio portfolio2 account portfolio3 expected |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	expected := OrderedCollection   with: 'PortfolioPadre' 
								with: '   PortfolioHijo'
								with: '      AccountTest' 
								with: '         DepÔøΩsito por 10' 
								with: '         Balance = 10'
								with: '      Balance = 10'.
	                                       expected add: '   Balance = 10'	.
	self assert: (SummaryStructure for: portfolio) equals: expected.
	
	! !

(SummaryStructure for: portfolio)!

(SummaryStructure for: portfolio)!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 23:52:03' prior: 51023607!
test04
	|portfolio portfolio2 account portfolio3 expected |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	expected := OrderedCollection   with: 'PortfolioPadre' 
								with: '   PortfolioHijo'
								with: '      CuentaNieta' 
								with: '         DepÔøΩsito por 10' 
								with: '         Balance = 10'
								with: '      Balance = 10'.
	                                       expected add: '   Balance = 10'	.
	self assert: (SummaryStructure for: portfolio) equals: expected.
	
	! !

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/2/2021 23:52:04'!
FAILURE!

(SummaryStructure for: portfolio)!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 23:55:07' prior: 51023636!
test04
	|portfolio portfolio2 account portfolio3 expected |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaBisnieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	portfolio3 add: account.
	expected := OrderedCollection      with: 'PortfolioPadre' 
								 with: '   PortfolioHijo'
								 with: '      PortfolioNieto'
								 with: '         CuentaBisnieta' 
								 with: '            DepÔøΩsito por 10' 
								 with: '            Balance = 10'.
						  expected add: '         Balance = 10'.
						  expected add: '      Balance = 10'.
	                                       expected add: '   Balance = 10'	.
	self assert: (SummaryStructure for: portfolio) equals: expected.
	
	! !

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/2/2021 23:55:09'!
ERROR!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 23:55:30' prior: 51023666!
test04
	|portfolio portfolio2 account portfolio3 expected |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaBisnieta'.
	portfolio add: portfolio2.
	portfolio2 add: portfolio3.
	portfolio3 add: account.
	expected := OrderedCollection      with: 'PortfolioPadre' 
								 with: '   PortfolioHijo'
								 with: '      PortfolioNieto'
								 with: '         CuentaBisnieta' 
								 with: '            DepÔøΩsito por 10' 
								 with: '            Balance = 10'.
						  expected add: '         Balance = 10'.
						  expected add: '      Balance = 10'.
	                                       expected add: '   Balance = 10'	.
	self assert: (SummaryStructure for: portfolio) equals: expected.
	
	! !

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/2/2021 23:55:42'!
FAILURE!

(SummaryStructure for: portfolio)!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/2/2021 23:56:31' prior: 51023699!
test04
	|portfolio portfolio2 account portfolio3 expected |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaBisnieta'.
	Deposit register: 10 on: account. 
	portfolio add: portfolio2.
	portfolio2 add: portfolio3.
	portfolio3 add: account.
	expected := OrderedCollection      with: 'PortfolioPadre' 
								 with: '   PortfolioHijo'
								 with: '      PortfolioNieto'
								 with: '         CuentaBisnieta' 
								 with: '            DepÔøΩsito por 10' 
								 with: '            Balance = 10'.
						  expected add: '         Balance = 10'.
						  expected add: '      Balance = 10'.
	                                       expected add: '   Balance = 10'	.
	self assert: (SummaryStructure for: portfolio) equals: expected.
	
	! !

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/2/2021 23:56:32'!
PASSED!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/2/2021 23:56:32'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/2/2021 23:56:32'!
PASSED!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/2/2021 23:56:32'!
PASSED!

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/2/2021 23:56:32'!
PASSED!

Report subclass: #SummaryStructure
	instanceVariableNames: 'portfolio jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #SummaryStructure category: 'Portfolio-2' stamp: 'BW 6/2/2021 23:57:13'!
Report subclass: #SummaryStructure
	instanceVariableNames: 'portfolio jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 00:00:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 00:00:07'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #StructureTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:00:08'!
PASSED!

!testRun: #StructureTest #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #StructureTest #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #StructureTest #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #StructureTest #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 00:00:09'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 00:00:10'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 00:00:10'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 00:00:10'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 00:00:10'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 00:00:10'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 00:00:10'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 00:00:10'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 00:00:10'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 00:00:10'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 00:00:10'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 00:00:11'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 00:00:11'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 00:00:11'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 00:00:11'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 00:00:11'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/3/2021 00:00:11'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/3/2021 00:00:11'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 00:00:11'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 00:00:11'!
PASSED!
!Behavior method!
initialize
	[
	(self coverAll:
		{14 to: 17}) initializeNamed:
		('UnnamedPortfolio' coverAll:
			{36 to: 53}) ] valueCoveringAll:
		{19 to: 34}.! !
!Behavior method!
initializeNamed: aName
	(name _ aName
		cover: (34 to: 38)
		declaredAt: (18 to: 22))
		cover: (26 to: 29)
		declaredAt: (26 to: 29).
	(accounts _ [
	(OrderedCollection
		cover: (54 to: 70)
		declaredAt: (54 to: 70)) new ] valueCoveringAll:
		{72 to: 74})
		cover: (42 to: 49)
		declaredAt: (42 to: 49).
	(parents _ [
	(OrderedCollection
		cover: (89 to: 105)
		declaredAt: (54 to: 70)) new ] valueCoveringAll:
		{107 to: 109})
		cover: (78 to: 84)
		declaredAt: (78 to: 84).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 00:00:16'!
PASSED!
!Behavior method!
initialize
	[
	(self coverAll:
		{14 to: 17}) initializeNamed:
		('UnnamedReceptiveAccount' coverAll:
			{36 to: 60}) ] valueCoveringAll:
		{19 to: 34}.! !
!Behavior method!
initializeNamed: aName
	(name _ aName
		cover: (36 to: 40)
		declaredAt: (18 to: 22))
		cover: (28 to: 31)
		declaredAt: (28 to: 31).
	[ super initialize ] valueCoveringAll:
		{50 to: 59}.
	(transactions _ [
	(OrderedCollection
		cover: (79 to: 95)
		declaredAt: (79 to: 95)) new ] valueCoveringAll:
		{97 to: 99})
		cover: (63 to: 74)
		declaredAt: (63 to: 74).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (33 to: 38)
		declaredAt: (16 to: 21))
		cover: (24 to: 28)
		declaredAt: (24 to: 28).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 00:00:17'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 00:00:18'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 00:00:18'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 00:00:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 00:00:18'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 00:00:18'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 00:00:18'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 00:00:19'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 00:00:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 00:00:19'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 00:00:19'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 00:00:19'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 00:00:19'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 00:00:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 00:00:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:00:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:00:20'!
PASSED!
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 00:00:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 00:00:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 00:00:20'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 00:00:20'!
PASSED!
!Behavior method!
named: aName
	^ [
	([
	(self coverAll:
		{18 to: 21}) new ] valueCoveringAll:
		{23 to: 25}) initializeNamed:
		(aName
			cover: (44 to: 48)
			declaredAt: (8 to: 12)) ] valueCoveringAll:
		{27 to: 42}.! !
!Behavior method!
for: aPortfolio
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aPortfolio
			cover: (44 to: 53)
			declaredAt: (6 to: 15)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aPortfolio
	(jerarquia _ [
	(OrderedCollection
		cover: (42 to: 58)
		declaredAt: (42 to: 58)) new ] valueCoveringAll:
		{60 to: 62})
		cover: (29 to: 37)
		declaredAt: (29 to: 37).
	(indentacion _ '' coverAll:
		{81 to: 82})
		cover: (66 to: 76)
		declaredAt: (66 to: 76).
	[
	(aPortfolio
		cover: (86 to: 95)
		declaredAt: (16 to: 25)) accept:
		(self coverAll:
			{105 to: 108}) ] valueCoveringAll:
		{97 to: 103}.
	^ jerarquia
		cover: (113 to: 121)
		declaredAt: (29 to: 37).! !
!Behavior method!
accept: aReport
	[
	(aReport
		cover: (18 to: 24)
		declaredAt: (9 to: 15)) reportForPortfolio:
		(self coverAll:
			{46 to: 49}) ] valueCoveringAll:
		{26 to: 44}.! !
!Behavior method!
reportForPortfolio: aPortfolio
	[
	(jerarquia
		cover: (34 to: 42)
		declaredAt: (34 to: 42)) add:
		([
		(indentacion
			cover: (49 to: 59)
			declaredAt: (49 to: 59)) ,
			([
			(aPortfolio
				cover: (62 to: 71)
				declaredAt: (21 to: 30)) name ] valueCoveringAll:
				{73 to: 76}) ] valueCoveringAll:
			{60 to: 60}) ] valueCoveringAll:
		{44 to: 47}.
	(indentacion _ [
	(indentacion
		cover: (81 to: 91)
		declaredAt: (49 to: 59)) ,
		('   ' coverAll:
			{109 to: 113}) ] valueCoveringAll:
		{107 to: 107})
		cover: (96 to: 106)
		declaredAt: (49 to: 59).
	[
	(aPortfolio
		cover: (117 to: 126)
		declaredAt: (21 to: 30)) acceptAllAccounts:
		(self coverAll:
			{147 to: 150}) ] valueCoveringAll:
		{128 to: 145}.
	[
	(jerarquia
		cover: (154 to: 162)
		declaredAt: (34 to: 42)) add:
		([
		([
		(indentacion
			cover: (169 to: 179)
			declaredAt: (49 to: 59)) ,
			('Balance = ' coverAll:
				{182 to: 193}) ] valueCoveringAll:
			{180 to: 180}) ,
			([
			([
			(aPortfolio
				cover: (196 to: 205)
				declaredAt: (21 to: 30)) balance ] valueCoveringAll:
				{207 to: 213}) asString ] valueCoveringAll:
				{215 to: 222}) ] valueCoveringAll:
			{194 to: 194}) ] valueCoveringAll:
		{164 to: 167}.
	(indentacion _ [
	(indentacion
		cover: (226 to: 236)
		declaredAt: (49 to: 59))
		copyFrom:
			(4 coverAll:
				{263 to: 263})
		to:
			([
			(indentacion
				cover: (241 to: 251)
				declaredAt: (49 to: 59)) size ] valueCoveringAll:
				{281 to: 284}) ] valueCoveringAll:
		{253 to: 261. 265 to: 267})
		cover: (269 to: 279)
		declaredAt: (49 to: 59).! !
!Behavior method!
name
	^ name
		cover: (8 to: 11)
		declaredAt: (8 to: 11).! !
!Behavior method!
acceptAllAccounts: aReport
	[
	(accounts
		cover: (29 to: 36)
		declaredAt: (29 to: 36)) do: [ :anAccount |
		[
		(anAccount
			cover: (56 to: 64)
			declaredAt: (44 to: 52)) accept:
			(aReport
				cover: (74 to: 80)
				declaredAt: (20 to: 26)) ] valueCoveringAll:
			{66 to: 72} ]] valueCoveringAll:
		{38 to: 40}.! !

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:00:20'!
PASSED!
!Behavior method!
named: aName
	^ [
	([
	(self coverAll:
		{16 to: 19}) new ] valueCoveringAll:
		{21 to: 23}) initializeNamed:
		(aName
			cover: (42 to: 46)
			declaredAt: (8 to: 12)) ] valueCoveringAll:
		{25 to: 40}.! !
!Behavior method!
accept: aReport
	^ [
	(aReport
		cover: (19 to: 25)
		declaredAt: (9 to: 15)) reportForReceptiveAccount:
		(self coverAll:
			{54 to: 57}) ] valueCoveringAll:
		{27 to: 52}.! !
!Behavior method!
reportForReceptiveAccount: aReceptiveAccount
	[
	(jerarquia
		cover: (50 to: 58)
		declaredAt: (50 to: 58)) add:
		([
		(indentacion
			cover: (65 to: 75)
			declaredAt: (65 to: 75)) ,
			([
			(aReceptiveAccount
				cover: (78 to: 94)
				declaredAt: (28 to: 44)) name ] valueCoveringAll:
				{96 to: 99}) ] valueCoveringAll:
			{76 to: 76}) ] valueCoveringAll:
		{60 to: 63}.
	(indentacion _ [
	(indentacion
		cover: (104 to: 114)
		declaredAt: (65 to: 75)) ,
		('   ' coverAll:
			{132 to: 136}) ] valueCoveringAll:
		{130 to: 130})
		cover: (119 to: 129)
		declaredAt: (65 to: 75).
	[
	([
	(Summary
		cover: (141 to: 147)
		declaredAt: (141 to: 147)) for:
		(aReceptiveAccount
			cover: (154 to: 170)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{149 to: 152}) do: [ :aString |
		[
		(jerarquia
			cover: (189 to: 197)
			declaredAt: (50 to: 58)) add:
			([
			(indentacion
				cover: (204 to: 214)
				declaredAt: (65 to: 75)) ,
				(aString
					cover: (217 to: 223)
					declaredAt: (179 to: 185)) ] valueCoveringAll:
				{215 to: 215}) ] valueCoveringAll:
			{199 to: 202} ]] valueCoveringAll:
		{173 to: 175}.
	(indentacion _ [
	(indentacion
		cover: (228 to: 238)
		declaredAt: (65 to: 75))
		copyFrom:
			(4 coverAll:
				{265 to: 265})
		to:
			([
			(indentacion
				cover: (243 to: 253)
				declaredAt: (65 to: 75)) size ] valueCoveringAll:
				{283 to: 286}) ] valueCoveringAll:
		{255 to: 263. 267 to: 269})
		cover: (271 to: 281)
		declaredAt: (65 to: 75).! !
!Behavior method!
name
	^ name
		cover: (8 to: 11)
		declaredAt: (8 to: 11).! !
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{18 to: 21}) new ] valueCoveringAll:
		{23 to: 25}) initializeFor:
		(anAccount
			cover: (42 to: 50)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{27 to: 40}.! !
!Behavior method!
initializeFor: anAccount
	(summary _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (27 to: 33)
		declaredAt: (27 to: 33).
	[
	(anAccount
		cover: (62 to: 70)
		declaredAt: (16 to: 24)) accept:
		(self coverAll:
			{80 to: 83}) ] valueCoveringAll:
		{72 to: 78}.
	[
	(summary
		cover: (87 to: 93)
		declaredAt: (27 to: 33)) add:
		([
		('Balance = ' coverAll:
			{100 to: 111}) ,
			([
			([
			(anAccount
				cover: (114 to: 122)
				declaredAt: (16 to: 24)) balance ] valueCoveringAll:
				{124 to: 130}) asString ] valueCoveringAll:
				{132 to: 139}) ] valueCoveringAll:
			{112 to: 112}) ] valueCoveringAll:
		{95 to: 98}.
	^ summary
		cover: (144 to: 150)
		declaredAt: (27 to: 33).! !
!Behavior method!
reportForReceptiveAccount: aReceptiveAccount
	self coverAll:
		{89 to: 92}.
	[
	(aReceptiveAccount
		cover: (48 to: 64)
		declaredAt: (28 to: 44)) acceptAllTransactions: self ] valueCoveringAll:
		{66 to: 87}.! !
!Behavior method!
acceptAllTransactions: aReport
	[
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (67 to: 78)
			declaredAt: (52 to: 63)) accept:
			(aReport
				cover: (88 to: 94)
				declaredAt: (24 to: 30)) ] valueCoveringAll:
			{80 to: 86} ]] valueCoveringAll:
		{46 to: 48}.! !

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 00:00:21'!
PASSED!
!Behavior method!
accept: aReport
	^ [
	(aReport
		cover: (19 to: 25)
		declaredAt: (9 to: 15)) reportForDeposit:
		(self coverAll:
			{45 to: 48}) ] valueCoveringAll:
		{27 to: 43}.! !
!Behavior method!
reportForDeposit: aDeposit
	[
	(summary
		cover: (29 to: 35)
		declaredAt: (29 to: 35)) add:
		([
		('DepÔøΩsito por ' coverAll:
			{42 to: 56}) ,
			([
			([
			(aDeposit
				cover: (59 to: 66)
				declaredAt: (19 to: 26)) value ] valueCoveringAll:
				{68 to: 72}) asString ] valueCoveringAll:
				{74 to: 81}) ] valueCoveringAll:
			{57 to: 57}) ] valueCoveringAll:
		{37 to: 40}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/3/2021 00:00:21'!
PASSED!

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/3/2021 00:00:21'!
PASSED!
!Behavior method!
for: aPortfolio
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aPortfolio
			cover: (44 to: 53)
			declaredAt: (6 to: 15)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aPortfolio
	(jerarquia _ [
	(OrderedCollection
		cover: (42 to: 58)
		declaredAt: (42 to: 58)) new ] valueCoveringAll:
		{60 to: 62})
		cover: (29 to: 37)
		declaredAt: (29 to: 37).
	(indentacion _ '' coverAll:
		{81 to: 82})
		cover: (66 to: 76)
		declaredAt: (66 to: 76).
	[
	(aPortfolio
		cover: (86 to: 95)
		declaredAt: (16 to: 25)) accept:
		(self coverAll:
			{105 to: 108}) ] valueCoveringAll:
		{97 to: 103}.
	^ jerarquia
		cover: (113 to: 121)
		declaredAt: (29 to: 37).! !
!Behavior method!
reportForPortfolio: aPortfolio
	[
	(jerarquia
		cover: (36 to: 44)
		declaredAt: (36 to: 44)) add:
		([
		(indentacion
			cover: (51 to: 61)
			declaredAt: (51 to: 61)) ,
			([
			(aPortfolio
				cover: (64 to: 73)
				declaredAt: (21 to: 30)) name ] valueCoveringAll:
				{75 to: 78}) ] valueCoveringAll:
			{62 to: 62}) ] valueCoveringAll:
		{46 to: 49}.
	(indentacion _ [
	(indentacion
		cover: (82 to: 92)
		declaredAt: (51 to: 61)) ,
		('   ' coverAll:
			{110 to: 114}) ] valueCoveringAll:
		{108 to: 108})
		cover: (97 to: 107)
		declaredAt: (51 to: 61).
	[
	(aPortfolio
		cover: (118 to: 127)
		declaredAt: (21 to: 30)) acceptAllAccounts:
		(self coverAll:
			{148 to: 151}) ] valueCoveringAll:
		{129 to: 146}.
	(indentacion _ [
	(indentacion
		cover: (155 to: 165)
		declaredAt: (51 to: 61))
		copyFrom:
			(4 coverAll:
				{192 to: 192})
		to:
			([
			(indentacion
				cover: (170 to: 180)
				declaredAt: (51 to: 61)) size ] valueCoveringAll:
				{210 to: 213}) ] valueCoveringAll:
		{182 to: 190. 194 to: 196})
		cover: (198 to: 208)
		declaredAt: (51 to: 61).! !

!testRun: #StructureTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:00:22'!
PASSED!
!Behavior method!
reportForReceptiveAccount: aReceptiveAccount
	[
	(jerarquia
		cover: (50 to: 58)
		declaredAt: (50 to: 58)) add:
		([
		(indentacion
			cover: (65 to: 75)
			declaredAt: (65 to: 75)) ,
			([
			(aReceptiveAccount
				cover: (78 to: 94)
				declaredAt: (28 to: 44)) name ] valueCoveringAll:
				{96 to: 99}) ] valueCoveringAll:
			{76 to: 76}) ] valueCoveringAll:
		{60 to: 63}.! !

!testRun: #StructureTest #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 00:00:22'!
PASSED!

!testRun: #StructureTest #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 00:00:22'!
PASSED!

!testRun: #StructureTest #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 00:00:22'!
PASSED!

!testRun: #StructureTest #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 00:00:22'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 00:00:22'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 00:00:22'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 00:00:22'!
PASSED!
!Behavior method!
accept: aReport
	^ [
	(aReport
		cover: (19 to: 25)
		declaredAt: (9 to: 15)) reportForWithdraw:
		(self coverAll:
			{46 to: 49}) ] valueCoveringAll:
		{27 to: 44}.! !
!Behavior method!
reportForWithdraw: aWithdraw
	[
	(summary
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) add:
		([
		('ExtracciÔøΩn por ' coverAll:
			{44 to: 60}) ,
			([
			([
			(aWithdraw
				cover: (63 to: 71)
				declaredAt: (20 to: 28)) value ] valueCoveringAll:
				{73 to: 77}) asString ] valueCoveringAll:
				{79 to: 86}) ] valueCoveringAll:
			{61 to: 61}) ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 00:00:22'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 00:00:22'!
PASSED!
!Behavior method!
from: anOriginAccount to: aDestinationAccount for: aValue
	| aDepositTransference aWithdrawTransference newTransference |
	[
	([
	(aValue
		cover: (125 to: 130)
		declaredAt: (52 to: 57)) <=
		(0 coverAll:
			{135 to: 135}) ] valueCoveringAll:
		{132 to: 133}) ifTrue: [
		[
		(self coverAll:
			{146 to: 149}) error:
			([
			(self coverAll:
				{158 to: 161}) ceroOrNegativeTransactionErrorMessage ] valueCoveringAll:
				{163 to: 199}) ] valueCoveringAll:
			{151 to: 156} ]] valueCoveringAll:
		{137 to: 143}.
	(aDepositTransference _ [
	(DepositTransference
		cover: (231 to: 249)
		declaredAt: (231 to: 249)) registerOn:
		(aDestinationAccount
			cover: (263 to: 281)
			declaredAt: (27 to: 45)) ] valueCoveringAll:
		{251 to: 261})
		cover: (207 to: 226)
		declaredAt: (63 to: 82).
	(aWithdrawTransference _ [
	(WithdrawTransference
		cover: (310 to: 329)
		declaredAt: (310 to: 329)) registerOn:
		(anOriginAccount
			cover: (343 to: 357)
			declaredAt: (7 to: 21)) ] valueCoveringAll:
		{331 to: 341})
		cover: (285 to: 305)
		declaredAt: (84 to: 104).
	(newTransference _ [
	([
	(self coverAll:
		{382 to: 385}) new ] valueCoveringAll:
		{387 to: 389})
		initializeOrigin:
			(aWithdrawTransference
				cover: (409 to: 429)
				declaredAt: (84 to: 104))
		destination:
			(aDepositTransference
				cover: (444 to: 463)
				declaredAt: (63 to: 82))
		value:
			(aValue
				cover: (472 to: 477)
				declaredAt: (52 to: 57)) ] valueCoveringAll:
		{391 to: 407. 431 to: 442. 465 to: 470})
		cover: (363 to: 377)
		declaredAt: (106 to: 120).
	^ newTransference
		cover: (484 to: 498)
		declaredAt: (106 to: 120).! !
!Behavior method!
registerOn: anAccount
	| withdrawTransference |
	(withdrawTransference _ [
	([
	(self coverAll:
		{78 to: 81}) new ] valueCoveringAll:
		{83 to: 85}) account:
		(anAccount
			cover: (96 to: 104)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{87 to: 94})
		cover: (54 to: 73)
		declaredAt: (30 to: 49).
	[
	(anAccount
		cover: (108 to: 116)
		declaredAt: (13 to: 21)) register:
		(withdrawTransference
			cover: (128 to: 147)
			declaredAt: (30 to: 49)) ] valueCoveringAll:
		{118 to: 126}.
	^ withdrawTransference
		cover: (152 to: 171)
		declaredAt: (30 to: 49).! !
!Behavior method!
account: anAccount
	(account _ anAccount
		cover: (32 to: 40)
		declaredAt: (10 to: 18))
		cover: (21 to: 27)
		declaredAt: (21 to: 27).! !
!Behavior method!
initializeOrigin: anOriginAccount destination: aDestinationAccount value: aValue
	(origin _ anOriginAccount
		cover: (93 to: 107)
		declaredAt: (19 to: 33))
		cover: (83 to: 88)
		declaredAt: (83 to: 88).
	(destination _ aDestinationAccount
		cover: (127 to: 145)
		declaredAt: (48 to: 66))
		cover: (112 to: 122)
		declaredAt: (112 to: 122).
	(value _ aValue
		cover: (158 to: 163)
		declaredAt: (75 to: 80))
		cover: (149 to: 153)
		declaredAt: (149 to: 153).
	[
	(origin
		cover: (169 to: 174)
		declaredAt: (83 to: 88)) setTransference:
		(self coverAll:
			{193 to: 196}) ] valueCoveringAll:
		{176 to: 191}.
	[
	(destination
		cover: (200 to: 210)
		declaredAt: (112 to: 122)) setTransference:
		(self coverAll:
			{229 to: 232}) ] valueCoveringAll:
		{212 to: 227}.! !
!Behavior method!
setTransference: aTransference
	(transference _ aTransference
		cover: (49 to: 61)
		declaredAt: (18 to: 30))
		cover: (33 to: 44)
		declaredAt: (33 to: 44).! !
!Behavior method!
accept: aReport
	^ [
	(aReport
		cover: (19 to: 25)
		declaredAt: (9 to: 15)) reportForWithdrawTransference:
		(self coverAll:
			{58 to: 61}) ] valueCoveringAll:
		{27 to: 56}.! !
!Behavior method!
reportForWithdrawTransference: aWithdrawTransference
	[
	(summary
		cover: (55 to: 61)
		declaredAt: (55 to: 61)) add:
		([
		('Salida por transferencia de ' coverAll:
			{68 to: 97}) ,
			([
			([
			(aWithdrawTransference
				cover: (100 to: 120)
				declaredAt: (32 to: 52)) value ] valueCoveringAll:
				{122 to: 126}) asString ] valueCoveringAll:
				{128 to: 135}) ] valueCoveringAll:
			{98 to: 98}) ] valueCoveringAll:
		{63 to: 66}.! !
!Behavior method!
value
	^ [
	(transference
		cover: (10 to: 21)
		declaredAt: (10 to: 21)) value ] valueCoveringAll:
		{23 to: 27}.! !
!Behavior method!
value
	^ value
		cover: (9 to: 13)
		declaredAt: (9 to: 13).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 00:00:23'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 00:00:23'!
PASSED!
!Behavior method!
accept: aReport
	^ [
	(aReport
		cover: (19 to: 25)
		declaredAt: (9 to: 15)) reportForDepositTransference:
		(self coverAll:
			{57 to: 60}) ] valueCoveringAll:
		{27 to: 55}.! !
!Behavior method!
reportForDepositTransference: aDepositTransference
	[
	(summary
		cover: (53 to: 59)
		declaredAt: (53 to: 59)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{66 to: 96}) ,
			([
			([
			(aDepositTransference
				cover: (99 to: 118)
				declaredAt: (31 to: 50)) value ] valueCoveringAll:
				{120 to: 124}) asString ] valueCoveringAll:
				{126 to: 133}) ] valueCoveringAll:
			{97 to: 97}) ] valueCoveringAll:
		{61 to: 64}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 00:00:23'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 00:00:23'!
PASSED!
!Behavior method!
reportForPortfolio: aPortfolio
	[
	(aPortfolio
		cover: (33 to: 42)
		declaredAt: (21 to: 30)) acceptAllAccounts:
		(self coverAll:
			{63 to: 66}) ] valueCoveringAll:
		{44 to: 61}.! !

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 00:00:23'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 00:00:23'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 00:00:23'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 00:00:23'!
PASSED!
!Behavior method!
initializeFor: anAccount
	(neto _ 0 coverAll:
		{35 to: 35})
		cover: (27 to: 30)
		declaredAt: (27 to: 30).
	[
	(anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24)) accept:
		(self coverAll:
			{57 to: 60}) ] valueCoveringAll:
		{49 to: 55}.
	^ [
	('Neto de transferencias = ' coverAll:
		{65 to: 91}) ,
		([
		(neto
			cover: (94 to: 97)
			declaredAt: (27 to: 30)) asString ] valueCoveringAll:
			{99 to: 106}) ] valueCoveringAll:
		{92 to: 92}.! !
!Behavior method!
reportForReceptiveAccount: aReceptiveAccount
	[
	(aReceptiveAccount
		cover: (47 to: 63)
		declaredAt: (28 to: 44)) acceptAllTransactions:
		(self coverAll:
			{88 to: 91}) ] valueCoveringAll:
		{65 to: 86}.! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 00:00:23'!
PASSED!
!Behavior method!
reportForWithdrawTransference: aWithdrawTransference
	(neto _ [
	(neto
		cover: (55 to: 58)
		declaredAt: (55 to: 58)) -
		([
		(aWithdrawTransference
			cover: (70 to: 90)
			declaredAt: (32 to: 52)) value ] valueCoveringAll:
			{92 to: 96}) ] valueCoveringAll:
		{68 to: 68})
		cover: (63 to: 66)
		declaredAt: (55 to: 58).! !

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 00:00:23'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 00:00:23'!
PASSED!
!Behavior method!
reportForDepositTransference: aDepositTransference
	(neto _ [
	(neto
		cover: (53 to: 56)
		declaredAt: (53 to: 56)) +
		([
		(aDepositTransference
			cover: (68 to: 87)
			declaredAt: (31 to: 50)) value ] valueCoveringAll:
			{89 to: 93}) ] valueCoveringAll:
		{66 to: 66})
		cover: (61 to: 64)
		declaredAt: (53 to: 56).! !

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 00:00:23'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 00:00:23'!
PASSED!
!Behavior method!
reportForDeposit: aDeposit
	^ self.! !
!Behavior method!
reportForWithdraw: aWithdraw
	^ self.! !

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 00:00:24'!
PASSED!
!Behavior method!
reportForPortfolio: aPortfolio
	[
	(aPortfolio
		cover: (33 to: 42)
		declaredAt: (21 to: 30)) acceptAllAccounts:
		(self coverAll:
			{63 to: 66}) ] valueCoveringAll:
		{44 to: 61}.! !

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 00:00:24'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 00:00:24'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 00:00:24'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 00:00:24'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 00:00:24'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 00:00:24'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 00:00:24'!
PASSED!
!Behavior method!
ceroOrNegativeTransactionErrorMessage
	^ 'error: transaction value must be positive' coverAll:
		{41 to: 83}.! !

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/3/2021 00:00:24'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/3/2021 00:00:24'!
PASSED!
!Behavior method!
originAccount
	^ [
	(origin
		cover: (17 to: 22)
		declaredAt: (17 to: 22)) account ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
account
	^ account
		cover: (11 to: 17)
		declaredAt: (11 to: 17).! !
!Behavior method!
destinationAccount
	^ [
	(destination
		cover: (22 to: 32)
		declaredAt: (22 to: 32)) account ] valueCoveringAll:
		{34 to: 40}.! !

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 00:00:24'!
PASSED!
!Behavior method!
origin
	^ origin
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !
!Behavior method!
destination
	^ destination
		cover: (15 to: 25)
		declaredAt: (15 to: 25).! !

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 00:00:25'!
PASSED!

Report subclass: #IndentedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #IndentedReport category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:04:46'!
Report subclass: #IndentedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

IndentedReport subclass: #Structure
	instanceVariableNames: 'jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Structure category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:04:56'!
IndentedReport subclass: #Structure
	instanceVariableNames: 'jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

IndentedReport subclass: #SummaryStructure
	instanceVariableNames: 'jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #SummaryStructure category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:05:11'!
IndentedReport subclass: #SummaryStructure
	instanceVariableNames: 'jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

Object subclass: #NotIndentedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #NotIndentedReport category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:05:31'!
Object subclass: #NotIndentedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

Report subclass: #NotIndentedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #NotIndentedReport category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:05:38'!
Report subclass: #NotIndentedReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

NotIndentedReport subclass: #Summary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Summary category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:05:51'!
NotIndentedReport subclass: #Summary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

NotIndentedReport subclass: #TransferNet
	instanceVariableNames: 'neto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferNet category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:05:56'!
NotIndentedReport subclass: #TransferNet
	instanceVariableNames: 'neto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classRenamed: #Structure as: #TreeStructure stamp: 'BW 6/3/2021 00:06:29'!
Smalltalk renameClassNamed: #Structure as: #TreeStructure!
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:06:30' prior: 51022790!
test02StructureIndentsFirstLevelAccountsCorrectly
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (TreeStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   AccountTest').
	! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:06:30' prior: 51022889!
test04StructureIdentsAnyLevelAccountCorrectly
	|portfolio portfolio2 account portfolio3 |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaNieta'.
	portfolio add: portfolio2.
	portfolio2 add: account.
	portfolio2 add: portfolio3.
	self assert: (TreeStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo' with: '      CuentaNieta' with: '      PortfolioNieto').! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:06:30' prior: 51022927!
test05EjemploDelEnunciado
	| angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	childrenPortfolio add: johnsAccount.
	childrenPortfolio add: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia'.
	familyPortfolio add: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	self assert: (TreeStructure for: familyPortfolio ) equals: (OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta mia' with: '   Portfolio de hijos' with: '      Cuenta de Juan' with: '      Cuenta de Angeles').! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:06:30' prior: 51022764!
test03StructureIndentsFirstLevelPortfoliosCorrectly
	|portfolio portfolio2|
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio add: portfolio2.
	self assert: (TreeStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioPadre' with: '   PortfolioHijo').! !
!StructureTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:06:30' prior: 51022675!
test01StructureShowsNewPortfolioAlone
	| portfolio |
	portfolio := Portfolio named: 'PortfolioTest'.
	self assert: (TreeStructure for: portfolio) equals: (OrderedCollection with: 'PortfolioTest').! !

!classRenamed: #SummaryStructure as: #TreeStructureWithSummary stamp: 'BW 6/3/2021 00:07:13'!
Smalltalk renameClassNamed: #SummaryStructure as: #TreeStructureWithSummary!
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:07:14' prior: 51023733!
test04
	|portfolio portfolio2 account portfolio3 expected |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaBisnieta'.
	Deposit register: 10 on: account. 
	portfolio add: portfolio2.
	portfolio2 add: portfolio3.
	portfolio3 add: account.
	expected := OrderedCollection      with: 'PortfolioPadre' 
								 with: '   PortfolioHijo'
								 with: '      PortfolioNieto'
								 with: '         CuentaBisnieta' 
								 with: '            DepÔøΩsito por 10' 
								 with: '            Balance = 10'.
						  expected add: '         Balance = 10'.
						  expected add: '      Balance = 10'.
	                                       expected add: '   Balance = 10'	.
	self assert: (TreeStructureWithSummary for: portfolio) equals: expected.
	
	! !
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:07:14' prior: 51023344!
test03
	| portfolio account |
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	Deposit register: 10 on: account.
	portfolio add: account.
	self assert: (TreeStructureWithSummary for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' 
															       with: '   AccountTest' 
															       with: '      DepÔøΩsito por 10' 
															       with: '      Balance = 10'
															       with: '   Balance = 10').! !
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:07:14' prior: 51023274!
test02StructureIndentsFirstLevelEmptyAccountsCorrectly
	| portfolio account|
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	portfolio add: account.
	self assert: (TreeStructureWithSummary for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' 
															       with: '   AccountTest'
															       with: '      Balance = 0'
																with: '   Balance = 0').! !
!StructureSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:07:14' prior: 51023263!
test01StructureShowsNewPortfolioAlone
	| portfolio |
	portfolio := Portfolio named: 'PortfolioTest'.
	self assert: (TreeStructureWithSummary for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' with: '   Balance = 0').! !
!NotIndentedReport methodsFor: 'no messages' stamp: 'BW 6/3/2021 00:07:49' overrides: 51021580!
reportForDepositTransference: aDepositTransference
	self subclassResponsibility.! !

!methodRemoval: Report #reportForDepositTransference: stamp: 'BW 6/3/2021 00:07:59'!
reportForDepositTransference: aDepositTransference
	self subclassResponsibility.!
!NotIndentedReport methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:08:17' overrides: 51021585!
reportForWithdrawTransference: aWithdrawTransference
	self subclassResponsibility.! !

!methodRemoval: Report #reportForWithdrawTransference: stamp: 'BW 6/3/2021 00:08:24'!
reportForWithdrawTransference: aWithdrawTransference
	self subclassResponsibility.!
!NotIndentedReport methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:08:52' overrides: 51021572!
reportForDeposit: aDeposit
	self subclassResponsibility.! !

!methodRemoval: Report #reportForDeposit: stamp: 'BW 6/3/2021 00:08:59'!
reportForDeposit: aDeposit
	self subclassResponsibility.!

!methodRemoval: Report #reportForWithdraw: stamp: 'BW 6/3/2021 00:09:09'!
reportForWithdraw: aWithdraw
	self subclassResponsibility.!
!NotIndentedReport methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:09:14'!
reportForWithdraw: aWithdraw
	self subclassResponsibility.! !

!classDefinition: #TreeStructure category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:10:49'!
IndentedReport subclass: #TreeStructure
	instanceVariableNames: 'indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TreeStructureWithSummary category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:10:50'!
IndentedReport subclass: #TreeStructureWithSummary
	instanceVariableNames: 'indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #IndentedReport category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:10:50'!
Report subclass: #IndentedReport
	instanceVariableNames: 'jerarquia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TreeStructure category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:10:57'!
IndentedReport subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TreeStructureWithSummary category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:10:57'!
IndentedReport subclass: #TreeStructureWithSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #IndentedReport category: 'Portfolio-2' stamp: 'BW 6/3/2021 00:10:58'!
Report subclass: #IndentedReport
	instanceVariableNames: 'jerarquia indentacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!IndentedReport methodsFor: 'initialization' stamp: 'BW 6/3/2021 00:11:10' overrides: 51019503!
initializeFor: aPortfolio 
	jerarquia := OrderedCollection new.
	indentacion := ''.
	aPortfolio accept: self.
	^jerarquia.! !

!methodRemoval: TreeStructure #initializeFor: stamp: 'BW 6/3/2021 00:11:10'!
initializeFor: aPortfolio 
	jerarquia := OrderedCollection new.
	indentacion := ''.
	aPortfolio accept: self.
	^jerarquia.!

!methodRemoval: TreeStructureWithSummary #initializeFor: stamp: 'BW 6/3/2021 00:11:31'!
initializeFor: aPortfolio 
	jerarquia := OrderedCollection new.
	indentacion := ''.
	aPortfolio accept: self.
	^jerarquia!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 00:11:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 00:11:33'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 00:11:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 00:11:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 00:11:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 00:11:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 00:11:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 00:11:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 00:11:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:11:34'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #StructureTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #StructureTest #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #StructureTest #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #StructureTest #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #StructureTest #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 00:11:35'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 00:11:36'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 00:11:37'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 00:11:37'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 00:11:37'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 00:11:37'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 00:11:37'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 00:11:37'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/3/2021 00:11:37'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/3/2021 00:11:37'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 00:11:38'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 00:11:38'!
PASSED!
!TreeStructure methodsFor: 'report' stamp: 'BW 6/3/2021 00:12:47'!
incrementIdentation

	^ indentacion := indentacion, '   '! !
!TreeStructure methodsFor: 'report' stamp: 'BW 6/3/2021 00:12:47' prior: 51022665 overrides: 51018249!
reportForPortfolio: aPortfolio
 	
	jerarquia add: indentacion, aPortfolio name.
	self incrementIdentation.
	aPortfolio acceptAllAccounts: self.
	indentacion := indentacion copyFrom: 4 to: indentacion size.
	
	! !
!TreeStructure methodsFor: 'report' stamp: 'BW 6/3/2021 00:13:02'!
decrementIdentation

	^ indentacion := indentacion copyFrom: 4 to: indentacion size! !
!TreeStructure methodsFor: 'report' stamp: 'BW 6/3/2021 00:13:02' prior: 51025786 overrides: 51018249!
reportForPortfolio: aPortfolio
 	
	jerarquia add: indentacion, aPortfolio name.
	self incrementIdentation.
	aPortfolio acceptAllAccounts: self.
	self decrementIdentation.
	
	! !
!IndentedReport methodsFor: 'report' stamp: 'BW 6/3/2021 00:13:22'!
decrementIdentation

	^ indentacion := indentacion copyFrom: 4 to: indentacion size! !

!methodRemoval: TreeStructure #decrementIdentation stamp: 'BW 6/3/2021 00:13:22'!
decrementIdentation

	^ indentacion := indentacion copyFrom: 4 to: indentacion size!
!IndentedReport methodsFor: 'report' stamp: 'BW 6/3/2021 00:13:31'!
incrementIdentation

	^ indentacion := indentacion, '   '! !

!methodRemoval: TreeStructure #incrementIdentation stamp: 'BW 6/3/2021 00:13:31'!
incrementIdentation

	^ indentacion := indentacion, '   '!
!TreeStructureWithSummary methodsFor: 'report' stamp: 'BW 6/3/2021 00:13:46' prior: 51023579 overrides: 51018249!
reportForPortfolio: aPortfolio 
	jerarquia add: indentacion, aPortfolio name. 
	self incrementIndentation.
	aPortfolio acceptAllAccounts: self.
	jerarquia add: indentacion, 'Balance = ', aPortfolio balance asString.
	indentacion := indentacion copyFrom: 4 to: indentacion size.! !
!TreeStructureWithSummary methodsFor: 'report' stamp: 'BW 6/3/2021 00:13:59' prior: 51025830 overrides: 51018249!
reportForPortfolio: aPortfolio 
	jerarquia add: indentacion, aPortfolio name. 
	self incrementIndentation.
	aPortfolio acceptAllAccounts: self.
	self decrementIndentation.
	indentacion := indentacion copyFrom: 4 to: indentacion size.! !
!IndentedReport methodsFor: 'report' stamp: 'BW 6/3/2021 00:14:17'!
decrementIndentation

	^ indentacion := indentacion copyFrom: 4 to: indentacion size! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:14:17' prior: 51025801 overrides: 51018249!
reportForPortfolio: aPortfolio
 	
	jerarquia add: indentacion, aPortfolio name.
	self incrementIdentation.
	aPortfolio acceptAllAccounts: self.
	self decrementIndentation.
	
	! !

!methodRemoval: IndentedReport #decrementIdentation stamp: 'BW 6/3/2021 00:14:17'!
decrementIdentation

	^ indentacion := indentacion copyFrom: 4 to: indentacion size!
!IndentedReport methodsFor: 'report' stamp: 'BW 6/3/2021 00:14:29'!
incrementIndentation

	^ indentacion := indentacion, '   '! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:14:29' prior: 51025860 overrides: 51018249!
reportForPortfolio: aPortfolio
 	
	jerarquia add: indentacion, aPortfolio name.
	self incrementIndentation.
	aPortfolio acceptAllAccounts: self.
	self decrementIndentation.
	
	! !

!methodRemoval: IndentedReport #incrementIdentation stamp: 'BW 6/3/2021 00:14:30'!
incrementIdentation

	^ indentacion := indentacion, '   '!
!TreeStructureWithSummary methodsFor: 'report' stamp: 'BW 6/3/2021 00:15:01' prior: 51023550 overrides: 51018254!
reportForReceptiveAccount: aReceptiveAccount 
	
	jerarquia add: indentacion, aReceptiveAccount name. 
	self incrementIndentation.
	(Summary for: aReceptiveAccount) do: [:aString | jerarquia add: indentacion, aString].
	self decrementIndentation.! !
!TreeStructureWithSummary methodsFor: 'report' stamp: 'BW 6/3/2021 00:15:14' prior: 51025843 overrides: 51018249!
reportForPortfolio: aPortfolio 
	jerarquia add: indentacion, aPortfolio name. 
	
	self incrementIndentation.
	aPortfolio acceptAllAccounts: self.
	self decrementIndentation.
	
	indentacion := indentacion copyFrom: 4 to: indentacion size.! !
!TreeStructureWithSummary methodsFor: 'report' stamp: 'BW 6/3/2021 00:13:59' prior: 51025905 overrides: 51018249!
reportForPortfolio: aPortfolio 
	jerarquia add: indentacion, aPortfolio name. 
	self incrementIndentation.
	aPortfolio acceptAllAccounts: self.
	self decrementIndentation.
	indentacion := indentacion copyFrom: 4 to: indentacion size.! !
!TreeStructureWithSummary methodsFor: 'report' stamp: 'BW 6/3/2021 00:16:34' prior: 51025917 overrides: 51018249!
reportForPortfolio: aPortfolio 
	jerarquia add: indentacion, aPortfolio name. 
	self incrementIndentation.
	aPortfolio acceptAllAccounts: self.
	jerarquia add: indentacion, 'Balance = ', aPortfolio balance asString.
	self decrementIndentation.
	! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 00:17:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/3/2021 00:17:54'!
PASSED!

!testRun: #StructureTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #StructureTest #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #StructureTest #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #StructureTest #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #StructureTest #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 00:17:55'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 00:17:56'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 00:17:56'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 00:17:56'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 00:17:56'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 00:17:56'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 00:17:56'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 00:17:56'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 00:17:56'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 00:17:56'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 00:17:57'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 00:17:57'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 00:17:57'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 00:17:57'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 00:17:57'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 00:17:57'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/3/2021 00:17:57'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/3/2021 00:17:57'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 00:17:57'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 00:17:57'!
PASSED!
!NotIndentedReport methodsFor: 'report' stamp: 'BW 6/3/2021 00:31:13' overrides: 51018249!
reportForPortfolio: aPortfolio
	aPortfolio acceptAllAccounts: self.! !

!methodRemoval: Summary #reportForPortfolio: stamp: 'BW 6/3/2021 00:31:13'!
reportForPortfolio: aPortfolio
	aPortfolio acceptAllAccounts: self.!
!NotIndentedReport methodsFor: 'report' stamp: 'BW 6/3/2021 00:31:19' overrides: 51018254!
reportForReceptiveAccount: aReceptiveAccount.
	aReceptiveAccount acceptAllTransactions: self.
	
	
	! !

!methodRemoval: Summary #reportForReceptiveAccount: stamp: 'BW 6/3/2021 00:31:19'!
reportForReceptiveAccount: aReceptiveAccount.
	aReceptiveAccount acceptAllTransactions: self.
	
	
	!

!methodRemoval: TransferNet #reportForPortfolio: stamp: 'BW 6/3/2021 00:31:27'!
reportForPortfolio: aPortfolio
	aPortfolio acceptAllAccounts: self.
	
	
	!

!methodRemoval: TransferNet #reportForReceptiveAccount: stamp: 'BW 6/3/2021 00:31:27'!
reportForReceptiveAccount: aReceptiveAccount
	aReceptiveAccount acceptAllTransactions: self.
	!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 00:31:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 00:31:29'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 00:31:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 00:31:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 00:31:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 00:31:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 00:31:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 00:31:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #StructureSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #StructureSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 00:31:30'!
PASSED!

!testRun: #StructureSummaryTest #test03 stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #StructureSummaryTest #test04 stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #StructureTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #StructureTest #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #StructureTest #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #StructureTest #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #StructureTest #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 00:31:31'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 00:31:32'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 00:31:32'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 00:31:32'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 00:31:32'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 00:31:32'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 00:31:32'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 00:31:32'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 00:31:32'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 00:31:32'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 00:31:33'!
PASSED!

----SNAPSHOT----(3 June 2021 00:35:07) CuisUniversity-4532.image priorSource: 22138152!

!classRenamed: #StructureTest as: #TreeStructureTest stamp: 'BW 6/3/2021 00:35:45'!
Smalltalk renameClassNamed: #StructureTest as: #TreeStructureTest!

!classRenamed: #StructureSummaryTest as: #TreeStructureWithSummaryTest stamp: 'BW 6/3/2021 00:36:01'!
Smalltalk renameClassNamed: #StructureSummaryTest as: #TreeStructureWithSummaryTest!
!DepositTransference methodsFor: 'report interaction' stamp: 'BW 6/3/2021 00:36:46'!
acceptReport: aReport
	^aReport reportForDepositTransference: self.! !
!Withdraw methodsFor: 'report interaction' stamp: 'BW 6/3/2021 00:36:46'!
acceptReport: aReport
	^aReport reportForWithdraw: self.! !
!WithdrawTransference methodsFor: 'report interaction' stamp: 'BW 6/3/2021 00:36:46'!
acceptReport: aReport
	^aReport reportForWithdrawTransference: self.! !
!ReceptiveAccount methodsFor: 'report interaction' stamp: 'BW 6/3/2021 00:36:46'!
acceptReport: aReport
	^aReport reportForReceptiveAccount: self.! !
!Portfolio methodsFor: 'report interaction' stamp: 'BW 6/3/2021 00:36:46'!
acceptReport: aReport
	aReport reportForPortfolio: self.! !
!Account methodsFor: 'report interaction' stamp: 'BW 6/3/2021 00:36:46'!
acceptReport: aReport
	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'report interaction' stamp: 'BW 6/3/2021 00:36:46'!
acceptReport: aReport
	self subclassResponsibility ! !
!Deposit methodsFor: 'report interaction' stamp: 'BW 6/3/2021 00:36:46' overrides: 51026455!
acceptReport: aReport
	^aReport reportForDeposit: self.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:36:46' prior: 51019508 overrides: 51019503!
initializeFor: anAccount
	neto := 0.
	anAccount acceptReport: self.
	^'Neto de transferencias = ', neto asString. ! !
!IndentedReport methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:36:46' prior: 51025540 overrides: 51019503!
initializeFor: aPortfolio 
	jerarquia := OrderedCollection new.
	indentacion := ''.
	aPortfolio acceptReport: self.
	^jerarquia.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:36:46' prior: 51017551!
acceptAllAccounts: aReport
	accounts do: [:anAccount | anAccount acceptReport: aReport]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:36:46' prior: 51016909!
acceptAllTransactions: aReport
	transactions do: [:aTransaction | aTransaction acceptReport: aReport]! !
!Summary methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:36:46' prior: 51019515 overrides: 51019503!
initializeFor: anAccount
	summary := OrderedCollection new.
	anAccount acceptReport: self.
	summary add: 'Balance = ', anAccount balance asString.
	^summary! !

!methodRemoval: DepositTransference #accept: stamp: 'BW 6/3/2021 00:36:46'!
accept: aReport
	^aReport reportForDepositTransference: self.!

!methodRemoval: Withdraw #accept: stamp: 'BW 6/3/2021 00:36:46'!
accept: aReport
	^aReport reportForWithdraw: self.!

!methodRemoval: WithdrawTransference #accept: stamp: 'BW 6/3/2021 00:36:46'!
accept: aReport
	^aReport reportForWithdrawTransference: self.!

!methodRemoval: ReceptiveAccount #accept: stamp: 'BW 6/3/2021 00:36:46'!
accept: aReport
	^aReport reportForReceptiveAccount: self.!

!methodRemoval: Portfolio #accept: stamp: 'BW 6/3/2021 00:36:46'!
accept: aReport
	aReport reportForPortfolio: self.!

!methodRemoval: Account #accept: stamp: 'BW 6/3/2021 00:36:46'!
accept: aReport
	self subclassResponsibility.!

!methodRemoval: AccountTransaction #accept: stamp: 'BW 6/3/2021 00:36:47'!
accept: aReport
	self subclassResponsibility !

!methodRemoval: Deposit #accept: stamp: 'BW 6/3/2021 00:36:47'!
accept: aReport
	^aReport reportForDeposit: self.!
!Portfolio methodsFor: 'report interaction' stamp: 'BW 6/3/2021 00:39:19'!
reportForAllAccounts: aReport
	accounts do: [:anAccount | anAccount acceptReport: aReport]! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:39:19' prior: 51025879 overrides: 51018249!
reportForPortfolio: aPortfolio
 	
	jerarquia add: indentacion, aPortfolio name.
	self incrementIndentation.
	aPortfolio reportForAllAccounts: self.
	self decrementIndentation.
	
	! !
!TreeStructureWithSummary methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:39:20' prior: 51025928 overrides: 51018249!
reportForPortfolio: aPortfolio 
	jerarquia add: indentacion, aPortfolio name. 
	self incrementIndentation.
	aPortfolio reportForAllAccounts: self.
	jerarquia add: indentacion, 'Balance = ', aPortfolio balance asString.
	self decrementIndentation.
	! !
!NotIndentedReport methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:39:20' prior: 51026159 overrides: 51018249!
reportForPortfolio: aPortfolio
	aPortfolio reportForAllAccounts: self.! !

!methodRemoval: Portfolio #acceptAllAccounts: stamp: 'BW 6/3/2021 00:39:20'!
acceptAllAccounts: aReport
	accounts do: [:anAccount | anAccount acceptReport: aReport]!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 00:39:22'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 00:39:22'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 00:39:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 00:39:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 00:39:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 00:39:24'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 00:39:25'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 00:39:25'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 00:39:25'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 00:39:25'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 00:39:25'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 00:39:25'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 00:39:25'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 00:39:25'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 00:39:25'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 00:39:25'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TreeStructureTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TreeStructureTest #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TreeStructureTest #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TreeStructureTest #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TreeStructureTest #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test03 stamp: 'BW 6/3/2021 00:39:26'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test04 stamp: 'BW 6/3/2021 00:39:26'!
PASSED!
!ReceptiveAccount methodsFor: 'report interaction' stamp: 'BW 6/3/2021 00:39:45'!
reportForAllTransactions: aReport
	transactions do: [:aTransaction | aTransaction acceptReport: aReport]! !
!NotIndentedReport methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:39:45' prior: 51026169 overrides: 51018254!
reportForReceptiveAccount: aReceptiveAccount.
	aReceptiveAccount reportForAllTransactions: self.
	
	
	! !

!methodRemoval: ReceptiveAccount #acceptAllTransactions: stamp: 'BW 6/3/2021 00:39:45'!
acceptAllTransactions: aReport
	transactions do: [:aTransaction | aTransaction acceptReport: aReport]!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 00:39:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 00:39:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 00:39:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 00:39:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 00:39:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 00:39:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 00:39:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 00:39:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 00:39:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 00:39:48'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 00:39:49'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 00:39:50'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 00:39:50'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 00:39:50'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 00:39:50'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 00:39:50'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 00:39:50'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 00:39:50'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 00:39:50'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 00:39:50'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/3/2021 00:39:50'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TreeStructureTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TreeStructureTest #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TreeStructureTest #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TreeStructureTest #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TreeStructureTest #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test03 stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test04 stamp: 'BW 6/3/2021 00:39:51'!
PASSED!

!classRenamed: #NotIndentedReport as: #PlainReport stamp: 'BW 6/3/2021 00:40:14'!
Smalltalk renameClassNamed: #NotIndentedReport as: #PlainReport!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 00:40:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 00:40:26'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 00:40:27'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TreeStructureTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TreeStructureTest #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TreeStructureTest #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TreeStructureTest #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 00:40:28'!
PASSED!

!testRun: #TreeStructureTest #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 00:40:29'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:40:29'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 00:40:29'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test03 stamp: 'BW 6/3/2021 00:40:29'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test04 stamp: 'BW 6/3/2021 00:40:29'!
PASSED!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:41:45'!
test03StructureIdentsFirstLevelTransactionsCorrectly
	| portfolio account |
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	Deposit register: 10 on: account.
	portfolio add: account.
	self assert: (TreeStructureWithSummary for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' 
															       with: '   AccountTest' 
															       with: '      DepÔøΩsito por 10' 
															       with: '      Balance = 10'
															       with: '   Balance = 10').! !

!methodRemoval: TreeStructureWithSummaryTest #test03 stamp: 'BW 6/3/2021 00:41:46'!
test03
	| portfolio account |
	portfolio := Portfolio named: 'PortfolioTest'.
	account := ReceptiveAccount named: 'AccountTest'.
	Deposit register: 10 on: account.
	portfolio add: account.
	self assert: (TreeStructureWithSummary for: portfolio) equals: (OrderedCollection with: 'PortfolioTest' 
															       with: '   AccountTest' 
															       with: '      DepÔøΩsito por 10' 
															       with: '      Balance = 10'
															       with: '   Balance = 10').!
!TreeStructureWithSummaryTest methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 00:42:20'!
test04tructureIdentsAnyLevelTransactionsCorrectly
	|portfolio portfolio2 account portfolio3 expected |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaBisnieta'.
	Deposit register: 10 on: account. 
	portfolio add: portfolio2.
	portfolio2 add: portfolio3.
	portfolio3 add: account.
	expected := OrderedCollection      with: 'PortfolioPadre' 
								 with: '   PortfolioHijo'
								 with: '      PortfolioNieto'
								 with: '         CuentaBisnieta' 
								 with: '            DepÔøΩsito por 10' 
								 with: '            Balance = 10'.
						  expected add: '         Balance = 10'.
						  expected add: '      Balance = 10'.
	                                       expected add: '   Balance = 10'	.
	self assert: (TreeStructureWithSummary for: portfolio) equals: expected.
	
	! !

!methodRemoval: TreeStructureWithSummaryTest #test04 stamp: 'BW 6/3/2021 00:42:20'!
test04
	|portfolio portfolio2 account portfolio3 expected |
	portfolio := Portfolio named: 'PortfolioPadre'.
	portfolio2 := Portfolio named: 'PortfolioHijo'.
	portfolio3 := Portfolio named: 'PortfolioNieto'.
	account := ReceptiveAccount named: 'CuentaBisnieta'.
	Deposit register: 10 on: account. 
	portfolio add: portfolio2.
	portfolio2 add: portfolio3.
	portfolio3 add: account.
	expected := OrderedCollection      with: 'PortfolioPadre' 
								 with: '   PortfolioHijo'
								 with: '      PortfolioNieto'
								 with: '         CuentaBisnieta' 
								 with: '            DepÔøΩsito por 10' 
								 with: '            Balance = 10'.
						  expected add: '         Balance = 10'.
						  expected add: '      Balance = 10'.
	                                       expected add: '   Balance = 10'	.
	self assert: (TreeStructureWithSummary for: portfolio) equals: expected.
	
	!
!Behavior method!
initialize
	[
	(self coverAll:
		{14 to: 17}) initializeNamed:
		('UnnamedPortfolio' coverAll:
			{36 to: 53}) ] valueCoveringAll:
		{19 to: 34}.! !
!Behavior method!
initializeNamed: aName
	(name _ aName
		cover: (34 to: 38)
		declaredAt: (18 to: 22))
		cover: (26 to: 29)
		declaredAt: (26 to: 29).
	(accounts _ [
	(OrderedCollection
		cover: (54 to: 70)
		declaredAt: (54 to: 70)) new ] valueCoveringAll:
		{72 to: 74})
		cover: (42 to: 49)
		declaredAt: (42 to: 49).
	(parents _ [
	(OrderedCollection
		cover: (89 to: 105)
		declaredAt: (54 to: 70)) new ] valueCoveringAll:
		{107 to: 109})
		cover: (78 to: 84)
		declaredAt: (78 to: 84).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 00:42:41'!
PASSED!
!Behavior method!
initialize
	[
	(self coverAll:
		{14 to: 17}) initializeNamed:
		('UnnamedReceptiveAccount' coverAll:
			{36 to: 60}) ] valueCoveringAll:
		{19 to: 34}.! !
!Behavior method!
initializeNamed: aName
	(name _ aName
		cover: (36 to: 40)
		declaredAt: (18 to: 22))
		cover: (28 to: 31)
		declaredAt: (28 to: 31).
	[ super initialize ] valueCoveringAll:
		{50 to: 59}.
	(transactions _ [
	(OrderedCollection
		cover: (79 to: 95)
		declaredAt: (79 to: 95)) new ] valueCoveringAll:
		{97 to: 99})
		cover: (63 to: 74)
		declaredAt: (63 to: 74).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (33 to: 38)
		declaredAt: (16 to: 21))
		cover: (24 to: 28)
		declaredAt: (24 to: 28).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 00:42:43'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 00:42:43'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 00:42:43'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 00:42:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 00:42:43'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 00:42:43'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 00:42:44'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 00:42:44'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 00:42:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 00:42:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 00:42:44'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 00:42:44'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 00:42:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 00:42:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 00:42:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:42:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 00:42:45'!
PASSED!
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 00:42:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 00:42:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 00:42:45'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 00:42:45'!
PASSED!
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{18 to: 21}) new ] valueCoveringAll:
		{23 to: 25}) initializeFor:
		(anAccount
			cover: (42 to: 50)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{27 to: 40}.! !
!Behavior method!
initializeFor: anAccount
	(summary _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (27 to: 33)
		declaredAt: (27 to: 33).
	[
	(anAccount
		cover: (62 to: 70)
		declaredAt: (16 to: 24)) acceptReport:
		(self coverAll:
			{86 to: 89}) ] valueCoveringAll:
		{72 to: 84}.
	[
	(summary
		cover: (93 to: 99)
		declaredAt: (27 to: 33)) add:
		([
		('Balance = ' coverAll:
			{106 to: 117}) ,
			([
			([
			(anAccount
				cover: (120 to: 128)
				declaredAt: (16 to: 24)) balance ] valueCoveringAll:
				{130 to: 136}) asString ] valueCoveringAll:
				{138 to: 145}) ] valueCoveringAll:
			{118 to: 118}) ] valueCoveringAll:
		{101 to: 104}.
	^ summary
		cover: (150 to: 156)
		declaredAt: (27 to: 33).! !
!Behavior method!
acceptReport: aReport
	^ [
	(aReport
		cover: (25 to: 31)
		declaredAt: (15 to: 21)) reportForReceptiveAccount:
		(self coverAll:
			{60 to: 63}) ] valueCoveringAll:
		{33 to: 58}.! !
!Behavior method!
reportForReceptiveAccount: aReceptiveAccount
	self coverAll:
		{92 to: 95}.
	[
	(aReceptiveAccount
		cover: (48 to: 64)
		declaredAt: (28 to: 44)) reportForAllTransactions: self ] valueCoveringAll:
		{66 to: 90}.! !
!Behavior method!
reportForAllTransactions: aReport
	[
	(transactions
		cover: (36 to: 47)
		declaredAt: (36 to: 47)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (70 to: 81)
			declaredAt: (55 to: 66)) acceptReport:
			(aReport
				cover: (97 to: 103)
				declaredAt: (27 to: 33)) ] valueCoveringAll:
			{83 to: 95} ]] valueCoveringAll:
		{49 to: 51}.! !

!testRun: #SummaryTest #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 00:42:46'!
PASSED!
!Behavior method!
acceptReport: aReport
	^ [
	(aReport
		cover: (25 to: 31)
		declaredAt: (15 to: 21)) reportForDeposit:
		(self coverAll:
			{51 to: 54}) ] valueCoveringAll:
		{33 to: 49}.! !
!Behavior method!
reportForDeposit: aDeposit
	[
	(summary
		cover: (29 to: 35)
		declaredAt: (29 to: 35)) add:
		([
		('DepÔøΩsito por ' coverAll:
			{42 to: 56}) ,
			([
			([
			(aDeposit
				cover: (59 to: 66)
				declaredAt: (19 to: 26)) value ] valueCoveringAll:
				{68 to: 72}) asString ] valueCoveringAll:
				{74 to: 81}) ] valueCoveringAll:
			{57 to: 57}) ] valueCoveringAll:
		{37 to: 40}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #SummaryTest #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 00:42:46'!
PASSED!

!testRun: #SummaryTest #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 00:42:46'!
PASSED!
!Behavior method!
acceptReport: aReport
	^ [
	(aReport
		cover: (25 to: 31)
		declaredAt: (15 to: 21)) reportForWithdraw:
		(self coverAll:
			{52 to: 55}) ] valueCoveringAll:
		{33 to: 50}.! !
!Behavior method!
reportForWithdraw: aWithdraw
	[
	(summary
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) add:
		([
		('ExtracciÔøΩn por ' coverAll:
			{44 to: 60}) ,
			([
			([
			(aWithdraw
				cover: (63 to: 71)
				declaredAt: (20 to: 28)) value ] valueCoveringAll:
				{73 to: 77}) asString ] valueCoveringAll:
				{79 to: 86}) ] valueCoveringAll:
			{61 to: 61}) ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #SummaryTest #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 00:42:46'!
PASSED!

!testRun: #SummaryTest #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 00:42:46'!
PASSED!
!Behavior method!
from: anOriginAccount to: aDestinationAccount for: aValue
	| aDepositTransference aWithdrawTransference newTransference |
	[
	([
	(aValue
		cover: (125 to: 130)
		declaredAt: (52 to: 57)) <=
		(0 coverAll:
			{135 to: 135}) ] valueCoveringAll:
		{132 to: 133}) ifTrue: [
		[
		(self coverAll:
			{146 to: 149}) error:
			([
			(self coverAll:
				{158 to: 161}) ceroOrNegativeTransactionErrorMessage ] valueCoveringAll:
				{163 to: 199}) ] valueCoveringAll:
			{151 to: 156} ]] valueCoveringAll:
		{137 to: 143}.
	(aDepositTransference _ [
	(DepositTransference
		cover: (231 to: 249)
		declaredAt: (231 to: 249)) registerOn:
		(aDestinationAccount
			cover: (263 to: 281)
			declaredAt: (27 to: 45)) ] valueCoveringAll:
		{251 to: 261})
		cover: (207 to: 226)
		declaredAt: (63 to: 82).
	(aWithdrawTransference _ [
	(WithdrawTransference
		cover: (310 to: 329)
		declaredAt: (310 to: 329)) registerOn:
		(anOriginAccount
			cover: (343 to: 357)
			declaredAt: (7 to: 21)) ] valueCoveringAll:
		{331 to: 341})
		cover: (285 to: 305)
		declaredAt: (84 to: 104).
	(newTransference _ [
	([
	(self coverAll:
		{382 to: 385}) new ] valueCoveringAll:
		{387 to: 389})
		initializeOrigin:
			(aWithdrawTransference
				cover: (409 to: 429)
				declaredAt: (84 to: 104))
		destination:
			(aDepositTransference
				cover: (444 to: 463)
				declaredAt: (63 to: 82))
		value:
			(aValue
				cover: (472 to: 477)
				declaredAt: (52 to: 57)) ] valueCoveringAll:
		{391 to: 407. 431 to: 442. 465 to: 470})
		cover: (363 to: 377)
		declaredAt: (106 to: 120).
	^ newTransference
		cover: (484 to: 498)
		declaredAt: (106 to: 120).! !
!Behavior method!
registerOn: anAccount
	| withdrawTransference |
	(withdrawTransference _ [
	([
	(self coverAll:
		{78 to: 81}) new ] valueCoveringAll:
		{83 to: 85}) account:
		(anAccount
			cover: (96 to: 104)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{87 to: 94})
		cover: (54 to: 73)
		declaredAt: (30 to: 49).
	[
	(anAccount
		cover: (108 to: 116)
		declaredAt: (13 to: 21)) register:
		(withdrawTransference
			cover: (128 to: 147)
			declaredAt: (30 to: 49)) ] valueCoveringAll:
		{118 to: 126}.
	^ withdrawTransference
		cover: (152 to: 171)
		declaredAt: (30 to: 49).! !
!Behavior method!
account: anAccount
	(account _ anAccount
		cover: (32 to: 40)
		declaredAt: (10 to: 18))
		cover: (21 to: 27)
		declaredAt: (21 to: 27).! !
!Behavior method!
initializeOrigin: anOriginAccount destination: aDestinationAccount value: aValue
	(origin _ anOriginAccount
		cover: (93 to: 107)
		declaredAt: (19 to: 33))
		cover: (83 to: 88)
		declaredAt: (83 to: 88).
	(destination _ aDestinationAccount
		cover: (127 to: 145)
		declaredAt: (48 to: 66))
		cover: (112 to: 122)
		declaredAt: (112 to: 122).
	(value _ aValue
		cover: (158 to: 163)
		declaredAt: (75 to: 80))
		cover: (149 to: 153)
		declaredAt: (149 to: 153).
	[
	(origin
		cover: (169 to: 174)
		declaredAt: (83 to: 88)) setTransference:
		(self coverAll:
			{193 to: 196}) ] valueCoveringAll:
		{176 to: 191}.
	[
	(destination
		cover: (200 to: 210)
		declaredAt: (112 to: 122)) setTransference:
		(self coverAll:
			{229 to: 232}) ] valueCoveringAll:
		{212 to: 227}.! !
!Behavior method!
setTransference: aTransference
	(transference _ aTransference
		cover: (49 to: 61)
		declaredAt: (18 to: 30))
		cover: (33 to: 44)
		declaredAt: (33 to: 44).! !
!Behavior method!
acceptReport: aReport
	^ [
	(aReport
		cover: (25 to: 31)
		declaredAt: (15 to: 21)) reportForWithdrawTransference:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{33 to: 62}.! !
!Behavior method!
reportForWithdrawTransference: aWithdrawTransference
	[
	(summary
		cover: (55 to: 61)
		declaredAt: (55 to: 61)) add:
		([
		('Salida por transferencia de ' coverAll:
			{68 to: 97}) ,
			([
			([
			(aWithdrawTransference
				cover: (100 to: 120)
				declaredAt: (32 to: 52)) value ] valueCoveringAll:
				{122 to: 126}) asString ] valueCoveringAll:
				{128 to: 135}) ] valueCoveringAll:
			{98 to: 98}) ] valueCoveringAll:
		{63 to: 66}.! !
!Behavior method!
value
	^ [
	(transference
		cover: (10 to: 21)
		declaredAt: (10 to: 21)) value ] valueCoveringAll:
		{23 to: 27}.! !
!Behavior method!
value
	^ value
		cover: (9 to: 13)
		declaredAt: (9 to: 13).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #SummaryTest #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 00:42:47'!
PASSED!

!testRun: #SummaryTest #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 00:42:47'!
PASSED!
!Behavior method!
acceptReport: aReport
	^ [
	(aReport
		cover: (25 to: 31)
		declaredAt: (15 to: 21)) reportForDepositTransference:
		(self coverAll:
			{63 to: 66}) ] valueCoveringAll:
		{33 to: 61}.! !
!Behavior method!
reportForDepositTransference: aDepositTransference
	[
	(summary
		cover: (53 to: 59)
		declaredAt: (53 to: 59)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{66 to: 96}) ,
			([
			([
			(aDepositTransference
				cover: (99 to: 118)
				declaredAt: (31 to: 50)) value ] valueCoveringAll:
				{120 to: 124}) asString ] valueCoveringAll:
				{126 to: 133}) ] valueCoveringAll:
			{97 to: 97}) ] valueCoveringAll:
		{61 to: 64}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #SummaryTest #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 00:42:47'!
PASSED!

!testRun: #SummaryTest #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 00:42:48'!
PASSED!
!Behavior method!
acceptReport: aReport
	[
	(aReport
		cover: (24 to: 30)
		declaredAt: (15 to: 21)) reportForPortfolio:
		(self coverAll:
			{52 to: 55}) ] valueCoveringAll:
		{32 to: 50}.! !
!Behavior method!
reportForPortfolio: aPortfolio
	[
	(aPortfolio
		cover: (33 to: 42)
		declaredAt: (21 to: 30)) reportForAllAccounts:
		(self coverAll:
			{66 to: 69}) ] valueCoveringAll:
		{44 to: 64}.! !
!Behavior method!
reportForAllAccounts: aReport
	[
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) do: [ :anAccount |
		[
		(anAccount
			cover: (59 to: 67)
			declaredAt: (47 to: 55)) acceptReport:
			(aReport
				cover: (83 to: 89)
				declaredAt: (23 to: 29)) ] valueCoveringAll:
			{69 to: 81} ]] valueCoveringAll:
		{41 to: 43}.! !

!testRun: #SummaryTest #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 00:42:48'!
PASSED!

!testRun: #SummaryTest #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 00:42:48'!
PASSED!

!testRun: #SummaryTest #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 00:42:48'!
PASSED!

!testRun: #SummaryTest #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 00:42:48'!
PASSED!
!Behavior method!
initializeFor: anAccount
	(neto _ 0 coverAll:
		{35 to: 35})
		cover: (27 to: 30)
		declaredAt: (27 to: 30).
	[
	(anAccount
		cover: (39 to: 47)
		declaredAt: (16 to: 24)) acceptReport:
		(self coverAll:
			{63 to: 66}) ] valueCoveringAll:
		{49 to: 61}.
	^ [
	('Neto de transferencias = ' coverAll:
		{71 to: 97}) ,
		([
		(neto
			cover: (100 to: 103)
			declaredAt: (27 to: 30)) asString ] valueCoveringAll:
			{105 to: 112}) ] valueCoveringAll:
		{98 to: 98}.! !

!testRun: #TransferNetTest #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 00:42:48'!
PASSED!
!Behavior method!
reportForWithdrawTransference: aWithdrawTransference
	(neto _ [
	(neto
		cover: (55 to: 58)
		declaredAt: (55 to: 58)) -
		([
		(aWithdrawTransference
			cover: (70 to: 90)
			declaredAt: (32 to: 52)) value ] valueCoveringAll:
			{92 to: 96}) ] valueCoveringAll:
		{68 to: 68})
		cover: (63 to: 66)
		declaredAt: (55 to: 58).! !

!testRun: #TransferNetTest #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 00:42:48'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 00:42:48'!
PASSED!
!Behavior method!
reportForDepositTransference: aDepositTransference
	(neto _ [
	(neto
		cover: (53 to: 56)
		declaredAt: (53 to: 56)) +
		([
		(aDepositTransference
			cover: (68 to: 87)
			declaredAt: (31 to: 50)) value ] valueCoveringAll:
			{89 to: 93}) ] valueCoveringAll:
		{66 to: 66})
		cover: (61 to: 64)
		declaredAt: (53 to: 56).! !

!testRun: #TransferNetTest #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 00:42:48'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 00:42:48'!
PASSED!
!Behavior method!
reportForDeposit: aDeposit
	^ self.! !
!Behavior method!
reportForWithdraw: aWithdraw
	^ self.! !

!testRun: #TransferNetTest #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 00:42:49'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 00:42:49'!
PASSED!

!testRun: #TransferNetTest #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 00:42:49'!
PASSED!

!testRun: #TransferNetTest #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 00:42:49'!
PASSED!

!testRun: #TransferNetTest #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 00:42:49'!
PASSED!

!testRun: #TransferNetTest #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 00:42:49'!
PASSED!

!testRun: #TransferNetTest #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 00:42:49'!
PASSED!

!testRun: #TransferenceTest #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 00:42:49'!
PASSED!
!Behavior method!
ceroOrNegativeTransactionErrorMessage
	^ 'error: transaction value must be positive' coverAll:
		{41 to: 83}.! !

!testRun: #TransferenceTest #test02valueCannotBeNegative stamp: 'BW 6/3/2021 00:42:49'!
PASSED!

!testRun: #TransferenceTest #test03valueCannotBeZero stamp: 'BW 6/3/2021 00:42:50'!
PASSED!
!Behavior method!
originAccount
	^ [
	(origin
		cover: (17 to: 22)
		declaredAt: (17 to: 22)) account ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
account
	^ account
		cover: (11 to: 17)
		declaredAt: (11 to: 17).! !
!Behavior method!
destinationAccount
	^ [
	(destination
		cover: (22 to: 32)
		declaredAt: (22 to: 32)) account ] valueCoveringAll:
		{34 to: 40}.! !

!testRun: #TransferenceTest #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 00:42:50'!
PASSED!
!Behavior method!
origin
	^ origin
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !
!Behavior method!
destination
	^ destination
		cover: (15 to: 25)
		declaredAt: (15 to: 25).! !

!testRun: #TransferenceTest #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 00:42:51'!
PASSED!
!Behavior method!
named: aName
	^ [
	([
	(self coverAll:
		{18 to: 21}) new ] valueCoveringAll:
		{23 to: 25}) initializeNamed:
		(aName
			cover: (44 to: 48)
			declaredAt: (8 to: 12)) ] valueCoveringAll:
		{27 to: 42}.! !
!Behavior method!
for: aPortfolio
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aPortfolio
			cover: (44 to: 53)
			declaredAt: (6 to: 15)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
initializeFor: aPortfolio
	(jerarquia _ [
	(OrderedCollection
		cover: (42 to: 58)
		declaredAt: (42 to: 58)) new ] valueCoveringAll:
		{60 to: 62})
		cover: (29 to: 37)
		declaredAt: (29 to: 37).
	(indentacion _ '' coverAll:
		{81 to: 82})
		cover: (66 to: 76)
		declaredAt: (66 to: 76).
	[
	(aPortfolio
		cover: (86 to: 95)
		declaredAt: (16 to: 25)) acceptReport:
		(self coverAll:
			{111 to: 114}) ] valueCoveringAll:
		{97 to: 109}.
	^ jerarquia
		cover: (119 to: 127)
		declaredAt: (29 to: 37).! !
!Behavior method!
reportForPortfolio: aPortfolio
	[
	(jerarquia
		cover: (36 to: 44)
		declaredAt: (36 to: 44)) add:
		([
		(indentacion
			cover: (51 to: 61)
			declaredAt: (51 to: 61)) ,
			([
			(aPortfolio
				cover: (64 to: 73)
				declaredAt: (21 to: 30)) name ] valueCoveringAll:
				{75 to: 78}) ] valueCoveringAll:
			{62 to: 62}) ] valueCoveringAll:
		{46 to: 49}.
	[
	(self coverAll:
		{82 to: 85}) incrementIndentation ] valueCoveringAll:
		{87 to: 106}.
	[
	(aPortfolio
		cover: (110 to: 119)
		declaredAt: (21 to: 30)) reportForAllAccounts:
		(self coverAll:
			{143 to: 146}) ] valueCoveringAll:
		{121 to: 141}.
	[
	(self coverAll:
		{150 to: 153}) decrementIndentation ] valueCoveringAll:
		{155 to: 174}.! !
!Behavior method!
name
	^ name
		cover: (8 to: 11)
		declaredAt: (8 to: 11).! !
!Behavior method!
incrementIndentation
	^ (indentacion _ [
	(indentacion
		cover: (26 to: 36)
		declaredAt: (26 to: 36)) ,
		('   ' coverAll:
			{54 to: 58}) ] valueCoveringAll:
		{52 to: 52})
		cover: (41 to: 51)
		declaredAt: (26 to: 36).! !
!Behavior method!
decrementIndentation
	^ (indentacion _ [
	(indentacion
		cover: (26 to: 36)
		declaredAt: (26 to: 36))
		copyFrom:
			(4 coverAll:
				{63 to: 63})
		to:
			([
			(indentacion
				cover: (41 to: 51)
				declaredAt: (26 to: 36)) size ] valueCoveringAll:
				{81 to: 84}) ] valueCoveringAll:
		{53 to: 61. 65 to: 67})
		cover: (69 to: 79)
		declaredAt: (26 to: 36).! !

!testRun: #TreeStructureTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:42:51'!
PASSED!
!Behavior method!
named: aName
	^ [
	([
	(self coverAll:
		{16 to: 19}) new ] valueCoveringAll:
		{21 to: 23}) initializeNamed:
		(aName
			cover: (42 to: 46)
			declaredAt: (8 to: 12)) ] valueCoveringAll:
		{25 to: 40}.! !
!Behavior method!
reportForReceptiveAccount: aReceptiveAccount
	[
	(jerarquia
		cover: (50 to: 58)
		declaredAt: (50 to: 58)) add:
		([
		(indentacion
			cover: (65 to: 75)
			declaredAt: (65 to: 75)) ,
			([
			(aReceptiveAccount
				cover: (78 to: 94)
				declaredAt: (28 to: 44)) name ] valueCoveringAll:
				{96 to: 99}) ] valueCoveringAll:
			{76 to: 76}) ] valueCoveringAll:
		{60 to: 63}.! !
!Behavior method!
name
	^ name
		cover: (8 to: 11)
		declaredAt: (8 to: 11).! !

!testRun: #TreeStructureTest #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 00:42:51'!
PASSED!

!testRun: #TreeStructureTest #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 00:42:51'!
PASSED!

!testRun: #TreeStructureTest #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 00:42:51'!
PASSED!

!testRun: #TreeStructureTest #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 00:42:52'!
PASSED!
!Behavior method!
for: aPortfolio
	^ [
	([
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}) initializeFor:
		(aPortfolio
			cover: (44 to: 53)
			declaredAt: (6 to: 15)) ] valueCoveringAll:
		{29 to: 42}.! !
!Behavior method!
reportForPortfolio: aPortfolio
	[
	(jerarquia
		cover: (34 to: 42)
		declaredAt: (34 to: 42)) add:
		([
		(indentacion
			cover: (49 to: 59)
			declaredAt: (49 to: 59)) ,
			([
			(aPortfolio
				cover: (62 to: 71)
				declaredAt: (21 to: 30)) name ] valueCoveringAll:
				{73 to: 76}) ] valueCoveringAll:
			{60 to: 60}) ] valueCoveringAll:
		{44 to: 47}.
	[
	(self coverAll:
		{81 to: 84}) incrementIndentation ] valueCoveringAll:
		{86 to: 105}.
	[
	(aPortfolio
		cover: (109 to: 118)
		declaredAt: (21 to: 30)) reportForAllAccounts:
		(self coverAll:
			{142 to: 145}) ] valueCoveringAll:
		{120 to: 140}.
	[
	(jerarquia
		cover: (149 to: 157)
		declaredAt: (34 to: 42)) add:
		([
		([
		(indentacion
			cover: (164 to: 174)
			declaredAt: (49 to: 59)) ,
			('Balance = ' coverAll:
				{177 to: 188}) ] valueCoveringAll:
			{175 to: 175}) ,
			([
			([
			(aPortfolio
				cover: (191 to: 200)
				declaredAt: (21 to: 30)) balance ] valueCoveringAll:
				{202 to: 208}) asString ] valueCoveringAll:
				{210 to: 217}) ] valueCoveringAll:
			{189 to: 189}) ] valueCoveringAll:
		{159 to: 162}.
	[
	(self coverAll:
		{221 to: 224}) decrementIndentation ] valueCoveringAll:
		{226 to: 245}.! !

!testRun: #TreeStructureWithSummaryTest #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 00:42:52'!
PASSED!
!Behavior method!
reportForReceptiveAccount: aReceptiveAccount
	[
	(jerarquia
		cover: (50 to: 58)
		declaredAt: (50 to: 58)) add:
		([
		(indentacion
			cover: (65 to: 75)
			declaredAt: (65 to: 75)) ,
			([
			(aReceptiveAccount
				cover: (78 to: 94)
				declaredAt: (28 to: 44)) name ] valueCoveringAll:
				{96 to: 99}) ] valueCoveringAll:
			{76 to: 76}) ] valueCoveringAll:
		{60 to: 63}.
	[
	(self coverAll:
		{104 to: 107}) incrementIndentation ] valueCoveringAll:
		{109 to: 128}.
	[
	([
	(Summary
		cover: (133 to: 139)
		declaredAt: (133 to: 139)) for:
		(aReceptiveAccount
			cover: (146 to: 162)
			declaredAt: (28 to: 44)) ] valueCoveringAll:
		{141 to: 144}) do: [ :aString |
		[
		(jerarquia
			cover: (181 to: 189)
			declaredAt: (50 to: 58)) add:
			([
			(indentacion
				cover: (196 to: 206)
				declaredAt: (65 to: 75)) ,
				(aString
					cover: (209 to: 215)
					declaredAt: (171 to: 177)) ] valueCoveringAll:
				{207 to: 207}) ] valueCoveringAll:
			{191 to: 194} ]] valueCoveringAll:
		{165 to: 167}.
	[
	(self coverAll:
		{220 to: 223}) decrementIndentation ] valueCoveringAll:
		{225 to: 244}.! !

!testRun: #TreeStructureWithSummaryTest #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 00:42:52'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test03StructureIdentsFirstLevelTransactionsCorrectly stamp: 'BW 6/3/2021 00:42:52'!
PASSED!

!testRun: #TreeStructureWithSummaryTest #test04tructureIdentsAnyLevelTransactionsCorrectly stamp: 'BW 6/3/2021 00:42:52'!
PASSED!

----SNAPSHOT----(3 June 2021 00:43:53) CuisUniversity-4532.image priorSource: 22232348!

----QUIT----(3 June 2021 01:15:05) CuisUniversity-4532.image priorSource: 22299365!

----STARTUP---- (3 June 2021 15:03:16) as F:\Computacion\Ingenier√≠a de Software 1\CuisUniversity\CuisUniversity-4532.image!


TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #PortfolioTest category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:04:26'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:04:32'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TestCase subclass: #SummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #SummaryTest category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:04:46'!
TestCase subclass: #SummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferNetTest category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:04:50'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TransferenceTest category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:05:07'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TestCase subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TreeStructureTest category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:05:13'!
TestCase subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

TestCase subclass: #TreeStructureWithSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #TreeStructureWithSummaryTest category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:05:17'!
TestCase subclass: #TreeStructureWithSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classRenamed: #SummaryTest as: #TestSummary stamp: 'BW 6/3/2021 15:05:38'!
Smalltalk renameClassNamed: #SummaryTest as: #TestSummary!

!classRenamed: #TransferNetTest as: #TestTransferNet stamp: 'BW 6/3/2021 15:05:47'!
Smalltalk renameClassNamed: #TransferNetTest as: #TestTransferNet!

!classRenamed: #TransferenceTest as: #TestTransference stamp: 'BW 6/3/2021 15:05:55'!
Smalltalk renameClassNamed: #TransferenceTest as: #TestTransference!

!classRenamed: #TreeStructureTest as: #TestTreeStructure stamp: 'BW 6/3/2021 15:06:03'!
Smalltalk renameClassNamed: #TreeStructureTest as: #TestTreeStructure!

!classRenamed: #TreeStructureWithSummaryTest as: #TestTreeStructureWithSummary stamp: 'BW 6/3/2021 15:06:13'!
Smalltalk renameClassNamed: #TreeStructureWithSummaryTest as: #TestTreeStructureWithSummary!

TreeStructure for: ReceptiveAccount new!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 15:08:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 15:08:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 15:08:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 15:08:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 15:08:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 15:08:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 15:08:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 15:08:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 15:08:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 15:08:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #TestSummary #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #TestSummary #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #TestSummary #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 15:08:42'!
PASSED!

!testRun: #TestSummary #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestSummary #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestSummary #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestSummary #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestSummary #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestSummary #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestSummary #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestSummary #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestSummary #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestSummary #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransferNet #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransference #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransference #test02valueCannotBeNegative stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransference #test03valueCannotBeZero stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransference #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTransference #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTreeStructure #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTreeStructure #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTreeStructure #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTreeStructure #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTreeStructure #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test03StructureIdentsFirstLevelTransactionsCorrectly stamp: 'BW 6/3/2021 15:08:43'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test04tructureIdentsAnyLevelTransactionsCorrectly stamp: 'BW 6/3/2021 15:08:44'!
PASSED!

!classRenamed: #ReceptiveAccountTest as: #TestReceptiveAccount stamp: 'BW 6/3/2021 15:11:28'!
Smalltalk renameClassNamed: #ReceptiveAccountTest as: #TestReceptiveAccount!

!classRenamed: #PortfolioTest as: #TestPortfolio stamp: 'BW 6/3/2021 15:11:36'!
Smalltalk renameClassNamed: #PortfolioTest as: #TestPortfolio!

!classRemoval: #TestsEjercicio stamp: 'BW 6/3/2021 15:12:28'!
TestCase subclass: #TestsEjercicio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!
!TestTransference methodsFor: 'tests' stamp: 'BW 6/3/2021 15:14:36'!
test06transferenceCannotHaveSameSenderAndReceiver
	|account |

	account := ReceptiveAccount new.
	
	self should: [Transference from: account to: account for: 10] raise: Error -MessageNotUnderstood withMessageText: Transference sameAccountErrorMessage
	
	
	
! !

!testRun: #TestTransference #test06transferenceCannotHaveSameSenderAndReceiver stamp: 'BW 6/3/2021 15:14:42'!
ERROR!
!Transference class methodsFor: 'error message' stamp: 'BW 6/3/2021 15:15:07'!
sameAccountErrorMessage
	self shouldBeImplemented.! !
!Transference class methodsFor: 'error message' stamp: 'BW 6/3/2021 15:15:46' prior: 51028878!
sameAccountErrorMessage
	^'Error: sender and receiver must differ'! !

!testRun: #TestTransference #test06transferenceCannotHaveSameSenderAndReceiver stamp: 'BW 6/3/2021 15:15:47'!
FAILURE!
!Transference methodsFor: 'transference ends' stamp: 'BW 6/3/2021 15:19:31'!
destinationEnd
	^destination! !
!TestTransference methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 15:19:31' prior: 51007971!
test05transferenceIsRegisteredInInvolvedAccounts
	|account1 account2 transference|

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transference := Transference from: account1 to: account2 for: 10.
	
	self assert: (account1 hasRegistered: transference origin).
	self assert: (account2 hasRegistered: transference destinationEnd).	
! !

!methodRemoval: Transference #destination stamp: 'BW 6/3/2021 15:19:31'!
destination
	^destination!
!Transference methodsFor: 'transference ends' stamp: 'BW 6/3/2021 15:20:04'!
originEnd 
	^origin! !
!TestTransference methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 15:20:04' prior: 51028897!
test05transferenceIsRegisteredInInvolvedAccounts
	|account1 account2 transference|

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transference := Transference from: account1 to: account2 for: 10.
	
	self assert: (account1 hasRegistered: transference originEnd).
	self assert: (account2 hasRegistered: transference destinationEnd).	
! !

!methodRemoval: Transference #origin stamp: 'BW 6/3/2021 15:20:04'!
origin 
	^origin!

!classDefinition: #Portfolio category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:20:58'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Account category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:20:58'!
Object subclass: #Account
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Account category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:21:40'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

Account subclass: #Portfolio
	instanceVariableNames: 'parents name accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!classDefinition: #Portfolio category: 'Portfolio-2' stamp: 'BW 6/3/2021 15:21:47'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents name accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-2'!

!testRun: #TestPortfolio #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestPortfolio #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestReceptiveAccount #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestReceptiveAccount #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestReceptiveAccount #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestReceptiveAccount #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestReceptiveAccount #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestReceptiveAccount #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestReceptiveAccount #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 15:21:49'!
PASSED!

!testRun: #TestSummary #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestSummary #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransferNet #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransference #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransference #test02valueCannotBeNegative stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransference #test03valueCannotBeZero stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransference #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransference #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransference #test06transferenceCannotHaveSameSenderAndReceiver stamp: 'BW 6/3/2021 15:21:50'!
FAILURE!

!testRun: #TestTreeStructure #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTreeStructure #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTreeStructure #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTreeStructure #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTreeStructure #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test03StructureIdentsFirstLevelTransactionsCorrectly stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test04tructureIdentsAnyLevelTransactionsCorrectly stamp: 'BW 6/3/2021 15:21:50'!
PASSED!

!testRun: #TestTransference #test06transferenceCannotHaveSameSenderAndReceiver stamp: 'BW 6/3/2021 15:21:50'!
FAILURE!
!Transference methodsFor: 'initialization' stamp: 'BW 6/3/2021 15:22:55' prior: 51015204!
initializeOrigin: anOriginAccount destination: aDestinationAccount value: aValue

	origin := anOriginAccount .
	destination := aDestinationAccount.
	value := aValue.
	
	origin setTransference: self.
	destination setTransference: self.! !
!Transference class methodsFor: 'instance creation' stamp: 'BW 6/3/2021 15:23:30' prior: 51015215!
from: anOriginAccount to: aDestinationAccount for: aValue

	| aDepositTransference aWithdrawTransference newTransference |
	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].
	anOriginAccount  = aDestinationAccount ifTrue: [self error: self sameAccountErrorMessage ].
	
	aDepositTransference := DepositTransference registerOn: aDestinationAccount.
	aWithdrawTransference := WithdrawTransference registerOn: anOriginAccount.
	
	newTransference := self new initializeOrigin: aWithdrawTransference destination: aDepositTransference value: aValue.
	
	^newTransference.! !
!Transference methodsFor: 'initialization' stamp: 'BW 6/3/2021 15:24:34'!
initializeFrom: anOriginAccount to: aDestinationAccount for: aValue

	origin := anOriginAccount .
	destination := aDestinationAccount.
	value := aValue.
	
	origin setTransference: self.
	destination setTransference: self.! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'BW 6/3/2021 15:24:34' prior: 51029215!
from: anOriginAccount to: aDestinationAccount for: aValue

	| aDepositTransference aWithdrawTransference newTransference |
	aValue <= 0 ifTrue: [self error: self ceroOrNegativeTransactionErrorMessage ].
	anOriginAccount  = aDestinationAccount ifTrue: [self error: self sameAccountErrorMessage ].
	
	aDepositTransference := DepositTransference registerOn: aDestinationAccount.
	aWithdrawTransference := WithdrawTransference registerOn: anOriginAccount.
	
	newTransference := self new initializeFrom: aWithdrawTransference to: aDepositTransference for: aValue.
	
	^newTransference.! !

!methodRemoval: Transference #initializeOrigin:destination:value: stamp: 'BW 6/3/2021 15:24:34'!
initializeOrigin: anOriginAccount destination: aDestinationAccount value: aValue

	origin := anOriginAccount .
	destination := aDestinationAccount.
	value := aValue.
	
	origin setTransference: self.
	destination setTransference: self.!

!testRun: #TestPortfolio #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'BW 6/3/2021 15:24:36'!
PASSED!

!testRun: #TestPortfolio #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'BW 6/3/2021 15:24:36'!
PASSED!

!testRun: #TestPortfolio #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'BW 6/3/2021 15:24:36'!
PASSED!

!testRun: #TestPortfolio #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'BW 6/3/2021 15:24:36'!
PASSED!

!testRun: #TestPortfolio #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestPortfolio #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestPortfolio #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestPortfolio #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestPortfolio #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestPortfolio #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestPortfolio #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestPortfolio #test12PortfolioCanNotIncludeItself stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestPortfolio #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestPortfolio #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestPortfolio #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestReceptiveAccount #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestReceptiveAccount #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestReceptiveAccount #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestReceptiveAccount #test04WithdrawValueMustBePositive stamp: 'BW 6/3/2021 15:24:37'!
PASSED!

!testRun: #TestReceptiveAccount #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestReceptiveAccount #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestReceptiveAccount #test07AccountKnowsItsTransactions stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test01NewAccountGeneratesEmptySummary stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test02SummaryRegistresSingeDeposit stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test03SummaryRegistresMultipleDeposits stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test04SummaryRegistresSingleWithdraw stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test05SummaryRegistresMultipleWithdraws stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test06SummaryRegistresSingeExitTransference stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test07SummaryRegistresMultipleExitTransferences stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test08SummaryRegistresSingleEntryTransference stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test09SummaryRegistresMultipleEntryTransferences stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test10NewPortfolioGeneratesEmptySummary stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test11SummaryRegistersASingleReceptiveAccountSummaryInPortfolio stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test12SummaryRegistersMultipleReceptiveAccountSummariesInPortfolio stamp: 'BW 6/3/2021 15:24:38'!
PASSED!

!testRun: #TestSummary #test13SummaryRegistersAllAccountsSummariesInPortfolio stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test01TransferNetIsZeroForNewAccount stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test02TransferNetRegistersASingeExitTransference stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test03TransferNetRegistersMultipleExitTransferences stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test04TransferNetRegistersASingleEntryTransference stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test05TransferNetRegistersMultipleEntryTransferences stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test06TransferNetDoesNotRegisterNonTransferenceTransactions stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test07TransferNetIsZeroForNewPortfolio stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test08TransferNetRegistersASingleTransferenceInPortfolio stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test09TransferNetRegistersMultipleTransferencesInAPortfoliosOnlyAccount stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test10TransferNetDoesNotRegisterNonTransferenceTransactionsInPortfolio stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test11TransferNetRegistresMultipleReceptiveAccountNetInPortfolio stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransferNet #test12TransferNetRegistresAllAccountNetInPortfolio stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransference #test01transferenceValueAppliesCorrectlyInEnvolvedAccounts stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransference #test02valueCannotBeNegative stamp: 'BW 6/3/2021 15:24:39'!
PASSED!

!testRun: #TestTransference #test03valueCannotBeZero stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTransference #test04transferenceKnowsInvolvedAccountsAndValue stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTransference #test05transferenceIsRegisteredInInvolvedAccounts stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTransference #test06transferenceCannotHaveSameSenderAndReceiver stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTreeStructure #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTreeStructure #test02StructureIndentsFirstLevelAccountsCorrectly stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTreeStructure #test03StructureIndentsFirstLevelPortfoliosCorrectly stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTreeStructure #test04StructureIdentsAnyLevelAccountCorrectly stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTreeStructure #test05EjemploDelEnunciado stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test01StructureShowsNewPortfolioAlone stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test02StructureIndentsFirstLevelEmptyAccountsCorrectly stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test03StructureIdentsFirstLevelTransactionsCorrectly stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

!testRun: #TestTreeStructureWithSummary #test04tructureIdentsAnyLevelTransactionsCorrectly stamp: 'BW 6/3/2021 15:24:40'!
PASSED!

----QUIT----(3 June 2021 15:28:14) CuisUniversity-4532.image priorSource: 22299454!