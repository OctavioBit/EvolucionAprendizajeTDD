----STARTUP---- (21 June 2021 14:34:31) as C:\Users\Santiago\Desktop\Uba\Inge\Programa\windows64\CuisUniversity-4532.image!


!classRemoval: #NameOfSubclass stamp: 'sc 6/21/2021 14:34:57'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'sc 6/21/2021 14:34:57'!
Object subclass: #Cart
	instanceVariableNames: 'books avaibleBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Book stamp: 'sc 6/21/2021 14:34:58'!
Object subclass: #Book
	instanceVariableNames: 'isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'sc 6/21/2021 14:34:58'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Santiago\Desktop\Uba\Inge\Programa\windows64\TusLibros-33.st----!

TestCase subclass: #XXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 14:37:06'!
TestCase subclass: #XXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/21/2021 14:47:42'!
Object subclass: #Store
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 14:49:42'!
test01cantCreateACartWithInvalidPassword
	|store validClientId invalidClientIdPassword|
	
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: invalidClientIdPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store cantCreateCartWithInvalidCredentials)].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 14:51:17' prior: 50880323!
test01cantCreateACartWithInvalidPassword
	|store  invalidClientIdPassword|
	
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: invalidClientIdPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store cantCreateCartWithInvalidCredentials)].
	
	
	
	
	! !

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 14:51:17'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 14:52:13' prior: 50880338!
test01cantCreateACartWithInvalidPassword
	|store invalidClientIdPassword|
	
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: invalidClientIdPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store cantCreateCartWithInvalidCredentials)].
	
	
	
	
	! !

TestCase subclass: #XXXX
	instanceVariableNames: 'validClientId invalidClientIdPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #XXXX
	instanceVariableNames: 'validClientId invalidPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 14:53:06'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientId invalidPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #XXXX
	instanceVariableNames: 'validClientId validPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 14:53:21'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientId validPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 14:53:40' prior: 50880359!
test01cantCreateACartWithInvalidPassword
	|store|
	
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: validPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store cantCreateCartWithInvalidCredentials)].
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 14:54:35' overrides: 16927572!
setUp
	validClientId _ 'santiagoCorley'.
	validPassword _ '1234abcde'
	
	
	! !

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 14:54:40'!
ERROR!
!Store methodsFor: 'instance creation' stamp: 'sc 6/21/2021 14:54:59'!
createNewCartWith: aString and: aString2 
	self shouldBeImplemented.! !
!Store methodsFor: 'instance creation' stamp: 'sc 6/21/2021 14:57:13' prior: 50880423!
createNewCartWith: aClientId and: aPassword 
	self error: self class installUnitsAsGlobals.! !
!Store methodsFor: 'instance creation' stamp: 'sc 6/21/2021 14:57:30' prior: 50880428!
createNewCartWith: aClientId and: aPassword 
	self error: self class invalidCredentials.! !

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 14:57:35'!
ERROR!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 14:57:35'!
ERROR!
!Store class methodsFor: 'error' stamp: 'sc 6/21/2021 14:57:58'!
invalidCredentials
	self shouldBeImplemented.! !
!Store class methodsFor: 'error' stamp: 'sc 6/21/2021 14:58:48' prior: 50880446!
invalidCredentials
	'anotate si no te acordas el usuario o los datos anotatelos en un papelito maestro'! !
!Store class methodsFor: 'error' stamp: 'sc 6/21/2021 14:58:55' prior: 50880451!
invalidCredentials
	'si no te acordas el usuario o los datos anotatelos en un papelito maestro'! !

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 14:58:59'!
ERROR!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 14:58:59'!
ERROR!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 14:59:22'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:00:12' prior: 50880402!
test01cantCreateACartWithInvalidPassword
	|store|
	
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: validPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentials)].
	
	
	
	
	! !

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:00:39'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:00:39'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:00:55' prior: 50880472!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: validPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentials)].
	
	
	
	
	! !
!Store class methodsFor: 'error' stamp: 'sc 6/21/2021 15:01:42'!
invalidCredentialsErrorMessage
	'si no te acordas el usuario o los datos anotatelos en un papelito maestro'! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:01:42' prior: 50880490!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: validPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:01:43' prior: 50880434!
createNewCartWith: aClientId and: aPassword 
	self error: self class invalidCredentialsErrorMessage.! !

!methodRemoval: Store class #invalidCredentials stamp: 'sc 6/21/2021 15:01:43'!
invalidCredentials
	'si no te acordas el usuario o los datos anotatelos en un papelito maestro'!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:01:46'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:01:46'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:02:23' prior: 50880509!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: 'anInvalidPassword' ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:02:25'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:02:25'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:03:02' prior: 50880540!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:03:03'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:03:04'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:07:47'!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store new.
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:07:49'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:07:49'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:08:12'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:08:12'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:09:09' prior: 50880578!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store new.
	self halt.
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:09:27'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:09:35'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:09:35'!
ERROR!
!Store class methodsFor: 'error' stamp: 'sc 6/21/2021 15:10:21' prior: 50880502!
invalidCredentialsErrorMessage
	^'si no te acordas el usuario o los datos anotatelos en un papelito maestro'! !
!Store class methodsFor: 'error' stamp: 'sc 6/21/2021 15:10:24' prior: 50880621!
invalidCredentialsErrorMessage
	'si no te acordas el usuario o los datos anotatelos en un papelito maestro'! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:11:00'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:11:35'!
ERROR!

!classRemoval: #RoverPositionWindow stamp: 'sc 6/21/2021 15:12:16'!
RoverWindow subclass: #RoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #RoverDirectionWindow stamp: 'sc 6/21/2021 15:12:16'!
RoverWindow subclass: #RoverDirectionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #RoverWindow stamp: 'sc 6/21/2021 15:12:17'!
RoverObserver subclass: #RoverWindow
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #PositionLog stamp: 'sc 6/21/2021 15:12:17'!
Log subclass: #PositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #DirectionLog stamp: 'sc 6/21/2021 15:12:18'!
Log subclass: #DirectionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #Log stamp: 'sc 6/21/2021 15:12:18'!
RoverObserver subclass: #Log
	instanceVariableNames: 'changesRegister lastKnownPosition lastKnownDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #RoverObserver stamp: 'sc 6/21/2021 15:12:19'!
Object subclass: #RoverObserver
	instanceVariableNames: 'rover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'sc 6/21/2021 15:12:20'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'sc 6/21/2021 15:12:20'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'sc 6/21/2021 15:12:21'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'sc 6/21/2021 15:12:21'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'sc 6/21/2021 15:12:22'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'sc 6/21/2021 15:12:22'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observerCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #WindowTest stamp: 'sc 6/21/2021 15:12:23'!
TestCase subclass: #WindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'sc 6/21/2021 15:12:24'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LogTest stamp: 'sc 6/21/2021 15:12:24'!
TestCase subclass: #LogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:12:40'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:12:40'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:13:01' prior: 50880601!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store new.
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:13:03'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:13:03'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:13:03'!
ERROR!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:13:52'!
listCart
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:13:56'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:13:56'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:14:41' prior: 50880755!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store new.
	"cartId _ store createNewCartWith: validClientId  and: validPassword."
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:14:44'!
ERROR!
!Store class methodsFor: 'error' stamp: 'sc 6/21/2021 15:15:25' prior: 50880628!
invalidCredentialsErrorMessage
	^'si no te acordas el usuario o los datos anotatelos en un papelito maestro'! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:15:34' prior: 50880783!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store new.
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:15:35'!
ERROR!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:16:22' prior: 50880522!
createNewCartWith: aClientId and: aPassword 
	self error: self class invalidCredentialsErrorMessage.
	! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:16:43'!
raiseInvalidCredentialsError

	^ self error: self class invalidCredentialsErrorMessage! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:16:43' prior: 50880816!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError.
	! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:17:28'!
raiseInvalidCredentialsError: aPassword

	^ self error: self class invalidCredentialsErrorMessage! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:17:28' prior: 50880828!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aPassword.
	! !

!methodRemoval: Store #raiseInvalidCredentialsError stamp: 'sc 6/21/2021 15:17:28'!
raiseInvalidCredentialsError

	^ self error: self class invalidCredentialsErrorMessage!

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/21/2021 15:18:45'!
Object subclass: #Store
	instanceVariableNames: 'userPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:18:42' prior: 50880833!
raiseInvalidCredentialsError: aPassword
	aPassword = userPassword ifFalse:[
		^ self error: self class invalidCredentialsErrorMessage]
	! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:18:58' prior: 50880857!
raiseInvalidCredentialsError: aPassword
	aPassword = userPassword ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	! !
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 15:20:45'!
newWith: clientPassword
	self new initializeWith: clientPassword.! !
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 15:21:35'!
initializeWith: aPassword
	userPassword _ aPassword ! !
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 15:21:39' prior: 50880876!
initializeWith: aPassword
	userPassword _ aPassword.! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:22:07' prior: 50880839!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aPassword.
	^1.
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:22:14'!
ERROR!
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 15:23:43' prior: 50880871!
newWith: clientPassword
	^self new initializeWith: clientPassword.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:23:44'!
ERROR!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:23:44'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:23:44'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:25:16' prior: 50880803!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: validPassword .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:25:17'!
ERROR!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:25:49'!
listCart: cartId
	! !

!methodRemoval: Store #listCart stamp: 'sc 6/21/2021 15:25:49'!
listCart
	!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:26:06' prior: 50880924!
listCart: cartId
	^ OrderedCollection new.
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:26:07'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:26:07'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:26:24'!
test01cantCreateACartWithInvalidUser
	|store|
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:29:34'!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!methodRemoval: XXXX #test01cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:29:34'!
test01cantCreateACartWithInvalidUser
	|store|
	store _ Store new.
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	!

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 15:29:58'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientId validPassword invalidClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:29:56' prior: 50880953!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store new.
	self should: [store createNewCartWith: invalidClientId  and: validPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:30:48' prior: 50880415 overrides: 16927572!
setUp
	validClientId _ 'santiagoCorley'.
	invalidClientId _ 'enzo vigneti'.
	validPassword _ '1234abcde'
	
	
	! !

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:30:53'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:30:53'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:30:53'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:30:53'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:31:22' prior: 50880988!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: validPassword .
	self should: [store createNewCartWith: invalidClientId  and: validPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:31:34' prior: 50880559!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: validPassword.
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:31:37'!
FAILURE!
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 15:32:41'!
aClientId: clientId newWith: clientPassword
	^self new initializeWith: clientPassword.! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:32:41' prior: 50881033!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store aClientId: validClientId newWith: validPassword.
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:32:41' prior: 50880910!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store aClientId: validClientId newWith: validPassword .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:32:41' prior: 50881020!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store aClientId: validClientId newWith: validPassword .
	self should: [store createNewCartWith: invalidClientId  and: validPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!methodRemoval: Store class #newWith: stamp: 'sc 6/21/2021 15:32:41'!
newWith: clientPassword
	^self new initializeWith: clientPassword.!
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 15:33:46'!
newWith: clientId andWith: clientPassword
	^self new initializeWith: clientPassword.! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:33:46' prior: 50881071!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: validClientId andWith: validPassword .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:33:46' prior: 50881083!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: validClientId andWith: validPassword .
	self should: [store createNewCartWith: invalidClientId  and: validPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:33:46' prior: 50881056!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: validClientId andWith: validPassword.
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!methodRemoval: Store class #aClientId:newWith: stamp: 'sc 6/21/2021 15:33:46'!
aClientId: clientId newWith: clientPassword
	^self new initializeWith: clientPassword.!

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/21/2021 15:35:22'!
Object subclass: #Store
	instanceVariableNames: 'userPassword clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 15:35:21'!
initializeWith: aClientId AndWith: aPassword.
	clientId _ aClientId .
	userPassword _ aPassword.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/21/2021 15:35:33'!
Object subclass: #Store
	instanceVariableNames: 'clientPassword clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:35:33' prior: 50880881!
initializeWith: aPassword
	clientPassword _ aPassword.! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:35:33' prior: 50881160!
initializeWith: aClientId AndWith: aPassword.
	clientId _ aClientId .
	clientPassword _ aPassword.! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:35:33' prior: 50880864!
raiseInvalidCredentialsError: aPassword
	aPassword = clientPassword ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:36:36'!
andWith: aClientId raiseInvalidCredentialsError: aPassword
	aPassword = clientPassword ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:36:36' prior: 50880886!
createNewCartWith: aClientId and: aPassword 
	self andWith: aClientId raiseInvalidCredentialsError: aPassword.
	^1.
	! !

!methodRemoval: Store #raiseInvalidCredentialsError: stamp: 'sc 6/21/2021 15:36:36'!
raiseInvalidCredentialsError: aPassword
	aPassword = clientPassword ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:36:52'!
raiseInvalidCredentialsError: aClientId andWith: aPassword
	aPassword = clientPassword ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:36:52' prior: 50881199!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	^1.
	! !

!methodRemoval: Store #andWith:raiseInvalidCredentialsError: stamp: 'sc 6/21/2021 15:36:52'!
andWith: aClientId raiseInvalidCredentialsError: aPassword
	aPassword = clientPassword ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:37:39' prior: 50881212!
raiseInvalidCredentialsError: aClientId andWith: aPassword
	((aClientId = clientId) and: (aPassword = clientPassword)) ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:37:41'!
ERROR!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:37:41'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:37:41'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:37:41'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:37:47'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:37:47'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:38:05'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:38:05'!
ERROR!

!methodRemoval: Store #initializeWith: stamp: 'sc 6/21/2021 15:38:58'!
initializeWith: aPassword
	clientPassword _ aPassword.!
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 15:40:15'!
initializeWith: aClientId andWith: aPassword.
	clientId _ aClientId .
	clientPassword _ aPassword.! !

!methodRemoval: Store #initializeWith:AndWith: stamp: 'sc 6/21/2021 15:40:15'!
initializeWith: aClientId AndWith: aPassword.
	clientId _ aClientId .
	clientPassword _ aPassword.!
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 15:40:35' prior: 50881101!
newWith: clientId andWith: clientPassword
	^self new initializeWith: clientId andWith: clientPassword.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:40:38'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:40:38'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:40:38'!
PASSED!

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 15:43:51'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientId validPassword invalidClientId anotherValidClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 15:43:52'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientId validPassword invalidClientId anotherValidClientId anotherValidPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:43:48'!
test03canCreateACartWithAnotherValidUser
	|store cartId|
	store _ Store newWith: anotherValidClientId andWith: anotherValidPassword .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:44:46' prior: 50881001 overrides: 16927572!
setUp
	validClientId _ 'santiagoCorley'.
	anotherValidClientId  _ 'santiagoCorleyCuentaBackUp'.
	invalidClientId _ 'enzo vigneti'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ '1234abcde'
	
	
	! !

!testRun: #XXXX #test03canCreateACartWithAnotherValidUser stamp: 'sc 6/21/2021 15:44:50'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:44:50'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:44:50'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:44:51'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithAnotherValidUser stamp: 'sc 6/21/2021 15:44:51'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:46:14'!
test03canCreateACartWithMultipleUsers
	|store cartId|
	store _ Store newWith: anotherValidClientId andWith: anotherValidPassword .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!methodRemoval: XXXX #test03canCreateACartWithAnotherValidUser stamp: 'sc 6/21/2021 15:46:14'!
test03canCreateACartWithAnotherValidUser
	|store cartId|
	store _ Store newWith: anotherValidClientId andWith: anotherValidPassword .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:48:01'!
test03canCreateACartWithAnotherValidUser
	|store cartId users passes|
	users _ OrderedCollection  with: validClientId with: anotherValidClientId.
	passes _ OrderedCollection with: validPassword with: anotherValidPassword.
	
	store _ Store newWith: users andWith: passes .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!methodRemoval: XXXX #test03canCreateACartWithMultipleUsers stamp: 'sc 6/21/2021 15:48:13'!
test03canCreateACartWithMultipleUsers
	|store cartId|
	store _ Store newWith: anotherValidClientId andWith: anotherValidPassword .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:48:29'!
test03canCreateACartWithMultipleValidUsers
	|store cartId users passes|
	users _ OrderedCollection  with: validClientId with: anotherValidClientId.
	passes _ OrderedCollection with: validPassword with: anotherValidPassword.
	
	store _ Store newWith: users andWith: passes .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!methodRemoval: XXXX #test03canCreateACartWithAnotherValidUser stamp: 'sc 6/21/2021 15:48:29'!
test03canCreateACartWithAnotherValidUser
	|store cartId users passes|
	users _ OrderedCollection  with: validClientId with: anotherValidClientId.
	passes _ OrderedCollection with: validPassword with: anotherValidPassword.
	
	store _ Store newWith: users andWith: passes .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 15:48:33'!
ERROR!
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 15:49:13' prior: 50881284!
newWith: clientIds andWith: clientPasswords
	^self new initializeWith: clientIds andWith: clientPasswords.! !
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 15:50:44' prior: 50881272!
initializeWith: aClientIds andWith: aPasswords.
	clientId _ aClientIds .
	clientPassword _ aPasswords.! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 15:51:38' prior: 50881235!
raiseInvalidCredentialsError: aClientId andWith: aPassword
	((clientId includes: aClientId) and: (clientPassword includes: aPassword )) ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:51:39'!
ERROR!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:51:39'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:51:39'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 15:51:39'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:51:39'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:52:02'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:52:02'!
ERROR!

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 15:52:50'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientIds validPassword invalidClientId anotherValidClientId anotherValidPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:52:50' prior: 50881329 overrides: 16927572!
setUp
	validClientIds _ 'santiagoCorley'.
	anotherValidClientId  _ 'santiagoCorleyCuentaBackUp'.
	invalidClientId _ 'enzo vigneti'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ '1234abcde'
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:52:50' prior: 50881133!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: validClientIds andWith: validPassword.
	self should: [store createNewCartWith: validClientIds  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:52:50' prior: 50881119!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: validClientIds andWith: validPassword .
	self should: [store createNewCartWith: invalidClientId  and: validPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:52:50' prior: 50881405!
test03canCreateACartWithMultipleValidUsers
	|store cartId users passes|
	users _ OrderedCollection  with: validClientIds with: anotherValidClientId.
	passes _ OrderedCollection with: validPassword with: anotherValidPassword.
	
	store _ Store newWith: users andWith: passes .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:52:50' prior: 50881107!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPassword .
	cartId _ store createNewCartWith: validClientIds  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:53:28' prior: 50881496 overrides: 16927572!
setUp
	validClientIds _ OrderedCollection  with: 'santiagoCorley' with: 'santiagoCorleyCuentaBackUp'. 
	invalidClientId _ 'enzo vigneti'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ '1234abcde'
	
	
	! !

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 15:53:33'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:53:33' prior: 50881564 overrides: 16927572!
setUp
	validClientIds _ OrderedCollection  with: 'santiagoCorley' with: 'santiagoCorleyCuentaBackUp'. 
	invalidClientId _ 'enzo vigneti'.
	validPasswords _ '1234abcde'.
	anotherValidPassword _ '1234abcde'
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:53:33' prior: 50881506!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: validClientIds andWith: validPasswords.
	self should: [store createNewCartWith: validClientIds  and: validPasswords, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:53:33' prior: 50881521!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: validClientIds andWith: validPasswords .
	self should: [store createNewCartWith: invalidClientId  and: validPasswords]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:53:33' prior: 50881535!
test03canCreateACartWithMultipleValidUsers
	|store cartId users passes|
	users _ OrderedCollection  with: validClientIds with: anotherValidClientId.
	passes _ OrderedCollection with: validPasswords with: anotherValidPassword.
	
	store _ Store newWith: users andWith: passes .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 15:53:33' prior: 50881552!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	cartId _ store createNewCartWith: validClientIds  and: validPasswords.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:54:25' prior: 50881584 overrides: 16927572!
setUp
	validClientIds _ OrderedCollection  with: 'santiagoCorley' with: 'santiagoCorleyCuentaBackUp'. 
	invalidClientId _ 'enzo vigneti'.
	validPasswords _ OrderedCollection with: '1234abcde' with: '1234abcde'.
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:54:27'!
ERROR!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:54:27'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:54:27'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 15:54:27'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:54:27'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:54:35'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:54:35'!
ERROR!

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 15:55:55'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:55:53' prior: 50881652 overrides: 16927572!
setUp
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validClientIds _ OrderedCollection  with: 'santiagoCorley' with: 'santiagoCorleyCuentaBackUp'. 
	invalidClientId _ 'enzo vigneti'.
	validPasswords _ OrderedCollection with: '1234abcde' with: '1234abcde'.
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:56:12' prior: 50881693 overrides: 16927572!
setUp
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validClientIds _ OrderedCollection  with: validClientId with: anotherValidClientId. 
	invalidClientId _ 'enzo vigneti'.
	validPasswords _ OrderedCollection with: '1234abcde' with: '1234abcde'.
	
	
	
	! !

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 15:56:22'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId validPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:56:21' prior: 50881640!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:57:35' prior: 50881706 overrides: 16927572!
setUp
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	validClientIds _ OrderedCollection  with: validClientId with: anotherValidClientId. 
	validPasswords _ OrderedCollection with: validPassword with: anotherValidPassword.
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:57:37'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:57:37'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:57:37'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 15:57:37'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:57:57' prior: 50881594!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: validClientIds andWith: validPasswords.
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:57:58'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:57:58'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:57:58'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:57:58'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 15:57:58'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:58:08' prior: 50881609!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: validClientIds andWith: validPasswords .
	self should: [store createNewCartWith: invalidClientId  and: validPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:58:11'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:58:11'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:58:11'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:58:11'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 15:58:11'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 15:58:48' prior: 50881623!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 15:58:50'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 15:58:50'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 15:58:50'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 15:58:50'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 15:58:50'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:00:09'!
test04cantCreateACartWithValidUserAndAnotherValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	cartId _ store createNewCartWith: anotherValidClientId and:validPasswords .
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherValidUserPassword stamp: 'sc 6/21/2021 16:00:13'!
ERROR!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherValidUserPassword stamp: 'sc 6/21/2021 16:00:20'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:00:35' prior: 50881853!
test04cantCreateACartWithValidUserAndAnotherValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	cartId _ store createNewCartWith: anotherValidClientId and:validPassword .
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherValidUserPassword stamp: 'sc 6/21/2021 16:00:36'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:00:36'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 16:00:36'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 16:00:36'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 16:00:36'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherValidUserPassword stamp: 'sc 6/21/2021 16:00:36'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:04:06' prior: 50881873!
test04cantCreateACartWithValidUserAndAnotherValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| (Store invalidCredentialsErrorMessage) 
							equals: anErrorMessage messageText ]
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:04:43' prior: 50881905!
test04cantCreateACartWithValidUserAndAnotherValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| (Store invalidCredentialsErrorMessage) 
							equals: anErrorMessage messageText ].
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherValidUserPassword stamp: 'sc 6/21/2021 16:04:45'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:05:14' prior: 50881922!
test04cantCreateACartWithValidUserAndAnotherValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| (Store invalidCredentialsErrorMessage) 
							equals: (anErrorMessage messageText) ].
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:05:23' prior: 50881943!
test04cantCreateACartWithValidUserAndAnotherValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
							equals: (anErrorMessage messageText) ].
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:05:28' prior: 50881960!
test04cantCreateACartWithValidUserAndAnotherValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherValidUserPassword stamp: 'sc 6/21/2021 16:05:29'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:05:48' prior: 50881977!
test04cantCreateACartWithValidUserAndAnotherValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	! !

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherValidUserPassword stamp: 'sc 6/21/2021 16:05:51'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:06:10'!
test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	! !

!methodRemoval: XXXX #test04cantCreateACartWithValidUserAndAnotherValidUserPassword stamp: 'sc 6/21/2021 16:06:10'!
test04cantCreateACartWithValidUserAndAnotherValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds andWith: validPasswords .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	!

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 16:09:55'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId validPassword userPasswordData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:09:54' prior: 50881740 overrides: 16927572!
setUp
	
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	validClientIds _ OrderedCollection  with: validClientId with: anotherValidClientId. 
	validPasswords _ OrderedCollection with: validPassword with: anotherValidPassword.
	userPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> anotherValidPassword)
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:10:07' prior: 50882060 overrides: 16927572!
setUp
	
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	userPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> anotherValidPassword)
	
	
	
	! !
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 16:10:52' prior: 50881442!
newWith: clientIds andWith: clientPasswords
	^self new initializeWith: clientIds.! !
!Object class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 16:11:09'!
newWith: clientIds andWith: clientPasswords
	^self new initializeWith: clientIds.! !

!methodRemoval: Store class #newWith:andWith: stamp: 'sc 6/21/2021 16:11:09'!
newWith: clientIds andWith: clientPasswords
	^self new initializeWith: clientIds.!

!methodRemoval: Object class #newWith:andWith: stamp: 'sc 6/21/2021 16:12:41'!
newWith: clientIds andWith: clientPasswords
	^self new initializeWith: clientIds.!
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 16:13:12'!
newWith: clientIds andWith: clientPasswords
	^self new initializeWith: clientIds.! !
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 16:13:25'!
newWith: clientIds 
	^self new initializeWith: clientIds.! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 16:13:25' prior: 50882017!
test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword
	|store cartId|
	store _ Store newWith: validClientIds .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 16:13:25' prior: 50881767!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: validClientIds .
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 16:13:26' prior: 50881826!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: validClientIds .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 16:13:26' prior: 50881797!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: validClientIds .
	self should: [store createNewCartWith: invalidClientId  and: validPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 16:13:26' prior: 50881728!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: validClientIds .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !

!methodRemoval: Store class #newWith:andWith: stamp: 'sc 6/21/2021 16:13:26'!
newWith: clientIds andWith: clientPasswords
	^self new initializeWith: clientIds.!
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 16:13:46' prior: 50882121!
newWith: clientsData 
	^self new initializeWith: clientsData.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/21/2021 16:14:47'!
Object subclass: #Store
	instanceVariableNames: 'clientPassword clientId clientsCredentialData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 16:14:45' prior: 50881449!
initializeWith: clientData andWith: aPasswords.
	clientsCredentialData _ clientData.! !
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 16:15:00'!
initializeWith: clientData .
	clientsCredentialData _ clientData.! !

!methodRemoval: Store #initializeWith:andWith: stamp: 'sc 6/21/2021 16:15:00'!
initializeWith: clientData andWith: aPasswords.
	clientsCredentialData _ clientData.!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 16:16:38' prior: 50881455!
raiseInvalidCredentialsError: aClientId andWith: aPassword
	((clientsCredentialData at: aClientId)  = aPassword ) ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	! !

Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/21/2021 16:17:06'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 16:17:14'!
FAILURE!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:17:18'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:17:18'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:18:27' prior: 50882079 overrides: 16927572!
setUp
	
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	userPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> anotherValidPassword)
	
	
	
	! !

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 16:18:44'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId validPassword clientPasswordData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 16:18:44' prior: 50882256 overrides: 16927572!
setUp
	
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	clientPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> anotherValidPassword)
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:19:19' prior: 50882181!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:19:24' prior: 50882141!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: clientPasswordData .
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:19:28' prior: 50882168!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: clientPasswordData .
	self should: [store createNewCartWith: invalidClientId  and: validPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:19:33' prior: 50882156!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: clientPasswordData .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:19:38' prior: 50882126!
test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword
	|store cartId|
	store _ Store newWith: clientPasswordData .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:19:46'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:19:48'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:19:51'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:19:56'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:19:56'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 16:19:56'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 16:19:56'!
FAILURE!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 16:19:56'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 16:19:56'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 16:19:56'!
FAILURE!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:20:16'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 16:20:17'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 16:20:19'!
FAILURE!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 16:20:19'!
FAILURE!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 16:26:38' prior: 50882225!
raiseInvalidCredentialsError: aClientId andWith: aPassword

	self raiseErrorIfClientisNotinDatabase.
	self raiseErrorIfClientPasswordDoesNotMatch.
	(clientsCredentialData includesKey: aClientId) ifTrue:[
	(clientsCredentialData at: aClientId  = aPassword ) ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	].
	! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 16:27:11' prior: 50882402!
raiseInvalidCredentialsError: aClientId andWith: aPassword

	self raiseErrorIfClientisNotInDatabase: aClientId.
	self raiseErrorIfClientPasswordDoesNotMatch.
	(clientsCredentialData includesKey: aClientId) ifTrue:[
	(clientsCredentialData at: aClientId  = aPassword ) ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	].
	! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 16:27:50' prior: 50882415!
raiseInvalidCredentialsError: aClientId andWith: aPassword

	self raiseErrorIfClientIsNotInDatabase: aClientId.
	self raiseErrorIfClientPasswordDoesNotMatch: aClientId  and: aPassword.
	(clientsCredentialData includesKey: aClientId) ifTrue:[
	(clientsCredentialData at: aClientId  = aPassword ) ifFalse:[
		self error: self class invalidCredentialsErrorMessage]
	].
	! !
!Store methodsFor: 'errorHandling' stamp: 'sc 6/21/2021 16:29:26'!
raiseErrorIfClientIsNotInDatabase: aClientId.
	(clientsCredentialData includesKey: aClientId) ifFalse:[ self error: self class invalidCredentialsErrorMessage]! !
!Store methodsFor: 'errorHandling' stamp: 'sc 6/21/2021 16:29:58'!
 raiseErrorIfClientPasswordDoesNotMatch: aClientId  and: aPassword.

	(clientsCredentialData at: aClientId  = aPassword ) ifFalse:[
		self error: self class invalidCredentialsErrorMessage]! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 16:30:08' prior: 50882429!
raiseInvalidCredentialsError: aClientId andWith: aPassword

	self raiseErrorIfClientIsNotInDatabase: aClientId.
	self raiseErrorIfClientPasswordDoesNotMatch: aClientId  and: aPassword.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:30:17'!
ERROR!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 16:30:17'!
FAILURE!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 16:30:17'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 16:30:17'!
ERROR!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 16:30:17'!
FAILURE!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:30:42'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:31:13'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:31:13'!
ERROR!
!Store methodsFor: 'errorHandling' stamp: 'sc 6/21/2021 16:32:17' prior: 50882451!
raiseErrorIfClientPasswordDoesNotMatch: aClientId  and: aPassword.

	((clientsCredentialData at: aClientId)  = aPassword ) ifFalse:[
		self error: self class invalidCredentialsErrorMessage]! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:32:20'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 16:32:20'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 16:32:20'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 16:32:20'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 16:32:20'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:34:32'!
test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds
	|store cartId|
	store _ Store newWith: clientPasswordData .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:35:01' prior: 50882519!
test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds
	|store cartId anotherCartsId|
	store _ Store newWith: clientPasswordData .
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:36:49' prior: 50882534!
test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds
	|store cartId anotherCartsId|
	store _ Store newWith: clientPasswordData .
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartsId _ store createNewCartWith: validClientId and: validPassword.
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:38:28' prior: 50882541!
test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds
	|store cartId anotherCartsId|
	store _ Store newWith: clientPasswordData .
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartsId _ store createNewCartWith: validClientId and: validPassword.
	self assert: (cartId  ~ anotherCartsId).
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 16:38:34' prior: 50882553!
test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds
	|store cartId anotherCartsId|
	store _ Store newWith: clientPasswordData .
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartsId _ store createNewCartWith: validClientId and: validPassword.
	self assert: (cartId  ~= anotherCartsId).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 16:38:36'!
FAILURE!

Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/21/2021 16:39:12'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 16:39:20' prior: 50882215!
initializeWith: clientData .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 16:39:48' prior: 50881220!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:39:49'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 16:39:49'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 16:39:49'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 16:39:49'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 16:39:49'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 16:39:49'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 16:40:32'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 16:40:32'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 16:40:32'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 16:40:32'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 16:40:32'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 16:40:32'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 16:40:32'!
PASSED!

----SNAPSHOT----(21 June 2021 16:41:29) CuisUniversity-4532.image priorSource: 17506815!

----SNAPSHOT----(21 June 2021 16:41:31) CuisUniversity-4532.image priorSource: 17632087!

----SNAPSHOT----(21 June 2021 16:41:32) CuisUniversity-4532.image priorSource: 17632177!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 17:22:29'!
test06
	|store cartId anotherCartsId|
	store _ Store newWith: clientPasswordData .
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartsId _ store createNewCartWith: validClientId and: validPassword.
	self assert: (cartId  ~= anotherCartsId).
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test06 stamp: 'sc 6/21/2021 17:22:36'!
test06
	|store cartId anotherCartsId|
	store _ Store newWith: clientPasswordData .
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartsId _ store createNewCartWith: validClientId and: validPassword.
	self assert: (cartId  ~= anotherCartsId).
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 17:35:37'!
test06addingElementsToCartIsReflectedWhenListingCart
	|store aCartId aBookIsbn|
	store _ Store newWith: clientPasswordData .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addDenotativeObjectLabelsTo: aCartId  andActionsTo: aBookIsbn  in: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBookIsbn with: 1).
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 17:35:56'!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBookIsbn|
	store _ Store newWith: clientPasswordData .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addDenotativeObjectLabelsTo: aCartId  andActionsTo: aBookIsbn  in: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBookIsbn with: 1).
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test06addingElementsToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 17:35:56'!
test06addingElementsToCartIsReflectedWhenListingCart
	|store aCartId aBookIsbn|
	store _ Store newWith: clientPasswordData .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addDenotativeObjectLabelsTo: aCartId  andActionsTo: aBookIsbn  in: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBookIsbn with: 1).
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 17:38:53' prior: 50882698!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ StoreTestObjectsFactory.
	store _ Store newWith: clientPasswordData .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addDenotativeObjectLabelsTo: aCartId  andActionsTo: aBook  in: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 17:40:17'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId validPassword clientPasswordData objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 17:40:15' prior: 50882281 overrides: 16927572!
setUp
	objectFactory _ StoreTestObjectsFactory new.
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	clientPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> anotherValidPassword)
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 17:40:47' prior: 50882728!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	objectFactory.
	aBook _ StoreTestObjectsFactory.
	store _ Store newWith: clientPasswordData .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addDenotativeObjectLabelsTo: aCartId  andActionsTo: aBook  in: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 17:44:10' prior: 50882770!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 17:44:15'!
ERROR!
!Store methodsFor: 'operations' stamp: 'sc 6/21/2021 17:44:59'!
addToCart: aCart! !
!Store methodsFor: 'operations' stamp: 'sc 6/21/2021 17:45:23'!
addToCart: aCartId  aBook: aBook  withAmount: anAmount.! !

!methodRemoval: Store #addToCart: stamp: 'sc 6/21/2021 17:45:26'!
addToCart: aCart!
!Store methodsFor: 'operations' stamp: 'sc 6/21/2021 17:45:40' prior: 50882807!
addToCart: aCartId  aBook: aBook  withAmount: anAmount.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/21/2021 17:47:19'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 17:47:27' prior: 50882602!
createNewCartWith: aClientId and: aPassword 
	| caca |
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	cart _ Cart newFrom: caca.
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/21/2021 17:48:32'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 17:48:31' prior: 50882826!
createNewCartWith: aClientId and: aPassword 
	
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	cart _ Cart initializeAcceptingItemsOf: catalog.
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 17:48:46' prior: 50882843!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	cart _ Cart initializeAcceptingItemsOf: catalog.
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 17:50:08' prior: 50880930!
listCart: cartId
	^ cart list.
	! !
!Cart methodsFor: 'queries' stamp: 'sc 6/21/2021 17:55:08'!
list
    ^ OrderedCollection with: (items at: 1)	with: 1.! !
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 17:56:36'!
newWith: clientsData withCatalog: aCatalog  
	^self new initializeWith: clientsData.! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 17:56:36' prior: 50882332!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 17:56:36' prior: 50882319!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	self should: [store createNewCartWith: invalidClientId  and: validPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 17:56:36' prior: 50882294!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 17:56:36' prior: 50882786!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 17:56:36' prior: 50882566!
test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds
	|store cartId anotherCartsId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartsId _ store createNewCartWith: validClientId and: validPassword.
	self assert: (cartId  ~= anotherCartsId).
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 17:56:36' prior: 50882343!
test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 17:56:36' prior: 50882305!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!methodRemoval: Store class #newWith: stamp: 'sc 6/21/2021 17:56:36'!
newWith: clientsData 
	^self new initializeWith: clientsData.!
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 17:57:36'!
initializeWith: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.! !
!Store class methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 17:57:37' prior: 50882871!
newWith: clientsData withCatalog: aCatalog  
	^self new initializeWith: clientsData withCatalog: catalog.! !

!methodRemoval: Store #initializeWith: stamp: 'sc 6/21/2021 17:57:37'!
initializeWith: clientData .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.!
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 17:58:00'!
initializeWithClientDatabase: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.! !
!Store class methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 17:58:00' prior: 50882987!
newWith: clientsData withCatalog: aCatalog  
	^self new initializeWithClientDatabase: clientsData withCatalog: catalog.! !

!methodRemoval: Store #initializeWith:withCatalog: stamp: 'sc 6/21/2021 17:58:00'!
initializeWith: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.!
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 17:58:18' prior: 50882998!
initializeWithClientDatabase: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.! !

!classDefinition: #XXXX category: 'TusLibros' stamp: 'sc 6/21/2021 17:59:12'!
TestCase subclass: #XXXX
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId validPassword clientPasswordData objectFactory catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 17:59:10' prior: 50882755 overrides: 16927572!
setUp
	objectFactory _ StoreTestObjectsFactory new.
	catalog _ objectFactory defaultCatalog. 
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	clientPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> anotherValidPassword)
	
	
	
	! !

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 17:59:21'!
ERROR!
!Store class methodsFor: 'instance creation' stamp: 'sc 6/21/2021 18:00:35' prior: 50883005!
newWith: clientsData withCatalog: aCatalog  
	^self new initializeWithClientDatabase: clientsData withCatalog: aCatalog.! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 18:00:49' prior: 50882853!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	cart _ Cart acceptingItemsOf: catalog.
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:01:09'!
ERROR!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 18:01:09'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:01:09'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:01:09'!
ERROR!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 18:01:09'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 18:01:09'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:01:10'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:01:19'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:01:19'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'sc 6/21/2021 18:02:27' prior: 50882866!
list
    items isEmpty ifTrue:[^ OrderedCollection new].
    ^ OrderedCollection with: (items at: 1)	with: 1.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/21/2021 18:02:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/21/2021 18:02:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/21/2021 18:02:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/21/2021 18:02:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/21/2021 18:02:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/21/2021 18:02:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/21/2021 18:02:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/21/2021 18:02:29'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:02:33'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:02:33'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 18:02:33'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:02:33'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:02:33'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 18:02:33'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 18:02:33'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:02:34'!
FAILURE!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:02:34'!
FAILURE!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:02:38'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 18:02:41'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:02:43'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:02:45'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:02:47'!
FAILURE!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:02:47'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/21/2021 18:04:14' prior: 50882814!
addToCart: aCartId  aBook: aBook  withAmount: anAmount.
	cart add: aBook of: anAmount .! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:04:16'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 18:04:16'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:04:16'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:04:16'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 18:04:16'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 18:04:16'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:04:16'!
ERROR!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:04:16'!
ERROR!
!Store methodsFor: 'operations' stamp: 'sc 6/21/2021 18:05:02' prior: 50883184!
addToCart: aCartId  aBook: aBook  withAmount: anAmount.
	cart add: anAmount of: aBook.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:05:03'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 18:05:03'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:05:04'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:05:04'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 18:05:04'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 18:05:04'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:05:04'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:06:31'!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:08:42' prior: 50883246!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1 with: anotherBook with: 1).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:08:42'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'sc 6/21/2021 18:09:58'!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:10:13' prior: 50883264!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1 with: anotherBook with: 1).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:10:16'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'sc 6/21/2021 18:12:51' prior: 50880276!
defaultCatalog
	|catalog|
	
	catalog _  Dictionary new.
	catalog 	at: self itemSellByTheStore put: self itemSellByTheStorePrice.
	catalog at: self anotherItemSellByTheStore  put: self anotherItemSellByTheStorePrice.
	^catalog.
	
	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'sc 6/21/2021 18:13:08'!
anotherItemSellByTheStorePrice
	
	^11! !

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:13:19'!
FAILURE!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:13:28'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:13:32'!
FAILURE!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:13:32'!
FAILURE!

aBag _ Bag new.!

aBag add:1!

aBag add: 1!

aBag!
!Cart methodsFor: 'queries' stamp: 'sc 6/21/2021 18:21:26' prior: 50883103!
list
    |listedElements itemSet|
    listedElements _ OrderedCollection new.
    itemSet _ items asSet.
    itemSet do: [:anItem| listedElements add: anItem.
			 listedElements add: (items occurrencesOf: anItem)].
    ^listedElements.! !
!Cart methodsFor: 'queries' stamp: 'sc 6/21/2021 18:23:56' prior: 50883348!
list
    |itemBag|
    itemBag _ items asBag.
    ^ itemBag sortedElements.
  ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/21/2021 18:24:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/21/2021 18:24:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/21/2021 18:24:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/21/2021 18:24:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/21/2021 18:24:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/21/2021 18:24:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/21/2021 18:24:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/21/2021 18:24:00'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:24:15'!
FAILURE!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:27:11'!
FAILURE!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:27:11'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:28:06' prior: 50882915!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (SortedCollection with: aBook -> 1).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:28:07'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:28:07'!
FAILURE!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 18:28:07'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:28:07'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:28:07'!
FAILURE!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 18:28:07'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 18:28:07'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:28:07'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:28:08'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:28:27' prior: 50882903!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: SortedCollection new.
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:28:28'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:28:28'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 18:28:29'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:28:29'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:28:29'!
FAILURE!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 18:28:29'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 18:28:29'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:28:29'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:28:29'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:28:35' prior: 50882877!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (SortedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:28:36'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:28:36'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 18:28:36'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:28:36'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:28:36'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 18:28:37'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 18:28:37'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:28:37'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:28:37'!
FAILURE!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:28:37'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:28:52' prior: 50883487!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (OrderedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:28:52'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:29:00' prior: 50883533!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (SortedCollection new) equals: (store listCart: cartId).
	
	
	
	
	! !

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:29:02'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 18:29:04'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 18:29:07'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:29:09'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:29:10'!
FAILURE!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:29:10'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:29:34' prior: 50883293!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (SortedCollection with: aBook -> 1 with: anotherBook -> 1).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:29:35'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:29:35'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 18:29:35'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:29:35'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:29:35'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 18:29:35'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 18:29:35'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:29:35'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:29:35'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:32:27'!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (SortedCollection with: aBook -> 1).
	self assert: (store listCart: anotherCartId) equals: (SortedCollection with: aBook -> 1).
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:33:09' prior: 50883632!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (SortedCollection with: aBook -> 1).
	self assert: (store listCart: anotherCartId) equals: (SortedCollection with: aBook -> 1).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/21/2021 18:33:11'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:35:07' prior: 50883655!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 10.
	self assert: (store listCart: aCartId) equals: (SortedCollection with: aBook -> 1).
	self assert: (store listCart: anotherCartId) equals: (SortedCollection with: aBook -> 1).
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:35:11' prior: 50883681!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 10.
	self assert: (store listCart: aCartId) equals: (SortedCollection with: aBook -> 1).
	self assert: (store listCart: anotherCartId) equals: (SortedCollection with: aBook -> 10).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/21/2021 18:35:12'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/21/2021 18:39:10'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 18:39:10' prior: 50883217!
addToCart: aCartId  aBook: aBook  withAmount: anAmount.
	carts add: anAmount of: aBook.! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 18:39:11' prior: 50882863!
listCart: cartId
	^ carts list.
	! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/21/2021 18:39:11' prior: 50883064!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	carts _ Cart acceptingItemsOf: catalog.
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !
!Store methodsFor: 'initialization' stamp: 'sc 6/21/2021 18:39:27' prior: 50883018!
initializeWithClientDatabase: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	carts _ OrderedCollection new.! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/21/2021 18:40:38' prior: 50883748!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	carts add: (Cart acceptingItemsOf: catalog).
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !
!Store methodsFor: 'operations' stamp: 'sc 6/21/2021 18:41:06' prior: 50883744!
listCart: cartId
	^ carts at: cartId list.
	! !

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/21/2021 18:41:12'!
ERROR!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:41:19'!
ERROR!
!Store methodsFor: 'operations' stamp: 'sc 6/21/2021 18:42:35' prior: 50883738!
addToCart: aCartId  aBook: aBook  withAmount: anAmount.
	(carts at: aCartId) add: anAmount of: aBook.! !

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:42:43'!
ERROR!
!Store methodsFor: 'operations' stamp: 'sc 6/21/2021 18:43:19' prior: 50883777!
listCart: cartId
	^ (carts at: cartId list).
	! !
!Store methodsFor: 'operations' stamp: 'sc 6/21/2021 18:43:49' prior: 50883798!
listCart: cartId
	^ (carts at: cartId) list.
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 18:43:51'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 18:43:51'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 18:43:52'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 18:43:52'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 18:43:52'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 18:43:52'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:43:52'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 18:43:52'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/21/2021 18:43:52'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/21/2021 18:53:10'!
test10checkingOutCartsWithValidDataProducesSuccesfulOperation
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.

	store addToCart: aCartId  aBook: aBook  withAmount: 1.

	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test10checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/21/2021 19:08:46'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/21/2021 19:08:46'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/21/2021 19:08:46'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/21/2021 19:08:46'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/21/2021 19:08:46'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/21/2021 19:08:46'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/21/2021 19:08:46'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 19:08:46'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/21/2021 19:08:46'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/21/2021 19:08:46'!
PASSED!

!testRun: #XXXX #test10checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/21/2021 19:08:47'!
PASSED!

----SNAPSHOT----(21 June 2021 19:09:45) CuisUniversity-4532.image priorSource: 17632267!

----SNAPSHOT----(21 June 2021 19:09:51) CuisUniversity-4532.image priorSource: 17671580!

----SNAPSHOT----(21 June 2021 19:12:47) CuisUniversity-4532.image priorSource: 17671670!

----SNAPSHOT----(21 June 2021 19:13:54) CuisUniversity-4532.image priorSource: 17671760!

----STARTUP---- (23 June 2021 16:42:35) as C:\Users\Santiago\Desktop\Uba\Inge\Programa\windows64\CuisUniversity-4532.image!


!testRun: #XXXX #test10checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 16:43:11'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/23/2021 16:43:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/23/2021 16:43:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/23/2021 16:43:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/23/2021 16:43:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/23/2021 16:43:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/23/2021 16:43:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/23/2021 16:43:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/23/2021 16:43:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'sc 6/23/2021 16:43:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test10checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 16:43:12'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 16:46:33'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 16:46:33'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 16:46:33'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 16:46:33'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 16:46:33'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 16:46:33'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 16:46:33'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 16:46:33'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 16:46:33'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 16:46:33'!
PASSED!

!testRun: #XXXX #test10checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 16:46:33'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 16:58:20'!
test11checkingOutCartsWithValidDataProducesSuccesfulOperation
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.

	store addToCart: aCartId  aBook: aBook  withAmount: 1.

	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test11checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test10checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!testRun: #XXXX #test11checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 16:58:20'!
PASSED!

!methodRemoval: XXXX #test11checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 16:58:29'!
test11checkingOutCartsWithValidDataProducesSuccesfulOperation
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.

	store addToCart: aCartId  aBook: aBook  withAmount: 1.

	
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 16:58:42'!
test9checkingOutCartsWithValidDataProducesSuccesfulOperation
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.

	store addToCart: aCartId  aBook: aBook  withAmount: 1.

	
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test10checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 16:58:42'!
test10checkingOutCartsWithValidDataProducesSuccesfulOperation
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.

	store addToCart: aCartId  aBook: aBook  withAmount: 1.

	
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 16:58:48'!
test09checkingOutCartsWithValidDataProducesSuccesfulOperation
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.

	store addToCart: aCartId  aBook: aBook  withAmount: 1.

	
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test9checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 16:58:48'!
test9checkingOutCartsWithValidDataProducesSuccesfulOperation
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.

	store addToCart: aCartId  aBook: aBook  withAmount: 1.

	
	
	
	
	
	
	
	!

----STARTUP---- (23 June 2021 16:59:05) as C:\Users\Santiago\Desktop\Uba\Inge\Programa\windows64\CuisUniversity-4532.image!

!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 16:59:47'!
test09checkingOutCartWithValidDataProducesSuccesfulOperation
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.

	store addToCart: aCartId  aBook: aBook  withAmount: 1.

	
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test10checkingOutCartsWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 16:59:47'!
test10checkingOutCartsWithValidDataProducesSuccesfulOperation
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.

	store addToCart: aCartId  aBook: aBook  withAmount: 1.

	
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:00:17' prior: 50884147!
test09checkingOutCartWithValidDataProducesSuccesfulOperation
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.

	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:02:04' prior: 50884175!
test09checkingOutCartWithValidDataProducesSuccesfulOperation
	|store aCartId aBook card|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	card _ objectFactory.
	store checkOutCart: aCartId withCard.

	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:09:00' prior: 50884188!
test09checkingOutCartWithValidDataProducesSuccesfulOperation
	|store aCartId aBook card transactionId|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	card _ objectFactory notExpiredCreditCard.
	transactionId _ store checkOutCart: aCartId withCard: card.! !

!methodRemoval: XXXX #test09checkingOutCartWithValidDataProducesSuccesfulOperation stamp: 'sc 6/23/2021 17:15:52'!
test09checkingOutCartWithValidDataProducesSuccesfulOperation
	|store aCartId aBook card transactionId|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	card _ objectFactory notExpiredCreditCard.
	transactionId _ store checkOutCart: aCartId withCard: card.!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:25:32'!
test09listingPurchasingOfClientWithoutPurchasesReturnsEmptyCollection
	|store aCartId aBook clientPurchases|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId _ store createNewCartWith: validClientId and: validPassword.
	clientPurchases _ store listPurchasesOf: validClientId withPassword: clientPasswordData.
	self assert:  clientPurchases  isEmpty.
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:26:10' prior: 50884238!
test09listingPurchasingOfClientWithoutPurchasesReturnsEmptyCollection
	|store clientPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store createNewCartWith: validClientId and: validPassword.
	clientPurchases _ store listPurchasesOf: validClientId withPassword: clientPasswordData.
	self assert:  clientPurchases  isEmpty.
	
	
	
	
	
	
	! !

!testRun: #XXXX #test09listingPurchasingOfClientWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:26:16'!
ERROR!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 17:26:31'!
listPurchasesOf: aString withPassword: aDictionary 
	self shouldBeImplemented.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 17:26:44' prior: 50884272!
listPurchasesOf: aString withPassword: aDictionary 
	^OrderedCollection  new.! !

!testRun: #XXXX #test09listingPurchasingOfClientWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:26:46'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 17:26:46'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 17:26:46'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 17:26:46'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 17:26:47'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 17:26:47'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 17:26:47'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:26:47'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:26:47'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 17:26:47'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:26:47'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:27:54'!
test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection
	|store clientPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store createNewCartWith: validClientId and: validPassword.
	clientPurchases _ store listPurchasesOf: validClientId withPassword: clientPasswordData.
	self assert:  clientPurchases  isEmpty.
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test09listingPurchasingOfClientWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:27:54'!
test09listingPurchasingOfClientWithoutPurchasesReturnsEmptyCollection
	|store clientPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store createNewCartWith: validClientId and: validPassword.
	clientPurchases _ store listPurchasesOf: validClientId withPassword: clientPasswordData.
	self assert:  clientPurchases  isEmpty.
	
	
	
	
	
	
	!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:28:29'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 17:28:29'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 17:28:29'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 17:28:29'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 17:28:29'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 17:28:29'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 17:28:29'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:28:29'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:28:29'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 17:28:29'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:28:29'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:30:30'!
test10listingPurchasingOfInvalidClientRaisesError
	|store clientPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	clientPurchases _ store listPurchasesOf: invalidClientId withPassword: 'irrelevant password'.
	self assert:  clientPurchases  isEmpty.
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:33:16' prior: 50884390!
test10listingPurchasingOfInvalidClientRaisesError
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self should: [store listPurchasesOf: invalidClientId withPassword: 'irrelevant password']
	raise: Error
	withExceptionDo: [:anError| self assert: anError messageText equals: Store invalidCredentialsErrorMessage] 
	
	
	
	
	
	
	! !

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:33:27'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 17:34:43'!
listPurchasesOf: aString withPassword: aDictionary
	raiseErrorIfClientIsNotInDatabase: aClientId.
	^OrderedCollection  new.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 17:34:45'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 17:34:45'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 17:34:45'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 17:34:45'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 17:34:45'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 17:34:45'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:34:45'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:34:45'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 17:34:45'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:34:45'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:34:45'!
FAILURE!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:34:45'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:35:21'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:35:21'!
FAILURE!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:35:21'!
FAILURE!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:35:26'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:35:30'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:35:33'!
FAILURE!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:35:33'!
FAILURE!

!methodRemoval: Store #listPurchasesOf:withPassword:raiseErrorIfClientIsNotInDatabase: stamp: 'sc 6/23/2021 17:36:23'!
listPurchasesOf: aString withPassword: aDictionary
	raiseErrorIfClientIsNotInDatabase: aClientId.
	^OrderedCollection  new.!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 17:37:04' prior: 50884278!
listPurchasesOf: aClient withPassword: aPassword 
	self raiseErrorIfClientIsNotInDatabase: aClient.
	^OrderedCollection  new.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 17:37:05'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 17:37:05'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 17:37:05'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 17:37:05'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 17:37:05'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 17:37:06'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:37:06'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:37:06'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 17:37:06'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:37:06'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:37:06'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:38:27'!
test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self should: [store listPurchasesOf: validClientId withPassword: validPassword, 'garbage meant to ruin password']
	raise: Error
	withExceptionDo: [:anError| self assert: anError messageText equals: Store invalidCredentialsErrorMessage] 
	
	
	
	
	
	
	! !

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 17:38:31'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 17:39:07' prior: 50884535!
listPurchasesOf: aClientId withPassword: aPassword 
	self raiseErrorIfClientPasswordDoesNotMatch: aClientId  and: aPassword.
	^OrderedCollection  new.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 17:39:37' prior: 50884598!
listPurchasesOf: aClientId withPassword: aPassword 
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	^OrderedCollection  new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 17:39:43'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 17:39:44'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 17:39:44'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 17:39:44'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 17:39:44'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 17:39:44'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:39:44'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:39:44'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 17:39:44'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:39:44'!
ERROR!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:39:44'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 17:39:44'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:39:44'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 17:39:53'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 17:39:53'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 17:39:53'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 17:39:53'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 17:39:53'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 17:39:54'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:39:54'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:39:54'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 17:39:54'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:39:54'!
ERROR!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:39:54'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 17:39:54'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:39:54'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:40:17' prior: 50884321!
test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection
	|store clientPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store createNewCartWith: validClientId and: validPassword.
	clientPurchases _ store listPurchasesOf: validClientId withPassword: validPassword.
	self assert:  clientPurchases  isEmpty.
	
	
	
	
	
	
	! !

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 17:40:19'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 17:40:23'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 17:40:24'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:40:24'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 17:40:24'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 17:40:24'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 17:40:24'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 17:40:24'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 17:40:24'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:41:26'!
test12listingPurchasingOfClientWithASinglePurchaseReturnsIt
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self should: [store listPurchasesOf: validClientId withPassword: validPassword, 'garbage meant to ruin password']
	raise: Error
	withExceptionDo: [:anError| self assert: anError messageText equals: Store invalidCredentialsErrorMessage] 
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:41:44'!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self should: [store listPurchasesOf: validClientId withPassword: validPassword, 'garbage meant to ruin password']
	raise: Error
	withExceptionDo: [:anError| self assert: anError messageText equals: Store invalidCredentialsErrorMessage] 
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test12listingPurchasingOfClientWithASinglePurchaseReturnsIt stamp: 'sc 6/23/2021 17:41:51'!
test12listingPurchasingOfClientWithASinglePurchaseReturnsIt
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self should: [store listPurchasesOf: validClientId withPassword: validPassword, 'garbage meant to ruin password']
	raise: Error
	withExceptionDo: [:anError| self assert: anError messageText equals: Store invalidCredentialsErrorMessage] 
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:44:36' prior: 50884917!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cart aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store listPurchasesOf: validClientId withPassword: validPassword.
	aBook _ objectFactory itemSellByTheStore.
	cart _ Cart newFrom: catalog.
	
	store checkOut
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:49:51' prior: 50884948!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store listPurchasesOf: validClientId withPassword: validPassword.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	aCreditCard _ objectFactory notExpiredCreditCard.
	store checkOut:cartId  withCard: aCreditCard.
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:52:31' prior: 50884961!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store listPurchasesOf: validClientId withPassword: validPassword.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	aCreditCard _ objectFactory notExpiredCreditCard.
	store checkOut:cartId  withCard: aCreditCard.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: objectFactory).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 17:54:23' prior: 50884980!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store listPurchasesOf: validClientId withPassword: validPassword.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	aCreditCard _ objectFactory notExpiredCreditCard.
	store checkOut:cartId  withCard: aCreditCard.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: (catalog at: aBook) ).
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 17:54:26'!
ERROR!
!Object methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 17:54:35'!
checkOut: aSmallInteger withCard: aCreditCard 
	self shouldBeImplemented.! !

!methodRemoval: Object #checkOut:withCard: stamp: 'sc 6/23/2021 17:55:32'!
checkOut: aSmallInteger withCard: aCreditCard 
	self shouldBeImplemented.!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 17:55:40'!
ERROR!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 17:55:55'!
checkOut: aSmallInteger withCard: aCreditCard 
	self shouldBeImplemented.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/23/2021 18:00:15'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned carts catalog purchasesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:00:24' prior: 50885044!
checkOut: aCartId withCard: aCreditCard
	purchasesList _ self listCart: aCartId.
	purchasesList add: (carts at: aCartId) total.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:00:32'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:00:32'!
ERROR!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:00:32'!
ERROR!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:00:41'!
ERROR!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:02:07'!
ERROR!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:04:22' prior: 50885058!
checkOut: aCartId withCard: aCreditCard
	purchasesList _ self listCart: aCartId.
	purchasesList  _ purchasesList asOrderedCollection.
	purchasesList add: (carts at: aCartId) total.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:04:24'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:04:24'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:04:24'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:04:24'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:04:24'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:04:24'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:04:24'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:04:24'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:04:25'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:04:25'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:04:25'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:04:25'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:04:25'!
FAILURE!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:04:25'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:05:10' prior: 50884606!
listPurchasesOf: aClientId withPassword: aPassword 
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	^ purchasesList .! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:05:32'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:05:32'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:05:32'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:05:33'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:05:33'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:05:33'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:05:33'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:05:33'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:05:33'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:05:33'!
ERROR!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:05:33'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:05:33'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:05:33'!
FAILURE!
!Store methodsFor: 'initialization' stamp: 'sc 6/23/2021 18:06:19' prior: 50883758!
initializeWithClientDatabase: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	carts _ OrderedCollection new.
	purchasesList _ OrderedCollection new.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:06:20'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:06:21'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:06:21'!
FAILURE!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:06:21'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'sc 6/23/2021 18:08:47' prior: 50883358!
list
    |itemSet|
    itemSet _ items asBag.
    ^ itemSet sortedElements.
  ! !
!Cart methodsFor: 'queries' stamp: 'sc 6/23/2021 18:10:59' prior: 50885291!
list
    |itemSet list|
    itemSet _ items asSet.
    list  _ OrderedCollection new.
    itemSet do:[:anItem| list add: anItem;add: (items occurrencesOf: anItem)]
  ! !
!Cart methodsFor: 'queries' stamp: 'sc 6/23/2021 18:11:20' prior: 50885296!
list
    |itemSet list|
    itemSet _ items asSet.
    list  _ OrderedCollection new.
    itemSet do:[:anItem| list add: anItem;add: (items occurrencesOf: anItem)].
    ^list
    
  ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/23/2021 18:11:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/23/2021 18:11:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/23/2021 18:11:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/23/2021 18:11:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/23/2021 18:11:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/23/2021 18:11:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/23/2021 18:11:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/23/2021 18:11:22'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/23/2021 18:11:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:11:25'!
FAILURE!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:11:25'!
FAILURE!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:11:25'!
FAILURE!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:11:25'!
FAILURE!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:11:25'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:11:25'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:11:25'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:11:41' prior: 50883445!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) equals: OrderedCollection new.
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:11:53' prior: 50885429!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) isEmpty.
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:12:24' prior: 50883548!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (store listCart: cartId) isEmpty .
	
	
	
	
	! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:12:27'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:12:29'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:12:43' prior: 50883399!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:12:45'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:13:04' prior: 50883581!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1 with: anotherBook with: 1).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:13:06'!
FAILURE!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:13:10'!
FAILURE!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:13:10'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:13:38' prior: 50885489!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: anotherBook with: 1 with: aBook with: 1).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:13:40'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:13:40'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:13:40'!
FAILURE!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:13:46'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:14:12' prior: 50883704!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 10.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1).
	self assert: (store listCart: anotherCartId) equals: (OrderedCollection with: aBook with: 10).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:14:14'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:14:17'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:14:18'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:14:18'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:21:00' prior: 50885521!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ Store newWith: clientPasswordData withCatalog: catalog .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1 with: anotherBook with: 1).	
	
	
	
	
	! !

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:21:01'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'sc 6/23/2021 18:23:57' prior: 50885304!
list
    |listedElements|
    listedElements _ OrderedCollection new.
    items do: [:aBook| self addIfFirstAparition: aBook into: listedElements].
    ^listedElements.
  ! !
!Cart methodsFor: 'queries' stamp: 'sc 6/23/2021 18:24:26' prior: 50885695!
list
    |listedElements|
    listedElements _ OrderedCollection new.
    items do: [:aBook| self addWithOcurrencesIfFirstAparition: aBook into: listedElements].
    ^listedElements.
  ! !
!Cart methodsFor: 'private' stamp: 'sc 6/23/2021 18:25:26'!
addWithOcurrencesIfFirstAparition: aBook into: listedElements
	(listedElements includes: aBook) ifFalse:
                        [listedElements add: aBook. 
                        listedElements add: (items occurrencesOf: aBook) ].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'sc 6/23/2021 18:25:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:25:29'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:25:44'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:25:44'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:25:44'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:25:44'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:25:44'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:25:44'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:25:45'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:25:45'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:25:45'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:25:45'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:25:45'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:25:45'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:25:45'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:25:45'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:33:26'!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store listPurchasesOf: validClientId withPassword: validPassword.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  aBook withAmount: 1.
	aCreditCard _ objectFactory notExpiredCreditCard.
	store checkOut:cartId  withCard: aCreditCard.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: (catalog at: aBook) ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:37:21' prior: 50885860!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store listPurchasesOf: validClientId withPassword: validPassword.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  aBook withAmount: 1.
	aCreditCard _ objectFactory notExpiredCreditCard.
	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (OrderedCollection  ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:37:35' prior: 50885888!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store listPurchasesOf: validClientId withPassword: validPassword.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  aBook withAmount: 1.
	aCreditCard _ objectFactory notExpiredCreditCard.
	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:37:38'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/23/2021 18:39:31'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned carts catalog purchasesList total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:39:29' prior: 50885121!
checkOut: aCartId withCard: aCreditCard
	purchasesList _ self listCart: aCartId.
	purchasesList  _ purchasesList asOrderedCollection.
	total _ total + (carts at: aCartId) total.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:39:52' prior: 50883803!
listCart: cartId
	^ (carts at: cartId) list.
	! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:40:21' prior: 50885179!
listPurchasesOf: aClientId withPassword: aPassword 
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	
	^ purchasesList add: total .! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:41:34' prior: 50885979!
listPurchasesOf: aClientId withPassword: aPassword 
	|itemsAndTotal|
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	itemsAndTotal  _ purchasesList.
	^ itemsAndTotal add: total .! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:41:36'!
ERROR!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:41:36'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:41:36'!
ERROR!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:41:36'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:42:49' prior: 50884751!
test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection
	|store clientPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store createNewCartWith: validClientId and: validPassword.
	clientPurchases _ store listPurchasesOf: validClientId withPassword: validPassword.
	self assert:  clientPurchases  equals: (OrderedCollection with: 0).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:42:51'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:42:51'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:43:05'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:43:05'!
FAILURE!
!Store methodsFor: 'initialization' stamp: 'sc 6/23/2021 18:43:29' prior: 50885232!
initializeWithClientDatabase: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	total _ 0.
	catalog _ aCatalog.
	carts _ OrderedCollection new.
	purchasesList _ OrderedCollection new.! !

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:43:34'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:43:34'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:44:28'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:44:29'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:44:34'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:44:34'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:46:09' prior: 50885987!
listPurchasesOf: aClientId withPassword: aPassword 
	|itemsAndTotal|
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	itemsAndTotal  _ purchasesList.
	^ (itemsAndTotal add: total) .! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:46:34' prior: 50886119!
listPurchasesOf: aClientId withPassword: aPassword 
	|itemsAndTotal|
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	itemsAndTotal  _ purchasesList.
	^ itemsAndTotal add: total; yourself .! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:46:35'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:46:35'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:46:36'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:46:36'!
FAILURE!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:46:36'!
FAILURE!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:46:42'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:46:44'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:46:46'!
FAILURE!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:46:46'!
FAILURE!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:47:04'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:47:31' prior: 50885920!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	store listPurchasesOf: validClientId withPassword: validPassword.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  aBook withAmount: 1.
	aCreditCard _ objectFactory notExpiredCreditCard.
	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:47:31'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:48:51' prior: 50885965!
checkOut: aCartId withCard: aCreditCard
	purchasesList _ self listCart: aCartId.
	purchasesList  addAll: purchasesList asOrderedCollection.
	total _ total + (carts at: aCartId) total.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:49:00' prior: 50886248!
checkOut: aCartId withCard: aCreditCard
	purchasesList _ self listCart: aCartId.
	purchasesList  addAll: purchasesList.
	total _ total + (carts at: aCartId) total.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:49:01'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:49:02'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:49:02'!
FAILURE!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:49:02'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:49:55' prior: 50886257!
checkOut: aCartId withCard: aCreditCard
	purchasesList addAll: (self listCart: aCartId).
	total _ total + (carts at: aCartId) total.! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:49:57'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:49:57'!
FAILURE!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:49:57'!
FAILURE!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:50:00'!
FAILURE!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:50:00'!
FAILURE!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:50:48'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:52:26' prior: 50885004!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	aCreditCard _ objectFactory notExpiredCreditCard.
	store checkOut:cartId  withCard: aCreditCard.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: (catalog at: aBook) ).
	
	
	
	
	
	
	
	! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 18:53:52' prior: 50886128!
listPurchasesOf: aClientId withPassword: aPassword 
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	^ OrderedCollection new addAll: purchasesList; add: total; yourself .
! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:53:53'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:53:53'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:53:53'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:53:53'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:53:53'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:53:53'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:53:53'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:53:54'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:53:54'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:53:54'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:53:54'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:53:54'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:53:54'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:53:54'!
FAILURE!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:53:54'!
FAILURE!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:55:51'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:56:03' prior: 50886211!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  aBook withAmount: 1.
	aCreditCard _ objectFactory notExpiredCreditCard.
	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:56:04'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:56:19' prior: 50886471!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  anotherBook withAmount: 1.
	aCreditCard _ objectFactory notExpiredCreditCard.
	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:56:47' prior: 50886505!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  anotherBook withAmount: 1.
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:57:18'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:57:39'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:57:39'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:58:00' prior: 50886383!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut:cartId  withCard: aCreditCard.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: (catalog at: aBook) ).
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:58:01'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 18:58:01'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 18:58:01'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 18:58:02'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 18:58:02'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 18:59:47'!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  anotherBook withAmount: 1.
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:00:22' prior: 50886747!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  anotherBook withAmount: 1.
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:00:25' prior: 50886780!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  anotherBook withAmount: 1.
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:00:57' prior: 50886813!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:01:26' prior: 50886846!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	
	
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:01:47' prior: 50886880!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:01:52' prior: 50886535!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  anotherBook withAmount: 1.
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt stamp: 'sc 6/23/2021 19:01:57'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:02:45' prior: 50886914!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:02:51' prior: 50886991!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:03:00' prior: 50887037!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases).
	
	
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:03:20' prior: 50887083!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases).
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 19:03:31'!
PASSED!

!testRun: #XXXX #test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt stamp: 'sc 6/23/2021 19:03:31'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:05:00'!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:06:42' prior: 50887221!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases).
	
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt stamp: 'sc 6/23/2021 19:06:54'!
test14listingPurchasingOfClientWithMultiplePurchasesInTwoCartsContainsIt
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases).
	
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:09:14' prior: 50887256!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:09:24' prior: 50887328!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword )
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:09:30' prior: 50887367!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:09:44' prior: 50887406!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 19:09:53' prior: 50887445!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 19:09:57'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 19:18:35' prior: 50886405!
listPurchasesOf: aClientId withPassword: aPassword 
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	^ OrderedCollection new addAll: purchasesList; add: total; yourself.
! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 19:19:35' prior: 50887524!
listPurchasesOf: aClientId withPassword: aPassword 
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	^ OrderedCollection new addAll: purchasesList; add: total; yourself.
! !

----SNAPSHOT----(23 June 2021 19:24:31) CuisUniversity-4532.image priorSource: 17671850!

----SNAPSHOT----(23 June 2021 19:24:34) CuisUniversity-4532.image priorSource: 17788512!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 19:42:08' prior: 50886315!
checkOut: aCartId withCard: aCreditCard
	self registerPositionChange: aCartId.
	purchasesList addAll: (self listCart: aCartId).
	total _ total + (carts at: aCartId) total.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 19:42:12' prior: 50887548!
checkOut: aCartId withCard: aCreditCard
	self registerPurchase: aCartId.
	purchasesList addAll: (self listCart: aCartId).
	total _ total + (carts at: aCartId) total.! !
!Store methodsFor: 'private' stamp: 'sc 6/23/2021 19:43:49'!
registerPurchase:aCartId.! !
!Store methodsFor: 'private' stamp: 'sc 6/23/2021 19:43:50' prior: 50887564!
registerPurchase:aCartId! !
!Store methodsFor: 'private' stamp: 'sc 6/23/2021 19:45:10' prior: 50887568!
registerPurchase:aCartId
	|userId|
	! !
!Store methodsFor: 'private' stamp: 'sc 6/23/2021 19:48:41' prior: 50887572!
registerPurchase:aCartId
	"|userId|
	userId _ carts at: aCartId user.
	(purchasesList at: userId) addAll: (self listCart: aCartId).
	^(total at: userId) := (total at: userId) + (carts at: aCartId) total."
	! !
!Store methodsFor: 'private' stamp: 'sc 6/23/2021 20:34:03' prior: 50887576!
registerPurchase:aCartId
	"|userId|
	userId _ carts at: aCartId user.
	(purchasesList at: userId) addAll: (self listCart: aCartId).
	^(total at: userId) := (total at: userId) + (carts at: aCartId) total."
	! !
!Store methodsFor: 'private' stamp: 'sc 6/23/2021 20:35:56' prior: 50887585!
registerPurchase:aCartId
	|userId|
	userId _ carts at: aCartId registerPurchaseOn: self.
	"(purchasesList at: userId) addAll: (self listCart: aCartId).
	^(total at: userId) := (total at: userId) + (carts at: aCartId) total."
	! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'sc 6/23/2021 20:38:48'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'queries' stamp: 'sc 6/23/2021 20:38:44'!
registerPurchaseOn: aStore
	aStore addTotal: self total fromUser: user. 
	aStore addPurchase: self list fromUser: user.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 20:46:01'!
addPurchase:aPurchaseList fromUser: aUserId
	purchasesList at: aUserId ifAbsent:[purchasesList at: aUserId put: OrderedCollection new].
	(purchasesList at: aUserId) addAll:  aPurchaseList.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 20:47:01' prior: 50887616!
addPurchase:aPurchaseList fromUser: aUserId
	(purchasesList includesKey: aUserId) ifFalse:[purchasesList at: aUserId put: OrderedCollection new].
	(purchasesList at: aUserId) addAll:  aPurchaseList .! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 20:47:50'!
addTotal:aTotal fromUser: aUserId
	(total includesKey: aUserId) ifFalse:[total at: aUserId put: 0].
	(total at: aUserId) add:  aTotal.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 20:47:59' prior: 50887634!
addTotal:aTotal fromUser: aUserId
	(total includesKey: aUserId) ifFalse:[total at: aUserId put: 0].
	(total at: aUserId) + aTotal.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 20:49:27' prior: 50887641!
addTotal:aTotal fromUser: aUserId
	(total includesKey: aUserId) ifFalse:[total at: aUserId put: 0].
	(total at: aUserId) put: (total at: aUserId) + aTotal.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 20:49:50' prior: 50887648!
addTotal:aTotal fromUser: aUserId
	(total includesKey: aUserId) ifFalse:[total at: aUserId put: 0].
	total at: aUserId put: (total at: aUserId) + aTotal.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 20:49:59' prior: 50887656!
addTotal:aTotal fromUser: aUserId
	(total includesKey: aUserId) ifFalse:[total at: aUserId put: 0].
	total at: aUserId put: (total at: aUserId + aTotal).! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 20:50:20' prior: 50887664!
addTotal:aTotal fromUser: aUserId
	(total includesKey: aUserId) ifFalse:[total at: aUserId put: 0].
	total at: aUserId put: (total at: aUserId + aTotal).! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 20:51:14' prior: 50887672!
addTotal:aTotal fromUser: aUserId
	(total includesKey: aUserId) ifFalse:[total at: aUserId put: 0].
	total at: aUserId put: (total at: aUserId + aTotal).! !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/23/2021 20:51:59' prior: 50883767!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	carts add: (Cart acceptingItemsOf: catalog).
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !
!Cart class methodsFor: 'instance creation' stamp: 'sc 6/23/2021 20:53:09'!
acceptingItemsOf: aCatalog forClient: aClientId 

	^self new initializeAcceptingItemsOf: aCatalog ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 20:53:09' prior: 50880271!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog forClient: aClientId! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 20:53:09' prior: 50887688!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	carts add: (Cart acceptingItemsOf: catalog forClient: aClientId).
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !

!methodRemoval: Cart class #acceptingItemsOf: stamp: 'sc 6/23/2021 20:53:09'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog !
!Cart class methodsFor: 'instance creation' stamp: 'sc 6/23/2021 20:54:35'!
acceptingItemsOf: aCatalog  

	^self new initializeAcceptingItemsOf: aCatalog ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 20:54:36' prior: 50887705!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog ! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 20:54:36' prior: 50887711!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	carts add: (Cart acceptingItemsOf: catalog ).
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !

!methodRemoval: Cart class #acceptingItemsOf:forClient: stamp: 'sc 6/23/2021 20:54:36'!
acceptingItemsOf: aCatalog forClient: aClientId 

	^self new initializeAcceptingItemsOf: aCatalog !
!Store methodsFor: 'cartCreation' stamp: 'sc 6/23/2021 20:57:34' prior: 50887737!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	carts add: (Cart acceptingItemsOf: catalog ).
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !
!Cart class methodsFor: 'instance creation' stamp: 'sc 6/23/2021 20:58:20'!
acceptingItemsOf: aCatalog forClient: aClientId   

	^self new initializeAcceptingItemsOf: aCatalog ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 20:58:20' prior: 50887732!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog forClient: aClientId ! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 20:58:20' prior: 50887753!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	carts add: (Cart acceptingItemsOf: catalog forClient: aClientId ).
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !

!methodRemoval: Cart class #acceptingItemsOf: stamp: 'sc 6/23/2021 20:58:20'!
acceptingItemsOf: aCatalog  

	^self new initializeAcceptingItemsOf: aCatalog !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'sc 6/23/2021 20:59:49' prior: 50887770!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog forClient: 'aDefaultClient' ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/23/2021 20:59:59'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/23/2021 20:59:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/23/2021 20:59:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/23/2021 20:59:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/23/2021 20:59:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/23/2021 20:59:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/23/2021 20:59:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/23/2021 20:59:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/23/2021 20:59:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'sc 6/23/2021 21:00:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'sc 6/23/2021 21:00:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'sc 6/23/2021 21:00:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'sc 6/23/2021 21:00:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'sc 6/23/2021 21:00:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'sc 6/23/2021 21:00:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'sc 6/23/2021 21:00:08'!
PASSED!
!Cart class methodsFor: 'instance creation' stamp: 'sc 6/23/2021 21:00:42' prior: 50887763!
acceptingItemsOf: aCatalog forClient: aClientId   

	^self new initializeAcceptingItemsOf: aCatalog forClient: aClientId.! !
!Cart methodsFor: 'initialization' stamp: 'sc 6/23/2021 21:01:09'!
initializeAcceptingItemsOf: aCatalog forClient: aClientId.

	catalog := aCatalog.
	items := OrderedCollection new.
	user _ aClientId.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'sc 6/23/2021 21:01:16'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 21:01:16' prior: 50887855!
initializeAcceptingItemsOf: aCatalog forClient: aClientId.

	catalog := aCatalog.
	items := OrderedCollection new.
	client _ aClientId.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 21:01:16' prior: 50887610!
registerPurchaseOn: aStore
	aStore addTotal: self total fromUser: client. 
	aStore addPurchase: self list fromUser: client.! !
!Store methodsFor: 'initialization' stamp: 'sc 6/23/2021 21:02:27' prior: 50886081!
initializeWithClientDatabase: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	carts _ OrderedCollection new.
	purchasesList _ Dictionary new.
	total _ Dictionary new.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 21:02:47' prior: 50887556!
checkOut: aCartId withCard: aCreditCard
	self registerPurchase: aCartId.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 21:03:57' prior: 50887533!
listPurchasesOf: aClientId withPassword: aPassword 
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	^ OrderedCollection new addAll: (purchasesList at: aClientId); add: total; yourself.
! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 21:45:31' prior: 50887899!
listPurchasesOf: aClientId withPassword: aPassword 
	|finallistPurchases|
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	finallistPurchases _ OrderedCollection new.
	finallistPurchases addAll: (purchasesList at: aClientId ifAbsent:[^ OrderedCollection new]).
	finallistPurchases add: (total at: aClientId ifAbsent:[^ 0]).
! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 21:46:13' prior: 50887909!
listPurchasesOf: aClientId withPassword: aPassword 
	|finalListPurchases|
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	finalListPurchases _ OrderedCollection new.
	finalListPurchases addAll: (purchasesList at: aClientId ifAbsent:[^ OrderedCollection new]).
	finalListPurchases add: (total at: aClientId ifAbsent:[^ 0]).
	^finalListPurchases.
! !

a _ dic at: 'caca' ifAbsent:[^ OrderedCollection new].!

dic _ Dictionary new.!

a _ dic at: 'caca' ifAbsent:[^ OrderedCollection new].!

a!

a _ dic at: 'caca' ifAbsent:[OrderedCollection new]. !

a!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 21:49:02' prior: 50887923!
listPurchasesOf: aClientId withPassword: aPassword 
	|finalListPurchases|
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	finalListPurchases _ OrderedCollection new.
	finalListPurchases addAll: (purchasesList at: aClientId ifAbsent:[OrderedCollection new]).
	finalListPurchases add: (total at: aClientId ifAbsent:[0]).
	^finalListPurchases.
! !

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 21:49:11'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 21:49:11'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 21:49:12'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 21:49:12'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 21:49:12'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 21:49:12'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 21:49:12'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 21:49:12'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 21:49:12'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 21:49:12'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 21:49:12'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 21:49:12'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 21:49:12'!
ERROR!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 21:49:12'!
ERROR!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 21:49:12'!
ERROR!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 21:49:20'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 21:49:21'!
ERROR!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 21:49:21'!
ERROR!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 21:49:21'!
ERROR!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 21:49:22'!
ERROR!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 21:49:22'!
ERROR!
!Store methodsFor: 'private' stamp: 'sc 6/23/2021 21:50:39' prior: 50887594!
registerPurchase:aCartId
	|userId|
	userId _ (carts at: aCartId) registerPurchaseOn: self.
	! !
!Store methodsFor: 'private' stamp: 'sc 6/23/2021 21:50:53' prior: 50888072!
registerPurchase:aCartId
	 (carts at: aCartId) registerPurchaseOn: self.
	! !

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 21:50:56'!
ERROR!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 21:50:56'!
ERROR!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 21:51:32' prior: 50887680!
addTotal:aTotal fromUser: aUserId
	(total includesKey: aUserId) ifFalse:[total at: aUserId put: 0].
	total at: aUserId put: ((total at: aUserId) + aTotal).! !

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 21:51:36'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 21:51:40'!
PASSED!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 21:51:45'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 21:51:53'!
PASSED!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 21:51:54'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:08:57'!
test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard trasactionId|
	store _ Store.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	trasactionId _ store addToCart: cartId aBook:  aBook withAmount: 1.
	self assert: (store hasRegisteredTransaction: trasactionId).
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:12:12' prior: 50888167!
test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard trasactionId|
	store _ Store.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	trasactionId _ store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredTransaction: trasactionId forBook: aBook withAmoun: 1).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:12:19'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:16:31' prior: 50888182!
test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard trasactionId|
	store _ Store.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	"self assert: (store hasRegisteredSaleFor: catalog )."
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:17:03' prior: 50888204!
test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook) ).
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:17:23' prior: 50888221!
test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:17:27'!
ERROR!

!testRun: #XXXX #test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:17:44'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:18:01' prior: 50888238!
test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store new.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:18:02'!
ERROR!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:18:20' prior: 50888262!
test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	
	
	
	
	
	
	! !

!testRun: #XXXX #test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:18:22'!
ERROR!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 22:18:33'!
hasRegisteredSaleFor: aSmallInteger 
	self shouldBeImplemented.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 22:18:44' prior: 50888303!
hasRegisteredSaleFor: aSmallInteger 
	^true! !

!testRun: #XXXX #test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:18:46'!
PASSED!

!testRun: #XXXX #test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:18:51'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 22:18:51'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 22:18:51'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 22:18:51'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 22:18:51'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 22:18:52'!
PASSED!

!testRun: #XXXX #test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:18:52'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:20:58' prior: 50888282!
test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registerKeyStrokeHandler equals: 1.
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:21:03' prior: 50888433!
test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:21:28'!
test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:21:28'!
test15aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:22:30'!
test15aStoreWithoutSalesHasZeroRegisteredSales
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self assert: store registeredSalesAmount equals: 0.
	
	
	
	
	
	
	! !

!testRun: #XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:22:33'!
ERROR!
!Store methodsFor: 'sales registration' stamp: 'sc 6/23/2021 22:22:49'!
registeredSalesAmount
	self shouldBeImplemented.! !
!Store methodsFor: 'sales registration' stamp: 'sc 6/23/2021 22:22:58' prior: 50888524!
registeredSalesAmount
	^0! !

!testRun: #XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:22:59'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 22:22:59'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 22:22:59'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 22:22:59'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 22:22:59'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 22:22:59'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 22:22:59'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:22:59'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:22:59'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 22:23:00'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 22:23:00'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 22:23:00'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 22:23:00'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 22:23:00'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 22:23:00'!
PASSED!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 22:23:00'!
PASSED!

!testRun: #XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:23:00'!
PASSED!

!testRun: #XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:23:00'!
FAILURE!

!testRun: #XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:23:00'!
FAILURE!

!testRun: #XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:23:08'!
PASSED!

!testRun: #XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:23:13'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/23/2021 22:25:18'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned carts catalog purchasesList total salesAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'sc 6/23/2021 22:25:16' prior: 50887884!
initializeWithClientDatabase: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	salesAmount _ 0.
	carts _ OrderedCollection new.
	purchasesList _ Dictionary new.
	total _ Dictionary new.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 22:26:24' prior: 50887894!
checkOut: aCartId withCard: aCreditCard
	self registerPurchase: aCartId.
	salesAmount _ salesAmount +1! !

!testRun: #XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 22:26:32'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 22:26:33'!
PASSED!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 22:26:33'!
PASSED!

!testRun: #XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:26:33'!
PASSED!

!testRun: #XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:26:33'!
FAILURE!

!testRun: #XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:26:33'!
FAILURE!

!testRun: #XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:26:41'!
PASSED!

!testRun: #XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:26:46'!
FAILURE!
!Store methodsFor: 'sales registration' stamp: 'sc 6/23/2021 22:27:16' prior: 50888529!
registeredSalesAmount
	^salesAmount ! !

!testRun: #XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:27:22'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 22:27:22'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 22:27:22'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 22:27:22'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 22:27:22'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 22:27:22'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:27:23'!
PASSED!

!testRun: #XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:27:23'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:28:53'!
test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	store checkOut: cartId withCard:  aCreditCard.
	
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:35:29'!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) equals: 0.
	
	
	
	
	
	
	! !

!testRun: #XXXX #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:35:32'!
FAILURE!

!testRun: #XXXX #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:35:32'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 22:37:48' prior: 50888627!
checkOut: aCartId withCard: aCreditCard
	self registerPurchase: aCartId.
	salesAmount _ salesAmount +1.
	(carts at: aCartId) discardItems.! !
!Cart methodsFor: 'queries' stamp: 'sc 6/23/2021 22:38:22'!
discardItems
	items _ OrderedCollection new.! !

!testRun: #XXXX #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:38:36'!
FAILURE!

!testRun: #XXXX #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:38:36'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:38:53' prior: 50888795!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) isEmpty .
	
	
	
	
	
	
	! !

!testRun: #XXXX #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 22:38:54'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 22:38:55'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 22:38:55'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 22:38:55'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 22:38:55'!
PASSED!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 22:38:55'!
PASSED!

!testRun: #XXXX #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:38:55'!
PASSED!

!testRun: #XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:38:55'!
PASSED!

!testRun: #XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:38:55'!
PASSED!

!testRun: #XXXX #test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:38:55'!
ERROR!

!testRun: #XXXX #test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:38:55'!
ERROR!

!testRun: #XXXX #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:39:12'!
PASSED!

!testRun: #XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:39:13'!
PASSED!

!testRun: #XXXX #test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:39:13'!
ERROR!

!testRun: #XXXX #test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:39:13'!
ERROR!

!testRun: #XXXX #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:40:28'!
PASSED!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:40:40'!
test16aStoreWithoutSalesHasZeroRegisteredSales
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self assert: store registeredSalesAmount equals: 0.
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test15aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:40:40'!
test15aStoreWithoutSalesHasZeroRegisteredSales
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self assert: store registeredSalesAmount equals: 0.
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:41:11'!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	store checkOut: cartId withCard:  aCreditCard.
	
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:41:11'!
test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	store checkOut: cartId withCard:  aCreditCard.
	
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:41:18'!
test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:41:18'!
test16aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:44:35' prior: 50889011!
test16aStoreWithoutSalesHasZeroRegisteredSales
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self assert: store registeredSalesAmount equals: 0.
	self deny: (store hasRegisteredSaleFor: 1)
	
	
	
	
	
	
	! !

!testRun: #XXXX #test16aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:44:38'!
FAILURE!
!Store methodsFor: 'sales registration' stamp: 'sc 6/23/2021 22:45:04' prior: 50888308!
hasRegisteredSaleFor: aSmallInteger 
	^false! !

!testRun: #XXXX #test16aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:45:29'!
PASSED!

!testRun: #XXXX #test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:45:31'!
FAILURE!

!testRun: #XXXX #test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:45:31'!
FAILURE!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:48:51'!
test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	store checkOut: cartId withCard:  aCreditCard.
	
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:48:52'!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	store checkOut: cartId withCard:  aCreditCard.
	
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:48:58'!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 22:48:58'!
test17aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:49:03'!
test17aStoreWithoutSalesHasZeroRegisteredSales
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self assert: store registeredSalesAmount equals: 0.
	self deny: (store hasRegisteredSaleFor: 1)
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test16aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 22:49:03'!
test16aStoreWithoutSalesHasZeroRegisteredSales
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	self assert: store registeredSalesAmount equals: 0.
	self deny: (store hasRegisteredSaleFor: 1)
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:49:08'!
test16ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) isEmpty .
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:49:08'!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) isEmpty .
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:49:14'!
test15listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 22:49:14'!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:49:38'!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test15listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 22:49:38'!
test15listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:50:00'!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) isEmpty .
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test16ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 22:50:00'!
test16ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) isEmpty .
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:51:11'!
test16ChekingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) isEmpty .
	
	
	
	
	
	
	! !
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:54:07'!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) isEmpty .
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test16ChekingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 22:54:07'!
test16ChekingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) isEmpty .
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:56:28'!
test16ChekingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	self should: [store checkOut: aCartId withCard: aCreditCard.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook)].
	
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 22:56:42'!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) isEmpty .
	
	
	
	
	
	
	!
!XXXX methodsFor: 'messages' stamp: 'sc 6/23/2021 22:56:47'!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	self should: [store checkOut: aCartId withCard: aCreditCard.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook)].
	
	
	
	
	
	
	
	! !

!methodRemoval: XXXX #test16ChekingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 22:56:47'!
test16ChekingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	self should: [store checkOut: aCartId withCard: aCreditCard.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook)].
	
	
	
	
	
	
	
	!

----SNAPSHOT----(23 June 2021 22:56:57) CuisUniversity-4532.image priorSource: 17788602!

----SNAPSHOT----(23 June 2021 22:57:00) CuisUniversity-4532.image priorSource: 17854642!

!testRun: #XXXX #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 22:57:03'!
FAILURE!

!testRun: #XXXX #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 22:57:10'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 22:59:02' prior: 50888821!
checkOut: aCartId withCard: aCreditCard
	self registerPurchase: aCartId.
	Cashier toCheckout: (carts at: aCartId ) charging: aCreditCard throught: nil  on: (Date today) registeringOn: nil.
	salesAmount _ salesAmount +1.
	(carts at: aCartId) discardItems.! !

!classRenamed: #XXXX as: #StoreTest stamp: 'sc 6/23/2021 23:01:15'!
Smalltalk renameClassNamed: #XXXX as: #StoreTest!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:05:45' prior: 50883037 overrides: 16927572!
setUp
	objectFactory _ StoreTestObjectsFactory new.
	catalog _ objectFactory defaultCatalog. 
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	clientPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> anotherValidPassword)
	
	
	
	! !

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'sc 6/23/2021 23:07:30'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId validPassword clientPasswordData objectFactory catalog debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:07:28' prior: 50889636 overrides: 16927572!
setUp
	objectFactory _ StoreTestObjectsFactory new.
	catalog _ objectFactory defaultCatalog. 
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	clientPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> anotherValidPassword).
	debitBehavior := [ :anAmount :aCreditCard | ]
	
	
	
	! !
!StoreTest methodsFor: 'simulator' stamp: 'sc 6/23/2021 23:08:18'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!Store class methodsFor: 'instance creation' stamp: 'sc 6/23/2021 23:09:39'!
newWith: clientsData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessorSimulator   
	^self new initializeWithClientDatabase: clientsData withCatalog: aCatalog.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:39' prior: 50884579!
test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	self should: [store listPurchasesOf: validClientId withPassword: validPassword, 'garbage meant to ruin password']
	raise: Error
	withExceptionDo: [:anError| self assert: anError messageText equals: Store invalidCredentialsErrorMessage] 
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50886673!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut:cartId  withCard: aCreditCard.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: (catalog at: aBook) ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50889353!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50885597!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 10.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1).
	self assert: (store listCart: anotherCartId) equals: (OrderedCollection with: aBook with: 10).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50882931!
test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds
	|store cartId anotherCartsId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartsId _ store createNewCartWith: validClientId and: validPassword.
	self assert: (cartId  ~= anotherCartsId).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50886956!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword.	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  anotherBook withAmount: 1.
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50889222!
test17aStoreWithoutSalesHasZeroRegisteredSales
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	self assert: store registeredSalesAmount equals: 0.
	self deny: (store hasRegisteredSaleFor: 1)
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50885441!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId) isEmpty.
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50882945!
test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50889182!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50885452!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (store listCart: cartId) isEmpty .
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50889139!
test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory createCart.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	store checkOut: cartId withCard:  aCreditCard.
	
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50889560!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	self should: [store checkOut: aCartId withCard: aCreditCard.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook)].
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50885470!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:40' prior: 50889427!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId) isEmpty .
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:41' prior: 50886046!
test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection
	|store clientPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	store createNewCartWith: validClientId and: validPassword.
	clientPurchases _ store listPurchasesOf: validClientId withPassword: validPassword.
	self assert:  clientPurchases  equals: (OrderedCollection with: 0).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:41' prior: 50884402!
test10listingPurchasingOfInvalidClientRaisesError
	|store |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	self should: [store listPurchasesOf: invalidClientId withPassword: 'irrelevant password']
	raise: Error
	withExceptionDo: [:anError| self assert: anError messageText equals: Store invalidCredentialsErrorMessage] 
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:41' prior: 50882961!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a']
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:41' prior: 50885671!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1.
	self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with: 1 with: anotherBook with: 1).	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:09:41' prior: 50882889!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	self should: [store createNewCartWith: invalidClientId  and: validPassword]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!methodRemoval: Store class #newWith:withCatalog: stamp: 'sc 6/23/2021 23:09:41'!
newWith: clientsData withCatalog: aCatalog  
	^self new initializeWithClientDatabase: clientsData withCatalog: aCatalog.!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:09:52'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:09:52'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 23:09:52'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:09:53'!
FAILURE!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:09:53'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:09:53'!
ERROR!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:09:53'!
ERROR!
!Store methodsFor: 'initialization' stamp: 'sc 6/23/2021 23:10:19' prior: 50888616!
initializeWithClientDatabase: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	salesAmount _ 0.
	carts _ OrderedCollection new.
	purchasesList _ Dictionary new.
	total _ Dictionary new.! !
!Store methodsFor: 'initialization' stamp: 'sc 6/23/2021 23:10:58'!
initializeWithClientDatabase: clientData withCatalog: aCatalog withMerchantProcessor: merchantProcessor   .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	salesAmount _ 0.
	carts _ OrderedCollection new.
	purchasesList _ Dictionary new.
	total _ Dictionary new.! !
!Store class methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:10:59' prior: 50889688!
newWith: clientsData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessorSimulator   
	^self new initializeWithClientDatabase: clientsData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor.! !

!methodRemoval: Store #initializeWithClientDatabase:withCatalog: stamp: 'sc 6/23/2021 23:10:59'!
initializeWithClientDatabase: clientData withCatalog: aCatalog  .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	salesAmount _ 0.
	carts _ OrderedCollection new.
	purchasesList _ Dictionary new.
	total _ Dictionary new.!
!Store class methodsFor: 'instance creation' stamp: 'sc 6/23/2021 23:11:11' prior: 50890200!
newWith: clientsData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor   
	^self new initializeWithClientDatabase: clientsData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor.! !
!Store methodsFor: 'initialization' stamp: 'sc 6/23/2021 23:12:39' prior: 50890187!
initializeWithClientDatabase: clientData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor   .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	salesAmount _ 0.
	carts _ OrderedCollection new.
	purchasesList _ Dictionary new.
	total _ Dictionary new.
	"merchantProcessorr _ aMerchantProcessor."! !

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/23/2021 23:13:29'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned carts catalog purchasesList total salesAmount merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'sc 6/23/2021 23:13:28' prior: 50890231!
initializeWithClientDatabase: clientData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor   .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	salesAmount _ 0.
	carts _ OrderedCollection new.
	purchasesList _ Dictionary new.
	total _ Dictionary new.
	merchantProcessor _ aMerchantProcessor.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 23:14:34' prior: 50889621!
checkOut: aCartId withCard: aCreditCard
	self registerPurchase: aCartId.
	Cashier toCheckout: (carts at: aCartId ) 
		charging: aCreditCard 
		throught: merchantProcessor
		on: (Date today)
		registeringOn: OrderedCollection new.
	salesAmount _ salesAmount +1.
	(carts at: aCartId) discardItems.! !

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:14:36'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:14:37'!
FAILURE!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:14:37'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:14:37'!
ERROR!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:14:37'!
ERROR!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:14:58'!
FAILURE!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:14:58'!
FAILURE!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:15:30' prior: 50889945!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	self should: [store checkOut: aCartId withCard: aCreditCard.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId) equals: (OrderedCollection with: aBook with:1)].
	
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:15:32'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:15:35'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:15:35'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 23:15:35'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 23:15:35'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 23:15:35'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 23:15:35'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 23:15:35'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:15:36'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:15:36'!
ERROR!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:15:36'!
ERROR!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:16:04'!
ERROR!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:16:13'!
ERROR!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:17:59' prior: 50889888!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory notExpiredCreditCard .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:18:00'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/23/2021 23:18:57'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned carts catalog purchasesList total salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:18:57' prior: 50888707!
registeredSalesAmount
	^salesBook ! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:18:57' prior: 50890268!
checkOut: aCartId withCard: aCreditCard
	self registerPurchase: aCartId.
	Cashier toCheckout: (carts at: aCartId ) 
		charging: aCreditCard 
		throught: merchantProcessor
		on: (Date today)
		registeringOn: OrderedCollection new.
	salesBook _ salesBook +1.
	(carts at: aCartId) discardItems.! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:18:57' prior: 50890254!
initializeWithClientDatabase: clientData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor   .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	salesBook _ 0.
	carts _ OrderedCollection new.
	purchasesList _ Dictionary new.
	total _ Dictionary new.
	merchantProcessor _ aMerchantProcessor.! !
!Store methodsFor: 'initialization' stamp: 'sc 6/23/2021 23:19:26' prior: 50890527!
initializeWithClientDatabase: clientData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor   .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	salesBook _ OrderedCollection new.
	carts _ OrderedCollection new.
	purchasesList _ Dictionary new.
	total _ Dictionary new.
	merchantProcessor _ aMerchantProcessor.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 23:19:44' prior: 50890515!
checkOut: aCartId withCard: aCreditCard
	self registerPurchase: aCartId.
	Cashier toCheckout: (carts at: aCartId ) 
		charging: aCreditCard 
		throught: merchantProcessor
		on: (Date today)
		registeringOn: salesBook .
	salesBook _ salesBook +1.
	(carts at: aCartId) discardItems.! !
!Store methodsFor: 'sales registration' stamp: 'sc 6/23/2021 23:20:21' prior: 50889125!
hasRegisteredSaleFor: aSaleAmount 
	^salesBook includes: aSaleAmount! !

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:20:22'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 23:20:22'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 23:20:22'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 23:20:22'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 23:20:22'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 23:20:22'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:20:23'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:20:23'!
FAILURE!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:20:23'!
FAILURE!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:20:23'!
ERROR!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:20:42'!
FAILURE!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:20:42'!
FAILURE!
!Store methodsFor: 'sales registration' stamp: 'sc 6/23/2021 23:21:15' prior: 50890511!
registeredSalesAmount
	^salesBook size.! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 23:21:37' prior: 50890555!
checkOut: aCartId withCard: aCreditCard
	self registerPurchase: aCartId.
	Cashier toCheckout: (carts at: aCartId ) 
		charging: aCreditCard 
		throught: merchantProcessor
		on: (Date today)
		registeringOn: salesBook .
	(carts at: aCartId) discardItems.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/23/2021 23:22:27'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned carts catalog purchasesList moneySpentByClient salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:22:27' prior: 50888091!
addTotal:aTotal fromUser: aUserId
	(moneySpentByClient includesKey: aUserId) ifFalse:[moneySpentByClient at: aUserId put: 0].
	moneySpentByClient at: aUserId put: ((moneySpentByClient at: aUserId) + aTotal).! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:22:27' prior: 50887944!
listPurchasesOf: aClientId withPassword: aPassword 
	|finalListPurchases|
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	finalListPurchases _ OrderedCollection new.
	finalListPurchases addAll: (purchasesList at: aClientId ifAbsent:[OrderedCollection new]).
	finalListPurchases add: (moneySpentByClient at: aClientId ifAbsent:[0]).
	^finalListPurchases.
! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:22:27' prior: 50890541!
initializeWithClientDatabase: clientData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor   .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	salesBook _ OrderedCollection new.
	carts _ OrderedCollection new.
	purchasesList _ Dictionary new.
	moneySpentByClient _ Dictionary new.
	merchantProcessor _ aMerchantProcessor.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'sc 6/23/2021 23:22:56'!
Object subclass: #Store
	instanceVariableNames: 'clientsCredentialData lastIdAssigned carts catalog purchasesListByClient moneySpentByClient salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:22:56' prior: 50890689!
listPurchasesOf: aClientId withPassword: aPassword 
	|finalListPurchases|
	self raiseInvalidCredentialsError: aClientId  andWith: aPassword.
	finalListPurchases _ OrderedCollection new.
	finalListPurchases addAll: (purchasesListByClient at: aClientId ifAbsent:[OrderedCollection new]).
	finalListPurchases add: (moneySpentByClient at: aClientId ifAbsent:[0]).
	^finalListPurchases.
! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:22:56' prior: 50890704!
initializeWithClientDatabase: clientData withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor   .
	clientsCredentialData _ clientData.
	lastIdAssigned _ 0.
	catalog _ aCatalog.
	salesBook _ OrderedCollection new.
	carts _ OrderedCollection new.
	purchasesListByClient _ Dictionary new.
	moneySpentByClient _ Dictionary new.
	merchantProcessor _ aMerchantProcessor.! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:22:56' prior: 50887625!
addPurchase:aPurchaseList fromUser: aUserId
	(purchasesListByClient includesKey: aUserId) ifFalse:[purchasesListByClient at: aUserId put: OrderedCollection new].
	(purchasesListByClient at: aUserId) addAll:  aPurchaseList .! !

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:23:04'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:23:04'!
FAILURE!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:23:05'!
ERROR!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:23:12'!
ERROR!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:23:13'!
ERROR!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:23:30' prior: 50889922!
test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory notExpiredCreditCard .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	store checkOut: cartId withCard:  aCreditCard.
	
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:23:32'!
ERROR!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:23:33'!
ERROR!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:24:11' prior: 50890851!
test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory notExpiredCreditCard .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:24:13'!
FAILURE!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:24:21'!
FAILURE!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:24:21'!
FAILURE!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:24:35'!
FAILURE!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:24:35'!
FAILURE!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:24:49'!
FAILURE!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:24:49'!
FAILURE!
!Store methodsFor: 'sales registration' stamp: 'sc 6/23/2021 23:27:34' prior: 50890567!
hasRegisteredSaleFor: aSaleAmount 
	^salesBook anySatisfy: [:aSale| aSale mensaje = aSaleAmount]! !
!Store methodsFor: 'sales registration' stamp: 'sc 6/23/2021 23:28:00' prior: 50890929!
hasRegisteredSaleFor: aSaleAmount 
	^salesBook anySatisfy: [:aSale| aSale total = aSaleAmount]! !

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 23:28:03'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 23:28:04'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 23:28:04'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 23:28:04'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 23:28:04'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:28:04'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:28:04'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:28:04'!
FAILURE!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:28:04'!
FAILURE!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:28:11'!
FAILURE!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:28:11'!
FAILURE!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:31:14'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 23:34:26' prior: 50890658!
checkOut: aCartId withCard: aCreditCard
	|cashier|
	self registerPurchase: aCartId.
	cashier _ Cashier toCheckout: (carts at: aCartId ) 
		charging: aCreditCard 
		throught: merchantProcessor
		on: (Date today)
		registeringOn: salesBook.
	cashier checkOut.
	(carts at: aCartId) discardItems.! !

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 23:34:28'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 23:34:29'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 23:34:29'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 23:34:29'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 23:34:29'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:34:29'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:34:29'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:34:29'!
PASSED!

!testRun: #StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:34:29'!
PASSED!

!methodRemoval: StoreTest #test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:35:39'!
test19aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword.
	aCreditCard _ objectFactory notExpiredCreditCard .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:35:48'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:35:48'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 23:35:48'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 23:35:48'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 23:35:48'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 23:35:48'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 23:35:48'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:35:49'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:35:49'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:39:26'!
test19CreatedCartExpiresAfter30minutes
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:40:20' prior: 50891208!
test19CreatedCartExpiresAfter30minutes
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:41:37' prior: 50891216!
test19CreatedCartExpiresAfter30minutes
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:43:28' prior: 50891226!
test19CreatedCartExpiresAfter30minutes
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	
	self should: [store listCart: cartId]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!Store methodsFor: 'operations' stamp: 'sc 6/23/2021 23:44:37'!
listCart: cartId onTime: timeStamp 
	^ (carts at: cartId) list.
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:44:37' prior: 50890362!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	self should: [store checkOut: aCartId withCard: aCreditCard.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId onTime: aTimeStamp) equals: (OrderedCollection with: aBook with:1)].
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:44:37' prior: 50889909!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword.
	self assert: (store listCart: cartId onTime: aTimeStamp) isEmpty .
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:44:37' prior: 50889859!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId _ store createNewCartWith: validClientId  and: validPassword.
	self assert: (store listCart: cartId onTime: aTimeStamp) isEmpty.
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:44:37' prior: 50889775!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	anotherCartId _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 10.
	self assert: (store listCart: aCartId onTime: aTimeStamp) equals: (OrderedCollection with: aBook with: 1).
	self assert: (store listCart: anotherCartId onTime: aTimeStamp) equals: (OrderedCollection with: aBook with: 10).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:44:37' prior: 50890055!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1.
	self assert: (store listCart: aCartId onTime: aTimeStamp) equals: (OrderedCollection with: aBook with: 1 with: anotherBook with: 1).	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:44:37' prior: 50889987!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword.
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId onTime: aTimeStamp) isEmpty .
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:44:37' prior: 50889970!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	aCartId  _ store createNewCartWith: validClientId and: validPassword.
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId onTime: aTimeStamp) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:44:37' prior: 50891236!
test19CreatedCartExpiresAfter30minutes
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	
	self should: [store listCart: cartId onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!methodRemoval: Store #listCart: stamp: 'sc 6/23/2021 23:44:37'!
listCart: cartId
	^ (carts at: cartId) list.
	!

DateAndTime now minute!

DateAndTime now !

n := DateAndTime now.!

n + 30 minutes!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:52:08' prior: 50891397!
test19CreatedCartExpiresAfter30minutes
	|store cartId aTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword.
	
	aTimeStamp _ DateAndTime now  + 30 minutes	.
	self should: [store listCart: cartId onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!Cart class methodsFor: 'instance creation' stamp: 'sc 6/23/2021 23:53:00'!
acceptingItemsOf: aCatalog forClient: aClientId onTime: onTime    

	^self new initializeAcceptingItemsOf: aCatalog forClient: aClientId.! !
!Store methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:53:00' prior: 50887776!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	carts add: (Cart acceptingItemsOf: catalog forClient: aClientId onTime: aTimeStamp ).
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:53:00' prior: 50887792!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog forClient: 'aDefaultClient' onTime: aTimeStamp ! !

!methodRemoval: Cart class #acceptingItemsOf:forClient: stamp: 'sc 6/23/2021 23:53:00'!
acceptingItemsOf: aCatalog forClient: aClientId   

	^self new initializeAcceptingItemsOf: aCatalog forClient: aClientId.!
!Cart class methodsFor: 'instance creation' stamp: 'sc 6/23/2021 23:53:10' prior: 50891437!
acceptingItemsOf: aCatalog forClient: aClientId onTime: aTimeStamp.   

	^self new initializeAcceptingItemsOf: aCatalog forClient: aClientId.! !
!Cart class methodsFor: 'instance creation' stamp: 'sc 6/23/2021 23:53:40' prior: 50891470!
acceptingItemsOf: aCatalog forClient: aClientId onTime: aTimeStamp  

	^self new initializeAcceptingItemsOf: aCatalog forClient: aClientId onTime: aTimeStamp.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'sc 6/23/2021 23:54:21'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items client lastUseTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'sc 6/23/2021 23:54:19'!
initializeAcceptingItemsOf: aCatalog forClient: aClientId onTime: aTimeStamp.

	catalog := aCatalog.
	items := OrderedCollection new.
	client _ aClientId.
	lastUseTime _ aTimeStamp .! !

!methodRemoval: Cart #initializeAcceptingItemsOf:forClient: stamp: 'sc 6/23/2021 23:54:24'!
initializeAcceptingItemsOf: aCatalog forClient: aClientId.

	catalog := aCatalog.
	items := OrderedCollection new.
	client _ aClientId.!

!methodRemoval: Cart #initializeAcceptingItemsOf: stamp: 'sc 6/23/2021 23:54:25'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.!
!Store methodsFor: 'cartCreation' stamp: 'sc 6/23/2021 23:56:14'!
createNewCartWith: aClientId and: aPassword onTime: aTimeStamp  
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	carts add: (Cart acceptingItemsOf: catalog forClient: aClientId onTime: aTimeStamp ).
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:14' prior: 50890476!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).
	aCreditCard _ objectFactory notExpiredCreditCard .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:14' prior: 50891335!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1.
	self assert: (store listCart: aCartId onTime: aTimeStamp) equals: (OrderedCollection with: aBook with: 1 with: anotherBook with: 1).	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:14' prior: 50891419!
test19CreatedCartExpiresAfter30minutes
	|store cartId aTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).
	
	aTimeStamp _ DateAndTime now  + 30 minutes	.
	self should: [store listCart: cartId onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:14' prior: 50891358!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (DateAndTime now).
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId onTime: aTimeStamp) isEmpty .
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:14' prior: 50889714!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut:cartId  withCard: aCreditCard.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: (catalog at: aBook) ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:14' prior: 50890077!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	self should: [store createNewCartWith: invalidClientId  and: validPassword onTime: (DateAndTime now)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:14' prior: 50890007!
test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection
	|store clientPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).
	clientPurchases _ store listPurchasesOf: validClientId withPassword: validPassword.
	self assert:  clientPurchases  equals: (OrderedCollection with: 0).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:14' prior: 50891379!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId onTime: aTimeStamp) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:15' prior: 50889737!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword onTime: (DateAndTime now) .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:15' prior: 50889815!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  anotherBook withAmount: 1.
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:15' prior: 50889871!
test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword onTime: (DateAndTime now) .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:15' prior: 50891309!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).
	anotherCartId _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 10.
	self assert: (store listCart: aCartId onTime: aTimeStamp) equals: (OrderedCollection with: aBook with: 1).
	self assert: (store listCart: anotherCartId onTime: aTimeStamp) equals: (OrderedCollection with: aBook with: 10).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:15' prior: 50891257!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (DateAndTime now).
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	self should: [store checkOut: aCartId withCard: aCreditCard.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId onTime: aTimeStamp) equals: (OrderedCollection with: aBook with:1)].
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:15' prior: 50889799!
test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds
	|store cartId anotherCartsId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).
	anotherCartsId _ store createNewCartWith: validClientId and: validPassword onTime: (DateAndTime now).
	self assert: (cartId  ~= anotherCartsId).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:15' prior: 50891283!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword onTime: (DateAndTime now).
	self assert: (store listCart: cartId onTime: aTimeStamp) isEmpty .
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:15' prior: 50891296!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId _ store createNewCartWith: validClientId  and: validPassword onTime: (DateAndTime now).
	self assert: (store listCart: cartId onTime: aTimeStamp) isEmpty.
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/23/2021 23:56:15' prior: 50890039!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a' onTime: (DateAndTime now)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !

!methodRemoval: Store #createNewCartWith:and: stamp: 'sc 6/23/2021 23:56:15'!
createNewCartWith: aClientId and: aPassword 
	self raiseInvalidCredentialsError: aClientId andWith: aPassword.
	carts add: (Cart acceptingItemsOf: catalog forClient: aClientId onTime: aTimeStamp ).
	lastIdAssigned _ lastIdAssigned+1 .
	^lastIdAssigned .
	!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:56:55' prior: 50891866!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId _ store createNewCartWith: validClientId  and: validPassword onTime: (DateAndTime now).
	self assert: (store listCart: cartId onTime: DateAndTime now) isEmpty.
	
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/23/2021 23:56:57'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/23/2021 23:56:58'!
PASSED!

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/23/2021 23:56:58'!
FAILURE!

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/23/2021 23:56:58'!
FAILURE!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/23/2021 23:57:02'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/23/2021 23:57:05'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/23/2021 23:57:07'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/23/2021 23:57:09'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/23/2021 23:57:10'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/23/2021 23:57:13'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:57:15'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:57:18'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/23/2021 23:57:21'!
PASSED!

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'sc 6/23/2021 23:58:59'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId validPassword clientPasswordData objectFactory catalog debitBehavior now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:58:57' prior: 50889665 overrides: 16927572!
setUp
	objectFactory _ StoreTestObjectsFactory new.
	catalog _ objectFactory defaultCatalog. 
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	clientPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> anotherValidPassword).
	debitBehavior := [ :anAmount :aCreditCard | ].
	now _ DateAndTime now.
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:59:07' prior: 50891907!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId _ store createNewCartWith: validClientId  and: validPassword onTime: (DateAndTime now).
	self assert: (store listCart: cartId onTime:  now) isEmpty.
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:59:16' prior: 50892063!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId _ store createNewCartWith: validClientId  and: validPassword onTime: (now).
	self assert: (store listCart: cartId onTime:  now) isEmpty.
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:59:24' prior: 50891637!
test02cantCreateACartWithInvalidUser
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	self should: [store createNewCartWith: invalidClientId  and: validPassword onTime: (now)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:59:33' prior: 50891852!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword onTime: (now).
	self assert: (store listCart: cartId onTime: now) isEmpty .
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:59:39' prior: 50891763!
test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword
	|store cartId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword onTime: (now) .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:59:49' prior: 50891835!
test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds
	|store cartId anotherCartsId|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	anotherCartsId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	self assert: (cartId  ~= anotherCartsId).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/23/2021 23:59:56' prior: 50891671!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:00:04' prior: 50891549!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1.
	self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: aBook with: 1 with: anotherBook with: 1).	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:00:17' prior: 50891781!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	anotherCartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 10.
	self assert: (store listCart: aCartId onTime:now) equals: (OrderedCollection with: aBook with: 1).
	self assert: (store listCart: anotherCartId onTime: now) equals: (OrderedCollection with: aBook with: 10).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:00:22' prior: 50891653!
test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection
	|store clientPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	store createNewCartWith: validClientId and: validPassword onTime: (now).
	clientPurchases _ store listPurchasesOf: validClientId withPassword: validPassword.
	self assert:  clientPurchases  equals: (OrderedCollection with: 0).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:00:31' prior: 50891613!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut:cartId  withCard: aCreditCard.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: (catalog at: aBook) ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:00:41' prior: 50891730!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: cartId aBook:  anotherBook withAmount: 1.
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:00:50' prior: 50891690!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword onTime: (now) .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:00:59' prior: 50891592!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (now).
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId onTime: now) isEmpty .
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:01:06' prior: 50891808!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (now).
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1.
	self should: [store checkOut: aCartId withCard: aCreditCard.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: aBook with:1)].
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:01:14' prior: 50891526!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aCreditCard _ objectFactory notExpiredCreditCard .
	
	store addToCart: cartId aBook:  aBook withAmount: 1.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:01:22' prior: 50891573!
test19CreatedCartExpiresAfter30minutes
	|store cartId aTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ DateAndTime now  + 30 minutes	.
	self should: [store listCart: cartId onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/24/2021 00:01:27'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'sc 6/24/2021 00:01:47' prior: 50891457!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog forClient: 'aDefaultClient' onTime: DateAndTime now.! !
!Cart class methodsFor: 'errorMessages' stamp: 'sc 6/24/2021 00:02:47'!
canNotOperateWhenUnusedFor30Min
	^'Si no me tocas en 30 min no esperes que te estï¿½ esperando amigo, no soy como vos con tu ex'! !
!Store methodsFor: 'operations' stamp: 'sc 6/24/2021 00:05:29' prior: 50891251!
listCart: cartId onTime: timeStamp 
	(carts at: cartId) raiseErrorIfUnusedFor30minutes: timeStamp. 
	^ (carts at: cartId) list.
	! !
!Cart methodsFor: 'error messages' stamp: 'sc 6/24/2021 00:08:12'!
raiseErrorIfUnusedFor30minutes: timeStamp. 
	lastUseTime + 30 minutes > timeStamp ifTrue: [self error: self class canNotOperateWhenUnusedFor30Min]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/24/2021 00:08:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/24/2021 00:08:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/24/2021 00:08:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/24/2021 00:08:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/24/2021 00:08:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/24/2021 00:08:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/24/2021 00:08:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/24/2021 00:08:19'!
PASSED!
!Cart methodsFor: 'error messages' stamp: 'sc 6/24/2021 00:08:26' prior: 50892438!
raiseErrorIfUnusedFor30minutes: timeStamp. 
	(lastUseTime + 30 minutes) > timeStamp ifTrue: [self error: self class canNotOperateWhenUnusedFor30Min]! !

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/24/2021 00:08:32'!
FAILURE!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:08:37'!
PASSED!

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/24/2021 00:08:43'!
FAILURE!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:08:50' prior: 50892396!
test19CreatedCartExpiresAfter30minutes
	|store cartId aTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ DateAndTime now  + 31 minutes	.
	self should: [store listCart: cartId onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/24/2021 00:08:51'!
FAILURE!

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/24/2021 00:08:56'!
FAILURE!

lastUseTime + 30 minutes!
!Cart methodsFor: 'error messages' stamp: 'sc 6/24/2021 00:11:46' prior: 50892471!
raiseErrorIfUnusedFor30minutes: timeStamp. 
	(lastUseTime + 35 minutes) > timeStamp ifTrue: [self error: self class canNotOperateWhenUnusedFor30Min]! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:11:53' prior: 50892489!
test19CreatedCartExpiresAfter30minutes
	|store cartId aTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ DateAndTime now  + 30 minutes	.
	self should: [store listCart: cartId onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:11:55'!
ERROR!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:11:55'!
ERROR!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:11:55'!
ERROR!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:11:55'!
ERROR!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:11:55'!
ERROR!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:11:55'!
ERROR!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:11:55'!
ERROR!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:11:55'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:11:56'!
PASSED!

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/24/2021 00:11:56'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:12:10'!
ERROR!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:12:10'!
ERROR!
!Cart methodsFor: 'error messages' stamp: 'sc 6/24/2021 00:13:35' prior: 50892515!
raiseErrorIfUnusedFor30minutes: timeStamp. 
	(timeStamp - lastUseTime ) > 30 ifTrue: [self error: self class canNotOperateWhenUnusedFor30Min]! !

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:13:39'!
ERROR!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:13:39'!
ERROR!
!Cart methodsFor: 'error messages' stamp: 'sc 6/24/2021 00:14:11' prior: 50892624!
raiseErrorIfUnusedFor30minutes: timeStamp. 
	(timeStamp - lastUseTime ) > 30 minutes ifTrue: [self error: self class canNotOperateWhenUnusedFor30Min]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:14:23'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:14:24'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:14:24'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:14:24'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:14:24'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:14:24'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:14:24'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:14:24'!
PASSED!

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/24/2021 00:14:24'!
PASSED!

!testRun: #StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/24/2021 00:14:31'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:15:05'!
test19CreatedCartCantListCartAfter30minutesUnused
	|store cartId aTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ DateAndTime now  + 30 minutes	.
	self should: [store listCart: cartId onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!methodRemoval: StoreTest #test19CreatedCartExpiresAfter30minutes stamp: 'sc 6/24/2021 00:15:05'!
test19CreatedCartExpiresAfter30minutes
	|store cartId aTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ DateAndTime now  + 30 minutes	.
	self should: [store listCart: cartId onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:17:01'!
test20CreatedCartCantAddAnythingAfter30minutesUnused
	|store cartId aTimeStamp aBook|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	
	aTimeStamp _ DateAndTime now  + 30 minutes	.
	self should: [store addToCart: cartId  aBook: aBook withAmount: 1]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!Store methodsFor: 'operations' stamp: 'sc 6/24/2021 00:17:57'!
addToCart: aCartId  aBook: aBook  withAmount: anAmount onTime: aTimeStamp .
	(carts at: aCartId) add: anAmount of: aBook.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:17:57' prior: 50892289!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword onTime: (now) .
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1 onTime: now.
	store checkOut: cartId withCard: aCreditCard.
	store checkOut: anotherCartId withCard: aCreditCard.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:17:57' prior: 50892804!
test20CreatedCartCantAddAnythingAfter30minutesUnused
	|store cartId aTimeStamp aBook|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	
	aTimeStamp _ DateAndTime now  + 30 minutes	.
	self should: [store addToCart: cartId  aBook: aBook withAmount: 1 onTime: now]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:17:57' prior: 50892374!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aCreditCard _ objectFactory notExpiredCreditCard .
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store checkOut: cartId withCard:  aCreditCard.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:17:57' prior: 50892328!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (now).
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1 onTime: now.
	store checkOut: aCartId withCard: aCreditCard.
	self assert: (store listCart: aCartId onTime: now) isEmpty .
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:17:57' prior: 50892168!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1 onTime: now.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1 onTime: now.
	self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: aBook with: 1 with: anotherBook with: 1).	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:17:57' prior: 50892257!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store addToCart: cartId aBook:  anotherBook withAmount: 1 onTime: now.
	

	store checkOut:cartId  withCard: aCreditCard.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:17:57' prior: 50892348!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (now).
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1 onTime: now.
	self should: [store checkOut: aCartId withCard: aCreditCard.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: aBook with:1)].
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:17:57' prior: 50892191!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	anotherCartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1 onTime: now.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 10 onTime: now.
	self assert: (store listCart: aCartId onTime:now) equals: (OrderedCollection with: aBook with: 1).
	self assert: (store listCart: anotherCartId onTime: now) equals: (OrderedCollection with: aBook with: 10).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:17:57' prior: 50892150!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1 onTime: now.
	self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:17:58' prior: 50892234!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store checkOut:cartId  withCard: aCreditCard.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: (catalog at: aBook) ).
	
	
	
	
	
	
	
	! !

!methodRemoval: Store #addToCart:aBook:withAmount: stamp: 'sc 6/24/2021 00:17:58'!
addToCart: aCartId  aBook: aBook  withAmount: anAmount.
	(carts at: aCartId) add: anAmount of: aBook.!
!Store methodsFor: 'private' stamp: 'sc 6/24/2021 00:19:34'!
checkIfCart: cartId IsStillValidAt:  timeStamp
	(carts at: cartId) raiseErrorIfUnusedFor30minutes: timeStamp. ! !
!Store methodsFor: 'operations' stamp: 'sc 6/24/2021 00:20:17' prior: 50892431!
listCart: cartId onTime: timeStamp 
	self checkIfCart: cartId IsStillValidAt:  timeStamp.
	^ (carts at: cartId) list.
	! !
!Store methodsFor: 'operations' stamp: 'sc 6/24/2021 00:20:45' prior: 50892824!
addToCart: aCartId  aBook: aBook  withAmount: anAmount onTime: aTimeStamp .
	self checkIfCart: aCartId IsStillValidAt:  aTimeStamp.
	(carts at: aCartId) add: anAmount of: aBook.! !

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:20:55'!
FAILURE!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:21:20' prior: 50892871!
test20CreatedCartCantAddAnythingAfter30minutesUnused
	|store cartId aTimeStamp aBook|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store addToCart: cartId  aBook: aBook withAmount: 1 onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:21:25'!
FAILURE!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:21:35'!
FAILURE!
!Cart methodsFor: 'error messages' stamp: 'sc 6/24/2021 00:23:21' prior: 50892638!
raiseErrorIfUnusedFor30minutes: timeStamp. 
	(timeStamp - lastUseTime ) > 29 minutes ifTrue: [self error: self class canNotOperateWhenUnusedFor30Min]! !

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:23:25'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:23:25'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:23:25'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:23:26'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:23:34'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:23:34'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:23:34'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:23:34'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:23:34'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:23:34'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:23:34'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:23:35'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:23:41'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:23:43'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:23:45'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:26:15'!
test20CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp aBook creditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	store addToCart: cartId  aBook: aBook withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.
	
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store checkOut: cartId withCard:creditCard]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!Store methodsFor: 'operations' stamp: 'sc 6/24/2021 00:27:02'!
checkOut: aCartId withCard: aCreditCard onTime: aTimeStamp 
	|cashier|
	self registerPurchase: aCartId.
	cashier _ Cashier toCheckout: (carts at: aCartId ) 
		charging: aCreditCard 
		throught: merchantProcessor
		on: (Date today)
		registeringOn: salesBook.
	cashier checkOut.
	(carts at: aCartId) discardItems.! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:27:02' prior: 50893328!
test20CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp aBook creditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	store addToCart: cartId  aBook: aBook withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.
	
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store checkOut: cartId withCard:creditCard onTime: now]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:27:02' prior: 50892960!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store addToCart: cartId aBook:  anotherBook withAmount: 1 onTime: now.
	

	store checkOut:cartId  withCard: aCreditCard onTime: now.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:27:02' prior: 50892915!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (now).
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1 onTime: now.
	store checkOut: aCartId withCard: aCreditCard onTime: now.
	self assert: (store listCart: aCartId onTime: now) isEmpty .
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:27:03' prior: 50892993!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (now).
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1 onTime: now.
	self should: [store checkOut: aCartId withCard: aCreditCard onTime: now.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: aBook with:1)].
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:27:03' prior: 50892892!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aCreditCard _ objectFactory notExpiredCreditCard .
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store checkOut: cartId withCard:  aCreditCard onTime: now.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:27:03' prior: 50892831!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword onTime: (now) .
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1 onTime: now.
	store checkOut: cartId withCard: aCreditCard onTime: now.
	store checkOut: anotherCartId withCard: aCreditCard onTime: now.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:27:03' prior: 50893065!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store checkOut:cartId  withCard: aCreditCard onTime: now.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: (catalog at: aBook) ).
	
	
	
	
	
	
	
	! !

!methodRemoval: Store #checkOut:withCard: stamp: 'sc 6/24/2021 00:27:03'!
checkOut: aCartId withCard: aCreditCard
	|cashier|
	self registerPurchase: aCartId.
	cashier _ Cashier toCheckout: (carts at: aCartId ) 
		charging: aCreditCard 
		throught: merchantProcessor
		on: (Date today)
		registeringOn: salesBook.
	cashier checkOut.
	(carts at: aCartId) discardItems.!
!Store methodsFor: 'operations' stamp: 'sc 6/24/2021 00:27:41' prior: 50893351!
checkOut: aCartId withCard: aCreditCard onTime: aTimeStamp 
	|cashier|
	self checkIfCart: aCartId IsStillValidAt: aTimeStamp.
	self registerPurchase: aCartId.
	cashier _ Cashier toCheckout: (carts at: aCartId ) 
		charging: aCreditCard 
		throught: merchantProcessor
		on: (Date today)
		registeringOn: salesBook.
	cashier checkOut.
	(carts at: aCartId) discardItems.! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:27:55'!
test21CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp aBook creditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	store addToCart: cartId  aBook: aBook withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.
	
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store checkOut: cartId withCard:creditCard onTime: now]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!methodRemoval: StoreTest #test20CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:27:55'!
test20CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp aBook creditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	store addToCart: cartId  aBook: aBook withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.
	
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store checkOut: cartId withCard:creditCard onTime: now]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:28:05' prior: 50893584!
test21CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp aBook creditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	store addToCart: cartId  aBook: aBook withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.
	
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!testRun: #StoreTest #test21CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:28:06'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:28:06'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:28:06'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:28:06'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:28:06'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:28:06'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:28:07'!
PASSED!

!testRun: #StoreTest #test21CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:28:07'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:30:05'!
test21CartClockResetsWhenOperatingWithIt
	|store cartId aTimeStamp creditCard anEarlierTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aTimeStamp _ now  + 30 minutes	.
	anEarlierTimeStamp _ now + 25 minutes.
	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:32:12' prior: 50893742!
test21CartClockResetsWhenOperatingWithIt
	|store cartId aTimeStamp creditCard anEarlierTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aTimeStamp _ now  + 40 minutes	.
	anEarlierTimeStamp _ now + 25 minutes.
	
	store listCart: cartId onTime: anEarlierTimeStamp.
	self assert:  (store listCart: cartId onTime: aTimeStamp) isEmpty.
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:32:18' prior: 50893763!
test21CartClockResetsWhenOperatingWithIt
	|store cartId aTimeStamp anEarlierTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aTimeStamp _ now  + 40 minutes	.
	anEarlierTimeStamp _ now + 25 minutes.
	
	store listCart: cartId onTime: anEarlierTimeStamp.
	self assert:  (store listCart: cartId onTime: aTimeStamp) isEmpty.
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:32:41' prior: 50893781!
test21CartClockResetsWhenOperatingWithIt
	|store cartId aTimeStamp anEarlierTimeStamp|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aTimeStamp _ now  + 40 minutes	.
	anEarlierTimeStamp _ now + 25 minutes.
	
	self assert: (store listCart: cartId onTime: anEarlierTimeStamp) isEmpty.
	self assert:  (store listCart: cartId onTime: aTimeStamp) isEmpty.
	
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 00:32:42'!
ERROR!
!Cart methodsFor: 'error messages' stamp: 'sc 6/24/2021 00:34:19' prior: 50893148!
raiseErrorIfUnusedFor30minutes: timeStamp. 
	(timeStamp - lastUseTime ) > 29 minutes ifTrue: [self error: self class canNotOperateWhenUnusedFor30Min]
	ifFalse:[lastUseTime _ timeStamp ].
	! !
!Cart methodsFor: 'error messages' stamp: 'sc 6/24/2021 00:34:21' prior: 50893821!
raiseErrorIfUnusedFor30minutes: timeStamp. 
	(timeStamp - lastUseTime ) > 29 minutes ifTrue: [self error: self class canNotOperateWhenUnusedFor30Min]
	ifFalse:[lastUseTime _ timeStamp].
	! !

!testRun: #StoreTest #test21CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:34:31'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 00:34:32'!
PASSED!

!testRun: #StoreTest #test21CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:34:32'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:34:39'!
test22CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp aBook creditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	store addToCart: cartId  aBook: aBook withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.
	
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!methodRemoval: StoreTest #test21CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:34:39'!
test21CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp aBook creditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	store addToCart: cartId  aBook: aBook withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.
	
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:34:47' prior: 50893926!
test22CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp aBook creditCard|
	store _ Store newWith: clientPasswordData withCatalog: catalog  withMerchantProcessor: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	store addToCart: cartId  aBook: aBook withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:35:26' prior: 50891880!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ Store newWith: clientPasswordData withCatalog: catalog withMerchantProcessor: self .
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a' onTime: now]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'sc 6/24/2021 00:38:43'!
createStore: aMerchantProcessor
	^ Store newWith: self defaultUserData withCatalog: self defaultCatalog withMerchantProcessor: self.! !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'sc 6/24/2021 00:38:57' prior: 50894015!
createStore: aMerchantProcessor
	^ Store newWith: self defaultUserData withCatalog: self defaultCatalog withMerchantProcessor: aMerchantProcessor.! !

----SNAPSHOT----(24 June 2021 00:39:02) CuisUniversity-4532.image priorSource: 17854732!
!StoreTestObjectsFactory methodsFor: 'clientData' stamp: 'sc 6/24/2021 00:39:48'!
defaultUserData
	^0! !
!StoreTestObjectsFactory methodsFor: 'userData' stamp: 'sc 6/24/2021 00:40:48' prior: 50894034!
defaultUserData
	| anotherValidClientId anotherValidPassword clientPasswordData invalidClientId validClientId validPassword |
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	clientPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> anotherValidPassword).! !
!StoreTestObjectsFactory methodsFor: 'userData' stamp: 'sc 6/24/2021 00:41:33' prior: 50894038!
defaultUserData
	| anotherValidClientId anotherValidPassword clientPasswordData invalidClientId validClientId validPassword |
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	^clientPasswordData _ Dictionary with: (validClientId-> validPassword ) with: (anotherValidClientId -> 	anotherValidPassword).! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:42:16' prior: 50892076!
test00canCreateACartWithValidCredentials
	|store cartId|
	store _ objectFactory createStore: self.
	cartId _ store createNewCartWith: validClientId  and: validPassword onTime: (now).
	self assert: (store listCart: cartId onTime:  now) isEmpty.
	
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 00:42:25'!
PASSED!

!testRun: #StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:42:25'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:42:42' prior: 50893999!
test01cantCreateACartWithInvalidPassword
	|store|
	store _ objectFactory createStore: self.
	self should: [store createNewCartWith: validClientId  and: validPassword, 'basura para arruinar la contraseï¿½a' onTime: now]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:42:47' prior: 50892089!
test02cantCreateACartWithInvalidUser
	|store|
	store _ objectFactory createStore: self.
	self should: [store createNewCartWith: invalidClientId  and: validPassword onTime: (now)]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError|self assert: (anError messageText) equals: (Store invalidCredentialsErrorMessage)].
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:42:51' prior: 50892104!
test03canCreateACartWithMultipleValidUsers
	|store cartId|
	store _ objectFactory createStore: self.
	cartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword onTime: (now).
	self assert: (store listCart: cartId onTime: now) isEmpty .
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:42:56' prior: 50892117!
test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword
	|store cartId|
	store _ objectFactory createStore: self.
	self should: [cartId _ store createNewCartWith: anotherValidClientId and:validPassword onTime: (now) .]
	raise: Error withExceptionDo:[:anErrorMessage| self assert: (Store invalidCredentialsErrorMessage) 
										equals: (anErrorMessage messageText) ].
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:43:03' prior: 50892134!
test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds
	|store cartId anotherCartsId|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	anotherCartsId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	self assert: (cartId  ~= anotherCartsId).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:43:11' prior: 50893047!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1 onTime: now.
	self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: aBook with: 1).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:43:20' prior: 50892936!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId aBook anotherBook|
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory  anotherItemSellByTheStore .
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1 onTime: now.
	store addToCart: aCartId  aBook: anotherBook  withAmount: 1 onTime: now.
	self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: aBook with: 1 with: anotherBook with: 1).	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:43:27' prior: 50893020!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId aBook|
	aBook _ objectFactory itemSellByTheStore.
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	anotherCartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: aBook  withAmount: 1 onTime: now.
	store addToCart: anotherCartId  aBook: aBook  withAmount: 10 onTime: now.
	self assert: (store listCart: aCartId onTime:now) equals: (OrderedCollection with: aBook with: 1).
	self assert: (store listCart: anotherCartId onTime: now) equals: (OrderedCollection with: aBook with: 10).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:43:33' prior: 50892217!
test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection
	|store clientPurchases|
	store _ objectFactory createStore: self.
	store createNewCartWith: validClientId and: validPassword onTime: (now).
	clientPurchases _ store listPurchasesOf: validClientId withPassword: validPassword.
	self assert:  clientPurchases  equals: (OrderedCollection with: 0).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:43:38' prior: 50890024!
test10listingPurchasingOfInvalidClientRaisesError
	|store |
	store _ objectFactory createStore: self.
	self should: [store listPurchasesOf: invalidClientId withPassword: 'irrelevant password']
	raise: Error
	withExceptionDo: [:anError| self assert: anError messageText equals: Store invalidCredentialsErrorMessage] 
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:43:44' prior: 50889697!
test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError
	|store |
	store _ objectFactory createStore: self.
	self should: [store listPurchasesOf: validClientId withPassword: validPassword, 'garbage meant to ruin password']
	raise: Error
	withExceptionDo: [:anError| self assert: anError messageText equals: Store invalidCredentialsErrorMessage] 
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:43:49' prior: 50893535!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aBook aCreditCard|
	store _ objectFactory createStore: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store checkOut:cartId  withCard: aCreditCard onTime: now.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with: 1 with: (catalog at: aBook) ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:43:55' prior: 50893389!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aBook anotherBook aCreditCard expectedPurchases|
	store _ objectFactory createStore: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore .
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store addToCart: cartId aBook:  anotherBook withAmount: 1 onTime: now.
	

	store checkOut:cartId  withCard: aCreditCard onTime: now.
	expectedPurchases _ OrderedCollection with: aBook with: 1.
	expectedPurchases add: anotherBook; add: 1; add: ( (catalog at: aBook) +  (catalog at: anotherBook)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:44:02' prior: 50893494!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aBook anotherBook aCreditCard|
	store _ objectFactory createStore: self.
	aBook _ objectFactory itemSellByTheStore.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword onTime: (now) .
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1 onTime: now.
	store checkOut: cartId withCard: aCreditCard onTime: now.
	store checkOut: anotherCartId withCard: aCreditCard onTime: now.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: aBook with:1 with: (catalog at: aBook)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:44:07' prior: 50893422!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aBook aCreditCard|
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (now).
	aCreditCard  _ objectFactory notExpiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1 onTime: now.
	store checkOut: aCartId withCard: aCreditCard onTime: now.
	self assert: (store listCart: aCartId onTime: now) isEmpty .
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:44:12' prior: 50893444!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aBook aCreditCard|
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (now).
	aCreditCard  _ objectFactory expiredCreditCard.
	aBook  _ objectFactory itemSellByTheStore.
	
	store addToCart: aCartId aBook: aBook  withAmount: 1 onTime: now.
	self should: [store checkOut: aCartId withCard: aCreditCard onTime: now.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: aBook with:1)].
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:44:16' prior: 50889847!
test17aStoreWithoutSalesHasZeroRegisteredSales
	|store |
	store _ objectFactory createStore: self.
	self assert: store registeredSalesAmount equals: 0.
	self deny: (store hasRegisteredSaleFor: 1)
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:44:22' prior: 50893471!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId aBook aCreditCard |
	store _ objectFactory createStore: self.
	aBook _ objectFactory itemSellByTheStore.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aCreditCard _ objectFactory notExpiredCreditCard .
	
	store addToCart: cartId aBook:  aBook withAmount: 1 onTime: now.
	store checkOut: cartId withCard:  aCreditCard onTime: now.
	self assert: (store hasRegisteredSaleFor: (catalog at: aBook)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:44:26' prior: 50892767!
test19CreatedCartCantListCartAfter30minutesUnused
	|store cartId aTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ DateAndTime now  + 30 minutes	.
	self should: [store listCart: cartId onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:44:31' prior: 50893120!
test20CreatedCartCantAddAnythingAfter30minutesUnused
	|store cartId aTimeStamp aBook|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store addToCart: cartId  aBook: aBook withAmount: 1 onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:44:36' prior: 50893799!
test21CartClockResetsWhenOperatingWithIt
	|store cartId aTimeStamp anEarlierTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aTimeStamp _ now  + 40 minutes	.
	anEarlierTimeStamp _ now + 25 minutes.
	
	self assert: (store listCart: cartId onTime: anEarlierTimeStamp) isEmpty.
	self assert:  (store listCart: cartId onTime: aTimeStamp) isEmpty.
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:44:41' prior: 50893975!
test22CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp aBook creditCard|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aBook _ objectFactory itemSellByTheStore. 
	store addToCart: cartId  aBook: aBook withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!testRun: #StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:44:44'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

!testRun: #StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:44:45'!
PASSED!

----SNAPSHOT----(24 June 2021 00:46:40) CuisUniversity-4532.image priorSource: 17996149!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:47:32' prior: 50892045 overrides: 16927572!
setUp
	objectFactory _ StoreTestObjectsFactory new.
	catalog _ objectFactory defaultCatalog. 
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	debitBehavior := [ :anAmount :aCreditCard | ].
	now _ DateAndTime now.
	
	
	
	! !

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'sc 6/24/2021 00:48:33'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId validPassword clientPasswordData objectFactory catalog debitBehavior now aSoldItem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:48:31' prior: 50894729 overrides: 16927572!
setUp
	objectFactory _ StoreTestObjectsFactory new.
	aSoldItem _ objectFactory itemSellByTheStore.
	catalog _ objectFactory defaultCatalog. 
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	debitBehavior := [ :anAmount :aCreditCard | ].
	now _ DateAndTime now.
	
	
	
	! !

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'sc 6/24/2021 00:49:13'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId validPassword clientPasswordData objectFactory catalog debitBehavior now aSoldItem anotherItem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:49:11' prior: 50894756 overrides: 16927572!
setUp
	objectFactory _ StoreTestObjectsFactory new.
	aSoldItem _ objectFactory itemSellByTheStore.
	anotherItem _ objectFactory  anotherItemSellByTheStore.
	catalog _ objectFactory defaultCatalog. 
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	debitBehavior := [ :anAmount :aCreditCard | ].
	now _ DateAndTime now.
	
	
	
	! !

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'sc 6/24/2021 00:49:26'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'validClientIds validPasswords invalidClientId anotherValidClientId anotherValidPassword validClientId validPassword clientPasswordData objectFactory catalog debitBehavior now anItem anotherItem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'sc 6/24/2021 00:49:26' prior: 50894785 overrides: 16927572!
setUp
	objectFactory _ StoreTestObjectsFactory new.
	anItem _ objectFactory itemSellByTheStore.
	anotherItem _ objectFactory  anotherItemSellByTheStore.
	catalog _ objectFactory defaultCatalog. 
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	debitBehavior := [ :anAmount :aCreditCard | ].
	now _ DateAndTime now.
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:49:59' prior: 50894816 overrides: 16927572!
setUp
	objectFactory _ StoreTestObjectsFactory new.
	anItem _ objectFactory itemSellByTheStore.
	anotherItem _ objectFactory  anotherItemSellByTheStore.
	catalog _ objectFactory defaultCatalog. 
	invalidClientId _ 'enzo vigneti'.
	validClientId _ 'santiagoCorley'.
	anotherValidClientId _'santiagoCorleyCuentaBackUp'.
	validPassword _ '1234abcde'.
	anotherValidPassword _ 'abcde1234'.
	debitBehavior := [ :anAmount :aCreditCard | ].
	now _ DateAndTime now.
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:50:22' prior: 50894240!
test06addingElementToCartIsReflectedWhenListingCart
	|store aCartId |
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: anItem  withAmount: 1 onTime: now.
	self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: anItem with: 1).
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:50:27'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:50:28'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:50:28'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:50:28'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:50:28'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:50:28'!
PASSED!

!testRun: #StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 00:50:28'!
PASSED!

!testRun: #StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:50:28'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:51:09' prior: 50894257!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId|
	anotherItem _ objectFactory  anotherItemSellByTheStore .
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: anItem  withAmount: 1 onTime: now.
	store addToCart: aCartId  aBook: anotherItem  withAmount: 1 onTime: now.
	self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: anItem with: 1 with: anotherItem with: 1).	
	
	
	
	
	! !

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 00:51:11'!
PASSED!

!testRun: #StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:51:11'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:51:18' prior: 50894955!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId|
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: anItem  withAmount: 1 onTime: now.
	store addToCart: aCartId  aBook: anotherItem  withAmount: 1 onTime: now.
	self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: anItem with: 1 with: anotherItem with: 1).	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:51:26' prior: 50895063!
test07addingTwoElementToCartIsReflectedWhenListingCart
	|store aCartId|
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	store addToCart: aCartId  aBook: anItem  withAmount: 1 onTime: now.
	store addToCart: aCartId  aBook: anotherItem  withAmount: 1 onTime: now.
	
	self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: anItem with: 1 with: anotherItem with: 1).	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:51:48' prior: 50894279!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId |
	anItem _ objectFactory itemSellByTheStore.
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	anotherCartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: anItem  withAmount: 1 onTime: now.
	store addToCart: anotherCartId  aBook: anItem  withAmount: 10 onTime: now.
	self assert: (store listCart: aCartId onTime:now) equals: (OrderedCollection with: anItem with: 1).
	self assert: (store listCart: anotherCartId onTime: now) equals: (OrderedCollection with: anItem with: 10).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:51:51' prior: 50895099!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId |
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	anotherCartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: aCartId  aBook: anItem  withAmount: 1 onTime: now.
	store addToCart: anotherCartId  aBook: anItem  withAmount: 10 onTime: now.
	self assert: (store listCart: aCartId onTime:now) equals: (OrderedCollection with: anItem with: 1).
	self assert: (store listCart: anotherCartId onTime: now) equals: (OrderedCollection with: anItem with: 10).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:52:05' prior: 50895124!
test08canAddItemsToDifferentCarts
	|store aCartId anotherCartId |
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	anotherCartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	store addToCart: aCartId  aBook: anItem  withAmount: 1 onTime: now.
	store addToCart: anotherCartId  aBook: anItem  withAmount: 10 onTime: now.
	
	self assert: (store listCart: aCartId onTime:now) equals: (OrderedCollection with: anItem with: 1).
	self assert: (store listCart: anotherCartId onTime: now) equals: (OrderedCollection with: anItem with: 10).
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:52:28' prior: 50894348!
test12listingPurchasingOfClientWithASinglePurchaseContainsIt
	|store cartId aCreditCard|
	store _ objectFactory createStore: self.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  anItem withAmount: 1 onTime: now.
	store checkOut:cartId  withCard: aCreditCard onTime: now.
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: anItem with: 1 with: (catalog at: anItem) ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:53:01' prior: 50894370!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aCreditCard expectedPurchases|
	store _ objectFactory createStore: self.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  anItem withAmount: 1 onTime: now.
	store addToCart: cartId aBook:  anotherItem withAmount: 1 onTime: now.
	

	store checkOut:cartId  withCard: aCreditCard onTime: now.
	expectedPurchases _ OrderedCollection with: anItem with: 1.
	expectedPurchases add: anotherItem; add: 1; add: ( (catalog at: anItem) +  (catalog at: anotherItem)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:53:13' prior: 50895193!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aCreditCard expectedPurchases|
	store _ objectFactory createStore: self.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  anItem withAmount: 1 onTime: now.
	store addToCart: cartId aBook:  anotherItem withAmount: 1 onTime: now.
	

	store checkOut:cartId  withCard: aCreditCard onTime: now.
	expectedPurchases _ OrderedCollection with: anItem with: 1.
	expectedPurchases add: anotherItem; add: 1; add: ( (catalog at: anItem) +  (catalog at: anotherItem)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:53:13'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:53:14'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:53:14'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:53:14'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:53:14'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:53:14'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:53:14'!
PASSED!

!testRun: #StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 00:53:14'!
PASSED!

!testRun: #StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:53:14'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:53:37' prior: 50894402!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId anotherBook aCreditCard|
	store _ objectFactory createStore: self.
	anotherBook _ objectFactory anotherItemSellByTheStore.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword onTime: (now) .
	
	store addToCart: cartId aBook:  anItem withAmount: 1 onTime: now.
	store addToCart: anotherCartId aBook:  anotherBook withAmount: 1 onTime: now.
	store checkOut: cartId withCard: aCreditCard onTime: now.
	store checkOut: anotherCartId withCard: aCreditCard onTime: now.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: anItem with:1 with: (catalog at: anItem)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherBook with:1 with: (catalog at: anotherBook)).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:53:59' prior: 50895338!
test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly
	|store cartId anotherCartId aCreditCard|
	store _ objectFactory createStore: self.
	aCreditCard _ objectFactory notExpiredCreditCard.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	anotherCartId _ store createNewCartWith: anotherValidClientId and: anotherValidPassword onTime: (now) .
	
	store addToCart: cartId aBook:  anItem withAmount: 1 onTime: now.
	store addToCart: anotherCartId aBook:  anotherItem withAmount: 1 onTime: now.
	store checkOut: cartId withCard: aCreditCard onTime: now.
	store checkOut: anotherCartId withCard: aCreditCard onTime: now.
	
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (OrderedCollection with: anItem with:1 with: (catalog at: anItem)).
	
	self assert: (store listPurchasesOf: anotherValidClientId withPassword: anotherValidPassword)
	 equals: (OrderedCollection with: anotherItem with:1 with: (catalog at: anotherItem)).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:54:20' prior: 50894441!
test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList
	|store aCartId aCreditCard|
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (now).
	aCreditCard  _ objectFactory notExpiredCreditCard.
	
	store addToCart: aCartId aBook: anItem  withAmount: 1 onTime: now.
	store checkOut: aCartId withCard: aCreditCard onTime: now.
	self assert: (store listCart: aCartId onTime: now) isEmpty .
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 00:54:22'!
PASSED!

!testRun: #StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:54:22'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:54:37' prior: 50894461!
test16CheckingOutWithAnExpiredCreditCardRaisesError
	|store aCartId aCreditCard|
	store _ objectFactory createStore: self.
	aCartId  _ store createNewCartWith:validClientId  and: validPassword onTime: (now).
	aCreditCard  _ objectFactory expiredCreditCard.
	
	store addToCart: aCartId aBook: anItem  withAmount: 1 onTime: now.
	self should: [store checkOut: aCartId withCard: aCreditCard onTime: now.]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (store listCart: aCartId onTime: now) equals: (OrderedCollection with: anItem with:1)].
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:54:53' prior: 50894496!
test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook
	|store cartId  aCreditCard |
	store _ objectFactory createStore: self.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aCreditCard _ objectFactory notExpiredCreditCard .
	
	store addToCart: cartId aBook:  anItem withAmount: 1 onTime: now.
	store checkOut: cartId withCard:  aCreditCard onTime: now.
	self assert: (store hasRegisteredSaleFor: (catalog at: anItem)).
	self assert: store registeredSalesAmount equals: 1.
	
	
	
	
	
	
	! !

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 00:54:55'!
PASSED!

!testRun: #StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:54:55'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:55:07' prior: 50894534!
test20CreatedCartCantAddAnythingAfter30minutesUnused
	|store cartId aTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store addToCart: cartId  aBook: anItem withAmount: 1 onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:55:25' prior: 50894570!
test22CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp creditCard|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	store addToCart: cartId  aBook: anItem withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:55:40' prior: 50895666!
test22CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp creditCard|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aTimeStamp _ now  + 30 minutes	.
	
	store addToCart: cartId  aBook: anItem withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.

	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!testRun: #StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 00:55:41'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 00:55:42'!
PASSED!

!testRun: #StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 00:55:42'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:58:18' prior: 50895221!
test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt
	|store cartId aCreditCard expectedPurchases|
	store _ objectFactory createStore: self.
	cartId _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aCreditCard _ objectFactory notExpiredCreditCard.
	
	store addToCart: cartId aBook:  anItem withAmount: 1 onTime: now.
	store addToCart: cartId aBook:  anotherItem withAmount: 1 onTime: now.
	
	store checkOut:cartId  withCard: aCreditCard onTime: now.
	expectedPurchases _ OrderedCollection with: anItem with: 1.
	expectedPurchases add: anotherItem; add: 1; add: ( (catalog at: anItem) +  (catalog at: anotherItem)).
	self assert: (store listPurchasesOf: validClientId withPassword: validPassword)
	 equals: (expectedPurchases ).
	
	
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 00:59:50' prior: 50894517!
test19CreatedCartCantListCartAfter30minutesUnused
	|store cartId aTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [store listCart: cartId onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 01:01:00'!
test22CartClockResetsWhenOperatingWithIt
	|store cartId aTimeStamp anEarlierTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aTimeStamp _ now  + 40 minutes	.
	anEarlierTimeStamp _ now + 25 minutes.
	
	self assert: (store listCart: cartId onTime: anEarlierTimeStamp) isEmpty.
	self assert:  (store listCart: cartId onTime: aTimeStamp) isEmpty.
	
	
	
	
	
	
	
	! !

!methodRemoval: StoreTest #test21CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 01:01:00'!
test21CartClockResetsWhenOperatingWithIt
	|store cartId aTimeStamp anEarlierTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).	
	aTimeStamp _ now  + 40 minutes	.
	anEarlierTimeStamp _ now + 25 minutes.
	
	self assert: (store listCart: cartId onTime: anEarlierTimeStamp) isEmpty.
	self assert:  (store listCart: cartId onTime: aTimeStamp) isEmpty.
	
	
	
	
	
	
	
	!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 01:01:06'!
test21CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp creditCard|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aTimeStamp _ now  + 30 minutes	.
	
	store addToCart: cartId  aBook: anItem withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.

	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !

!methodRemoval: StoreTest #test22CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 01:01:06'!
test22CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp creditCard|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	aTimeStamp _ now  + 30 minutes	.
	
	store addToCart: cartId  aBook: anItem withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.

	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 01:01:18' prior: 50895874!
test21CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp creditCard|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ now  + 30 minutes	.
	store addToCart: cartId  aBook: anItem withAmount: 1 onTime: now.
	creditCard _ objectFactory notExpiredCreditCard.

	self should: [store checkOut: cartId withCard:creditCard onTime: aTimeStamp]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].
	
	
	
	
	
	! !
!StoreTest methodsFor: 'time assertions' stamp: 'sc 6/24/2021 01:02:50'!
whenExecutingAfter30MinutesOnACartExpectError: aClosure ! !
!StoreTest methodsFor: 'time assertions' stamp: 'sc 6/24/2021 01:03:50' prior: 50895938!
whenExecutingAfter30MinutesOnACartExpectError: aClosure 
	|store cartId aTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ now  + 30 minutes	.
	self should: aClosure
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].! !
!StoreTest methodsFor: 'time assertions' stamp: 'sc 6/24/2021 01:04:13' prior: 50895943!
whenExecutingAfter30MinutesOnACartExpectError: aClosure 
	|store cartId aTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ now  + 30 minutes	.
	self should: (aClosure value: cartId)
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].! !
!StoreTest methodsFor: 'time assertions' stamp: 'sc 6/24/2021 01:05:01' prior: 50895959!
whenExecutingAfter30MinutesOnACartExpectError: aClosure 
	|store cartId aTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ now  + 30 minutes	.
	self should: (aClosure value: cartId value: aTimeStamp)
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 01:06:32' prior: 50895824!
test19CreatedCartCantListCartAfter30minutesUnused
	
	self whenExecutingAfter30MinutesOnACartExpectError:[
		:cartId :aTimeStamp :store| store listCart: cartId onTime: aTimeStamp]
	
	
	
	
	! !
!StoreTest methodsFor: 'time assertions' stamp: 'sc 6/24/2021 01:07:08' prior: 50895975!
whenExecutingAfter30MinutesOnACartExpectError: aClosure 
	|store cartId aTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ now  + 30 minutes	.
	self should: (aClosure value: cartId value: aTimeStamp value: store)
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].! !

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 01:07:13'!
ERROR!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 01:07:17'!
ERROR!
!StoreTest methodsFor: 'time assertions' stamp: 'sc 6/24/2021 01:07:44' prior: 50896001!
whenExecutingAfter30MinutesOnACartExpectError: aClosure 
	|store cartId aTimeStamp|
	store _ objectFactory createStore: self.
	cartId  _ store createNewCartWith: validClientId and: validPassword onTime: (now).
	
	aTimeStamp _ now  + 30 minutes	.
	self should: [aClosure value: cartId value: aTimeStamp value: store]
	raise: Error
	withExceptionDo:
	[:anError| self assert: anError messageText  equals: Cart canNotOperateWhenUnusedFor30Min].! !

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 01:07:45'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test21CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 01:07:46'!
PASSED!

!testRun: #StoreTest #test22CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 01:07:46'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 01:08:25' prior: 50895648!
test20CreatedCartCantAddAnythingAfter30minutesUnused
	self whenExecutingAfter30MinutesOnACartExpectError:[
		:cartId :aTimeStamp :store| store addToCart: cartId  aBook: anItem withAmount: 1 onTime: aTimeStamp]
	
	
	
	
	
	! !

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 01:08:26'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test21CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 01:08:27'!
PASSED!

!testRun: #StoreTest #test22CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 01:08:27'!
PASSED!
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 01:11:17' prior: 50895917!
test21CreatedCartCantCheckOutAfter30minutesUnused
	|store cartId aTimeStamp creditCard|
	self whenExecutingAfter30MinutesOnACartExpectError:[
		store addToCart: cartId  aBook: anItem withAmount: 1 onTime: now. 
		creditCard _ objectFactory notExpiredCreditCard.
		store checkOut: cartId withCard:creditCard onTime: aTimeStamp].

	
	
	
	
	
	! !
!StoreTest methodsFor: 'messages' stamp: 'sc 6/24/2021 01:11:44' prior: 50896224!
test21CreatedCartCantCheckOutAfter30minutesUnused
	|creditCard|
	self whenExecutingAfter30MinutesOnACartExpectError:[:cartId :aTimeStamp :store|
		store addToCart: cartId  aBook: anItem withAmount: 1 onTime: now. 
		creditCard _ objectFactory notExpiredCreditCard.
		store checkOut: cartId withCard:creditCard onTime: aTimeStamp].

	
	
	
	
	
	! !

!testRun: #StoreTest #test21CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test00canCreateACartWithValidCredentials stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test01cantCreateACartWithInvalidPassword stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test02cantCreateACartWithInvalidUser stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test03canCreateACartWithMultipleValidUsers stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test04cantCreateACartWithValidUserAndAnotherDifferentValidUserPassword stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test05WhenCreatingTwoDifferentCartsTheyHaveDifferentIds stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test06addingElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test07addingTwoElementToCartIsReflectedWhenListingCart stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test08canAddItemsToDifferentCarts stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test09listingPurchasingOfClientWithValidCredentialsWithoutPurchasesReturnsEmptyCollection stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test10listingPurchasingOfInvalidClientRaisesError stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test11listingPurchasingOfValidClientWithInvalidPasswordRaisesError stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test12listingPurchasingOfClientWithASinglePurchaseContainsIt stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test13listingPurchasingOfClientWithMultiplePurchasesInSameCartContainsIt stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test14listingPurchasingOfTwoClientsWithOnePurchaseEachWorksProperly stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test15ListingACartIdOfARecentlyCheckedOutCartProvidesEmptyList stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test16CheckingOutWithAnExpiredCreditCardRaisesError stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test17aStoreWithoutSalesHasZeroRegisteredSales stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test18aCheckOutOfACartWithAnItemIsReflectedInSalesBook stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test19CreatedCartCantListCartAfter30minutesUnused stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test20CreatedCartCantAddAnythingAfter30minutesUnused stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test21CreatedCartCantCheckOutAfter30minutesUnused stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

!testRun: #StoreTest #test22CartClockResetsWhenOperatingWithIt stamp: 'sc 6/24/2021 01:11:46'!
PASSED!

----SNAPSHOT----(24 June 2021 01:14:18) CuisUniversity-4532.image priorSource: 18018392!

----SNAPSHOT----(24 June 2021 01:14:44) CuisUniversity-4532.image priorSource: 18070038!