----STARTUP---- (17 June 2021 11:43:14) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'JR 6/17/2021 11:45:21'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'JR 6/17/2021 11:46:05'!
defaultCatalog
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:46:25'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:47:20'!
createCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today + 3 days)! !

!classRenamed: #CashierTest as: #CheckOutTest stamp: 'JR 6/17/2021 11:47:32'!
Smalltalk renameClassNamed: #CashierTest as: #CheckOutTest!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:47:57'!
createCashier
	
	
	^Cashier with: (MerchantProcessor new).! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:48:12'!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:48:28'!
createExpiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today - 3 days)! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:48:52'!
itemNotSellByTheStore
	
	^'invalidBook'! !

!classDefinition: #CheckOutTest category: 'TusLibros' stamp: 'JR 6/17/2021 11:50:15'!
TestCase subclass: #CheckOutTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckOutTest methodsFor: 'support' stamp: 'JR 6/17/2021 11:50:14' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:51:01' prior: 50891920!
test01CanNotCheckOutEmptyCart

	| cart cashier creditCard salesBook|
	
	cart := testObjectsFactory createCart.
	cashier := testObjectsFactory createCashier.
	creditCard := testObjectsFactory createCreditCard.
	salesBook := OrderedCollection new.
	
	self 
		should: [cashier checkOut: cart with: creditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.
			self assert: salesBook isEmpty]	! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 11:51:03'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:51:37' prior: 50891964!
test02CheckOutCartRegistersTotalToPay

	| cart cashier creditCard salesBook|
	
	cart := testObjectsFactory createCart.
	cashier := testObjectsFactory createCashier.
	creditCard := testObjectsFactory createCreditCard.
	salesBook := OrderedCollection new.
	
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	cashier checkOut: cart with: creditCard registerOn: salesBook .
	
	self assert: salesBook size equals: 1.
	self assert: salesBook includes: 7500  
		! !

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 11:51:39'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:51:52' prior: 50891983!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier salesBook|
	
	cart := testObjectsFactory createCart.
	cashier := testObjectsFactory createCashier.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	
	self 
		should: [cashier checkOut: cart with: self createExpiredCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:52:08' prior: 50892077!
test06MerchantProcessorRegistersStolenCreditCard

	|merchantProcessor creditCard|
	
	creditCard := testObjectsFactory createCreditCard.
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: creditCard .
	
	self assert: merchantProcessor stolenCreditCards size equals: 1.
	self assert: merchantProcessor stolenCreditCards includes: creditCard ! !
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:52:12' prior: 50892109!
test07MerchantProcessorRegistersFakeCreditCard

	|merchantProcessor creditCard|
	
	creditCard := testObjectsFactory createCreditCard.
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: creditCard .
	
	self assert: merchantProcessor fakeCreditCards size equals: 1.
	self assert: merchantProcessor fakeCreditCards includes: creditCard ! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 11:52:14'!
PASSED!

!methodRemoval: CheckOutTest #createCart stamp: 'JR 6/17/2021 11:52:26'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CheckOutTest #createCashier stamp: 'JR 6/17/2021 11:52:26'!
createCashier
	
	
	^Cashier with: (MerchantProcessor new).!

!methodRemoval: CheckOutTest #createCreditCard stamp: 'JR 6/17/2021 11:52:26'!
createCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today + 3 days)!

!methodRemoval: CheckOutTest #createExpiredCreditCard stamp: 'JR 6/17/2021 11:52:26'!
createExpiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' ownedBy: 'Matias' expiring: (Date today - 3 days)!

!methodRemoval: CheckOutTest #defaultCatalog stamp: 'JR 6/17/2021 11:52:26'!
defaultCatalog
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList !

!methodRemoval: CheckOutTest #itemSellByTheStore stamp: 'JR 6/17/2021 11:52:26'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CheckOutTest #setUp stamp: 'JR 6/17/2021 11:52:27'!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.!
!CheckOutTest methodsFor: 'setup' stamp: 'JR 6/17/2021 11:53:30' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 11:53:32'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 11:53:33'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:53:33'!
ERROR!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 11:53:33'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 11:53:33'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 11:53:33'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 11:53:33'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 11:53:33'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 11:53:33'!
ERROR!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 11:53:42'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 11:53:43'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:53:44'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:53:45'!
ERROR!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:53:50' prior: 50895142!
test03CheckingOutWithExpiredCreditCardRaisesError

	| cart cashier salesBook|
	
	cart := testObjectsFactory createCart.
	cashier := testObjectsFactory createCashier.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	
	self 
		should: [cashier checkOut: cart with: testObjectsFactory createExpiredCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:53:52'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 11:53:54'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 11:53:55'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 11:53:58'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 11:53:59'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 11:54:00'!
ERROR!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 11:54:00'!
ERROR!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:54:09' prior: 50892272!
test08CanNotCheckOutWithFakeCreditCard

	| cart cashier salesBook merchantProcessor fakeCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	fakeCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: fakeCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	cashier checkOut: cart with: fakeCreditCard registerOn: salesBook.
	self assert: salesBook isEmpty! !
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:54:16' prior: 50892438!
test09CanNotCheckOutWithStolenCreditCard

	| cart cashier salesBook merchantProcessor stolenCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	stolenCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: stolenCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	cashier checkOut: cart with: stolenCreditCard registerOn: salesBook.
	self assert: salesBook isEmpty! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 11:54:17'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 11:54:17'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 11:54:17'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 11:54:18'!
PASSED!

!methodRemoval: CartTest #createCart stamp: 'JR 6/17/2021 11:54:26'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'JR 6/17/2021 11:54:26'!
defaultCatalog
	
	|priceList|
	
	priceList := Dictionary new		.
	priceList add: #validBook->2500.
	
	^priceList !

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'JR 6/17/2021 11:54:26'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'JR 6/17/2021 11:54:26'!
itemSellByTheStore
	
	^ 'validBook'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'JR 6/17/2021 11:54:46'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setup' stamp: 'JR 6/17/2021 11:54:44' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:54:50' prior: 50890369!
test01NewCartsAreCreatedEmpty

	self assert: testObjectsFactory createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:54:57' prior: 50890374!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:03' prior: 50890387!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:09' prior: 50890395!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:14' prior: 50890408!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:21' prior: 50890421!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:29' prior: 50890429!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self deny: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'JR 6/17/2021 11:55:38' prior: 50890436!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 11:55:40'!
PASSED!

Month month: Date today monthIndex year: Date today yearNumber!

(Month month: Date today monthIndex year: Date today yearNumber) + 1!

(Month month: Date today monthIndex year: Date today yearNumber) + 1!

(Month month: Date today monthIndex year: Date today yearNumber + 1)!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 11:58:55'!
today

	^Month month: Date today monthIndex year: Date today yearNumber! !

!methodRemoval: StoreTestObjectsFactory #today stamp: 'JR 6/17/2021 12:00:46'!
today

	^Month month: Date today monthIndex year: Date today yearNumber!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 12:01:17' prior: 50895075!
createExpiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' 
			ownedBy: 'Matias'
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 12:01:25' prior: 50895583!
createExpiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' 
			ownedBy: 'Matias'
			expiring: (Month month: Date today monthIndex year: Date today yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'JR 6/17/2021 12:01:43' prior: 50895054!
createCreditCard
	
	^CreditCard withNumber: '1111222233334444' 
			ownedBy: 'Matias'
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:01:46'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:01:46'!
ERROR!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:01:46'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:01:46'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:01:47'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'JR 6/17/2021 12:02:35' prior: 50891580!
assertCreditCardIsNotExpired: aCreditCard

	(aCreditCard isExpiredOn: (Month month: Date today monthIndex year: Date today yearNumber)) 
		ifTrue: [self error: self expiredCreditCardErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:02:43'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:02:44'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:02:44'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:02:44'!
ERROR!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:02:44'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:02:44'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:02:44'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:02:44'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:02:44'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:02:44'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:02:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:02:59'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:03:03'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:03:04'!
ERROR!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:03:04'!
ERROR!

(Month month: Date today monthIndex year: Date today yearNumber + 1) < (Month month: Date today monthIndex year: Date today yearNumber)!

(Month month: Date today monthIndex year: Date today yearNumber + 1) > (Month month: Date today monthIndex year: Date today yearNumber + 1)!

(Month month: Date today monthIndex year: Date today yearNumber) subtractFrom: (Month month: Date today monthIndex year: Date today yearNumber + 1)!

365:00:00:00 !

(Month month: Date today monthIndex year: Date today yearNumber + 1) subtractFrom: (Month month: Date today monthIndex year: Date today yearNumber) !
!CreditCard methodsFor: 'testing' stamp: 'JR 6/17/2021 12:08:40' prior: 50891545!
isExpiredOn: aDate
	
	^(expiringDate subtractFrom: aDate) > 0 
	! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:08:45'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:08:45'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:08:45'!
ERROR!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:08:45'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:08:45'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:08:45'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:08:45'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:08:45'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:08:45'!
ERROR!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:08:49'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:08:50'!
ERROR!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:08:50'!
ERROR!

(Month month: Date today monthIndex year: Date today yearNumber + 1) subtractFrom: (Month month: Date today monthIndex year: Date today yearNumber) < 0 !

((Month month: Date today monthIndex year: Date today yearNumber + 1) subtractFrom: (Month month: Date today monthIndex year: Date today yearNumber)) class!

June < May!
!CreditCard methodsFor: 'testing' stamp: 'JR 6/17/2021 12:14:26' prior: 50895785!
isExpiredOn: aDate
	
	^(expiringDate year < aDate year) or: [(expiringDate year = aDate year) and: [expiringDate month < aDate month]]
	! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:14:28'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:14:28'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:14:28'!
ERROR!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:14:29'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:14:29'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:14:29'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:14:29'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:14:29'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:14:29'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:14:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:14:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:14:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:14:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:14:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:14:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:14:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:14:34'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:14:41'!
ERROR!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:14:41'!
ERROR!

(Month month: Date today monthIndex year: Date today yearNumber + 1) year!

(Month month: Date today monthIndex year: Date today yearNumber + 1) yearNumber!
!CreditCard methodsFor: 'testing' stamp: 'JR 6/17/2021 12:15:54' prior: 50895841!
isExpiredOn: aDate
	
	^(expiringDate yearNumber < aDate yearNumber) or: [(expiringDate yearNumber = aDate yearNumber) and: [expiringDate month < aDate month]]
	! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:15:58'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:16:00'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:16:01'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:16:01'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:31:43' prior: 50895352!
test08CanNotCheckOutWithFakeCreditCard

	| cart cashier salesBook merchantProcessor fakeCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	fakeCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: fakeCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: fakeCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor fakeCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:32:42' prior: 50892393!
charge: aCreditCard

	self assertCreditCardIsNotStolen.
	self assertCreditCardIsNotFake.! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:33:05' prior: 50896037!
charge: aCreditCard

	self assertCreditCardIsNotStolen: aCreditCard .
	self assertCreditCardIsNotFake: aCreditCard ! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:33:40'!
assertCreditCardIsNotStolen: aCreditCard

	
	(stolenCreditCards includes: aCreditCard) ifTrue: [self error: self stolenCreditCardErrorMessage]! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:33:42' prior: 50896050!
assertCreditCardIsNotStolen: aCreditCard

	(stolenCreditCards includes: aCreditCard) ifTrue: [self error: self stolenCreditCardErrorMessage]! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:34:17'!
assertCreditCardIsNotFake: aCreditCard

	(fakeCreditCards includes: aCreditCard) ifTrue: [self error: self fakeCreditCardErrorMessage]! !
!MerchantProcessor methodsFor: 'error messages' stamp: 'JR 6/17/2021 12:34:43'!
fakeCreditCardErrorMessage
	
	^'Credit card is fake'! !
!MerchantProcessor methodsFor: 'error messages' stamp: 'JR 6/17/2021 12:34:51'!
stolenCreditCardErrorMessage
	
	^'Credit card is stolen'! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:34:56'!
ERROR!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:34:56'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:34:56'!
ERROR!
!Cashier methodsFor: 'check out' stamp: 'JR 6/17/2021 12:35:36' prior: 50892400!
checkOut: aCart with: aCreditCard registerOn: aSalesBook
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	merchantProcessor charge: aCreditCard.
	aSalesBook add: aCart totalPriceOfProducts.
	
	^aSalesBook! !
!Cashier methodsFor: 'check out' stamp: 'JR 6/17/2021 12:35:42' prior: 50896113!
checkOut: aCart with: aCreditCard registerOn: aSalesBook
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	
	merchantProcessor charge: aCreditCard.
	
	aSalesBook add: aCart totalPriceOfProducts.
	
	^aSalesBook! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:35:46'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:35:46'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:35:46'!
ERROR!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:35:51'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:35:53'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:36:28' prior: 50895372!
test09CanNotCheckOutWithStolenCreditCard

	| cart cashier salesBook merchantProcessor stolenCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	stolenCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: stolenCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: stolenCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor stolenCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:36:29'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:36:32'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:36:32'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:36:32'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:36:32'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:36:33'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:36:33'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:36:33'!
PASSED!

!testRun: #CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:36:33'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:36:33'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:36:46'!
test10CanNotCheckOutWithStolenCreditCard

	| cart cashier salesBook merchantProcessor stolenCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	stolenCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: stolenCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: stolenCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor stolenCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !

!methodRemoval: CheckOutTest #test09CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:36:46'!
test09CanNotCheckOutWithStolenCreditCard

	| cart cashier salesBook merchantProcessor stolenCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	stolenCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsStolen: stolenCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: stolenCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor stolenCreditCardErrorMessage.
			self assert: salesBook isEmpty]	!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:36:51'!
test09CanNotCheckOutWithFakeCreditCard

	| cart cashier salesBook merchantProcessor fakeCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	fakeCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: fakeCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: fakeCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor fakeCreditCardErrorMessage.
			self assert: salesBook isEmpty]	! !

!methodRemoval: CheckOutTest #test08CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:36:51'!
test08CanNotCheckOutWithFakeCreditCard

	| cart cashier salesBook merchantProcessor fakeCreditCard|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	fakeCreditCard := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardAsFake: fakeCreditCard .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: fakeCreditCard registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor fakeCreditCardErrorMessage.
			self assert: salesBook isEmpty]	!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:39:25'!
test08MerchantProcessorRegistersCreditCardWithInsufficientBalance

	|merchantProcessor creditCard|
	
	creditCard := testObjectsFactory createCreditCard.
	
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardWithInsufficientBalance: creditCard .
	
	self assert: merchantProcessor creditCardsWithInsufficientBalance size equals: 1.
	self assert: merchantProcessor creditCardsWithInsufficientBalance includes: creditCard ! !

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'JR 6/17/2021 12:40:05'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'stolenCreditCards fakeCreditCards creditCardsWithInsufficientBalance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'register cards' stamp: 'JR 6/17/2021 12:40:04'!
registerCreditCardWithInsufficientBalance: aCreditCard

	creditCardsWithInsufficientBalance add: aCreditCard ! !
!MerchantProcessor methodsFor: 'initialization' stamp: 'JR 6/17/2021 12:40:20' prior: 50892184 overrides: 16896425!
initialize

	stolenCreditCards := OrderedCollection new.
	fakeCreditCards := OrderedCollection new.
	creditCardsWithInsufficientBalance := OrderedCollection new.! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test08MerchantProcessorRegistersCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:40:36'!
ERROR!

!testRun: #CheckOutTest #test09CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test10CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:40:36'!
PASSED!

!testRun: #CheckOutTest #test08MerchantProcessorRegistersCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:40:36'!
ERROR!
!MerchantProcessor methodsFor: 'accessing' stamp: 'JR 6/17/2021 12:41:10'!
creditCardsWithInsufficientBalance

	^creditCardsWithInsufficientBalance copy! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test08MerchantProcessorRegistersCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:41:14'!
PASSED!

!testRun: #CheckOutTest #test10CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:41:14'!
PASSED!
!CheckOutTest methodsFor: 'tests' stamp: 'JR 6/17/2021 12:42:09'!
test11CanNotCheckOutWithCreditCardWithInsufficientBalance

	| cart cashier salesBook merchantProcessor creditCardWithInsufficientBalance|
	
	cart := testObjectsFactory createCart.
	cart add: 3 of: testObjectsFactory itemSellByTheStore.	
	salesBook := OrderedCollection new.
	creditCardWithInsufficientBalance := testObjectsFactory createCreditCard .
	merchantProcessor := MerchantProcessor new.
	merchantProcessor registerCreditCardWithInsufficientBalance: creditCardWithInsufficientBalance .
	
	cashier := Cashier with: merchantProcessor .
	
	self 
		should: [cashier checkOut: cart with: creditCardWithInsufficientBalance registerOn: salesBook]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = merchantProcessor creditCardWithInsufficientBalanceErrorMessage.
			self assert: salesBook isEmpty]	! !
!MerchantProcessor methodsFor: 'error messages' stamp: 'JR 6/17/2021 12:42:27'!
creditCardWithInsufficientBalanceErrorMessage
	
	^'Credit card has insufficient balance'! !
!MerchantProcessor methodsFor: 'charging' stamp: 'JR 6/17/2021 12:43:00' prior: 50896043!
charge: aCreditCard

	self assertCreditCardIsNotStolen: aCreditCard .
	self assertCreditCardIsNotFake: aCreditCard .
	self assertCreditCardHasSufficientBalance: aCreditCard ! !
!MerchantProcessor methodsFor: 'assertions' stamp: 'JR 6/17/2021 12:43:29'!
assertCreditCardHasSufficientBalance: aCreditCard 

	(creditCardsWithInsufficientBalance includes: aCreditCard) 
		ifTrue: [self error: self creditCardHasInsufficientBalanceErrorMessage]! !
!MerchantProcessor methodsFor: 'assertions' stamp: 'JR 6/17/2021 12:43:58' prior: 50896504!
assertCreditCardHasSufficientBalance: aCreditCard 

	(creditCardsWithInsufficientBalance includes: aCreditCard) 
		ifTrue: [self error: self creditCardWithInsufficientBalanceErrorMessage]! !

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test08MerchantProcessorRegistersCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test10CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CheckOutTest #test11CanNotCheckOutWithCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:44:01'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test01CanNotCheckOutEmptyCart stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test02CheckOutCartRegistersTotalToPay stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test03CheckingOutWithExpiredCreditCardRaisesError stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test04CreatingCreditCardWithInvalidNumberRaisesError stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test05CreatingCreditCardWithEmptyOwnerRaisesError stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test06MerchantProcessorRegistersStolenCreditCard stamp: 'JR 6/17/2021 12:44:03'!
PASSED!

!testRun: #CheckOutTest #test07MerchantProcessorRegistersFakeCreditCard stamp: 'JR 6/17/2021 12:44:04'!
PASSED!

!testRun: #CheckOutTest #test08MerchantProcessorRegistersCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:44:04'!
PASSED!

!testRun: #CheckOutTest #test09CanNotCheckOutWithFakeCreditCard stamp: 'JR 6/17/2021 12:44:04'!
PASSED!

!testRun: #CheckOutTest #test10CanNotCheckOutWithStolenCreditCard stamp: 'JR 6/17/2021 12:44:04'!
PASSED!

!testRun: #CheckOutTest #test11CanNotCheckOutWithCreditCardWithInsufficientBalance stamp: 'JR 6/17/2021 12:44:04'!
PASSED!

----QUIT----(17 June 2021 12:45:25) CuisUniversity-4532.image priorSource: 18027914!

----STARTUP---- (21 June 2021 15:28:41) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'JR 6/21/2021 15:30:16'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessor stamp: 'JR 6/21/2021 15:30:18'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'stolenCreditCards fakeCreditCards creditCardsWithInsufficientBalance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'JR 6/21/2021 15:30:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expiringDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'JR 6/21/2021 15:30:20'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'JR 6/21/2021 15:30:20'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CheckOutTest stamp: 'JR 6/21/2021 15:30:21'!
TestCase subclass: #CheckOutTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'JR 6/21/2021 15:30:22'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\2021-1c-main\20-TusLibros\Iteracion2\TusLibros-33.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/21/2021 15:35:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/21/2021 15:35:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/21/2021 15:35:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JR 6/21/2021 15:35:54'!
PASSED!

TestCase subclass: #IntefaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #IntefaceTest category: 'TusLibros' stamp: 'JR 6/21/2021 15:50:31'!
TestCase subclass: #IntefaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!IntefaceTest methodsFor: 'no messages' stamp: 'JR 6/21/2021 15:51:16'!
test01CreateCartWithValidUserAndPasswordShouldReturnCartID
! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'JR 6/21/2021 15:55:48'!
Object subclass: #Interface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 15:55:44' prior: 50897289!
test01CreateCartWithValidUserAndPasswordShouldReturnCartID

	|interface clientId password|
	
	interface  := Interface new.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self assert: 1 equals: (interface createCartFor: clientId authenticateWith: password) 
! !
!Interface methodsFor: 'no messages' stamp: 'JR 6/21/2021 15:56:33'!
createCartFor: clientId authenticateWith: password

	^1! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 15:58:20'!
PASSED!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 15:58:23'!
test02CartIDShouldBeUnique

	|interface clientId password cartId1 cartId2|
	
	interface  := Interface new.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId1 := interface createCartFor: clientId authenticateWith: password.
	cartId2 := interface createCartFor: clientId authenticateWith: password.
	
	self deny: cartId1 = cartId2
! !

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 15:58:25'!
FAILURE!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 15:58:25'!
FAILURE!

!classDefinition: #Interface category: 'TusLibros' stamp: 'JR 6/21/2021 15:58:56'!
Object subclass: #Interface
	instanceVariableNames: 'lastCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 15:58:54' prior: 50897312!
createCartFor: clientId authenticateWith: password

	^lastCartId + 1! !
!Interface methodsFor: 'initialization' stamp: 'JR 6/21/2021 15:59:12' overrides: 16896425!
initialize

	lastCartId := 0! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 15:59:16'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 15:59:16'!
FAILURE!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 15:59:16'!
FAILURE!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 15:59:22'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 15:59:23'!
FAILURE!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 15:59:23'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 15:59:50' prior: 50897348!
createCartFor: clientId authenticateWith: password

	lastCartId := lastCartId + 1.
	^lastCartId ! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 15:59:52'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 15:59:52'!
PASSED!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:00:28'!
test03CreateCartWithInvalidUserOrPasswordShouldRaiseError

	|interface clientId password|
	
	interface  := Interface new.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self assert: 1 equals: (interface createCartFor: clientId authenticateWith: password) 
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:05:05' prior: 50897391!
test03CreateCartWithInvalidUserOrPasswordShouldRaiseError

	|interface clientId password|
	
	interface  := Interface new.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self 
		should: [interface createCartFor: clientId authenticateWith: password]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = self invalidQuantityErrorMessage.
			 ]  
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:06:57' prior: 50897403!
test03CreateCartWithInvalidUserOrPasswordShouldRaiseError

	|interface clientId password|
	
	interface  := Interface new.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self 
		should: [interface createCartFor: clientId authenticateWith: password]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = self invalidQuantityErrorMessage.
			self assert: interface lastCartId equals: 0]  
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:09:51' prior: 50897420!
test03CreateCartWithInvalidUserOrPasswordShouldRaiseError

	|interface clientId password|
	
	interface  := Interface new.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self 
		should: [interface createCartFor: clientId authenticateWith: password]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface invalidUserOrPasswordErrorMessage.
			self assert: interface lastCartId equals: 0]  
! !
!Interface methodsFor: 'accessing' stamp: 'JR 6/21/2021 16:10:04'!
lastCartId

	^lastCartId ! !
!Interface class methodsFor: 'error messages' stamp: 'JR 6/21/2021 16:10:55'!
invalidUserOrPasswordErrorMessage

	^'Invalid user or password error message'! !

!classDefinition: #IntefaceTest category: 'TusLibros' stamp: 'JR 6/21/2021 16:12:22'!
TestCase subclass: #IntefaceTest
	instanceVariableNames: 'authenticationBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:12:21' prior: 50897438!
test03CreateCartWithInvalidUserOrPasswordShouldRaiseError

	|interface clientId password|
	
	interface  := Interface new.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	authenticationBehaviour := [].
	
	self 
		should: [interface createCartFor: clientId authenticateWith: password]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface invalidUserOrPasswordErrorMessage.
			self assert: interface lastCartId equals: 0]  
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:13:21' prior: 50897473!
test03CreateCartWithInvalidUserOrPasswordShouldRaiseError

	|interface clientId password|
	
	interface  := Interface new.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	authenticationBehaviour := [ :aUser :aPassword | self error:  Interface invalidUserOrPasswordErrorMessage].
	
	self 
		should: [interface createCartFor: clientId authenticateWith: password]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface invalidUserOrPasswordErrorMessage.
			self assert: interface lastCartId equals: 0]  ! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'JR 6/21/2021 16:14:32'!
Object subclass: #Interface
	instanceVariableNames: 'lastCartId userAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:14:29' prior: 50897378!
createCartFor: clientId authenticateWith: password

	userAuthenticator authenticate: clientId with: password .

	lastCartId := lastCartId + 1.
	^lastCartId ! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:14:39' prior: 50897521!
createCartFor: clientId authenticateWith: password

	userAuthenticator authenticate: clientId with: password.

	lastCartId := lastCartId + 1.
	^lastCartId ! !
!Interface class methodsFor: 'instance creation' stamp: 'JR 6/21/2021 16:15:17'!
with: anAuthenticator

	^self new initializeWith: anAuthenticator ! !
!Interface methodsFor: 'initialization' stamp: 'JR 6/21/2021 16:15:55'!
initializeWith: anAuthenticator

	lastCartId := 0.
	userAuthenticator := anAuthenticator ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:16:10' prior: 50897492!
test03CreateCartWithInvalidUserOrPasswordShouldRaiseError

	|interface clientId password|
	
	interface  := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	authenticationBehaviour := [ :aUser :aPassword | self error:  Interface invalidUserOrPasswordErrorMessage].
	
	self 
		should: [interface createCartFor: clientId authenticateWith: password]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface invalidUserOrPasswordErrorMessage.
			self assert: interface lastCartId equals: 0]  ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:16:53'!
authenticate: aClientId with: aPassword

	authenticationBehaviour value: aClientId value: aPassword ! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 16:17:13'!
ERROR!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 16:17:13'!
ERROR!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/21/2021 16:17:13'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/21/2021 16:17:17'!
PASSED!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:17:33' prior: 50897321!
test02CartIDShouldBeUnique

	|interface clientId password cartId1 cartId2|
	
	interface  := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId1 := interface createCartFor: clientId authenticateWith: password.
	cartId2 := interface createCartFor: clientId authenticateWith: password.
	
	self deny: cartId1 = cartId2
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:17:53' prior: 50897590!
test02CartIDShouldBeUnique

	|interface clientId password cartId1 cartId2|
	
	interface  := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId1 := interface createCartFor: clientId authenticateWith: password.
	cartId2 := interface createCartFor: clientId authenticateWith: password.
	authenticationBehaviour := [:aUser :aPassword | ].
	
	self deny: cartId1 = cartId2
! !

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 16:17:55'!
ERROR!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 16:17:55'!
ERROR!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:18:45' prior: 50897301!
test01CreateCartWithValidUserAndPasswordShouldReturnCartID

	|interface clientId password|
	
	interface  := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self assert: 1 equals: (interface createCartFor: clientId authenticateWith: password) 
! !
!IntefaceTest methodsFor: 'set up' stamp: 'JR 6/21/2021 16:19:06' overrides: 16927572!
setUp

	authenticationBehaviour := [:aUser :aPassword | ]! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:19:29' prior: 50897605!
test02CartIDShouldBeUnique

	|interface clientId password cartId1 cartId2|
	
	interface  := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId1 := interface createCartFor: clientId authenticateWith: password.
	cartId2 := interface createCartFor: clientId authenticateWith: password.
	
	self deny: cartId1 = cartId2
! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 16:19:43'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 16:19:45'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/21/2021 16:19:46'!
PASSED!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 16:20:03'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 16:20:03'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/21/2021 16:20:03'!
PASSED!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:28:55'!
test02ListCartOfEmptyCartShouldBeEmpty

	|interface clientId password|
	
	interface  := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self assert: 1 equals: (interface createCartFor: clientId authenticateWith: password) 
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:29:02'!
test0ListCartOfEmptyCartShouldBeEmpty

	|interface clientId password|
	
	interface  := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self assert: 1 equals: (interface createCartFor: clientId authenticateWith: password) 
! !

!methodRemoval: IntefaceTest #test02ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/21/2021 16:29:02'!
test02ListCartOfEmptyCartShouldBeEmpty

	|interface clientId password|
	
	interface  := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self assert: 1 equals: (interface createCartFor: clientId authenticateWith: password) 
!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:29:09'!
test04ListCartOfEmptyCartShouldBeEmpty

	|interface clientId password|
	
	interface  := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self assert: 1 equals: (interface createCartFor: clientId authenticateWith: password) 
! !

!methodRemoval: IntefaceTest #test0ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/21/2021 16:29:09'!
test0ListCartOfEmptyCartShouldBeEmpty

	|interface clientId password|
	
	interface  := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self assert: 1 equals: (interface createCartFor: clientId authenticateWith: password) 
!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:30:58' prior: 50897714!
test04ListCartOfEmptyCartShouldBeEmpty

	|interface clientId password cartId|
	
	interface := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	self assert: (interface listCart: cartId) isEmpty
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:33:22' prior: 50897737!
test04ListCartOfEmptyCartShouldBeEmpty

	|interface clientId password cartId|
	
	interface := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	self assert: (interface listCart: cartId) isEmpty
! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:34:11'!
listCart: cartId

	^OrderedCollection new! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 16:34:14'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 16:34:14'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/21/2021 16:34:14'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/21/2021 16:34:14'!
PASSED!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:40:22'!
test04ItemAddedToCartShouldAppearInListCart

	|interface clientId password cartId|
	
	interface := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: self itemSellByStore asSymbol).
	self assert: ((interface listCart: cartId) at: self itemSellByStore asSymbol) equals: 3
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:40:46'!
itemSellByTheStore
	
	^ 'validBook'! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:41:03'!
test05ItemAddedToCartShouldAppearInListCart

	|interface clientId password cartId|
	
	interface := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: self itemSellByStore asSymbol).
	self assert: ((interface listCart: cartId) at: self itemSellByStore asSymbol) equals: 3
! !

!methodRemoval: IntefaceTest #test04ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/21/2021 16:41:03'!
test04ItemAddedToCartShouldAppearInListCart

	|interface clientId password cartId|
	
	interface := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: self itemSellByStore asSymbol).
	self assert: ((interface listCart: cartId) at: self itemSellByStore asSymbol) equals: 3
!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:41:27' prior: 50897802!
test05ItemAddedToCartShouldAppearInListCart

	|interface clientId password cartId|
	
	interface := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: self itemSellByTheStore asSymbol).
	self assert: ((interface listCart: cartId) at: self itemSellByTheStore asSymbol) equals: 3
! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:41:47'!
add: aQuantity of: anItem to: cartId! !

!methodRemoval: Interface #initialize stamp: 'JR 6/21/2021 16:42:12'!
initialize

	lastCartId := 0!

!classDefinition: #Interface category: 'TusLibros' stamp: 'JR 6/21/2021 16:42:38'!
Object subclass: #Interface
	instanceVariableNames: 'lastCartId userAuthenticator cartIds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'JR 6/21/2021 16:42:37' prior: 50897542!
initializeWith: anAuthenticator

	lastCartId := 0.
	userAuthenticator := anAuthenticator.
	cartIds := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:44:13' prior: 50897529!
createCartFor: clientId authenticateWith: password

	|cart|

	userAuthenticator authenticate: clientId with: password.

	lastCartId := lastCartId + 1.
	
	"cart := Cart acceptingItemsOf: "
	
	cartIds add: lastCartId asSymbol -> cart.
	
	^lastCartId ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:45:22'!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		yourself ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:45:33'!
itemNotSellByTheStore
	
	^'invalidBook'! !

!methodRemoval: IntefaceTest #itemNotSellByTheStore stamp: 'JR 6/21/2021 16:45:45'!
itemNotSellByTheStore
	
	^'invalidBook'!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:46:03'!
itemSellByTheStorePrice
	
	^10! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:46:46' prior: 50897840!
test05ItemAddedToCartShouldAppearInListCart

	|interface clientId password cartId|
	
	interface := Interface with: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: self itemSellByTheStore).
	self assert: ((interface listCart: cartId) at: self itemSellByTheStore) equals: 3
! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:47:42' prior: 50897881!
createCartFor: clientId authenticateWith: password

	|cart|

	userAuthenticator authenticate: clientId with: password.

	lastCartId := lastCartId + 1.
	
	"cart := Cart acceptingItemsOf: "
	
	cartIds at: lastCartId put: cart.
	
	^lastCartId ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:48:25' prior: 50897627!
test01CreateCartWithValidUserAndPasswordShouldReturnCartID

	|interface clientId password|
	
	interface  := Interface withCatalog: self defaultCatalog andAuthenticator: self.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self assert: 1 equals: (interface createCartFor: clientId authenticateWith: password) 
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:48:49' prior: 50897942!
test01CreateCartWithValidUserAndPasswordShouldReturnCartID

	|interface clientId password|
	
	interface  := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	
	self assert: 1 equals: (interface createCartFor: clientId authenticateWith: password) 
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:49:03'!
defaultInterface
	
	^Interface withCatalog: self defaultCatalog andAuthenticator: self! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:49:18' prior: 50897644!
test02CartIDShouldBeUnique

	|interface clientId password cartId1 cartId2|
	
	interface  := self defaultInterface .
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId1 := interface createCartFor: clientId authenticateWith: password.
	cartId2 := interface createCartFor: clientId authenticateWith: password.
	
	self deny: cartId1 = cartId2
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:49:27' prior: 50897548!
test03CreateCartWithInvalidUserOrPasswordShouldRaiseError

	|interface clientId password|
	
	interface  := self defaultInterface .
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	authenticationBehaviour := [ :aUser :aPassword | self error:  Interface invalidUserOrPasswordErrorMessage].
	
	self 
		should: [interface createCartFor: clientId authenticateWith: password]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface invalidUserOrPasswordErrorMessage.
			self assert: interface lastCartId equals: 0]  ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:49:35' prior: 50897750!
test04ListCartOfEmptyCartShouldBeEmpty

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	self assert: (interface listCart: cartId) isEmpty
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:49:41' prior: 50897912!
test05ItemAddedToCartShouldAppearInListCart

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: self itemSellByTheStore).
	self assert: ((interface listCart: cartId) at: self itemSellByTheStore) equals: 3
! !
!Interface class methodsFor: 'instance creation' stamp: 'JR 6/21/2021 16:50:28'!
withCatalog: aCatalog andAuthenticator: anAuthenticator

	^self new initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator ! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'JR 6/21/2021 16:50:52'!
Object subclass: #Interface
	instanceVariableNames: 'lastCartId userAuthenticator cartIds catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'JR 6/21/2021 16:50:51'!
initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator 

	lastCartId := 0.
	userAuthenticator := anAuthenticator.
	cartIds := Dictionary new.
	catalog := aCatalog.! !

!methodRemoval: Interface #initializeWith: stamp: 'JR 6/21/2021 16:50:55'!
initializeWith: anAuthenticator

	lastCartId := 0.
	userAuthenticator := anAuthenticator.
	cartIds := Dictionary new.!
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:51:10' prior: 50897931!
createCartFor: clientId authenticateWith: password

	|cart|

	userAuthenticator authenticate: clientId with: password.

	lastCartId := lastCartId + 1.
	
	cart := Cart acceptingItemsOf: catalog.
	
	cartIds at: lastCartId put: cart.
	
	^lastCartId ! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:52:19' prior: 50897859!
add: aQuantity of: anItem to: cartId

	(cartIds at: cartId) ! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:52:40' prior: 50898083!
add: aQuantity of: anItem to: cartId

	(cartIds at: cartId) add: aQuantity of: anItem! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:53:27' prior: 50897762!
listCart: cartId

	||
	
	Dictionary new
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:54:23' prior: 50898094!
listCart: cartId

	|list|
	
	list := Dictionary new.
	
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:55:28' prior: 50898099!
listCart: cartId

	|list|
	
	list := Dictionary new.
	
	catalog keys do: [:item | ]
	
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:56:07' prior: 50898104!
listCart: cartId

	|list cart|
	
	list := Dictionary new.
	cart := (cartIds at: cartId).
	
	catalog keys do: [:item | cart occurencesOf: item]
	
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:57:11' prior: 50898110!
listCart: cartId

	|list cart|
	
	list := Dictionary new.
	cart := (cartIds at: cartId).
	
	catalog keys do: [:item | ((cart occurencesOf: item) > 0) ifTrue: [list at: item put: (cart occurencesOf: item)]]
	
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:57:37' prior: 50898118!
listCart: cartId

	|list cart|
	
	list := Dictionary new.
	cart := (cartIds at: cartId).
	
	catalog keys do: [:item | ((cart occurrencesOf: item) > 0) ifTrue: [list at: item put: (cart occurrencesOf: item)]]
	
	
		
	! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 16:57:43'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 16:57:43'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/21/2021 16:57:43'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/21/2021 16:57:43'!
ERROR!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/21/2021 16:57:43'!
ERROR!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 16:57:47'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 16:57:48'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/21/2021 16:57:50'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/21/2021 16:57:51'!
ERROR!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/21/2021 16:57:51'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 16:58:17' prior: 50898128!
listCart: cartId

	|list cart|
	
	list := Dictionary new.
	cart := (cartIds at: cartId).
	
	catalog keys do: [:item | ((cart occurrencesOf: item) > 0) ifTrue: [list at: item put: (cart occurrencesOf: item)]].
	
	^list
	
	
		
	! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 16:58:20'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 16:58:20'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/21/2021 16:58:20'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/21/2021 16:58:21'!
PASSED!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/21/2021 16:58:21'!
PASSED!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:04:56'!
test06
"cartId: Id del carrito creado con /createCart
ccn: N�mero de tarjeta de credito
cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o
cco: Nombre del due�o de la tarjeta."
	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: self itemSellByTheStore).
	self assert: ((interface listCart: cartId) at: self itemSellByTheStore) equals: 3
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:09:27' prior: 50898201!
test06
"cartId: Id del carrito creado con /createCart
ccn: N�mero de tarjeta de credito
cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o
cco: Nombre del due�o de la tarjeta."
	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	self assert: interface checkOutCart: cartId withCreditCard: '1111222233334444' expiring:  Date today ownedBy: 'Hernan Wilkinson'
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:10:09' prior: 50898224!
test06
"cartId: Id del carrito creado con /createCart
ccn: N�mero de tarjeta de credito
cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o
cco: Nombre del due�o de la tarjeta."
	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	self assert: 
	(interface 	checkOutCart: cartId withCreditCard: '1111222233334444' expiring:  Date today ownedBy: 'Hernan Wilkinson')
	
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:11:23' prior: 50898246!
test06

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	self assert: 
	(interface 	checkOutCart: cartId withCreditCard: '1111222233334444' expiring:  Date today ownedBy: 'Hernan Wilkinson')
	
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:11:39' prior: 50898268!
test06

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	self assert: 
	(interface 	checkOutCart: cartId withCreditCard: '1111222233334444' expiring: Date today ownedBy: 'Hernan Wilkinson')
	
! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:12:43' prior: 50898285!
test06

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	self assert: 
	(interface 	checkOutCart: cartId withCreditCard: '1111222233334444' expiring: Date today ownedBy: 'Hernan Wilkinson')! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:14:31' prior: 50898302!
test06

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	interface 	checkOutCart: cartId withCreditCard: '1111222233334444' expiring: Date today ownedBy: 'Hernan Wilkinson'
	
	self assert: interface listPurchasesOf: clientId 
	! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:17:04' prior: 50898319!
test06

	|interface clientId password cartId expextedPurchasesList|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	expextedPurchasesList := interface listCart: cartId.
	
	interface 	checkOutCart: cartId withCreditCard: '1111222233334444' expiring: Date today ownedBy: 'Hernan Wilkinson'.
	
	self assert: (interface listPurchasesOf: clientId authenticateWith: password) equals: expextedPurchasesList ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:18:57' prior: 50898337!
test06

	|interface clientId password cartId expextedPurchasesList|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	expextedPurchasesList := interface listCart: cartId.
	
	interface 	checkOutCart: cartId 
			withCreditCard: '1111222233334444' 
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1) 
			ownedBy: 'Hernan Wilkinson'.
	
	self assert: (interface listPurchasesOf: clientId authenticateWith: password) equals: expextedPurchasesList ! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:19:15'!
listPurchasesOf: clientId authenticateWith: password
	
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:23:36' prior: 50898383!
listPurchasesOf: clientId authenticateWith: password

	
	
	
		
	! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'JR 6/21/2021 17:24:51'!
Object subclass: #Interface
	instanceVariableNames: 'lastCartId userAuthenticator cartIds catalog clients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:24:49' prior: 50898388!
listPurchasesOf: clientId authenticateWith: password
	
	userAuthenticator authenticate: clientId with: password.
	
	^(clients at: clientId) listPurchases
	
	
	
		
	! !
!Interface methodsFor: 'initialization' stamp: 'JR 6/21/2021 17:25:15' prior: 50898057!
initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator 

	lastCartId := 0.
	userAuthenticator := anAuthenticator.
	cartIds := Dictionary new.
	catalog := aCatalog.
	clients := Dictionary new.! !

!classDefinition: #Client category: 'TusLibros' stamp: 'JR 6/21/2021 17:26:29'!
Object subclass: #Client
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:26:45' prior: 50898072!
createCartFor: clientId authenticateWith: password

	|cart|

	userAuthenticator authenticate: clientId with: password.

	lastCartId := lastCartId + 1.
	
	cart := Cart acceptingItemsOf: catalog.
	
	cartIds at: lastCartId put: cart.
	clients at: clientId put: (Client with: lastCartId).
	
	^lastCartId ! !
!Client class methodsFor: 'instance creation' stamp: 'JR 6/21/2021 17:29:19'!
with: cartId

	^self new initializeWith: cartId ! !

!classDefinition: #Client category: 'TusLibros' stamp: 'JR 6/21/2021 17:29:55'!
Object subclass: #Client
	instanceVariableNames: 'cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Client category: 'TusLibros' stamp: 'JR 6/21/2021 17:29:56'!
Object subclass: #Client
	instanceVariableNames: 'cartId purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Client methodsFor: 'initialization' stamp: 'JR 6/21/2021 17:29:54'!
initializeWith: aCartId 

	cartId := aCartId .
	purchases := Dictionary new.! !
!Client methodsFor: 'accessing' stamp: 'JR 6/21/2021 17:30:47'!
listPurchases
	
	^purchases ! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:31:45'!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner
	
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:31:52' prior: 50898465!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	
	
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:34:42' prior: 50898472!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard|
	
	creditCard := 	CreditCard expiringOn: anExpirationDate 
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:34:46' prior: 50898479!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard|
	
	creditCard := 	CreditCard expiringOn: anExpirationDate.
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:36:18' prior: 50898488!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier|
	
	creditCard := 	CreditCard expiringOn: anExpirationDate.
	
	
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:38:03' prior: 50898497!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier total salesBook|
	
	creditCard := 	CreditCard expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: self
		on: Date today
		registeringOn: salesBook.
		
	total := cashier checkOut.
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:38:44' prior: 50898506!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier total salesBook|
	
	creditCard := 	CreditCard expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: self
		on:  DateAndTime now
		registeringOn: salesBook.
		
	total := cashier checkOut.
	
		
	! !

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'JR 6/21/2021 17:41:02'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'no messages' stamp: 'JR 6/21/2021 17:41:23'!
debit: total from: creditCard! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:41:41' prior: 50898522!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier total salesBook|
	
	creditCard := 	CreditCard expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: MerchantProcessor new
		on:  DateAndTime now
		registeringOn: salesBook.
		
	total := cashier checkOut.
	
		
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:41:51' prior: 50898553!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier total salesBook|
	
	creditCard := 	CreditCard expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: MerchantProcessor new
		on:  DateAndTime now
		registeringOn: salesBook.
		
	total := cashier checkOut.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:42:16' prior: 50898570!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier total salesBook|
	
	creditCard := 	CreditCard expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: MerchantProcessor new
		on:  DateAndTime now
		registeringOn: salesBook.
		
	total := cashier checkOut.
	
	clients do: [].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:44:01' prior: 50898587!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier total salesBook|
	
	creditCard := 	CreditCard expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: MerchantProcessor new
		on:  DateAndTime now
		registeringOn: salesBook.
		
	total := cashier checkOut.
	
	clients values do: [:client | (client cartId = cartId) ifTrue: [client addPurchase: (self listCart: cartId)]].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:44:29' prior: 50898604!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier salesBook|
	
	creditCard := 	CreditCard expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: MerchantProcessor new
		on:  DateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	
	clients values do: [:client | (client cartId = cartId) ifTrue: [client addPurchase: (self listCart: cartId)]].
	
	^cartId! !
!Client methodsFor: 'accessing' stamp: 'JR 6/21/2021 17:47:19'!
addPurchase: aPurchase

	aPurchase keysAndValuesDo: [:aKey :aValue | purchases at: aKey put: ((purchases at: aKey ifAbsent: [0]) + aValue )]. ! !
!Client methodsFor: 'accessing' stamp: 'JR 6/21/2021 17:47:50'!
cartId
	
	^cartId ! !

!testRun: #IntefaceTest #test06 stamp: 'JR 6/21/2021 17:48:11'!
PASSED!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/21/2021 17:48:16'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/21/2021 17:48:16'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/21/2021 17:48:16'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/21/2021 17:48:16'!
PASSED!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/21/2021 17:48:16'!
PASSED!

!testRun: #IntefaceTest #test06 stamp: 'JR 6/21/2021 17:48:16'!
PASSED!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/21/2021 17:48:51'!
test06CheckingOutCartShouldAppearInClientsPurchases

	|interface clientId password cartId expextedPurchasesList|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	expextedPurchasesList := interface listCart: cartId.
	
	interface 	checkOutCart: cartId 
			withCreditCard: '1111222233334444' 
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1) 
			ownedBy: 'Hernan Wilkinson'.
	
	self assert: (interface listPurchasesOf: clientId authenticateWith: password) equals: expextedPurchasesList ! !

!methodRemoval: IntefaceTest #test06 stamp: 'JR 6/21/2021 17:48:51'!
test06

	|interface clientId password cartId expextedPurchasesList|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	expextedPurchasesList := interface listCart: cartId.
	
	interface 	checkOutCart: cartId 
			withCreditCard: '1111222233334444' 
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1) 
			ownedBy: 'Hernan Wilkinson'.
	
	self assert: (interface listPurchasesOf: clientId authenticateWith: password) equals: expextedPurchasesList !

----QUIT----(21 June 2021 17:54:07) CuisUniversity-4532.image priorSource: 18079175!

----STARTUP---- (23 June 2021 15:37:05) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!

!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/23/2021 15:45:22'!
withNumber: aNumber ownedBy: anOwner expiringOn: aDate

	self assertNumberHas16Digits: aNumber.
	self assertOwnerIsNotEmpty: anOwner.
	
	^self new initializeWith: aNumber owner: anOwner andExpiringDate: aDate
	! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'JR 6/23/2021 15:45:26'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/23/2021 15:45:37'!
invalidOwnerErrorMessage

	^'Owner can not be empty'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/23/2021 15:45:45'!
invalidNumberErrorMessage

	^'The number must have 16 digits'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/23/2021 15:45:59'!
assertOwnerIsNotEmpty: aName

	(aName withoutLeadingBlanks isEmpty) ifTrue: [self error: self invalidOwnerErrorMessage ]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'JR 6/23/2021 15:46:12'!
assertNumberHas16Digits: aNumber

	((aNumber allSatisfy: [:a | a isDigit]) and: [aNumber size = 16]) ifFalse: [self error: self invalidNumberErrorMessage]! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'JR 6/23/2021 15:46:46'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'JR 6/23/2021 15:46:47'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration owner number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'JR 6/23/2021 15:46:44'!
initializeWith: aNumber owner: anOwner andExpiringDate: aDate
	
	owner := anOwner .
	number := aNumber.
	expiration := aDate.! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'JR 6/23/2021 15:47:07'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/23/2021 15:47:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/23/2021 15:47:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/23/2021 15:47:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/23/2021 15:47:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/23/2021 15:47:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/23/2021 15:47:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/23/2021 15:47:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/23/2021 15:47:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JR 6/23/2021 15:47:32'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JR 6/23/2021 15:47:32'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JR 6/23/2021 15:47:32'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JR 6/23/2021 15:47:32'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JR 6/23/2021 15:47:32'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JR 6/23/2021 15:47:32'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JR 6/23/2021 15:48:30' prior: 50897215!
expiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' 
		ownedBy: 'Hernan' 
		expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JR 6/23/2021 15:48:35' prior: 50898841!
expiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' 
			ownedBy: 'Hernan' 
			expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'JR 6/23/2021 15:48:47' prior: 50897208!
notExpiredCreditCard
	
	^CreditCard withNumber: '1111222233334444' 
			ownedBy: 'Hernan' 
			expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JR 6/23/2021 15:48:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JR 6/23/2021 15:48:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JR 6/23/2021 15:48:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JR 6/23/2021 15:48:51'!
PASSED!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 15:48:51'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 15:48:51'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 15:48:51'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 15:48:51'!
PASSED!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/23/2021 15:48:51'!
PASSED!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 15:48:51'!
ERROR!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 15:48:51'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/23/2021 15:49:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/23/2021 15:49:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/23/2021 15:49:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/23/2021 15:49:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/23/2021 15:49:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/23/2021 15:49:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/23/2021 15:49:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/23/2021 15:49:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JR 6/23/2021 15:49:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JR 6/23/2021 15:49:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JR 6/23/2021 15:49:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JR 6/23/2021 15:49:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JR 6/23/2021 15:49:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JR 6/23/2021 15:49:11'!
PASSED!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 15:49:15'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 15:49:15'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 15:49:15'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 15:49:15'!
PASSED!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/23/2021 15:49:15'!
PASSED!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 15:49:15'!
ERROR!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 15:49:15'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 15:49:56' prior: 50898624!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier salesBook|
	
	creditCard := 	CreditCard withNumber: aNumber ownedBy: anOwner expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: MerchantProcessor new
		on:  DateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	
	clients values do: [:client | (client cartId = cartId) ifTrue: [client addPurchase: (self listCart: cartId)]].
	
	^cartId! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 15:50:06'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 15:50:06'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 15:50:06'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 15:50:06'!
PASSED!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/23/2021 15:50:06'!
PASSED!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 15:50:06'!
PASSED!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 15:51:53' prior: 50898024!
test05ItemAddedToCartShouldAppearInListCart

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: self itemSellByTheStore).
	self assert: ((interface listCart: cartId) at: self itemSellByTheStore) equals: 3! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 15:55:48' prior: 50899007!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier salesBook|
	
	creditCard := 	CreditCard withNumber: aNumber ownedBy: anOwner expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: MerchantProcessor new
		on:  DateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	
	clients values do: [:client | (client cartId = cartId) ifTrue: [client addPurchase: (self listCart: cartId)]].
	
	^cartId! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 15:56:59' prior: 50899068!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier salesBook|
	
	creditCard := 	CreditCard withNumber: aNumber ownedBy: anOwner expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: MerchantProcessor new
		on:  DateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	
	self addPurchaseToClientOwnerOfCart: cartId.
	
	^cartId! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 15:57:20'!
addPurchaseToClientOwnerOfCart: cartId

	clients values do: [:client | (client cartId = cartId) ifTrue: [client addPurchase: (self listCart: cartId)]].
	
	
		
	! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 15:57:24'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 15:57:24'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 15:57:24'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 15:57:24'!
PASSED!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/23/2021 15:57:24'!
PASSED!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 15:57:24'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 15:57:38' prior: 50899089!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier salesBook|
	
	creditCard := 	CreditCard withNumber: aNumber ownedBy: anOwner expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: MerchantProcessor new
		on:  DateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	self addPurchaseToClientOwnerOfCart: cartId.
	
	^cartId! !

!methodRemoval: Interface class #with: stamp: 'JR 6/23/2021 15:59:02'!
with: anAuthenticator

	^self new initializeWith: anAuthenticator !
!Interface class methodsFor: 'instance creation' stamp: 'JR 6/23/2021 16:01:23'!
withCatalog: aCatalog merchantProcessor: aMerchantProcessor andAuthenticator: anAuthenticator

	^self new initializeWithCatalog: aCatalog merchantProcessor: aMerchantProcessor andAuthenticator: anAuthenticator ! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'JR 6/23/2021 16:01:54'!
Object subclass: #Interface
	instanceVariableNames: 'lastCartId userAuthenticator cartIds catalog clients merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'initialization' stamp: 'JR 6/23/2021 16:01:53'!
initializeWithCatalog: aCatalog merchantProcessor: aMerchantProcessor andAuthenticator: anAuthenticator 

	lastCartId := 0.
	userAuthenticator := anAuthenticator.
	merchantProcessor := aMerchantProcessor .
	cartIds := Dictionary new.
	catalog := aCatalog.
	clients := Dictionary new.
	! !

!methodRemoval: Interface #initializeWithCatalog:andAuthenticator: stamp: 'JR 6/23/2021 16:01:58'!
initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator 

	lastCartId := 0.
	userAuthenticator := anAuthenticator.
	cartIds := Dictionary new.
	catalog := aCatalog.
	clients := Dictionary new.!

!methodRemoval: Interface class #withCatalog:andAuthenticator: stamp: 'JR 6/23/2021 16:02:05'!
withCatalog: aCatalog andAuthenticator: anAuthenticator

	^self new initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:02:30' prior: 50897968!
defaultInterface
	
	^Interface withCatalog: self defaultCatalog merchantProcessor: MerchantProcessor new andAuthenticator: self! !
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:02:40' prior: 50899138!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier salesBook|
	
	creditCard := 	CreditCard withNumber: aNumber ownedBy: anOwner expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: merchantProcessor 
		on:  DateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	self addPurchaseToClientOwnerOfCart: cartId.
	
	^cartId! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 16:02:43'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 16:02:43'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 16:02:44'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 16:02:44'!
PASSED!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/23/2021 16:02:44'!
PASSED!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 16:02:44'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:10:54' prior: 50899215!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier salesBook|
	
	creditCard := 	CreditCard withNumber: aNumber ownedBy: anOwner expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: merchantProcessor 
		on:  DateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	self addPurchaseToClientOwnerOfCart: cartId.
	"devolvemos el cartId como transactionId dado que es �nico"
	^cartId! !

DateAndTime now!

DateAndTime now!

Time now!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:16:03'!
test07CanNotUseCart30MinutesAfterLastOperation

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	"pasa media hora"
	self assert: (interface listPurchasesOf: clientId authenticateWith: password)  ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:16:47' prior: 50899277!
test07CanNotUseCart30MinutesAfterLastOperation

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	"pasa media hora"
	self
		should: [interface ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface invalidUserOrPasswordErrorMessage.
			self assert: interface lastCartId equals: 0]    
	
		! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:18:55' prior: 50899292!
test07CanNotUseCart30MinutesAfterLastOperation

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	"pasa media hora"
	self
		should: [interface add: 3 of: self itemSellByTheStore to: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface cartsTimeLimitExceededErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]  ! !
!Interface class methodsFor: 'error messages' stamp: 'JR 6/23/2021 16:19:28'!
cartsTimeLimitExceededErrorMessage

	^'Can not use cart after 30 minutes have passed'! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:25:13' prior: 50899312!
test07CanNotUseCart30MinutesAfterLastOperation

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface setTimeToCart: cartId. "mensaje privado para poder testear que cuando pasa media hora no se pueda usar el cart"
	
	self
		should: [interface add: 3 of: self itemSellByTheStore to: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface cartsTimeLimitExceededErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]  ! !
!Interface methodsFor: 'cart - private' stamp: 'JR 6/23/2021 16:25:59'!
setTimeToCart: cartId

	! !
!Interface methodsFor: 'cart - private' stamp: 'JR 6/23/2021 16:29:35' prior: 50899363!
setTimeToCart: cartId

	(cartIds at: cartId) timeOfLastUse: DateAndTime now ! !

DateAndTime now - Duration minutes: 30!

Duration minutes: 30 - DateAndTime now !

DateAndTime date: Date today time: -30 minutes!

DateAndTime now - 30 minutes !
!Interface methodsFor: 'cart - private' stamp: 'JR 6/23/2021 16:33:57' prior: 50899367!
setTimeToCart: cartId

	(cartIds at: cartId) timeOfLastUse: DateAndTime now - 30 minutes! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'JR 6/23/2021 16:34:37'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items lastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'JR 6/23/2021 16:34:35' prior: 50896712!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.
	lastUsed := DateAndTime now.! !
!Cart methodsFor: 'time - private' stamp: 'JR 6/23/2021 16:35:29'!
timeOfLastUse: aTime

	lastUsed := aTime! !
!Cart methodsFor: 'adding' stamp: 'JR 6/23/2021 16:35:55' prior: 50896742!
add: anItem

	self assertTimeLimitIsNotExceeded.

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'JR 6/23/2021 16:36:12' prior: 50899402!
add: anItem

	self assertTimeLimitIsNotExceeded.
	
	

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'JR 6/23/2021 16:36:30' prior: 50899407!
add: anItem

	self assertTimeLimitIsNotExceeded.
	
	self timeOfLastUse: DateAndTime now.

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'JR 6/23/2021 16:36:55' prior: 50896734!
add: aQuantity of: anItem
	
	self assertTimeLimitIsNotExceeded.
	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	
	self timeOfLastUse: DateAndTime now.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'assertions' stamp: 'JR 6/23/2021 16:38:56'!
assertTimeLimitIsNotExceeded

	((lastUsed + 30 minutes) < DateAndTime now) ifTrue: [Interface cartsTimeLimitExceededErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'JR 6/23/2021 16:39:05' prior: 50899429!
assertTimeLimitIsNotExceeded

	((lastUsed + 30 minutes) < DateAndTime now) ifTrue: [self error: Interface cartsTimeLimitExceededErrorMessage ]! !
!Cashier methodsFor: 'checkout' stamp: 'JR 6/23/2021 16:40:20' prior: 50896889!
checkOut
	
	cart assertTimeLimitIsNotExceeded.
	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ total! !
!Cashier methodsFor: 'checkout' stamp: 'JR 6/23/2021 16:41:09' prior: 50899444!
checkOut
	
	cart assertTimeLimitIsNotExceeded.
	cart timeOfLastUse: DateAndTime now.
	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ total! !

!testRun: #IntefaceTest #test07CanNotUseCart30MinutesAfterLastOperation stamp: 'JR 6/23/2021 16:41:38'!
PASSED!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:42:41'!
test08CanNotCheckOutCart30MinutesAfterLastOperation

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface setTimeToCart: cartId. "mensaje privado para poder testear que cuando pasa media hora no se pueda usar el cart"
	
	self
		should: [interface checkOutCart: cartId 
			withCreditCard: '1111222233334444' 
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1) 
			ownedBy: 'Hernan Wilkinson'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface cartsTimeLimitExceededErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]  ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:43:07' prior: 50899462!
test08CanNotCheckOutCart30MinutesAfterLastOperation

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	interface setTimeToCart: cartId. 
	
	self
		should: [interface checkOutCart: cartId 
			withCreditCard: '1111222233334444' 
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1) 
			ownedBy: 'Hernan Wilkinson'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface cartsTimeLimitExceededErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]  ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:43:41' prior: 50899491!
test08CanNotCheckOutCart30MinutesAfterLastOperation

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: self itemSellByTheStore to: cartId.
	interface setTimeToCart: cartId. 
	
	self
		should: [interface checkOutCart: cartId 
			withCreditCard: '1111222233334444' 
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1) 
			ownedBy: 'Hernan Wilkinson'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface cartsTimeLimitExceededErrorMessage.
			self assert: (interface listPurchasesOf: clientId authenticateWith: password) isEmpty]  ! !

!testRun: #IntefaceTest #test08CanNotCheckOutCart30MinutesAfterLastOperation stamp: 'JR 6/23/2021 16:43:43'!
PASSED!

!classDefinition: #IntefaceTest category: 'TusLibros' stamp: 'JR 6/23/2021 16:46:39'!
TestCase subclass: #IntefaceTest
	instanceVariableNames: 'authenticationBehaviour testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!IntefaceTest methodsFor: 'set up' stamp: 'JR 6/23/2021 16:46:38' prior: 50897639 overrides: 16927572!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.
	authenticationBehaviour := [:aUser :aPassword | ]! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:47:07' prior: 50899049!
test05ItemAddedToCartShouldAppearInListCart

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: self itemSellByTheStore).
	self assert: ((interface listCart: cartId) at: self itemSellByTheStore) equals: 3! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:47:12' prior: 50899567!
test05ItemAddedToCartShouldAppearInListCart

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: testObjectsFactory itemSellByTheStore).
	self assert: ((interface listCart: cartId) at: testObjectsFactory itemSellByTheStore) equals: 3! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:47:16' prior: 50898676!
test06CheckingOutCartShouldAppearInClientsPurchases

	|interface clientId password cartId expextedPurchasesList|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	expextedPurchasesList := interface listCart: cartId.
	
	interface 	checkOutCart: cartId 
			withCreditCard: '1111222233334444' 
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1) 
			ownedBy: 'Hernan Wilkinson'.
	
	self assert: (interface listPurchasesOf: clientId authenticateWith: password) equals: expextedPurchasesList ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:47:24' prior: 50899339!
test07CanNotUseCart30MinutesAfterLastOperation

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface setTimeToCart: cartId. "mensaje privado para poder testear que cuando pasa media hora no se pueda usar el cart"
	
	self
		should: [interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface cartsTimeLimitExceededErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]  ! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:47:30' prior: 50899519!
test08CanNotCheckOutCart30MinutesAfterLastOperation

	|interface clientId password cartId|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	interface setTimeToCart: cartId. 
	
	self
		should: [interface checkOutCart: cartId 
			withCreditCard: '1111222233334444' 
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1) 
			ownedBy: 'Hernan Wilkinson'.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface cartsTimeLimitExceededErrorMessage.
			self assert: (interface listPurchasesOf: clientId authenticateWith: password) isEmpty]  ! !

!methodRemoval: IntefaceTest #itemSellByTheStore stamp: 'JR 6/23/2021 16:47:38'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: IntefaceTest #defaultCatalog stamp: 'JR 6/23/2021 16:48:05'!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		yourself !

!methodRemoval: IntefaceTest #itemSellByTheStorePrice stamp: 'JR 6/23/2021 16:48:09'!
itemSellByTheStorePrice
	
	^10!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 16:48:11'!
ERROR!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 16:48:11'!
ERROR!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 16:48:11'!
ERROR!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 16:48:11'!
ERROR!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/23/2021 16:48:11'!
ERROR!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 16:48:11'!
ERROR!

!testRun: #IntefaceTest #test07CanNotUseCart30MinutesAfterLastOperation stamp: 'JR 6/23/2021 16:48:11'!
ERROR!

!testRun: #IntefaceTest #test08CanNotCheckOutCart30MinutesAfterLastOperation stamp: 'JR 6/23/2021 16:48:11'!
ERROR!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 16:48:17'!
ERROR!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 16:48:17'!
ERROR!
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:48:35' prior: 50899208!
defaultInterface
	
	^Interface withCatalog: testObjectsFactory defaultCatalog merchantProcessor: MerchantProcessor new andAuthenticator: self! !
!IntefaceTest methodsFor: 'as yet unclassified' stamp: 'JR 6/23/2021 16:48:43' prior: 50899736!
defaultInterface
	
	^Interface withCatalog: testObjectsFactory defaultCatalog 
			merchantProcessor: MerchantProcessor new 
			andAuthenticator: self! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 16:48:45'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 16:48:45'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 16:48:45'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 16:48:45'!
PASSED!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/23/2021 16:48:45'!
PASSED!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 16:48:45'!
PASSED!

!testRun: #IntefaceTest #test07CanNotUseCart30MinutesAfterLastOperation stamp: 'JR 6/23/2021 16:48:45'!
PASSED!

!testRun: #IntefaceTest #test08CanNotCheckOutCart30MinutesAfterLastOperation stamp: 'JR 6/23/2021 16:48:45'!
PASSED!
!IntefaceTest methodsFor: 'default objects' stamp: 'JR 6/23/2021 16:51:06'!
defaultCart
	
	^self defaultInterface createCartFor: 'Hernan Wilkinson' authenticateWith: 'inge1pasion'.! !
!IntefaceTest methodsFor: 'tests' stamp: 'JR 6/23/2021 16:51:27' prior: 50898011!
test04ListCartOfEmptyCartShouldBeEmpty

	|interface cartId|
	
	interface := self defaultInterface.
	cartId := self defaultCart.
	
	self assert: (interface listCart: cartId) isEmpty
! !
!IntefaceTest methodsFor: 'tests' stamp: 'JR 6/23/2021 16:51:42' prior: 50899586!
test05ItemAddedToCartShouldAppearInListCart

	|interface cartId|
	
	interface := self defaultInterface.
	cartId := self defaultCart.
	
	interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: testObjectsFactory itemSellByTheStore).
	self assert: ((interface listCart: cartId) at: testObjectsFactory itemSellByTheStore) equals: 3! !
!IntefaceTest methodsFor: 'tests' stamp: 'JR 6/23/2021 16:51:57' prior: 50899606!
test06CheckingOutCartShouldAppearInClientsPurchases

	|interface clientId password cartId expextedPurchasesList|
	
	interface := self defaultInterface.
	cartId := self defaultCart.
	
	interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	expextedPurchasesList := interface listCart: cartId.
	
	interface 	checkOutCart: cartId 
			withCreditCard: '1111222233334444' 
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1) 
			ownedBy: 'Hernan Wilkinson'.
	
	self assert: (interface listPurchasesOf: clientId authenticateWith: password) equals: expextedPurchasesList ! !
!IntefaceTest methodsFor: 'tests' stamp: 'JR 6/23/2021 16:52:08' prior: 50899632!
test07CanNotUseCart30MinutesAfterLastOperation

	|interface cartId|
	
	interface := self defaultInterface.
	cartId := self defaultCart.
	
	interface setTimeToCart: cartId. "mensaje privado para poder testear que cuando pasa media hora no se pueda usar el cart"
	
	self
		should: [interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface cartsTimeLimitExceededErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]  ! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 16:52:15'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 16:52:15'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 16:52:15'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 16:52:16'!
ERROR!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/23/2021 16:52:16'!
ERROR!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 16:52:16'!
ERROR!

!testRun: #IntefaceTest #test07CanNotUseCart30MinutesAfterLastOperation stamp: 'JR 6/23/2021 16:52:16'!
ERROR!

!testRun: #IntefaceTest #test08CanNotCheckOutCart30MinutesAfterLastOperation stamp: 'JR 6/23/2021 16:52:16'!
PASSED!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 16:52:20'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 16:52:26'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 16:52:27'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 16:52:29'!
ERROR!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 16:52:29'!
ERROR!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 16:53:10'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 16:53:11'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 16:53:12'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 16:53:14'!
ERROR!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 16:53:14'!
ERROR!
!IntefaceTest methodsFor: 'default objects' stamp: 'JR 6/23/2021 16:54:09' prior: 50899780!
defaultCart
	
	! !

!methodRemoval: IntefaceTest #defaultCart stamp: 'JR 6/23/2021 16:54:11'!
defaultCart
	
	!
!IntefaceTest methodsFor: 'tests' stamp: 'JR 6/23/2021 16:54:52' prior: 50899786!
test04ListCartOfEmptyCartShouldBeEmpty

	|interface cartId|
	
	interface := self defaultInterface.
	cartId := interface createCartFor: 'Hernan Wilkinson' authenticateWith: 'inge1pasion'.
	
	self assert: (interface listCart: cartId) isEmpty
! !
!IntefaceTest methodsFor: 'tests' stamp: 'JR 6/23/2021 16:55:07' prior: 50899795!
test05ItemAddedToCartShouldAppearInListCart

	|interface cartId|
	
	interface := self defaultInterface.
	cartId := interface createCartFor: 'Hernan Wilkinson' authenticateWith: 'inge1pasion'.
	
	interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	self assert: ((interface listCart: cartId) includesKey: testObjectsFactory itemSellByTheStore).
	self assert: ((interface listCart: cartId) at: testObjectsFactory itemSellByTheStore) equals: 3! !
!IntefaceTest methodsFor: 'tests' stamp: 'JR 6/23/2021 16:56:04' prior: 50899811!
test06CheckingOutCartShouldAppearInClientsPurchases

	|interface clientId password cartId expextedPurchasesList|
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId.
	expextedPurchasesList := interface listCart: cartId.
	
	interface 	checkOutCart: cartId 
			withCreditCard: '1111222233334444' 
			expiring: (Month month: Date today monthIndex year: Date today yearNumber + 1) 
			ownedBy: 'Hernan Wilkinson'.
	
	self assert: (interface listPurchasesOf: clientId authenticateWith: password) equals: expextedPurchasesList ! !
!IntefaceTest methodsFor: 'tests' stamp: 'JR 6/23/2021 16:56:16' prior: 50899833!
test07CanNotUseCart30MinutesAfterLastOperation

	|interface cartId clientId password |
	
	interface := self defaultInterface.
	clientId := 'Hernan Wilkinson'.
	password := 'inge1pasion'.
	cartId := interface createCartFor: clientId authenticateWith: password.
	
	interface setTimeToCart: cartId. "mensaje privado para poder testear que cuando pasa media hora no se pueda usar el cart"
	
	self
		should: [interface add: 3 of: testObjectsFactory itemSellByTheStore to: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface cartsTimeLimitExceededErrorMessage.
			self assert: (interface listCart: cartId) isEmpty]  ! !

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/23/2021 16:56:28'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/23/2021 16:56:28'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/23/2021 16:56:28'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/23/2021 16:56:28'!
PASSED!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/23/2021 16:56:28'!
PASSED!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/23/2021 16:56:28'!
PASSED!

!testRun: #IntefaceTest #test07CanNotUseCart30MinutesAfterLastOperation stamp: 'JR 6/23/2021 16:56:28'!
PASSED!

!testRun: #IntefaceTest #test08CanNotCheckOutCart30MinutesAfterLastOperation stamp: 'JR 6/23/2021 16:56:28'!
PASSED!

----QUIT----(23 June 2021 16:57:25) CuisUniversity-4532.image priorSource: 18146328!

----STARTUP---- (24 June 2021 16:36:22) as C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\windows64\CuisUniversity-4532.image!


Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'JR 6/24/2021 16:43:59'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'JR 6/24/2021 16:44:06' prior: 50898784!
initializeWith: aNumber owner: anOwner andExpiringDate: aDate
	
	"owner := anOwner .
	number := aNumber."
	expiration := aDate.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'JR 6/24/2021 16:44:09'!
PASSED!

!testRun: #IntefaceTest #test01CreateCartWithValidUserAndPasswordShouldReturnCartID stamp: 'JR 6/24/2021 16:44:10'!
PASSED!

!testRun: #IntefaceTest #test02CartIDShouldBeUnique stamp: 'JR 6/24/2021 16:44:10'!
PASSED!

!testRun: #IntefaceTest #test03CreateCartWithInvalidUserOrPasswordShouldRaiseError stamp: 'JR 6/24/2021 16:44:10'!
PASSED!

!testRun: #IntefaceTest #test04ListCartOfEmptyCartShouldBeEmpty stamp: 'JR 6/24/2021 16:44:10'!
PASSED!

!testRun: #IntefaceTest #test05ItemAddedToCartShouldAppearInListCart stamp: 'JR 6/24/2021 16:44:10'!
PASSED!

!testRun: #IntefaceTest #test06CheckingOutCartShouldAppearInClientsPurchases stamp: 'JR 6/24/2021 16:44:10'!
PASSED!

!testRun: #IntefaceTest #test07CanNotUseCart30MinutesAfterLastOperation stamp: 'JR 6/24/2021 16:44:10'!
PASSED!

!testRun: #IntefaceTest #test08CanNotCheckOutCart30MinutesAfterLastOperation stamp: 'JR 6/24/2021 16:44:10'!
PASSED!
!CreditCard methodsFor: 'initialization' stamp: 'JR 6/24/2021 16:44:14' prior: 50900050!
initializeWith: aNumber owner: anOwner andExpiringDate: aDate
	
	expiration := aDate.! !
!Interface methodsFor: 'check out' stamp: 'JR 6/24/2021 16:47:04' prior: 50899255!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier salesBook|
	
	creditCard := 	CreditCard withNumber: aNumber ownedBy: anOwner expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: merchantProcessor 
		on:  DateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	self addPurchaseToClientOwnerOfCart: cartId.
	"devolvemos el cartId como transactionId"
	^cartId! !
!Interface methodsFor: 'check out' stamp: 'JR 6/24/2021 16:47:29' prior: 50900137!
checkOutCart: cartId withCreditCard: aNumber 	expiring: anExpirationDate ownedBy: anOwner

	|creditCard cashier salesBook|
	
	creditCard := 	CreditCard withNumber: aNumber ownedBy: anOwner expiringOn: anExpirationDate.
	salesBook := OrderedCollection new.
	cashier := Cashier 
		toCheckout: (cartIds at: cartId)
		charging: creditCard 
		throught: merchantProcessor 
		on:  DateAndTime now
		registeringOn: salesBook.
		
	cashier checkOut.
	self addPurchaseToClientOwnerOfCart: cartId.
	"devolvemos el cartId como transactionId dado que todav�a no hay comportamiento sobre el transactionId"
	^cartId! !